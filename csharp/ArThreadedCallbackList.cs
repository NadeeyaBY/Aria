//------------------------------------------------------------------------------
// <auto-generated />
//
// This file was automatically generated by SWIG (http://www.swig.org).
// Version 3.0.8
//
// Do not make changes to this file unless you know what you are doing--modify
// the SWIG interface file instead.
//------------------------------------------------------------------------------

namespace AriaCS {

public class ArThreadedCallbackList : global::System.IDisposable {
  private global::System.Runtime.InteropServices.HandleRef swigCPtr;
  protected bool swigCMemOwn;

  public ArThreadedCallbackList(global::System.IntPtr cPtr, bool cMemoryOwn) {
    swigCMemOwn = cMemoryOwn;
    swigCPtr = new global::System.Runtime.InteropServices.HandleRef(this, cPtr);
  }

  public static global::System.Runtime.InteropServices.HandleRef getCPtr(ArThreadedCallbackList obj) {
    return (obj == null) ? new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero) : obj.swigCPtr;
  }

  ~ArThreadedCallbackList() {
    Dispose();
  }

  public virtual void Dispose() {
    lock(this) {
      if (swigCPtr.Handle != global::System.IntPtr.Zero) {
        if (swigCMemOwn) {
          swigCMemOwn = false;
          AriaCSPINVOKE.delete_ArThreadedCallbackList(swigCPtr);
        }
        swigCPtr = new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero);
      }
      global::System.GC.SuppressFinalize(this);
    }
  }

  public ArThreadedCallbackList(int mSecsBetweenCallbacks, string name) : this(AriaCSPINVOKE.new_ArThreadedCallbackList(mSecsBetweenCallbacks, name), true) {
  }

  public void addCallback(ArFunctor functor, int position) {
    AriaCSPINVOKE.ArThreadedCallbackList_addCallback__SWIG_0(swigCPtr, ArFunctor.getCPtr(functor), position);
  }

  public void addCallback(ArFunctor functor) {
    AriaCSPINVOKE.ArThreadedCallbackList_addCallback__SWIG_1(swigCPtr, ArFunctor.getCPtr(functor));
  }

  public void remCallback(ArFunctor functor) {
    AriaCSPINVOKE.ArThreadedCallbackList_remCallback(swigCPtr, ArFunctor.getCPtr(functor));
  }

  public virtual SWIGTYPE_p_void runThread(SWIGTYPE_p_void arg) {
    global::System.IntPtr cPtr = AriaCSPINVOKE.ArThreadedCallbackList_runThread(swigCPtr, SWIGTYPE_p_void.getCPtr(arg));
    SWIGTYPE_p_void ret = (cPtr == global::System.IntPtr.Zero) ? null : new SWIGTYPE_p_void(cPtr, false);
    return ret;
  }

}

}
