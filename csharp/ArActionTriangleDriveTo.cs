//------------------------------------------------------------------------------
// <auto-generated />
//
// This file was automatically generated by SWIG (http://www.swig.org).
// Version 3.0.8
//
// Do not make changes to this file unless you know what you are doing--modify
// the SWIG interface file instead.
//------------------------------------------------------------------------------

namespace AriaCS {

public class ArActionTriangleDriveTo : ArAction {
  private global::System.Runtime.InteropServices.HandleRef swigCPtr;

  public ArActionTriangleDriveTo(global::System.IntPtr cPtr, bool cMemoryOwn) : base(AriaCSPINVOKE.ArActionTriangleDriveTo_SWIGUpcast(cPtr), cMemoryOwn) {
    swigCPtr = new global::System.Runtime.InteropServices.HandleRef(this, cPtr);
  }

  public static global::System.Runtime.InteropServices.HandleRef getCPtr(ArActionTriangleDriveTo obj) {
    return (obj == null) ? new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero) : obj.swigCPtr;
  }

  ~ArActionTriangleDriveTo() {
    Dispose();
  }

  public override void Dispose() {
    lock(this) {
      if (swigCPtr.Handle != global::System.IntPtr.Zero) {
        if (swigCMemOwn) {
          swigCMemOwn = false;
          AriaCSPINVOKE.delete_ArActionTriangleDriveTo(swigCPtr);
        }
        swigCPtr = new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero);
      }
      global::System.GC.SuppressFinalize(this);
      base.Dispose();
    }
  }

  public ArActionTriangleDriveTo(string name, double finalDistFromVertex, double approachDistFromVertex, double speed, double closeDist, double acquireTurnSpeed) : this(AriaCSPINVOKE.new_ArActionTriangleDriveTo__SWIG_0(name, finalDistFromVertex, approachDistFromVertex, speed, closeDist, acquireTurnSpeed), true) {
  }

  public ArActionTriangleDriveTo(string name, double finalDistFromVertex, double approachDistFromVertex, double speed, double closeDist) : this(AriaCSPINVOKE.new_ArActionTriangleDriveTo__SWIG_1(name, finalDistFromVertex, approachDistFromVertex, speed, closeDist), true) {
  }

  public ArActionTriangleDriveTo(string name, double finalDistFromVertex, double approachDistFromVertex, double speed) : this(AriaCSPINVOKE.new_ArActionTriangleDriveTo__SWIG_2(name, finalDistFromVertex, approachDistFromVertex, speed), true) {
  }

  public ArActionTriangleDriveTo(string name, double finalDistFromVertex, double approachDistFromVertex) : this(AriaCSPINVOKE.new_ArActionTriangleDriveTo__SWIG_3(name, finalDistFromVertex, approachDistFromVertex), true) {
  }

  public ArActionTriangleDriveTo(string name, double finalDistFromVertex) : this(AriaCSPINVOKE.new_ArActionTriangleDriveTo__SWIG_4(name, finalDistFromVertex), true) {
  }

  public ArActionTriangleDriveTo(string name) : this(AriaCSPINVOKE.new_ArActionTriangleDriveTo__SWIG_5(name), true) {
  }

  public ArActionTriangleDriveTo() : this(AriaCSPINVOKE.new_ArActionTriangleDriveTo__SWIG_6(), true) {
  }

  public void setAcquire(bool acquire) {
    AriaCSPINVOKE.ArActionTriangleDriveTo_setAcquire__SWIG_0(swigCPtr, acquire);
  }

  public void setAcquire() {
    AriaCSPINVOKE.ArActionTriangleDriveTo_setAcquire__SWIG_1(swigCPtr);
  }

  public bool getAcquire() {
    bool ret = AriaCSPINVOKE.ArActionTriangleDriveTo_getAcquire(swigCPtr);
    return ret;
  }

  public void setFinalDistFromVertex(double dist) {
    AriaCSPINVOKE.ArActionTriangleDriveTo_setFinalDistFromVertex(swigCPtr, dist);
  }

  public double getFinalDistFromVertex() {
    double ret = AriaCSPINVOKE.ArActionTriangleDriveTo_getFinalDistFromVertex(swigCPtr);
    return ret;
  }

  public void setTriangleParams(double line1Length, double angleBetween, double line2Length) {
    AriaCSPINVOKE.ArActionTriangleDriveTo_setTriangleParams__SWIG_0(swigCPtr, line1Length, angleBetween, line2Length);
  }

  public void setTriangleParams(double line1Length, double angleBetween) {
    AriaCSPINVOKE.ArActionTriangleDriveTo_setTriangleParams__SWIG_1(swigCPtr, line1Length, angleBetween);
  }

  public void setTriangleParams(double line1Length) {
    AriaCSPINVOKE.ArActionTriangleDriveTo_setTriangleParams__SWIG_2(swigCPtr, line1Length);
  }

  public void setTriangleParams() {
    AriaCSPINVOKE.ArActionTriangleDriveTo_setTriangleParams__SWIG_3(swigCPtr);
  }

  public void setParameters(double finalDistFromVertex, double approachDistFromVertex, double speed, double closeDist, double acquireTurnSpeed) {
    AriaCSPINVOKE.ArActionTriangleDriveTo_setParameters__SWIG_0(swigCPtr, finalDistFromVertex, approachDistFromVertex, speed, closeDist, acquireTurnSpeed);
  }

  public void setParameters(double finalDistFromVertex, double approachDistFromVertex, double speed, double closeDist) {
    AriaCSPINVOKE.ArActionTriangleDriveTo_setParameters__SWIG_1(swigCPtr, finalDistFromVertex, approachDistFromVertex, speed, closeDist);
  }

  public void setParameters(double finalDistFromVertex, double approachDistFromVertex, double speed) {
    AriaCSPINVOKE.ArActionTriangleDriveTo_setParameters__SWIG_2(swigCPtr, finalDistFromVertex, approachDistFromVertex, speed);
  }

  public void setParameters(double finalDistFromVertex, double approachDistFromVertex) {
    AriaCSPINVOKE.ArActionTriangleDriveTo_setParameters__SWIG_3(swigCPtr, finalDistFromVertex, approachDistFromVertex);
  }

  public void setParameters(double finalDistFromVertex) {
    AriaCSPINVOKE.ArActionTriangleDriveTo_setParameters__SWIG_4(swigCPtr, finalDistFromVertex);
  }

  public void setParameters() {
    AriaCSPINVOKE.ArActionTriangleDriveTo_setParameters__SWIG_5(swigCPtr);
  }

  public bool getAdjustVertex() {
    bool ret = AriaCSPINVOKE.ArActionTriangleDriveTo_getAdjustVertex(swigCPtr);
    return ret;
  }

  public void setAdjustVertex(bool adjustVertex) {
    AriaCSPINVOKE.ArActionTriangleDriveTo_setAdjustVertex(swigCPtr, adjustVertex);
  }

  public void setVertexOffset(int localXOffset, int localYOffset, double thOffset) {
    AriaCSPINVOKE.ArActionTriangleDriveTo_setVertexOffset(swigCPtr, localXOffset, localYOffset, thOffset);
  }

  public void setUseLegacyVertexOffset(bool useLegacyVertexOffset) {
    AriaCSPINVOKE.ArActionTriangleDriveTo_setUseLegacyVertexOffset(swigCPtr, useLegacyVertexOffset);
  }

  public bool getUseLegacyVertexOffset() {
    bool ret = AriaCSPINVOKE.ArActionTriangleDriveTo_getUseLegacyVertexOffset(swigCPtr);
    return ret;
  }

  public bool getGotoVertex() {
    bool ret = AriaCSPINVOKE.ArActionTriangleDriveTo_getGotoVertex(swigCPtr);
    return ret;
  }

  public void setGotoVertex(bool gotoVertex) {
    AriaCSPINVOKE.ArActionTriangleDriveTo_setGotoVertex(swigCPtr, gotoVertex);
  }

  public void setIgnoreTriangleDist(double dist, bool useIgnoreInGotoVertexMode) {
    AriaCSPINVOKE.ArActionTriangleDriveTo_setIgnoreTriangleDist__SWIG_0(swigCPtr, dist, useIgnoreInGotoVertexMode);
  }

  public void setIgnoreTriangleDist(double dist) {
    AriaCSPINVOKE.ArActionTriangleDriveTo_setIgnoreTriangleDist__SWIG_1(swigCPtr, dist);
  }

  public void setIgnoreTriangleDist() {
    AriaCSPINVOKE.ArActionTriangleDriveTo_setIgnoreTriangleDist__SWIG_2(swigCPtr);
  }

  public double getIgnoreTriangleDist() {
    double ret = AriaCSPINVOKE.ArActionTriangleDriveTo_getIgnoreTriangleDist(swigCPtr);
    return ret;
  }

  public bool getUseIgnoreInGotoVertexMode() {
    bool ret = AriaCSPINVOKE.ArActionTriangleDriveTo_getUseIgnoreInGotoVertexMode(swigCPtr);
    return ret;
  }

  public void setVertexUnseenStopMSecs(int vertexUnseenStopMSecs) {
    AriaCSPINVOKE.ArActionTriangleDriveTo_setVertexUnseenStopMSecs__SWIG_0(swigCPtr, vertexUnseenStopMSecs);
  }

  public void setVertexUnseenStopMSecs() {
    AriaCSPINVOKE.ArActionTriangleDriveTo_setVertexUnseenStopMSecs__SWIG_1(swigCPtr);
  }

  public int getVertexUnseenStopMSecs() {
    int ret = AriaCSPINVOKE.ArActionTriangleDriveTo_getVertexUnseenStopMSecs(swigCPtr);
    return ret;
  }

  public void setMaxDistBetweenLinePoints(int maxDistBetweenLinePoints) {
    AriaCSPINVOKE.ArActionTriangleDriveTo_setMaxDistBetweenLinePoints__SWIG_0(swigCPtr, maxDistBetweenLinePoints);
  }

  public void setMaxDistBetweenLinePoints() {
    AriaCSPINVOKE.ArActionTriangleDriveTo_setMaxDistBetweenLinePoints__SWIG_1(swigCPtr);
  }

  public void setMaxLateralDist(int maxLateralDist) {
    AriaCSPINVOKE.ArActionTriangleDriveTo_setMaxLateralDist__SWIG_0(swigCPtr, maxLateralDist);
  }

  public void setMaxLateralDist() {
    AriaCSPINVOKE.ArActionTriangleDriveTo_setMaxLateralDist__SWIG_1(swigCPtr);
  }

  public void setMaxAngleMisalignment(int maxAngleMisalignment) {
    AriaCSPINVOKE.ArActionTriangleDriveTo_setMaxAngleMisalignment__SWIG_0(swigCPtr, maxAngleMisalignment);
  }

  public void setMaxAngleMisalignment() {
    AriaCSPINVOKE.ArActionTriangleDriveTo_setMaxAngleMisalignment__SWIG_1(swigCPtr);
  }

  public ArActionTriangleDriveTo.State getState() {
    ArActionTriangleDriveTo.State ret = (ArActionTriangleDriveTo.State)AriaCSPINVOKE.ArActionTriangleDriveTo_getState(swigCPtr);
    return ret;
  }

  public bool getVertexSeen() {
    bool ret = AriaCSPINVOKE.ArActionTriangleDriveTo_getVertexSeen(swigCPtr);
    return ret;
  }

  public void setLineFinder(ArLineFinder lineFinder) {
    AriaCSPINVOKE.ArActionTriangleDriveTo_setLineFinder(swigCPtr, ArLineFinder.getCPtr(lineFinder));
  }

  public ArLineFinder getLineFinder() {
    global::System.IntPtr cPtr = AriaCSPINVOKE.ArActionTriangleDriveTo_getLineFinder(swigCPtr);
    ArLineFinder ret = (cPtr == global::System.IntPtr.Zero) ? null : new ArLineFinder(cPtr, false);
    return ret;
  }

  public void setLogging(bool logging) {
    AriaCSPINVOKE.ArActionTriangleDriveTo_setLogging__SWIG_0(swigCPtr, logging);
  }

  public bool setLogging() {
    bool ret = AriaCSPINVOKE.ArActionTriangleDriveTo_setLogging__SWIG_1(swigCPtr);
    return ret;
  }

  public override void activate() {
    AriaCSPINVOKE.ArActionTriangleDriveTo_activate(swigCPtr);
  }

  public override void deactivate() {
    AriaCSPINVOKE.ArActionTriangleDriveTo_deactivate(swigCPtr);
  }

  public override void setRobot(ArRobot robot) {
    AriaCSPINVOKE.ArActionTriangleDriveTo_setRobot(swigCPtr, ArRobot.getCPtr(robot));
  }

  public override ArActionDesired fire(ArActionDesired currentDesired) {
    global::System.IntPtr cPtr = AriaCSPINVOKE.ArActionTriangleDriveTo_fire(swigCPtr, ArActionDesired.getCPtr(currentDesired));
    ArActionDesired ret = (cPtr == global::System.IntPtr.Zero) ? null : new ArActionDesired(cPtr, false);
    if (AriaCSPINVOKE.SWIGPendingException.Pending) throw AriaCSPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public override ArActionDesired getDesired() {
    global::System.IntPtr cPtr = AriaCSPINVOKE.ArActionTriangleDriveTo_getDesired(swigCPtr);
    ArActionDesired ret = (cPtr == global::System.IntPtr.Zero) ? null : new ArActionDesired(cPtr, false);
    return ret;
  }

  public enum State {
    STATE_INACTIVE,
    STATE_ACQUIRE,
    STATE_SEARCHING,
    STATE_GOTO_APPROACH,
    STATE_ALIGN_APPROACH,
    STATE_GOTO_VERTEX,
    STATE_GOTO_FINAL,
    STATE_ALIGN_FINAL,
    STATE_SUCCEEDED,
    STATE_FAILED
  }

}

}
