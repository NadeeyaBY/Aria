//------------------------------------------------------------------------------
// <auto-generated />
//
// This file was automatically generated by SWIG (http://www.swig.org).
// Version 3.0.8
//
// Do not make changes to this file unless you know what you are doing--modify
// the SWIG interface file instead.
//------------------------------------------------------------------------------

namespace AriaCS {

public class ArLaser : ArRangeDeviceThreaded {
  private global::System.Runtime.InteropServices.HandleRef swigCPtr;

  public ArLaser(global::System.IntPtr cPtr, bool cMemoryOwn) : base(AriaCSPINVOKE.ArLaser_SWIGUpcast(cPtr), cMemoryOwn) {
    swigCPtr = new global::System.Runtime.InteropServices.HandleRef(this, cPtr);
  }

  public static global::System.Runtime.InteropServices.HandleRef getCPtr(ArLaser obj) {
    return (obj == null) ? new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero) : obj.swigCPtr;
  }

  ~ArLaser() {
    Dispose();
  }

  public override void Dispose() {
    lock(this) {
      if (swigCPtr.Handle != global::System.IntPtr.Zero) {
        if (swigCMemOwn) {
          swigCMemOwn = false;
          AriaCSPINVOKE.delete_ArLaser(swigCPtr);
        }
        swigCPtr = new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero);
      }
      global::System.GC.SuppressFinalize(this);
      base.Dispose();
    }
  }

  public virtual bool blockingConnect() {
    bool ret = AriaCSPINVOKE.ArLaser_blockingConnect(swigCPtr);
    return ret;
  }

  public virtual bool asyncConnect() {
    bool ret = AriaCSPINVOKE.ArLaser_asyncConnect(swigCPtr);
    return ret;
  }

  public virtual bool disconnect() {
    bool ret = AriaCSPINVOKE.ArLaser_disconnect(swigCPtr);
    return ret;
  }

  public virtual bool isConnected() {
    bool ret = AriaCSPINVOKE.ArLaser_isConnected(swigCPtr);
    return ret;
  }

  public virtual bool isTryingToConnect() {
    bool ret = AriaCSPINVOKE.ArLaser_isTryingToConnect(swigCPtr);
    return ret;
  }

  public virtual void setConnectionTimeoutSeconds(double seconds) {
    AriaCSPINVOKE.ArLaser_setConnectionTimeoutSeconds(swigCPtr, seconds);
  }

  public virtual double getConnectionTimeoutSeconds() {
    double ret = AriaCSPINVOKE.ArLaser_getConnectionTimeoutSeconds(swigCPtr);
    return ret;
  }

  public ArTime getLastReadingTime() {
    ArTime ret = new ArTime(AriaCSPINVOKE.ArLaser_getLastReadingTime(swigCPtr), true);
    return ret;
  }

  public int getReadingCount() {
    int ret = AriaCSPINVOKE.ArLaser_getReadingCount(swigCPtr);
    return ret;
  }

  public virtual void setDeviceConnection(ArDeviceConnection conn) {
    AriaCSPINVOKE.ArLaser_setDeviceConnection(swigCPtr, ArDeviceConnection.getCPtr(conn));
  }

  public virtual ArDeviceConnection getDeviceConnection() {
    global::System.IntPtr cPtr = AriaCSPINVOKE.ArLaser_getDeviceConnection(swigCPtr);
    ArDeviceConnection ret = (cPtr == global::System.IntPtr.Zero) ? null : new ArDeviceConnection(cPtr, false);
    return ret;
  }

  public void setSensorPosition(double x, double y, double th, double z) {
    AriaCSPINVOKE.ArLaser_setSensorPosition__SWIG_0(swigCPtr, x, y, th, z);
  }

  public void setSensorPosition(double x, double y, double th) {
    AriaCSPINVOKE.ArLaser_setSensorPosition__SWIG_1(swigCPtr, x, y, th);
  }

  public void setSensorPosition(ArPose pose, double z) {
    AriaCSPINVOKE.ArLaser_setSensorPosition__SWIG_2(swigCPtr, ArPose.getCPtr(pose), z);
    if (AriaCSPINVOKE.SWIGPendingException.Pending) throw AriaCSPINVOKE.SWIGPendingException.Retrieve();
  }

  public void setSensorPosition(ArPose pose) {
    AriaCSPINVOKE.ArLaser_setSensorPosition__SWIG_3(swigCPtr, ArPose.getCPtr(pose));
    if (AriaCSPINVOKE.SWIGPendingException.Pending) throw AriaCSPINVOKE.SWIGPendingException.Retrieve();
  }

  public bool hasSensorPosition() {
    bool ret = AriaCSPINVOKE.ArLaser_hasSensorPosition(swigCPtr);
    return ret;
  }

  public ArPose getSensorPosition() {
    ArPose ret = new ArPose(AriaCSPINVOKE.ArLaser_getSensorPosition(swigCPtr), true);
    return ret;
  }

  public double getSensorPositionX() {
    double ret = AriaCSPINVOKE.ArLaser_getSensorPositionX(swigCPtr);
    return ret;
  }

  public double getSensorPositionY() {
    double ret = AriaCSPINVOKE.ArLaser_getSensorPositionY(swigCPtr);
    return ret;
  }

  public double getSensorPositionZ() {
    double ret = AriaCSPINVOKE.ArLaser_getSensorPositionZ(swigCPtr);
    return ret;
  }

  public double getSensorPositionTh() {
    double ret = AriaCSPINVOKE.ArLaser_getSensorPositionTh(swigCPtr);
    return ret;
  }

  public int getLaserNumber() {
    int ret = AriaCSPINVOKE.ArLaser_getLaserNumber(swigCPtr);
    return ret;
  }

  public void setInfoLogLevel(ArLog.LogLevel infoLogLevel) {
    AriaCSPINVOKE.ArLaser_setInfoLogLevel(swigCPtr, (int)infoLogLevel);
  }

  public ArLog.LogLevel getInfoLogLevel() {
    ArLog.LogLevel ret = (ArLog.LogLevel)AriaCSPINVOKE.ArLaser_getInfoLogLevel(swigCPtr);
    return ret;
  }

  public void setCumulativeCleanDist(double dist) {
    AriaCSPINVOKE.ArLaser_setCumulativeCleanDist(swigCPtr, dist);
  }

  public double getCumulativeCleanDist() {
    double ret = AriaCSPINVOKE.ArLaser_getCumulativeCleanDist(swigCPtr);
    return ret;
  }

  public void setCumulativeCleanInterval(int milliSeconds) {
    AriaCSPINVOKE.ArLaser_setCumulativeCleanInterval(swigCPtr, milliSeconds);
  }

  public int getCumulativeCleanInterval() {
    int ret = AriaCSPINVOKE.ArLaser_getCumulativeCleanInterval(swigCPtr);
    return ret;
  }

  public void setCumulativeCleanOffset(int milliSeconds) {
    AriaCSPINVOKE.ArLaser_setCumulativeCleanOffset(swigCPtr, milliSeconds);
  }

  public int getCumulativeCleanOffset() {
    int ret = AriaCSPINVOKE.ArLaser_getCumulativeCleanOffset(swigCPtr);
    return ret;
  }

  public void resetLastCumulativeCleanTime() {
    AriaCSPINVOKE.ArLaser_resetLastCumulativeCleanTime(swigCPtr);
  }

  public bool addIgnoreReadings(string ignoreReadings) {
    bool ret = AriaCSPINVOKE.ArLaser_addIgnoreReadings(swigCPtr, ignoreReadings);
    return ret;
  }

  public void addIgnoreReading(double ignoreReading) {
    AriaCSPINVOKE.ArLaser_addIgnoreReading(swigCPtr, ignoreReading);
  }

  public void clearIgnoreReadings() {
    AriaCSPINVOKE.ArLaser_clearIgnoreReadings(swigCPtr);
  }

  public SWIGTYPE_p_std__setT_int_t getIgnoreReadings() {
    global::System.IntPtr cPtr = AriaCSPINVOKE.ArLaser_getIgnoreReadings(swigCPtr);
    SWIGTYPE_p_std__setT_int_t ret = (cPtr == global::System.IntPtr.Zero) ? null : new SWIGTYPE_p_std__setT_int_t(cPtr, false);
    return ret;
  }

  public bool getFlipped() {
    bool ret = AriaCSPINVOKE.ArLaser_getFlipped(swigCPtr);
    return ret;
  }

  public bool setFlipped(bool flipped) {
    bool ret = AriaCSPINVOKE.ArLaser_setFlipped(swigCPtr, flipped);
    return ret;
  }

  public int getDefaultTcpPort() {
    int ret = AriaCSPINVOKE.ArLaser_getDefaultTcpPort(swigCPtr);
    return ret;
  }

  public string getDefaultPortType() {
    string ret = AriaCSPINVOKE.ArLaser_getDefaultPortType(swigCPtr);
    return ret;
  }

  public bool canSetDegrees() {
    bool ret = AriaCSPINVOKE.ArLaser_canSetDegrees(swigCPtr);
    return ret;
  }

  public double getStartDegreesMin() {
    double ret = AriaCSPINVOKE.ArLaser_getStartDegreesMin(swigCPtr);
    return ret;
  }

  public double getStartDegreesMax() {
    double ret = AriaCSPINVOKE.ArLaser_getStartDegreesMax(swigCPtr);
    return ret;
  }

  public double getStartDegrees() {
    double ret = AriaCSPINVOKE.ArLaser_getStartDegrees(swigCPtr);
    return ret;
  }

  public bool setStartDegrees(double startDegrees) {
    bool ret = AriaCSPINVOKE.ArLaser_setStartDegrees(swigCPtr, startDegrees);
    return ret;
  }

  public double getEndDegreesMin() {
    double ret = AriaCSPINVOKE.ArLaser_getEndDegreesMin(swigCPtr);
    return ret;
  }

  public double getEndDegreesMax() {
    double ret = AriaCSPINVOKE.ArLaser_getEndDegreesMax(swigCPtr);
    return ret;
  }

  public double getEndDegrees() {
    double ret = AriaCSPINVOKE.ArLaser_getEndDegrees(swigCPtr);
    return ret;
  }

  public bool setEndDegrees(double endDegrees) {
    bool ret = AriaCSPINVOKE.ArLaser_setEndDegrees(swigCPtr, endDegrees);
    return ret;
  }

  public bool canChooseDegrees() {
    bool ret = AriaCSPINVOKE.ArLaser_canChooseDegrees(swigCPtr);
    return ret;
  }

  public SWIGTYPE_p_std__listT_std__string_t getDegreesChoices() {
    SWIGTYPE_p_std__listT_std__string_t ret = new SWIGTYPE_p_std__listT_std__string_t(AriaCSPINVOKE.ArLaser_getDegreesChoices(swigCPtr), true);
    return ret;
  }

  public string getDegreesChoicesString() {
    string ret = AriaCSPINVOKE.ArLaser_getDegreesChoicesString(swigCPtr);
    return ret;
  }

  public bool chooseDegrees(string range) {
    bool ret = AriaCSPINVOKE.ArLaser_chooseDegrees(swigCPtr, range);
    return ret;
  }

  public string getDegreesChoice() {
    string ret = AriaCSPINVOKE.ArLaser_getDegreesChoice(swigCPtr);
    return ret;
  }

  public double getDegreesChoiceDouble() {
    double ret = AriaCSPINVOKE.ArLaser_getDegreesChoiceDouble(swigCPtr);
    return ret;
  }

  public SWIGTYPE_p_std__mapT_std__string_double_std__lessT_std__string_t_t getDegreesChoicesMap() {
    SWIGTYPE_p_std__mapT_std__string_double_std__lessT_std__string_t_t ret = new SWIGTYPE_p_std__mapT_std__string_double_std__lessT_std__string_t_t(AriaCSPINVOKE.ArLaser_getDegreesChoicesMap(swigCPtr), true);
    return ret;
  }

  public bool canSetIncrement() {
    bool ret = AriaCSPINVOKE.ArLaser_canSetIncrement(swigCPtr);
    return ret;
  }

  public double getIncrementMin() {
    double ret = AriaCSPINVOKE.ArLaser_getIncrementMin(swigCPtr);
    return ret;
  }

  public double getIncrementMax() {
    double ret = AriaCSPINVOKE.ArLaser_getIncrementMax(swigCPtr);
    return ret;
  }

  public double getIncrement() {
    double ret = AriaCSPINVOKE.ArLaser_getIncrement(swigCPtr);
    return ret;
  }

  public bool setIncrement(double increment) {
    bool ret = AriaCSPINVOKE.ArLaser_setIncrement(swigCPtr, increment);
    return ret;
  }

  public bool canChooseIncrement() {
    bool ret = AriaCSPINVOKE.ArLaser_canChooseIncrement(swigCPtr);
    return ret;
  }

  public SWIGTYPE_p_std__listT_std__string_t getIncrementChoices() {
    SWIGTYPE_p_std__listT_std__string_t ret = new SWIGTYPE_p_std__listT_std__string_t(AriaCSPINVOKE.ArLaser_getIncrementChoices(swigCPtr), true);
    return ret;
  }

  public string getIncrementChoicesString() {
    string ret = AriaCSPINVOKE.ArLaser_getIncrementChoicesString(swigCPtr);
    return ret;
  }

  public bool chooseIncrement(string increment) {
    bool ret = AriaCSPINVOKE.ArLaser_chooseIncrement(swigCPtr, increment);
    return ret;
  }

  public string getIncrementChoice() {
    string ret = AriaCSPINVOKE.ArLaser_getIncrementChoice(swigCPtr);
    return ret;
  }

  public double getIncrementChoiceDouble() {
    double ret = AriaCSPINVOKE.ArLaser_getIncrementChoiceDouble(swigCPtr);
    return ret;
  }

  public SWIGTYPE_p_std__mapT_std__string_double_std__lessT_std__string_t_t getIncrementChoicesMap() {
    SWIGTYPE_p_std__mapT_std__string_double_std__lessT_std__string_t_t ret = new SWIGTYPE_p_std__mapT_std__string_double_std__lessT_std__string_t_t(AriaCSPINVOKE.ArLaser_getIncrementChoicesMap(swigCPtr), true);
    return ret;
  }

  public bool canChooseUnits() {
    bool ret = AriaCSPINVOKE.ArLaser_canChooseUnits(swigCPtr);
    return ret;
  }

  public SWIGTYPE_p_std__listT_std__string_t getUnitsChoices() {
    SWIGTYPE_p_std__listT_std__string_t ret = new SWIGTYPE_p_std__listT_std__string_t(AriaCSPINVOKE.ArLaser_getUnitsChoices(swigCPtr), true);
    return ret;
  }

  public string getUnitsChoicesString() {
    string ret = AriaCSPINVOKE.ArLaser_getUnitsChoicesString(swigCPtr);
    return ret;
  }

  public bool chooseUnits(string units) {
    bool ret = AriaCSPINVOKE.ArLaser_chooseUnits(swigCPtr, units);
    return ret;
  }

  public string getUnitsChoice() {
    string ret = AriaCSPINVOKE.ArLaser_getUnitsChoice(swigCPtr);
    return ret;
  }

  public bool canChooseReflectorBits() {
    bool ret = AriaCSPINVOKE.ArLaser_canChooseReflectorBits(swigCPtr);
    return ret;
  }

  public SWIGTYPE_p_std__listT_std__string_t getReflectorBitsChoices() {
    SWIGTYPE_p_std__listT_std__string_t ret = new SWIGTYPE_p_std__listT_std__string_t(AriaCSPINVOKE.ArLaser_getReflectorBitsChoices(swigCPtr), true);
    return ret;
  }

  public string getReflectorBitsChoicesString() {
    string ret = AriaCSPINVOKE.ArLaser_getReflectorBitsChoicesString(swigCPtr);
    return ret;
  }

  public bool chooseReflectorBits(string reflectorBits) {
    bool ret = AriaCSPINVOKE.ArLaser_chooseReflectorBits(swigCPtr, reflectorBits);
    return ret;
  }

  public string getReflectorBitsChoice() {
    string ret = AriaCSPINVOKE.ArLaser_getReflectorBitsChoice(swigCPtr);
    return ret;
  }

  public bool canSetPowerControlled() {
    bool ret = AriaCSPINVOKE.ArLaser_canSetPowerControlled(swigCPtr);
    return ret;
  }

  public bool setPowerControlled(bool powerControlled) {
    bool ret = AriaCSPINVOKE.ArLaser_setPowerControlled(swigCPtr, powerControlled);
    return ret;
  }

  public bool getPowerControlled() {
    bool ret = AriaCSPINVOKE.ArLaser_getPowerControlled(swigCPtr);
    return ret;
  }

  public bool canChooseStartingBaud() {
    bool ret = AriaCSPINVOKE.ArLaser_canChooseStartingBaud(swigCPtr);
    return ret;
  }

  public SWIGTYPE_p_std__listT_std__string_t getStartingBaudChoices() {
    SWIGTYPE_p_std__listT_std__string_t ret = new SWIGTYPE_p_std__listT_std__string_t(AriaCSPINVOKE.ArLaser_getStartingBaudChoices(swigCPtr), true);
    return ret;
  }

  public string getStartingBaudChoicesString() {
    string ret = AriaCSPINVOKE.ArLaser_getStartingBaudChoicesString(swigCPtr);
    return ret;
  }

  public bool chooseStartingBaud(string reflectorBits) {
    bool ret = AriaCSPINVOKE.ArLaser_chooseStartingBaud(swigCPtr, reflectorBits);
    return ret;
  }

  public string getStartingBaudChoice() {
    string ret = AriaCSPINVOKE.ArLaser_getStartingBaudChoice(swigCPtr);
    return ret;
  }

  public bool canChooseAutoBaud() {
    bool ret = AriaCSPINVOKE.ArLaser_canChooseAutoBaud(swigCPtr);
    return ret;
  }

  public SWIGTYPE_p_std__listT_std__string_t getAutoBaudChoices() {
    SWIGTYPE_p_std__listT_std__string_t ret = new SWIGTYPE_p_std__listT_std__string_t(AriaCSPINVOKE.ArLaser_getAutoBaudChoices(swigCPtr), true);
    return ret;
  }

  public string getAutoBaudChoicesString() {
    string ret = AriaCSPINVOKE.ArLaser_getAutoBaudChoicesString(swigCPtr);
    return ret;
  }

  public bool chooseAutoBaud(string reflectorBits) {
    bool ret = AriaCSPINVOKE.ArLaser_chooseAutoBaud(swigCPtr, reflectorBits);
    return ret;
  }

  public string getAutoBaudChoice() {
    string ret = AriaCSPINVOKE.ArLaser_getAutoBaudChoice(swigCPtr);
    return ret;
  }

  public void addConnectCB(ArFunctor functor, int position) {
    AriaCSPINVOKE.ArLaser_addConnectCB__SWIG_0(swigCPtr, ArFunctor.getCPtr(functor), position);
  }

  public void addConnectCB(ArFunctor functor) {
    AriaCSPINVOKE.ArLaser_addConnectCB__SWIG_1(swigCPtr, ArFunctor.getCPtr(functor));
  }

  public void remConnectCB(ArFunctor functor) {
    AriaCSPINVOKE.ArLaser_remConnectCB(swigCPtr, ArFunctor.getCPtr(functor));
  }

  public void addFailedConnectCB(ArFunctor functor, int position) {
    AriaCSPINVOKE.ArLaser_addFailedConnectCB__SWIG_0(swigCPtr, ArFunctor.getCPtr(functor), position);
  }

  public void addFailedConnectCB(ArFunctor functor) {
    AriaCSPINVOKE.ArLaser_addFailedConnectCB__SWIG_1(swigCPtr, ArFunctor.getCPtr(functor));
  }

  public void remFailedConnectCB(ArFunctor functor) {
    AriaCSPINVOKE.ArLaser_remFailedConnectCB(swigCPtr, ArFunctor.getCPtr(functor));
  }

  public void addDisconnectNormallyCB(ArFunctor functor, int position) {
    AriaCSPINVOKE.ArLaser_addDisconnectNormallyCB__SWIG_0(swigCPtr, ArFunctor.getCPtr(functor), position);
  }

  public void addDisconnectNormallyCB(ArFunctor functor) {
    AriaCSPINVOKE.ArLaser_addDisconnectNormallyCB__SWIG_1(swigCPtr, ArFunctor.getCPtr(functor));
  }

  public void remDisconnectNormallyCB(ArFunctor functor) {
    AriaCSPINVOKE.ArLaser_remDisconnectNormallyCB(swigCPtr, ArFunctor.getCPtr(functor));
  }

  public void addDisconnectOnErrorCB(ArFunctor functor, int position) {
    AriaCSPINVOKE.ArLaser_addDisconnectOnErrorCB__SWIG_0(swigCPtr, ArFunctor.getCPtr(functor), position);
  }

  public void addDisconnectOnErrorCB(ArFunctor functor) {
    AriaCSPINVOKE.ArLaser_addDisconnectOnErrorCB__SWIG_1(swigCPtr, ArFunctor.getCPtr(functor));
  }

  public void remDisconnectOnErrorCB(ArFunctor functor) {
    AriaCSPINVOKE.ArLaser_remDisconnectOnErrorCB(swigCPtr, ArFunctor.getCPtr(functor));
  }

  public void addReadingCB(ArFunctor functor, int position) {
    AriaCSPINVOKE.ArLaser_addReadingCB__SWIG_0(swigCPtr, ArFunctor.getCPtr(functor), position);
  }

  public void addReadingCB(ArFunctor functor) {
    AriaCSPINVOKE.ArLaser_addReadingCB__SWIG_1(swigCPtr, ArFunctor.getCPtr(functor));
  }

  public void remReadingCB(ArFunctor functor) {
    AriaCSPINVOKE.ArLaser_remReadingCB(swigCPtr, ArFunctor.getCPtr(functor));
  }

  public uint getAbsoluteMaxRange() {
    uint ret = AriaCSPINVOKE.ArLaser_getAbsoluteMaxRange(swigCPtr);
    return ret;
  }

  public void copyReadingCount(ArLaser laser) {
    AriaCSPINVOKE.ArLaser_copyReadingCount(swigCPtr, ArLaser.getCPtr(laser));
  }

  public override void setMaxRange(uint maxRange) {
    AriaCSPINVOKE.ArLaser_setMaxRange(swigCPtr, maxRange);
  }

  public override void setCumulativeBufferSize(uint size) {
    AriaCSPINVOKE.ArLaser_setCumulativeBufferSize(swigCPtr, size);
  }

  public virtual bool laserCheckParams() {
    bool ret = AriaCSPINVOKE.ArLaser_laserCheckParams(swigCPtr);
    return ret;
  }

  public override void applyTransform(ArTransform trans, bool doCumulative) {
    AriaCSPINVOKE.ArLaser_applyTransform__SWIG_0(swigCPtr, ArTransform.getCPtr(trans), doCumulative);
    if (AriaCSPINVOKE.SWIGPendingException.Pending) throw AriaCSPINVOKE.SWIGPendingException.Retrieve();
  }

  public override void applyTransform(ArTransform trans) {
    AriaCSPINVOKE.ArLaser_applyTransform__SWIG_1(swigCPtr, ArTransform.getCPtr(trans));
    if (AriaCSPINVOKE.SWIGPendingException.Pending) throw AriaCSPINVOKE.SWIGPendingException.Retrieve();
  }

  public static void useSimpleNamingForAllLasers() {
    AriaCSPINVOKE.ArLaser_useSimpleNamingForAllLasers();
  }

}

}
