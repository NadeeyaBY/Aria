//------------------------------------------------------------------------------
// <auto-generated />
//
// This file was automatically generated by SWIG (http://www.swig.org).
// Version 3.0.8
//
// Do not make changes to this file unless you know what you are doing--modify
// the SWIG interface file instead.
//------------------------------------------------------------------------------

namespace AriaCS {

public class ArMap : ArMapInterface {
  private global::System.Runtime.InteropServices.HandleRef swigCPtr;

  public ArMap(global::System.IntPtr cPtr, bool cMemoryOwn) : base(AriaCSPINVOKE.ArMap_SWIGUpcast(cPtr), cMemoryOwn) {
    swigCPtr = new global::System.Runtime.InteropServices.HandleRef(this, cPtr);
  }

  public static global::System.Runtime.InteropServices.HandleRef getCPtr(ArMap obj) {
    return (obj == null) ? new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero) : obj.swigCPtr;
  }

  ~ArMap() {
    Dispose();
  }

  public override void Dispose() {
    lock(this) {
      if (swigCPtr.Handle != global::System.IntPtr.Zero) {
        if (swigCMemOwn) {
          swigCMemOwn = false;
          AriaCSPINVOKE.delete_ArMap(swigCPtr);
        }
        swigCPtr = new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero);
      }
      global::System.GC.SuppressFinalize(this);
      base.Dispose();
    }
  }

  public ArMap(string baseDirectory, bool addToGlobalConfig, string configSection, string configParam, string configDesc, bool ignoreEmptyFileName, ArPriority.Priority priority, string tempDirectory, int configProcessFilePriority) : this(AriaCSPINVOKE.new_ArMap__SWIG_0(baseDirectory, addToGlobalConfig, configSection, configParam, configDesc, ignoreEmptyFileName, (int)priority, tempDirectory, configProcessFilePriority), true) {
  }

  public ArMap(string baseDirectory, bool addToGlobalConfig, string configSection, string configParam, string configDesc, bool ignoreEmptyFileName, ArPriority.Priority priority, string tempDirectory) : this(AriaCSPINVOKE.new_ArMap__SWIG_1(baseDirectory, addToGlobalConfig, configSection, configParam, configDesc, ignoreEmptyFileName, (int)priority, tempDirectory), true) {
  }

  public ArMap(string baseDirectory, bool addToGlobalConfig, string configSection, string configParam, string configDesc, bool ignoreEmptyFileName, ArPriority.Priority priority) : this(AriaCSPINVOKE.new_ArMap__SWIG_2(baseDirectory, addToGlobalConfig, configSection, configParam, configDesc, ignoreEmptyFileName, (int)priority), true) {
  }

  public ArMap(string baseDirectory, bool addToGlobalConfig, string configSection, string configParam, string configDesc, bool ignoreEmptyFileName) : this(AriaCSPINVOKE.new_ArMap__SWIG_3(baseDirectory, addToGlobalConfig, configSection, configParam, configDesc, ignoreEmptyFileName), true) {
  }

  public ArMap(string baseDirectory, bool addToGlobalConfig, string configSection, string configParam, string configDesc) : this(AriaCSPINVOKE.new_ArMap__SWIG_4(baseDirectory, addToGlobalConfig, configSection, configParam, configDesc), true) {
  }

  public ArMap(string baseDirectory, bool addToGlobalConfig, string configSection, string configParam) : this(AriaCSPINVOKE.new_ArMap__SWIG_5(baseDirectory, addToGlobalConfig, configSection, configParam), true) {
  }

  public ArMap(string baseDirectory, bool addToGlobalConfig, string configSection) : this(AriaCSPINVOKE.new_ArMap__SWIG_6(baseDirectory, addToGlobalConfig, configSection), true) {
  }

  public ArMap(string baseDirectory, bool addToGlobalConfig) : this(AriaCSPINVOKE.new_ArMap__SWIG_7(baseDirectory, addToGlobalConfig), true) {
  }

  public ArMap(string baseDirectory) : this(AriaCSPINVOKE.new_ArMap__SWIG_8(baseDirectory), true) {
  }

  public ArMap() : this(AriaCSPINVOKE.new_ArMap__SWIG_9(), true) {
  }

  public ArMap(ArMap other) : this(AriaCSPINVOKE.new_ArMap__SWIG_10(ArMap.getCPtr(other)), true) {
    if (AriaCSPINVOKE.SWIGPendingException.Pending) throw AriaCSPINVOKE.SWIGPendingException.Retrieve();
  }

  public override SWIGTYPE_p_std__listT_std__string_t getScanTypes() {
    SWIGTYPE_p_std__listT_std__string_t ret = new SWIGTYPE_p_std__listT_std__string_t(AriaCSPINVOKE.ArMap_getScanTypes(swigCPtr), true);
    return ret;
  }

  public override bool setScanTypes(SWIGTYPE_p_std__listT_std__string_t scanTypeList) {
    bool ret = AriaCSPINVOKE.ArMap_setScanTypes(swigCPtr, SWIGTYPE_p_std__listT_std__string_t.getCPtr(scanTypeList));
    if (AriaCSPINVOKE.SWIGPendingException.Pending) throw AriaCSPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public override int lockObj() {
    int ret = AriaCSPINVOKE.ArMap_lockObj(swigCPtr);
    return ret;
  }

  public override int tryLock() {
    int ret = AriaCSPINVOKE.ArMap_tryLock(swigCPtr);
    return ret;
  }

  public override int unlockObj() {
    int ret = AriaCSPINVOKE.ArMap_unlockObj(swigCPtr);
    return ret;
  }

  public virtual string getDisplayString(string scanType) {
    string ret = AriaCSPINVOKE.ArMap_getDisplayString__SWIG_0(swigCPtr, scanType);
    return ret;
  }

  public virtual string getDisplayString() {
    string ret = AriaCSPINVOKE.ArMap_getDisplayString__SWIG_1(swigCPtr);
    return ret;
  }

  public virtual ArPoseVector getPoints(string scanType) {
    global::System.IntPtr cPtr = AriaCSPINVOKE.ArMap_getPoints__SWIG_0(swigCPtr, scanType);
    ArPoseVector ret = (cPtr == global::System.IntPtr.Zero) ? null : new ArPoseVector(cPtr, false);
    return ret;
  }

  public virtual ArPoseVector getPoints() {
    global::System.IntPtr cPtr = AriaCSPINVOKE.ArMap_getPoints__SWIG_1(swigCPtr);
    ArPoseVector ret = (cPtr == global::System.IntPtr.Zero) ? null : new ArPoseVector(cPtr, false);
    return ret;
  }

  public virtual ArPose getMinPose(string scanType) {
    ArPose ret = new ArPose(AriaCSPINVOKE.ArMap_getMinPose__SWIG_0(swigCPtr, scanType), true);
    return ret;
  }

  public virtual ArPose getMinPose() {
    ArPose ret = new ArPose(AriaCSPINVOKE.ArMap_getMinPose__SWIG_1(swigCPtr), true);
    return ret;
  }

  public virtual ArPose getMaxPose(string scanType) {
    ArPose ret = new ArPose(AriaCSPINVOKE.ArMap_getMaxPose__SWIG_0(swigCPtr, scanType), true);
    return ret;
  }

  public virtual ArPose getMaxPose() {
    ArPose ret = new ArPose(AriaCSPINVOKE.ArMap_getMaxPose__SWIG_1(swigCPtr), true);
    return ret;
  }

  public virtual int getNumPoints(string scanType) {
    int ret = AriaCSPINVOKE.ArMap_getNumPoints__SWIG_0(swigCPtr, scanType);
    return ret;
  }

  public virtual int getNumPoints() {
    int ret = AriaCSPINVOKE.ArMap_getNumPoints__SWIG_1(swigCPtr);
    return ret;
  }

  public virtual bool isSortedPoints(string scanType) {
    bool ret = AriaCSPINVOKE.ArMap_isSortedPoints__SWIG_0(swigCPtr, scanType);
    return ret;
  }

  public virtual bool isSortedPoints() {
    bool ret = AriaCSPINVOKE.ArMap_isSortedPoints__SWIG_1(swigCPtr);
    return ret;
  }

  public virtual void setPoints(ArPoseVector points, string scanType, bool isSortedPoints, SWIGTYPE_p_ArMapChangeDetails changeDetails) {
    AriaCSPINVOKE.ArMap_setPoints__SWIG_0(swigCPtr, ArPoseVector.getCPtr(points), scanType, isSortedPoints, SWIGTYPE_p_ArMapChangeDetails.getCPtr(changeDetails));
  }

  public virtual void setPoints(ArPoseVector points, string scanType, bool isSortedPoints) {
    AriaCSPINVOKE.ArMap_setPoints__SWIG_1(swigCPtr, ArPoseVector.getCPtr(points), scanType, isSortedPoints);
  }

  public virtual void setPoints(ArPoseVector points, string scanType) {
    AriaCSPINVOKE.ArMap_setPoints__SWIG_2(swigCPtr, ArPoseVector.getCPtr(points), scanType);
  }

  public virtual void setPoints(ArPoseVector points) {
    AriaCSPINVOKE.ArMap_setPoints__SWIG_3(swigCPtr, ArPoseVector.getCPtr(points));
  }

  public virtual ArLineSegmentVector getLines(string scanType) {
    global::System.IntPtr cPtr = AriaCSPINVOKE.ArMap_getLines__SWIG_0(swigCPtr, scanType);
    ArLineSegmentVector ret = (cPtr == global::System.IntPtr.Zero) ? null : new ArLineSegmentVector(cPtr, false);
    return ret;
  }

  public virtual ArLineSegmentVector getLines() {
    global::System.IntPtr cPtr = AriaCSPINVOKE.ArMap_getLines__SWIG_1(swigCPtr);
    ArLineSegmentVector ret = (cPtr == global::System.IntPtr.Zero) ? null : new ArLineSegmentVector(cPtr, false);
    return ret;
  }

  public virtual ArPose getLineMinPose(string scanType) {
    ArPose ret = new ArPose(AriaCSPINVOKE.ArMap_getLineMinPose__SWIG_0(swigCPtr, scanType), true);
    return ret;
  }

  public virtual ArPose getLineMinPose() {
    ArPose ret = new ArPose(AriaCSPINVOKE.ArMap_getLineMinPose__SWIG_1(swigCPtr), true);
    return ret;
  }

  public virtual ArPose getLineMaxPose(string scanType) {
    ArPose ret = new ArPose(AriaCSPINVOKE.ArMap_getLineMaxPose__SWIG_0(swigCPtr, scanType), true);
    return ret;
  }

  public virtual ArPose getLineMaxPose() {
    ArPose ret = new ArPose(AriaCSPINVOKE.ArMap_getLineMaxPose__SWIG_1(swigCPtr), true);
    return ret;
  }

  public virtual int getNumLines(string scanType) {
    int ret = AriaCSPINVOKE.ArMap_getNumLines__SWIG_0(swigCPtr, scanType);
    return ret;
  }

  public virtual int getNumLines() {
    int ret = AriaCSPINVOKE.ArMap_getNumLines__SWIG_1(swigCPtr);
    return ret;
  }

  public virtual bool isSortedLines(string scanType) {
    bool ret = AriaCSPINVOKE.ArMap_isSortedLines__SWIG_0(swigCPtr, scanType);
    return ret;
  }

  public virtual bool isSortedLines() {
    bool ret = AriaCSPINVOKE.ArMap_isSortedLines__SWIG_1(swigCPtr);
    return ret;
  }

  public virtual void setLines(ArLineSegmentVector lines, string scanType, bool isSortedLines, SWIGTYPE_p_ArMapChangeDetails changeDetails) {
    AriaCSPINVOKE.ArMap_setLines__SWIG_0(swigCPtr, ArLineSegmentVector.getCPtr(lines), scanType, isSortedLines, SWIGTYPE_p_ArMapChangeDetails.getCPtr(changeDetails));
  }

  public virtual void setLines(ArLineSegmentVector lines, string scanType, bool isSortedLines) {
    AriaCSPINVOKE.ArMap_setLines__SWIG_1(swigCPtr, ArLineSegmentVector.getCPtr(lines), scanType, isSortedLines);
  }

  public virtual void setLines(ArLineSegmentVector lines, string scanType) {
    AriaCSPINVOKE.ArMap_setLines__SWIG_2(swigCPtr, ArLineSegmentVector.getCPtr(lines), scanType);
  }

  public virtual void setLines(ArLineSegmentVector lines) {
    AriaCSPINVOKE.ArMap_setLines__SWIG_3(swigCPtr, ArLineSegmentVector.getCPtr(lines));
  }

  public virtual int getResolution(string scanType) {
    int ret = AriaCSPINVOKE.ArMap_getResolution__SWIG_0(swigCPtr, scanType);
    return ret;
  }

  public virtual int getResolution() {
    int ret = AriaCSPINVOKE.ArMap_getResolution__SWIG_1(swigCPtr);
    return ret;
  }

  public virtual void setResolution(int resolution, string scanType, SWIGTYPE_p_ArMapChangeDetails changeDetails) {
    AriaCSPINVOKE.ArMap_setResolution__SWIG_0(swigCPtr, resolution, scanType, SWIGTYPE_p_ArMapChangeDetails.getCPtr(changeDetails));
  }

  public virtual void setResolution(int resolution, string scanType) {
    AriaCSPINVOKE.ArMap_setResolution__SWIG_1(swigCPtr, resolution, scanType);
  }

  public virtual void setResolution(int resolution) {
    AriaCSPINVOKE.ArMap_setResolution__SWIG_2(swigCPtr, resolution);
  }

  public virtual void writeScanToFunctor(ArFunctor1_CString functor, string endOfLineChars, string scanType) {
    AriaCSPINVOKE.ArMap_writeScanToFunctor__SWIG_0(swigCPtr, ArFunctor1_CString.getCPtr(functor), endOfLineChars, scanType);
  }

  public virtual void writeScanToFunctor(ArFunctor1_CString functor, string endOfLineChars) {
    AriaCSPINVOKE.ArMap_writeScanToFunctor__SWIG_1(swigCPtr, ArFunctor1_CString.getCPtr(functor), endOfLineChars);
  }

  public virtual void writePointsToFunctor(SWIGTYPE_p_ArFunctor2T_int_std__vectorT_ArPose_t_p_t functor, string scanType, ArFunctor1_CString keywordFunctor) {
    AriaCSPINVOKE.ArMap_writePointsToFunctor__SWIG_0(swigCPtr, SWIGTYPE_p_ArFunctor2T_int_std__vectorT_ArPose_t_p_t.getCPtr(functor), scanType, ArFunctor1_CString.getCPtr(keywordFunctor));
  }

  public virtual void writePointsToFunctor(SWIGTYPE_p_ArFunctor2T_int_std__vectorT_ArPose_t_p_t functor, string scanType) {
    AriaCSPINVOKE.ArMap_writePointsToFunctor__SWIG_1(swigCPtr, SWIGTYPE_p_ArFunctor2T_int_std__vectorT_ArPose_t_p_t.getCPtr(functor), scanType);
  }

  public virtual void writePointsToFunctor(SWIGTYPE_p_ArFunctor2T_int_std__vectorT_ArPose_t_p_t functor) {
    AriaCSPINVOKE.ArMap_writePointsToFunctor__SWIG_2(swigCPtr, SWIGTYPE_p_ArFunctor2T_int_std__vectorT_ArPose_t_p_t.getCPtr(functor));
  }

  public virtual void writeLinesToFunctor(SWIGTYPE_p_ArFunctor2T_int_std__vectorT_ArLineSegment_t_p_t functor, string scanType, ArFunctor1_CString keywordFunctor) {
    AriaCSPINVOKE.ArMap_writeLinesToFunctor__SWIG_0(swigCPtr, SWIGTYPE_p_ArFunctor2T_int_std__vectorT_ArLineSegment_t_p_t.getCPtr(functor), scanType, ArFunctor1_CString.getCPtr(keywordFunctor));
  }

  public virtual void writeLinesToFunctor(SWIGTYPE_p_ArFunctor2T_int_std__vectorT_ArLineSegment_t_p_t functor, string scanType) {
    AriaCSPINVOKE.ArMap_writeLinesToFunctor__SWIG_1(swigCPtr, SWIGTYPE_p_ArFunctor2T_int_std__vectorT_ArLineSegment_t_p_t.getCPtr(functor), scanType);
  }

  public virtual void writeLinesToFunctor(SWIGTYPE_p_ArFunctor2T_int_std__vectorT_ArLineSegment_t_p_t functor) {
    AriaCSPINVOKE.ArMap_writeLinesToFunctor__SWIG_2(swigCPtr, SWIGTYPE_p_ArFunctor2T_int_std__vectorT_ArLineSegment_t_p_t.getCPtr(functor));
  }

  public virtual bool addToFileParser(ArFileParser fileParser) {
    bool ret = AriaCSPINVOKE.ArMap_addToFileParser(swigCPtr, ArFileParser.getCPtr(fileParser));
    return ret;
  }

  public virtual bool remFromFileParser(ArFileParser fileParser) {
    bool ret = AriaCSPINVOKE.ArMap_remFromFileParser(swigCPtr, ArFileParser.getCPtr(fileParser));
    return ret;
  }

  public virtual bool readDataPoint(string line) {
    bool ret = AriaCSPINVOKE.ArMap_readDataPoint(swigCPtr, line);
    return ret;
  }

  public virtual bool readLineSegment(string line) {
    bool ret = AriaCSPINVOKE.ArMap_readLineSegment(swigCPtr, line);
    return ret;
  }

  public virtual void loadDataPoint(double x, double y) {
    AriaCSPINVOKE.ArMap_loadDataPoint(swigCPtr, x, y);
  }

  public virtual void loadLineSegment(double x1, double y1, double x2, double y2) {
    AriaCSPINVOKE.ArMap_loadLineSegment(swigCPtr, x1, y1, x2, y2);
  }

  public override ArMapObject findFirstMapObject(string name, string type, bool isIncludeWithHeading) {
    global::System.IntPtr cPtr = AriaCSPINVOKE.ArMap_findFirstMapObject__SWIG_0(swigCPtr, name, type, isIncludeWithHeading);
    ArMapObject ret = (cPtr == global::System.IntPtr.Zero) ? null : new ArMapObject(cPtr, false);
    return ret;
  }

  public override ArMapObject findFirstMapObject(string name, string type) {
    global::System.IntPtr cPtr = AriaCSPINVOKE.ArMap_findFirstMapObject__SWIG_1(swigCPtr, name, type);
    ArMapObject ret = (cPtr == global::System.IntPtr.Zero) ? null : new ArMapObject(cPtr, false);
    return ret;
  }

  public override ArMapObject findMapObject(string name, string type, bool isIncludeWithHeading) {
    global::System.IntPtr cPtr = AriaCSPINVOKE.ArMap_findMapObject__SWIG_0(swigCPtr, name, type, isIncludeWithHeading);
    ArMapObject ret = (cPtr == global::System.IntPtr.Zero) ? null : new ArMapObject(cPtr, false);
    return ret;
  }

  public override ArMapObject findMapObject(string name, string type) {
    global::System.IntPtr cPtr = AriaCSPINVOKE.ArMap_findMapObject__SWIG_1(swigCPtr, name, type);
    ArMapObject ret = (cPtr == global::System.IntPtr.Zero) ? null : new ArMapObject(cPtr, false);
    return ret;
  }

  public override ArMapObject findMapObject(string name) {
    global::System.IntPtr cPtr = AriaCSPINVOKE.ArMap_findMapObject__SWIG_2(swigCPtr, name);
    ArMapObject ret = (cPtr == global::System.IntPtr.Zero) ? null : new ArMapObject(cPtr, false);
    return ret;
  }

  public override SWIGTYPE_p_std__listT_ArMapObject_p_t findMapObjectsOfType(string type, bool isIncludeWithHeading) {
    SWIGTYPE_p_std__listT_ArMapObject_p_t ret = new SWIGTYPE_p_std__listT_ArMapObject_p_t(AriaCSPINVOKE.ArMap_findMapObjectsOfType__SWIG_0(swigCPtr, type, isIncludeWithHeading), true);
    return ret;
  }

  public override SWIGTYPE_p_std__listT_ArMapObject_p_t findMapObjectsOfType(string type) {
    SWIGTYPE_p_std__listT_ArMapObject_p_t ret = new SWIGTYPE_p_std__listT_ArMapObject_p_t(AriaCSPINVOKE.ArMap_findMapObjectsOfType__SWIG_1(swigCPtr, type), true);
    return ret;
  }

  public override SWIGTYPE_p_std__listT_ArMapObject_p_t getMapObjects() {
    global::System.IntPtr cPtr = AriaCSPINVOKE.ArMap_getMapObjects(swigCPtr);
    SWIGTYPE_p_std__listT_ArMapObject_p_t ret = (cPtr == global::System.IntPtr.Zero) ? null : new SWIGTYPE_p_std__listT_ArMapObject_p_t(cPtr, false);
    return ret;
  }

  public override void setMapObjects(SWIGTYPE_p_std__listT_ArMapObject_p_t mapObjects, bool isSortedObjects, SWIGTYPE_p_ArMapChangeDetails changeDetails) {
    AriaCSPINVOKE.ArMap_setMapObjects__SWIG_0(swigCPtr, SWIGTYPE_p_std__listT_ArMapObject_p_t.getCPtr(mapObjects), isSortedObjects, SWIGTYPE_p_ArMapChangeDetails.getCPtr(changeDetails));
  }

  public override void setMapObjects(SWIGTYPE_p_std__listT_ArMapObject_p_t mapObjects, bool isSortedObjects) {
    AriaCSPINVOKE.ArMap_setMapObjects__SWIG_1(swigCPtr, SWIGTYPE_p_std__listT_ArMapObject_p_t.getCPtr(mapObjects), isSortedObjects);
  }

  public override void setMapObjects(SWIGTYPE_p_std__listT_ArMapObject_p_t mapObjects) {
    AriaCSPINVOKE.ArMap_setMapObjects__SWIG_2(swigCPtr, SWIGTYPE_p_std__listT_ArMapObject_p_t.getCPtr(mapObjects));
  }

  public override void writeObjectListToFunctor(ArFunctor1_CString functor, string endOfLineChars) {
    AriaCSPINVOKE.ArMap_writeObjectListToFunctor(swigCPtr, ArFunctor1_CString.getCPtr(functor), endOfLineChars);
  }

  public virtual void offsetMapContents(ArPose offset) {
    AriaCSPINVOKE.ArMap_offsetMapContents(swigCPtr, ArPose.getCPtr(offset));
    if (AriaCSPINVOKE.SWIGPendingException.Pending) throw AriaCSPINVOKE.SWIGPendingException.Retrieve();
  }

  public override SWIGTYPE_p_std__listT_ArArgumentBuilder_p_t getInfo(string infoName) {
    global::System.IntPtr cPtr = AriaCSPINVOKE.ArMap_getInfo__SWIG_0(swigCPtr, infoName);
    SWIGTYPE_p_std__listT_ArArgumentBuilder_p_t ret = (cPtr == global::System.IntPtr.Zero) ? null : new SWIGTYPE_p_std__listT_ArArgumentBuilder_p_t(cPtr, false);
    return ret;
  }

  public override SWIGTYPE_p_std__listT_ArArgumentBuilder_p_t getInfo(int infoType) {
    global::System.IntPtr cPtr = AriaCSPINVOKE.ArMap_getInfo__SWIG_1(swigCPtr, infoType);
    SWIGTYPE_p_std__listT_ArArgumentBuilder_p_t ret = (cPtr == global::System.IntPtr.Zero) ? null : new SWIGTYPE_p_std__listT_ArArgumentBuilder_p_t(cPtr, false);
    return ret;
  }

  public override SWIGTYPE_p_std__listT_ArArgumentBuilder_p_t getMapInfo() {
    global::System.IntPtr cPtr = AriaCSPINVOKE.ArMap_getMapInfo(swigCPtr);
    SWIGTYPE_p_std__listT_ArArgumentBuilder_p_t ret = (cPtr == global::System.IntPtr.Zero) ? null : new SWIGTYPE_p_std__listT_ArArgumentBuilder_p_t(cPtr, false);
    return ret;
  }

  public override int getInfoCount() {
    int ret = AriaCSPINVOKE.ArMap_getInfoCount(swigCPtr);
    return ret;
  }

  public override SWIGTYPE_p_std__listT_std__string_t getInfoNames() {
    SWIGTYPE_p_std__listT_std__string_t ret = new SWIGTYPE_p_std__listT_std__string_t(AriaCSPINVOKE.ArMap_getInfoNames(swigCPtr), true);
    return ret;
  }

  public override bool setInfo(string infoName, SWIGTYPE_p_std__listT_ArArgumentBuilder_p_t infoList, SWIGTYPE_p_ArMapChangeDetails changeDetails) {
    bool ret = AriaCSPINVOKE.ArMap_setInfo__SWIG_0(swigCPtr, infoName, SWIGTYPE_p_std__listT_ArArgumentBuilder_p_t.getCPtr(infoList), SWIGTYPE_p_ArMapChangeDetails.getCPtr(changeDetails));
    return ret;
  }

  public override bool setInfo(string infoName, SWIGTYPE_p_std__listT_ArArgumentBuilder_p_t infoList) {
    bool ret = AriaCSPINVOKE.ArMap_setInfo__SWIG_1(swigCPtr, infoName, SWIGTYPE_p_std__listT_ArArgumentBuilder_p_t.getCPtr(infoList));
    return ret;
  }

  public override bool setInfo(int infoType, SWIGTYPE_p_std__listT_ArArgumentBuilder_p_t infoList, SWIGTYPE_p_ArMapChangeDetails changeDetails) {
    bool ret = AriaCSPINVOKE.ArMap_setInfo__SWIG_2(swigCPtr, infoType, SWIGTYPE_p_std__listT_ArArgumentBuilder_p_t.getCPtr(infoList), SWIGTYPE_p_ArMapChangeDetails.getCPtr(changeDetails));
    return ret;
  }

  public override bool setInfo(int infoType, SWIGTYPE_p_std__listT_ArArgumentBuilder_p_t infoList) {
    bool ret = AriaCSPINVOKE.ArMap_setInfo__SWIG_3(swigCPtr, infoType, SWIGTYPE_p_std__listT_ArArgumentBuilder_p_t.getCPtr(infoList));
    return ret;
  }

  public override bool setMapInfo(SWIGTYPE_p_std__listT_ArArgumentBuilder_p_t mapInfo, SWIGTYPE_p_ArMapChangeDetails changeDetails) {
    bool ret = AriaCSPINVOKE.ArMap_setMapInfo__SWIG_0(swigCPtr, SWIGTYPE_p_std__listT_ArArgumentBuilder_p_t.getCPtr(mapInfo), SWIGTYPE_p_ArMapChangeDetails.getCPtr(changeDetails));
    return ret;
  }

  public override bool setMapInfo(SWIGTYPE_p_std__listT_ArArgumentBuilder_p_t mapInfo) {
    bool ret = AriaCSPINVOKE.ArMap_setMapInfo__SWIG_1(swigCPtr, SWIGTYPE_p_std__listT_ArArgumentBuilder_p_t.getCPtr(mapInfo));
    return ret;
  }

  public override string getInfoName(int infoType) {
    string ret = AriaCSPINVOKE.ArMap_getInfoName(swigCPtr, infoType);
    return ret;
  }

  public override void writeInfoToFunctor(ArFunctor1_CString functor, string endOfLineChars) {
    AriaCSPINVOKE.ArMap_writeInfoToFunctor(swigCPtr, ArFunctor1_CString.getCPtr(functor), endOfLineChars);
  }

  public override bool hasOriginLatLongAlt() {
    bool ret = AriaCSPINVOKE.ArMap_hasOriginLatLongAlt(swigCPtr);
    return ret;
  }

  public bool hasOriginLatLonAlt() {
    bool ret = AriaCSPINVOKE.ArMap_hasOriginLatLonAlt(swigCPtr);
    return ret;
  }

  public override ArPose getOriginLatLong() {
    ArPose ret = new ArPose(AriaCSPINVOKE.ArMap_getOriginLatLong(swigCPtr), true);
    return ret;
  }

  public ArPose getOriginLatLon() {
    ArPose ret = new ArPose(AriaCSPINVOKE.ArMap_getOriginLatLon(swigCPtr), true);
    return ret;
  }

  public override double getOriginAltitude() {
    double ret = AriaCSPINVOKE.ArMap_getOriginAltitude(swigCPtr);
    return ret;
  }

  public double getOriginLatitude() {
    double ret = AriaCSPINVOKE.ArMap_getOriginLatitude(swigCPtr);
    return ret;
  }

  public double getOriginLongitude() {
    double ret = AriaCSPINVOKE.ArMap_getOriginLongitude(swigCPtr);
    return ret;
  }

  public ArLLACoords getOriginLLA() {
    ArLLACoords ret = new ArLLACoords(AriaCSPINVOKE.ArMap_getOriginLLA(swigCPtr), true);
    return ret;
  }

  public override void setOriginLatLongAlt(bool hasOriginLatLong, ArPose originLatLong, double altitude, SWIGTYPE_p_ArMapChangeDetails changeDetails) {
    AriaCSPINVOKE.ArMap_setOriginLatLongAlt__SWIG_0(swigCPtr, hasOriginLatLong, ArPose.getCPtr(originLatLong), altitude, SWIGTYPE_p_ArMapChangeDetails.getCPtr(changeDetails));
    if (AriaCSPINVOKE.SWIGPendingException.Pending) throw AriaCSPINVOKE.SWIGPendingException.Retrieve();
  }

  public override void setOriginLatLongAlt(bool hasOriginLatLong, ArPose originLatLong, double altitude) {
    AriaCSPINVOKE.ArMap_setOriginLatLongAlt__SWIG_1(swigCPtr, hasOriginLatLong, ArPose.getCPtr(originLatLong), altitude);
    if (AriaCSPINVOKE.SWIGPendingException.Pending) throw AriaCSPINVOKE.SWIGPendingException.Retrieve();
  }

  public void setOriginLatLonAlt(bool hasOriginLatLong, ArPose originLatLong, double altitude, SWIGTYPE_p_ArMapChangeDetails changeDetails) {
    AriaCSPINVOKE.ArMap_setOriginLatLonAlt__SWIG_0(swigCPtr, hasOriginLatLong, ArPose.getCPtr(originLatLong), altitude, SWIGTYPE_p_ArMapChangeDetails.getCPtr(changeDetails));
    if (AriaCSPINVOKE.SWIGPendingException.Pending) throw AriaCSPINVOKE.SWIGPendingException.Retrieve();
  }

  public void setOriginLatLonAlt(bool hasOriginLatLong, ArPose originLatLong, double altitude) {
    AriaCSPINVOKE.ArMap_setOriginLatLonAlt__SWIG_1(swigCPtr, hasOriginLatLong, ArPose.getCPtr(originLatLong), altitude);
    if (AriaCSPINVOKE.SWIGPendingException.Pending) throw AriaCSPINVOKE.SWIGPendingException.Retrieve();
  }

  public override void writeSupplementToFunctor(ArFunctor1_CString functor, string endOfLineChars) {
    AriaCSPINVOKE.ArMap_writeSupplementToFunctor(swigCPtr, ArFunctor1_CString.getCPtr(functor), endOfLineChars);
  }

  public override void clear() {
    AriaCSPINVOKE.ArMap_clear(swigCPtr);
  }

  public override bool set(ArMapInterface other) {
    bool ret = AriaCSPINVOKE.ArMap_set(swigCPtr, ArMapInterface.getCPtr(other));
    return ret;
  }

  public override ArMapInterface clone() {
    global::System.IntPtr cPtr = AriaCSPINVOKE.ArMap_clone(swigCPtr);
    ArMapInterface ret = (cPtr == global::System.IntPtr.Zero) ? null : new ArMapInterface(cPtr, false);
    return ret;
  }

  public override void mapChanged() {
    AriaCSPINVOKE.ArMap_mapChanged__SWIG_0(swigCPtr);
  }

  public override void mapChanged(bool invokePathPlanningCB, bool invokeLocalizationCB) {
    AriaCSPINVOKE.ArMap_mapChanged__SWIG_1(swigCPtr, invokePathPlanningCB, invokeLocalizationCB);
  }

  public override void addMapChangedCB(ArFunctor functor, int position) {
    AriaCSPINVOKE.ArMap_addMapChangedCB__SWIG_0(swigCPtr, ArFunctor.getCPtr(functor), position);
  }

  public override void addMapChangedCB(ArFunctor functor) {
    AriaCSPINVOKE.ArMap_addMapChangedCB__SWIG_1(swigCPtr, ArFunctor.getCPtr(functor));
  }

  public override void remMapChangedCB(ArFunctor functor) {
    AriaCSPINVOKE.ArMap_remMapChangedCB(swigCPtr, ArFunctor.getCPtr(functor));
  }

  public override void addMapChangedPathPlanningCB(ArFunctor functor, int position) {
    AriaCSPINVOKE.ArMap_addMapChangedPathPlanningCB__SWIG_0(swigCPtr, ArFunctor.getCPtr(functor), position);
  }

  public override void addMapChangedPathPlanningCB(ArFunctor functor) {
    AriaCSPINVOKE.ArMap_addMapChangedPathPlanningCB__SWIG_1(swigCPtr, ArFunctor.getCPtr(functor));
  }

  public override void remMapChangedPathPlanningCB(ArFunctor functor) {
    AriaCSPINVOKE.ArMap_remMapChangedPathPlanningCB(swigCPtr, ArFunctor.getCPtr(functor));
  }

  public override void addMapChangedLocalizationCB(ArFunctor functor, int position) {
    AriaCSPINVOKE.ArMap_addMapChangedLocalizationCB__SWIG_0(swigCPtr, ArFunctor.getCPtr(functor), position);
  }

  public override void addMapChangedLocalizationCB(ArFunctor functor) {
    AriaCSPINVOKE.ArMap_addMapChangedLocalizationCB__SWIG_1(swigCPtr, ArFunctor.getCPtr(functor));
  }

  public override void remMapChangedLocalizationCB(ArFunctor functor) {
    AriaCSPINVOKE.ArMap_remMapChangedLocalizationCB(swigCPtr, ArFunctor.getCPtr(functor));
  }

  public override void addPreMapChangedCB(ArFunctor functor, int position) {
    AriaCSPINVOKE.ArMap_addPreMapChangedCB__SWIG_0(swigCPtr, ArFunctor.getCPtr(functor), position);
  }

  public override void addPreMapChangedCB(ArFunctor functor) {
    AriaCSPINVOKE.ArMap_addPreMapChangedCB__SWIG_1(swigCPtr, ArFunctor.getCPtr(functor));
  }

  public override void remPreMapChangedCB(ArFunctor functor) {
    AriaCSPINVOKE.ArMap_remPreMapChangedCB(swigCPtr, ArFunctor.getCPtr(functor));
  }

  public override void setMapChangedLogLevel(ArLog.LogLevel level) {
    AriaCSPINVOKE.ArMap_setMapChangedLogLevel(swigCPtr, (int)level);
  }

  public override ArLog.LogLevel getMapChangedLogLevel() {
    ArLog.LogLevel ret = (ArLog.LogLevel)AriaCSPINVOKE.ArMap_getMapChangedLogLevel(swigCPtr);
    return ret;
  }

  public override void writeToFunctor(ArFunctor1_CString functor, string endOfLineChars) {
    AriaCSPINVOKE.ArMap_writeToFunctor(swigCPtr, ArFunctor1_CString.getCPtr(functor), endOfLineChars);
  }

  public override void writeObjectsToFunctor(ArFunctor1_CString functor, string endOfLineChars, bool isOverrideAsSingleScan, string maxCategory) {
    AriaCSPINVOKE.ArMap_writeObjectsToFunctor__SWIG_0(swigCPtr, ArFunctor1_CString.getCPtr(functor), endOfLineChars, isOverrideAsSingleScan, maxCategory);
  }

  public override void writeObjectsToFunctor(ArFunctor1_CString functor, string endOfLineChars, bool isOverrideAsSingleScan) {
    AriaCSPINVOKE.ArMap_writeObjectsToFunctor__SWIG_1(swigCPtr, ArFunctor1_CString.getCPtr(functor), endOfLineChars, isOverrideAsSingleScan);
  }

  public override void writeObjectsToFunctor(ArFunctor1_CString functor, string endOfLineChars) {
    AriaCSPINVOKE.ArMap_writeObjectsToFunctor__SWIG_2(swigCPtr, ArFunctor1_CString.getCPtr(functor), endOfLineChars);
  }

  public override void addPreWriteFileCB(ArFunctor functor, ArListPos.Pos position) {
    AriaCSPINVOKE.ArMap_addPreWriteFileCB__SWIG_0(swigCPtr, ArFunctor.getCPtr(functor), (int)position);
  }

  public override void addPreWriteFileCB(ArFunctor functor) {
    AriaCSPINVOKE.ArMap_addPreWriteFileCB__SWIG_1(swigCPtr, ArFunctor.getCPtr(functor));
  }

  public override void remPreWriteFileCB(ArFunctor functor) {
    AriaCSPINVOKE.ArMap_remPreWriteFileCB(swigCPtr, ArFunctor.getCPtr(functor));
  }

  public override void addPostWriteFileCB(ArFunctor functor, ArListPos.Pos position) {
    AriaCSPINVOKE.ArMap_addPostWriteFileCB__SWIG_0(swigCPtr, ArFunctor.getCPtr(functor), (int)position);
  }

  public override void addPostWriteFileCB(ArFunctor functor) {
    AriaCSPINVOKE.ArMap_addPostWriteFileCB__SWIG_1(swigCPtr, ArFunctor.getCPtr(functor));
  }

  public override void remPostWriteFileCB(ArFunctor functor) {
    AriaCSPINVOKE.ArMap_remPostWriteFileCB(swigCPtr, ArFunctor.getCPtr(functor));
  }

  public override void addPreParseFileCB(SWIGTYPE_p_ArFunctor1T_std__string_t functor) {
    AriaCSPINVOKE.ArMap_addPreParseFileCB(swigCPtr, SWIGTYPE_p_ArFunctor1T_std__string_t.getCPtr(functor));
  }

  public override void remPreParseFileCB(SWIGTYPE_p_ArFunctor1T_std__string_t functor) {
    AriaCSPINVOKE.ArMap_remPreParseFileCB(swigCPtr, SWIGTYPE_p_ArFunctor1T_std__string_t.getCPtr(functor));
  }

  public void forceMapLoadOnConfigProcessFile() {
    AriaCSPINVOKE.ArMap_forceMapLoadOnConfigProcessFile(swigCPtr);
  }

  public bool readFile(string fileName) {
    bool ret = AriaCSPINVOKE.ArMap_readFile(swigCPtr, fileName);
    return ret;
  }

  public virtual bool writeFile(string fileName) {
    bool ret = AriaCSPINVOKE.ArMap_writeFile(swigCPtr, fileName);
    return ret;
  }

  public override bool getMapId(SWIGTYPE_p_ArMapId mapIdOut, bool isInternalCall) {
    bool ret = AriaCSPINVOKE.ArMap_getMapId__SWIG_0(swigCPtr, SWIGTYPE_p_ArMapId.getCPtr(mapIdOut), isInternalCall);
    return ret;
  }

  public override bool getMapId(SWIGTYPE_p_ArMapId mapIdOut) {
    bool ret = AriaCSPINVOKE.ArMap_getMapId__SWIG_1(swigCPtr, SWIGTYPE_p_ArMapId.getCPtr(mapIdOut));
    return ret;
  }

  public override bool calculateChecksum(SWIGTYPE_p_unsigned_char md5DigestBuffer, uint md5DigestBufferLen) {
    bool ret = AriaCSPINVOKE.ArMap_calculateChecksum(swigCPtr, SWIGTYPE_p_unsigned_char.getCPtr(md5DigestBuffer), md5DigestBufferLen);
    return ret;
  }

  public override string getBaseDirectory() {
    string ret = AriaCSPINVOKE.ArMap_getBaseDirectory(swigCPtr);
    return ret;
  }

  public override void setBaseDirectory(string baseDirectory) {
    AriaCSPINVOKE.ArMap_setBaseDirectory(swigCPtr, baseDirectory);
  }

  public override string getTempDirectory() {
    string ret = AriaCSPINVOKE.ArMap_getTempDirectory(swigCPtr);
    return ret;
  }

  public override void setTempDirectory(string tempDirectory) {
    AriaCSPINVOKE.ArMap_setTempDirectory(swigCPtr, tempDirectory);
  }

  public override string createRealFileName(string fileName) {
    string ret = AriaCSPINVOKE.ArMap_createRealFileName(swigCPtr, fileName);
    return ret;
  }

  public override string getFileName() {
    string ret = AriaCSPINVOKE.ArMap_getFileName(swigCPtr);
    return ret;
  }

  public override void setSourceFileName(string sourceName, string fileName, bool isInternalCall) {
    AriaCSPINVOKE.ArMap_setSourceFileName__SWIG_0(swigCPtr, sourceName, fileName, isInternalCall);
  }

  public override void setSourceFileName(string sourceName, string fileName) {
    AriaCSPINVOKE.ArMap_setSourceFileName__SWIG_1(swigCPtr, sourceName, fileName);
  }

  public override bool refresh() {
    bool ret = AriaCSPINVOKE.ArMap_refresh(swigCPtr);
    return ret;
  }

  public override void setIgnoreEmptyFileName(bool ignore) {
    AriaCSPINVOKE.ArMap_setIgnoreEmptyFileName(swigCPtr, ignore);
  }

  public override bool getIgnoreEmptyFileName() {
    bool ret = AriaCSPINVOKE.ArMap_getIgnoreEmptyFileName(swigCPtr);
    return ret;
  }

  public override void setIgnoreCase(bool ignoreCase) {
    AriaCSPINVOKE.ArMap_setIgnoreCase__SWIG_0(swigCPtr, ignoreCase);
  }

  public override void setIgnoreCase() {
    AriaCSPINVOKE.ArMap_setIgnoreCase__SWIG_1(swigCPtr);
  }

  public override bool getIgnoreCase() {
    bool ret = AriaCSPINVOKE.ArMap_getIgnoreCase(swigCPtr);
    return ret;
  }

  public override ArMapInfoInterface getInactiveInfo() {
    global::System.IntPtr cPtr = AriaCSPINVOKE.ArMap_getInactiveInfo(swigCPtr);
    ArMapInfoInterface ret = (cPtr == global::System.IntPtr.Zero) ? null : new ArMapInfoInterface(cPtr, false);
    return ret;
  }

  public override ArMapObjectsInterface getInactiveObjects() {
    global::System.IntPtr cPtr = AriaCSPINVOKE.ArMap_getInactiveObjects(swigCPtr);
    ArMapObjectsInterface ret = (cPtr == global::System.IntPtr.Zero) ? null : new ArMapObjectsInterface(cPtr, false);
    return ret;
  }

  public override ArMapObjectsInterface getChildObjects() {
    global::System.IntPtr cPtr = AriaCSPINVOKE.ArMap_getChildObjects(swigCPtr);
    ArMapObjectsInterface ret = (cPtr == global::System.IntPtr.Zero) ? null : new ArMapObjectsInterface(cPtr, false);
    return ret;
  }

  public override ArArgumentBuilder findMapObjectParams(string mapObjectName) {
    global::System.IntPtr cPtr = AriaCSPINVOKE.ArMap_findMapObjectParams(swigCPtr, mapObjectName);
    ArArgumentBuilder ret = (cPtr == global::System.IntPtr.Zero) ? null : new ArArgumentBuilder(cPtr, false);
    return ret;
  }

  public override bool setMapObjectParams(string mapObjectName, ArArgumentBuilder arg1, SWIGTYPE_p_ArMapChangeDetails changeDetails) {
    bool ret = AriaCSPINVOKE.ArMap_setMapObjectParams__SWIG_0(swigCPtr, mapObjectName, ArArgumentBuilder.getCPtr(arg1), SWIGTYPE_p_ArMapChangeDetails.getCPtr(changeDetails));
    return ret;
  }

  public override bool setMapObjectParams(string mapObjectName, ArArgumentBuilder arg1) {
    bool ret = AriaCSPINVOKE.ArMap_setMapObjectParams__SWIG_1(swigCPtr, mapObjectName, ArArgumentBuilder.getCPtr(arg1));
    return ret;
  }

  public override SWIGTYPE_p_std__listT_ArArgumentBuilder_p_t getRemainder() {
    global::System.IntPtr cPtr = AriaCSPINVOKE.ArMap_getRemainder(swigCPtr);
    SWIGTYPE_p_std__listT_ArArgumentBuilder_p_t ret = (cPtr == global::System.IntPtr.Zero) ? null : new SWIGTYPE_p_std__listT_ArArgumentBuilder_p_t(cPtr, false);
    return ret;
  }

  public override void setQuiet(bool isQuiet) {
    AriaCSPINVOKE.ArMap_setQuiet(swigCPtr, isQuiet);
  }

  public override bool parseLine(string line) {
    bool ret = AriaCSPINVOKE.ArMap_parseLine(swigCPtr, line);
    return ret;
  }

  public override void parsingComplete() {
    AriaCSPINVOKE.ArMap_parsingComplete(swigCPtr);
  }

  public override bool isLoadingDataStarted() {
    bool ret = AriaCSPINVOKE.ArMap_isLoadingDataStarted(swigCPtr);
    return ret;
  }

  public override bool isLoadingLinesAndDataStarted() {
    bool ret = AriaCSPINVOKE.ArMap_isLoadingLinesAndDataStarted(swigCPtr);
    return ret;
  }

  public override string getMapCategory() {
    string ret = AriaCSPINVOKE.ArMap_getMapCategory(swigCPtr);
    return ret;
  }

  public bool readFileAndChangeConfig(string fileName) {
    bool ret = AriaCSPINVOKE.ArMap_readFileAndChangeConfig(swigCPtr, fileName);
    return ret;
  }

  public void changeConfigMapName(string fileName) {
    AriaCSPINVOKE.ArMap_changeConfigMapName(swigCPtr, fileName);
  }

}

}
