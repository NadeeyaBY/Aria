//------------------------------------------------------------------------------
// <auto-generated />
//
// This file was automatically generated by SWIG (http://www.swig.org).
// Version 3.0.8
//
// Do not make changes to this file unless you know what you are doing--modify
// the SWIG interface file instead.
//------------------------------------------------------------------------------

namespace AriaCS {

public class ArInterpolation : global::System.IDisposable {
  private global::System.Runtime.InteropServices.HandleRef swigCPtr;
  protected bool swigCMemOwn;

  public ArInterpolation(global::System.IntPtr cPtr, bool cMemoryOwn) {
    swigCMemOwn = cMemoryOwn;
    swigCPtr = new global::System.Runtime.InteropServices.HandleRef(this, cPtr);
  }

  public static global::System.Runtime.InteropServices.HandleRef getCPtr(ArInterpolation obj) {
    return (obj == null) ? new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero) : obj.swigCPtr;
  }

  ~ArInterpolation() {
    Dispose();
  }

  public virtual void Dispose() {
    lock(this) {
      if (swigCPtr.Handle != global::System.IntPtr.Zero) {
        if (swigCMemOwn) {
          swigCMemOwn = false;
          AriaCSPINVOKE.delete_ArInterpolation(swigCPtr);
        }
        swigCPtr = new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero);
      }
      global::System.GC.SuppressFinalize(this);
    }
  }

  public ArInterpolation(uint numberOfReadings) : this(AriaCSPINVOKE.new_ArInterpolation__SWIG_0(numberOfReadings), true) {
  }

  public ArInterpolation() : this(AriaCSPINVOKE.new_ArInterpolation__SWIG_1(), true) {
  }

  public bool addReading(ArTime timeOfReading, ArPose position) {
    bool ret = AriaCSPINVOKE.ArInterpolation_addReading(swigCPtr, ArTime.getCPtr(timeOfReading), ArPose.getCPtr(position));
    if (AriaCSPINVOKE.SWIGPendingException.Pending) throw AriaCSPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public int getPose(ArTime timeStamp, ArPose position, ArPoseWithTime lastData) {
    int ret = AriaCSPINVOKE.ArInterpolation_getPose__SWIG_0(swigCPtr, ArTime.getCPtr(timeStamp), ArPose.getCPtr(position), ArPoseWithTime.getCPtr(lastData));
    if (AriaCSPINVOKE.SWIGPendingException.Pending) throw AriaCSPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public int getPose(ArTime timeStamp, ArPose position) {
    int ret = AriaCSPINVOKE.ArInterpolation_getPose__SWIG_1(swigCPtr, ArTime.getCPtr(timeStamp), ArPose.getCPtr(position));
    if (AriaCSPINVOKE.SWIGPendingException.Pending) throw AriaCSPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public void setName(string name) {
    AriaCSPINVOKE.ArInterpolation_setName(swigCPtr, name);
  }

  public string getName() {
    string ret = AriaCSPINVOKE.ArInterpolation_getName(swigCPtr);
    return ret;
  }

  public void setAllowedMSForPrediction(int ms) {
    AriaCSPINVOKE.ArInterpolation_setAllowedMSForPrediction__SWIG_0(swigCPtr, ms);
  }

  public void setAllowedMSForPrediction() {
    AriaCSPINVOKE.ArInterpolation_setAllowedMSForPrediction__SWIG_1(swigCPtr);
  }

  public int getAllowedMSForPrediction() {
    int ret = AriaCSPINVOKE.ArInterpolation_getAllowedMSForPrediction(swigCPtr);
    return ret;
  }

  public void setAllowedPercentageForPrediction(int percentage) {
    AriaCSPINVOKE.ArInterpolation_setAllowedPercentageForPrediction__SWIG_0(swigCPtr, percentage);
  }

  public void setAllowedPercentageForPrediction() {
    AriaCSPINVOKE.ArInterpolation_setAllowedPercentageForPrediction__SWIG_1(swigCPtr);
  }

  public int getAllowedPercentageForPrediction() {
    int ret = AriaCSPINVOKE.ArInterpolation_getAllowedPercentageForPrediction(swigCPtr);
    return ret;
  }

  public void setLogPrediction(bool logPrediction) {
    AriaCSPINVOKE.ArInterpolation_setLogPrediction__SWIG_0(swigCPtr, logPrediction);
  }

  public void setLogPrediction() {
    AriaCSPINVOKE.ArInterpolation_setLogPrediction__SWIG_1(swigCPtr);
  }

  public bool getLogPrediction() {
    bool ret = AriaCSPINVOKE.ArInterpolation_getLogPrediction(swigCPtr);
    return ret;
  }

  public void setNumberOfReadings(uint numberOfReadings) {
    AriaCSPINVOKE.ArInterpolation_setNumberOfReadings(swigCPtr, numberOfReadings);
  }

  public uint getNumberOfReadings() {
    uint ret = AriaCSPINVOKE.ArInterpolation_getNumberOfReadings(swigCPtr);
    return ret;
  }

  public void reset() {
    AriaCSPINVOKE.ArInterpolation_reset(swigCPtr);
  }

}

}
