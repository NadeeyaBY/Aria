//------------------------------------------------------------------------------
// <auto-generated />
//
// This file was automatically generated by SWIG (http://www.swig.org).
// Version 3.0.8
//
// Do not make changes to this file unless you know what you are doing--modify
// the SWIG interface file instead.
//------------------------------------------------------------------------------

namespace AriaCS {

public class ArPose : global::System.IDisposable {
  private global::System.Runtime.InteropServices.HandleRef swigCPtr;
  protected bool swigCMemOwn;

  public ArPose(global::System.IntPtr cPtr, bool cMemoryOwn) {
    swigCMemOwn = cMemoryOwn;
    swigCPtr = new global::System.Runtime.InteropServices.HandleRef(this, cPtr);
  }

  public static global::System.Runtime.InteropServices.HandleRef getCPtr(ArPose obj) {
    return (obj == null) ? new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero) : obj.swigCPtr;
  }

  ~ArPose() {
    Dispose();
  }

  public virtual void Dispose() {
    lock(this) {
      if (swigCPtr.Handle != global::System.IntPtr.Zero) {
        if (swigCMemOwn) {
          swigCMemOwn = false;
          AriaCSPINVOKE.delete_ArPose(swigCPtr);
        }
        swigCPtr = new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero);
      }
      global::System.GC.SuppressFinalize(this);
    }
  }

  public ArPose(double x, double y, double th) : this(AriaCSPINVOKE.new_ArPose__SWIG_0(x, y, th), true) {
  }

  public ArPose(double x, double y) : this(AriaCSPINVOKE.new_ArPose__SWIG_1(x, y), true) {
  }

  public ArPose(double x) : this(AriaCSPINVOKE.new_ArPose__SWIG_2(x), true) {
  }

  public ArPose() : this(AriaCSPINVOKE.new_ArPose__SWIG_3(), true) {
  }

  public ArPose(ArPose pose) : this(AriaCSPINVOKE.new_ArPose__SWIG_4(ArPose.getCPtr(pose)), true) {
    if (AriaCSPINVOKE.SWIGPendingException.Pending) throw AriaCSPINVOKE.SWIGPendingException.Retrieve();
  }

  public virtual void setPose(double x, double y, double th) {
    AriaCSPINVOKE.ArPose_setPose__SWIG_0(swigCPtr, x, y, th);
  }

  public virtual void setPose(double x, double y) {
    AriaCSPINVOKE.ArPose_setPose__SWIG_1(swigCPtr, x, y);
  }

  public virtual void setPose(ArPose position) {
    AriaCSPINVOKE.ArPose_setPose__SWIG_2(swigCPtr, ArPose.getCPtr(position));
    if (AriaCSPINVOKE.SWIGPendingException.Pending) throw AriaCSPINVOKE.SWIGPendingException.Retrieve();
  }

  public void setX(double x) {
    AriaCSPINVOKE.ArPose_setX(swigCPtr, x);
  }

  public void setY(double y) {
    AriaCSPINVOKE.ArPose_setY(swigCPtr, y);
  }

  public void setTh(double th) {
    AriaCSPINVOKE.ArPose_setTh(swigCPtr, th);
  }

  public void setThRad(double th) {
    AriaCSPINVOKE.ArPose_setThRad(swigCPtr, th);
  }

  public double getX() {
    double ret = AriaCSPINVOKE.ArPose_getX(swigCPtr);
    return ret;
  }

  public double getY() {
    double ret = AriaCSPINVOKE.ArPose_getY(swigCPtr);
    return ret;
  }

  public double getTh() {
    double ret = AriaCSPINVOKE.ArPose_getTh(swigCPtr);
    return ret;
  }

  public double getThRad() {
    double ret = AriaCSPINVOKE.ArPose_getThRad(swigCPtr);
    return ret;
  }

  public void getPose(out double x, out double y, out double th) {
    AriaCSPINVOKE.ArPose_getPose__SWIG_0(swigCPtr, out x, out y, out th);
  }

  public void getPose(out double x, out double y) {
    AriaCSPINVOKE.ArPose_getPose__SWIG_1(swigCPtr, out x, out y);
  }

  public virtual double findDistanceTo(ArPose position) {
    double ret = AriaCSPINVOKE.ArPose_findDistanceTo(swigCPtr, ArPose.getCPtr(position));
    if (AriaCSPINVOKE.SWIGPendingException.Pending) throw AriaCSPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public virtual double squaredFindDistanceTo(ArPose position) {
    double ret = AriaCSPINVOKE.ArPose_squaredFindDistanceTo(swigCPtr, ArPose.getCPtr(position));
    if (AriaCSPINVOKE.SWIGPendingException.Pending) throw AriaCSPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public virtual double findAngleTo(ArPose position) {
    double ret = AriaCSPINVOKE.ArPose_findAngleTo(swigCPtr, ArPose.getCPtr(position));
    if (AriaCSPINVOKE.SWIGPendingException.Pending) throw AriaCSPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public virtual void log() {
    AriaCSPINVOKE.ArPose_log(swigCPtr);
  }

  public static double distanceBetween(ArPose pose1, ArPose pose2) {
    double ret = AriaCSPINVOKE.ArPose_distanceBetween(ArPose.getCPtr(pose1), ArPose.getCPtr(pose2));
    if (AriaCSPINVOKE.SWIGPendingException.Pending) throw AriaCSPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static bool compareX(ArPose p1, ArPose p2) {
    bool ret = AriaCSPINVOKE.ArPose_compareX(ArPose.getCPtr(p1), ArPose.getCPtr(p2));
    if (AriaCSPINVOKE.SWIGPendingException.Pending) throw AriaCSPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static bool compareY(ArPose p1, ArPose p2) {
    bool ret = AriaCSPINVOKE.ArPose_compareY(ArPose.getCPtr(p1), ArPose.getCPtr(p2));
    if (AriaCSPINVOKE.SWIGPendingException.Pending) throw AriaCSPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public bool isInsidePolygon(ArPoseVector vertices) {
    bool ret = AriaCSPINVOKE.ArPose_isInsidePolygon(swigCPtr, ArPoseVector.getCPtr(vertices));
    if (AriaCSPINVOKE.SWIGPendingException.Pending) throw AriaCSPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

}

}
