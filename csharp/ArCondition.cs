//------------------------------------------------------------------------------
// <auto-generated />
//
// This file was automatically generated by SWIG (http://www.swig.org).
// Version 3.0.8
//
// Do not make changes to this file unless you know what you are doing--modify
// the SWIG interface file instead.
//------------------------------------------------------------------------------

namespace AriaCS {

public class ArCondition : global::System.IDisposable {
  private global::System.Runtime.InteropServices.HandleRef swigCPtr;
  protected bool swigCMemOwn;

  public ArCondition(global::System.IntPtr cPtr, bool cMemoryOwn) {
    swigCMemOwn = cMemoryOwn;
    swigCPtr = new global::System.Runtime.InteropServices.HandleRef(this, cPtr);
  }

  public static global::System.Runtime.InteropServices.HandleRef getCPtr(ArCondition obj) {
    return (obj == null) ? new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero) : obj.swigCPtr;
  }

  ~ArCondition() {
    Dispose();
  }

  public virtual void Dispose() {
    lock(this) {
      if (swigCPtr.Handle != global::System.IntPtr.Zero) {
        if (swigCMemOwn) {
          swigCMemOwn = false;
          AriaCSPINVOKE.delete_ArCondition(swigCPtr);
        }
        swigCPtr = new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero);
      }
      global::System.GC.SuppressFinalize(this);
    }
  }

  public ArCondition() : this(AriaCSPINVOKE.new_ArCondition(), true) {
  }

  public int signal() {
    int ret = AriaCSPINVOKE.ArCondition_signal(swigCPtr);
    return ret;
  }

  public int broadcast() {
    int ret = AriaCSPINVOKE.ArCondition_broadcast(swigCPtr);
    return ret;
  }

  public int wait() {
    int ret = AriaCSPINVOKE.ArCondition_wait(swigCPtr);
    return ret;
  }

  public int timedWait(uint msecs) {
    int ret = AriaCSPINVOKE.ArCondition_timedWait(swigCPtr, msecs);
    return ret;
  }

  public string getError(int messageNumber) {
    string ret = AriaCSPINVOKE.ArCondition_getError(swigCPtr, messageNumber);
    return ret;
  }

  public void setLogName(string logName) {
    AriaCSPINVOKE.ArCondition_setLogName(swigCPtr, logName);
  }

  public string getLogName() {
    string ret = AriaCSPINVOKE.ArCondition_getLogName(swigCPtr);
    return ret;
  }

  public static readonly int STATUS_FAILED = AriaCSPINVOKE.ArCondition_STATUS_FAILED_get();
  public static readonly int STATUS_FAILED_DESTROY = AriaCSPINVOKE.ArCondition_STATUS_FAILED_DESTROY_get();
  public static readonly int STATUS_FAILED_INIT = AriaCSPINVOKE.ArCondition_STATUS_FAILED_INIT_get();
  public static readonly int STATUS_WAIT_TIMEDOUT = AriaCSPINVOKE.ArCondition_STATUS_WAIT_TIMEDOUT_get();
  public static readonly int STATUS_WAIT_INTR = AriaCSPINVOKE.ArCondition_STATUS_WAIT_INTR_get();
  public static readonly int STATUS_MUTEX_FAILED_INIT = AriaCSPINVOKE.ArCondition_STATUS_MUTEX_FAILED_INIT_get();
  public static readonly int STATUS_MUTEX_FAILED = AriaCSPINVOKE.ArCondition_STATUS_MUTEX_FAILED_get();

}

}
