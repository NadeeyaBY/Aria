//------------------------------------------------------------------------------
// <auto-generated />
//
// This file was automatically generated by SWIG (http://www.swig.org).
// Version 3.0.8
//
// Do not make changes to this file unless you know what you are doing--modify
// the SWIG interface file instead.
//------------------------------------------------------------------------------

namespace AriaCS {

public class ArGPS : global::System.IDisposable {
  private global::System.Runtime.InteropServices.HandleRef swigCPtr;
  protected bool swigCMemOwn;

  public ArGPS(global::System.IntPtr cPtr, bool cMemoryOwn) {
    swigCMemOwn = cMemoryOwn;
    swigCPtr = new global::System.Runtime.InteropServices.HandleRef(this, cPtr);
  }

  public static global::System.Runtime.InteropServices.HandleRef getCPtr(ArGPS obj) {
    return (obj == null) ? new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero) : obj.swigCPtr;
  }

  ~ArGPS() {
    Dispose();
  }

  public virtual void Dispose() {
    lock(this) {
      if (swigCPtr.Handle != global::System.IntPtr.Zero) {
        if (swigCMemOwn) {
          swigCMemOwn = false;
          AriaCSPINVOKE.delete_ArGPS(swigCPtr);
        }
        swigCPtr = new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero);
      }
      global::System.GC.SuppressFinalize(this);
    }
  }

  public ArGPS() : this(AriaCSPINVOKE.new_ArGPS(), true) {
  }

  public void setDeviceConnection(ArDeviceConnection deviceConn) {
    AriaCSPINVOKE.ArGPS_setDeviceConnection(swigCPtr, ArDeviceConnection.getCPtr(deviceConn));
  }

  public ArDeviceConnection getDeviceConnection() {
    global::System.IntPtr cPtr = AriaCSPINVOKE.ArGPS_getDeviceConnection(swigCPtr);
    ArDeviceConnection ret = (cPtr == global::System.IntPtr.Zero) ? null : new ArDeviceConnection(cPtr, false);
    return ret;
  }

  public virtual bool connect(uint connectTimeout) {
    bool ret = AriaCSPINVOKE.ArGPS_connect__SWIG_0(swigCPtr, connectTimeout);
    return ret;
  }

  public virtual bool connect() {
    bool ret = AriaCSPINVOKE.ArGPS_connect__SWIG_1(swigCPtr);
    return ret;
  }

  public bool blockingConnect(uint connectTimeout) {
    bool ret = AriaCSPINVOKE.ArGPS_blockingConnect__SWIG_0(swigCPtr, connectTimeout);
    return ret;
  }

  public bool blockingConnect() {
    bool ret = AriaCSPINVOKE.ArGPS_blockingConnect__SWIG_1(swigCPtr);
    return ret;
  }

  public int ReadFlags {
    set {
      AriaCSPINVOKE.ArGPS_ReadFlags_set(swigCPtr, value);
    } 
    get {
      int ret = AriaCSPINVOKE.ArGPS_ReadFlags_get(swigCPtr);
      return ret;
    } 
  }

  public virtual int read(uint maxTime) {
    int ret = AriaCSPINVOKE.ArGPS_read__SWIG_0(swigCPtr, maxTime);
    return ret;
  }

  public virtual int read() {
    int ret = AriaCSPINVOKE.ArGPS_read__SWIG_1(swigCPtr);
    return ret;
  }

  public int readWithLock(uint maxTime) {
    int ret = AriaCSPINVOKE.ArGPS_readWithLock(swigCPtr, maxTime);
    return ret;
  }

  public void lockObj() {
    AriaCSPINVOKE.ArGPS_lockObj(swigCPtr);
  }

  public void unlockObj() {
    AriaCSPINVOKE.ArGPS_unlockObj(swigCPtr);
  }

  public void setIgnoreChecksum(bool ignore) {
    AriaCSPINVOKE.ArGPS_setIgnoreChecksum(swigCPtr, ignore);
  }

  public void logData() {
    AriaCSPINVOKE.ArGPS_logData(swigCPtr);
  }

  public void printData(bool labels) {
    AriaCSPINVOKE.ArGPS_printData__SWIG_0(swigCPtr, labels);
  }

  public void printData() {
    AriaCSPINVOKE.ArGPS_printData__SWIG_1(swigCPtr);
  }

  public void printDataLabelsHeader() {
    AriaCSPINVOKE.ArGPS_printDataLabelsHeader(swigCPtr);
  }

  public class Data : global::System.IDisposable {
    private global::System.Runtime.InteropServices.HandleRef swigCPtr;
    protected bool swigCMemOwn;
  
    public Data(global::System.IntPtr cPtr, bool cMemoryOwn) {
      swigCMemOwn = cMemoryOwn;
      swigCPtr = new global::System.Runtime.InteropServices.HandleRef(this, cPtr);
    }
  
    public static global::System.Runtime.InteropServices.HandleRef getCPtr(Data obj) {
      return (obj == null) ? new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero) : obj.swigCPtr;
    }
  
    ~Data() {
      Dispose();
    }
  
    public virtual void Dispose() {
      lock(this) {
        if (swigCPtr.Handle != global::System.IntPtr.Zero) {
          if (swigCMemOwn) {
            swigCMemOwn = false;
            AriaCSPINVOKE.delete_ArGPS_Data(swigCPtr);
          }
          swigCPtr = new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero);
        }
        global::System.GC.SuppressFinalize(this);
      }
    }
  
    public Data() : this(AriaCSPINVOKE.new_ArGPS_Data(), true) {
    }
  
    public double latitude {
      set {
        AriaCSPINVOKE.ArGPS_Data_latitude_set(swigCPtr, value);
      } 
      get {
        double ret = AriaCSPINVOKE.ArGPS_Data_latitude_get(swigCPtr);
        return ret;
      } 
    }
  
    public double longitude {
      set {
        AriaCSPINVOKE.ArGPS_Data_longitude_set(swigCPtr, value);
      } 
      get {
        double ret = AriaCSPINVOKE.ArGPS_Data_longitude_get(swigCPtr);
        return ret;
      } 
    }
  
    public bool havePosition {
      set {
        AriaCSPINVOKE.ArGPS_Data_havePosition_set(swigCPtr, value);
      } 
      get {
        bool ret = AriaCSPINVOKE.ArGPS_Data_havePosition_get(swigCPtr);
        return ret;
      } 
    }
  
    public ArTime timeGotPosition {
      set {
        AriaCSPINVOKE.ArGPS_Data_timeGotPosition_set(swigCPtr, ArTime.getCPtr(value));
      } 
      get {
        global::System.IntPtr cPtr = AriaCSPINVOKE.ArGPS_Data_timeGotPosition_get(swigCPtr);
        ArTime ret = (cPtr == global::System.IntPtr.Zero) ? null : new ArTime(cPtr, false);
        return ret;
      } 
    }
  
    public double speed {
      set {
        AriaCSPINVOKE.ArGPS_Data_speed_set(swigCPtr, value);
      } 
      get {
        double ret = AriaCSPINVOKE.ArGPS_Data_speed_get(swigCPtr);
        return ret;
      } 
    }
  
    public bool haveSpeed {
      set {
        AriaCSPINVOKE.ArGPS_Data_haveSpeed_set(swigCPtr, value);
      } 
      get {
        bool ret = AriaCSPINVOKE.ArGPS_Data_haveSpeed_get(swigCPtr);
        return ret;
      } 
    }
  
    public ArTime GPSPositionTimestamp {
      set {
        AriaCSPINVOKE.ArGPS_Data_GPSPositionTimestamp_set(swigCPtr, ArTime.getCPtr(value));
      } 
      get {
        global::System.IntPtr cPtr = AriaCSPINVOKE.ArGPS_Data_GPSPositionTimestamp_get(swigCPtr);
        ArTime ret = (cPtr == global::System.IntPtr.Zero) ? null : new ArTime(cPtr, false);
        return ret;
      } 
    }
  
    public ArGPS.FixType fixType {
      set {
        AriaCSPINVOKE.ArGPS_Data_fixType_set(swigCPtr, (int)value);
      } 
      get {
        ArGPS.FixType ret = (ArGPS.FixType)AriaCSPINVOKE.ArGPS_Data_fixType_get(swigCPtr);
        return ret;
      } 
    }
  
    public ushort numSatellitesTracked {
      set {
        AriaCSPINVOKE.ArGPS_Data_numSatellitesTracked_set(swigCPtr, value);
      } 
      get {
        ushort ret = AriaCSPINVOKE.ArGPS_Data_numSatellitesTracked_get(swigCPtr);
        return ret;
      } 
    }
  
    public double altitude {
      set {
        AriaCSPINVOKE.ArGPS_Data_altitude_set(swigCPtr, value);
      } 
      get {
        double ret = AriaCSPINVOKE.ArGPS_Data_altitude_get(swigCPtr);
        return ret;
      } 
    }
  
    public bool haveAltitude {
      set {
        AriaCSPINVOKE.ArGPS_Data_haveAltitude_set(swigCPtr, value);
      } 
      get {
        bool ret = AriaCSPINVOKE.ArGPS_Data_haveAltitude_get(swigCPtr);
        return ret;
      } 
    }
  
    public double altimeter {
      set {
        AriaCSPINVOKE.ArGPS_Data_altimeter_set(swigCPtr, value);
      } 
      get {
        double ret = AriaCSPINVOKE.ArGPS_Data_altimeter_get(swigCPtr);
        return ret;
      } 
    }
  
    public bool haveAltimeter {
      set {
        AriaCSPINVOKE.ArGPS_Data_haveAltimeter_set(swigCPtr, value);
      } 
      get {
        bool ret = AriaCSPINVOKE.ArGPS_Data_haveAltimeter_get(swigCPtr);
        return ret;
      } 
    }
  
    public ushort DGPSStationID {
      set {
        AriaCSPINVOKE.ArGPS_Data_DGPSStationID_set(swigCPtr, value);
      } 
      get {
        ushort ret = AriaCSPINVOKE.ArGPS_Data_DGPSStationID_get(swigCPtr);
        return ret;
      } 
    }
  
    public bool haveDGPSStation {
      set {
        AriaCSPINVOKE.ArGPS_Data_haveDGPSStation_set(swigCPtr, value);
      } 
      get {
        bool ret = AriaCSPINVOKE.ArGPS_Data_haveDGPSStation_get(swigCPtr);
        return ret;
      } 
    }
  
    public double garminPositionError {
      set {
        AriaCSPINVOKE.ArGPS_Data_garminPositionError_set(swigCPtr, value);
      } 
      get {
        double ret = AriaCSPINVOKE.ArGPS_Data_garminPositionError_get(swigCPtr);
        return ret;
      } 
    }
  
    public bool haveGarminPositionError {
      set {
        AriaCSPINVOKE.ArGPS_Data_haveGarminPositionError_set(swigCPtr, value);
      } 
      get {
        bool ret = AriaCSPINVOKE.ArGPS_Data_haveGarminPositionError_get(swigCPtr);
        return ret;
      } 
    }
  
    public double garminVerticalPositionError {
      set {
        AriaCSPINVOKE.ArGPS_Data_garminVerticalPositionError_set(swigCPtr, value);
      } 
      get {
        double ret = AriaCSPINVOKE.ArGPS_Data_garminVerticalPositionError_get(swigCPtr);
        return ret;
      } 
    }
  
    public bool haveGarminVerticalPositionError {
      set {
        AriaCSPINVOKE.ArGPS_Data_haveGarminVerticalPositionError_set(swigCPtr, value);
      } 
      get {
        bool ret = AriaCSPINVOKE.ArGPS_Data_haveGarminVerticalPositionError_get(swigCPtr);
        return ret;
      } 
    }
  
    public double compassHeadingMag {
      set {
        AriaCSPINVOKE.ArGPS_Data_compassHeadingMag_set(swigCPtr, value);
      } 
      get {
        double ret = AriaCSPINVOKE.ArGPS_Data_compassHeadingMag_get(swigCPtr);
        return ret;
      } 
    }
  
    public double compassHeadingTrue {
      set {
        AriaCSPINVOKE.ArGPS_Data_compassHeadingTrue_set(swigCPtr, value);
      } 
      get {
        double ret = AriaCSPINVOKE.ArGPS_Data_compassHeadingTrue_get(swigCPtr);
        return ret;
      } 
    }
  
    public bool haveCompassHeadingMag {
      set {
        AriaCSPINVOKE.ArGPS_Data_haveCompassHeadingMag_set(swigCPtr, value);
      } 
      get {
        bool ret = AriaCSPINVOKE.ArGPS_Data_haveCompassHeadingMag_get(swigCPtr);
        return ret;
      } 
    }
  
    public bool haveCompassHeadingTrue {
      set {
        AriaCSPINVOKE.ArGPS_Data_haveCompassHeadingTrue_set(swigCPtr, value);
      } 
      get {
        bool ret = AriaCSPINVOKE.ArGPS_Data_haveCompassHeadingTrue_get(swigCPtr);
        return ret;
      } 
    }
  
    public uint compassMagCounter {
      set {
        AriaCSPINVOKE.ArGPS_Data_compassMagCounter_set(swigCPtr, value);
      } 
      get {
        uint ret = AriaCSPINVOKE.ArGPS_Data_compassMagCounter_get(swigCPtr);
        return ret;
      } 
    }
  
    public uint compassTrueCounter {
      set {
        AriaCSPINVOKE.ArGPS_Data_compassTrueCounter_set(swigCPtr, value);
      } 
      get {
        uint ret = AriaCSPINVOKE.ArGPS_Data_compassTrueCounter_get(swigCPtr);
        return ret;
      } 
    }
  
    public bool haveHDOP {
      set {
        AriaCSPINVOKE.ArGPS_Data_haveHDOP_set(swigCPtr, value);
      } 
      get {
        bool ret = AriaCSPINVOKE.ArGPS_Data_haveHDOP_get(swigCPtr);
        return ret;
      } 
    }
  
    public double HDOP {
      set {
        AriaCSPINVOKE.ArGPS_Data_HDOP_set(swigCPtr, value);
      } 
      get {
        double ret = AriaCSPINVOKE.ArGPS_Data_HDOP_get(swigCPtr);
        return ret;
      } 
    }
  
    public bool haveVDOP {
      set {
        AriaCSPINVOKE.ArGPS_Data_haveVDOP_set(swigCPtr, value);
      } 
      get {
        bool ret = AriaCSPINVOKE.ArGPS_Data_haveVDOP_get(swigCPtr);
        return ret;
      } 
    }
  
    public double VDOP {
      set {
        AriaCSPINVOKE.ArGPS_Data_VDOP_set(swigCPtr, value);
      } 
      get {
        double ret = AriaCSPINVOKE.ArGPS_Data_VDOP_get(swigCPtr);
        return ret;
      } 
    }
  
    public bool havePDOP {
      set {
        AriaCSPINVOKE.ArGPS_Data_havePDOP_set(swigCPtr, value);
      } 
      get {
        bool ret = AriaCSPINVOKE.ArGPS_Data_havePDOP_get(swigCPtr);
        return ret;
      } 
    }
  
    public double PDOP {
      set {
        AriaCSPINVOKE.ArGPS_Data_PDOP_set(swigCPtr, value);
      } 
      get {
        double ret = AriaCSPINVOKE.ArGPS_Data_PDOP_get(swigCPtr);
        return ret;
      } 
    }
  
    public bool qualityFlag {
      set {
        AriaCSPINVOKE.ArGPS_Data_qualityFlag_set(swigCPtr, value);
      } 
      get {
        bool ret = AriaCSPINVOKE.ArGPS_Data_qualityFlag_get(swigCPtr);
        return ret;
      } 
    }
  
    public double meanSNR {
      set {
        AriaCSPINVOKE.ArGPS_Data_meanSNR_set(swigCPtr, value);
      } 
      get {
        double ret = AriaCSPINVOKE.ArGPS_Data_meanSNR_get(swigCPtr);
        return ret;
      } 
    }
  
    public bool haveSNR {
      set {
        AriaCSPINVOKE.ArGPS_Data_haveSNR_set(swigCPtr, value);
      } 
      get {
        bool ret = AriaCSPINVOKE.ArGPS_Data_haveSNR_get(swigCPtr);
        return ret;
      } 
    }
  
    public double beaconSignalStrength {
      set {
        AriaCSPINVOKE.ArGPS_Data_beaconSignalStrength_set(swigCPtr, value);
      } 
      get {
        double ret = AriaCSPINVOKE.ArGPS_Data_beaconSignalStrength_get(swigCPtr);
        return ret;
      } 
    }
  
    public double beaconSNR {
      set {
        AriaCSPINVOKE.ArGPS_Data_beaconSNR_set(swigCPtr, value);
      } 
      get {
        double ret = AriaCSPINVOKE.ArGPS_Data_beaconSNR_get(swigCPtr);
        return ret;
      } 
    }
  
    public double beaconFreq {
      set {
        AriaCSPINVOKE.ArGPS_Data_beaconFreq_set(swigCPtr, value);
      } 
      get {
        double ret = AriaCSPINVOKE.ArGPS_Data_beaconFreq_get(swigCPtr);
        return ret;
      } 
    }
  
    public ushort beaconBPS {
      set {
        AriaCSPINVOKE.ArGPS_Data_beaconBPS_set(swigCPtr, value);
      } 
      get {
        ushort ret = AriaCSPINVOKE.ArGPS_Data_beaconBPS_get(swigCPtr);
        return ret;
      } 
    }
  
    public ushort beaconChannel {
      set {
        AriaCSPINVOKE.ArGPS_Data_beaconChannel_set(swigCPtr, value);
      } 
      get {
        ushort ret = AriaCSPINVOKE.ArGPS_Data_beaconChannel_get(swigCPtr);
        return ret;
      } 
    }
  
    public bool haveBeaconInfo {
      set {
        AriaCSPINVOKE.ArGPS_Data_haveBeaconInfo_set(swigCPtr, value);
      } 
      get {
        bool ret = AriaCSPINVOKE.ArGPS_Data_haveBeaconInfo_get(swigCPtr);
        return ret;
      } 
    }
  
    public double inputsRMS {
      set {
        AriaCSPINVOKE.ArGPS_Data_inputsRMS_set(swigCPtr, value);
      } 
      get {
        double ret = AriaCSPINVOKE.ArGPS_Data_inputsRMS_get(swigCPtr);
        return ret;
      } 
    }
  
    public bool haveInputsRMS {
      set {
        AriaCSPINVOKE.ArGPS_Data_haveInputsRMS_set(swigCPtr, value);
      } 
      get {
        bool ret = AriaCSPINVOKE.ArGPS_Data_haveInputsRMS_get(swigCPtr);
        return ret;
      } 
    }
  
    public ArPose errorEllipse {
      set {
        AriaCSPINVOKE.ArGPS_Data_errorEllipse_set(swigCPtr, ArPose.getCPtr(value));
      } 
      get {
        global::System.IntPtr cPtr = AriaCSPINVOKE.ArGPS_Data_errorEllipse_get(swigCPtr);
        ArPose ret = (cPtr == global::System.IntPtr.Zero) ? null : new ArPose(cPtr, false);
        return ret;
      } 
    }
  
    public bool haveErrorEllipse {
      set {
        AriaCSPINVOKE.ArGPS_Data_haveErrorEllipse_set(swigCPtr, value);
      } 
      get {
        bool ret = AriaCSPINVOKE.ArGPS_Data_haveErrorEllipse_get(swigCPtr);
        return ret;
      } 
    }
  
    public ArPose latLonError {
      set {
        AriaCSPINVOKE.ArGPS_Data_latLonError_set(swigCPtr, ArPose.getCPtr(value));
      } 
      get {
        global::System.IntPtr cPtr = AriaCSPINVOKE.ArGPS_Data_latLonError_get(swigCPtr);
        ArPose ret = (cPtr == global::System.IntPtr.Zero) ? null : new ArPose(cPtr, false);
        return ret;
      } 
    }
  
    public bool haveLatLonError {
      set {
        AriaCSPINVOKE.ArGPS_Data_haveLatLonError_set(swigCPtr, value);
      } 
      get {
        bool ret = AriaCSPINVOKE.ArGPS_Data_haveLatLonError_get(swigCPtr);
        return ret;
      } 
    }
  
    public double altitudeError {
      set {
        AriaCSPINVOKE.ArGPS_Data_altitudeError_set(swigCPtr, value);
      } 
      get {
        double ret = AriaCSPINVOKE.ArGPS_Data_altitudeError_get(swigCPtr);
        return ret;
      } 
    }
  
    public bool haveAltitudeError {
      set {
        AriaCSPINVOKE.ArGPS_Data_haveAltitudeError_set(swigCPtr, value);
      } 
      get {
        bool ret = AriaCSPINVOKE.ArGPS_Data_haveAltitudeError_get(swigCPtr);
        return ret;
      } 
    }
  
  }

  public ArGPS.Data getCurrentDataRef() {
    ArGPS.Data ret = new ArGPS.Data(AriaCSPINVOKE.ArGPS_getCurrentDataRef(swigCPtr), false);
    return ret;
  }

  public ArGPS.FixType getFixType() {
    ArGPS.FixType ret = (ArGPS.FixType)AriaCSPINVOKE.ArGPS_getFixType(swigCPtr);
    return ret;
  }

  public string getFixTypeName() {
    string ret = AriaCSPINVOKE.ArGPS_getFixTypeName__SWIG_0(swigCPtr);
    return ret;
  }

  public static string getFixTypeName(ArGPS.FixType type) {
    string ret = AriaCSPINVOKE.ArGPS_getFixTypeName__SWIG_1((int)type);
    return ret;
  }

  public bool havePosition() {
    bool ret = AriaCSPINVOKE.ArGPS_havePosition(swigCPtr);
    return ret;
  }

  public bool haveLatitude() {
    bool ret = AriaCSPINVOKE.ArGPS_haveLatitude(swigCPtr);
    return ret;
  }

  public bool haveLongitude() {
    bool ret = AriaCSPINVOKE.ArGPS_haveLongitude(swigCPtr);
    return ret;
  }

  public double getLatitude() {
    double ret = AriaCSPINVOKE.ArGPS_getLatitude(swigCPtr);
    return ret;
  }

  public double getLongitude() {
    double ret = AriaCSPINVOKE.ArGPS_getLongitude(swigCPtr);
    return ret;
  }

  public ArLLACoords getLLA() {
    ArLLACoords ret = new ArLLACoords(AriaCSPINVOKE.ArGPS_getLLA(swigCPtr), true);
    return ret;
  }

  public ArPose getAsPose() {
    ArPose ret = new ArPose(AriaCSPINVOKE.ArGPS_getAsPose(swigCPtr), true);
    return ret;
  }

  public ArTime getTimeReceivedPosition() {
    ArTime ret = new ArTime(AriaCSPINVOKE.ArGPS_getTimeReceivedPosition(swigCPtr), true);
    return ret;
  }

  public bool haveSpeed() {
    bool ret = AriaCSPINVOKE.ArGPS_haveSpeed(swigCPtr);
    return ret;
  }

  public double getSpeed() {
    double ret = AriaCSPINVOKE.ArGPS_getSpeed(swigCPtr);
    return ret;
  }

  public ArTime getGPSPositionTimestamp() {
    ArTime ret = new ArTime(AriaCSPINVOKE.ArGPS_getGPSPositionTimestamp(swigCPtr), true);
    return ret;
  }

  public int getNumSatellitesTracked() {
    int ret = AriaCSPINVOKE.ArGPS_getNumSatellitesTracked(swigCPtr);
    return ret;
  }

  public bool haveDGPSStation() {
    bool ret = AriaCSPINVOKE.ArGPS_haveDGPSStation(swigCPtr);
    return ret;
  }

  public ushort getDGPSStationID() {
    ushort ret = AriaCSPINVOKE.ArGPS_getDGPSStationID(swigCPtr);
    return ret;
  }

  public bool haveGarminPositionError() {
    bool ret = AriaCSPINVOKE.ArGPS_haveGarminPositionError(swigCPtr);
    return ret;
  }

  public double getGarminPositionError() {
    double ret = AriaCSPINVOKE.ArGPS_getGarminPositionError(swigCPtr);
    return ret;
  }

  public bool haveGarminVerticalPositionError() {
    bool ret = AriaCSPINVOKE.ArGPS_haveGarminVerticalPositionError(swigCPtr);
    return ret;
  }

  public double getGarminVerticalPositionError() {
    double ret = AriaCSPINVOKE.ArGPS_getGarminVerticalPositionError(swigCPtr);
    return ret;
  }

  public bool haveCompassHeadingMag() {
    bool ret = AriaCSPINVOKE.ArGPS_haveCompassHeadingMag(swigCPtr);
    return ret;
  }

  public bool haveCompassHeadingTrue() {
    bool ret = AriaCSPINVOKE.ArGPS_haveCompassHeadingTrue(swigCPtr);
    return ret;
  }

  public double getCompassHeadingMag() {
    double ret = AriaCSPINVOKE.ArGPS_getCompassHeadingMag(swigCPtr);
    return ret;
  }

  public double getCompassHeadingTrue() {
    double ret = AriaCSPINVOKE.ArGPS_getCompassHeadingTrue(swigCPtr);
    return ret;
  }

  public void setCompassHeadingMag(double val) {
    AriaCSPINVOKE.ArGPS_setCompassHeadingMag(swigCPtr, val);
  }

  public void setCompassHeadingTrue(double val) {
    AriaCSPINVOKE.ArGPS_setCompassHeadingTrue(swigCPtr, val);
  }

  public void setCompassHeadingMagWithLock(double val) {
    AriaCSPINVOKE.ArGPS_setCompassHeadingMagWithLock(swigCPtr, val);
  }

  public void setCompassHeadingTrueWithLock(double val) {
    AriaCSPINVOKE.ArGPS_setCompassHeadingTrueWithLock(swigCPtr, val);
  }

  public bool haveAltitude() {
    bool ret = AriaCSPINVOKE.ArGPS_haveAltitude(swigCPtr);
    return ret;
  }

  public double getAltitude() {
    double ret = AriaCSPINVOKE.ArGPS_getAltitude(swigCPtr);
    return ret;
  }

  public bool haveAltimeter() {
    bool ret = AriaCSPINVOKE.ArGPS_haveAltimeter(swigCPtr);
    return ret;
  }

  public double getAltimeter() {
    double ret = AriaCSPINVOKE.ArGPS_getAltimeter(swigCPtr);
    return ret;
  }

  public bool haveHDOP() {
    bool ret = AriaCSPINVOKE.ArGPS_haveHDOP(swigCPtr);
    return ret;
  }

  public double getHDOP() {
    double ret = AriaCSPINVOKE.ArGPS_getHDOP(swigCPtr);
    return ret;
  }

  public bool haveVDOP() {
    bool ret = AriaCSPINVOKE.ArGPS_haveVDOP(swigCPtr);
    return ret;
  }

  public double getVDOP() {
    double ret = AriaCSPINVOKE.ArGPS_getVDOP(swigCPtr);
    return ret;
  }

  public bool havePDOP() {
    bool ret = AriaCSPINVOKE.ArGPS_havePDOP(swigCPtr);
    return ret;
  }

  public double getPDOP() {
    double ret = AriaCSPINVOKE.ArGPS_getPDOP(swigCPtr);
    return ret;
  }

  public bool haveSNR() {
    bool ret = AriaCSPINVOKE.ArGPS_haveSNR(swigCPtr);
    return ret;
  }

  public double getMeanSNR() {
    double ret = AriaCSPINVOKE.ArGPS_getMeanSNR(swigCPtr);
    return ret;
  }

  public bool haveBeaconInfo() {
    bool ret = AriaCSPINVOKE.ArGPS_haveBeaconInfo(swigCPtr);
    return ret;
  }

  public double getBeaconSignalStrength() {
    double ret = AriaCSPINVOKE.ArGPS_getBeaconSignalStrength(swigCPtr);
    return ret;
  }

  public double getBeaconSNR() {
    double ret = AriaCSPINVOKE.ArGPS_getBeaconSNR(swigCPtr);
    return ret;
  }

  public double getBeaconFreq() {
    double ret = AriaCSPINVOKE.ArGPS_getBeaconFreq(swigCPtr);
    return ret;
  }

  public ushort getBecaonBPS() {
    ushort ret = AriaCSPINVOKE.ArGPS_getBecaonBPS(swigCPtr);
    return ret;
  }

  public ushort getBeaconChannel() {
    ushort ret = AriaCSPINVOKE.ArGPS_getBeaconChannel(swigCPtr);
    return ret;
  }

  public bool haveErrorEllipse() {
    bool ret = AriaCSPINVOKE.ArGPS_haveErrorEllipse(swigCPtr);
    return ret;
  }

  public ArPose getErrorEllipse() {
    ArPose ret = new ArPose(AriaCSPINVOKE.ArGPS_getErrorEllipse(swigCPtr), true);
    return ret;
  }

  public bool haveLatLonError() {
    bool ret = AriaCSPINVOKE.ArGPS_haveLatLonError(swigCPtr);
    return ret;
  }

  public ArPose getLatLonError() {
    ArPose ret = new ArPose(AriaCSPINVOKE.ArGPS_getLatLonError(swigCPtr), true);
    return ret;
  }

  public double getLatitudeError() {
    double ret = AriaCSPINVOKE.ArGPS_getLatitudeError(swigCPtr);
    return ret;
  }

  public double getLongitudeError() {
    double ret = AriaCSPINVOKE.ArGPS_getLongitudeError(swigCPtr);
    return ret;
  }

  public bool haveAltitudeError() {
    bool ret = AriaCSPINVOKE.ArGPS_haveAltitudeError(swigCPtr);
    return ret;
  }

  public double getAltitudeError() {
    double ret = AriaCSPINVOKE.ArGPS_getAltitudeError(swigCPtr);
    return ret;
  }

  public bool haveInputsRMS() {
    bool ret = AriaCSPINVOKE.ArGPS_haveInputsRMS(swigCPtr);
    return ret;
  }

  public double getInputsRMS() {
    double ret = AriaCSPINVOKE.ArGPS_getInputsRMS(swigCPtr);
    return ret;
  }

  public void addNMEAHandler(string message, SWIGTYPE_p_ArFunctor1T_ArNMEAParser__Message_t handler) {
    AriaCSPINVOKE.ArGPS_addNMEAHandler(swigCPtr, message, SWIGTYPE_p_ArFunctor1T_ArNMEAParser__Message_t.getCPtr(handler));
  }

  public void removeNMEAHandler(string message) {
    AriaCSPINVOKE.ArGPS_removeNMEAHandler(swigCPtr, message);
  }

  public void replaceNMEAHandler(string message, SWIGTYPE_p_ArFunctor1T_ArNMEAParser__Message_t handler) {
    AriaCSPINVOKE.ArGPS_replaceNMEAHandler(swigCPtr, message, SWIGTYPE_p_ArFunctor1T_ArNMEAParser__Message_t.getCPtr(handler));
  }

  public static readonly int ReadFinished = AriaCSPINVOKE.ArGPS_ReadFinished_get();
  public static readonly int ReadError = AriaCSPINVOKE.ArGPS_ReadError_get();
  public static readonly int ReadData = AriaCSPINVOKE.ArGPS_ReadData_get();
  public static readonly int ReadUpdated = AriaCSPINVOKE.ArGPS_ReadUpdated_get();

  public enum FixType {
    NoFix,
    BadFix,
    GPSFix,
    DGPSFix,
    PPSFix,
    RTKinFix,
    FloatRTKinFix,
    DeadReckFix,
    ManualFix,
    SimulatedFix,
    UnknownFixType,
    OmnistarConverging = FloatRTKinFix,
    OmnistarConverged = RTKinFix
  }

}

}
