//------------------------------------------------------------------------------
// <auto-generated />
//
// This file was automatically generated by SWIG (http://www.swig.org).
// Version 3.0.8
//
// Do not make changes to this file unless you know what you are doing--modify
// the SWIG interface file instead.
//------------------------------------------------------------------------------

namespace AriaCS {

public class ArFileParser : global::System.IDisposable {
  private global::System.Runtime.InteropServices.HandleRef swigCPtr;
  protected bool swigCMemOwn;

  public ArFileParser(global::System.IntPtr cPtr, bool cMemoryOwn) {
    swigCMemOwn = cMemoryOwn;
    swigCPtr = new global::System.Runtime.InteropServices.HandleRef(this, cPtr);
  }

  public static global::System.Runtime.InteropServices.HandleRef getCPtr(ArFileParser obj) {
    return (obj == null) ? new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero) : obj.swigCPtr;
  }

  ~ArFileParser() {
    Dispose();
  }

  public virtual void Dispose() {
    lock(this) {
      if (swigCPtr.Handle != global::System.IntPtr.Zero) {
        if (swigCMemOwn) {
          swigCMemOwn = false;
          AriaCSPINVOKE.delete_ArFileParser(swigCPtr);
        }
        swigCPtr = new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero);
      }
      global::System.GC.SuppressFinalize(this);
    }
  }

  public ArFileParser(string baseDirectory, bool isPreCompressQuotes) : this(AriaCSPINVOKE.new_ArFileParser__SWIG_0(baseDirectory, isPreCompressQuotes), true) {
  }

  public ArFileParser(string baseDirectory) : this(AriaCSPINVOKE.new_ArFileParser__SWIG_1(baseDirectory), true) {
  }

  public ArFileParser() : this(AriaCSPINVOKE.new_ArFileParser__SWIG_2(), true) {
  }

  public bool addHandler(string keyword, ArRetFunctor1_Bool_ArgumentBuilderP functor) {
    bool ret = AriaCSPINVOKE.ArFileParser_addHandler(swigCPtr, keyword, ArRetFunctor1_Bool_ArgumentBuilderP.getCPtr(functor));
    return ret;
  }

  public bool addHandlerWithError(string keyword, SWIGTYPE_p_ArRetFunctor3T_bool_ArArgumentBuilder_p_char_p_size_t_t functor) {
    bool ret = AriaCSPINVOKE.ArFileParser_addHandlerWithError(swigCPtr, keyword, SWIGTYPE_p_ArRetFunctor3T_bool_ArArgumentBuilder_p_char_p_size_t_t.getCPtr(functor));
    return ret;
  }

  public bool remHandler(string keyword, bool logIfCannotFind) {
    bool ret = AriaCSPINVOKE.ArFileParser_remHandler__SWIG_0(swigCPtr, keyword, logIfCannotFind);
    return ret;
  }

  public bool remHandler(string keyword) {
    bool ret = AriaCSPINVOKE.ArFileParser_remHandler__SWIG_1(swigCPtr, keyword);
    return ret;
  }

  public bool remHandler(ArRetFunctor1_Bool_ArgumentBuilderP functor) {
    bool ret = AriaCSPINVOKE.ArFileParser_remHandler__SWIG_2(swigCPtr, ArRetFunctor1_Bool_ArgumentBuilderP.getCPtr(functor));
    return ret;
  }

  public bool remHandler(SWIGTYPE_p_ArRetFunctor3T_bool_ArArgumentBuilder_p_char_p_size_t_t functor) {
    bool ret = AriaCSPINVOKE.ArFileParser_remHandler__SWIG_3(swigCPtr, SWIGTYPE_p_ArRetFunctor3T_bool_ArArgumentBuilder_p_char_p_size_t_t.getCPtr(functor));
    return ret;
  }

  public void setPreParseFunctor(ArFunctor1_CString functor) {
    AriaCSPINVOKE.ArFileParser_setPreParseFunctor(swigCPtr, ArFunctor1_CString.getCPtr(functor));
  }

  public bool parseFile(string fileName, bool continueOnErrors, bool noFileNotFoundMessage, string errorBuffer, uint errorBufferLen) {
    bool ret = AriaCSPINVOKE.ArFileParser_parseFile__SWIG_0(swigCPtr, fileName, continueOnErrors, noFileNotFoundMessage, errorBuffer, errorBufferLen);
    return ret;
  }

  public bool parseFile(string fileName, bool continueOnErrors, bool noFileNotFoundMessage, string errorBuffer) {
    bool ret = AriaCSPINVOKE.ArFileParser_parseFile__SWIG_1(swigCPtr, fileName, continueOnErrors, noFileNotFoundMessage, errorBuffer);
    return ret;
  }

  public bool parseFile(string fileName, bool continueOnErrors, bool noFileNotFoundMessage) {
    bool ret = AriaCSPINVOKE.ArFileParser_parseFile__SWIG_2(swigCPtr, fileName, continueOnErrors, noFileNotFoundMessage);
    return ret;
  }

  public bool parseFile(string fileName, bool continueOnErrors) {
    bool ret = AriaCSPINVOKE.ArFileParser_parseFile__SWIG_3(swigCPtr, fileName, continueOnErrors);
    return ret;
  }

  public bool parseFile(string fileName) {
    bool ret = AriaCSPINVOKE.ArFileParser_parseFile__SWIG_4(swigCPtr, fileName);
    return ret;
  }

  public bool parseFile(SWIGTYPE_p_FILE file, string buffer, int bufferLength, bool continueOnErrors, string errorBuffer, uint errorBufferLen) {
    bool ret = AriaCSPINVOKE.ArFileParser_parseFile__SWIG_5(swigCPtr, SWIGTYPE_p_FILE.getCPtr(file), buffer, bufferLength, continueOnErrors, errorBuffer, errorBufferLen);
    return ret;
  }

  public bool parseFile(SWIGTYPE_p_FILE file, string buffer, int bufferLength, bool continueOnErrors, string errorBuffer) {
    bool ret = AriaCSPINVOKE.ArFileParser_parseFile__SWIG_6(swigCPtr, SWIGTYPE_p_FILE.getCPtr(file), buffer, bufferLength, continueOnErrors, errorBuffer);
    return ret;
  }

  public bool parseFile(SWIGTYPE_p_FILE file, string buffer, int bufferLength, bool continueOnErrors) {
    bool ret = AriaCSPINVOKE.ArFileParser_parseFile__SWIG_7(swigCPtr, SWIGTYPE_p_FILE.getCPtr(file), buffer, bufferLength, continueOnErrors);
    return ret;
  }

  public bool parseFile(SWIGTYPE_p_FILE file, string buffer, int bufferLength) {
    bool ret = AriaCSPINVOKE.ArFileParser_parseFile__SWIG_8(swigCPtr, SWIGTYPE_p_FILE.getCPtr(file), buffer, bufferLength);
    return ret;
  }

  public void cancelParsing() {
    AriaCSPINVOKE.ArFileParser_cancelParsing(swigCPtr);
  }

  public string getBaseDirectory() {
    string ret = AriaCSPINVOKE.ArFileParser_getBaseDirectory(swigCPtr);
    return ret;
  }

  public void setBaseDirectory(string baseDirectory) {
    AriaCSPINVOKE.ArFileParser_setBaseDirectory(swigCPtr, baseDirectory);
  }

  public void setCommentDelimiters(SWIGTYPE_p_std__listT_std__string_t delimiters) {
    AriaCSPINVOKE.ArFileParser_setCommentDelimiters(swigCPtr, SWIGTYPE_p_std__listT_std__string_t.getCPtr(delimiters));
    if (AriaCSPINVOKE.SWIGPendingException.Pending) throw AriaCSPINVOKE.SWIGPendingException.Retrieve();
  }

  public void clearCommentDelimiters() {
    AriaCSPINVOKE.ArFileParser_clearCommentDelimiters(swigCPtr);
  }

  public bool parseLine(string line, string errorBuffer, uint errorBufferLen) {
    bool ret = AriaCSPINVOKE.ArFileParser_parseLine__SWIG_0(swigCPtr, line, errorBuffer, errorBufferLen);
    return ret;
  }

  public bool parseLine(string line, string errorBuffer) {
    bool ret = AriaCSPINVOKE.ArFileParser_parseLine__SWIG_1(swigCPtr, line, errorBuffer);
    return ret;
  }

  public bool parseLine(string line) {
    bool ret = AriaCSPINVOKE.ArFileParser_parseLine__SWIG_2(swigCPtr, line);
    return ret;
  }

  public void resetCounters() {
    AriaCSPINVOKE.ArFileParser_resetCounters(swigCPtr);
  }

  public void setMaxNumArguments(uint maxNumArguments) {
    AriaCSPINVOKE.ArFileParser_setMaxNumArguments__SWIG_0(swigCPtr, maxNumArguments);
  }

  public void setMaxNumArguments() {
    AriaCSPINVOKE.ArFileParser_setMaxNumArguments__SWIG_1(swigCPtr);
  }

  public void setQuiet(bool isQuiet) {
    AriaCSPINVOKE.ArFileParser_setQuiet(swigCPtr, isQuiet);
  }

}

}
