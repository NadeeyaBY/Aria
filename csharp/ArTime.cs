//------------------------------------------------------------------------------
// <auto-generated />
//
// This file was automatically generated by SWIG (http://www.swig.org).
// Version 3.0.8
//
// Do not make changes to this file unless you know what you are doing--modify
// the SWIG interface file instead.
//------------------------------------------------------------------------------

namespace AriaCS {

public class ArTime : global::System.IDisposable {
  private global::System.Runtime.InteropServices.HandleRef swigCPtr;
  protected bool swigCMemOwn;

  public ArTime(global::System.IntPtr cPtr, bool cMemoryOwn) {
    swigCMemOwn = cMemoryOwn;
    swigCPtr = new global::System.Runtime.InteropServices.HandleRef(this, cPtr);
  }

  public static global::System.Runtime.InteropServices.HandleRef getCPtr(ArTime obj) {
    return (obj == null) ? new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero) : obj.swigCPtr;
  }

  ~ArTime() {
    Dispose();
  }

  public virtual void Dispose() {
    lock(this) {
      if (swigCPtr.Handle != global::System.IntPtr.Zero) {
        if (swigCMemOwn) {
          swigCMemOwn = false;
          AriaCSPINVOKE.delete_ArTime(swigCPtr);
        }
        swigCPtr = new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero);
      }
      global::System.GC.SuppressFinalize(this);
    }
  }

  public ArTime() : this(AriaCSPINVOKE.new_ArTime__SWIG_0(), true) {
  }

  public ArTime(ArTime other) : this(AriaCSPINVOKE.new_ArTime__SWIG_1(ArTime.getCPtr(other)), true) {
    if (AriaCSPINVOKE.SWIGPendingException.Pending) throw AriaCSPINVOKE.SWIGPendingException.Retrieve();
  }

  public int mSecSince(ArTime since) {
    int ret = AriaCSPINVOKE.ArTime_mSecSince__SWIG_0(swigCPtr, ArTime.getCPtr(since));
    if (AriaCSPINVOKE.SWIGPendingException.Pending) throw AriaCSPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public long mSecSinceLL(ArTime since) {
    long ret = AriaCSPINVOKE.ArTime_mSecSinceLL__SWIG_0(swigCPtr, ArTime.getCPtr(since));
    if (AriaCSPINVOKE.SWIGPendingException.Pending) throw AriaCSPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public int secSince(ArTime since) {
    int ret = AriaCSPINVOKE.ArTime_secSince__SWIG_0(swigCPtr, ArTime.getCPtr(since));
    if (AriaCSPINVOKE.SWIGPendingException.Pending) throw AriaCSPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public long secSinceLL(ArTime since) {
    long ret = AriaCSPINVOKE.ArTime_secSinceLL__SWIG_0(swigCPtr, ArTime.getCPtr(since));
    if (AriaCSPINVOKE.SWIGPendingException.Pending) throw AriaCSPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public int mSecTo() {
    int ret = AriaCSPINVOKE.ArTime_mSecTo(swigCPtr);
    return ret;
  }

  public long mSecToLL() {
    long ret = AriaCSPINVOKE.ArTime_mSecToLL(swigCPtr);
    return ret;
  }

  public int secTo() {
    int ret = AriaCSPINVOKE.ArTime_secTo(swigCPtr);
    return ret;
  }

  public long secToLL() {
    long ret = AriaCSPINVOKE.ArTime_secToLL(swigCPtr);
    return ret;
  }

  public int mSecSince() {
    int ret = AriaCSPINVOKE.ArTime_mSecSince__SWIG_1(swigCPtr);
    return ret;
  }

  public long mSecSinceLL() {
    long ret = AriaCSPINVOKE.ArTime_mSecSinceLL__SWIG_1(swigCPtr);
    return ret;
  }

  public int secSince() {
    int ret = AriaCSPINVOKE.ArTime_secSince__SWIG_1(swigCPtr);
    return ret;
  }

  public long secSinceLL() {
    long ret = AriaCSPINVOKE.ArTime_secSinceLL__SWIG_1(swigCPtr);
    return ret;
  }

  public bool isBefore(ArTime testTime) {
    bool ret = AriaCSPINVOKE.ArTime_isBefore(swigCPtr, ArTime.getCPtr(testTime));
    if (AriaCSPINVOKE.SWIGPendingException.Pending) throw AriaCSPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public bool isAt(ArTime testTime) {
    bool ret = AriaCSPINVOKE.ArTime_isAt(swigCPtr, ArTime.getCPtr(testTime));
    if (AriaCSPINVOKE.SWIGPendingException.Pending) throw AriaCSPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public bool isAfter(ArTime testTime) {
    bool ret = AriaCSPINVOKE.ArTime_isAfter(swigCPtr, ArTime.getCPtr(testTime));
    if (AriaCSPINVOKE.SWIGPendingException.Pending) throw AriaCSPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public void setToNow() {
    AriaCSPINVOKE.ArTime_setToNow(swigCPtr);
  }

  public bool addMSec(int ms) {
    bool ret = AriaCSPINVOKE.ArTime_addMSec(swigCPtr, ms);
    return ret;
  }

  public bool addMSecLL(long ms) {
    bool ret = AriaCSPINVOKE.ArTime_addMSecLL(swigCPtr, ms);
    return ret;
  }

  public void setSec(uint sec) {
    AriaCSPINVOKE.ArTime_setSec(swigCPtr, sec);
  }

  public void setMSec(uint msec) {
    AriaCSPINVOKE.ArTime_setMSec(swigCPtr, msec);
  }

  public uint getSec() {
    uint ret = AriaCSPINVOKE.ArTime_getSec(swigCPtr);
    return ret;
  }

  public uint getMSec() {
    uint ret = AriaCSPINVOKE.ArTime_getMSec(swigCPtr);
    return ret;
  }

  public void setSecLL(ulong sec) {
    AriaCSPINVOKE.ArTime_setSecLL(swigCPtr, sec);
  }

  public void setMSecLL(ulong msec) {
    AriaCSPINVOKE.ArTime_setMSecLL(swigCPtr, msec);
  }

  public ulong getSecLL() {
    ulong ret = AriaCSPINVOKE.ArTime_getSecLL(swigCPtr);
    return ret;
  }

  public ulong getMSecLL() {
    ulong ret = AriaCSPINVOKE.ArTime_getMSecLL(swigCPtr);
    return ret;
  }

  public void log(string prefix) {
    AriaCSPINVOKE.ArTime_log__SWIG_0(swigCPtr, prefix);
  }

  public void log() {
    AriaCSPINVOKE.ArTime_log__SWIG_1(swigCPtr);
  }

  public static bool usingMonotonicClock() {
    bool ret = AriaCSPINVOKE.ArTime_usingMonotonicClock();
    return ret;
  }

}

}
