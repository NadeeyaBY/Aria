//------------------------------------------------------------------------------
// <auto-generated />
//
// This file was automatically generated by SWIG (http://www.swig.org).
// Version 3.0.8
//
// Do not make changes to this file unless you know what you are doing--modify
// the SWIG interface file instead.
//------------------------------------------------------------------------------

namespace AriaCS {

public class ArVersalogicIO : global::System.IDisposable {
  private global::System.Runtime.InteropServices.HandleRef swigCPtr;
  protected bool swigCMemOwn;

  public ArVersalogicIO(global::System.IntPtr cPtr, bool cMemoryOwn) {
    swigCMemOwn = cMemoryOwn;
    swigCPtr = new global::System.Runtime.InteropServices.HandleRef(this, cPtr);
  }

  public static global::System.Runtime.InteropServices.HandleRef getCPtr(ArVersalogicIO obj) {
    return (obj == null) ? new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero) : obj.swigCPtr;
  }

  ~ArVersalogicIO() {
    Dispose();
  }

  public virtual void Dispose() {
    lock(this) {
      if (swigCPtr.Handle != global::System.IntPtr.Zero) {
        if (swigCMemOwn) {
          swigCMemOwn = false;
          AriaCSPINVOKE.delete_ArVersalogicIO(swigCPtr);
        }
        swigCPtr = new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero);
      }
      global::System.GC.SuppressFinalize(this);
    }
  }

  public ArVersalogicIO(string dev) : this(AriaCSPINVOKE.new_ArVersalogicIO__SWIG_0(dev), true) {
  }

  public ArVersalogicIO() : this(AriaCSPINVOKE.new_ArVersalogicIO__SWIG_1(), true) {
  }

  public bool closeIO() {
    bool ret = AriaCSPINVOKE.ArVersalogicIO_closeIO(swigCPtr);
    return ret;
  }

  public bool isEnabled() {
    bool ret = AriaCSPINVOKE.ArVersalogicIO_isEnabled(swigCPtr);
    return ret;
  }

  public bool isAnalogSupported() {
    bool ret = AriaCSPINVOKE.ArVersalogicIO_isAnalogSupported(swigCPtr);
    return ret;
  }

  public bool getAnalogValue(int port, SWIGTYPE_p_double val) {
    bool ret = AriaCSPINVOKE.ArVersalogicIO_getAnalogValue(swigCPtr, port, SWIGTYPE_p_double.getCPtr(val));
    return ret;
  }

  public bool getAnalogValueRaw(int port, SWIGTYPE_p_int val) {
    bool ret = AriaCSPINVOKE.ArVersalogicIO_getAnalogValueRaw(swigCPtr, port, SWIGTYPE_p_int.getCPtr(val));
    return ret;
  }

  public ArVersalogicIO.Direction getDigitalBankDirection(int bank) {
    ArVersalogicIO.Direction ret = (ArVersalogicIO.Direction)AriaCSPINVOKE.ArVersalogicIO_getDigitalBankDirection(swigCPtr, bank);
    return ret;
  }

  public bool setDigitalBankDirection(int bank, ArVersalogicIO.Direction dir) {
    bool ret = AriaCSPINVOKE.ArVersalogicIO_setDigitalBankDirection(swigCPtr, bank, (int)dir);
    return ret;
  }

  public bool getDigitalBankInputs(int bank, SWIGTYPE_p_unsigned_char val) {
    bool ret = AriaCSPINVOKE.ArVersalogicIO_getDigitalBankInputs(swigCPtr, bank, SWIGTYPE_p_unsigned_char.getCPtr(val));
    return ret;
  }

  public bool getDigitalBankOutputs(int bank, SWIGTYPE_p_unsigned_char val) {
    bool ret = AriaCSPINVOKE.ArVersalogicIO_getDigitalBankOutputs(swigCPtr, bank, SWIGTYPE_p_unsigned_char.getCPtr(val));
    return ret;
  }

  public bool setDigitalBankOutputs(int bank, byte val) {
    bool ret = AriaCSPINVOKE.ArVersalogicIO_setDigitalBankOutputs(swigCPtr, bank, val);
    return ret;
  }

  public bool getSpecialControlRegister(SWIGTYPE_p_unsigned_char val) {
    bool ret = AriaCSPINVOKE.ArVersalogicIO_getSpecialControlRegister(swigCPtr, SWIGTYPE_p_unsigned_char.getCPtr(val));
    return ret;
  }

  public int lockObj() {
    int ret = AriaCSPINVOKE.ArVersalogicIO_lockObj(swigCPtr);
    return ret;
  }

  public int unlockObj() {
    int ret = AriaCSPINVOKE.ArVersalogicIO_unlockObj(swigCPtr);
    return ret;
  }

  public int tryLock() {
    int ret = AriaCSPINVOKE.ArVersalogicIO_tryLock(swigCPtr);
    return ret;
  }

  public enum Direction {
    DIGITAL_INPUT,
    DIGITAL_OUTPUT
  }

}

}
