//------------------------------------------------------------------------------
// <auto-generated />
//
// This file was automatically generated by SWIG (http://www.swig.org).
// Version 3.0.8
//
// Do not make changes to this file unless you know what you are doing--modify
// the SWIG interface file instead.
//------------------------------------------------------------------------------

namespace AriaCS {

public class ArSerialConnection : ArDeviceConnection {
  private global::System.Runtime.InteropServices.HandleRef swigCPtr;

  public ArSerialConnection(global::System.IntPtr cPtr, bool cMemoryOwn) : base(AriaCSPINVOKE.ArSerialConnection_SWIGUpcast(cPtr), cMemoryOwn) {
    swigCPtr = new global::System.Runtime.InteropServices.HandleRef(this, cPtr);
  }

  public static global::System.Runtime.InteropServices.HandleRef getCPtr(ArSerialConnection obj) {
    return (obj == null) ? new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero) : obj.swigCPtr;
  }

  ~ArSerialConnection() {
    Dispose();
  }

  public override void Dispose() {
    lock(this) {
      if (swigCPtr.Handle != global::System.IntPtr.Zero) {
        if (swigCMemOwn) {
          swigCMemOwn = false;
          AriaCSPINVOKE.delete_ArSerialConnection(swigCPtr);
        }
        swigCPtr = new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero);
      }
      global::System.GC.SuppressFinalize(this);
      base.Dispose();
    }
  }

  public ArSerialConnection(bool is422) : this(AriaCSPINVOKE.new_ArSerialConnection__SWIG_0(is422), true) {
  }

  public ArSerialConnection() : this(AriaCSPINVOKE.new_ArSerialConnection__SWIG_1(), true) {
  }

  public int open(string port) {
    int ret = AriaCSPINVOKE.ArSerialConnection_open__SWIG_0(swigCPtr, port);
    return ret;
  }

  public int open() {
    int ret = AriaCSPINVOKE.ArSerialConnection_open__SWIG_1(swigCPtr);
    return ret;
  }

  public void setPort(string port) {
    AriaCSPINVOKE.ArSerialConnection_setPort__SWIG_0(swigCPtr, port);
  }

  public void setPort() {
    AriaCSPINVOKE.ArSerialConnection_setPort__SWIG_1(swigCPtr);
  }

  public string getPort() {
    string ret = AriaCSPINVOKE.ArSerialConnection_getPort(swigCPtr);
    return ret;
  }

  public override bool openSimple() {
    bool ret = AriaCSPINVOKE.ArSerialConnection_openSimple(swigCPtr);
    return ret;
  }

  public override int getStatus() {
    int ret = AriaCSPINVOKE.ArSerialConnection_getStatus(swigCPtr);
    return ret;
  }

  public override bool close() {
    bool ret = AriaCSPINVOKE.ArSerialConnection_close(swigCPtr);
    return ret;
  }

  public override int read(string data, uint size, uint msWait) {
    int ret = AriaCSPINVOKE.ArSerialConnection_read__SWIG_0(swigCPtr, data, size, msWait);
    return ret;
  }

  public override int read(string data, uint size) {
    int ret = AriaCSPINVOKE.ArSerialConnection_read__SWIG_1(swigCPtr, data, size);
    return ret;
  }

  public override int write(string data, uint size) {
    int ret = AriaCSPINVOKE.ArSerialConnection_write(swigCPtr, data, size);
    return ret;
  }

  public override string getOpenMessage(int messageNumber) {
    string ret = AriaCSPINVOKE.ArSerialConnection_getOpenMessage(swigCPtr, messageNumber);
    return ret;
  }

  public bool setBaud(int baud) {
    bool ret = AriaCSPINVOKE.ArSerialConnection_setBaud(swigCPtr, baud);
    return ret;
  }

  public int getBaud() {
    int ret = AriaCSPINVOKE.ArSerialConnection_getBaud(swigCPtr);
    return ret;
  }

  public bool setHardwareControl(bool hardwareControl) {
    bool ret = AriaCSPINVOKE.ArSerialConnection_setHardwareControl(swigCPtr, hardwareControl);
    return ret;
  }

  public bool getHardwareControl() {
    bool ret = AriaCSPINVOKE.ArSerialConnection_getHardwareControl(swigCPtr);
    return ret;
  }

  public bool getCTS() {
    bool ret = AriaCSPINVOKE.ArSerialConnection_getCTS(swigCPtr);
    return ret;
  }

  public bool getDSR() {
    bool ret = AriaCSPINVOKE.ArSerialConnection_getDSR(swigCPtr);
    return ret;
  }

  public bool getDCD() {
    bool ret = AriaCSPINVOKE.ArSerialConnection_getDCD(swigCPtr);
    return ret;
  }

  public bool getRing() {
    bool ret = AriaCSPINVOKE.ArSerialConnection_getRing(swigCPtr);
    return ret;
  }

  public int internalOpen() {
    int ret = AriaCSPINVOKE.ArSerialConnection_internalOpen(swigCPtr);
    return ret;
  }

  public override ArTime getTimeRead(int index) {
    ArTime ret = new ArTime(AriaCSPINVOKE.ArSerialConnection_getTimeRead(swigCPtr, index), true);
    return ret;
  }

  public override bool isTimeStamping() {
    bool ret = AriaCSPINVOKE.ArSerialConnection_isTimeStamping(swigCPtr);
    return ret;
  }

  public enum Open {
    OPEN_COULD_NOT_OPEN_PORT = 1,
    OPEN_COULD_NOT_SET_UP_PORT,
    OPEN_INVALID_BAUD_RATE,
    OPEN_COULD_NOT_SET_BAUD,
    OPEN_ALREADY_OPEN
  }

}

}
