//------------------------------------------------------------------------------
// <auto-generated />
//
// This file was automatically generated by SWIG (http://www.swig.org).
// Version 3.0.8
//
// Do not make changes to this file unless you know what you are doing--modify
// the SWIG interface file instead.
//------------------------------------------------------------------------------

namespace AriaCS {

public class ArDataLogger : global::System.IDisposable {
  private global::System.Runtime.InteropServices.HandleRef swigCPtr;
  protected bool swigCMemOwn;

  public ArDataLogger(global::System.IntPtr cPtr, bool cMemoryOwn) {
    swigCMemOwn = cMemoryOwn;
    swigCPtr = new global::System.Runtime.InteropServices.HandleRef(this, cPtr);
  }

  public static global::System.Runtime.InteropServices.HandleRef getCPtr(ArDataLogger obj) {
    return (obj == null) ? new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero) : obj.swigCPtr;
  }

  ~ArDataLogger() {
    Dispose();
  }

  public virtual void Dispose() {
    lock(this) {
      if (swigCPtr.Handle != global::System.IntPtr.Zero) {
        if (swigCMemOwn) {
          swigCMemOwn = false;
          AriaCSPINVOKE.delete_ArDataLogger(swigCPtr);
        }
        swigCPtr = new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero);
      }
      global::System.GC.SuppressFinalize(this);
    }
  }

  public ArDataLogger(ArRobot robot, string fileName) : this(AriaCSPINVOKE.new_ArDataLogger__SWIG_0(ArRobot.getCPtr(robot), fileName), true) {
  }

  public ArDataLogger(ArRobot robot) : this(AriaCSPINVOKE.new_ArDataLogger__SWIG_1(ArRobot.getCPtr(robot)), true) {
  }

  public void addToConfig(ArConfig config) {
    AriaCSPINVOKE.ArDataLogger_addToConfig(swigCPtr, ArConfig.getCPtr(config));
  }

  public void addString(string name, ushort maxLen, SWIGTYPE_p_ArFunctor2T_char_p_unsigned_short_t functor) {
    AriaCSPINVOKE.ArDataLogger_addString(swigCPtr, name, maxLen, SWIGTYPE_p_ArFunctor2T_char_p_unsigned_short_t.getCPtr(functor));
  }

  public SWIGTYPE_p_ArFunctor3T_char_const_p_unsigned_short_ArFunctor2T_char_p_unsigned_short_t_p_t getAddStringFunctor() {
    global::System.IntPtr cPtr = AriaCSPINVOKE.ArDataLogger_getAddStringFunctor(swigCPtr);
    SWIGTYPE_p_ArFunctor3T_char_const_p_unsigned_short_ArFunctor2T_char_p_unsigned_short_t_p_t ret = (cPtr == global::System.IntPtr.Zero) ? null : new SWIGTYPE_p_ArFunctor3T_char_const_p_unsigned_short_ArFunctor2T_char_p_unsigned_short_t_p_t(cPtr, false);
    return ret;
  }

  public void startLogging(int interval) {
    AriaCSPINVOKE.ArDataLogger_startLogging__SWIG_0(swigCPtr, interval);
  }

  public void startLogging() {
    AriaCSPINVOKE.ArDataLogger_startLogging__SWIG_1(swigCPtr);
  }

  public void stopLogging() {
    AriaCSPINVOKE.ArDataLogger_stopLogging(swigCPtr);
  }

  public bool getLogging() {
    bool ret = AriaCSPINVOKE.ArDataLogger_getLogging(swigCPtr);
    return ret;
  }

  public int getLogInterval() {
    int ret = AriaCSPINVOKE.ArDataLogger_getLogInterval(swigCPtr);
    return ret;
  }

  public void writeComment(string str) {
    AriaCSPINVOKE.ArDataLogger_writeComment__SWIG_0(swigCPtr, str);
  }

  public void writeComment(ArArgumentBuilder ab) {
    AriaCSPINVOKE.ArDataLogger_writeComment__SWIG_1(swigCPtr, ArArgumentBuilder.getCPtr(ab));
  }

  public SWIGTYPE_p_ArFunctor1T_ArArgumentBuilder_p_t getWriteCommentFunctor() {
    global::System.IntPtr cPtr = AriaCSPINVOKE.ArDataLogger_getWriteCommentFunctor(swigCPtr);
    SWIGTYPE_p_ArFunctor1T_ArArgumentBuilder_p_t ret = (cPtr == global::System.IntPtr.Zero) ? null : new SWIGTYPE_p_ArFunctor1T_ArArgumentBuilder_p_t(cPtr, false);
    return ret;
  }

  public void clearLog() {
    AriaCSPINVOKE.ArDataLogger_clearLog(swigCPtr);
  }

  public ArFunctor getClearLogFunctor() {
    global::System.IntPtr cPtr = AriaCSPINVOKE.ArDataLogger_getClearLogFunctor(swigCPtr);
    ArFunctor ret = (cPtr == global::System.IntPtr.Zero) ? null : new ArFunctor(cPtr, false);
    return ret;
  }

  public ArFunctor getStartLogFunctor() {
    global::System.IntPtr cPtr = AriaCSPINVOKE.ArDataLogger_getStartLogFunctor(swigCPtr);
    ArFunctor ret = (cPtr == global::System.IntPtr.Zero) ? null : new ArFunctor(cPtr, false);
    return ret;
  }

  public ArFunctor getStopLogFunctor() {
    global::System.IntPtr cPtr = AriaCSPINVOKE.ArDataLogger_getStopLogFunctor(swigCPtr);
    ArFunctor ret = (cPtr == global::System.IntPtr.Zero) ? null : new ArFunctor(cPtr, false);
    return ret;
  }

  public string getStatus() {
    string ret = AriaCSPINVOKE.ArDataLogger_getStatus__SWIG_0(swigCPtr);
    return ret;
  }

  public void getStatus(string buf, ushort buflen) {
    AriaCSPINVOKE.ArDataLogger_getStatus__SWIG_1(swigCPtr, buf, buflen);
  }

  public void saveCopyAs(string name) {
    AriaCSPINVOKE.ArDataLogger_saveCopyAs(swigCPtr, name);
  }

  public void saveCopy() {
    AriaCSPINVOKE.ArDataLogger_saveCopy(swigCPtr);
  }

  public void saveCopyArgs(ArArgumentBuilder ab) {
    AriaCSPINVOKE.ArDataLogger_saveCopyArgs(swigCPtr, ArArgumentBuilder.getCPtr(ab));
  }

  public SWIGTYPE_p_ArFunctor1T_ArArgumentBuilder_p_t getSaveCopyWithArgsFunctor() {
    global::System.IntPtr cPtr = AriaCSPINVOKE.ArDataLogger_getSaveCopyWithArgsFunctor(swigCPtr);
    SWIGTYPE_p_ArFunctor1T_ArArgumentBuilder_p_t ret = (cPtr == global::System.IntPtr.Zero) ? null : new SWIGTYPE_p_ArFunctor1T_ArArgumentBuilder_p_t(cPtr, false);
    return ret;
  }

  public ArFunctor getSaveCopyFunctor() {
    global::System.IntPtr cPtr = AriaCSPINVOKE.ArDataLogger_getSaveCopyFunctor(swigCPtr);
    ArFunctor ret = (cPtr == global::System.IntPtr.Zero) ? null : new ArFunctor(cPtr, false);
    return ret;
  }

  public string getOpenLogFileName() {
    string ret = AriaCSPINVOKE.ArDataLogger_getOpenLogFileName(swigCPtr);
    return ret;
  }

  public string getLogFileName() {
    string ret = AriaCSPINVOKE.ArDataLogger_getLogFileName(swigCPtr);
    return ret;
  }

  public uint getAvailableDiskSpaceMB() {
    uint ret = AriaCSPINVOKE.ArDataLogger_getAvailableDiskSpaceMB(swigCPtr);
    return ret;
  }

}

}
