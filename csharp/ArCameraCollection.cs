//------------------------------------------------------------------------------
// <auto-generated />
//
// This file was automatically generated by SWIG (http://www.swig.org).
// Version 3.0.8
//
// Do not make changes to this file unless you know what you are doing--modify
// the SWIG interface file instead.
//------------------------------------------------------------------------------

namespace AriaCS {

public class ArCameraCollection : global::System.IDisposable {
  private global::System.Runtime.InteropServices.HandleRef swigCPtr;
  protected bool swigCMemOwn;

  public ArCameraCollection(global::System.IntPtr cPtr, bool cMemoryOwn) {
    swigCMemOwn = cMemoryOwn;
    swigCPtr = new global::System.Runtime.InteropServices.HandleRef(this, cPtr);
  }

  public static global::System.Runtime.InteropServices.HandleRef getCPtr(ArCameraCollection obj) {
    return (obj == null) ? new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero) : obj.swigCPtr;
  }

  ~ArCameraCollection() {
    Dispose();
  }

  public virtual void Dispose() {
    lock(this) {
      if (swigCPtr.Handle != global::System.IntPtr.Zero) {
        if (swigCMemOwn) {
          swigCMemOwn = false;
          AriaCSPINVOKE.delete_ArCameraCollection(swigCPtr);
        }
        swigCPtr = new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero);
      }
      global::System.GC.SuppressFinalize(this);
    }
  }

  public ArCameraCollection() : this(AriaCSPINVOKE.new_ArCameraCollection(), true) {
  }

  public virtual bool addCamera(string cameraName, string cameraType, string displayName, string displayType) {
    bool ret = AriaCSPINVOKE.ArCameraCollection_addCamera(swigCPtr, cameraName, cameraType, displayName, displayType);
    return ret;
  }

  public virtual bool removeCamera(string cameraName) {
    bool ret = AriaCSPINVOKE.ArCameraCollection_removeCamera(swigCPtr, cameraName);
    return ret;
  }

  public virtual bool addCameraCommand(string cameraName, string command, string cameraCommandName, int requestInterval) {
    bool ret = AriaCSPINVOKE.ArCameraCollection_addCameraCommand__SWIG_0(swigCPtr, cameraName, command, cameraCommandName, requestInterval);
    return ret;
  }

  public virtual bool addCameraCommand(string cameraName, string command, string cameraCommandName) {
    bool ret = AriaCSPINVOKE.ArCameraCollection_addCameraCommand__SWIG_1(swigCPtr, cameraName, command, cameraCommandName);
    return ret;
  }

  public virtual bool removeCameraCommand(string cameraName, string command) {
    bool ret = AriaCSPINVOKE.ArCameraCollection_removeCameraCommand(swigCPtr, cameraName, command);
    return ret;
  }

  public virtual bool addParameter(string cameraName, ArCameraParameterSource source, ArConfigArg param) {
    bool ret = AriaCSPINVOKE.ArCameraCollection_addParameter(swigCPtr, cameraName, ArCameraParameterSource.getCPtr(source), ArConfigArg.getCPtr(param));
    if (AriaCSPINVOKE.SWIGPendingException.Pending) throw AriaCSPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public virtual bool removeParameter(string cameraName, string paramName) {
    bool ret = AriaCSPINVOKE.ArCameraCollection_removeParameter(swigCPtr, cameraName, paramName);
    return ret;
  }

  public virtual void getCameraNames(SWIGTYPE_p_std__listT_std__string_t outList) {
    AriaCSPINVOKE.ArCameraCollection_getCameraNames(swigCPtr, SWIGTYPE_p_std__listT_std__string_t.getCPtr(outList));
    if (AriaCSPINVOKE.SWIGPendingException.Pending) throw AriaCSPINVOKE.SWIGPendingException.Retrieve();
  }

  public virtual string getCameraType(string cameraName) {
    string ret = AriaCSPINVOKE.ArCameraCollection_getCameraType(swigCPtr, cameraName);
    return ret;
  }

  public virtual string getDisplayName(string cameraName) {
    string ret = AriaCSPINVOKE.ArCameraCollection_getDisplayName(swigCPtr, cameraName);
    return ret;
  }

  public virtual string getDisplayType(string cameraName) {
    string ret = AriaCSPINVOKE.ArCameraCollection_getDisplayType(swigCPtr, cameraName);
    return ret;
  }

  public virtual void getCameraCommands(string cameraName, SWIGTYPE_p_std__listT_std__string_t outList) {
    AriaCSPINVOKE.ArCameraCollection_getCameraCommands(swigCPtr, cameraName, SWIGTYPE_p_std__listT_std__string_t.getCPtr(outList));
    if (AriaCSPINVOKE.SWIGPendingException.Pending) throw AriaCSPINVOKE.SWIGPendingException.Retrieve();
  }

  public virtual string getCommandName(string cameraName, string command) {
    string ret = AriaCSPINVOKE.ArCameraCollection_getCommandName(swigCPtr, cameraName, command);
    return ret;
  }

  public virtual int getRequestInterval(string cameraName, string command) {
    int ret = AriaCSPINVOKE.ArCameraCollection_getRequestInterval(swigCPtr, cameraName, command);
    return ret;
  }

  public virtual void getParameterNames(string cameraName, SWIGTYPE_p_std__listT_std__string_t outList) {
    AriaCSPINVOKE.ArCameraCollection_getParameterNames(swigCPtr, cameraName, SWIGTYPE_p_std__listT_std__string_t.getCPtr(outList));
    if (AriaCSPINVOKE.SWIGPendingException.Pending) throw AriaCSPINVOKE.SWIGPendingException.Retrieve();
  }

  public virtual bool getParameter(string cameraName, string parameterName, ArConfigArg paramOut) {
    bool ret = AriaCSPINVOKE.ArCameraCollection_getParameter(swigCPtr, cameraName, parameterName, ArConfigArg.getCPtr(paramOut));
    if (AriaCSPINVOKE.SWIGPendingException.Pending) throw AriaCSPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public virtual bool setParameter(string cameraName, ArConfigArg param) {
    bool ret = AriaCSPINVOKE.ArCameraCollection_setParameter(swigCPtr, cameraName, ArConfigArg.getCPtr(param));
    if (AriaCSPINVOKE.SWIGPendingException.Pending) throw AriaCSPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public virtual bool exists(string cameraName) {
    bool ret = AriaCSPINVOKE.ArCameraCollection_exists__SWIG_0(swigCPtr, cameraName);
    return ret;
  }

  public virtual bool exists(string cameraName, string command) {
    bool ret = AriaCSPINVOKE.ArCameraCollection_exists__SWIG_1(swigCPtr, cameraName, command);
    return ret;
  }

  public virtual bool parameterExists(string cameraName, string paramName) {
    bool ret = AriaCSPINVOKE.ArCameraCollection_parameterExists(swigCPtr, cameraName, paramName);
    return ret;
  }

  public virtual bool addModifiedCB(ArFunctor functor, ArListPos.Pos position) {
    bool ret = AriaCSPINVOKE.ArCameraCollection_addModifiedCB__SWIG_0(swigCPtr, ArFunctor.getCPtr(functor), (int)position);
    return ret;
  }

  public virtual bool addModifiedCB(ArFunctor functor) {
    bool ret = AriaCSPINVOKE.ArCameraCollection_addModifiedCB__SWIG_1(swigCPtr, ArFunctor.getCPtr(functor));
    return ret;
  }

  public virtual bool removeModifiedCB(ArFunctor functor) {
    bool ret = AriaCSPINVOKE.ArCameraCollection_removeModifiedCB(swigCPtr, ArFunctor.getCPtr(functor));
    return ret;
  }

  public virtual void startUpdate() {
    AriaCSPINVOKE.ArCameraCollection_startUpdate(swigCPtr);
  }

  public virtual void endUpdate() {
    AriaCSPINVOKE.ArCameraCollection_endUpdate(swigCPtr);
  }

  public int lockObj() {
    int ret = AriaCSPINVOKE.ArCameraCollection_lockObj(swigCPtr);
    return ret;
  }

  public int tryLock() {
    int ret = AriaCSPINVOKE.ArCameraCollection_tryLock(swigCPtr);
    return ret;
  }

  public int unlockObj() {
    int ret = AriaCSPINVOKE.ArCameraCollection_unlockObj(swigCPtr);
    return ret;
  }

}

}
