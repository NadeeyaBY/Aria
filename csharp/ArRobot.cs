//------------------------------------------------------------------------------
// <auto-generated />
//
// This file was automatically generated by SWIG (http://www.swig.org).
// Version 3.0.8
//
// Do not make changes to this file unless you know what you are doing--modify
// the SWIG interface file instead.
//------------------------------------------------------------------------------

namespace AriaCS {

public class ArRobot : global::System.IDisposable {
  private global::System.Runtime.InteropServices.HandleRef swigCPtr;
  protected bool swigCMemOwn;

  public ArRobot(global::System.IntPtr cPtr, bool cMemoryOwn) {
    swigCMemOwn = cMemoryOwn;
    swigCPtr = new global::System.Runtime.InteropServices.HandleRef(this, cPtr);
  }

  public static global::System.Runtime.InteropServices.HandleRef getCPtr(ArRobot obj) {
    return (obj == null) ? new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero) : obj.swigCPtr;
  }

  ~ArRobot() {
    Dispose();
  }

  public virtual void Dispose() {
    lock(this) {
      if (swigCPtr.Handle != global::System.IntPtr.Zero) {
        if (swigCMemOwn) {
          swigCMemOwn = false;
          AriaCSPINVOKE.delete_ArRobot(swigCPtr);
        }
        swigCPtr = new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero);
      }
      global::System.GC.SuppressFinalize(this);
    }
  }

  public ArRobot(string name, bool ignored, bool doSigHandle, bool normalInit, bool addAriaExitCallback) : this(AriaCSPINVOKE.new_ArRobot__SWIG_0(name, ignored, doSigHandle, normalInit, addAriaExitCallback), true) {
  }

  public ArRobot(string name, bool ignored, bool doSigHandle, bool normalInit) : this(AriaCSPINVOKE.new_ArRobot__SWIG_1(name, ignored, doSigHandle, normalInit), true) {
  }

  public ArRobot(string name, bool ignored, bool doSigHandle) : this(AriaCSPINVOKE.new_ArRobot__SWIG_2(name, ignored, doSigHandle), true) {
  }

  public ArRobot(string name, bool ignored) : this(AriaCSPINVOKE.new_ArRobot__SWIG_3(name, ignored), true) {
  }

  public ArRobot(string name) : this(AriaCSPINVOKE.new_ArRobot__SWIG_4(name), true) {
  }

  public ArRobot() : this(AriaCSPINVOKE.new_ArRobot__SWIG_5(), true) {
  }

  public void run(bool stopRunIfNotConnected, bool runNonThreaded) {
    AriaCSPINVOKE.ArRobot_run__SWIG_0(swigCPtr, stopRunIfNotConnected, runNonThreaded);
  }

  public void run(bool stopRunIfNotConnected) {
    AriaCSPINVOKE.ArRobot_run__SWIG_1(swigCPtr, stopRunIfNotConnected);
  }

  public void runAsync(bool stopRunIfNotConnected, bool runNonThreadedPacketReader) {
    AriaCSPINVOKE.ArRobot_runAsync__SWIG_0(swigCPtr, stopRunIfNotConnected, runNonThreadedPacketReader);
  }

  public void runAsync(bool stopRunIfNotConnected) {
    AriaCSPINVOKE.ArRobot_runAsync__SWIG_1(swigCPtr, stopRunIfNotConnected);
  }

  public void run() {
    AriaCSPINVOKE.ArRobot_run__SWIG_2(swigCPtr);
  }

  public void runAsync() {
    AriaCSPINVOKE.ArRobot_runAsync__SWIG_2(swigCPtr);
  }

  public bool isRunning() {
    bool ret = AriaCSPINVOKE.ArRobot_isRunning(swigCPtr);
    return ret;
  }

  public void stopRunning(bool doDisconnect) {
    AriaCSPINVOKE.ArRobot_stopRunning__SWIG_0(swigCPtr, doDisconnect);
  }

  public void stopRunning() {
    AriaCSPINVOKE.ArRobot_stopRunning__SWIG_1(swigCPtr);
  }

  public void setDeviceConnection(ArDeviceConnection connection) {
    AriaCSPINVOKE.ArRobot_setDeviceConnection(swigCPtr, ArDeviceConnection.getCPtr(connection));
  }

  public ArDeviceConnection getDeviceConnection() {
    global::System.IntPtr cPtr = AriaCSPINVOKE.ArRobot_getDeviceConnection(swigCPtr);
    ArDeviceConnection ret = (cPtr == global::System.IntPtr.Zero) ? null : new ArDeviceConnection(cPtr, false);
    return ret;
  }

  public bool isConnected() {
    bool ret = AriaCSPINVOKE.ArRobot_isConnected(swigCPtr);
    return ret;
  }

  public bool blockingConnect(bool tryHarderToConnect) {
    bool ret = AriaCSPINVOKE.ArRobot_blockingConnect__SWIG_0(swigCPtr, tryHarderToConnect);
    return ret;
  }

  public bool blockingConnect() {
    bool ret = AriaCSPINVOKE.ArRobot_blockingConnect__SWIG_1(swigCPtr);
    return ret;
  }

  public bool asyncConnect() {
    bool ret = AriaCSPINVOKE.ArRobot_asyncConnect(swigCPtr);
    return ret;
  }

  public bool disconnect() {
    bool ret = AriaCSPINVOKE.ArRobot_disconnect(swigCPtr);
    return ret;
  }

  public void clearDirectMotion() {
    AriaCSPINVOKE.ArRobot_clearDirectMotion(swigCPtr);
  }

  public bool isDirectMotion() {
    bool ret = AriaCSPINVOKE.ArRobot_isDirectMotion(swigCPtr);
    return ret;
  }

  public void stopStateReflection() {
    AriaCSPINVOKE.ArRobot_stopStateReflection(swigCPtr);
  }

  public void enableMotors() {
    AriaCSPINVOKE.ArRobot_enableMotors(swigCPtr);
  }

  public void disableMotors() {
    AriaCSPINVOKE.ArRobot_disableMotors(swigCPtr);
  }

  public void enableSonar() {
    AriaCSPINVOKE.ArRobot_enableSonar(swigCPtr);
  }

  public void enableAutonomousDrivingSonar() {
    AriaCSPINVOKE.ArRobot_enableAutonomousDrivingSonar(swigCPtr);
  }

  public void disableSonar() {
    AriaCSPINVOKE.ArRobot_disableSonar(swigCPtr);
  }

  public void stop() {
    AriaCSPINVOKE.ArRobot_stop(swigCPtr);
  }

  public void setVel(double velocity) {
    AriaCSPINVOKE.ArRobot_setVel(swigCPtr, velocity);
  }

  public void setVel2(double leftVelocity, double rightVelocity) {
    AriaCSPINVOKE.ArRobot_setVel2(swigCPtr, leftVelocity, rightVelocity);
  }

  public void move(double distance) {
    AriaCSPINVOKE.ArRobot_move(swigCPtr, distance);
  }

  public bool isMoveDone(double delta) {
    bool ret = AriaCSPINVOKE.ArRobot_isMoveDone__SWIG_0(swigCPtr, delta);
    return ret;
  }

  public bool isMoveDone() {
    bool ret = AriaCSPINVOKE.ArRobot_isMoveDone__SWIG_1(swigCPtr);
    return ret;
  }

  public void setMoveDoneDist(double dist) {
    AriaCSPINVOKE.ArRobot_setMoveDoneDist(swigCPtr, dist);
  }

  public double getMoveDoneDist() {
    double ret = AriaCSPINVOKE.ArRobot_getMoveDoneDist(swigCPtr);
    return ret;
  }

  public void setHeading(double heading) {
    AriaCSPINVOKE.ArRobot_setHeading(swigCPtr, heading);
  }

  public void setRotVel(double velocity) {
    AriaCSPINVOKE.ArRobot_setRotVel(swigCPtr, velocity);
  }

  public void setDeltaHeading(double deltaHeading) {
    AriaCSPINVOKE.ArRobot_setDeltaHeading(swigCPtr, deltaHeading);
  }

  public bool isHeadingDone(double delta) {
    bool ret = AriaCSPINVOKE.ArRobot_isHeadingDone__SWIG_0(swigCPtr, delta);
    return ret;
  }

  public bool isHeadingDone() {
    bool ret = AriaCSPINVOKE.ArRobot_isHeadingDone__SWIG_1(swigCPtr);
    return ret;
  }

  public void setHeadingDoneDiff(double degrees) {
    AriaCSPINVOKE.ArRobot_setHeadingDoneDiff(swigCPtr, degrees);
  }

  public double getHeadingDoneDiff() {
    double ret = AriaCSPINVOKE.ArRobot_getHeadingDoneDiff(swigCPtr);
    return ret;
  }

  public void setLatVel(double latVelocity) {
    AriaCSPINVOKE.ArRobot_setLatVel(swigCPtr, latVelocity);
  }

  public bool isStopped(double stoppedVel, double stoppedRotVel, double stoppedLatVel) {
    bool ret = AriaCSPINVOKE.ArRobot_isStopped__SWIG_0(swigCPtr, stoppedVel, stoppedRotVel, stoppedLatVel);
    return ret;
  }

  public bool isStopped(double stoppedVel, double stoppedRotVel) {
    bool ret = AriaCSPINVOKE.ArRobot_isStopped__SWIG_1(swigCPtr, stoppedVel, stoppedRotVel);
    return ret;
  }

  public bool isStopped(double stoppedVel) {
    bool ret = AriaCSPINVOKE.ArRobot_isStopped__SWIG_2(swigCPtr, stoppedVel);
    return ret;
  }

  public bool isStopped() {
    bool ret = AriaCSPINVOKE.ArRobot_isStopped__SWIG_3(swigCPtr);
    return ret;
  }

  public void setStoppedVels(double stoppedVel, double stoppedRotVel, double stoppedLatVel) {
    AriaCSPINVOKE.ArRobot_setStoppedVels(swigCPtr, stoppedVel, stoppedRotVel, stoppedLatVel);
  }

  public void setDirectMotionPrecedenceTime(int mSec) {
    AriaCSPINVOKE.ArRobot_setDirectMotionPrecedenceTime(swigCPtr, mSec);
  }

  public uint getDirectMotionPrecedenceTime() {
    uint ret = AriaCSPINVOKE.ArRobot_getDirectMotionPrecedenceTime(swigCPtr);
    return ret;
  }

  public bool com(byte command) {
    bool ret = AriaCSPINVOKE.ArRobot_com(swigCPtr, command);
    return ret;
  }

  public bool comInt(byte command, short argument) {
    bool ret = AriaCSPINVOKE.ArRobot_comInt(swigCPtr, command, argument);
    return ret;
  }

  public bool com2Bytes(byte command, char high, char low) {
    bool ret = AriaCSPINVOKE.ArRobot_com2Bytes(swigCPtr, command, high, low);
    return ret;
  }

  public bool comStr(byte command, string argument) {
    bool ret = AriaCSPINVOKE.ArRobot_comStr(swigCPtr, command, argument);
    return ret;
  }

  public bool comStrN(byte command, string str, int size) {
    bool ret = AriaCSPINVOKE.ArRobot_comStrN(swigCPtr, command, str, size);
    return ret;
  }

  public bool comDataN(byte command, string data, int size) {
    bool ret = AriaCSPINVOKE.ArRobot_comDataN(swigCPtr, command, data, size);
    return ret;
  }

  public string getRobotName() {
    string ret = AriaCSPINVOKE.ArRobot_getRobotName(swigCPtr);
    return ret;
  }

  public string getRobotType() {
    string ret = AriaCSPINVOKE.ArRobot_getRobotType(swigCPtr);
    return ret;
  }

  public string getRobotSubType() {
    string ret = AriaCSPINVOKE.ArRobot_getRobotSubType(swigCPtr);
    return ret;
  }

  public double getAbsoluteMaxTransVel() {
    double ret = AriaCSPINVOKE.ArRobot_getAbsoluteMaxTransVel(swigCPtr);
    return ret;
  }

  public bool setAbsoluteMaxTransVel(double maxVel) {
    bool ret = AriaCSPINVOKE.ArRobot_setAbsoluteMaxTransVel(swigCPtr, maxVel);
    return ret;
  }

  public double getAbsoluteMaxTransNegVel() {
    double ret = AriaCSPINVOKE.ArRobot_getAbsoluteMaxTransNegVel(swigCPtr);
    return ret;
  }

  public bool setAbsoluteMaxTransNegVel(double maxVel) {
    bool ret = AriaCSPINVOKE.ArRobot_setAbsoluteMaxTransNegVel(swigCPtr, maxVel);
    return ret;
  }

  public double getAbsoluteMaxTransAccel() {
    double ret = AriaCSPINVOKE.ArRobot_getAbsoluteMaxTransAccel(swigCPtr);
    return ret;
  }

  public bool setAbsoluteMaxTransAccel(double maxAccel) {
    bool ret = AriaCSPINVOKE.ArRobot_setAbsoluteMaxTransAccel(swigCPtr, maxAccel);
    return ret;
  }

  public double getAbsoluteMaxTransDecel() {
    double ret = AriaCSPINVOKE.ArRobot_getAbsoluteMaxTransDecel(swigCPtr);
    return ret;
  }

  public bool setAbsoluteMaxTransDecel(double maxDecel) {
    bool ret = AriaCSPINVOKE.ArRobot_setAbsoluteMaxTransDecel(swigCPtr, maxDecel);
    return ret;
  }

  public double getAbsoluteMaxRotVel() {
    double ret = AriaCSPINVOKE.ArRobot_getAbsoluteMaxRotVel(swigCPtr);
    return ret;
  }

  public bool setAbsoluteMaxRotVel(double maxVel) {
    bool ret = AriaCSPINVOKE.ArRobot_setAbsoluteMaxRotVel(swigCPtr, maxVel);
    return ret;
  }

  public double getAbsoluteMaxRotAccel() {
    double ret = AriaCSPINVOKE.ArRobot_getAbsoluteMaxRotAccel(swigCPtr);
    return ret;
  }

  public bool setAbsoluteMaxRotAccel(double maxAccel) {
    bool ret = AriaCSPINVOKE.ArRobot_setAbsoluteMaxRotAccel(swigCPtr, maxAccel);
    return ret;
  }

  public double getAbsoluteMaxRotDecel() {
    double ret = AriaCSPINVOKE.ArRobot_getAbsoluteMaxRotDecel(swigCPtr);
    return ret;
  }

  public bool setAbsoluteMaxRotDecel(double maxDecel) {
    bool ret = AriaCSPINVOKE.ArRobot_setAbsoluteMaxRotDecel(swigCPtr, maxDecel);
    return ret;
  }

  public double getAbsoluteMaxLatVel() {
    double ret = AriaCSPINVOKE.ArRobot_getAbsoluteMaxLatVel(swigCPtr);
    return ret;
  }

  public bool setAbsoluteMaxLatVel(double maxVel) {
    bool ret = AriaCSPINVOKE.ArRobot_setAbsoluteMaxLatVel(swigCPtr, maxVel);
    return ret;
  }

  public double getAbsoluteMaxLatAccel() {
    double ret = AriaCSPINVOKE.ArRobot_getAbsoluteMaxLatAccel(swigCPtr);
    return ret;
  }

  public bool setAbsoluteMaxLatAccel(double maxAccel) {
    bool ret = AriaCSPINVOKE.ArRobot_setAbsoluteMaxLatAccel(swigCPtr, maxAccel);
    return ret;
  }

  public double getAbsoluteMaxLatDecel() {
    double ret = AriaCSPINVOKE.ArRobot_getAbsoluteMaxLatDecel(swigCPtr);
    return ret;
  }

  public bool setAbsoluteMaxLatDecel(double maxDecel) {
    bool ret = AriaCSPINVOKE.ArRobot_setAbsoluteMaxLatDecel(swigCPtr, maxDecel);
    return ret;
  }

  public ArPose getPose() {
    ArPose ret = new ArPose(AriaCSPINVOKE.ArRobot_getPose(swigCPtr), true);
    return ret;
  }

  public double getX() {
    double ret = AriaCSPINVOKE.ArRobot_getX(swigCPtr);
    return ret;
  }

  public double getY() {
    double ret = AriaCSPINVOKE.ArRobot_getY(swigCPtr);
    return ret;
  }

  public double getTh() {
    double ret = AriaCSPINVOKE.ArRobot_getTh(swigCPtr);
    return ret;
  }

  public double findDistanceTo(ArPose pose) {
    double ret = AriaCSPINVOKE.ArRobot_findDistanceTo(swigCPtr, ArPose.getCPtr(pose));
    if (AriaCSPINVOKE.SWIGPendingException.Pending) throw AriaCSPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public double findAngleTo(ArPose pose) {
    double ret = AriaCSPINVOKE.ArRobot_findAngleTo(swigCPtr, ArPose.getCPtr(pose));
    if (AriaCSPINVOKE.SWIGPendingException.Pending) throw AriaCSPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public double findDeltaHeadingTo(ArPose pose) {
    double ret = AriaCSPINVOKE.ArRobot_findDeltaHeadingTo(swigCPtr, ArPose.getCPtr(pose));
    if (AriaCSPINVOKE.SWIGPendingException.Pending) throw AriaCSPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public double getVel() {
    double ret = AriaCSPINVOKE.ArRobot_getVel(swigCPtr);
    return ret;
  }

  public double getRotVel() {
    double ret = AriaCSPINVOKE.ArRobot_getRotVel(swigCPtr);
    return ret;
  }

  public double getLatVel() {
    double ret = AriaCSPINVOKE.ArRobot_getLatVel(swigCPtr);
    return ret;
  }

  public bool hasLatVel() {
    bool ret = AriaCSPINVOKE.ArRobot_hasLatVel(swigCPtr);
    return ret;
  }

  public double getRobotRadius() {
    double ret = AriaCSPINVOKE.ArRobot_getRobotRadius(swigCPtr);
    return ret;
  }

  public double getRobotWidth() {
    double ret = AriaCSPINVOKE.ArRobot_getRobotWidth(swigCPtr);
    return ret;
  }

  public double getRobotLength() {
    double ret = AriaCSPINVOKE.ArRobot_getRobotLength(swigCPtr);
    return ret;
  }

  public double getRobotLengthFront() {
    double ret = AriaCSPINVOKE.ArRobot_getRobotLengthFront(swigCPtr);
    return ret;
  }

  public double getRobotLengthRear() {
    double ret = AriaCSPINVOKE.ArRobot_getRobotLengthRear(swigCPtr);
    return ret;
  }

  public double getRobotDiagonal() {
    double ret = AriaCSPINVOKE.ArRobot_getRobotDiagonal(swigCPtr);
    return ret;
  }

  public double getBatteryVoltage() {
    double ret = AriaCSPINVOKE.ArRobot_getBatteryVoltage(swigCPtr);
    return ret;
  }

  public double getBatteryVoltageNow() {
    double ret = AriaCSPINVOKE.ArRobot_getBatteryVoltageNow(swigCPtr);
    return ret;
  }

  public double getRealBatteryVoltage() {
    double ret = AriaCSPINVOKE.ArRobot_getRealBatteryVoltage(swigCPtr);
    return ret;
  }

  public double getRealBatteryVoltageNow() {
    double ret = AriaCSPINVOKE.ArRobot_getRealBatteryVoltageNow(swigCPtr);
    return ret;
  }

  public bool haveStateOfCharge() {
    bool ret = AriaCSPINVOKE.ArRobot_haveStateOfCharge(swigCPtr);
    return ret;
  }

  public bool hasStateOfCharge() {
    bool ret = AriaCSPINVOKE.ArRobot_hasStateOfCharge(swigCPtr);
    return ret;
  }

  public double getStateOfCharge() {
    double ret = AriaCSPINVOKE.ArRobot_getStateOfCharge(swigCPtr);
    return ret;
  }

  public ArTime getStateOfChargeSetTime() {
    ArTime ret = new ArTime(AriaCSPINVOKE.ArRobot_getStateOfChargeSetTime(swigCPtr), true);
    return ret;
  }

  public double getStateOfChargeLow() {
    double ret = AriaCSPINVOKE.ArRobot_getStateOfChargeLow(swigCPtr);
    return ret;
  }

  public double getStateOfChargeShutdown() {
    double ret = AriaCSPINVOKE.ArRobot_getStateOfChargeShutdown(swigCPtr);
    return ret;
  }

  public double getLeftVel() {
    double ret = AriaCSPINVOKE.ArRobot_getLeftVel(swigCPtr);
    return ret;
  }

  public double getRightVel() {
    double ret = AriaCSPINVOKE.ArRobot_getRightVel(swigCPtr);
    return ret;
  }

  public int getStallValue() {
    int ret = AriaCSPINVOKE.ArRobot_getStallValue(swigCPtr);
    return ret;
  }

  public bool isLeftMotorStalled() {
    bool ret = AriaCSPINVOKE.ArRobot_isLeftMotorStalled(swigCPtr);
    return ret;
  }

  public bool isRightMotorStalled() {
    bool ret = AriaCSPINVOKE.ArRobot_isRightMotorStalled(swigCPtr);
    return ret;
  }

  public bool isFrontBumperTriggered() {
    bool ret = AriaCSPINVOKE.ArRobot_isFrontBumperTriggered(swigCPtr);
    return ret;
  }

  public bool isRearBumperTriggered() {
    bool ret = AriaCSPINVOKE.ArRobot_isRearBumperTriggered(swigCPtr);
    return ret;
  }

  public double getControl() {
    double ret = AriaCSPINVOKE.ArRobot_getControl(swigCPtr);
    return ret;
  }

  public void setKeepControlRaw(bool keepControlRaw) {
    AriaCSPINVOKE.ArRobot_setKeepControlRaw(swigCPtr, keepControlRaw);
  }

  public bool getKeepControlRaw() {
    bool ret = AriaCSPINVOKE.ArRobot_getKeepControlRaw(swigCPtr);
    return ret;
  }

  public int getFlags() {
    int ret = AriaCSPINVOKE.ArRobot_getFlags(swigCPtr);
    return ret;
  }

  public int getFaultFlags() {
    int ret = AriaCSPINVOKE.ArRobot_getFaultFlags(swigCPtr);
    return ret;
  }

  public bool hasFaultFlags() {
    bool ret = AriaCSPINVOKE.ArRobot_hasFaultFlags(swigCPtr);
    return ret;
  }

  public int getFlags3() {
    int ret = AriaCSPINVOKE.ArRobot_getFlags3(swigCPtr);
    return ret;
  }

  public bool hasFlags3() {
    bool ret = AriaCSPINVOKE.ArRobot_hasFlags3(swigCPtr);
    return ret;
  }

  public bool areMotorsEnabled() {
    bool ret = AriaCSPINVOKE.ArRobot_areMotorsEnabled(swigCPtr);
    return ret;
  }

  public bool areSonarsEnabled() {
    bool ret = AriaCSPINVOKE.ArRobot_areSonarsEnabled(swigCPtr);
    return ret;
  }

  public bool areAutonomousDrivingSonarsEnabled() {
    bool ret = AriaCSPINVOKE.ArRobot_areAutonomousDrivingSonarsEnabled(swigCPtr);
    return ret;
  }

  public bool areSonarsEnabledLegacy() {
    bool ret = AriaCSPINVOKE.ArRobot_areSonarsEnabledLegacy(swigCPtr);
    return ret;
  }

  public bool isEStopPressed() {
    bool ret = AriaCSPINVOKE.ArRobot_isEStopPressed(swigCPtr);
    return ret;
  }

  public bool getEstop() {
    bool ret = AriaCSPINVOKE.ArRobot_getEstop(swigCPtr);
    return ret;
  }

  public double getCompass() {
    double ret = AriaCSPINVOKE.ArRobot_getCompass(swigCPtr);
    return ret;
  }

  public int getAnalogPortSelected() {
    int ret = AriaCSPINVOKE.ArRobot_getAnalogPortSelected(swigCPtr);
    return ret;
  }

  public byte getAnalog() {
    byte ret = AriaCSPINVOKE.ArRobot_getAnalog(swigCPtr);
    return ret;
  }

  public byte getDigIn() {
    byte ret = AriaCSPINVOKE.ArRobot_getDigIn(swigCPtr);
    return ret;
  }

  public byte getDigOut() {
    byte ret = AriaCSPINVOKE.ArRobot_getDigOut(swigCPtr);
    return ret;
  }

  public ArRobot.ChargeState getChargeState() {
    ArRobot.ChargeState ret = (ArRobot.ChargeState)AriaCSPINVOKE.ArRobot_getChargeState(swigCPtr);
    return ret;
  }

  public string getChargeStateName() {
    string ret = AriaCSPINVOKE.ArRobot_getChargeStateName(swigCPtr);
    return ret;
  }

  public bool isChargerPowerGood() {
    bool ret = AriaCSPINVOKE.ArRobot_isChargerPowerGood(swigCPtr);
    return ret;
  }

  public int getIOAnalogSize() {
    int ret = AriaCSPINVOKE.ArRobot_getIOAnalogSize(swigCPtr);
    return ret;
  }

  public int getIODigInSize() {
    int ret = AriaCSPINVOKE.ArRobot_getIODigInSize(swigCPtr);
    return ret;
  }

  public int getIODigOutSize() {
    int ret = AriaCSPINVOKE.ArRobot_getIODigOutSize(swigCPtr);
    return ret;
  }

  public int getIOAnalog(int num) {
    int ret = AriaCSPINVOKE.ArRobot_getIOAnalog(swigCPtr, num);
    return ret;
  }

  public double getIOAnalogVoltage(int num) {
    double ret = AriaCSPINVOKE.ArRobot_getIOAnalogVoltage(swigCPtr, num);
    return ret;
  }

  public byte getIODigIn(int num) {
    byte ret = AriaCSPINVOKE.ArRobot_getIODigIn(swigCPtr, num);
    return ret;
  }

  public byte getIODigOut(int num) {
    byte ret = AriaCSPINVOKE.ArRobot_getIODigOut(swigCPtr, num);
    return ret;
  }

  public bool hasTableSensingIR() {
    bool ret = AriaCSPINVOKE.ArRobot_hasTableSensingIR(swigCPtr);
    return ret;
  }

  public bool isLeftTableSensingIRTriggered() {
    bool ret = AriaCSPINVOKE.ArRobot_isLeftTableSensingIRTriggered(swigCPtr);
    return ret;
  }

  public bool isRightTableSensingIRTriggered() {
    bool ret = AriaCSPINVOKE.ArRobot_isRightTableSensingIRTriggered(swigCPtr);
    return ret;
  }

  public bool isLeftBreakBeamTriggered() {
    bool ret = AriaCSPINVOKE.ArRobot_isLeftBreakBeamTriggered(swigCPtr);
    return ret;
  }

  public bool isRightBreakBeamTriggered() {
    bool ret = AriaCSPINVOKE.ArRobot_isRightBreakBeamTriggered(swigCPtr);
    return ret;
  }

  public ArTime getIOPacketTime() {
    ArTime ret = new ArTime(AriaCSPINVOKE.ArRobot_getIOPacketTime(swigCPtr), true);
    return ret;
  }

  public bool hasFrontBumpers() {
    bool ret = AriaCSPINVOKE.ArRobot_hasFrontBumpers(swigCPtr);
    return ret;
  }

  public uint getNumFrontBumpers() {
    uint ret = AriaCSPINVOKE.ArRobot_getNumFrontBumpers(swigCPtr);
    return ret;
  }

  public bool hasRearBumpers() {
    bool ret = AriaCSPINVOKE.ArRobot_hasRearBumpers(swigCPtr);
    return ret;
  }

  public uint getNumRearBumpers() {
    uint ret = AriaCSPINVOKE.ArRobot_getNumRearBumpers(swigCPtr);
    return ret;
  }

  public ArPose getEncoderPose() {
    ArPose ret = new ArPose(AriaCSPINVOKE.ArRobot_getEncoderPose(swigCPtr), true);
    return ret;
  }

  public double getEncoderX() {
    double ret = AriaCSPINVOKE.ArRobot_getEncoderX(swigCPtr);
    return ret;
  }

  public double getEncoderY() {
    double ret = AriaCSPINVOKE.ArRobot_getEncoderY(swigCPtr);
    return ret;
  }

  public double getEncoderTh() {
    double ret = AriaCSPINVOKE.ArRobot_getEncoderTh(swigCPtr);
    return ret;
  }

  public bool isTryingToMove() {
    bool ret = AriaCSPINVOKE.ArRobot_isTryingToMove(swigCPtr);
    return ret;
  }

  public void forceTryingToMove() {
    AriaCSPINVOKE.ArRobot_forceTryingToMove(swigCPtr);
  }

  public int getMotorPacCount() {
    int ret = AriaCSPINVOKE.ArRobot_getMotorPacCount(swigCPtr);
    return ret;
  }

  public int getSonarPacCount() {
    int ret = AriaCSPINVOKE.ArRobot_getSonarPacCount(swigCPtr);
    return ret;
  }

  public int getSonarRange(int num) {
    int ret = AriaCSPINVOKE.ArRobot_getSonarRange(swigCPtr, num);
    return ret;
  }

  public bool isSonarNew(int num) {
    bool ret = AriaCSPINVOKE.ArRobot_isSonarNew(swigCPtr, num);
    return ret;
  }

  public int getNumSonar() {
    int ret = AriaCSPINVOKE.ArRobot_getNumSonar(swigCPtr);
    return ret;
  }

  public ArSensorReading getSonarReading(int num) {
    global::System.IntPtr cPtr = AriaCSPINVOKE.ArRobot_getSonarReading(swigCPtr, num);
    ArSensorReading ret = (cPtr == global::System.IntPtr.Zero) ? null : new ArSensorReading(cPtr, false);
    return ret;
  }

  public int getClosestSonarRange(double startAngle, double endAngle) {
    int ret = AriaCSPINVOKE.ArRobot_getClosestSonarRange(swigCPtr, startAngle, endAngle);
    return ret;
  }

  public int getClosestSonarNumber(double startAngle, double endAngle) {
    int ret = AriaCSPINVOKE.ArRobot_getClosestSonarNumber(swigCPtr, startAngle, endAngle);
    return ret;
  }

  public string getName() {
    string ret = AriaCSPINVOKE.ArRobot_getName(swigCPtr);
    return ret;
  }

  public void setName(string name) {
    AriaCSPINVOKE.ArRobot_setName(swigCPtr, name);
  }

  public void moveTo(ArPose pose, bool doCumulative) {
    AriaCSPINVOKE.ArRobot_moveTo__SWIG_0(swigCPtr, ArPose.getCPtr(pose), doCumulative);
    if (AriaCSPINVOKE.SWIGPendingException.Pending) throw AriaCSPINVOKE.SWIGPendingException.Retrieve();
  }

  public void moveTo(ArPose pose) {
    AriaCSPINVOKE.ArRobot_moveTo__SWIG_1(swigCPtr, ArPose.getCPtr(pose));
    if (AriaCSPINVOKE.SWIGPendingException.Pending) throw AriaCSPINVOKE.SWIGPendingException.Retrieve();
  }

  public void moveTo(ArPose to, ArPose from, bool doCumulative) {
    AriaCSPINVOKE.ArRobot_moveTo__SWIG_2(swigCPtr, ArPose.getCPtr(to), ArPose.getCPtr(from), doCumulative);
    if (AriaCSPINVOKE.SWIGPendingException.Pending) throw AriaCSPINVOKE.SWIGPendingException.Retrieve();
  }

  public void moveTo(ArPose to, ArPose from) {
    AriaCSPINVOKE.ArRobot_moveTo__SWIG_3(swigCPtr, ArPose.getCPtr(to), ArPose.getCPtr(from));
    if (AriaCSPINVOKE.SWIGPendingException.Pending) throw AriaCSPINVOKE.SWIGPendingException.Retrieve();
  }

  public void setStateOfCharge(double stateOfCharge) {
    AriaCSPINVOKE.ArRobot_setStateOfCharge(swigCPtr, stateOfCharge);
  }

  public void setStateOfChargeLow(double stateOfChargeLow) {
    AriaCSPINVOKE.ArRobot_setStateOfChargeLow(swigCPtr, stateOfChargeLow);
  }

  public void setStateOfChargeShutdown(double stateOfChargeShutdown) {
    AriaCSPINVOKE.ArRobot_setStateOfChargeShutdown(swigCPtr, stateOfChargeShutdown);
  }

  public void setChargeState(ArRobot.ChargeState chargeState) {
    AriaCSPINVOKE.ArRobot_setChargeState(swigCPtr, (int)chargeState);
  }

  public void setIsChargerPowerGood(bool onCharger) {
    AriaCSPINVOKE.ArRobot_setIsChargerPowerGood(swigCPtr, onCharger);
  }

  public void setIgnoreMicroControllerBatteryInfo(bool ignoreMicroControllerBatteryInfo) {
    AriaCSPINVOKE.ArRobot_setIgnoreMicroControllerBatteryInfo(swigCPtr, ignoreMicroControllerBatteryInfo);
  }

  public void setBatteryInfo(double realBatteryVoltage, double normalizedBatteryVoltage, bool haveStateOfCharge, double stateOfCharge) {
    AriaCSPINVOKE.ArRobot_setBatteryInfo(swigCPtr, realBatteryVoltage, normalizedBatteryVoltage, haveStateOfCharge, stateOfCharge);
  }

  public uint getBatteryVoltageAverageOfNum() {
    uint ret = AriaCSPINVOKE.ArRobot_getBatteryVoltageAverageOfNum(swigCPtr);
    return ret;
  }

  public void setBatteryVoltageAverageOfNum(uint numToAverage) {
    AriaCSPINVOKE.ArRobot_setBatteryVoltageAverageOfNum(swigCPtr, numToAverage);
  }

  public uint getRealBatteryVoltageAverageOfNum() {
    uint ret = AriaCSPINVOKE.ArRobot_getRealBatteryVoltageAverageOfNum(swigCPtr);
    return ret;
  }

  public void setRealBatteryVoltageAverageOfNum(uint numToAverage) {
    AriaCSPINVOKE.ArRobot_setRealBatteryVoltageAverageOfNum(swigCPtr, numToAverage);
  }

  public bool hasTemperature() {
    bool ret = AriaCSPINVOKE.ArRobot_hasTemperature(swigCPtr);
    return ret;
  }

  public int getTemperature() {
    int ret = AriaCSPINVOKE.ArRobot_getTemperature(swigCPtr);
    return ret;
  }

  public void requestEncoderPackets() {
    AriaCSPINVOKE.ArRobot_requestEncoderPackets(swigCPtr);
  }

  public void requestIOPackets() {
    AriaCSPINVOKE.ArRobot_requestIOPackets(swigCPtr);
  }

  public void stopEncoderPackets() {
    AriaCSPINVOKE.ArRobot_stopEncoderPackets(swigCPtr);
  }

  public void stopIOPackets() {
    AriaCSPINVOKE.ArRobot_stopIOPackets(swigCPtr);
  }

  public bool haveRequestedEncoderPackets() {
    bool ret = AriaCSPINVOKE.ArRobot_haveRequestedEncoderPackets(swigCPtr);
    return ret;
  }

  public bool haveRequestedIOPackets() {
    bool ret = AriaCSPINVOKE.ArRobot_haveRequestedIOPackets(swigCPtr);
    return ret;
  }

  public int getLeftEncoder() {
    int ret = AriaCSPINVOKE.ArRobot_getLeftEncoder(swigCPtr);
    return ret;
  }

  public int getRightEncoder() {
    int ret = AriaCSPINVOKE.ArRobot_getRightEncoder(swigCPtr);
    return ret;
  }

  public void setEncoderTransform(ArPose deadReconPos, ArPose globalPos) {
    AriaCSPINVOKE.ArRobot_setEncoderTransform__SWIG_0(swigCPtr, ArPose.getCPtr(deadReconPos), ArPose.getCPtr(globalPos));
    if (AriaCSPINVOKE.SWIGPendingException.Pending) throw AriaCSPINVOKE.SWIGPendingException.Retrieve();
  }

  public void setEncoderTransform(ArPose transformPos) {
    AriaCSPINVOKE.ArRobot_setEncoderTransform__SWIG_1(swigCPtr, ArPose.getCPtr(transformPos));
    if (AriaCSPINVOKE.SWIGPendingException.Pending) throw AriaCSPINVOKE.SWIGPendingException.Retrieve();
  }

  public void setEncoderTransform(ArTransform transform) {
    AriaCSPINVOKE.ArRobot_setEncoderTransform__SWIG_2(swigCPtr, ArTransform.getCPtr(transform));
    if (AriaCSPINVOKE.SWIGPendingException.Pending) throw AriaCSPINVOKE.SWIGPendingException.Retrieve();
  }

  public void setEncoderPose(ArPose encoderPose) {
    AriaCSPINVOKE.ArRobot_setEncoderPose(swigCPtr, ArPose.getCPtr(encoderPose));
    if (AriaCSPINVOKE.SWIGPendingException.Pending) throw AriaCSPINVOKE.SWIGPendingException.Retrieve();
  }

  public void setRawEncoderPose(ArPose rawEncoderPose) {
    AriaCSPINVOKE.ArRobot_setRawEncoderPose(swigCPtr, ArPose.getCPtr(rawEncoderPose));
    if (AriaCSPINVOKE.SWIGPendingException.Pending) throw AriaCSPINVOKE.SWIGPendingException.Retrieve();
  }

  public void addSetEncoderTransformCB(ArFunctor functor, int position) {
    AriaCSPINVOKE.ArRobot_addSetEncoderTransformCB__SWIG_0(swigCPtr, ArFunctor.getCPtr(functor), position);
  }

  public void addSetEncoderTransformCB(ArFunctor functor) {
    AriaCSPINVOKE.ArRobot_addSetEncoderTransformCB__SWIG_1(swigCPtr, ArFunctor.getCPtr(functor));
  }

  public void remSetEncoderTransformCB(ArFunctor functor) {
    AriaCSPINVOKE.ArRobot_remSetEncoderTransformCB(swigCPtr, ArFunctor.getCPtr(functor));
  }

  public void setMTXTimeUSecCB(SWIGTYPE_p_ArRetFunctor1T_bool_unsigned_int_p_t functor) {
    AriaCSPINVOKE.ArRobot_setMTXTimeUSecCB(swigCPtr, SWIGTYPE_p_ArRetFunctor1T_bool_unsigned_int_p_t.getCPtr(functor));
  }

  public ArTransform getEncoderTransform() {
    ArTransform ret = new ArTransform(AriaCSPINVOKE.ArRobot_getEncoderTransform(swigCPtr), true);
    return ret;
  }

  public ArTransform getToGlobalTransform() {
    ArTransform ret = new ArTransform(AriaCSPINVOKE.ArRobot_getToGlobalTransform(swigCPtr), true);
    return ret;
  }

  public ArTransform getToLocalTransform() {
    ArTransform ret = new ArTransform(AriaCSPINVOKE.ArRobot_getToLocalTransform(swigCPtr), true);
    return ret;
  }

  public void applyTransform(ArTransform trans, bool doCumulative) {
    AriaCSPINVOKE.ArRobot_applyTransform__SWIG_0(swigCPtr, ArTransform.getCPtr(trans), doCumulative);
    if (AriaCSPINVOKE.SWIGPendingException.Pending) throw AriaCSPINVOKE.SWIGPendingException.Retrieve();
  }

  public void applyTransform(ArTransform trans) {
    AriaCSPINVOKE.ArRobot_applyTransform__SWIG_1(swigCPtr, ArTransform.getCPtr(trans));
    if (AriaCSPINVOKE.SWIGPendingException.Pending) throw AriaCSPINVOKE.SWIGPendingException.Retrieve();
  }

  public void setDeadReconPose(ArPose pose) {
    AriaCSPINVOKE.ArRobot_setDeadReconPose(swigCPtr, ArPose.getCPtr(pose));
    if (AriaCSPINVOKE.SWIGPendingException.Pending) throw AriaCSPINVOKE.SWIGPendingException.Retrieve();
  }

  public double getTripOdometerDistance() {
    double ret = AriaCSPINVOKE.ArRobot_getTripOdometerDistance(swigCPtr);
    return ret;
  }

  public double getTripOdometerDegrees() {
    double ret = AriaCSPINVOKE.ArRobot_getTripOdometerDegrees(swigCPtr);
    return ret;
  }

  public double getTripOdometerTime() {
    double ret = AriaCSPINVOKE.ArRobot_getTripOdometerTime(swigCPtr);
    return ret;
  }

  public void resetTripOdometer() {
    AriaCSPINVOKE.ArRobot_resetTripOdometer(swigCPtr);
  }

  public double getOdometerDistance() {
    double ret = AriaCSPINVOKE.ArRobot_getOdometerDistance(swigCPtr);
    return ret;
  }

  public double getOdometerDistanceMeters() {
    double ret = AriaCSPINVOKE.ArRobot_getOdometerDistanceMeters(swigCPtr);
    return ret;
  }

  public double getOdometerDegrees() {
    double ret = AriaCSPINVOKE.ArRobot_getOdometerDegrees(swigCPtr);
    return ret;
  }

  public double getOdometerTime() {
    double ret = AriaCSPINVOKE.ArRobot_getOdometerTime(swigCPtr);
    return ret;
  }

  public double getOdometerTimeMinutes() {
    double ret = AriaCSPINVOKE.ArRobot_getOdometerTimeMinutes(swigCPtr);
    return ret;
  }

  public void addRangeDevice(ArRangeDevice device) {
    AriaCSPINVOKE.ArRobot_addRangeDevice(swigCPtr, ArRangeDevice.getCPtr(device));
  }

  public void remRangeDevice(string name) {
    AriaCSPINVOKE.ArRobot_remRangeDevice__SWIG_0(swigCPtr, name);
  }

  public void remRangeDevice(ArRangeDevice device) {
    AriaCSPINVOKE.ArRobot_remRangeDevice__SWIG_1(swigCPtr, ArRangeDevice.getCPtr(device));
  }

  public ArRangeDevice findRangeDevice(string name, bool ignoreCase) {
    global::System.IntPtr cPtr = AriaCSPINVOKE.ArRobot_findRangeDevice__SWIG_0(swigCPtr, name, ignoreCase);
    ArRangeDevice ret = (cPtr == global::System.IntPtr.Zero) ? null : new ArRangeDevice(cPtr, false);
    return ret;
  }

  public ArRangeDevice findRangeDevice(string name) {
    global::System.IntPtr cPtr = AriaCSPINVOKE.ArRobot_findRangeDevice__SWIG_1(swigCPtr, name);
    ArRangeDevice ret = (cPtr == global::System.IntPtr.Zero) ? null : new ArRangeDevice(cPtr, false);
    return ret;
  }

  public SWIGTYPE_p_std__listT_ArRangeDevice_p_t getRangeDeviceList() {
    global::System.IntPtr cPtr = AriaCSPINVOKE.ArRobot_getRangeDeviceList(swigCPtr);
    SWIGTYPE_p_std__listT_ArRangeDevice_p_t ret = (cPtr == global::System.IntPtr.Zero) ? null : new SWIGTYPE_p_std__listT_ArRangeDevice_p_t(cPtr, false);
    return ret;
  }

  public bool hasRangeDevice(ArRangeDevice device) {
    bool ret = AriaCSPINVOKE.ArRobot_hasRangeDevice(swigCPtr, ArRangeDevice.getCPtr(device));
    return ret;
  }

  public double checkRangeDevicesCurrentPolar(double startAngle, double endAngle, SWIGTYPE_p_double angle, SWIGTYPE_p_p_ArRangeDevice rangeDevice, bool useLocationDependentDevices) {
    double ret = AriaCSPINVOKE.ArRobot_checkRangeDevicesCurrentPolar__SWIG_0(swigCPtr, startAngle, endAngle, SWIGTYPE_p_double.getCPtr(angle), SWIGTYPE_p_p_ArRangeDevice.getCPtr(rangeDevice), useLocationDependentDevices);
    return ret;
  }

  public double checkRangeDevicesCurrentPolar(double startAngle, double endAngle, SWIGTYPE_p_double angle, SWIGTYPE_p_p_ArRangeDevice rangeDevice) {
    double ret = AriaCSPINVOKE.ArRobot_checkRangeDevicesCurrentPolar__SWIG_1(swigCPtr, startAngle, endAngle, SWIGTYPE_p_double.getCPtr(angle), SWIGTYPE_p_p_ArRangeDevice.getCPtr(rangeDevice));
    return ret;
  }

  public double checkRangeDevicesCurrentPolar(double startAngle, double endAngle, SWIGTYPE_p_double angle) {
    double ret = AriaCSPINVOKE.ArRobot_checkRangeDevicesCurrentPolar__SWIG_2(swigCPtr, startAngle, endAngle, SWIGTYPE_p_double.getCPtr(angle));
    return ret;
  }

  public double checkRangeDevicesCurrentPolar(double startAngle, double endAngle) {
    double ret = AriaCSPINVOKE.ArRobot_checkRangeDevicesCurrentPolar__SWIG_3(swigCPtr, startAngle, endAngle);
    return ret;
  }

  public double checkRangeDevicesCumulativePolar(double startAngle, double endAngle, SWIGTYPE_p_double angle, SWIGTYPE_p_p_ArRangeDevice rangeDevice, bool useLocationDependentDevices) {
    double ret = AriaCSPINVOKE.ArRobot_checkRangeDevicesCumulativePolar__SWIG_0(swigCPtr, startAngle, endAngle, SWIGTYPE_p_double.getCPtr(angle), SWIGTYPE_p_p_ArRangeDevice.getCPtr(rangeDevice), useLocationDependentDevices);
    return ret;
  }

  public double checkRangeDevicesCumulativePolar(double startAngle, double endAngle, SWIGTYPE_p_double angle, SWIGTYPE_p_p_ArRangeDevice rangeDevice) {
    double ret = AriaCSPINVOKE.ArRobot_checkRangeDevicesCumulativePolar__SWIG_1(swigCPtr, startAngle, endAngle, SWIGTYPE_p_double.getCPtr(angle), SWIGTYPE_p_p_ArRangeDevice.getCPtr(rangeDevice));
    return ret;
  }

  public double checkRangeDevicesCumulativePolar(double startAngle, double endAngle, SWIGTYPE_p_double angle) {
    double ret = AriaCSPINVOKE.ArRobot_checkRangeDevicesCumulativePolar__SWIG_2(swigCPtr, startAngle, endAngle, SWIGTYPE_p_double.getCPtr(angle));
    return ret;
  }

  public double checkRangeDevicesCumulativePolar(double startAngle, double endAngle) {
    double ret = AriaCSPINVOKE.ArRobot_checkRangeDevicesCumulativePolar__SWIG_3(swigCPtr, startAngle, endAngle);
    return ret;
  }

  public double checkRangeDevicesCurrentBox(double x1, double y1, double x2, double y2, ArPose readingPos, SWIGTYPE_p_p_ArRangeDevice rangeDevice, bool useLocationDependentDevices) {
    double ret = AriaCSPINVOKE.ArRobot_checkRangeDevicesCurrentBox__SWIG_0(swigCPtr, x1, y1, x2, y2, ArPose.getCPtr(readingPos), SWIGTYPE_p_p_ArRangeDevice.getCPtr(rangeDevice), useLocationDependentDevices);
    return ret;
  }

  public double checkRangeDevicesCurrentBox(double x1, double y1, double x2, double y2, ArPose readingPos, SWIGTYPE_p_p_ArRangeDevice rangeDevice) {
    double ret = AriaCSPINVOKE.ArRobot_checkRangeDevicesCurrentBox__SWIG_1(swigCPtr, x1, y1, x2, y2, ArPose.getCPtr(readingPos), SWIGTYPE_p_p_ArRangeDevice.getCPtr(rangeDevice));
    return ret;
  }

  public double checkRangeDevicesCurrentBox(double x1, double y1, double x2, double y2, ArPose readingPos) {
    double ret = AriaCSPINVOKE.ArRobot_checkRangeDevicesCurrentBox__SWIG_2(swigCPtr, x1, y1, x2, y2, ArPose.getCPtr(readingPos));
    return ret;
  }

  public double checkRangeDevicesCurrentBox(double x1, double y1, double x2, double y2) {
    double ret = AriaCSPINVOKE.ArRobot_checkRangeDevicesCurrentBox__SWIG_3(swigCPtr, x1, y1, x2, y2);
    return ret;
  }

  public double checkRangeDevicesCumulativeBox(double x1, double y1, double x2, double y2, ArPose readingPos, SWIGTYPE_p_p_ArRangeDevice rangeDevice, bool useLocationDependentDevices) {
    double ret = AriaCSPINVOKE.ArRobot_checkRangeDevicesCumulativeBox__SWIG_0(swigCPtr, x1, y1, x2, y2, ArPose.getCPtr(readingPos), SWIGTYPE_p_p_ArRangeDevice.getCPtr(rangeDevice), useLocationDependentDevices);
    return ret;
  }

  public double checkRangeDevicesCumulativeBox(double x1, double y1, double x2, double y2, ArPose readingPos, SWIGTYPE_p_p_ArRangeDevice rangeDevice) {
    double ret = AriaCSPINVOKE.ArRobot_checkRangeDevicesCumulativeBox__SWIG_1(swigCPtr, x1, y1, x2, y2, ArPose.getCPtr(readingPos), SWIGTYPE_p_p_ArRangeDevice.getCPtr(rangeDevice));
    return ret;
  }

  public double checkRangeDevicesCumulativeBox(double x1, double y1, double x2, double y2, ArPose readingPos) {
    double ret = AriaCSPINVOKE.ArRobot_checkRangeDevicesCumulativeBox__SWIG_2(swigCPtr, x1, y1, x2, y2, ArPose.getCPtr(readingPos));
    return ret;
  }

  public double checkRangeDevicesCumulativeBox(double x1, double y1, double x2, double y2) {
    double ret = AriaCSPINVOKE.ArRobot_checkRangeDevicesCumulativeBox__SWIG_3(swigCPtr, x1, y1, x2, y2);
    return ret;
  }

  public bool addLaser(ArLaser laser, int laserNumber, bool addAsRangeDevice) {
    bool ret = AriaCSPINVOKE.ArRobot_addLaser__SWIG_0(swigCPtr, ArLaser.getCPtr(laser), laserNumber, addAsRangeDevice);
    return ret;
  }

  public bool addLaser(ArLaser laser, int laserNumber) {
    bool ret = AriaCSPINVOKE.ArRobot_addLaser__SWIG_1(swigCPtr, ArLaser.getCPtr(laser), laserNumber);
    return ret;
  }

  public bool remLaser(ArLaser laser, bool removeAsRangeDevice) {
    bool ret = AriaCSPINVOKE.ArRobot_remLaser__SWIG_0(swigCPtr, ArLaser.getCPtr(laser), removeAsRangeDevice);
    return ret;
  }

  public bool remLaser(ArLaser laser) {
    bool ret = AriaCSPINVOKE.ArRobot_remLaser__SWIG_1(swigCPtr, ArLaser.getCPtr(laser));
    return ret;
  }

  public bool remLaser(int laserNumber, bool removeAsRangeDevice) {
    bool ret = AriaCSPINVOKE.ArRobot_remLaser__SWIG_2(swigCPtr, laserNumber, removeAsRangeDevice);
    return ret;
  }

  public bool remLaser(int laserNumber) {
    bool ret = AriaCSPINVOKE.ArRobot_remLaser__SWIG_3(swigCPtr, laserNumber);
    return ret;
  }

  public ArLaser findLaser(int laserNumber) {
    global::System.IntPtr cPtr = AriaCSPINVOKE.ArRobot_findLaser__SWIG_0(swigCPtr, laserNumber);
    ArLaser ret = (cPtr == global::System.IntPtr.Zero) ? null : new ArLaser(cPtr, false);
    return ret;
  }

  public SWIGTYPE_p_std__mapT_int_ArLaser_p_std__lessT_int_t_t getLaserMap() {
    global::System.IntPtr cPtr = AriaCSPINVOKE.ArRobot_getLaserMap__SWIG_0(swigCPtr);
    SWIGTYPE_p_std__mapT_int_ArLaser_p_std__lessT_int_t_t ret = (cPtr == global::System.IntPtr.Zero) ? null : new SWIGTYPE_p_std__mapT_int_ArLaser_p_std__lessT_int_t_t(cPtr, false);
    return ret;
  }

  public bool hasLaser(ArLaser device) {
    bool ret = AriaCSPINVOKE.ArRobot_hasLaser(swigCPtr, ArLaser.getCPtr(device));
    return ret;
  }

  public uint getNumLasers() {
    uint ret = AriaCSPINVOKE.ArRobot_getNumLasers(swigCPtr);
    return ret;
  }

  public bool addBattery(SWIGTYPE_p_ArBatteryMTX battery, int batteryNumber) {
    bool ret = AriaCSPINVOKE.ArRobot_addBattery(swigCPtr, SWIGTYPE_p_ArBatteryMTX.getCPtr(battery), batteryNumber);
    return ret;
  }

  public bool remBattery(SWIGTYPE_p_ArBatteryMTX battery) {
    bool ret = AriaCSPINVOKE.ArRobot_remBattery__SWIG_0(swigCPtr, SWIGTYPE_p_ArBatteryMTX.getCPtr(battery));
    return ret;
  }

  public bool remBattery(int batteryNumber) {
    bool ret = AriaCSPINVOKE.ArRobot_remBattery__SWIG_1(swigCPtr, batteryNumber);
    return ret;
  }

  public SWIGTYPE_p_ArBatteryMTX findBattery(int batteryNumber) {
    global::System.IntPtr cPtr = AriaCSPINVOKE.ArRobot_findBattery__SWIG_0(swigCPtr, batteryNumber);
    SWIGTYPE_p_ArBatteryMTX ret = (cPtr == global::System.IntPtr.Zero) ? null : new SWIGTYPE_p_ArBatteryMTX(cPtr, false);
    return ret;
  }

  public SWIGTYPE_p_std__mapT_int_ArBatteryMTX_p_std__lessT_int_t_t getBatteryMap() {
    global::System.IntPtr cPtr = AriaCSPINVOKE.ArRobot_getBatteryMap__SWIG_0(swigCPtr);
    SWIGTYPE_p_std__mapT_int_ArBatteryMTX_p_std__lessT_int_t_t ret = (cPtr == global::System.IntPtr.Zero) ? null : new SWIGTYPE_p_std__mapT_int_ArBatteryMTX_p_std__lessT_int_t_t(cPtr, false);
    return ret;
  }

  public bool hasBattery(SWIGTYPE_p_ArBatteryMTX device) {
    bool ret = AriaCSPINVOKE.ArRobot_hasBattery(swigCPtr, SWIGTYPE_p_ArBatteryMTX.getCPtr(device));
    return ret;
  }

  public bool addLCD(SWIGTYPE_p_ArLCDMTX lcd, int lcdNumber) {
    bool ret = AriaCSPINVOKE.ArRobot_addLCD(swigCPtr, SWIGTYPE_p_ArLCDMTX.getCPtr(lcd), lcdNumber);
    return ret;
  }

  public bool remLCD(SWIGTYPE_p_ArLCDMTX lcd) {
    bool ret = AriaCSPINVOKE.ArRobot_remLCD__SWIG_0(swigCPtr, SWIGTYPE_p_ArLCDMTX.getCPtr(lcd));
    return ret;
  }

  public bool remLCD(int lcdNumber) {
    bool ret = AriaCSPINVOKE.ArRobot_remLCD__SWIG_1(swigCPtr, lcdNumber);
    return ret;
  }

  public SWIGTYPE_p_ArLCDMTX findLCD(int lcdNumber) {
    global::System.IntPtr cPtr = AriaCSPINVOKE.ArRobot_findLCD__SWIG_0(swigCPtr, lcdNumber);
    SWIGTYPE_p_ArLCDMTX ret = (cPtr == global::System.IntPtr.Zero) ? null : new SWIGTYPE_p_ArLCDMTX(cPtr, false);
    return ret;
  }

  public SWIGTYPE_p_ArLCDMTX findLCD() {
    global::System.IntPtr cPtr = AriaCSPINVOKE.ArRobot_findLCD__SWIG_1(swigCPtr);
    SWIGTYPE_p_ArLCDMTX ret = (cPtr == global::System.IntPtr.Zero) ? null : new SWIGTYPE_p_ArLCDMTX(cPtr, false);
    return ret;
  }

  public SWIGTYPE_p_std__mapT_int_ArLCDMTX_p_std__lessT_int_t_t getLCDMap() {
    global::System.IntPtr cPtr = AriaCSPINVOKE.ArRobot_getLCDMap__SWIG_0(swigCPtr);
    SWIGTYPE_p_std__mapT_int_ArLCDMTX_p_std__lessT_int_t_t ret = (cPtr == global::System.IntPtr.Zero) ? null : new SWIGTYPE_p_std__mapT_int_ArLCDMTX_p_std__lessT_int_t_t(cPtr, false);
    return ret;
  }

  public bool hasLCD(SWIGTYPE_p_ArLCDMTX device) {
    bool ret = AriaCSPINVOKE.ArRobot_hasLCD(swigCPtr, SWIGTYPE_p_ArLCDMTX.getCPtr(device));
    return ret;
  }

  public bool addSonar(SWIGTYPE_p_ArSonarMTX sonar, int sonarNumber) {
    bool ret = AriaCSPINVOKE.ArRobot_addSonar(swigCPtr, SWIGTYPE_p_ArSonarMTX.getCPtr(sonar), sonarNumber);
    return ret;
  }

  public bool remSonar(SWIGTYPE_p_ArSonarMTX sonar) {
    bool ret = AriaCSPINVOKE.ArRobot_remSonar__SWIG_0(swigCPtr, SWIGTYPE_p_ArSonarMTX.getCPtr(sonar));
    return ret;
  }

  public bool remSonar(int sonarNumber) {
    bool ret = AriaCSPINVOKE.ArRobot_remSonar__SWIG_1(swigCPtr, sonarNumber);
    return ret;
  }

  public SWIGTYPE_p_ArSonarMTX findSonar(int sonarNumber) {
    global::System.IntPtr cPtr = AriaCSPINVOKE.ArRobot_findSonar__SWIG_0(swigCPtr, sonarNumber);
    SWIGTYPE_p_ArSonarMTX ret = (cPtr == global::System.IntPtr.Zero) ? null : new SWIGTYPE_p_ArSonarMTX(cPtr, false);
    return ret;
  }

  public SWIGTYPE_p_std__mapT_int_ArSonarMTX_p_std__lessT_int_t_t getSonarMap() {
    global::System.IntPtr cPtr = AriaCSPINVOKE.ArRobot_getSonarMap__SWIG_0(swigCPtr);
    SWIGTYPE_p_std__mapT_int_ArSonarMTX_p_std__lessT_int_t_t ret = (cPtr == global::System.IntPtr.Zero) ? null : new SWIGTYPE_p_std__mapT_int_ArSonarMTX_p_std__lessT_int_t_t(cPtr, false);
    return ret;
  }

  public bool hasSonar(SWIGTYPE_p_ArSonarMTX device) {
    bool ret = AriaCSPINVOKE.ArRobot_hasSonar(swigCPtr, SWIGTYPE_p_ArSonarMTX.getCPtr(device));
    return ret;
  }

  public void setPTZ(ArPTZ ptz) {
    AriaCSPINVOKE.ArRobot_setPTZ(swigCPtr, ArPTZ.getCPtr(ptz));
  }

  public ArPTZ getPTZ() {
    global::System.IntPtr cPtr = AriaCSPINVOKE.ArRobot_getPTZ(swigCPtr);
    ArPTZ ret = (cPtr == global::System.IntPtr.Zero) ? null : new ArPTZ(cPtr, false);
    return ret;
  }

  public void setStateReflectionRefreshTime(int msec) {
    AriaCSPINVOKE.ArRobot_setStateReflectionRefreshTime(swigCPtr, msec);
  }

  public int getStateReflectionRefreshTime() {
    int ret = AriaCSPINVOKE.ArRobot_getStateReflectionRefreshTime(swigCPtr);
    return ret;
  }

  public void addPacketHandler(ArRetFunctor1_Bool_ArRobotPacketP functor, ArListPos.Pos position) {
    AriaCSPINVOKE.ArRobot_addPacketHandler__SWIG_0(swigCPtr, ArRetFunctor1_Bool_ArRobotPacketP.getCPtr(functor), (int)position);
  }

  public void addPacketHandler(ArRetFunctor1_Bool_ArRobotPacketP functor) {
    AriaCSPINVOKE.ArRobot_addPacketHandler__SWIG_1(swigCPtr, ArRetFunctor1_Bool_ArRobotPacketP.getCPtr(functor));
  }

  public void remPacketHandler(ArRetFunctor1_Bool_ArRobotPacketP functor) {
    AriaCSPINVOKE.ArRobot_remPacketHandler(swigCPtr, ArRetFunctor1_Bool_ArRobotPacketP.getCPtr(functor));
  }

  public void addConnectCB(ArFunctor functor, ArListPos.Pos position) {
    AriaCSPINVOKE.ArRobot_addConnectCB__SWIG_0(swigCPtr, ArFunctor.getCPtr(functor), (int)position);
  }

  public void addConnectCB(ArFunctor functor) {
    AriaCSPINVOKE.ArRobot_addConnectCB__SWIG_1(swigCPtr, ArFunctor.getCPtr(functor));
  }

  public void remConnectCB(ArFunctor functor) {
    AriaCSPINVOKE.ArRobot_remConnectCB(swigCPtr, ArFunctor.getCPtr(functor));
  }

  public void addFailedConnectCB(ArFunctor functor, ArListPos.Pos position) {
    AriaCSPINVOKE.ArRobot_addFailedConnectCB__SWIG_0(swigCPtr, ArFunctor.getCPtr(functor), (int)position);
  }

  public void addFailedConnectCB(ArFunctor functor) {
    AriaCSPINVOKE.ArRobot_addFailedConnectCB__SWIG_1(swigCPtr, ArFunctor.getCPtr(functor));
  }

  public void remFailedConnectCB(ArFunctor functor) {
    AriaCSPINVOKE.ArRobot_remFailedConnectCB(swigCPtr, ArFunctor.getCPtr(functor));
  }

  public void addDisconnectNormallyCB(ArFunctor functor, ArListPos.Pos position) {
    AriaCSPINVOKE.ArRobot_addDisconnectNormallyCB__SWIG_0(swigCPtr, ArFunctor.getCPtr(functor), (int)position);
  }

  public void addDisconnectNormallyCB(ArFunctor functor) {
    AriaCSPINVOKE.ArRobot_addDisconnectNormallyCB__SWIG_1(swigCPtr, ArFunctor.getCPtr(functor));
  }

  public void remDisconnectNormallyCB(ArFunctor functor) {
    AriaCSPINVOKE.ArRobot_remDisconnectNormallyCB(swigCPtr, ArFunctor.getCPtr(functor));
  }

  public void addDisconnectOnErrorCB(ArFunctor functor, ArListPos.Pos position) {
    AriaCSPINVOKE.ArRobot_addDisconnectOnErrorCB__SWIG_0(swigCPtr, ArFunctor.getCPtr(functor), (int)position);
  }

  public void addDisconnectOnErrorCB(ArFunctor functor) {
    AriaCSPINVOKE.ArRobot_addDisconnectOnErrorCB__SWIG_1(swigCPtr, ArFunctor.getCPtr(functor));
  }

  public void remDisconnectOnErrorCB(ArFunctor functor) {
    AriaCSPINVOKE.ArRobot_remDisconnectOnErrorCB(swigCPtr, ArFunctor.getCPtr(functor));
  }

  public void addRunExitCB(ArFunctor functor, ArListPos.Pos position) {
    AriaCSPINVOKE.ArRobot_addRunExitCB__SWIG_0(swigCPtr, ArFunctor.getCPtr(functor), (int)position);
  }

  public void addRunExitCB(ArFunctor functor) {
    AriaCSPINVOKE.ArRobot_addRunExitCB__SWIG_1(swigCPtr, ArFunctor.getCPtr(functor));
  }

  public void remRunExitCB(ArFunctor functor) {
    AriaCSPINVOKE.ArRobot_remRunExitCB(swigCPtr, ArFunctor.getCPtr(functor));
  }

  public ArRobot.WaitState waitForConnect(uint msecs) {
    ArRobot.WaitState ret = (ArRobot.WaitState)AriaCSPINVOKE.ArRobot_waitForConnect__SWIG_0(swigCPtr, msecs);
    return ret;
  }

  public ArRobot.WaitState waitForConnect() {
    ArRobot.WaitState ret = (ArRobot.WaitState)AriaCSPINVOKE.ArRobot_waitForConnect__SWIG_1(swigCPtr);
    return ret;
  }

  public ArRobot.WaitState waitForConnectOrConnFail(uint msecs) {
    ArRobot.WaitState ret = (ArRobot.WaitState)AriaCSPINVOKE.ArRobot_waitForConnectOrConnFail__SWIG_0(swigCPtr, msecs);
    return ret;
  }

  public ArRobot.WaitState waitForConnectOrConnFail() {
    ArRobot.WaitState ret = (ArRobot.WaitState)AriaCSPINVOKE.ArRobot_waitForConnectOrConnFail__SWIG_1(swigCPtr);
    return ret;
  }

  public ArRobot.WaitState waitForRunExit(uint msecs) {
    ArRobot.WaitState ret = (ArRobot.WaitState)AriaCSPINVOKE.ArRobot_waitForRunExit__SWIG_0(swigCPtr, msecs);
    return ret;
  }

  public ArRobot.WaitState waitForRunExit() {
    ArRobot.WaitState ret = (ArRobot.WaitState)AriaCSPINVOKE.ArRobot_waitForRunExit__SWIG_1(swigCPtr);
    return ret;
  }

  public void wakeAllWaitingThreads() {
    AriaCSPINVOKE.ArRobot_wakeAllWaitingThreads(swigCPtr);
  }

  public void wakeAllConnWaitingThreads() {
    AriaCSPINVOKE.ArRobot_wakeAllConnWaitingThreads(swigCPtr);
  }

  public void wakeAllConnOrFailWaitingThreads() {
    AriaCSPINVOKE.ArRobot_wakeAllConnOrFailWaitingThreads(swigCPtr);
  }

  public void wakeAllRunExitWaitingThreads() {
    AriaCSPINVOKE.ArRobot_wakeAllRunExitWaitingThreads(swigCPtr);
  }

  public bool addUserTask(string name, int position, ArFunctor functor, SWIGTYPE_p_ArTaskState__State state) {
    bool ret = AriaCSPINVOKE.ArRobot_addUserTask__SWIG_0(swigCPtr, name, position, ArFunctor.getCPtr(functor), SWIGTYPE_p_ArTaskState__State.getCPtr(state));
    return ret;
  }

  public bool addUserTask(string name, int position, ArFunctor functor) {
    bool ret = AriaCSPINVOKE.ArRobot_addUserTask__SWIG_1(swigCPtr, name, position, ArFunctor.getCPtr(functor));
    return ret;
  }

  public void remUserTask(string name) {
    AriaCSPINVOKE.ArRobot_remUserTask__SWIG_0(swigCPtr, name);
  }

  public void remUserTask(ArFunctor functor) {
    AriaCSPINVOKE.ArRobot_remUserTask__SWIG_1(swigCPtr, ArFunctor.getCPtr(functor));
  }

  public ArSyncTask findUserTask(string name) {
    global::System.IntPtr cPtr = AriaCSPINVOKE.ArRobot_findUserTask__SWIG_0(swigCPtr, name);
    ArSyncTask ret = (cPtr == global::System.IntPtr.Zero) ? null : new ArSyncTask(cPtr, false);
    return ret;
  }

  public ArSyncTask findUserTask(ArFunctor functor) {
    global::System.IntPtr cPtr = AriaCSPINVOKE.ArRobot_findUserTask__SWIG_1(swigCPtr, ArFunctor.getCPtr(functor));
    ArSyncTask ret = (cPtr == global::System.IntPtr.Zero) ? null : new ArSyncTask(cPtr, false);
    return ret;
  }

  public void logUserTasks() {
    AriaCSPINVOKE.ArRobot_logUserTasks(swigCPtr);
  }

  public void logAllTasks() {
    AriaCSPINVOKE.ArRobot_logAllTasks(swigCPtr);
  }

  public bool addSensorInterpTask(string name, int position, ArFunctor functor, SWIGTYPE_p_ArTaskState__State state) {
    bool ret = AriaCSPINVOKE.ArRobot_addSensorInterpTask__SWIG_0(swigCPtr, name, position, ArFunctor.getCPtr(functor), SWIGTYPE_p_ArTaskState__State.getCPtr(state));
    return ret;
  }

  public bool addSensorInterpTask(string name, int position, ArFunctor functor) {
    bool ret = AriaCSPINVOKE.ArRobot_addSensorInterpTask__SWIG_1(swigCPtr, name, position, ArFunctor.getCPtr(functor));
    return ret;
  }

  public void remSensorInterpTask(string name) {
    AriaCSPINVOKE.ArRobot_remSensorInterpTask__SWIG_0(swigCPtr, name);
  }

  public void remSensorInterpTask(ArFunctor functor) {
    AriaCSPINVOKE.ArRobot_remSensorInterpTask__SWIG_1(swigCPtr, ArFunctor.getCPtr(functor));
  }

  public ArSyncTask findTask(string name) {
    global::System.IntPtr cPtr = AriaCSPINVOKE.ArRobot_findTask__SWIG_0(swigCPtr, name);
    ArSyncTask ret = (cPtr == global::System.IntPtr.Zero) ? null : new ArSyncTask(cPtr, false);
    return ret;
  }

  public ArSyncTask findTask(ArFunctor functor) {
    global::System.IntPtr cPtr = AriaCSPINVOKE.ArRobot_findTask__SWIG_1(swigCPtr, ArFunctor.getCPtr(functor));
    ArSyncTask ret = (cPtr == global::System.IntPtr.Zero) ? null : new ArSyncTask(cPtr, false);
    return ret;
  }

  public bool addAction(ArAction action, int priority) {
    bool ret = AriaCSPINVOKE.ArRobot_addAction(swigCPtr, ArAction.getCPtr(action), priority);
    return ret;
  }

  public bool remAction(ArAction action) {
    bool ret = AriaCSPINVOKE.ArRobot_remAction__SWIG_0(swigCPtr, ArAction.getCPtr(action));
    return ret;
  }

  public bool remAction(string actionName) {
    bool ret = AriaCSPINVOKE.ArRobot_remAction__SWIG_1(swigCPtr, actionName);
    return ret;
  }

  public ArAction findAction(string actionName) {
    global::System.IntPtr cPtr = AriaCSPINVOKE.ArRobot_findAction(swigCPtr, actionName);
    ArAction ret = (cPtr == global::System.IntPtr.Zero) ? null : new ArAction(cPtr, false);
    return ret;
  }

  public SWIGTYPE_p_std__multimapT_int_ArAction_p_t getActionMap() {
    global::System.IntPtr cPtr = AriaCSPINVOKE.ArRobot_getActionMap(swigCPtr);
    SWIGTYPE_p_std__multimapT_int_ArAction_p_t ret = (cPtr == global::System.IntPtr.Zero) ? null : new SWIGTYPE_p_std__multimapT_int_ArAction_p_t(cPtr, false);
    return ret;
  }

  public void deactivateActions() {
    AriaCSPINVOKE.ArRobot_deactivateActions(swigCPtr);
  }

  public void logActions(bool logDeactivated) {
    AriaCSPINVOKE.ArRobot_logActions__SWIG_0(swigCPtr, logDeactivated);
  }

  public void logActions() {
    AriaCSPINVOKE.ArRobot_logActions__SWIG_1(swigCPtr);
  }

  public ArResolver getResolver() {
    global::System.IntPtr cPtr = AriaCSPINVOKE.ArRobot_getResolver(swigCPtr);
    ArResolver ret = (cPtr == global::System.IntPtr.Zero) ? null : new ArResolver(cPtr, false);
    return ret;
  }

  public void setResolver(ArResolver resolver) {
    AriaCSPINVOKE.ArRobot_setResolver(swigCPtr, ArResolver.getCPtr(resolver));
  }

  public ArActionDesired getLastActionResolverOutput() {
    global::System.IntPtr cPtr = AriaCSPINVOKE.ArRobot_getLastActionResolverOutput(swigCPtr);
    ArActionDesired ret = (cPtr == global::System.IntPtr.Zero) ? null : new ArActionDesired(cPtr, false);
    return ret;
  }

  public void setEncoderCorrectionCallback(ArRetFunctor1_Double_ArPoseWithTime functor) {
    AriaCSPINVOKE.ArRobot_setEncoderCorrectionCallback(swigCPtr, ArRetFunctor1_Double_ArPoseWithTime.getCPtr(functor));
  }

  public ArRetFunctor1_Double_ArPoseWithTime getEncoderCorrectionCallback() {
    global::System.IntPtr cPtr = AriaCSPINVOKE.ArRobot_getEncoderCorrectionCallback(swigCPtr);
    ArRetFunctor1_Double_ArPoseWithTime ret = (cPtr == global::System.IntPtr.Zero) ? null : new ArRetFunctor1_Double_ArPoseWithTime(cPtr, false);
    return ret;
  }

  public ArTime getConnectionOpenedTime() {
    ArTime ret = new ArTime(AriaCSPINVOKE.ArRobot_getConnectionOpenedTime(swigCPtr), true);
    return ret;
  }

  public void setCycleTime(uint ms) {
    AriaCSPINVOKE.ArRobot_setCycleTime(swigCPtr, ms);
  }

  public uint getCycleTime() {
    uint ret = AriaCSPINVOKE.ArRobot_getCycleTime(swigCPtr);
    return ret;
  }

  public void setCycleWarningTime(uint ms) {
    AriaCSPINVOKE.ArRobot_setCycleWarningTime(swigCPtr, ms);
  }

  public uint getCycleWarningTime() {
    uint ret = AriaCSPINVOKE.ArRobot_getCycleWarningTime__SWIG_0(swigCPtr);
    return ret;
  }

  public void setConnectionCycleMultiplier(uint multiplier) {
    AriaCSPINVOKE.ArRobot_setConnectionCycleMultiplier(swigCPtr, multiplier);
  }

  public uint getConnectionCycleMultiplier() {
    uint ret = AriaCSPINVOKE.ArRobot_getConnectionCycleMultiplier(swigCPtr);
    return ret;
  }

  public void setAsyncConnectSyncPacketRetries(int t) {
    AriaCSPINVOKE.ArRobot_setAsyncConnectSyncPacketRetries(swigCPtr, t);
  }

  public void setCycleChained(bool cycleChained) {
    AriaCSPINVOKE.ArRobot_setCycleChained(swigCPtr, cycleChained);
  }

  public bool isCycleChained() {
    bool ret = AriaCSPINVOKE.ArRobot_isCycleChained(swigCPtr);
    return ret;
  }

  public void setConnectionTimeoutTime(int mSecs) {
    AriaCSPINVOKE.ArRobot_setConnectionTimeoutTime(swigCPtr, mSecs);
  }

  public int getConnectionTimeoutTime() {
    int ret = AriaCSPINVOKE.ArRobot_getConnectionTimeoutTime(swigCPtr);
    return ret;
  }

  public ArTime getLastPacketTime() {
    ArTime ret = new ArTime(AriaCSPINVOKE.ArRobot_getLastPacketTime(swigCPtr), true);
    return ret;
  }

  public ArTime getLastOdometryTime() {
    ArTime ret = new ArTime(AriaCSPINVOKE.ArRobot_getLastOdometryTime(swigCPtr), true);
    return ret;
  }

  public void setPoseInterpNumReadings(uint numReadings) {
    AriaCSPINVOKE.ArRobot_setPoseInterpNumReadings(swigCPtr, numReadings);
  }

  public uint getPoseInterpNumReadings() {
    uint ret = AriaCSPINVOKE.ArRobot_getPoseInterpNumReadings(swigCPtr);
    return ret;
  }

  public int getPoseInterpPosition(ArTime timeStamp, ArPose position, ArPoseWithTime mostRecent) {
    int ret = AriaCSPINVOKE.ArRobot_getPoseInterpPosition__SWIG_0(swigCPtr, ArTime.getCPtr(timeStamp), ArPose.getCPtr(position), ArPoseWithTime.getCPtr(mostRecent));
    if (AriaCSPINVOKE.SWIGPendingException.Pending) throw AriaCSPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public int getPoseInterpPosition(ArTime timeStamp, ArPose position) {
    int ret = AriaCSPINVOKE.ArRobot_getPoseInterpPosition__SWIG_1(swigCPtr, ArTime.getCPtr(timeStamp), ArPose.getCPtr(position));
    if (AriaCSPINVOKE.SWIGPendingException.Pending) throw AriaCSPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public ArInterpolation getPoseInterpolation() {
    global::System.IntPtr cPtr = AriaCSPINVOKE.ArRobot_getPoseInterpolation(swigCPtr);
    ArInterpolation ret = (cPtr == global::System.IntPtr.Zero) ? null : new ArInterpolation(cPtr, false);
    return ret;
  }

  public SWIGTYPE_p_ArRetFunctor3T_int_ArTime_ArPose_p_ArPoseWithTime_p_t getPoseInterpPositionCallback() {
    global::System.IntPtr cPtr = AriaCSPINVOKE.ArRobot_getPoseInterpPositionCallback(swigCPtr);
    SWIGTYPE_p_ArRetFunctor3T_int_ArTime_ArPose_p_ArPoseWithTime_p_t ret = (cPtr == global::System.IntPtr.Zero) ? null : new SWIGTYPE_p_ArRetFunctor3T_int_ArTime_ArPose_p_ArPoseWithTime_p_t(cPtr, false);
    return ret;
  }

  public void setEncoderPoseInterpNumReadings(uint numReadings) {
    AriaCSPINVOKE.ArRobot_setEncoderPoseInterpNumReadings(swigCPtr, numReadings);
  }

  public uint getEncoderPoseInterpNumReadings() {
    uint ret = AriaCSPINVOKE.ArRobot_getEncoderPoseInterpNumReadings(swigCPtr);
    return ret;
  }

  public int getEncoderPoseInterpPosition(ArTime timeStamp, ArPose position, ArPoseWithTime mostRecent) {
    int ret = AriaCSPINVOKE.ArRobot_getEncoderPoseInterpPosition__SWIG_0(swigCPtr, ArTime.getCPtr(timeStamp), ArPose.getCPtr(position), ArPoseWithTime.getCPtr(mostRecent));
    if (AriaCSPINVOKE.SWIGPendingException.Pending) throw AriaCSPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public int getEncoderPoseInterpPosition(ArTime timeStamp, ArPose position) {
    int ret = AriaCSPINVOKE.ArRobot_getEncoderPoseInterpPosition__SWIG_1(swigCPtr, ArTime.getCPtr(timeStamp), ArPose.getCPtr(position));
    if (AriaCSPINVOKE.SWIGPendingException.Pending) throw AriaCSPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public ArInterpolation getEncoderPoseInterpolation() {
    global::System.IntPtr cPtr = AriaCSPINVOKE.ArRobot_getEncoderPoseInterpolation(swigCPtr);
    ArInterpolation ret = (cPtr == global::System.IntPtr.Zero) ? null : new ArInterpolation(cPtr, false);
    return ret;
  }

  public SWIGTYPE_p_ArRetFunctor3T_int_ArTime_ArPose_p_ArPoseWithTime_p_t getEncoderPoseInterpPositionCallback() {
    global::System.IntPtr cPtr = AriaCSPINVOKE.ArRobot_getEncoderPoseInterpPositionCallback(swigCPtr);
    SWIGTYPE_p_ArRetFunctor3T_int_ArTime_ArPose_p_ArPoseWithTime_p_t ret = (cPtr == global::System.IntPtr.Zero) ? null : new SWIGTYPE_p_ArRetFunctor3T_int_ArTime_ArPose_p_ArPoseWithTime_p_t(cPtr, false);
    return ret;
  }

  public int applyEncoderOffset(ArPoseWithTime from, ArTime to, ArPose result) {
    int ret = AriaCSPINVOKE.ArRobot_applyEncoderOffset(swigCPtr, ArPoseWithTime.getCPtr(from), ArTime.getCPtr(to), ArPose.getCPtr(result));
    if (AriaCSPINVOKE.SWIGPendingException.Pending) throw AriaCSPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public uint getCounter() {
    uint ret = AriaCSPINVOKE.ArRobot_getCounter(swigCPtr);
    return ret;
  }

  public ArRobotParams getRobotParams() {
    global::System.IntPtr cPtr = AriaCSPINVOKE.ArRobot_getRobotParams(swigCPtr);
    ArRobotParams ret = (cPtr == global::System.IntPtr.Zero) ? null : new ArRobotParams(cPtr, false);
    return ret;
  }

  public void setRequireConfigPacket(bool requireConfigPacket) {
    AriaCSPINVOKE.ArRobot_setRequireConfigPacket(swigCPtr, requireConfigPacket);
  }

  public ArRobotConfigPacketReader getOrigRobotConfig() {
    global::System.IntPtr cPtr = AriaCSPINVOKE.ArRobot_getOrigRobotConfig(swigCPtr);
    ArRobotConfigPacketReader ret = (cPtr == global::System.IntPtr.Zero) ? null : new ArRobotConfigPacketReader(cPtr, false);
    return ret;
  }

  public SWIGTYPE_p_ArRobotBatteryPacketReader getBatteryPacketReader() {
    global::System.IntPtr cPtr = AriaCSPINVOKE.ArRobot_getBatteryPacketReader(swigCPtr);
    SWIGTYPE_p_ArRobotBatteryPacketReader ret = (cPtr == global::System.IntPtr.Zero) ? null : new SWIGTYPE_p_ArRobotBatteryPacketReader(cPtr, false);
    return ret;
  }

  public void setTransVelMax(double vel) {
    AriaCSPINVOKE.ArRobot_setTransVelMax(swigCPtr, vel);
  }

  public void setTransNegVelMax(double negVel) {
    AriaCSPINVOKE.ArRobot_setTransNegVelMax(swigCPtr, negVel);
  }

  public void setTransAccel(double acc) {
    AriaCSPINVOKE.ArRobot_setTransAccel(swigCPtr, acc);
  }

  public void setTransDecel(double decel) {
    AriaCSPINVOKE.ArRobot_setTransDecel(swigCPtr, decel);
  }

  public void setRotVelMax(double vel) {
    AriaCSPINVOKE.ArRobot_setRotVelMax(swigCPtr, vel);
  }

  public void setRotAccel(double acc) {
    AriaCSPINVOKE.ArRobot_setRotAccel(swigCPtr, acc);
  }

  public void setRotDecel(double decel) {
    AriaCSPINVOKE.ArRobot_setRotDecel(swigCPtr, decel);
  }

  public void setLatVelMax(double vel) {
    AriaCSPINVOKE.ArRobot_setLatVelMax(swigCPtr, vel);
  }

  public void setLatAccel(double acc) {
    AriaCSPINVOKE.ArRobot_setLatAccel(swigCPtr, acc);
  }

  public void setLatDecel(double decel) {
    AriaCSPINVOKE.ArRobot_setLatDecel(swigCPtr, decel);
  }

  public bool hasSettableVelMaxes() {
    bool ret = AriaCSPINVOKE.ArRobot_hasSettableVelMaxes(swigCPtr);
    return ret;
  }

  public double getTransVelMax() {
    double ret = AriaCSPINVOKE.ArRobot_getTransVelMax(swigCPtr);
    return ret;
  }

  public double getTransNegVelMax() {
    double ret = AriaCSPINVOKE.ArRobot_getTransNegVelMax(swigCPtr);
    return ret;
  }

  public double getRotVelMax() {
    double ret = AriaCSPINVOKE.ArRobot_getRotVelMax(swigCPtr);
    return ret;
  }

  public bool hasSettableAccsDecs() {
    bool ret = AriaCSPINVOKE.ArRobot_hasSettableAccsDecs(swigCPtr);
    return ret;
  }

  public double getTransAccel() {
    double ret = AriaCSPINVOKE.ArRobot_getTransAccel(swigCPtr);
    return ret;
  }

  public double getTransDecel() {
    double ret = AriaCSPINVOKE.ArRobot_getTransDecel(swigCPtr);
    return ret;
  }

  public double getRotAccel() {
    double ret = AriaCSPINVOKE.ArRobot_getRotAccel(swigCPtr);
    return ret;
  }

  public double getRotDecel() {
    double ret = AriaCSPINVOKE.ArRobot_getRotDecel(swigCPtr);
    return ret;
  }

  public double getLatVelMax() {
    double ret = AriaCSPINVOKE.ArRobot_getLatVelMax(swigCPtr);
    return ret;
  }

  public double getLatAccel() {
    double ret = AriaCSPINVOKE.ArRobot_getLatAccel(swigCPtr);
    return ret;
  }

  public double getLatDecel() {
    double ret = AriaCSPINVOKE.ArRobot_getLatDecel(swigCPtr);
    return ret;
  }

  public bool loadParamFile(string file) {
    bool ret = AriaCSPINVOKE.ArRobot_loadParamFile(swigCPtr, file);
    return ret;
  }

  public void setRobotParams(ArRobotParams arg0) {
    AriaCSPINVOKE.ArRobot_setRobotParams(swigCPtr, ArRobotParams.getCPtr(arg0));
  }

  public void attachKeyHandler(ArKeyHandler keyHandler, bool exitOnEscape, bool useExitNotShutdown) {
    AriaCSPINVOKE.ArRobot_attachKeyHandler__SWIG_0(swigCPtr, ArKeyHandler.getCPtr(keyHandler), exitOnEscape, useExitNotShutdown);
  }

  public void attachKeyHandler(ArKeyHandler keyHandler, bool exitOnEscape) {
    AriaCSPINVOKE.ArRobot_attachKeyHandler__SWIG_1(swigCPtr, ArKeyHandler.getCPtr(keyHandler), exitOnEscape);
  }

  public void attachKeyHandler(ArKeyHandler keyHandler) {
    AriaCSPINVOKE.ArRobot_attachKeyHandler__SWIG_2(swigCPtr, ArKeyHandler.getCPtr(keyHandler));
  }

  public ArKeyHandler getKeyHandler() {
    global::System.IntPtr cPtr = AriaCSPINVOKE.ArRobot_getKeyHandler(swigCPtr);
    ArKeyHandler ret = (cPtr == global::System.IntPtr.Zero) ? null : new ArKeyHandler(cPtr, false);
    return ret;
  }

  public int lockObj() {
    int ret = AriaCSPINVOKE.ArRobot_lockObj(swigCPtr);
    return ret;
  }

  public int tryLock() {
    int ret = AriaCSPINVOKE.ArRobot_tryLock(swigCPtr);
    return ret;
  }

  public int unlockObj() {
    int ret = AriaCSPINVOKE.ArRobot_unlockObj(swigCPtr);
    return ret;
  }

  public void setMutexLogging(bool v) {
    AriaCSPINVOKE.ArRobot_setMutexLogging(swigCPtr, v);
  }

  public void setMutexLockWarningTime(double sec) {
    AriaCSPINVOKE.ArRobot_setMutexLockWarningTime(swigCPtr, sec);
  }

  public void setMutexUnlockWarningTime(double sec) {
    AriaCSPINVOKE.ArRobot_setMutexUnlockWarningTime(swigCPtr, sec);
  }

  public bool isStabilizing() {
    bool ret = AriaCSPINVOKE.ArRobot_isStabilizing(swigCPtr);
    return ret;
  }

  public void setStabilizingTime(int mSecs) {
    AriaCSPINVOKE.ArRobot_setStabilizingTime(swigCPtr, mSecs);
  }

  public int getStabilizingTime() {
    int ret = AriaCSPINVOKE.ArRobot_getStabilizingTime(swigCPtr);
    return ret;
  }

  public void addStabilizingCB(ArFunctor functor, ArListPos.Pos position) {
    AriaCSPINVOKE.ArRobot_addStabilizingCB__SWIG_0(swigCPtr, ArFunctor.getCPtr(functor), (int)position);
  }

  public void addStabilizingCB(ArFunctor functor) {
    AriaCSPINVOKE.ArRobot_addStabilizingCB__SWIG_1(swigCPtr, ArFunctor.getCPtr(functor));
  }

  public void remStabilizingCB(ArFunctor functor) {
    AriaCSPINVOKE.ArRobot_remStabilizingCB(swigCPtr, ArFunctor.getCPtr(functor));
  }

  public ArSyncTask getSyncTaskRoot() {
    global::System.IntPtr cPtr = AriaCSPINVOKE.ArRobot_getSyncTaskRoot(swigCPtr);
    ArSyncTask ret = (cPtr == global::System.IntPtr.Zero) ? null : new ArSyncTask(cPtr, false);
    return ret;
  }

  public void loopOnce() {
    AriaCSPINVOKE.ArRobot_loopOnce(swigCPtr);
  }

  public void setOdometryDelay(int msec) {
    AriaCSPINVOKE.ArRobot_setOdometryDelay(swigCPtr, msec);
  }

  public int getOdometryDelay() {
    int ret = AriaCSPINVOKE.ArRobot_getOdometryDelay(swigCPtr);
    return ret;
  }

  public bool getLogMovementSent() {
    bool ret = AriaCSPINVOKE.ArRobot_getLogMovementSent(swigCPtr);
    return ret;
  }

  public void setLogMovementSent(bool logMovementSent) {
    AriaCSPINVOKE.ArRobot_setLogMovementSent(swigCPtr, logMovementSent);
  }

  public bool getLogMovementReceived() {
    bool ret = AriaCSPINVOKE.ArRobot_getLogMovementReceived(swigCPtr);
    return ret;
  }

  public void setLogMovementReceived(bool logMovementReceived) {
    AriaCSPINVOKE.ArRobot_setLogMovementReceived(swigCPtr, logMovementReceived);
  }

  public bool getLogVelocitiesReceived() {
    bool ret = AriaCSPINVOKE.ArRobot_getLogVelocitiesReceived(swigCPtr);
    return ret;
  }

  public void setLogVelocitiesReceived(bool logVelocitiesReceived) {
    AriaCSPINVOKE.ArRobot_setLogVelocitiesReceived(swigCPtr, logVelocitiesReceived);
  }

  public bool getPacketsReceivedTracking() {
    bool ret = AriaCSPINVOKE.ArRobot_getPacketsReceivedTracking(swigCPtr);
    return ret;
  }

  public void setPacketsReceivedTracking(bool packetsReceivedTracking) {
    AriaCSPINVOKE.ArRobot_setPacketsReceivedTracking(swigCPtr, packetsReceivedTracking);
  }

  public bool getLogSIPContents() {
    bool ret = AriaCSPINVOKE.ArRobot_getLogSIPContents(swigCPtr);
    return ret;
  }

  public void setLogSIPContents(bool logSIP) {
    AriaCSPINVOKE.ArRobot_setLogSIPContents(swigCPtr, logSIP);
  }

  public bool getPacketsSentTracking() {
    bool ret = AriaCSPINVOKE.ArRobot_getPacketsSentTracking(swigCPtr);
    return ret;
  }

  public void setPacketsSentTracking(bool packetsSentTracking) {
    AriaCSPINVOKE.ArRobot_setPacketsSentTracking(swigCPtr, packetsSentTracking);
  }

  public bool getLogActions() {
    bool ret = AriaCSPINVOKE.ArRobot_getLogActions(swigCPtr);
    return ret;
  }

  public void setLogActions(bool logActions) {
    AriaCSPINVOKE.ArRobot_setLogActions(swigCPtr, logActions);
  }

  public void setDoNotSwitchBaud(bool doNotSwitchBaud) {
    AriaCSPINVOKE.ArRobot_setDoNotSwitchBaud(swigCPtr, doNotSwitchBaud);
  }

  public bool getDoNotSwitchBaud() {
    bool ret = AriaCSPINVOKE.ArRobot_getDoNotSwitchBaud(swigCPtr);
    return ret;
  }

  public void incCounter() {
    AriaCSPINVOKE.ArRobot_incCounter(swigCPtr);
  }

  public void packetHandler() {
    AriaCSPINVOKE.ArRobot_packetHandler(swigCPtr);
  }

  public void actionHandler() {
    AriaCSPINVOKE.ArRobot_actionHandler(swigCPtr);
  }

  public void stateReflector() {
    AriaCSPINVOKE.ArRobot_stateReflector(swigCPtr);
  }

  public void robotLocker() {
    AriaCSPINVOKE.ArRobot_robotLocker(swigCPtr);
  }

  public void robotUnlocker() {
    AriaCSPINVOKE.ArRobot_robotUnlocker(swigCPtr);
  }

  public void packetHandlerNonThreaded() {
    AriaCSPINVOKE.ArRobot_packetHandlerNonThreaded(swigCPtr);
  }

  public void packetHandlerThreadedProcessor() {
    AriaCSPINVOKE.ArRobot_packetHandlerThreadedProcessor(swigCPtr);
  }

  public void packetHandlerThreadedReader() {
    AriaCSPINVOKE.ArRobot_packetHandlerThreadedReader(swigCPtr);
  }

  public void keyHandlerExit() {
    AriaCSPINVOKE.ArRobot_keyHandlerExit(swigCPtr);
  }

  public bool processMotorPacket(ArRobotPacket packet) {
    bool ret = AriaCSPINVOKE.ArRobot_processMotorPacket(swigCPtr, ArRobotPacket.getCPtr(packet));
    return ret;
  }

  public void processNewSonar(char number, int range, ArTime timeReceived) {
    AriaCSPINVOKE.ArRobot_processNewSonar(swigCPtr, number, range, ArTime.getCPtr(timeReceived));
    if (AriaCSPINVOKE.SWIGPendingException.Pending) throw AriaCSPINVOKE.SWIGPendingException.Retrieve();
  }

  public bool processEncoderPacket(ArRobotPacket packet) {
    bool ret = AriaCSPINVOKE.ArRobot_processEncoderPacket(swigCPtr, ArRobotPacket.getCPtr(packet));
    return ret;
  }

  public bool processIOPacket(ArRobotPacket packet) {
    bool ret = AriaCSPINVOKE.ArRobot_processIOPacket(swigCPtr, ArRobotPacket.getCPtr(packet));
    return ret;
  }

  public void init() {
    AriaCSPINVOKE.ArRobot_init(swigCPtr);
  }

  public void setUpSyncList() {
    AriaCSPINVOKE.ArRobot_setUpSyncList(swigCPtr);
  }

  public void setUpPacketHandlers() {
    AriaCSPINVOKE.ArRobot_setUpPacketHandlers(swigCPtr);
  }

  public SWIGTYPE_p_ArRetFunctor1CT_bool_ArRobot_ArRobotPacket_p_t myMotorPacketCB {
    set {
      AriaCSPINVOKE.ArRobot_myMotorPacketCB_set(swigCPtr, SWIGTYPE_p_ArRetFunctor1CT_bool_ArRobot_ArRobotPacket_p_t.getCPtr(value));
    } 
    get {
      global::System.IntPtr cPtr = AriaCSPINVOKE.ArRobot_myMotorPacketCB_get(swigCPtr);
      SWIGTYPE_p_ArRetFunctor1CT_bool_ArRobot_ArRobotPacket_p_t ret = (cPtr == global::System.IntPtr.Zero) ? null : new SWIGTYPE_p_ArRetFunctor1CT_bool_ArRobot_ArRobotPacket_p_t(cPtr, false);
      return ret;
    } 
  }

  public SWIGTYPE_p_ArRetFunctor1CT_bool_ArRobot_ArRobotPacket_p_t myEncoderPacketCB {
    set {
      AriaCSPINVOKE.ArRobot_myEncoderPacketCB_set(swigCPtr, SWIGTYPE_p_ArRetFunctor1CT_bool_ArRobot_ArRobotPacket_p_t.getCPtr(value));
    } 
    get {
      global::System.IntPtr cPtr = AriaCSPINVOKE.ArRobot_myEncoderPacketCB_get(swigCPtr);
      SWIGTYPE_p_ArRetFunctor1CT_bool_ArRobot_ArRobotPacket_p_t ret = (cPtr == global::System.IntPtr.Zero) ? null : new SWIGTYPE_p_ArRetFunctor1CT_bool_ArRobot_ArRobotPacket_p_t(cPtr, false);
      return ret;
    } 
  }

  public SWIGTYPE_p_ArRetFunctor1CT_bool_ArRobot_ArRobotPacket_p_t myIOPacketCB {
    set {
      AriaCSPINVOKE.ArRobot_myIOPacketCB_set(swigCPtr, SWIGTYPE_p_ArRetFunctor1CT_bool_ArRobot_ArRobotPacket_p_t.getCPtr(value));
    } 
    get {
      global::System.IntPtr cPtr = AriaCSPINVOKE.ArRobot_myIOPacketCB_get(swigCPtr);
      SWIGTYPE_p_ArRetFunctor1CT_bool_ArRobot_ArRobotPacket_p_t ret = (cPtr == global::System.IntPtr.Zero) ? null : new SWIGTYPE_p_ArRetFunctor1CT_bool_ArRobot_ArRobotPacket_p_t(cPtr, false);
      return ret;
    } 
  }

  public SWIGTYPE_p_ArFunctorCT_ArRobot_t myPacketHandlerCB {
    set {
      AriaCSPINVOKE.ArRobot_myPacketHandlerCB_set(swigCPtr, SWIGTYPE_p_ArFunctorCT_ArRobot_t.getCPtr(value));
    } 
    get {
      global::System.IntPtr cPtr = AriaCSPINVOKE.ArRobot_myPacketHandlerCB_get(swigCPtr);
      SWIGTYPE_p_ArFunctorCT_ArRobot_t ret = (cPtr == global::System.IntPtr.Zero) ? null : new SWIGTYPE_p_ArFunctorCT_ArRobot_t(cPtr, false);
      return ret;
    } 
  }

  public SWIGTYPE_p_ArFunctorCT_ArRobot_t myActionHandlerCB {
    set {
      AriaCSPINVOKE.ArRobot_myActionHandlerCB_set(swigCPtr, SWIGTYPE_p_ArFunctorCT_ArRobot_t.getCPtr(value));
    } 
    get {
      global::System.IntPtr cPtr = AriaCSPINVOKE.ArRobot_myActionHandlerCB_get(swigCPtr);
      SWIGTYPE_p_ArFunctorCT_ArRobot_t ret = (cPtr == global::System.IntPtr.Zero) ? null : new SWIGTYPE_p_ArFunctorCT_ArRobot_t(cPtr, false);
      return ret;
    } 
  }

  public SWIGTYPE_p_ArFunctorCT_ArRobot_t myStateReflectorCB {
    set {
      AriaCSPINVOKE.ArRobot_myStateReflectorCB_set(swigCPtr, SWIGTYPE_p_ArFunctorCT_ArRobot_t.getCPtr(value));
    } 
    get {
      global::System.IntPtr cPtr = AriaCSPINVOKE.ArRobot_myStateReflectorCB_get(swigCPtr);
      SWIGTYPE_p_ArFunctorCT_ArRobot_t ret = (cPtr == global::System.IntPtr.Zero) ? null : new SWIGTYPE_p_ArFunctorCT_ArRobot_t(cPtr, false);
      return ret;
    } 
  }

  public SWIGTYPE_p_ArFunctorCT_ArRobot_t myRobotLockerCB {
    set {
      AriaCSPINVOKE.ArRobot_myRobotLockerCB_set(swigCPtr, SWIGTYPE_p_ArFunctorCT_ArRobot_t.getCPtr(value));
    } 
    get {
      global::System.IntPtr cPtr = AriaCSPINVOKE.ArRobot_myRobotLockerCB_get(swigCPtr);
      SWIGTYPE_p_ArFunctorCT_ArRobot_t ret = (cPtr == global::System.IntPtr.Zero) ? null : new SWIGTYPE_p_ArFunctorCT_ArRobot_t(cPtr, false);
      return ret;
    } 
  }

  public SWIGTYPE_p_ArFunctorCT_ArRobot_t myRobotUnlockerCB {
    set {
      AriaCSPINVOKE.ArRobot_myRobotUnlockerCB_set(swigCPtr, SWIGTYPE_p_ArFunctorCT_ArRobot_t.getCPtr(value));
    } 
    get {
      global::System.IntPtr cPtr = AriaCSPINVOKE.ArRobot_myRobotUnlockerCB_get(swigCPtr);
      SWIGTYPE_p_ArFunctorCT_ArRobot_t ret = (cPtr == global::System.IntPtr.Zero) ? null : new SWIGTYPE_p_ArFunctorCT_ArRobot_t(cPtr, false);
      return ret;
    } 
  }

  public SWIGTYPE_p_ArFunctorCT_ArRobot_t myKeyHandlerExitCB {
    set {
      AriaCSPINVOKE.ArRobot_myKeyHandlerExitCB_set(swigCPtr, SWIGTYPE_p_ArFunctorCT_ArRobot_t.getCPtr(value));
    } 
    get {
      global::System.IntPtr cPtr = AriaCSPINVOKE.ArRobot_myKeyHandlerExitCB_get(swigCPtr);
      SWIGTYPE_p_ArFunctorCT_ArRobot_t ret = (cPtr == global::System.IntPtr.Zero) ? null : new SWIGTYPE_p_ArFunctorCT_ArRobot_t(cPtr, false);
      return ret;
    } 
  }

  public SWIGTYPE_p_ArFunctorCT_ArKeyHandler_t myKeyHandlerCB {
    set {
      AriaCSPINVOKE.ArRobot_myKeyHandlerCB_set(swigCPtr, SWIGTYPE_p_ArFunctorCT_ArKeyHandler_t.getCPtr(value));
    } 
    get {
      global::System.IntPtr cPtr = AriaCSPINVOKE.ArRobot_myKeyHandlerCB_get(swigCPtr);
      SWIGTYPE_p_ArFunctorCT_ArKeyHandler_t ret = (cPtr == global::System.IntPtr.Zero) ? null : new SWIGTYPE_p_ArFunctorCT_ArKeyHandler_t(cPtr, false);
      return ret;
    } 
  }

  public SWIGTYPE_p_std__listT_ArFunctor_p_t getRunExitListCopy() {
    global::System.IntPtr cPtr = AriaCSPINVOKE.ArRobot_getRunExitListCopy(swigCPtr);
    SWIGTYPE_p_std__listT_ArFunctor_p_t ret = (cPtr == global::System.IntPtr.Zero) ? null : new SWIGTYPE_p_std__listT_ArFunctor_p_t(cPtr, false);
    return ret;
  }

  public ArPose getRawEncoderPose() {
    ArPose ret = new ArPose(AriaCSPINVOKE.ArRobot_getRawEncoderPose(swigCPtr), true);
    return ret;
  }

  public bool getNoTimeWarningThisCycle() {
    bool ret = AriaCSPINVOKE.ArRobot_getNoTimeWarningThisCycle(swigCPtr);
    return ret;
  }

  public void setNoTimeWarningThisCycle(bool noTimeWarningThisCycle) {
    AriaCSPINVOKE.ArRobot_setNoTimeWarningThisCycle(swigCPtr, noTimeWarningThisCycle);
  }

  public ArRobotPacketSender getPacketSender() {
    global::System.IntPtr cPtr = AriaCSPINVOKE.ArRobot_getPacketSender(swigCPtr);
    ArRobotPacketSender ret = (cPtr == global::System.IntPtr.Zero) ? null : new ArRobotPacketSender(cPtr, false);
    return ret;
  }

  public ArRobotPacketReceiver getPacketReceiver() {
    global::System.IntPtr cPtr = AriaCSPINVOKE.ArRobot_getPacketReceiver(swigCPtr);
    ArRobotPacketReceiver ret = (cPtr == global::System.IntPtr.Zero) ? null : new ArRobotPacketReceiver(cPtr, false);
    return ret;
  }

  public ArSyncTask addUserTask(ArFunctor functor, string name) {
    global::System.IntPtr cPtr = AriaCSPINVOKE.ArRobot_addUserTask__SWIG_2(swigCPtr, ArFunctor.getCPtr(functor), name);
    ArSyncTask ret = (cPtr == global::System.IntPtr.Zero) ? null : new ArSyncTask(cPtr, false);
    return ret;
  }

  public ArSyncTask addUserTask(ArFunctor functor) {
    global::System.IntPtr cPtr = AriaCSPINVOKE.ArRobot_addUserTask__SWIG_3(swigCPtr, ArFunctor.getCPtr(functor));
    ArSyncTask ret = (cPtr == global::System.IntPtr.Zero) ? null : new ArSyncTask(cPtr, false);
    return ret;
  }

  public ArSyncTask addSensorInterpTask(ArFunctor functor, string name) {
    global::System.IntPtr cPtr = AriaCSPINVOKE.ArRobot_addSensorInterpTask__SWIG_2(swigCPtr, ArFunctor.getCPtr(functor), name);
    ArSyncTask ret = (cPtr == global::System.IntPtr.Zero) ? null : new ArSyncTask(cPtr, false);
    return ret;
  }

  public ArSyncTask addSensorInterpTask(ArFunctor functor) {
    global::System.IntPtr cPtr = AriaCSPINVOKE.ArRobot_addSensorInterpTask__SWIG_3(swigCPtr, ArFunctor.getCPtr(functor));
    ArSyncTask ret = (cPtr == global::System.IntPtr.Zero) ? null : new ArSyncTask(cPtr, false);
    return ret;
  }

  public void removeTask(string name) {
    AriaCSPINVOKE.ArRobot_removeTask__SWIG_0(swigCPtr, name);
  }

  public bool replaceSensorInterpTask(ArFunctor newFunctor, string name) {
    bool ret = AriaCSPINVOKE.ArRobot_replaceSensorInterpTask(swigCPtr, ArFunctor.getCPtr(newFunctor), name);
    return ret;
  }

  public bool replaceUserTask(ArFunctor newFunctor, string name) {
    bool ret = AriaCSPINVOKE.ArRobot_replaceUserTask(swigCPtr, ArFunctor.getCPtr(newFunctor), name);
    return ret;
  }

  public void removeTask(ArFunctor f) {
    AriaCSPINVOKE.ArRobot_removeTask__SWIG_1(swigCPtr, ArFunctor.getCPtr(f));
  }

  public enum WaitState {
    WAIT_CONNECTED,
    WAIT_FAILED_CONN,
    WAIT_RUN_EXIT,
    WAIT_TIMEDOUT,
    WAIT_INTR,
    WAIT_FAIL
  }

  public enum ChargeState {
    CHARGING_UNKNOWN = -1,
    CHARGING_NOT = 0,
    CHARGING_BULK = 1,
    CHARGING_OVERCHARGE = 2,
    CHARGING_FLOAT = 3,
    CHARGING_BALANCE = 4
  }

}

}
