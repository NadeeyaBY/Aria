//------------------------------------------------------------------------------
// <auto-generated />
//
// This file was automatically generated by SWIG (http://www.swig.org).
// Version 3.0.8
//
// Do not make changes to this file unless you know what you are doing--modify
// the SWIG interface file instead.
//------------------------------------------------------------------------------

namespace AriaCS {

public class ArPoseUtil : global::System.IDisposable {
  private global::System.Runtime.InteropServices.HandleRef swigCPtr;
  protected bool swigCMemOwn;

  public ArPoseUtil(global::System.IntPtr cPtr, bool cMemoryOwn) {
    swigCMemOwn = cMemoryOwn;
    swigCPtr = new global::System.Runtime.InteropServices.HandleRef(this, cPtr);
  }

  public static global::System.Runtime.InteropServices.HandleRef getCPtr(ArPoseUtil obj) {
    return (obj == null) ? new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero) : obj.swigCPtr;
  }

  ~ArPoseUtil() {
    Dispose();
  }

  public virtual void Dispose() {
    lock(this) {
      if (swigCPtr.Handle != global::System.IntPtr.Zero) {
        if (swigCMemOwn) {
          swigCMemOwn = false;
          AriaCSPINVOKE.delete_ArPoseUtil(swigCPtr);
        }
        swigCPtr = new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero);
      }
      global::System.GC.SuppressFinalize(this);
    }
  }

  public static SWIGTYPE_p_std__listT_ArPose_t findCornersFromRobotBounds(double radius, double widthLeft, double widthRight, double lengthFront, double lengthRear, bool fastButUnsafe) {
    SWIGTYPE_p_std__listT_ArPose_t ret = new SWIGTYPE_p_std__listT_ArPose_t(AriaCSPINVOKE.ArPoseUtil_findCornersFromRobotBounds(radius, widthLeft, widthRight, lengthFront, lengthRear, fastButUnsafe), true);
    return ret;
  }

  public static SWIGTYPE_p_std__listT_ArPose_t breakUpDistanceEvenly(ArPose start, ArPose end, int resolution) {
    SWIGTYPE_p_std__listT_ArPose_t ret = new SWIGTYPE_p_std__listT_ArPose_t(AriaCSPINVOKE.ArPoseUtil_breakUpDistanceEvenly(ArPose.getCPtr(start), ArPose.getCPtr(end), resolution), true);
    if (AriaCSPINVOKE.SWIGPendingException.Pending) throw AriaCSPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public ArPoseUtil() : this(AriaCSPINVOKE.new_ArPoseUtil(), true) {
  }

}

}
