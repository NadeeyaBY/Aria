//------------------------------------------------------------------------------
// <auto-generated />
//
// This file was automatically generated by SWIG (http://www.swig.org).
// Version 3.0.8
//
// Do not make changes to this file unless you know what you are doing--modify
// the SWIG interface file instead.
//------------------------------------------------------------------------------

namespace AriaCS {

public class ArSocket : global::System.IDisposable {
  private global::System.Runtime.InteropServices.HandleRef swigCPtr;
  protected bool swigCMemOwn;

  public ArSocket(global::System.IntPtr cPtr, bool cMemoryOwn) {
    swigCMemOwn = cMemoryOwn;
    swigCPtr = new global::System.Runtime.InteropServices.HandleRef(this, cPtr);
  }

  public static global::System.Runtime.InteropServices.HandleRef getCPtr(ArSocket obj) {
    return (obj == null) ? new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero) : obj.swigCPtr;
  }

  ~ArSocket() {
    Dispose();
  }

  public virtual void Dispose() {
    lock(this) {
      if (swigCPtr.Handle != global::System.IntPtr.Zero) {
        if (swigCMemOwn) {
          swigCMemOwn = false;
          AriaCSPINVOKE.delete_ArSocket(swigCPtr);
        }
        swigCPtr = new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero);
      }
      global::System.GC.SuppressFinalize(this);
    }
  }

  public ArSocket() : this(AriaCSPINVOKE.new_ArSocket__SWIG_0(), true) {
  }

  public ArSocket(string host, int port, ArSocket.Type type) : this(AriaCSPINVOKE.new_ArSocket__SWIG_1(host, port, (int)type), true) {
  }

  public ArSocket(int port, bool doClose, ArSocket.Type type) : this(AriaCSPINVOKE.new_ArSocket__SWIG_2(port, doClose, (int)type), true) {
  }

  public static bool init() {
    bool ret = AriaCSPINVOKE.ArSocket_init();
    return ret;
  }

  public static void shutdown() {
    AriaCSPINVOKE.ArSocket_shutdown();
  }

  public static string toString(ArSocket.Type t) {
    string ret = AriaCSPINVOKE.ArSocket_toString((int)t);
    return ret;
  }

  public static bool ourInitialized {
    set {
      AriaCSPINVOKE.ArSocket_ourInitialized_set(value);
    } 
    get {
      bool ret = AriaCSPINVOKE.ArSocket_ourInitialized_get();
      return ret;
    } 
  }

  public bool copy(int fd, bool doclose) {
    bool ret = AriaCSPINVOKE.ArSocket_copy__SWIG_0(swigCPtr, fd, doclose);
    return ret;
  }

  public void copy(ArSocket s) {
    AriaCSPINVOKE.ArSocket_copy__SWIG_1(swigCPtr, ArSocket.getCPtr(s));
  }

  public void transfer(ArSocket s) {
    AriaCSPINVOKE.ArSocket_transfer(swigCPtr, ArSocket.getCPtr(s));
  }

  public bool connect(string host, int port, ArSocket.Type type, string openOnIP) {
    bool ret = AriaCSPINVOKE.ArSocket_connect__SWIG_0(swigCPtr, host, port, (int)type, openOnIP);
    return ret;
  }

  public bool connect(string host, int port, ArSocket.Type type) {
    bool ret = AriaCSPINVOKE.ArSocket_connect__SWIG_1(swigCPtr, host, port, (int)type);
    return ret;
  }

  public bool connect(string host, int port) {
    bool ret = AriaCSPINVOKE.ArSocket_connect__SWIG_2(swigCPtr, host, port);
    return ret;
  }

  public bool open(int port, ArSocket.Type type, string openOnIP) {
    bool ret = AriaCSPINVOKE.ArSocket_open__SWIG_0(swigCPtr, port, (int)type, openOnIP);
    return ret;
  }

  public bool open(int port, ArSocket.Type type) {
    bool ret = AriaCSPINVOKE.ArSocket_open__SWIG_1(swigCPtr, port, (int)type);
    return ret;
  }

  public bool create(ArSocket.Type type) {
    bool ret = AriaCSPINVOKE.ArSocket_create(swigCPtr, (int)type);
    return ret;
  }

  public bool findValidPort(int startPort, string openOnIP) {
    bool ret = AriaCSPINVOKE.ArSocket_findValidPort__SWIG_0(swigCPtr, startPort, openOnIP);
    return ret;
  }

  public bool findValidPort(int startPort) {
    bool ret = AriaCSPINVOKE.ArSocket_findValidPort__SWIG_1(swigCPtr, startPort);
    return ret;
  }

  public bool connectTo(string host, int port) {
    bool ret = AriaCSPINVOKE.ArSocket_connectTo__SWIG_0(swigCPtr, host, port);
    return ret;
  }

  public bool connectTo(SWIGTYPE_p_sockaddr_in sin) {
    bool ret = AriaCSPINVOKE.ArSocket_connectTo__SWIG_1(swigCPtr, SWIGTYPE_p_sockaddr_in.getCPtr(sin));
    return ret;
  }

  public bool accept(ArSocket sock) {
    bool ret = AriaCSPINVOKE.ArSocket_accept(swigCPtr, ArSocket.getCPtr(sock));
    return ret;
  }

  public bool close() {
    bool ret = AriaCSPINVOKE.ArSocket_close(swigCPtr);
    return ret;
  }

  public int write(SWIGTYPE_p_void buff, uint len) {
    int ret = AriaCSPINVOKE.ArSocket_write__SWIG_0(swigCPtr, SWIGTYPE_p_void.getCPtr(buff), len);
    return ret;
  }

  public int read(SWIGTYPE_p_void buff, uint len, uint msWait) {
    int ret = AriaCSPINVOKE.ArSocket_read__SWIG_0(swigCPtr, SWIGTYPE_p_void.getCPtr(buff), len, msWait);
    return ret;
  }

  public int read(SWIGTYPE_p_void buff, uint len) {
    int ret = AriaCSPINVOKE.ArSocket_read__SWIG_1(swigCPtr, SWIGTYPE_p_void.getCPtr(buff), len);
    return ret;
  }

  public int sendTo(SWIGTYPE_p_void msg, int len) {
    int ret = AriaCSPINVOKE.ArSocket_sendTo__SWIG_0(swigCPtr, SWIGTYPE_p_void.getCPtr(msg), len);
    return ret;
  }

  public int sendTo(SWIGTYPE_p_void msg, int len, SWIGTYPE_p_sockaddr_in sin) {
    int ret = AriaCSPINVOKE.ArSocket_sendTo__SWIG_1(swigCPtr, SWIGTYPE_p_void.getCPtr(msg), len, SWIGTYPE_p_sockaddr_in.getCPtr(sin));
    return ret;
  }

  public int recvFrom(SWIGTYPE_p_void msg, int len, SWIGTYPE_p_sockaddr_in sin) {
    int ret = AriaCSPINVOKE.ArSocket_recvFrom(swigCPtr, SWIGTYPE_p_void.getCPtr(msg), len, SWIGTYPE_p_sockaddr_in.getCPtr(sin));
    return ret;
  }

  public static bool hostAddr(string host, SWIGTYPE_p_in_addr addr) {
    bool ret = AriaCSPINVOKE.ArSocket_hostAddr(host, SWIGTYPE_p_in_addr.getCPtr(addr));
    if (AriaCSPINVOKE.SWIGPendingException.Pending) throw AriaCSPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static bool addrHost(SWIGTYPE_p_in_addr addr, string host) {
    bool ret = AriaCSPINVOKE.ArSocket_addrHost(SWIGTYPE_p_in_addr.getCPtr(addr), host);
    if (AriaCSPINVOKE.SWIGPendingException.Pending) throw AriaCSPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static string getHostName() {
    string ret = AriaCSPINVOKE.ArSocket_getHostName();
    return ret;
  }

  public bool getSockName() {
    bool ret = AriaCSPINVOKE.ArSocket_getSockName(swigCPtr);
    return ret;
  }

  public SWIGTYPE_p_sockaddr_in sockAddrIn() {
    global::System.IntPtr cPtr = AriaCSPINVOKE.ArSocket_sockAddrIn(swigCPtr);
    SWIGTYPE_p_sockaddr_in ret = (cPtr == global::System.IntPtr.Zero) ? null : new SWIGTYPE_p_sockaddr_in(cPtr, false);
    return ret;
  }

  public SWIGTYPE_p_in_addr inAddr() {
    global::System.IntPtr cPtr = AriaCSPINVOKE.ArSocket_inAddr(swigCPtr);
    SWIGTYPE_p_in_addr ret = (cPtr == global::System.IntPtr.Zero) ? null : new SWIGTYPE_p_in_addr(cPtr, false);
    return ret;
  }

  public ushort inPort() {
    ushort ret = AriaCSPINVOKE.ArSocket_inPort(swigCPtr);
    return ret;
  }

  public static void inToA(SWIGTYPE_p_in_addr addr, string buff) {
    AriaCSPINVOKE.ArSocket_inToA(SWIGTYPE_p_in_addr.getCPtr(addr), buff);
  }

  public static uint sockAddrLen() {
    uint ret = AriaCSPINVOKE.ArSocket_sockAddrLen();
    return ret;
  }

  public static uint maxHostNameLen() {
    uint ret = AriaCSPINVOKE.ArSocket_maxHostNameLen();
    return ret;
  }

  public static uint hostToNetOrder(int i) {
    uint ret = AriaCSPINVOKE.ArSocket_hostToNetOrder(i);
    return ret;
  }

  public static uint netToHostOrder(int i) {
    uint ret = AriaCSPINVOKE.ArSocket_netToHostOrder(i);
    return ret;
  }

  public bool setLinger(int time) {
    bool ret = AriaCSPINVOKE.ArSocket_setLinger(swigCPtr, time);
    return ret;
  }

  public bool setBroadcast() {
    bool ret = AriaCSPINVOKE.ArSocket_setBroadcast(swigCPtr);
    return ret;
  }

  public bool setReuseAddress() {
    bool ret = AriaCSPINVOKE.ArSocket_setReuseAddress(swigCPtr);
    return ret;
  }

  public bool setNonBlock() {
    bool ret = AriaCSPINVOKE.ArSocket_setNonBlock(swigCPtr);
    return ret;
  }

  public void setDoClose(bool yesno) {
    AriaCSPINVOKE.ArSocket_setDoClose(swigCPtr, yesno);
  }

  public void setFakeWrites(bool fakeWrites) {
    AriaCSPINVOKE.ArSocket_setFakeWrites(swigCPtr, fakeWrites);
  }

  public int getFD() {
    int ret = AriaCSPINVOKE.ArSocket_getFD(swigCPtr);
    return ret;
  }

  public ArSocket.Type getType() {
    ArSocket.Type ret = (ArSocket.Type)AriaCSPINVOKE.ArSocket_getType(swigCPtr);
    return ret;
  }

  public string getErrorStr() {
    string ret = AriaCSPINVOKE.ArSocket_getErrorStr(swigCPtr);
    return ret;
  }

  public ArSocket.Error getError() {
    ArSocket.Error ret = (ArSocket.Error)AriaCSPINVOKE.ArSocket_getError(swigCPtr);
    return ret;
  }

  public void setErrorTracking(bool errorTracking) {
    AriaCSPINVOKE.ArSocket_setErrorTracking(swigCPtr, errorTracking);
  }

  public bool getErrorTracking() {
    bool ret = AriaCSPINVOKE.ArSocket_getErrorTracking(swigCPtr);
    return ret;
  }

  public bool getBadWrite() {
    bool ret = AriaCSPINVOKE.ArSocket_getBadWrite(swigCPtr);
    return ret;
  }

  public bool getBadRead() {
    bool ret = AriaCSPINVOKE.ArSocket_getBadRead(swigCPtr);
    return ret;
  }

  public int writeStringPlain(string str) {
    int ret = AriaCSPINVOKE.ArSocket_writeStringPlain(swigCPtr, str);
    return ret;
  }

  public string readString(uint msWait) {
    string ret = AriaCSPINVOKE.ArSocket_readString__SWIG_0(swigCPtr, msWait);
    return ret;
  }

  public string readString() {
    string ret = AriaCSPINVOKE.ArSocket_readString__SWIG_1(swigCPtr);
    return ret;
  }

  public void setReadStringIgnoreReturn(bool ignore) {
    AriaCSPINVOKE.ArSocket_setReadStringIgnoreReturn(swigCPtr, ignore);
  }

  public void clearPartialReadString() {
    AriaCSPINVOKE.ArSocket_clearPartialReadString(swigCPtr);
  }

  public int comparePartialReadString(string partialString) {
    int ret = AriaCSPINVOKE.ArSocket_comparePartialReadString(swigCPtr, partialString);
    return ret;
  }

  public ArTime getLastStringReadTime() {
    ArTime ret = new ArTime(AriaCSPINVOKE.ArSocket_getLastStringReadTime(swigCPtr), true);
    return ret;
  }

  public void setEcho(bool echo) {
    AriaCSPINVOKE.ArSocket_setEcho(swigCPtr, echo);
  }

  public bool getEcho() {
    bool ret = AriaCSPINVOKE.ArSocket_getEcho(swigCPtr);
    return ret;
  }

  public void setLogWriteStrings(bool logWriteStrings) {
    AriaCSPINVOKE.ArSocket_setLogWriteStrings(swigCPtr, logWriteStrings);
  }

  public bool getLogWriteStrings() {
    bool ret = AriaCSPINVOKE.ArSocket_getLogWriteStrings(swigCPtr);
    return ret;
  }

  public void setStringUseWrongEndChars(bool useWrongEndChars) {
    AriaCSPINVOKE.ArSocket_setStringUseWrongEndChars(swigCPtr, useWrongEndChars);
  }

  public bool getStringUseWrongEndChars() {
    bool ret = AriaCSPINVOKE.ArSocket_getStringUseWrongEndChars(swigCPtr);
    return ret;
  }

  public string getRawIPString() {
    string ret = AriaCSPINVOKE.ArSocket_getRawIPString(swigCPtr);
    return ret;
  }

  public string getIPString() {
    string ret = AriaCSPINVOKE.ArSocket_getIPString(swigCPtr);
    return ret;
  }

  public void setIPString(string ipString) {
    AriaCSPINVOKE.ArSocket_setIPString(swigCPtr, ipString);
  }

  public void setCloseCallback(ArFunctor functor) {
    AriaCSPINVOKE.ArSocket_setCloseCallback(swigCPtr, ArFunctor.getCPtr(functor));
  }

  public ArFunctor getCloseCallback() {
    global::System.IntPtr cPtr = AriaCSPINVOKE.ArSocket_getCloseCallback(swigCPtr);
    ArFunctor ret = (cPtr == global::System.IntPtr.Zero) ? null : new ArFunctor(cPtr, false);
    return ret;
  }

  public int getSends() {
    int ret = AriaCSPINVOKE.ArSocket_getSends(swigCPtr);
    return ret;
  }

  public int getBytesSent() {
    int ret = AriaCSPINVOKE.ArSocket_getBytesSent(swigCPtr);
    return ret;
  }

  public int getRecvs() {
    int ret = AriaCSPINVOKE.ArSocket_getRecvs(swigCPtr);
    return ret;
  }

  public int getBytesRecvd() {
    int ret = AriaCSPINVOKE.ArSocket_getBytesRecvd(swigCPtr);
    return ret;
  }

  public void resetTracking() {
    AriaCSPINVOKE.ArSocket_resetTracking(swigCPtr);
  }

  public bool setNoDelay(bool flag) {
    bool ret = AriaCSPINVOKE.ArSocket_setNoDelay(swigCPtr, flag);
    return ret;
  }

  public bool isOpen() {
    bool ret = AriaCSPINVOKE.ArSocket_isOpen(swigCPtr);
    return ret;
  }

  public string read(uint len, uint msWait) {
    string ret = AriaCSPINVOKE.ArSocket_read__SWIG_2(swigCPtr, len, msWait);
    return ret;
  }

  public bool write(string s) {
    bool ret = AriaCSPINVOKE.ArSocket_write__SWIG_1(swigCPtr, s);
    if (AriaCSPINVOKE.SWIGPendingException.Pending) throw AriaCSPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public enum Type {
    UDP,
    TCP,
    Unknown
  }

  public enum Error {
    NoErr,
    NetFail,
    ConBadHost,
    ConNoRoute,
    ConRefused,
    NameLookup
  }

}

}
