//------------------------------------------------------------------------------
// <auto-generated />
//
// This file was automatically generated by SWIG (http://www.swig.org).
// Version 3.0.8
//
// Do not make changes to this file unless you know what you are doing--modify
// the SWIG interface file instead.
//------------------------------------------------------------------------------

namespace AriaCS {

public class ArNMEAParser : global::System.IDisposable {
  private global::System.Runtime.InteropServices.HandleRef swigCPtr;
  protected bool swigCMemOwn;

  public ArNMEAParser(global::System.IntPtr cPtr, bool cMemoryOwn) {
    swigCMemOwn = cMemoryOwn;
    swigCPtr = new global::System.Runtime.InteropServices.HandleRef(this, cPtr);
  }

  public static global::System.Runtime.InteropServices.HandleRef getCPtr(ArNMEAParser obj) {
    return (obj == null) ? new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero) : obj.swigCPtr;
  }

  ~ArNMEAParser() {
    Dispose();
  }

  public virtual void Dispose() {
    lock(this) {
      if (swigCPtr.Handle != global::System.IntPtr.Zero) {
        if (swigCMemOwn) {
          swigCMemOwn = false;
          AriaCSPINVOKE.delete_ArNMEAParser(swigCPtr);
        }
        swigCPtr = new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero);
      }
      global::System.GC.SuppressFinalize(this);
    }
  }

  public ArNMEAParser(string name) : this(AriaCSPINVOKE.new_ArNMEAParser__SWIG_0(name), true) {
  }

  public ArNMEAParser() : this(AriaCSPINVOKE.new_ArNMEAParser__SWIG_1(), true) {
  }

  public int ParseFlags {
    set {
      AriaCSPINVOKE.ArNMEAParser_ParseFlags_set(swigCPtr, value);
    } 
    get {
      int ret = AriaCSPINVOKE.ArNMEAParser_ParseFlags_get(swigCPtr);
      return ret;
    } 
  }

  public void setIgnoreChecksum(bool ignore) {
    AriaCSPINVOKE.ArNMEAParser_setIgnoreChecksum(swigCPtr, ignore);
  }

  public class Message : global::System.IDisposable {
    private global::System.Runtime.InteropServices.HandleRef swigCPtr;
    protected bool swigCMemOwn;
  
    public Message(global::System.IntPtr cPtr, bool cMemoryOwn) {
      swigCMemOwn = cMemoryOwn;
      swigCPtr = new global::System.Runtime.InteropServices.HandleRef(this, cPtr);
    }
  
    public static global::System.Runtime.InteropServices.HandleRef getCPtr(Message obj) {
      return (obj == null) ? new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero) : obj.swigCPtr;
    }
  
    ~Message() {
      Dispose();
    }
  
    public virtual void Dispose() {
      lock(this) {
        if (swigCPtr.Handle != global::System.IntPtr.Zero) {
          if (swigCMemOwn) {
            swigCMemOwn = false;
            AriaCSPINVOKE.delete_ArNMEAParser_Message(swigCPtr);
          }
          swigCPtr = new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero);
        }
        global::System.GC.SuppressFinalize(this);
      }
    }
  
    public SWIGTYPE_p_std__vectorT_std__string_t message {
      set {
        AriaCSPINVOKE.ArNMEAParser_Message_message_set(swigCPtr, SWIGTYPE_p_std__vectorT_std__string_t.getCPtr(value));
      } 
      get {
        global::System.IntPtr cPtr = AriaCSPINVOKE.ArNMEAParser_Message_message_get(swigCPtr);
        SWIGTYPE_p_std__vectorT_std__string_t ret = (cPtr == global::System.IntPtr.Zero) ? null : new SWIGTYPE_p_std__vectorT_std__string_t(cPtr, false);
        return ret;
      } 
    }
  
    public ArTime timeParseStarted {
      set {
        AriaCSPINVOKE.ArNMEAParser_Message_timeParseStarted_set(swigCPtr, ArTime.getCPtr(value));
      } 
      get {
        global::System.IntPtr cPtr = AriaCSPINVOKE.ArNMEAParser_Message_timeParseStarted_get(swigCPtr);
        ArTime ret = (cPtr == global::System.IntPtr.Zero) ? null : new ArTime(cPtr, false);
        return ret;
      } 
    }
  
    public string id {
      set {
        AriaCSPINVOKE.ArNMEAParser_Message_id_set(swigCPtr, value);
        if (AriaCSPINVOKE.SWIGPendingException.Pending) throw AriaCSPINVOKE.SWIGPendingException.Retrieve();
      } 
      get {
        string ret = AriaCSPINVOKE.ArNMEAParser_Message_id_get(swigCPtr);
        if (AriaCSPINVOKE.SWIGPendingException.Pending) throw AriaCSPINVOKE.SWIGPendingException.Retrieve();
        return ret;
      } 
    }
  
    public string prefix {
      set {
        AriaCSPINVOKE.ArNMEAParser_Message_prefix_set(swigCPtr, value);
        if (AriaCSPINVOKE.SWIGPendingException.Pending) throw AriaCSPINVOKE.SWIGPendingException.Retrieve();
      } 
      get {
        string ret = AriaCSPINVOKE.ArNMEAParser_Message_prefix_get(swigCPtr);
        if (AriaCSPINVOKE.SWIGPendingException.Pending) throw AriaCSPINVOKE.SWIGPendingException.Retrieve();
        return ret;
      } 
    }
  
    public Message() : this(AriaCSPINVOKE.new_ArNMEAParser_Message(), true) {
    }
  
  }

  public void addHandler(string messageID, SWIGTYPE_p_ArFunctor1T_ArNMEAParser__Message_t handler) {
    AriaCSPINVOKE.ArNMEAParser_addHandler(swigCPtr, messageID, SWIGTYPE_p_ArFunctor1T_ArNMEAParser__Message_t.getCPtr(handler));
  }

  public void removeHandler(string messageID) {
    AriaCSPINVOKE.ArNMEAParser_removeHandler(swigCPtr, messageID);
  }

  public int parse(ArDeviceConnection dev) {
    int ret = AriaCSPINVOKE.ArNMEAParser_parse__SWIG_0(swigCPtr, ArDeviceConnection.getCPtr(dev));
    return ret;
  }

  public int parse(string buf, int n) {
    int ret = AriaCSPINVOKE.ArNMEAParser_parse__SWIG_1(swigCPtr, buf, n);
    return ret;
  }

  public SWIGTYPE_p_std__mapT_std__string_ArFunctor1T_ArNMEAParser__Message_t_p_std__lessT_std__string_t_t getHandlersRef() {
    SWIGTYPE_p_std__mapT_std__string_ArFunctor1T_ArNMEAParser__Message_t_p_std__lessT_std__string_t_t ret = new SWIGTYPE_p_std__mapT_std__string_ArFunctor1T_ArNMEAParser__Message_t_p_std__lessT_std__string_t_t(AriaCSPINVOKE.ArNMEAParser_getHandlersRef(swigCPtr), false);
    return ret;
  }

  public static readonly int ParseFinished = AriaCSPINVOKE.ArNMEAParser_ParseFinished_get();
  public static readonly int ParseError = AriaCSPINVOKE.ArNMEAParser_ParseError_get();
  public static readonly int ParseData = AriaCSPINVOKE.ArNMEAParser_ParseData_get();
  public static readonly int ParseUpdated = AriaCSPINVOKE.ArNMEAParser_ParseUpdated_get();

}

}
