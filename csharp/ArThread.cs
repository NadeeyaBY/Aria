//------------------------------------------------------------------------------
// <auto-generated />
//
// This file was automatically generated by SWIG (http://www.swig.org).
// Version 3.0.8
//
// Do not make changes to this file unless you know what you are doing--modify
// the SWIG interface file instead.
//------------------------------------------------------------------------------

namespace AriaCS {

public class ArThread : global::System.IDisposable {
  private global::System.Runtime.InteropServices.HandleRef swigCPtr;
  protected bool swigCMemOwn;

  public ArThread(global::System.IntPtr cPtr, bool cMemoryOwn) {
    swigCMemOwn = cMemoryOwn;
    swigCPtr = new global::System.Runtime.InteropServices.HandleRef(this, cPtr);
  }

  public static global::System.Runtime.InteropServices.HandleRef getCPtr(ArThread obj) {
    return (obj == null) ? new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero) : obj.swigCPtr;
  }

  ~ArThread() {
    Dispose();
  }

  public virtual void Dispose() {
    lock(this) {
      if (swigCPtr.Handle != global::System.IntPtr.Zero) {
        if (swigCMemOwn) {
          swigCMemOwn = false;
          AriaCSPINVOKE.delete_ArThread(swigCPtr);
        }
        swigCPtr = new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero);
      }
      global::System.GC.SuppressFinalize(this);
    }
  }

  public ArThread(bool blockAllSignals) : this(AriaCSPINVOKE.new_ArThread__SWIG_0(blockAllSignals), true) {
  }

  public ArThread() : this(AriaCSPINVOKE.new_ArThread__SWIG_1(), true) {
  }

  public ArThread(SWIGTYPE_p_pthread_t thread, bool joinable, bool blockAllSignals) : this(AriaCSPINVOKE.new_ArThread__SWIG_2(SWIGTYPE_p_pthread_t.getCPtr(thread), joinable, blockAllSignals), true) {
    if (AriaCSPINVOKE.SWIGPendingException.Pending) throw AriaCSPINVOKE.SWIGPendingException.Retrieve();
  }

  public ArThread(SWIGTYPE_p_pthread_t thread, bool joinable) : this(AriaCSPINVOKE.new_ArThread__SWIG_3(SWIGTYPE_p_pthread_t.getCPtr(thread), joinable), true) {
    if (AriaCSPINVOKE.SWIGPendingException.Pending) throw AriaCSPINVOKE.SWIGPendingException.Retrieve();
  }

  public ArThread(ArFunctor func, bool joinable, bool blockAllSignals) : this(AriaCSPINVOKE.new_ArThread__SWIG_4(ArFunctor.getCPtr(func), joinable, blockAllSignals), true) {
  }

  public ArThread(ArFunctor func, bool joinable) : this(AriaCSPINVOKE.new_ArThread__SWIG_5(ArFunctor.getCPtr(func), joinable), true) {
  }

  public ArThread(ArFunctor func) : this(AriaCSPINVOKE.new_ArThread__SWIG_6(ArFunctor.getCPtr(func)), true) {
  }

  public static void init() {
    AriaCSPINVOKE.ArThread_init();
  }

  public static ArThread self() {
    global::System.IntPtr cPtr = AriaCSPINVOKE.ArThread_self();
    ArThread ret = (cPtr == global::System.IntPtr.Zero) ? null : new ArThread(cPtr, false);
    return ret;
  }

  public static SWIGTYPE_p_pthread_t osSelf() {
    SWIGTYPE_p_pthread_t ret = new SWIGTYPE_p_pthread_t(AriaCSPINVOKE.ArThread_osSelf(), true);
    return ret;
  }

  public static void stopAll() {
    AriaCSPINVOKE.ArThread_stopAll();
  }

  public static void cancelAll() {
    AriaCSPINVOKE.ArThread_cancelAll();
  }

  public static void joinAll() {
    AriaCSPINVOKE.ArThread_joinAll();
  }

  public static void shutdown() {
    AriaCSPINVOKE.ArThread_shutdown();
  }

  public static void yieldProcessor() {
    AriaCSPINVOKE.ArThread_yieldProcessor();
  }

  public static ArLog.LogLevel getLogLevel() {
    ArLog.LogLevel ret = (ArLog.LogLevel)AriaCSPINVOKE.ArThread_getLogLevel();
    return ret;
  }

  public static void setLogLevel(ArLog.LogLevel level) {
    AriaCSPINVOKE.ArThread_setLogLevel((int)level);
  }

  public virtual int create(ArFunctor func, bool joinable, bool lowerPriority) {
    int ret = AriaCSPINVOKE.ArThread_create__SWIG_0(swigCPtr, ArFunctor.getCPtr(func), joinable, lowerPriority);
    return ret;
  }

  public virtual int create(ArFunctor func, bool joinable) {
    int ret = AriaCSPINVOKE.ArThread_create__SWIG_1(swigCPtr, ArFunctor.getCPtr(func), joinable);
    return ret;
  }

  public virtual int create(ArFunctor func) {
    int ret = AriaCSPINVOKE.ArThread_create__SWIG_2(swigCPtr, ArFunctor.getCPtr(func));
    return ret;
  }

  public virtual void stopRunning() {
    AriaCSPINVOKE.ArThread_stopRunning(swigCPtr);
  }

  public virtual int join(SWIGTYPE_p_p_void r) {
    int ret = AriaCSPINVOKE.ArThread_join__SWIG_0(swigCPtr, SWIGTYPE_p_p_void.getCPtr(r));
    return ret;
  }

  public virtual int join() {
    int ret = AriaCSPINVOKE.ArThread_join__SWIG_1(swigCPtr);
    return ret;
  }

  public virtual int detach() {
    int ret = AriaCSPINVOKE.ArThread_detach(swigCPtr);
    return ret;
  }

  public virtual void cancel() {
    AriaCSPINVOKE.ArThread_cancel(swigCPtr);
  }

  public virtual bool getRunning() {
    bool ret = AriaCSPINVOKE.ArThread_getRunning(swigCPtr);
    return ret;
  }

  public virtual bool getRunningWithLock() {
    bool ret = AriaCSPINVOKE.ArThread_getRunningWithLock(swigCPtr);
    return ret;
  }

  public virtual bool getJoinable() {
    bool ret = AriaCSPINVOKE.ArThread_getJoinable(swigCPtr);
    return ret;
  }

  public virtual SWIGTYPE_p_pthread_t getThread() {
    global::System.IntPtr cPtr = AriaCSPINVOKE.ArThread_getThread(swigCPtr);
    SWIGTYPE_p_pthread_t ret = (cPtr == global::System.IntPtr.Zero) ? null : new SWIGTYPE_p_pthread_t(cPtr, false);
    return ret;
  }

  public virtual SWIGTYPE_p_pthread_t getOSThread() {
    SWIGTYPE_p_pthread_t ret = new SWIGTYPE_p_pthread_t(AriaCSPINVOKE.ArThread_getOSThread(swigCPtr), true);
    return ret;
  }

  public virtual ArFunctor getFunc() {
    global::System.IntPtr cPtr = AriaCSPINVOKE.ArThread_getFunc(swigCPtr);
    ArFunctor ret = (cPtr == global::System.IntPtr.Zero) ? null : new ArFunctor(cPtr, false);
    return ret;
  }

  public virtual void setRunning(bool running) {
    AriaCSPINVOKE.ArThread_setRunning(swigCPtr, running);
  }

  public bool getBlockAllSignals() {
    bool ret = AriaCSPINVOKE.ArThread_getBlockAllSignals(swigCPtr);
    return ret;
  }

  public virtual string getThreadName() {
    string ret = AriaCSPINVOKE.ArThread_getThreadName(swigCPtr);
    return ret;
  }

  public virtual void setThreadName(string name) {
    AriaCSPINVOKE.ArThread_setThreadName(swigCPtr, name);
  }

  public virtual string getThreadActivity() {
    string ret = AriaCSPINVOKE.ArThread_getThreadActivity(swigCPtr);
    return ret;
  }

  public virtual void threadStarted() {
    AriaCSPINVOKE.ArThread_threadStarted(swigCPtr);
  }

  public virtual void threadFinished() {
    AriaCSPINVOKE.ArThread_threadFinished(swigCPtr);
  }

  public virtual bool isThreadStarted() {
    bool ret = AriaCSPINVOKE.ArThread_isThreadStarted(swigCPtr);
    return ret;
  }

  public virtual bool isThreadFinished() {
    bool ret = AriaCSPINVOKE.ArThread_isThreadFinished(swigCPtr);
    return ret;
  }

  public virtual void logThreadInfo() {
    AriaCSPINVOKE.ArThread_logThreadInfo(swigCPtr);
  }

  public SWIGTYPE_p_pid_t getPID() {
    SWIGTYPE_p_pid_t ret = new SWIGTYPE_p_pid_t(AriaCSPINVOKE.ArThread_getPID(swigCPtr), true);
    return ret;
  }

  public SWIGTYPE_p_pid_t getTID() {
    SWIGTYPE_p_pid_t ret = new SWIGTYPE_p_pid_t(AriaCSPINVOKE.ArThread_getTID(swigCPtr), true);
    return ret;
  }

  public static string getThisThreadName() {
    string ret = AriaCSPINVOKE.ArThread_getThisThreadName();
    return ret;
  }

  public static SWIGTYPE_p_pthread_t getThisThread() {
    global::System.IntPtr cPtr = AriaCSPINVOKE.ArThread_getThisThread();
    SWIGTYPE_p_pthread_t ret = (cPtr == global::System.IntPtr.Zero) ? null : new SWIGTYPE_p_pthread_t(cPtr, false);
    return ret;
  }

  public static SWIGTYPE_p_pthread_t getThisOSThread() {
    SWIGTYPE_p_pthread_t ret = new SWIGTYPE_p_pthread_t(AriaCSPINVOKE.ArThread_getThisOSThread(), true);
    return ret;
  }

  public enum Status {
    STATUS_FAILED = 1,
    STATUS_NORESOURCE,
    STATUS_NO_SUCH_THREAD,
    STATUS_INVALID,
    STATUS_JOIN_SELF,
    STATUS_ALREADY_DETATCHED
  }

}

}
