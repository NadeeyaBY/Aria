//------------------------------------------------------------------------------
// <auto-generated />
//
// This file was automatically generated by SWIG (http://www.swig.org).
// Version 3.0.8
//
// Do not make changes to this file unless you know what you are doing--modify
// the SWIG interface file instead.
//------------------------------------------------------------------------------

namespace AriaCS {

public class ArArgumentBuilder : global::System.IDisposable {
  private global::System.Runtime.InteropServices.HandleRef swigCPtr;
  protected bool swigCMemOwn;

  public ArArgumentBuilder(global::System.IntPtr cPtr, bool cMemoryOwn) {
    swigCMemOwn = cMemoryOwn;
    swigCPtr = new global::System.Runtime.InteropServices.HandleRef(this, cPtr);
  }

  public static global::System.Runtime.InteropServices.HandleRef getCPtr(ArArgumentBuilder obj) {
    return (obj == null) ? new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero) : obj.swigCPtr;
  }

  ~ArArgumentBuilder() {
    Dispose();
  }

  public virtual void Dispose() {
    lock(this) {
      if (swigCPtr.Handle != global::System.IntPtr.Zero) {
        if (swigCMemOwn) {
          swigCMemOwn = false;
          AriaCSPINVOKE.delete_ArArgumentBuilder(swigCPtr);
        }
        swigCPtr = new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero);
      }
      global::System.GC.SuppressFinalize(this);
    }
  }

  public ArArgumentBuilder(uint argvLen, char extraSpaceChar, bool ignoreNormalSpaces, bool isPreCompressQuotes) : this(AriaCSPINVOKE.new_ArArgumentBuilder__SWIG_0(argvLen, extraSpaceChar, ignoreNormalSpaces, isPreCompressQuotes), true) {
  }

  public ArArgumentBuilder(uint argvLen, char extraSpaceChar, bool ignoreNormalSpaces) : this(AriaCSPINVOKE.new_ArArgumentBuilder__SWIG_1(argvLen, extraSpaceChar, ignoreNormalSpaces), true) {
  }

  public ArArgumentBuilder(uint argvLen, char extraSpaceChar) : this(AriaCSPINVOKE.new_ArArgumentBuilder__SWIG_2(argvLen, extraSpaceChar), true) {
  }

  public ArArgumentBuilder(uint argvLen) : this(AriaCSPINVOKE.new_ArArgumentBuilder__SWIG_3(argvLen), true) {
  }

  public ArArgumentBuilder() : this(AriaCSPINVOKE.new_ArArgumentBuilder__SWIG_4(), true) {
  }

  public ArArgumentBuilder(ArArgumentBuilder builder) : this(AriaCSPINVOKE.new_ArArgumentBuilder__SWIG_5(ArArgumentBuilder.getCPtr(builder)), true) {
    if (AriaCSPINVOKE.SWIGPendingException.Pending) throw AriaCSPINVOKE.SWIGPendingException.Retrieve();
  }

  public void addPlain(string str, int position) {
    AriaCSPINVOKE.ArArgumentBuilder_addPlain__SWIG_0(swigCPtr, str, position);
  }

  public void addPlain(string str) {
    AriaCSPINVOKE.ArArgumentBuilder_addPlain__SWIG_1(swigCPtr, str);
  }

  public void addPlainAsIs(string str, int position) {
    AriaCSPINVOKE.ArArgumentBuilder_addPlainAsIs__SWIG_0(swigCPtr, str, position);
  }

  public void addPlainAsIs(string str) {
    AriaCSPINVOKE.ArArgumentBuilder_addPlainAsIs__SWIG_1(swigCPtr, str);
  }

  public void addStrings(SWIGTYPE_p_p_char argv, int argc, int position) {
    AriaCSPINVOKE.ArArgumentBuilder_addStrings__SWIG_0(swigCPtr, SWIGTYPE_p_p_char.getCPtr(argv), argc, position);
  }

  public void addStrings(SWIGTYPE_p_p_char argv, int argc) {
    AriaCSPINVOKE.ArArgumentBuilder_addStrings__SWIG_1(swigCPtr, SWIGTYPE_p_p_char.getCPtr(argv), argc);
  }

  public void addStrings(int argc, SWIGTYPE_p_p_char argv, int position) {
    AriaCSPINVOKE.ArArgumentBuilder_addStrings__SWIG_2(swigCPtr, argc, SWIGTYPE_p_p_char.getCPtr(argv), position);
  }

  public void addStrings(int argc, SWIGTYPE_p_p_char argv) {
    AriaCSPINVOKE.ArArgumentBuilder_addStrings__SWIG_3(swigCPtr, argc, SWIGTYPE_p_p_char.getCPtr(argv));
  }

  public void addStringsAsIs(int argc, SWIGTYPE_p_p_char argv, int position) {
    AriaCSPINVOKE.ArArgumentBuilder_addStringsAsIs__SWIG_0(swigCPtr, argc, SWIGTYPE_p_p_char.getCPtr(argv), position);
  }

  public void addStringsAsIs(int argc, SWIGTYPE_p_p_char argv) {
    AriaCSPINVOKE.ArArgumentBuilder_addStringsAsIs__SWIG_1(swigCPtr, argc, SWIGTYPE_p_p_char.getCPtr(argv));
  }

  public string getFullString() {
    string ret = AriaCSPINVOKE.ArArgumentBuilder_getFullString(swigCPtr);
    return ret;
  }

  public void setFullString(string str) {
    AriaCSPINVOKE.ArArgumentBuilder_setFullString(swigCPtr, str);
  }

  public string getExtraString() {
    string ret = AriaCSPINVOKE.ArArgumentBuilder_getExtraString(swigCPtr);
    return ret;
  }

  public void setExtraString(string str) {
    AriaCSPINVOKE.ArArgumentBuilder_setExtraString(swigCPtr, str);
  }

  public void log() {
    AriaCSPINVOKE.ArArgumentBuilder_log(swigCPtr);
  }

  public uint getArgc() {
    uint ret = AriaCSPINVOKE.ArArgumentBuilder_getArgc(swigCPtr);
    return ret;
  }

  public SWIGTYPE_p_p_char getArgv() {
    global::System.IntPtr cPtr = AriaCSPINVOKE.ArArgumentBuilder_getArgv(swigCPtr);
    SWIGTYPE_p_p_char ret = (cPtr == global::System.IntPtr.Zero) ? null : new SWIGTYPE_p_p_char(cPtr, false);
    return ret;
  }

  public string getArg(uint whichArg) {
    string ret = AriaCSPINVOKE.ArArgumentBuilder_getArg(swigCPtr, whichArg);
    return ret;
  }

  public bool isArgBool(uint whichArg) {
    bool ret = AriaCSPINVOKE.ArArgumentBuilder_isArgBool(swigCPtr, whichArg);
    return ret;
  }

  public bool getArgBool(uint whichArg, SWIGTYPE_p_bool ok) {
    bool ret = AriaCSPINVOKE.ArArgumentBuilder_getArgBool__SWIG_0(swigCPtr, whichArg, SWIGTYPE_p_bool.getCPtr(ok));
    return ret;
  }

  public bool getArgBool(uint whichArg) {
    bool ret = AriaCSPINVOKE.ArArgumentBuilder_getArgBool__SWIG_1(swigCPtr, whichArg);
    return ret;
  }

  public bool isArgInt(uint whichArg, bool forceHex) {
    bool ret = AriaCSPINVOKE.ArArgumentBuilder_isArgInt__SWIG_0(swigCPtr, whichArg, forceHex);
    return ret;
  }

  public bool isArgInt(uint whichArg) {
    bool ret = AriaCSPINVOKE.ArArgumentBuilder_isArgInt__SWIG_1(swigCPtr, whichArg);
    return ret;
  }

  public int getArgInt(uint whichArg, SWIGTYPE_p_bool ok, bool forceHex) {
    int ret = AriaCSPINVOKE.ArArgumentBuilder_getArgInt__SWIG_0(swigCPtr, whichArg, SWIGTYPE_p_bool.getCPtr(ok), forceHex);
    return ret;
  }

  public int getArgInt(uint whichArg, SWIGTYPE_p_bool ok) {
    int ret = AriaCSPINVOKE.ArArgumentBuilder_getArgInt__SWIG_1(swigCPtr, whichArg, SWIGTYPE_p_bool.getCPtr(ok));
    return ret;
  }

  public int getArgInt(uint whichArg) {
    int ret = AriaCSPINVOKE.ArArgumentBuilder_getArgInt__SWIG_2(swigCPtr, whichArg);
    return ret;
  }

  public bool isArgLongLongInt(uint whichArg) {
    bool ret = AriaCSPINVOKE.ArArgumentBuilder_isArgLongLongInt(swigCPtr, whichArg);
    return ret;
  }

  public int getArgLongLongInt(uint whichArg, SWIGTYPE_p_bool ok) {
    int ret = AriaCSPINVOKE.ArArgumentBuilder_getArgLongLongInt__SWIG_0(swigCPtr, whichArg, SWIGTYPE_p_bool.getCPtr(ok));
    return ret;
  }

  public int getArgLongLongInt(uint whichArg) {
    int ret = AriaCSPINVOKE.ArArgumentBuilder_getArgLongLongInt__SWIG_1(swigCPtr, whichArg);
    return ret;
  }

  public bool isArgDouble(uint whichArg) {
    bool ret = AriaCSPINVOKE.ArArgumentBuilder_isArgDouble(swigCPtr, whichArg);
    return ret;
  }

  public double getArgDouble(uint whichArg, SWIGTYPE_p_bool ok) {
    double ret = AriaCSPINVOKE.ArArgumentBuilder_getArgDouble__SWIG_0(swigCPtr, whichArg, SWIGTYPE_p_bool.getCPtr(ok));
    return ret;
  }

  public double getArgDouble(uint whichArg) {
    double ret = AriaCSPINVOKE.ArArgumentBuilder_getArgDouble__SWIG_1(swigCPtr, whichArg);
    return ret;
  }

  public void removeArg(uint which, bool isRebuildFullString) {
    AriaCSPINVOKE.ArArgumentBuilder_removeArg__SWIG_0(swigCPtr, which, isRebuildFullString);
  }

  public void removeArg(uint which) {
    AriaCSPINVOKE.ArArgumentBuilder_removeArg__SWIG_1(swigCPtr, which);
  }

  public void compressQuoted(bool stripQuotationMarks) {
    AriaCSPINVOKE.ArArgumentBuilder_compressQuoted__SWIG_0(swigCPtr, stripQuotationMarks);
  }

  public void compressQuoted() {
    AriaCSPINVOKE.ArArgumentBuilder_compressQuoted__SWIG_1(swigCPtr);
  }

  public void setQuiet(bool isQuiet) {
    AriaCSPINVOKE.ArArgumentBuilder_setQuiet(swigCPtr, isQuiet);
  }

}

}
