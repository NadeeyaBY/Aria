//------------------------------------------------------------------------------
// <auto-generated />
//
// This file was automatically generated by SWIG (http://www.swig.org).
// Version 3.0.8
//
// Do not make changes to this file unless you know what you are doing--modify
// the SWIG interface file instead.
//------------------------------------------------------------------------------

namespace AriaCS {

public class ArDPPTUCommands : global::System.IDisposable {
  private global::System.Runtime.InteropServices.HandleRef swigCPtr;
  protected bool swigCMemOwn;

  public ArDPPTUCommands(global::System.IntPtr cPtr, bool cMemoryOwn) {
    swigCMemOwn = cMemoryOwn;
    swigCPtr = new global::System.Runtime.InteropServices.HandleRef(this, cPtr);
  }

  public static global::System.Runtime.InteropServices.HandleRef getCPtr(ArDPPTUCommands obj) {
    return (obj == null) ? new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero) : obj.swigCPtr;
  }

  ~ArDPPTUCommands() {
    Dispose();
  }

  public virtual void Dispose() {
    lock(this) {
      if (swigCPtr.Handle != global::System.IntPtr.Zero) {
        if (swigCMemOwn) {
          swigCMemOwn = false;
          AriaCSPINVOKE.delete_ArDPPTUCommands(swigCPtr);
        }
        swigCPtr = new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero);
      }
      global::System.GC.SuppressFinalize(this);
    }
  }

  public ArDPPTUCommands() : this(AriaCSPINVOKE.new_ArDPPTUCommands(), true) {
  }

  public static readonly int DELIM = AriaCSPINVOKE.ArDPPTUCommands_DELIM_get();
  public static readonly int INIT = AriaCSPINVOKE.ArDPPTUCommands_INIT_get();
  public static readonly int ACCEL = AriaCSPINVOKE.ArDPPTUCommands_ACCEL_get();
  public static readonly int BASE = AriaCSPINVOKE.ArDPPTUCommands_BASE_get();
  public static readonly int CONTROL = AriaCSPINVOKE.ArDPPTUCommands_CONTROL_get();
  public static readonly int DISABLE = AriaCSPINVOKE.ArDPPTUCommands_DISABLE_get();
  public static readonly int ENABLE = AriaCSPINVOKE.ArDPPTUCommands_ENABLE_get();
  public static readonly int FACTORY = AriaCSPINVOKE.ArDPPTUCommands_FACTORY_get();
  public static readonly int HALT = AriaCSPINVOKE.ArDPPTUCommands_HALT_get();
  public static readonly int IMMED = AriaCSPINVOKE.ArDPPTUCommands_IMMED_get();
  public static readonly int LIMIT = AriaCSPINVOKE.ArDPPTUCommands_LIMIT_get();
  public static readonly int MONITOR = AriaCSPINVOKE.ArDPPTUCommands_MONITOR_get();
  public static readonly int OFFSET = AriaCSPINVOKE.ArDPPTUCommands_OFFSET_get();
  public static readonly int PAN = AriaCSPINVOKE.ArDPPTUCommands_PAN_get();
  public static readonly int RESET = AriaCSPINVOKE.ArDPPTUCommands_RESET_get();
  public static readonly int SPEED = AriaCSPINVOKE.ArDPPTUCommands_SPEED_get();
  public static readonly int TILT = AriaCSPINVOKE.ArDPPTUCommands_TILT_get();
  public static readonly int UPPER = AriaCSPINVOKE.ArDPPTUCommands_UPPER_get();
  public static readonly int VELOCITY = AriaCSPINVOKE.ArDPPTUCommands_VELOCITY_get();

}

}
