//------------------------------------------------------------------------------
// <auto-generated />
//
// This file was automatically generated by SWIG (http://www.swig.org).
// Version 3.0.8
//
// Do not make changes to this file unless you know what you are doing--modify
// the SWIG interface file instead.
//------------------------------------------------------------------------------

namespace AriaCS {

public class ArConfig : ArHasFileName {
  private global::System.Runtime.InteropServices.HandleRef swigCPtr;

  public ArConfig(global::System.IntPtr cPtr, bool cMemoryOwn) : base(AriaCSPINVOKE.ArConfig_SWIGUpcast(cPtr), cMemoryOwn) {
    swigCPtr = new global::System.Runtime.InteropServices.HandleRef(this, cPtr);
  }

  public static global::System.Runtime.InteropServices.HandleRef getCPtr(ArConfig obj) {
    return (obj == null) ? new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero) : obj.swigCPtr;
  }

  ~ArConfig() {
    Dispose();
  }

  public override void Dispose() {
    lock(this) {
      if (swigCPtr.Handle != global::System.IntPtr.Zero) {
        if (swigCMemOwn) {
          swigCMemOwn = false;
          AriaCSPINVOKE.delete_ArConfig(swigCPtr);
        }
        swigCPtr = new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero);
      }
      global::System.GC.SuppressFinalize(this);
      base.Dispose();
    }
  }

  public static string CATEGORY_ROBOT_INTERFACE {
    set {
      AriaCSPINVOKE.ArConfig_CATEGORY_ROBOT_INTERFACE_set(value);
    } 
    get {
      string ret = AriaCSPINVOKE.ArConfig_CATEGORY_ROBOT_INTERFACE_get();
      return ret;
    } 
  }

  public static string CATEGORY_ROBOT_OPERATION {
    set {
      AriaCSPINVOKE.ArConfig_CATEGORY_ROBOT_OPERATION_set(value);
    } 
    get {
      string ret = AriaCSPINVOKE.ArConfig_CATEGORY_ROBOT_OPERATION_get();
      return ret;
    } 
  }

  public static string CATEGORY_ROBOT_PHYSICAL {
    set {
      AriaCSPINVOKE.ArConfig_CATEGORY_ROBOT_PHYSICAL_set(value);
    } 
    get {
      string ret = AriaCSPINVOKE.ArConfig_CATEGORY_ROBOT_PHYSICAL_get();
      return ret;
    } 
  }

  public static string CATEGORY_FLEET {
    set {
      AriaCSPINVOKE.ArConfig_CATEGORY_FLEET_set(value);
    } 
    get {
      string ret = AriaCSPINVOKE.ArConfig_CATEGORY_FLEET_get();
      return ret;
    } 
  }

  public static string CATEGORY_SECURITY {
    set {
      AriaCSPINVOKE.ArConfig_CATEGORY_SECURITY_set(value);
    } 
    get {
      string ret = AriaCSPINVOKE.ArConfig_CATEGORY_SECURITY_get();
      return ret;
    } 
  }

  public static string CATEGORY_DEBUG {
    set {
      AriaCSPINVOKE.ArConfig_CATEGORY_DEBUG_set(value);
    } 
    get {
      string ret = AriaCSPINVOKE.ArConfig_CATEGORY_DEBUG_get();
      return ret;
    } 
  }

  public static string toCategoryName(string categoryName) {
    string ret = AriaCSPINVOKE.ArConfig_toCategoryName(categoryName);
    return ret;
  }

  public ArConfig(string baseDirectory, bool noBlanksBetweenParams, bool ignoreBounds, bool failOnBadSection, bool saveUnknown) : this(AriaCSPINVOKE.new_ArConfig__SWIG_0(baseDirectory, noBlanksBetweenParams, ignoreBounds, failOnBadSection, saveUnknown), true) {
  }

  public ArConfig(string baseDirectory, bool noBlanksBetweenParams, bool ignoreBounds, bool failOnBadSection) : this(AriaCSPINVOKE.new_ArConfig__SWIG_1(baseDirectory, noBlanksBetweenParams, ignoreBounds, failOnBadSection), true) {
  }

  public ArConfig(string baseDirectory, bool noBlanksBetweenParams, bool ignoreBounds) : this(AriaCSPINVOKE.new_ArConfig__SWIG_2(baseDirectory, noBlanksBetweenParams, ignoreBounds), true) {
  }

  public ArConfig(string baseDirectory, bool noBlanksBetweenParams) : this(AriaCSPINVOKE.new_ArConfig__SWIG_3(baseDirectory, noBlanksBetweenParams), true) {
  }

  public ArConfig(string baseDirectory) : this(AriaCSPINVOKE.new_ArConfig__SWIG_4(baseDirectory), true) {
  }

  public ArConfig() : this(AriaCSPINVOKE.new_ArConfig__SWIG_5(), true) {
  }

  public ArConfig(ArConfig config) : this(AriaCSPINVOKE.new_ArConfig__SWIG_6(ArConfig.getCPtr(config)), true) {
    if (AriaCSPINVOKE.SWIGPendingException.Pending) throw AriaCSPINVOKE.SWIGPendingException.Retrieve();
  }

  public virtual void copyAndDetach(ArConfig config) {
    AriaCSPINVOKE.ArConfig_copyAndDetach(swigCPtr, ArConfig.getCPtr(config));
    if (AriaCSPINVOKE.SWIGPendingException.Pending) throw AriaCSPINVOKE.SWIGPendingException.Retrieve();
  }

  public virtual void setConfigName(string configName, string robotName) {
    AriaCSPINVOKE.ArConfig_setConfigName__SWIG_0(swigCPtr, configName, robotName);
  }

  public virtual void setConfigName(string configName) {
    AriaCSPINVOKE.ArConfig_setConfigName__SWIG_1(swigCPtr, configName);
  }

  public virtual void setQuiet(bool isQuiet) {
    AriaCSPINVOKE.ArConfig_setQuiet(swigCPtr, isQuiet);
  }

  public virtual void setTranslator(ArConfig xlatorConfig) {
    AriaCSPINVOKE.ArConfig_setTranslator(swigCPtr, ArConfig.getCPtr(xlatorConfig));
  }

  public virtual ArConfig getTranslator() {
    global::System.IntPtr cPtr = AriaCSPINVOKE.ArConfig_getTranslator(swigCPtr);
    ArConfig ret = (cPtr == global::System.IntPtr.Zero) ? null : new ArConfig(cPtr, false);
    return ret;
  }

  public bool parseFile(string fileName, bool continueOnError, bool noFileNotFoundMessage, string errorBuffer, uint errorBufferLen, SWIGTYPE_p_std__listT_std__string_t sectionsToParse, ArPriority.Priority highestPriority, ArPriority.Priority lowestPriority, SWIGTYPE_p_ArConfigArg__RestartLevel restartLevelNeeded) {
    bool ret = AriaCSPINVOKE.ArConfig_parseFile__SWIG_0(swigCPtr, fileName, continueOnError, noFileNotFoundMessage, errorBuffer, errorBufferLen, SWIGTYPE_p_std__listT_std__string_t.getCPtr(sectionsToParse), (int)highestPriority, (int)lowestPriority, SWIGTYPE_p_ArConfigArg__RestartLevel.getCPtr(restartLevelNeeded));
    return ret;
  }

  public bool parseFile(string fileName, bool continueOnError, bool noFileNotFoundMessage, string errorBuffer, uint errorBufferLen, SWIGTYPE_p_std__listT_std__string_t sectionsToParse, ArPriority.Priority highestPriority, ArPriority.Priority lowestPriority) {
    bool ret = AriaCSPINVOKE.ArConfig_parseFile__SWIG_1(swigCPtr, fileName, continueOnError, noFileNotFoundMessage, errorBuffer, errorBufferLen, SWIGTYPE_p_std__listT_std__string_t.getCPtr(sectionsToParse), (int)highestPriority, (int)lowestPriority);
    return ret;
  }

  public bool parseFile(string fileName, bool continueOnError, bool noFileNotFoundMessage, string errorBuffer, uint errorBufferLen, SWIGTYPE_p_std__listT_std__string_t sectionsToParse, ArPriority.Priority highestPriority) {
    bool ret = AriaCSPINVOKE.ArConfig_parseFile__SWIG_2(swigCPtr, fileName, continueOnError, noFileNotFoundMessage, errorBuffer, errorBufferLen, SWIGTYPE_p_std__listT_std__string_t.getCPtr(sectionsToParse), (int)highestPriority);
    return ret;
  }

  public bool parseFile(string fileName, bool continueOnError, bool noFileNotFoundMessage, string errorBuffer, uint errorBufferLen, SWIGTYPE_p_std__listT_std__string_t sectionsToParse) {
    bool ret = AriaCSPINVOKE.ArConfig_parseFile__SWIG_3(swigCPtr, fileName, continueOnError, noFileNotFoundMessage, errorBuffer, errorBufferLen, SWIGTYPE_p_std__listT_std__string_t.getCPtr(sectionsToParse));
    return ret;
  }

  public bool parseFile(string fileName, bool continueOnError, bool noFileNotFoundMessage, string errorBuffer, uint errorBufferLen) {
    bool ret = AriaCSPINVOKE.ArConfig_parseFile__SWIG_4(swigCPtr, fileName, continueOnError, noFileNotFoundMessage, errorBuffer, errorBufferLen);
    return ret;
  }

  public bool parseFile(string fileName, bool continueOnError, bool noFileNotFoundMessage, string errorBuffer) {
    bool ret = AriaCSPINVOKE.ArConfig_parseFile__SWIG_5(swigCPtr, fileName, continueOnError, noFileNotFoundMessage, errorBuffer);
    return ret;
  }

  public bool parseFile(string fileName, bool continueOnError, bool noFileNotFoundMessage) {
    bool ret = AriaCSPINVOKE.ArConfig_parseFile__SWIG_6(swigCPtr, fileName, continueOnError, noFileNotFoundMessage);
    return ret;
  }

  public bool parseFile(string fileName, bool continueOnError) {
    bool ret = AriaCSPINVOKE.ArConfig_parseFile__SWIG_7(swigCPtr, fileName, continueOnError);
    return ret;
  }

  public bool parseFile(string fileName) {
    bool ret = AriaCSPINVOKE.ArConfig_parseFile__SWIG_8(swigCPtr, fileName);
    return ret;
  }

  public bool writeFile(string fileName, bool append, SWIGTYPE_p_std__setT_std__string_t alreadyWritten, bool writeExtras, SWIGTYPE_p_std__listT_std__string_t sectionsToWrite, ArPriority.Priority highestPriority, ArPriority.Priority lowestPriority) {
    bool ret = AriaCSPINVOKE.ArConfig_writeFile__SWIG_0(swigCPtr, fileName, append, SWIGTYPE_p_std__setT_std__string_t.getCPtr(alreadyWritten), writeExtras, SWIGTYPE_p_std__listT_std__string_t.getCPtr(sectionsToWrite), (int)highestPriority, (int)lowestPriority);
    return ret;
  }

  public bool writeFile(string fileName, bool append, SWIGTYPE_p_std__setT_std__string_t alreadyWritten, bool writeExtras, SWIGTYPE_p_std__listT_std__string_t sectionsToWrite, ArPriority.Priority highestPriority) {
    bool ret = AriaCSPINVOKE.ArConfig_writeFile__SWIG_1(swigCPtr, fileName, append, SWIGTYPE_p_std__setT_std__string_t.getCPtr(alreadyWritten), writeExtras, SWIGTYPE_p_std__listT_std__string_t.getCPtr(sectionsToWrite), (int)highestPriority);
    return ret;
  }

  public bool writeFile(string fileName, bool append, SWIGTYPE_p_std__setT_std__string_t alreadyWritten, bool writeExtras, SWIGTYPE_p_std__listT_std__string_t sectionsToWrite) {
    bool ret = AriaCSPINVOKE.ArConfig_writeFile__SWIG_2(swigCPtr, fileName, append, SWIGTYPE_p_std__setT_std__string_t.getCPtr(alreadyWritten), writeExtras, SWIGTYPE_p_std__listT_std__string_t.getCPtr(sectionsToWrite));
    return ret;
  }

  public bool writeFile(string fileName, bool append, SWIGTYPE_p_std__setT_std__string_t alreadyWritten, bool writeExtras) {
    bool ret = AriaCSPINVOKE.ArConfig_writeFile__SWIG_3(swigCPtr, fileName, append, SWIGTYPE_p_std__setT_std__string_t.getCPtr(alreadyWritten), writeExtras);
    return ret;
  }

  public bool writeFile(string fileName, bool append, SWIGTYPE_p_std__setT_std__string_t alreadyWritten) {
    bool ret = AriaCSPINVOKE.ArConfig_writeFile__SWIG_4(swigCPtr, fileName, append, SWIGTYPE_p_std__setT_std__string_t.getCPtr(alreadyWritten));
    return ret;
  }

  public bool writeFile(string fileName, bool append) {
    bool ret = AriaCSPINVOKE.ArConfig_writeFile__SWIG_5(swigCPtr, fileName, append);
    return ret;
  }

  public bool writeFile(string fileName) {
    bool ret = AriaCSPINVOKE.ArConfig_writeFile__SWIG_6(swigCPtr, fileName);
    return ret;
  }

  public bool parseText(SWIGTYPE_p_std__listT_std__string_t configLines, bool continueOnErrors, SWIGTYPE_p_bool parseOk, SWIGTYPE_p_bool processOk, string errorBuffer, uint errorBufferLen, SWIGTYPE_p_std__listT_std__string_t sectionsToParse, ArPriority.Priority highestPriority, ArPriority.Priority lowestPriority, SWIGTYPE_p_ArConfigArg__RestartLevel restartLevelNeeded) {
    bool ret = AriaCSPINVOKE.ArConfig_parseText__SWIG_0(swigCPtr, SWIGTYPE_p_std__listT_std__string_t.getCPtr(configLines), continueOnErrors, SWIGTYPE_p_bool.getCPtr(parseOk), SWIGTYPE_p_bool.getCPtr(processOk), errorBuffer, errorBufferLen, SWIGTYPE_p_std__listT_std__string_t.getCPtr(sectionsToParse), (int)highestPriority, (int)lowestPriority, SWIGTYPE_p_ArConfigArg__RestartLevel.getCPtr(restartLevelNeeded));
    if (AriaCSPINVOKE.SWIGPendingException.Pending) throw AriaCSPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public bool parseText(SWIGTYPE_p_std__listT_std__string_t configLines, bool continueOnErrors, SWIGTYPE_p_bool parseOk, SWIGTYPE_p_bool processOk, string errorBuffer, uint errorBufferLen, SWIGTYPE_p_std__listT_std__string_t sectionsToParse, ArPriority.Priority highestPriority, ArPriority.Priority lowestPriority) {
    bool ret = AriaCSPINVOKE.ArConfig_parseText__SWIG_1(swigCPtr, SWIGTYPE_p_std__listT_std__string_t.getCPtr(configLines), continueOnErrors, SWIGTYPE_p_bool.getCPtr(parseOk), SWIGTYPE_p_bool.getCPtr(processOk), errorBuffer, errorBufferLen, SWIGTYPE_p_std__listT_std__string_t.getCPtr(sectionsToParse), (int)highestPriority, (int)lowestPriority);
    if (AriaCSPINVOKE.SWIGPendingException.Pending) throw AriaCSPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public bool parseText(SWIGTYPE_p_std__listT_std__string_t configLines, bool continueOnErrors, SWIGTYPE_p_bool parseOk, SWIGTYPE_p_bool processOk, string errorBuffer, uint errorBufferLen, SWIGTYPE_p_std__listT_std__string_t sectionsToParse, ArPriority.Priority highestPriority) {
    bool ret = AriaCSPINVOKE.ArConfig_parseText__SWIG_2(swigCPtr, SWIGTYPE_p_std__listT_std__string_t.getCPtr(configLines), continueOnErrors, SWIGTYPE_p_bool.getCPtr(parseOk), SWIGTYPE_p_bool.getCPtr(processOk), errorBuffer, errorBufferLen, SWIGTYPE_p_std__listT_std__string_t.getCPtr(sectionsToParse), (int)highestPriority);
    if (AriaCSPINVOKE.SWIGPendingException.Pending) throw AriaCSPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public bool parseText(SWIGTYPE_p_std__listT_std__string_t configLines, bool continueOnErrors, SWIGTYPE_p_bool parseOk, SWIGTYPE_p_bool processOk, string errorBuffer, uint errorBufferLen, SWIGTYPE_p_std__listT_std__string_t sectionsToParse) {
    bool ret = AriaCSPINVOKE.ArConfig_parseText__SWIG_3(swigCPtr, SWIGTYPE_p_std__listT_std__string_t.getCPtr(configLines), continueOnErrors, SWIGTYPE_p_bool.getCPtr(parseOk), SWIGTYPE_p_bool.getCPtr(processOk), errorBuffer, errorBufferLen, SWIGTYPE_p_std__listT_std__string_t.getCPtr(sectionsToParse));
    if (AriaCSPINVOKE.SWIGPendingException.Pending) throw AriaCSPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public bool parseText(SWIGTYPE_p_std__listT_std__string_t configLines, bool continueOnErrors, SWIGTYPE_p_bool parseOk, SWIGTYPE_p_bool processOk, string errorBuffer, uint errorBufferLen) {
    bool ret = AriaCSPINVOKE.ArConfig_parseText__SWIG_4(swigCPtr, SWIGTYPE_p_std__listT_std__string_t.getCPtr(configLines), continueOnErrors, SWIGTYPE_p_bool.getCPtr(parseOk), SWIGTYPE_p_bool.getCPtr(processOk), errorBuffer, errorBufferLen);
    if (AriaCSPINVOKE.SWIGPendingException.Pending) throw AriaCSPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public bool parseText(SWIGTYPE_p_std__listT_std__string_t configLines, bool continueOnErrors, SWIGTYPE_p_bool parseOk, SWIGTYPE_p_bool processOk, string errorBuffer) {
    bool ret = AriaCSPINVOKE.ArConfig_parseText__SWIG_5(swigCPtr, SWIGTYPE_p_std__listT_std__string_t.getCPtr(configLines), continueOnErrors, SWIGTYPE_p_bool.getCPtr(parseOk), SWIGTYPE_p_bool.getCPtr(processOk), errorBuffer);
    if (AriaCSPINVOKE.SWIGPendingException.Pending) throw AriaCSPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public bool parseText(SWIGTYPE_p_std__listT_std__string_t configLines, bool continueOnErrors, SWIGTYPE_p_bool parseOk, SWIGTYPE_p_bool processOk) {
    bool ret = AriaCSPINVOKE.ArConfig_parseText__SWIG_6(swigCPtr, SWIGTYPE_p_std__listT_std__string_t.getCPtr(configLines), continueOnErrors, SWIGTYPE_p_bool.getCPtr(parseOk), SWIGTYPE_p_bool.getCPtr(processOk));
    if (AriaCSPINVOKE.SWIGPendingException.Pending) throw AriaCSPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public bool parseText(SWIGTYPE_p_std__listT_std__string_t configLines, bool continueOnErrors, SWIGTYPE_p_bool parseOk) {
    bool ret = AriaCSPINVOKE.ArConfig_parseText__SWIG_7(swigCPtr, SWIGTYPE_p_std__listT_std__string_t.getCPtr(configLines), continueOnErrors, SWIGTYPE_p_bool.getCPtr(parseOk));
    if (AriaCSPINVOKE.SWIGPendingException.Pending) throw AriaCSPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public bool parseText(SWIGTYPE_p_std__listT_std__string_t configLines, bool continueOnErrors) {
    bool ret = AriaCSPINVOKE.ArConfig_parseText__SWIG_8(swigCPtr, SWIGTYPE_p_std__listT_std__string_t.getCPtr(configLines), continueOnErrors);
    if (AriaCSPINVOKE.SWIGPendingException.Pending) throw AriaCSPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public bool parseText(SWIGTYPE_p_std__listT_std__string_t configLines) {
    bool ret = AriaCSPINVOKE.ArConfig_parseText__SWIG_9(swigCPtr, SWIGTYPE_p_std__listT_std__string_t.getCPtr(configLines));
    if (AriaCSPINVOKE.SWIGPendingException.Pending) throw AriaCSPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public bool parseResourceFile(string fileName, bool continueOnError, string errorBuffer, uint errorBufferLen, SWIGTYPE_p_std__listT_std__string_t sectionsToParse) {
    bool ret = AriaCSPINVOKE.ArConfig_parseResourceFile__SWIG_0(swigCPtr, fileName, continueOnError, errorBuffer, errorBufferLen, SWIGTYPE_p_std__listT_std__string_t.getCPtr(sectionsToParse));
    return ret;
  }

  public bool parseResourceFile(string fileName, bool continueOnError, string errorBuffer, uint errorBufferLen) {
    bool ret = AriaCSPINVOKE.ArConfig_parseResourceFile__SWIG_1(swigCPtr, fileName, continueOnError, errorBuffer, errorBufferLen);
    return ret;
  }

  public bool parseResourceFile(string fileName, bool continueOnError, string errorBuffer) {
    bool ret = AriaCSPINVOKE.ArConfig_parseResourceFile__SWIG_2(swigCPtr, fileName, continueOnError, errorBuffer);
    return ret;
  }

  public bool parseResourceFile(string fileName, bool continueOnError) {
    bool ret = AriaCSPINVOKE.ArConfig_parseResourceFile__SWIG_3(swigCPtr, fileName, continueOnError);
    return ret;
  }

  public bool parseResourceFile(string fileName) {
    bool ret = AriaCSPINVOKE.ArConfig_parseResourceFile__SWIG_4(swigCPtr, fileName);
    return ret;
  }

  public void parseResourceFile(ArArgumentBuilder builder) {
    AriaCSPINVOKE.ArConfig_parseResourceFile__SWIG_5(swigCPtr, ArArgumentBuilder.getCPtr(builder));
  }

  public bool writeResourceFile(string fileName, bool append, SWIGTYPE_p_std__setT_std__string_t alreadyWritten, SWIGTYPE_p_std__listT_std__string_t sectionsToWrite) {
    bool ret = AriaCSPINVOKE.ArConfig_writeResourceFile__SWIG_0(swigCPtr, fileName, append, SWIGTYPE_p_std__setT_std__string_t.getCPtr(alreadyWritten), SWIGTYPE_p_std__listT_std__string_t.getCPtr(sectionsToWrite));
    return ret;
  }

  public bool writeResourceFile(string fileName, bool append, SWIGTYPE_p_std__setT_std__string_t alreadyWritten) {
    bool ret = AriaCSPINVOKE.ArConfig_writeResourceFile__SWIG_1(swigCPtr, fileName, append, SWIGTYPE_p_std__setT_std__string_t.getCPtr(alreadyWritten));
    return ret;
  }

  public bool writeResourceFile(string fileName, bool append) {
    bool ret = AriaCSPINVOKE.ArConfig_writeResourceFile__SWIG_2(swigCPtr, fileName, append);
    return ret;
  }

  public bool writeResourceFile(string fileName) {
    bool ret = AriaCSPINVOKE.ArConfig_writeResourceFile__SWIG_3(swigCPtr, fileName);
    return ret;
  }

  public void writeResourceFile(ArArgumentBuilder builder) {
    AriaCSPINVOKE.ArConfig_writeResourceFile__SWIG_4(swigCPtr, ArArgumentBuilder.getCPtr(builder));
  }

  public bool addSection(string categoryName, string sectionName, string sectionDescription) {
    bool ret = AriaCSPINVOKE.ArConfig_addSection(swigCPtr, categoryName, sectionName, sectionDescription);
    return ret;
  }

  public bool addParam(ArConfigArg arg, string sectionName, ArPriority.Priority priority, string displayHint, ArConfigArg.RestartLevel restart) {
    bool ret = AriaCSPINVOKE.ArConfig_addParam__SWIG_0(swigCPtr, ArConfigArg.getCPtr(arg), sectionName, (int)priority, displayHint, (int)restart);
    if (AriaCSPINVOKE.SWIGPendingException.Pending) throw AriaCSPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public bool addParam(ArConfigArg arg, string sectionName, ArPriority.Priority priority, string displayHint) {
    bool ret = AriaCSPINVOKE.ArConfig_addParam__SWIG_1(swigCPtr, ArConfigArg.getCPtr(arg), sectionName, (int)priority, displayHint);
    if (AriaCSPINVOKE.SWIGPendingException.Pending) throw AriaCSPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public bool addParam(ArConfigArg arg, string sectionName, ArPriority.Priority priority) {
    bool ret = AriaCSPINVOKE.ArConfig_addParam__SWIG_2(swigCPtr, ArConfigArg.getCPtr(arg), sectionName, (int)priority);
    if (AriaCSPINVOKE.SWIGPendingException.Pending) throw AriaCSPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public bool addParam(ArConfigArg arg, string sectionName) {
    bool ret = AriaCSPINVOKE.ArConfig_addParam__SWIG_3(swigCPtr, ArConfigArg.getCPtr(arg), sectionName);
    if (AriaCSPINVOKE.SWIGPendingException.Pending) throw AriaCSPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public bool addParam(ArConfigArg arg) {
    bool ret = AriaCSPINVOKE.ArConfig_addParam__SWIG_4(swigCPtr, ArConfigArg.getCPtr(arg));
    if (AriaCSPINVOKE.SWIGPendingException.Pending) throw AriaCSPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public bool addComment(string comment, string sectionName, ArPriority.Priority priority) {
    bool ret = AriaCSPINVOKE.ArConfig_addComment__SWIG_0(swigCPtr, comment, sectionName, (int)priority);
    return ret;
  }

  public bool addComment(string comment, string sectionName) {
    bool ret = AriaCSPINVOKE.ArConfig_addComment__SWIG_1(swigCPtr, comment, sectionName);
    return ret;
  }

  public bool addComment(string comment) {
    bool ret = AriaCSPINVOKE.ArConfig_addComment__SWIG_2(swigCPtr, comment);
    return ret;
  }

  public bool addParamAsIs(ArConfigArg arg, string sectionName) {
    bool ret = AriaCSPINVOKE.ArConfig_addParamAsIs__SWIG_0(swigCPtr, ArConfigArg.getCPtr(arg), sectionName);
    if (AriaCSPINVOKE.SWIGPendingException.Pending) throw AriaCSPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public bool addParamAsIs(ArConfigArg arg) {
    bool ret = AriaCSPINVOKE.ArConfig_addParamAsIs__SWIG_1(swigCPtr, ArConfigArg.getCPtr(arg));
    if (AriaCSPINVOKE.SWIGPendingException.Pending) throw AriaCSPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public void setSectionComment(string sectionName, string comment) {
    AriaCSPINVOKE.ArConfig_setSectionComment(swigCPtr, sectionName, comment);
  }

  public void useArgumentParser(ArArgumentParser parser) {
    AriaCSPINVOKE.ArConfig_useArgumentParser(swigCPtr, ArArgumentParser.getCPtr(parser));
  }

  public virtual bool processFile() {
    bool ret = AriaCSPINVOKE.ArConfig_processFile(swigCPtr);
    return ret;
  }

  public void addProcessFileCB(ArRetFunctor_Bool functor, int priority) {
    AriaCSPINVOKE.ArConfig_addProcessFileCB__SWIG_0(swigCPtr, ArRetFunctor_Bool.getCPtr(functor), priority);
  }

  public void addProcessFileCB(ArRetFunctor_Bool functor) {
    AriaCSPINVOKE.ArConfig_addProcessFileCB__SWIG_1(swigCPtr, ArRetFunctor_Bool.getCPtr(functor));
  }

  public void addProcessFileCB(SWIGTYPE_p_ArRetFunctor2T_bool_char_p_size_t_t functor, int priority) {
    AriaCSPINVOKE.ArConfig_addProcessFileCB__SWIG_2(swigCPtr, SWIGTYPE_p_ArRetFunctor2T_bool_char_p_size_t_t.getCPtr(functor), priority);
  }

  public void addProcessFileCB(SWIGTYPE_p_ArRetFunctor2T_bool_char_p_size_t_t functor) {
    AriaCSPINVOKE.ArConfig_addProcessFileCB__SWIG_3(swigCPtr, SWIGTYPE_p_ArRetFunctor2T_bool_char_p_size_t_t.getCPtr(functor));
  }

  public void addProcessFileWithErrorCB(SWIGTYPE_p_ArRetFunctor2T_bool_char_p_size_t_t functor, int priority) {
    AriaCSPINVOKE.ArConfig_addProcessFileWithErrorCB__SWIG_0(swigCPtr, SWIGTYPE_p_ArRetFunctor2T_bool_char_p_size_t_t.getCPtr(functor), priority);
  }

  public void addProcessFileWithErrorCB(SWIGTYPE_p_ArRetFunctor2T_bool_char_p_size_t_t functor) {
    AriaCSPINVOKE.ArConfig_addProcessFileWithErrorCB__SWIG_1(swigCPtr, SWIGTYPE_p_ArRetFunctor2T_bool_char_p_size_t_t.getCPtr(functor));
  }

  public void remProcessFileCB(ArRetFunctor_Bool functor) {
    AriaCSPINVOKE.ArConfig_remProcessFileCB__SWIG_0(swigCPtr, ArRetFunctor_Bool.getCPtr(functor));
  }

  public void remProcessFileCB(SWIGTYPE_p_ArRetFunctor2T_bool_char_p_size_t_t functor) {
    AriaCSPINVOKE.ArConfig_remProcessFileCB__SWIG_1(swigCPtr, SWIGTYPE_p_ArRetFunctor2T_bool_char_p_size_t_t.getCPtr(functor));
  }

  public bool callProcessFileCallBacks(bool continueOnError, string errorBuffer, uint errorBufferLen) {
    bool ret = AriaCSPINVOKE.ArConfig_callProcessFileCallBacks__SWIG_0(swigCPtr, continueOnError, errorBuffer, errorBufferLen);
    return ret;
  }

  public bool callProcessFileCallBacks(bool continueOnError, string errorBuffer) {
    bool ret = AriaCSPINVOKE.ArConfig_callProcessFileCallBacks__SWIG_1(swigCPtr, continueOnError, errorBuffer);
    return ret;
  }

  public bool callProcessFileCallBacks(bool continueOnError) {
    bool ret = AriaCSPINVOKE.ArConfig_callProcessFileCallBacks__SWIG_2(swigCPtr, continueOnError);
    return ret;
  }

  public bool parseArgument(ArArgumentBuilder arg, string errorBuffer, uint errorBufferLen) {
    bool ret = AriaCSPINVOKE.ArConfig_parseArgument__SWIG_0(swigCPtr, ArArgumentBuilder.getCPtr(arg), errorBuffer, errorBufferLen);
    return ret;
  }

  public bool parseArgument(ArArgumentBuilder arg, string errorBuffer) {
    bool ret = AriaCSPINVOKE.ArConfig_parseArgument__SWIG_1(swigCPtr, ArArgumentBuilder.getCPtr(arg), errorBuffer);
    return ret;
  }

  public bool parseArgument(ArArgumentBuilder arg) {
    bool ret = AriaCSPINVOKE.ArConfig_parseArgument__SWIG_2(swigCPtr, ArArgumentBuilder.getCPtr(arg));
    return ret;
  }

  public bool parseVersion(ArArgumentBuilder arg, string errorBuffer, uint errorBufferLen) {
    bool ret = AriaCSPINVOKE.ArConfig_parseVersion__SWIG_0(swigCPtr, ArArgumentBuilder.getCPtr(arg), errorBuffer, errorBufferLen);
    return ret;
  }

  public bool parseVersion(ArArgumentBuilder arg, string errorBuffer) {
    bool ret = AriaCSPINVOKE.ArConfig_parseVersion__SWIG_1(swigCPtr, ArArgumentBuilder.getCPtr(arg), errorBuffer);
    return ret;
  }

  public bool parseVersion(ArArgumentBuilder arg) {
    bool ret = AriaCSPINVOKE.ArConfig_parseVersion__SWIG_2(swigCPtr, ArArgumentBuilder.getCPtr(arg));
    return ret;
  }

  public bool parseSection(ArArgumentBuilder arg, string errorBuffer, uint errorBufferLen) {
    bool ret = AriaCSPINVOKE.ArConfig_parseSection__SWIG_0(swigCPtr, ArArgumentBuilder.getCPtr(arg), errorBuffer, errorBufferLen);
    return ret;
  }

  public bool parseSection(ArArgumentBuilder arg, string errorBuffer) {
    bool ret = AriaCSPINVOKE.ArConfig_parseSection__SWIG_1(swigCPtr, ArArgumentBuilder.getCPtr(arg), errorBuffer);
    return ret;
  }

  public bool parseSection(ArArgumentBuilder arg) {
    bool ret = AriaCSPINVOKE.ArConfig_parseSection__SWIG_2(swigCPtr, ArArgumentBuilder.getCPtr(arg));
    return ret;
  }

  public bool parseListBegin(ArArgumentBuilder arg, string errorBuffer, uint errorBufferLen) {
    bool ret = AriaCSPINVOKE.ArConfig_parseListBegin(swigCPtr, ArArgumentBuilder.getCPtr(arg), errorBuffer, errorBufferLen);
    return ret;
  }

  public bool parseListEnd(ArArgumentBuilder arg, string errorBuffer, uint errorBufferLen) {
    bool ret = AriaCSPINVOKE.ArConfig_parseListEnd(swigCPtr, ArArgumentBuilder.getCPtr(arg), errorBuffer, errorBufferLen);
    return ret;
  }

  public bool parseUnknown(ArArgumentBuilder arg, string errorBuffer, uint errorBufferLen) {
    bool ret = AriaCSPINVOKE.ArConfig_parseUnknown__SWIG_0(swigCPtr, ArArgumentBuilder.getCPtr(arg), errorBuffer, errorBufferLen);
    return ret;
  }

  public bool parseUnknown(ArArgumentBuilder arg, string errorBuffer) {
    bool ret = AriaCSPINVOKE.ArConfig_parseUnknown__SWIG_1(swigCPtr, ArArgumentBuilder.getCPtr(arg), errorBuffer);
    return ret;
  }

  public bool parseUnknown(ArArgumentBuilder arg) {
    bool ret = AriaCSPINVOKE.ArConfig_parseUnknown__SWIG_2(swigCPtr, ArArgumentBuilder.getCPtr(arg));
    return ret;
  }

  public ArConfigArg.RestartLevel getRestartLevelNeeded() {
    ArConfigArg.RestartLevel ret = (ArConfigArg.RestartLevel)AriaCSPINVOKE.ArConfig_getRestartLevelNeeded(swigCPtr);
    return ret;
  }

  public void resetRestartLevelNeeded() {
    AriaCSPINVOKE.ArConfig_resetRestartLevelNeeded(swigCPtr);
  }

  public string getBaseDirectory() {
    string ret = AriaCSPINVOKE.ArConfig_getBaseDirectory(swigCPtr);
    return ret;
  }

  public void setBaseDirectory(string baseDirectory) {
    AriaCSPINVOKE.ArConfig_setBaseDirectory(swigCPtr, baseDirectory);
  }

  public string getFileName() {
    string ret = AriaCSPINVOKE.ArConfig_getFileName(swigCPtr);
    return ret;
  }

  public void setNoBlanksBetweenParams(bool noBlanksBetweenParams) {
    AriaCSPINVOKE.ArConfig_setNoBlanksBetweenParams(swigCPtr, noBlanksBetweenParams);
  }

  public bool getNoBlanksBetweenParams() {
    bool ret = AriaCSPINVOKE.ArConfig_getNoBlanksBetweenParams(swigCPtr);
    return ret;
  }

  public bool parseArgumentParser(ArArgumentParser parser, bool continueOnError, string errorBuffer, uint errorBufferLen) {
    bool ret = AriaCSPINVOKE.ArConfig_parseArgumentParser__SWIG_0(swigCPtr, ArArgumentParser.getCPtr(parser), continueOnError, errorBuffer, errorBufferLen);
    return ret;
  }

  public bool parseArgumentParser(ArArgumentParser parser, bool continueOnError, string errorBuffer) {
    bool ret = AriaCSPINVOKE.ArConfig_parseArgumentParser__SWIG_1(swigCPtr, ArArgumentParser.getCPtr(parser), continueOnError, errorBuffer);
    return ret;
  }

  public bool parseArgumentParser(ArArgumentParser parser, bool continueOnError) {
    bool ret = AriaCSPINVOKE.ArConfig_parseArgumentParser__SWIG_2(swigCPtr, ArArgumentParser.getCPtr(parser), continueOnError);
    return ret;
  }

  public bool parseArgumentParser(ArArgumentParser parser) {
    bool ret = AriaCSPINVOKE.ArConfig_parseArgumentParser__SWIG_3(swigCPtr, ArArgumentParser.getCPtr(parser));
    return ret;
  }

  public SWIGTYPE_p_std__listT_std__string_t getCategoryNames() {
    SWIGTYPE_p_std__listT_std__string_t ret = new SWIGTYPE_p_std__listT_std__string_t(AriaCSPINVOKE.ArConfig_getCategoryNames(swigCPtr), true);
    return ret;
  }

  public SWIGTYPE_p_std__listT_std__string_t getSectionNamesInCategory(string categoryName) {
    SWIGTYPE_p_std__listT_std__string_t ret = new SWIGTYPE_p_std__listT_std__string_t(AriaCSPINVOKE.ArConfig_getSectionNamesInCategory(swigCPtr, categoryName), true);
    return ret;
  }

  public SWIGTYPE_p_std__listT_std__string_t getSectionNames() {
    SWIGTYPE_p_std__listT_std__string_t ret = new SWIGTYPE_p_std__listT_std__string_t(AriaCSPINVOKE.ArConfig_getSectionNames(swigCPtr), true);
    return ret;
  }

  public SWIGTYPE_p_std__listT_ArConfigSection_p_t getSections() {
    global::System.IntPtr cPtr = AriaCSPINVOKE.ArConfig_getSections(swigCPtr);
    SWIGTYPE_p_std__listT_ArConfigSection_p_t ret = (cPtr == global::System.IntPtr.Zero) ? null : new SWIGTYPE_p_std__listT_ArConfigSection_p_t(cPtr, false);
    return ret;
  }

  public ArConfigSection findSection(string sectionName) {
    global::System.IntPtr cPtr = AriaCSPINVOKE.ArConfig_findSection(swigCPtr, sectionName);
    ArConfigSection ret = (cPtr == global::System.IntPtr.Zero) ? null : new ArConfigSection(cPtr, false);
    return ret;
  }

  public void setProcessFileCallbacksLogLevel(ArLog.LogLevel level) {
    AriaCSPINVOKE.ArConfig_setProcessFileCallbacksLogLevel(swigCPtr, (int)level);
  }

  public ArLog.LogLevel getProcessFileCallbacksLogLevel() {
    ArLog.LogLevel ret = (ArLog.LogLevel)AriaCSPINVOKE.ArConfig_getProcessFileCallbacksLogLevel(swigCPtr);
    return ret;
  }

  public void setSaveUnknown(bool saveUnknown) {
    AriaCSPINVOKE.ArConfig_setSaveUnknown(swigCPtr, saveUnknown);
  }

  public bool getSaveUnknown() {
    bool ret = AriaCSPINVOKE.ArConfig_getSaveUnknown(swigCPtr);
    return ret;
  }

  public void clearSections() {
    AriaCSPINVOKE.ArConfig_clearSections(swigCPtr);
  }

  public void clearAll() {
    AriaCSPINVOKE.ArConfig_clearAll(swigCPtr);
  }

  public bool addSectionFlags(string sectionName, string flags) {
    bool ret = AriaCSPINVOKE.ArConfig_addSectionFlags(swigCPtr, sectionName, flags);
    return ret;
  }

  public bool remSectionFlag(string sectionName, string flag) {
    bool ret = AriaCSPINVOKE.ArConfig_remSectionFlag(swigCPtr, sectionName, flag);
    return ret;
  }

  public void clearAllValueSet() {
    AriaCSPINVOKE.ArConfig_clearAllValueSet(swigCPtr);
  }

  public void removeAllUnsetValues() {
    AriaCSPINVOKE.ArConfig_removeAllUnsetValues(swigCPtr);
  }

  public void removeAllUnsetSections() {
    AriaCSPINVOKE.ArConfig_removeAllUnsetSections(swigCPtr);
  }

  public void log(bool isSummary, SWIGTYPE_p_std__listT_std__string_t sectionNameList, string logPrefix) {
    AriaCSPINVOKE.ArConfig_log__SWIG_0(swigCPtr, isSummary, SWIGTYPE_p_std__listT_std__string_t.getCPtr(sectionNameList), logPrefix);
  }

  public void log(bool isSummary, SWIGTYPE_p_std__listT_std__string_t sectionNameList) {
    AriaCSPINVOKE.ArConfig_log__SWIG_1(swigCPtr, isSummary, SWIGTYPE_p_std__listT_std__string_t.getCPtr(sectionNameList));
  }

  public void log(bool isSummary) {
    AriaCSPINVOKE.ArConfig_log__SWIG_2(swigCPtr, isSummary);
  }

  public void log() {
    AriaCSPINVOKE.ArConfig_log__SWIG_3(swigCPtr);
  }

  public void setPermissions(bool allowFactory, bool rememberUnknowns) {
    AriaCSPINVOKE.ArConfig_setPermissions__SWIG_0(swigCPtr, allowFactory, rememberUnknowns);
  }

  public void setPermissions(bool allowFactory) {
    AriaCSPINVOKE.ArConfig_setPermissions__SWIG_1(swigCPtr, allowFactory);
  }

  public void setPermissions() {
    AriaCSPINVOKE.ArConfig_setPermissions__SWIG_2(swigCPtr);
  }

  public void addSectionNotToParse(string section) {
    AriaCSPINVOKE.ArConfig_addSectionNotToParse(swigCPtr, section);
  }

  public void remSectionNotToParse(string section) {
    AriaCSPINVOKE.ArConfig_remSectionNotToParse(swigCPtr, section);
  }

  public void addListNamesToParser(ArConfigArg parent) {
    AriaCSPINVOKE.ArConfig_addListNamesToParser(swigCPtr, ArConfigArg.getCPtr(parent));
    if (AriaCSPINVOKE.SWIGPendingException.Pending) throw AriaCSPINVOKE.SWIGPendingException.Retrieve();
  }

}

}
