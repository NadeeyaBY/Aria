//------------------------------------------------------------------------------
// <auto-generated />
//
// This file was automatically generated by SWIG (http://www.swig.org).
// Version 3.0.8
//
// Do not make changes to this file unless you know what you are doing--modify
// the SWIG interface file instead.
//------------------------------------------------------------------------------

namespace AriaCS {

public class ArForbiddenRangeDevice : ArRangeDevice {
  private global::System.Runtime.InteropServices.HandleRef swigCPtr;

  public ArForbiddenRangeDevice(global::System.IntPtr cPtr, bool cMemoryOwn) : base(AriaCSPINVOKE.ArForbiddenRangeDevice_SWIGUpcast(cPtr), cMemoryOwn) {
    swigCPtr = new global::System.Runtime.InteropServices.HandleRef(this, cPtr);
  }

  public static global::System.Runtime.InteropServices.HandleRef getCPtr(ArForbiddenRangeDevice obj) {
    return (obj == null) ? new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero) : obj.swigCPtr;
  }

  ~ArForbiddenRangeDevice() {
    Dispose();
  }

  public override void Dispose() {
    lock(this) {
      if (swigCPtr.Handle != global::System.IntPtr.Zero) {
        if (swigCMemOwn) {
          swigCMemOwn = false;
          AriaCSPINVOKE.delete_ArForbiddenRangeDevice(swigCPtr);
        }
        swigCPtr = new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero);
      }
      global::System.GC.SuppressFinalize(this);
      base.Dispose();
    }
  }

  public ArForbiddenRangeDevice(ArMapInterface armap, double distanceIncrement, uint maxRange, string name) : this(AriaCSPINVOKE.new_ArForbiddenRangeDevice__SWIG_0(ArMapInterface.getCPtr(armap), distanceIncrement, maxRange, name), true) {
  }

  public ArForbiddenRangeDevice(ArMapInterface armap, double distanceIncrement, uint maxRange) : this(AriaCSPINVOKE.new_ArForbiddenRangeDevice__SWIG_1(ArMapInterface.getCPtr(armap), distanceIncrement, maxRange), true) {
  }

  public ArForbiddenRangeDevice(ArMapInterface armap, double distanceIncrement) : this(AriaCSPINVOKE.new_ArForbiddenRangeDevice__SWIG_2(ArMapInterface.getCPtr(armap), distanceIncrement), true) {
  }

  public ArForbiddenRangeDevice(ArMapInterface armap) : this(AriaCSPINVOKE.new_ArForbiddenRangeDevice__SWIG_3(ArMapInterface.getCPtr(armap)), true) {
  }

  public void processMap() {
    AriaCSPINVOKE.ArForbiddenRangeDevice_processMap(swigCPtr);
  }

  public void processReadings() {
    AriaCSPINVOKE.ArForbiddenRangeDevice_processReadings(swigCPtr);
  }

  public override void setRobot(ArRobot robot) {
    AriaCSPINVOKE.ArForbiddenRangeDevice_setRobot(swigCPtr, ArRobot.getCPtr(robot));
  }

  public void enable() {
    AriaCSPINVOKE.ArForbiddenRangeDevice_enable(swigCPtr);
  }

  public void disable() {
    AriaCSPINVOKE.ArForbiddenRangeDevice_disable(swigCPtr);
  }

  public bool isEnabled() {
    bool ret = AriaCSPINVOKE.ArForbiddenRangeDevice_isEnabled(swigCPtr);
    return ret;
  }

  public ArFunctor getEnableCB() {
    global::System.IntPtr cPtr = AriaCSPINVOKE.ArForbiddenRangeDevice_getEnableCB(swigCPtr);
    ArFunctor ret = (cPtr == global::System.IntPtr.Zero) ? null : new ArFunctor(cPtr, false);
    return ret;
  }

  public ArFunctor getDisableCB() {
    global::System.IntPtr cPtr = AriaCSPINVOKE.ArForbiddenRangeDevice_getDisableCB(swigCPtr);
    ArFunctor ret = (cPtr == global::System.IntPtr.Zero) ? null : new ArFunctor(cPtr, false);
    return ret;
  }

}

}
