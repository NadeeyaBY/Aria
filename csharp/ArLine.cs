//------------------------------------------------------------------------------
// <auto-generated />
//
// This file was automatically generated by SWIG (http://www.swig.org).
// Version 3.0.8
//
// Do not make changes to this file unless you know what you are doing--modify
// the SWIG interface file instead.
//------------------------------------------------------------------------------

namespace AriaCS {

public class ArLine : global::System.IDisposable {
  private global::System.Runtime.InteropServices.HandleRef swigCPtr;
  protected bool swigCMemOwn;

  public ArLine(global::System.IntPtr cPtr, bool cMemoryOwn) {
    swigCMemOwn = cMemoryOwn;
    swigCPtr = new global::System.Runtime.InteropServices.HandleRef(this, cPtr);
  }

  public static global::System.Runtime.InteropServices.HandleRef getCPtr(ArLine obj) {
    return (obj == null) ? new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero) : obj.swigCPtr;
  }

  ~ArLine() {
    Dispose();
  }

  public virtual void Dispose() {
    lock(this) {
      if (swigCPtr.Handle != global::System.IntPtr.Zero) {
        if (swigCMemOwn) {
          swigCMemOwn = false;
          AriaCSPINVOKE.delete_ArLine(swigCPtr);
        }
        swigCPtr = new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero);
      }
      global::System.GC.SuppressFinalize(this);
    }
  }

  public ArLine() : this(AriaCSPINVOKE.new_ArLine__SWIG_0(), true) {
  }

  public ArLine(double a, double b, double c) : this(AriaCSPINVOKE.new_ArLine__SWIG_1(a, b, c), true) {
  }

  public ArLine(double x1, double y1, double x2, double y2) : this(AriaCSPINVOKE.new_ArLine__SWIG_2(x1, y1, x2, y2), true) {
  }

  public void newParameters(double a, double b, double c) {
    AriaCSPINVOKE.ArLine_newParameters(swigCPtr, a, b, c);
  }

  public void newParametersFromEndpoints(double x1, double y1, double x2, double y2) {
    AriaCSPINVOKE.ArLine_newParametersFromEndpoints(swigCPtr, x1, y1, x2, y2);
  }

  public double getA() {
    double ret = AriaCSPINVOKE.ArLine_getA(swigCPtr);
    return ret;
  }

  public double getB() {
    double ret = AriaCSPINVOKE.ArLine_getB(swigCPtr);
    return ret;
  }

  public double getC() {
    double ret = AriaCSPINVOKE.ArLine_getC(swigCPtr);
    return ret;
  }

  public bool intersects(ArLine line, ArPose pose) {
    bool ret = AriaCSPINVOKE.ArLine_intersects(swigCPtr, ArLine.getCPtr(line), ArPose.getCPtr(pose));
    return ret;
  }

  public void makeLinePerp(ArPose pose, ArLine line) {
    AriaCSPINVOKE.ArLine_makeLinePerp(swigCPtr, ArPose.getCPtr(pose), ArLine.getCPtr(line));
  }

  public virtual double getPerpDist(ArPose pose) {
    double ret = AriaCSPINVOKE.ArLine_getPerpDist(swigCPtr, ArPose.getCPtr(pose));
    if (AriaCSPINVOKE.SWIGPendingException.Pending) throw AriaCSPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public virtual double getPerpSquaredDist(ArPose pose) {
    double ret = AriaCSPINVOKE.ArLine_getPerpSquaredDist(swigCPtr, ArPose.getCPtr(pose));
    if (AriaCSPINVOKE.SWIGPendingException.Pending) throw AriaCSPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public bool getPerpPoint(ArPose pose, ArPose perpPoint) {
    bool ret = AriaCSPINVOKE.ArLine_getPerpPoint(swigCPtr, ArPose.getCPtr(pose), ArPose.getCPtr(perpPoint));
    if (AriaCSPINVOKE.SWIGPendingException.Pending) throw AriaCSPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

}

}
