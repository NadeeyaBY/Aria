//------------------------------------------------------------------------------
// <auto-generated />
//
// This file was automatically generated by SWIG (http://www.swig.org).
// Version 3.0.8
//
// Do not make changes to this file unless you know what you are doing--modify
// the SWIG interface file instead.
//------------------------------------------------------------------------------

namespace AriaCS {

public class ArActionGotoStraight : ArAction {
  private global::System.Runtime.InteropServices.HandleRef swigCPtr;

  public ArActionGotoStraight(global::System.IntPtr cPtr, bool cMemoryOwn) : base(AriaCSPINVOKE.ArActionGotoStraight_SWIGUpcast(cPtr), cMemoryOwn) {
    swigCPtr = new global::System.Runtime.InteropServices.HandleRef(this, cPtr);
  }

  public static global::System.Runtime.InteropServices.HandleRef getCPtr(ArActionGotoStraight obj) {
    return (obj == null) ? new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero) : obj.swigCPtr;
  }

  ~ArActionGotoStraight() {
    Dispose();
  }

  public override void Dispose() {
    lock(this) {
      if (swigCPtr.Handle != global::System.IntPtr.Zero) {
        if (swigCMemOwn) {
          swigCMemOwn = false;
          AriaCSPINVOKE.delete_ArActionGotoStraight(swigCPtr);
        }
        swigCPtr = new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero);
      }
      global::System.GC.SuppressFinalize(this);
      base.Dispose();
    }
  }

  public ArActionGotoStraight(string name, double speed) : this(AriaCSPINVOKE.new_ArActionGotoStraight__SWIG_0(name, speed), true) {
  }

  public ArActionGotoStraight(string name) : this(AriaCSPINVOKE.new_ArActionGotoStraight__SWIG_1(name), true) {
  }

  public ArActionGotoStraight() : this(AriaCSPINVOKE.new_ArActionGotoStraight__SWIG_2(), true) {
  }

  public bool haveAchievedGoal() {
    bool ret = AriaCSPINVOKE.ArActionGotoStraight_haveAchievedGoal(swigCPtr);
    return ret;
  }

  public void cancelGoal() {
    AriaCSPINVOKE.ArActionGotoStraight_cancelGoal(swigCPtr);
  }

  public void setGoal(ArPose goal, bool backwards, bool justDistance) {
    AriaCSPINVOKE.ArActionGotoStraight_setGoal__SWIG_0(swigCPtr, ArPose.getCPtr(goal), backwards, justDistance);
    if (AriaCSPINVOKE.SWIGPendingException.Pending) throw AriaCSPINVOKE.SWIGPendingException.Retrieve();
  }

  public void setGoal(ArPose goal, bool backwards) {
    AriaCSPINVOKE.ArActionGotoStraight_setGoal__SWIG_1(swigCPtr, ArPose.getCPtr(goal), backwards);
    if (AriaCSPINVOKE.SWIGPendingException.Pending) throw AriaCSPINVOKE.SWIGPendingException.Retrieve();
  }

  public void setGoal(ArPose goal) {
    AriaCSPINVOKE.ArActionGotoStraight_setGoal__SWIG_2(swigCPtr, ArPose.getCPtr(goal));
    if (AriaCSPINVOKE.SWIGPendingException.Pending) throw AriaCSPINVOKE.SWIGPendingException.Retrieve();
  }

  public void setGoalRel(double dist, double deltaHeading, bool backwards, bool justDistance) {
    AriaCSPINVOKE.ArActionGotoStraight_setGoalRel__SWIG_0(swigCPtr, dist, deltaHeading, backwards, justDistance);
  }

  public void setGoalRel(double dist, double deltaHeading, bool backwards) {
    AriaCSPINVOKE.ArActionGotoStraight_setGoalRel__SWIG_1(swigCPtr, dist, deltaHeading, backwards);
  }

  public void setGoalRel(double dist, double deltaHeading) {
    AriaCSPINVOKE.ArActionGotoStraight_setGoalRel__SWIG_2(swigCPtr, dist, deltaHeading);
  }

  public ArPose getGoal() {
    ArPose ret = new ArPose(AriaCSPINVOKE.ArActionGotoStraight_getGoal(swigCPtr), true);
    return ret;
  }

  public bool usingEncoderGoal() {
    bool ret = AriaCSPINVOKE.ArActionGotoStraight_usingEncoderGoal(swigCPtr);
    return ret;
  }

  public void setEncoderGoal(ArPose encoderGoal, bool backwards, bool justDistance) {
    AriaCSPINVOKE.ArActionGotoStraight_setEncoderGoal__SWIG_0(swigCPtr, ArPose.getCPtr(encoderGoal), backwards, justDistance);
    if (AriaCSPINVOKE.SWIGPendingException.Pending) throw AriaCSPINVOKE.SWIGPendingException.Retrieve();
  }

  public void setEncoderGoal(ArPose encoderGoal, bool backwards) {
    AriaCSPINVOKE.ArActionGotoStraight_setEncoderGoal__SWIG_1(swigCPtr, ArPose.getCPtr(encoderGoal), backwards);
    if (AriaCSPINVOKE.SWIGPendingException.Pending) throw AriaCSPINVOKE.SWIGPendingException.Retrieve();
  }

  public void setEncoderGoal(ArPose encoderGoal) {
    AriaCSPINVOKE.ArActionGotoStraight_setEncoderGoal__SWIG_2(swigCPtr, ArPose.getCPtr(encoderGoal));
    if (AriaCSPINVOKE.SWIGPendingException.Pending) throw AriaCSPINVOKE.SWIGPendingException.Retrieve();
  }

  public void setEncoderGoalRel(double dist, double deltaHeading, bool backwards, bool justDistance) {
    AriaCSPINVOKE.ArActionGotoStraight_setEncoderGoalRel__SWIG_0(swigCPtr, dist, deltaHeading, backwards, justDistance);
  }

  public void setEncoderGoalRel(double dist, double deltaHeading, bool backwards) {
    AriaCSPINVOKE.ArActionGotoStraight_setEncoderGoalRel__SWIG_1(swigCPtr, dist, deltaHeading, backwards);
  }

  public void setEncoderGoalRel(double dist, double deltaHeading) {
    AriaCSPINVOKE.ArActionGotoStraight_setEncoderGoalRel__SWIG_2(swigCPtr, dist, deltaHeading);
  }

  public ArPose getEncoderGoal() {
    ArPose ret = new ArPose(AriaCSPINVOKE.ArActionGotoStraight_getEncoderGoal(swigCPtr), true);
    return ret;
  }

  public void setSpeed(double speed) {
    AriaCSPINVOKE.ArActionGotoStraight_setSpeed(swigCPtr, speed);
  }

  public double getSpeed() {
    double ret = AriaCSPINVOKE.ArActionGotoStraight_getSpeed(swigCPtr);
    return ret;
  }

  public void setCloseDist(double closeDist) {
    AriaCSPINVOKE.ArActionGotoStraight_setCloseDist__SWIG_0(swigCPtr, closeDist);
  }

  public void setCloseDist() {
    AriaCSPINVOKE.ArActionGotoStraight_setCloseDist__SWIG_1(swigCPtr);
  }

  public double getCloseDist() {
    double ret = AriaCSPINVOKE.ArActionGotoStraight_getCloseDist(swigCPtr);
    return ret;
  }

  public bool getBacking() {
    bool ret = AriaCSPINVOKE.ArActionGotoStraight_getBacking(swigCPtr);
    return ret;
  }

  public void setTurnThreshold(double threshAngle) {
    AriaCSPINVOKE.ArActionGotoStraight_setTurnThreshold(swigCPtr, threshAngle);
  }

  public void setTurnSpeed(double speed) {
    AriaCSPINVOKE.ArActionGotoStraight_setTurnSpeed(swigCPtr, speed);
  }

  public void setMaxRotVel(double rv) {
    AriaCSPINVOKE.ArActionGotoStraight_setMaxRotVel(swigCPtr, rv);
  }

}

}
