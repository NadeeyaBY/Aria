//------------------------------------------------------------------------------
// <auto-generated />
//
// This file was automatically generated by SWIG (http://www.swig.org).
// Version 3.0.8
//
// Do not make changes to this file unless you know what you are doing--modify
// the SWIG interface file instead.
//------------------------------------------------------------------------------

namespace AriaCS {

public class ArDrawingData : global::System.IDisposable {
  private global::System.Runtime.InteropServices.HandleRef swigCPtr;
  protected bool swigCMemOwn;

  public ArDrawingData(global::System.IntPtr cPtr, bool cMemoryOwn) {
    swigCMemOwn = cMemoryOwn;
    swigCPtr = new global::System.Runtime.InteropServices.HandleRef(this, cPtr);
  }

  public static global::System.Runtime.InteropServices.HandleRef getCPtr(ArDrawingData obj) {
    return (obj == null) ? new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero) : obj.swigCPtr;
  }

  ~ArDrawingData() {
    Dispose();
  }

  public virtual void Dispose() {
    lock(this) {
      if (swigCPtr.Handle != global::System.IntPtr.Zero) {
        if (swigCMemOwn) {
          swigCMemOwn = false;
          AriaCSPINVOKE.delete_ArDrawingData(swigCPtr);
        }
        swigCPtr = new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero);
      }
      global::System.GC.SuppressFinalize(this);
    }
  }

  public ArDrawingData(string shape, ArColor primaryColor, int size, int layer, uint defaultRefreshTime, string visibility) : this(AriaCSPINVOKE.new_ArDrawingData__SWIG_0(shape, ArColor.getCPtr(primaryColor), size, layer, defaultRefreshTime, visibility), true) {
    if (AriaCSPINVOKE.SWIGPendingException.Pending) throw AriaCSPINVOKE.SWIGPendingException.Retrieve();
  }

  public ArDrawingData(string shape, ArColor primaryColor, int size, int layer, uint defaultRefreshTime) : this(AriaCSPINVOKE.new_ArDrawingData__SWIG_1(shape, ArColor.getCPtr(primaryColor), size, layer, defaultRefreshTime), true) {
    if (AriaCSPINVOKE.SWIGPendingException.Pending) throw AriaCSPINVOKE.SWIGPendingException.Retrieve();
  }

  public ArDrawingData(string shape, ArColor primaryColor, int size, int layer) : this(AriaCSPINVOKE.new_ArDrawingData__SWIG_2(shape, ArColor.getCPtr(primaryColor), size, layer), true) {
    if (AriaCSPINVOKE.SWIGPendingException.Pending) throw AriaCSPINVOKE.SWIGPendingException.Retrieve();
  }

  public ArDrawingData(string shape, ArColor primaryColor, int size, int layer, uint defaultRefreshTime, ArColor secondaryColor, string visibility) : this(AriaCSPINVOKE.new_ArDrawingData__SWIG_3(shape, ArColor.getCPtr(primaryColor), size, layer, defaultRefreshTime, ArColor.getCPtr(secondaryColor), visibility), true) {
    if (AriaCSPINVOKE.SWIGPendingException.Pending) throw AriaCSPINVOKE.SWIGPendingException.Retrieve();
  }

  public ArDrawingData(string shape, ArColor primaryColor, int size, int layer, uint defaultRefreshTime, ArColor secondaryColor) : this(AriaCSPINVOKE.new_ArDrawingData__SWIG_4(shape, ArColor.getCPtr(primaryColor), size, layer, defaultRefreshTime, ArColor.getCPtr(secondaryColor)), true) {
    if (AriaCSPINVOKE.SWIGPendingException.Pending) throw AriaCSPINVOKE.SWIGPendingException.Retrieve();
  }

  public string getShape() {
    string ret = AriaCSPINVOKE.ArDrawingData_getShape(swigCPtr);
    return ret;
  }

  public ArColor getPrimaryColor() {
    ArColor ret = new ArColor(AriaCSPINVOKE.ArDrawingData_getPrimaryColor(swigCPtr), true);
    return ret;
  }

  public int getSize() {
    int ret = AriaCSPINVOKE.ArDrawingData_getSize(swigCPtr);
    return ret;
  }

  public int getLayer() {
    int ret = AriaCSPINVOKE.ArDrawingData_getLayer(swigCPtr);
    return ret;
  }

  public uint getDefaultRefreshTime() {
    uint ret = AriaCSPINVOKE.ArDrawingData_getDefaultRefreshTime(swigCPtr);
    return ret;
  }

  public ArColor getSecondaryColor() {
    ArColor ret = new ArColor(AriaCSPINVOKE.ArDrawingData_getSecondaryColor(swigCPtr), true);
    return ret;
  }

  public string getVisibility() {
    string ret = AriaCSPINVOKE.ArDrawingData_getVisibility(swigCPtr);
    return ret;
  }

  public void setShape(string shape) {
    AriaCSPINVOKE.ArDrawingData_setShape(swigCPtr, shape);
  }

  public void setPrimaryColor(ArColor color) {
    AriaCSPINVOKE.ArDrawingData_setPrimaryColor(swigCPtr, ArColor.getCPtr(color));
    if (AriaCSPINVOKE.SWIGPendingException.Pending) throw AriaCSPINVOKE.SWIGPendingException.Retrieve();
  }

  public void setSize(int size) {
    AriaCSPINVOKE.ArDrawingData_setSize(swigCPtr, size);
  }

  public void setLayer(int layer) {
    AriaCSPINVOKE.ArDrawingData_setLayer(swigCPtr, layer);
  }

  public void setDefaultRefreshTime(uint refreshTime) {
    AriaCSPINVOKE.ArDrawingData_setDefaultRefreshTime(swigCPtr, refreshTime);
  }

  public void setSecondaryColor(ArColor color) {
    AriaCSPINVOKE.ArDrawingData_setSecondaryColor(swigCPtr, ArColor.getCPtr(color));
    if (AriaCSPINVOKE.SWIGPendingException.Pending) throw AriaCSPINVOKE.SWIGPendingException.Retrieve();
  }

  public void setVisibility(string visibility) {
    AriaCSPINVOKE.ArDrawingData_setVisibility(swigCPtr, visibility);
  }

  public static readonly int DEFAULT_REFRESH_TIME = AriaCSPINVOKE.ArDrawingData_DEFAULT_REFRESH_TIME_get();

}

}
