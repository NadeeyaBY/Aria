//------------------------------------------------------------------------------
// <auto-generated />
//
// This file was automatically generated by SWIG (http://www.swig.org).
// Version 3.0.8
//
// Do not make changes to this file unless you know what you are doing--modify
// the SWIG interface file instead.
//------------------------------------------------------------------------------

namespace AriaCS {

public class ArRangeBuffer : global::System.IDisposable {
  private global::System.Runtime.InteropServices.HandleRef swigCPtr;
  protected bool swigCMemOwn;

  public ArRangeBuffer(global::System.IntPtr cPtr, bool cMemoryOwn) {
    swigCMemOwn = cMemoryOwn;
    swigCPtr = new global::System.Runtime.InteropServices.HandleRef(this, cPtr);
  }

  public static global::System.Runtime.InteropServices.HandleRef getCPtr(ArRangeBuffer obj) {
    return (obj == null) ? new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero) : obj.swigCPtr;
  }

  ~ArRangeBuffer() {
    Dispose();
  }

  public virtual void Dispose() {
    lock(this) {
      if (swigCPtr.Handle != global::System.IntPtr.Zero) {
        if (swigCMemOwn) {
          swigCMemOwn = false;
          AriaCSPINVOKE.delete_ArRangeBuffer(swigCPtr);
        }
        swigCPtr = new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero);
      }
      global::System.GC.SuppressFinalize(this);
    }
  }

  public ArRangeBuffer(int size) : this(AriaCSPINVOKE.new_ArRangeBuffer(size), true) {
  }

  public uint getSize() {
    uint ret = AriaCSPINVOKE.ArRangeBuffer_getSize(swigCPtr);
    return ret;
  }

  public void setSize(uint size) {
    AriaCSPINVOKE.ArRangeBuffer_setSize(swigCPtr, size);
  }

  public ArPose getPoseTaken() {
    ArPose ret = new ArPose(AriaCSPINVOKE.ArRangeBuffer_getPoseTaken(swigCPtr), true);
    return ret;
  }

  public void setPoseTaken(ArPose p) {
    AriaCSPINVOKE.ArRangeBuffer_setPoseTaken(swigCPtr, ArPose.getCPtr(p));
    if (AriaCSPINVOKE.SWIGPendingException.Pending) throw AriaCSPINVOKE.SWIGPendingException.Retrieve();
  }

  public ArPose getEncoderPoseTaken() {
    ArPose ret = new ArPose(AriaCSPINVOKE.ArRangeBuffer_getEncoderPoseTaken(swigCPtr), true);
    return ret;
  }

  public void setEncoderPoseTaken(ArPose p) {
    AriaCSPINVOKE.ArRangeBuffer_setEncoderPoseTaken(swigCPtr, ArPose.getCPtr(p));
    if (AriaCSPINVOKE.SWIGPendingException.Pending) throw AriaCSPINVOKE.SWIGPendingException.Retrieve();
  }

  public void addReading(double x, double y) {
    AriaCSPINVOKE.ArRangeBuffer_addReading(swigCPtr, x, y);
  }

  public void addReadingConditional(double x, double y, double closeDistSquared, SWIGTYPE_p_bool wasAdded) {
    AriaCSPINVOKE.ArRangeBuffer_addReadingConditional__SWIG_0(swigCPtr, x, y, closeDistSquared, SWIGTYPE_p_bool.getCPtr(wasAdded));
  }

  public void addReadingConditional(double x, double y, double closeDistSquared) {
    AriaCSPINVOKE.ArRangeBuffer_addReadingConditional__SWIG_1(swigCPtr, x, y, closeDistSquared);
  }

  public SWIGTYPE_p_std__listT_ArPoseWithTime_p_t getBuffer() {
    global::System.IntPtr cPtr = AriaCSPINVOKE.ArRangeBuffer_getBuffer(swigCPtr);
    SWIGTYPE_p_std__listT_ArPoseWithTime_p_t ret = (cPtr == global::System.IntPtr.Zero) ? null : new SWIGTYPE_p_std__listT_ArPoseWithTime_p_t(cPtr, false);
    return ret;
  }

  public double getClosestPolar(double startAngle, double endAngle, ArPose position, uint maxRange, SWIGTYPE_p_double angle) {
    double ret = AriaCSPINVOKE.ArRangeBuffer_getClosestPolar__SWIG_0(swigCPtr, startAngle, endAngle, ArPose.getCPtr(position), maxRange, SWIGTYPE_p_double.getCPtr(angle));
    if (AriaCSPINVOKE.SWIGPendingException.Pending) throw AriaCSPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public double getClosestPolar(double startAngle, double endAngle, ArPose position, uint maxRange) {
    double ret = AriaCSPINVOKE.ArRangeBuffer_getClosestPolar__SWIG_1(swigCPtr, startAngle, endAngle, ArPose.getCPtr(position), maxRange);
    if (AriaCSPINVOKE.SWIGPendingException.Pending) throw AriaCSPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public double getClosestBox(double x1, double y1, double x2, double y2, ArPose position, uint maxRange, ArPose readingPos, ArPose targetPose) {
    double ret = AriaCSPINVOKE.ArRangeBuffer_getClosestBox__SWIG_0(swigCPtr, x1, y1, x2, y2, ArPose.getCPtr(position), maxRange, ArPose.getCPtr(readingPos), ArPose.getCPtr(targetPose));
    if (AriaCSPINVOKE.SWIGPendingException.Pending) throw AriaCSPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public double getClosestBox(double x1, double y1, double x2, double y2, ArPose position, uint maxRange, ArPose readingPos) {
    double ret = AriaCSPINVOKE.ArRangeBuffer_getClosestBox__SWIG_1(swigCPtr, x1, y1, x2, y2, ArPose.getCPtr(position), maxRange, ArPose.getCPtr(readingPos));
    if (AriaCSPINVOKE.SWIGPendingException.Pending) throw AriaCSPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public double getClosestBox(double x1, double y1, double x2, double y2, ArPose position, uint maxRange) {
    double ret = AriaCSPINVOKE.ArRangeBuffer_getClosestBox__SWIG_2(swigCPtr, x1, y1, x2, y2, ArPose.getCPtr(position), maxRange);
    if (AriaCSPINVOKE.SWIGPendingException.Pending) throw AriaCSPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public void applyTransform(ArTransform trans) {
    AriaCSPINVOKE.ArRangeBuffer_applyTransform(swigCPtr, ArTransform.getCPtr(trans));
    if (AriaCSPINVOKE.SWIGPendingException.Pending) throw AriaCSPINVOKE.SWIGPendingException.Retrieve();
  }

  public void clear() {
    AriaCSPINVOKE.ArRangeBuffer_clear(swigCPtr);
  }

  public void clearOlderThan(int milliSeconds) {
    AriaCSPINVOKE.ArRangeBuffer_clearOlderThan(swigCPtr, milliSeconds);
  }

  public void clearOlderThanSeconds(int seconds) {
    AriaCSPINVOKE.ArRangeBuffer_clearOlderThanSeconds(swigCPtr, seconds);
  }

  public void reset() {
    AriaCSPINVOKE.ArRangeBuffer_reset(swigCPtr);
  }

  public void beginRedoBuffer() {
    AriaCSPINVOKE.ArRangeBuffer_beginRedoBuffer(swigCPtr);
  }

  public void redoReading(double x, double y) {
    AriaCSPINVOKE.ArRangeBuffer_redoReading(swigCPtr, x, y);
  }

  public void endRedoBuffer() {
    AriaCSPINVOKE.ArRangeBuffer_endRedoBuffer(swigCPtr);
  }

  public ArPoseWithTimeVector getBufferAsVector() {
    global::System.IntPtr cPtr = AriaCSPINVOKE.ArRangeBuffer_getBufferAsVector(swigCPtr);
    ArPoseWithTimeVector ret = (cPtr == global::System.IntPtr.Zero) ? null : new ArPoseWithTimeVector(cPtr, false);
    return ret;
  }

  public static double getClosestPolarInList(double startAngle, double endAngle, ArPose position, uint maxRange, SWIGTYPE_p_double angle, SWIGTYPE_p_std__listT_ArPoseWithTime_p_t buffer) {
    double ret = AriaCSPINVOKE.ArRangeBuffer_getClosestPolarInList(startAngle, endAngle, ArPose.getCPtr(position), maxRange, SWIGTYPE_p_double.getCPtr(angle), SWIGTYPE_p_std__listT_ArPoseWithTime_p_t.getCPtr(buffer));
    if (AriaCSPINVOKE.SWIGPendingException.Pending) throw AriaCSPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static double getClosestBoxInList(double x1, double y1, double x2, double y2, ArPose position, uint maxRange, ArPose readingPos, ArPose targetPose, SWIGTYPE_p_std__listT_ArPoseWithTime_p_t buffer) {
    double ret = AriaCSPINVOKE.ArRangeBuffer_getClosestBoxInList(x1, y1, x2, y2, ArPose.getCPtr(position), maxRange, ArPose.getCPtr(readingPos), ArPose.getCPtr(targetPose), SWIGTYPE_p_std__listT_ArPoseWithTime_p_t.getCPtr(buffer));
    if (AriaCSPINVOKE.SWIGPendingException.Pending) throw AriaCSPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

}

}
