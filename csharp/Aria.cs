//------------------------------------------------------------------------------
// <auto-generated />
//
// This file was automatically generated by SWIG (http://www.swig.org).
// Version 3.0.8
//
// Do not make changes to this file unless you know what you are doing--modify
// the SWIG interface file instead.
//------------------------------------------------------------------------------

namespace AriaCS {

public class Aria : global::System.IDisposable {
  private global::System.Runtime.InteropServices.HandleRef swigCPtr;
  protected bool swigCMemOwn;

  public Aria(global::System.IntPtr cPtr, bool cMemoryOwn) {
    swigCMemOwn = cMemoryOwn;
    swigCPtr = new global::System.Runtime.InteropServices.HandleRef(this, cPtr);
  }

  public static global::System.Runtime.InteropServices.HandleRef getCPtr(Aria obj) {
    return (obj == null) ? new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero) : obj.swigCPtr;
  }

  ~Aria() {
    Dispose();
  }

  public virtual void Dispose() {
    lock(this) {
      if (swigCPtr.Handle != global::System.IntPtr.Zero) {
        if (swigCMemOwn) {
          swigCMemOwn = false;
          AriaCSPINVOKE.delete_Aria(swigCPtr);
        }
        swigCPtr = new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero);
      }
      global::System.GC.SuppressFinalize(this);
    }
  }

  public static void init(Aria.SigHandleMethod method, bool initSockets, bool sigHandleExitNotShutdown) {
    AriaCSPINVOKE.Aria_init__SWIG_0((int)method, initSockets, sigHandleExitNotShutdown);
  }

  public static void init(Aria.SigHandleMethod method, bool initSockets) {
    AriaCSPINVOKE.Aria_init__SWIG_1((int)method, initSockets);
  }

  public static void init(Aria.SigHandleMethod method) {
    AriaCSPINVOKE.Aria_init__SWIG_2((int)method);
  }

  public static void init() {
    AriaCSPINVOKE.Aria_init__SWIG_3();
  }

  public static void uninit() {
    AriaCSPINVOKE.Aria_uninit();
  }

  public static void addInitCallBack(ArFunctor cb, ArListPos.Pos position) {
    AriaCSPINVOKE.Aria_addInitCallBack(ArFunctor.getCPtr(cb), (int)position);
  }

  public static void addUninitCallBack(ArFunctor cb, ArListPos.Pos position) {
    AriaCSPINVOKE.Aria_addUninitCallBack(ArFunctor.getCPtr(cb), (int)position);
  }

  public static void shutdown() {
    AriaCSPINVOKE.Aria_shutdown();
  }

  public static void exit(int exitCode) {
    AriaCSPINVOKE.Aria_exit__SWIG_0(exitCode);
  }

  public static void exit() {
    AriaCSPINVOKE.Aria_exit__SWIG_1();
  }

  public static bool getRunning() {
    bool ret = AriaCSPINVOKE.Aria_getRunning();
    return ret;
  }

  public static void setDirectory(string directory) {
    AriaCSPINVOKE.Aria_setDirectory(directory);
  }

  public static string getDirectory() {
    string ret = AriaCSPINVOKE.Aria_getDirectory();
    return ret;
  }

  public static bool parseArgs() {
    bool ret = AriaCSPINVOKE.Aria_parseArgs();
    return ret;
  }

  public static void logOptions() {
    AriaCSPINVOKE.Aria_logOptions();
  }

  public static void setKeyHandler(ArKeyHandler keyHandler) {
    AriaCSPINVOKE.Aria_setKeyHandler(ArKeyHandler.getCPtr(keyHandler));
  }

  public static ArKeyHandler getKeyHandler() {
    global::System.IntPtr cPtr = AriaCSPINVOKE.Aria_getKeyHandler();
    ArKeyHandler ret = (cPtr == global::System.IntPtr.Zero) ? null : new ArKeyHandler(cPtr, false);
    return ret;
  }

  public static void setJoyHandler(ArJoyHandler joyHandler) {
    AriaCSPINVOKE.Aria_setJoyHandler(ArJoyHandler.getCPtr(joyHandler));
  }

  public static ArJoyHandler getJoyHandler() {
    global::System.IntPtr cPtr = AriaCSPINVOKE.Aria_getJoyHandler();
    ArJoyHandler ret = (cPtr == global::System.IntPtr.Zero) ? null : new ArJoyHandler(cPtr, false);
    return ret;
  }

  public static void addExitCallback(ArFunctor functor, int position) {
    AriaCSPINVOKE.Aria_addExitCallback__SWIG_0(ArFunctor.getCPtr(functor), position);
  }

  public static void addExitCallback(ArFunctor functor) {
    AriaCSPINVOKE.Aria_addExitCallback__SWIG_1(ArFunctor.getCPtr(functor));
  }

  public static void remExitCallback(ArFunctor functor) {
    AriaCSPINVOKE.Aria_remExitCallback(ArFunctor.getCPtr(functor));
  }

  public static void setExitCallbacksLogLevel(ArLog.LogLevel level) {
    AriaCSPINVOKE.Aria_setExitCallbacksLogLevel((int)level);
  }

  public static void exitOld(int exitCode) {
    AriaCSPINVOKE.Aria_exitOld__SWIG_0(exitCode);
  }

  public static void exitOld() {
    AriaCSPINVOKE.Aria_exitOld__SWIG_1();
  }

  public static void signalHandlerCB(int sig) {
    AriaCSPINVOKE.Aria_signalHandlerCB(sig);
  }

  public static void callExitCallbacks() {
    AriaCSPINVOKE.Aria_callExitCallbacks();
  }

  public static void addParseArgsCB(ArRetFunctor_Bool functor, int position) {
    AriaCSPINVOKE.Aria_addParseArgsCB__SWIG_0(ArRetFunctor_Bool.getCPtr(functor), position);
  }

  public static void addParseArgsCB(ArRetFunctor_Bool functor) {
    AriaCSPINVOKE.Aria_addParseArgsCB__SWIG_1(ArRetFunctor_Bool.getCPtr(functor));
  }

  public static void setParseArgLogLevel(ArLog.LogLevel level) {
    AriaCSPINVOKE.Aria_setParseArgLogLevel((int)level);
  }

  public static void addLogOptionsCB(ArFunctor functor, int position) {
    AriaCSPINVOKE.Aria_addLogOptionsCB__SWIG_0(ArFunctor.getCPtr(functor), position);
  }

  public static void addLogOptionsCB(ArFunctor functor) {
    AriaCSPINVOKE.Aria_addLogOptionsCB__SWIG_1(ArFunctor.getCPtr(functor));
  }

  public static bool deviceConnectionAddCreator(string deviceConnectionType, SWIGTYPE_p_ArRetFunctor3T_ArDeviceConnection_p_char_const_p_char_const_p_char_const_p_t creator) {
    bool ret = AriaCSPINVOKE.Aria_deviceConnectionAddCreator(deviceConnectionType, SWIGTYPE_p_ArRetFunctor3T_ArDeviceConnection_p_char_const_p_char_const_p_char_const_p_t.getCPtr(creator));
    return ret;
  }

  public static string deviceConnectionGetTypes() {
    string ret = AriaCSPINVOKE.Aria_deviceConnectionGetTypes();
    return ret;
  }

  public static string deviceConnectionGetChoices() {
    string ret = AriaCSPINVOKE.Aria_deviceConnectionGetChoices();
    return ret;
  }

  public static ArDeviceConnection deviceConnectionCreate(string deviceConnectionType, string port, string defaultInfo, string prefix) {
    global::System.IntPtr cPtr = AriaCSPINVOKE.Aria_deviceConnectionCreate__SWIG_0(deviceConnectionType, port, defaultInfo, prefix);
    ArDeviceConnection ret = (cPtr == global::System.IntPtr.Zero) ? null : new ArDeviceConnection(cPtr, false);
    return ret;
  }

  public static ArDeviceConnection deviceConnectionCreate(string deviceConnectionType, string port, string defaultInfo) {
    global::System.IntPtr cPtr = AriaCSPINVOKE.Aria_deviceConnectionCreate__SWIG_1(deviceConnectionType, port, defaultInfo);
    ArDeviceConnection ret = (cPtr == global::System.IntPtr.Zero) ? null : new ArDeviceConnection(cPtr, false);
    return ret;
  }

  public static void setRobotJoyHandler(ArRobotJoyHandler robotJoyHandler) {
    AriaCSPINVOKE.Aria_setRobotJoyHandler(ArRobotJoyHandler.getCPtr(robotJoyHandler));
  }

  public static ArRobotJoyHandler getRobotJoyHandler() {
    global::System.IntPtr cPtr = AriaCSPINVOKE.Aria_getRobotJoyHandler();
    ArRobotJoyHandler ret = (cPtr == global::System.IntPtr.Zero) ? null : new ArRobotJoyHandler(cPtr, false);
    return ret;
  }

  public static ArConfig getConfig() {
    global::System.IntPtr cPtr = AriaCSPINVOKE.Aria_getConfig();
    ArConfig ret = (cPtr == global::System.IntPtr.Zero) ? null : new ArConfig(cPtr, false);
    return ret;
  }

  public static ArStringInfoGroup getInfoGroup() {
    global::System.IntPtr cPtr = AriaCSPINVOKE.Aria_getInfoGroup();
    ArStringInfoGroup ret = (cPtr == global::System.IntPtr.Zero) ? null : new ArStringInfoGroup(cPtr, false);
    return ret;
  }

  public static void addRobot(ArRobot robot) {
    AriaCSPINVOKE.Aria_addRobot(ArRobot.getCPtr(robot));
  }

  public static void delRobot(ArRobot robot) {
    AriaCSPINVOKE.Aria_delRobot(ArRobot.getCPtr(robot));
  }

  public static ArRobot findRobot(string name) {
    global::System.IntPtr cPtr = AriaCSPINVOKE.Aria_findRobot(name);
    ArRobot ret = (cPtr == global::System.IntPtr.Zero) ? null : new ArRobot(cPtr, false);
    return ret;
  }

  public static SWIGTYPE_p_std__listT_ArRobot_p_t getRobotList() {
    global::System.IntPtr cPtr = AriaCSPINVOKE.Aria_getRobotList();
    SWIGTYPE_p_std__listT_ArRobot_p_t ret = (cPtr == global::System.IntPtr.Zero) ? null : new SWIGTYPE_p_std__listT_ArRobot_p_t(cPtr, false);
    return ret;
  }

  public static int getMaxNumLasers() {
    int ret = AriaCSPINVOKE.Aria_getMaxNumLasers();
    return ret;
  }

  public static void setMaxNumLasers(int maxNumLasers) {
    AriaCSPINVOKE.Aria_setMaxNumLasers(maxNumLasers);
  }

  public static int getMaxNumSonarBoards() {
    int ret = AriaCSPINVOKE.Aria_getMaxNumSonarBoards();
    return ret;
  }

  public static void setMaxNumSonarBoards(int maxNumSonarBoards) {
    AriaCSPINVOKE.Aria_setMaxNumSonarBoards(maxNumSonarBoards);
  }

  public static int getMaxNumBatteries() {
    int ret = AriaCSPINVOKE.Aria_getMaxNumBatteries();
    return ret;
  }

  public static void setMaxNumBatteries(int maxNumBatteries) {
    AriaCSPINVOKE.Aria_setMaxNumBatteries(maxNumBatteries);
  }

  public static int getMaxNumLCDs() {
    int ret = AriaCSPINVOKE.Aria_getMaxNumLCDs();
    return ret;
  }

  public static void setMaxNumLCDs(int maxNumLCDs) {
    AriaCSPINVOKE.Aria_setMaxNumLCDs(maxNumLCDs);
  }

  public static ArLaser laserCreate(string laserType, int laserNumber, string prefix) {
    global::System.IntPtr cPtr = AriaCSPINVOKE.Aria_laserCreate__SWIG_0(laserType, laserNumber, prefix);
    ArLaser ret = (cPtr == global::System.IntPtr.Zero) ? null : new ArLaser(cPtr, false);
    return ret;
  }

  public static ArLaser laserCreate(string laserType, int laserNumber) {
    global::System.IntPtr cPtr = AriaCSPINVOKE.Aria_laserCreate__SWIG_1(laserType, laserNumber);
    ArLaser ret = (cPtr == global::System.IntPtr.Zero) ? null : new ArLaser(cPtr, false);
    return ret;
  }

  public static bool laserAddCreator(string laserType, SWIGTYPE_p_ArRetFunctor2T_ArLaser_p_int_char_const_p_t creator) {
    bool ret = AriaCSPINVOKE.Aria_laserAddCreator(laserType, SWIGTYPE_p_ArRetFunctor2T_ArLaser_p_int_char_const_p_t.getCPtr(creator));
    return ret;
  }

  public static string laserGetTypes() {
    string ret = AriaCSPINVOKE.Aria_laserGetTypes();
    return ret;
  }

  public static string laserGetChoices() {
    string ret = AriaCSPINVOKE.Aria_laserGetChoices();
    return ret;
  }

  public static SWIGTYPE_p_ArBatteryMTX batteryCreate(string batteryType, int batteryNumber, string prefix) {
    global::System.IntPtr cPtr = AriaCSPINVOKE.Aria_batteryCreate__SWIG_0(batteryType, batteryNumber, prefix);
    SWIGTYPE_p_ArBatteryMTX ret = (cPtr == global::System.IntPtr.Zero) ? null : new SWIGTYPE_p_ArBatteryMTX(cPtr, false);
    return ret;
  }

  public static SWIGTYPE_p_ArBatteryMTX batteryCreate(string batteryType, int batteryNumber) {
    global::System.IntPtr cPtr = AriaCSPINVOKE.Aria_batteryCreate__SWIG_1(batteryType, batteryNumber);
    SWIGTYPE_p_ArBatteryMTX ret = (cPtr == global::System.IntPtr.Zero) ? null : new SWIGTYPE_p_ArBatteryMTX(cPtr, false);
    return ret;
  }

  public static bool batteryAddCreator(string batteryType, SWIGTYPE_p_ArRetFunctor2T_ArBatteryMTX_p_int_char_const_p_t creator) {
    bool ret = AriaCSPINVOKE.Aria_batteryAddCreator(batteryType, SWIGTYPE_p_ArRetFunctor2T_ArBatteryMTX_p_int_char_const_p_t.getCPtr(creator));
    return ret;
  }

  public static string batteryGetTypes() {
    string ret = AriaCSPINVOKE.Aria_batteryGetTypes();
    return ret;
  }

  public static string batteryGetChoices() {
    string ret = AriaCSPINVOKE.Aria_batteryGetChoices();
    return ret;
  }

  public static SWIGTYPE_p_ArLCDMTX lcdCreate(string lcdType, int lcdNumber, string prefix) {
    global::System.IntPtr cPtr = AriaCSPINVOKE.Aria_lcdCreate__SWIG_0(lcdType, lcdNumber, prefix);
    SWIGTYPE_p_ArLCDMTX ret = (cPtr == global::System.IntPtr.Zero) ? null : new SWIGTYPE_p_ArLCDMTX(cPtr, false);
    return ret;
  }

  public static SWIGTYPE_p_ArLCDMTX lcdCreate(string lcdType, int lcdNumber) {
    global::System.IntPtr cPtr = AriaCSPINVOKE.Aria_lcdCreate__SWIG_1(lcdType, lcdNumber);
    SWIGTYPE_p_ArLCDMTX ret = (cPtr == global::System.IntPtr.Zero) ? null : new SWIGTYPE_p_ArLCDMTX(cPtr, false);
    return ret;
  }

  public static bool lcdAddCreator(string lcdType, SWIGTYPE_p_ArRetFunctor2T_ArLCDMTX_p_int_char_const_p_t creator) {
    bool ret = AriaCSPINVOKE.Aria_lcdAddCreator(lcdType, SWIGTYPE_p_ArRetFunctor2T_ArLCDMTX_p_int_char_const_p_t.getCPtr(creator));
    return ret;
  }

  public static string lcdGetTypes() {
    string ret = AriaCSPINVOKE.Aria_lcdGetTypes();
    return ret;
  }

  public static string lcdGetChoices() {
    string ret = AriaCSPINVOKE.Aria_lcdGetChoices();
    return ret;
  }

  public static SWIGTYPE_p_ArSonarMTX sonarCreate(string sonarType, int sonarNumber, string prefix) {
    global::System.IntPtr cPtr = AriaCSPINVOKE.Aria_sonarCreate__SWIG_0(sonarType, sonarNumber, prefix);
    SWIGTYPE_p_ArSonarMTX ret = (cPtr == global::System.IntPtr.Zero) ? null : new SWIGTYPE_p_ArSonarMTX(cPtr, false);
    return ret;
  }

  public static SWIGTYPE_p_ArSonarMTX sonarCreate(string sonarType, int sonarNumber) {
    global::System.IntPtr cPtr = AriaCSPINVOKE.Aria_sonarCreate__SWIG_1(sonarType, sonarNumber);
    SWIGTYPE_p_ArSonarMTX ret = (cPtr == global::System.IntPtr.Zero) ? null : new SWIGTYPE_p_ArSonarMTX(cPtr, false);
    return ret;
  }

  public static bool sonarAddCreator(string sonarType, SWIGTYPE_p_ArRetFunctor2T_ArSonarMTX_p_int_char_const_p_t creator) {
    bool ret = AriaCSPINVOKE.Aria_sonarAddCreator(sonarType, SWIGTYPE_p_ArRetFunctor2T_ArSonarMTX_p_int_char_const_p_t.getCPtr(creator));
    return ret;
  }

  public static string sonarGetTypes() {
    string ret = AriaCSPINVOKE.Aria_sonarGetTypes();
    return ret;
  }

  public static string sonarGetChoices() {
    string ret = AriaCSPINVOKE.Aria_sonarGetChoices();
    return ret;
  }

  public static void setMaxNumVideoDevices(uint n) {
    AriaCSPINVOKE.Aria_setMaxNumVideoDevices(n);
  }

  public static uint getMaxNumVideoDevices() {
    uint ret = AriaCSPINVOKE.Aria_getMaxNumVideoDevices();
    return ret;
  }

  public static void setMaxNumPTZs(uint n) {
    AriaCSPINVOKE.Aria_setMaxNumPTZs(n);
  }

  public static uint getMaxNumPTZs() {
    uint ret = AriaCSPINVOKE.Aria_getMaxNumPTZs();
    return ret;
  }

  public static string getIdentifier() {
    string ret = AriaCSPINVOKE.Aria_getIdentifier();
    return ret;
  }

  public static void setIdentifier(string identifier) {
    AriaCSPINVOKE.Aria_setIdentifier(identifier);
  }

  public Aria() : this(AriaCSPINVOKE.new_Aria(), true) {
  }

  public enum SigHandleMethod {
    SIGHANDLE_SINGLE,
    SIGHANDLE_THREAD,
    SIGHANDLE_NONE
  }

}

}
