//------------------------------------------------------------------------------
// <auto-generated />
//
// This file was automatically generated by SWIG (http://www.swig.org).
// Version 3.0.8
//
// Do not make changes to this file unless you know what you are doing--modify
// the SWIG interface file instead.
//------------------------------------------------------------------------------

namespace AriaCS {

public class ArMapObject : global::System.IDisposable {
  private global::System.Runtime.InteropServices.HandleRef swigCPtr;
  protected bool swigCMemOwn;

  public ArMapObject(global::System.IntPtr cPtr, bool cMemoryOwn) {
    swigCMemOwn = cMemoryOwn;
    swigCPtr = new global::System.Runtime.InteropServices.HandleRef(this, cPtr);
  }

  public static global::System.Runtime.InteropServices.HandleRef getCPtr(ArMapObject obj) {
    return (obj == null) ? new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero) : obj.swigCPtr;
  }

  ~ArMapObject() {
    Dispose();
  }

  public virtual void Dispose() {
    lock(this) {
      if (swigCPtr.Handle != global::System.IntPtr.Zero) {
        if (swigCMemOwn) {
          swigCMemOwn = false;
          AriaCSPINVOKE.delete_ArMapObject(swigCPtr);
        }
        swigCPtr = new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero);
      }
      global::System.GC.SuppressFinalize(this);
    }
  }

  public static ArMapObject createMapObject(ArArgumentBuilder arg) {
    global::System.IntPtr cPtr = AriaCSPINVOKE.ArMapObject_createMapObject(ArArgumentBuilder.getCPtr(arg));
    ArMapObject ret = (cPtr == global::System.IntPtr.Zero) ? null : new ArMapObject(cPtr, false);
    return ret;
  }

  public ArMapObject(string type, ArPose pose, string description, string iconName, string name, bool hasFromTo, ArPose fromPose, ArPose toPose) : this(AriaCSPINVOKE.new_ArMapObject__SWIG_0(type, ArPose.getCPtr(pose), description, iconName, name, hasFromTo, ArPose.getCPtr(fromPose), ArPose.getCPtr(toPose)), true) {
    if (AriaCSPINVOKE.SWIGPendingException.Pending) throw AriaCSPINVOKE.SWIGPendingException.Retrieve();
  }

  public ArMapObject(ArMapObject mapObject) : this(AriaCSPINVOKE.new_ArMapObject__SWIG_1(ArMapObject.getCPtr(mapObject)), true) {
    if (AriaCSPINVOKE.SWIGPendingException.Pending) throw AriaCSPINVOKE.SWIGPendingException.Retrieve();
  }

  public string getType() {
    string ret = AriaCSPINVOKE.ArMapObject_getType(swigCPtr);
    return ret;
  }

  public string getBaseType() {
    string ret = AriaCSPINVOKE.ArMapObject_getBaseType(swigCPtr);
    return ret;
  }

  public string getName() {
    string ret = AriaCSPINVOKE.ArMapObject_getName(swigCPtr);
    return ret;
  }

  public string getDescription() {
    string ret = AriaCSPINVOKE.ArMapObject_getDescription(swigCPtr);
    return ret;
  }

  public string getIconName() {
    string ret = AriaCSPINVOKE.ArMapObject_getIconName(swigCPtr);
    return ret;
  }

  public int getId() {
    int ret = AriaCSPINVOKE.ArMapObject_getId(swigCPtr);
    return ret;
  }

  public void setDescription(string description) {
    AriaCSPINVOKE.ArMapObject_setDescription(swigCPtr, description);
  }

  public ArPose getPose() {
    ArPose ret = new ArPose(AriaCSPINVOKE.ArMapObject_getPose(swigCPtr), true);
    return ret;
  }

  public bool hasFromTo() {
    bool ret = AriaCSPINVOKE.ArMapObject_hasFromTo(swigCPtr);
    return ret;
  }

  public ArPose getFromPose() {
    ArPose ret = new ArPose(AriaCSPINVOKE.ArMapObject_getFromPose(swigCPtr), true);
    return ret;
  }

  public ArPose getToPose() {
    ArPose ret = new ArPose(AriaCSPINVOKE.ArMapObject_getToPose(swigCPtr), true);
    return ret;
  }

  public void setPose(ArPose p) {
    AriaCSPINVOKE.ArMapObject_setPose(swigCPtr, ArPose.getCPtr(p));
    if (AriaCSPINVOKE.SWIGPendingException.Pending) throw AriaCSPINVOKE.SWIGPendingException.Retrieve();
  }

  public void setFromTo(ArPose from, ArPose to) {
    AriaCSPINVOKE.ArMapObject_setFromTo(swigCPtr, ArPose.getCPtr(from), ArPose.getCPtr(to));
    if (AriaCSPINVOKE.SWIGPendingException.Pending) throw AriaCSPINVOKE.SWIGPendingException.Retrieve();
  }

  public double getFromToRotation() {
    double ret = AriaCSPINVOKE.ArMapObject_getFromToRotation(swigCPtr);
    return ret;
  }

  public SWIGTYPE_p_std__listT_ArLineSegment_t getFromToSegments() {
    SWIGTYPE_p_std__listT_ArLineSegment_t ret = new SWIGTYPE_p_std__listT_ArLineSegment_t(AriaCSPINVOKE.ArMapObject_getFromToSegments(swigCPtr), true);
    return ret;
  }

  public ArLineSegment getFromToSegment() {
    ArLineSegment ret = new ArLineSegment(AriaCSPINVOKE.ArMapObject_getFromToSegment(swigCPtr), true);
    return ret;
  }

  public ArPose findCenter() {
    ArPose ret = new ArPose(AriaCSPINVOKE.ArMapObject_findCenter(swigCPtr), true);
    return ret;
  }

  public bool isPointInside(ArPose p) {
    bool ret = AriaCSPINVOKE.ArMapObject_isPointInside(swigCPtr, ArPose.getCPtr(p));
    if (AriaCSPINVOKE.SWIGPendingException.Pending) throw AriaCSPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public ArPoseVector getRegionVertices() {
    ArPoseVector ret = new ArPoseVector(AriaCSPINVOKE.ArMapObject_getRegionVertices(swigCPtr), true);
    return ret;
  }

  public string toString() {
    string ret = AriaCSPINVOKE.ArMapObject_toString(swigCPtr);
    return ret;
  }

  public string getStringRepresentation() {
    string ret = AriaCSPINVOKE.ArMapObject_getStringRepresentation(swigCPtr);
    return ret;
  }

  public void log(string intro) {
    AriaCSPINVOKE.ArMapObject_log__SWIG_0(swigCPtr, intro);
  }

  public void log() {
    AriaCSPINVOKE.ArMapObject_log__SWIG_1(swigCPtr);
  }

  public string getFileName() {
    string ret = AriaCSPINVOKE.ArMapObject_getFileName(swigCPtr);
    return ret;
  }

  public enum ArgIndex {
    TYPE_ARG_INDEX = 0,
    POSE_X_ARG_INDEX = 1,
    POSE_Y_ARG_INDEX = 2,
    TH_ARG_INDEX = 3,
    DESC_ARG_INDEX = 4,
    ICON_ARG_INDEX = 5,
    NAME_ARG_INDEX = 6,
    LAST_POSE_ARG_INDEX = NAME_ARG_INDEX,
    FROM_X_ARG_INDEX = 7,
    FROM_Y_ARG_INDEX = 8,
    TO_X_ARG_INDEX = 9,
    TO_Y_ARG_INDEX = 10,
    LAST_ARG_INDEX = TO_Y_ARG_INDEX
  }

  public static readonly int ARG_INDEX_COUNT = AriaCSPINVOKE.ArMapObject_ARG_INDEX_COUNT_get();

}

}
