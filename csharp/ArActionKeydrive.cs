//------------------------------------------------------------------------------
// <auto-generated />
//
// This file was automatically generated by SWIG (http://www.swig.org).
// Version 3.0.8
//
// Do not make changes to this file unless you know what you are doing--modify
// the SWIG interface file instead.
//------------------------------------------------------------------------------

namespace AriaCS {

public class ArActionKeydrive : ArAction {
  private global::System.Runtime.InteropServices.HandleRef swigCPtr;

  public ArActionKeydrive(global::System.IntPtr cPtr, bool cMemoryOwn) : base(AriaCSPINVOKE.ArActionKeydrive_SWIGUpcast(cPtr), cMemoryOwn) {
    swigCPtr = new global::System.Runtime.InteropServices.HandleRef(this, cPtr);
  }

  public static global::System.Runtime.InteropServices.HandleRef getCPtr(ArActionKeydrive obj) {
    return (obj == null) ? new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero) : obj.swigCPtr;
  }

  ~ArActionKeydrive() {
    Dispose();
  }

  public override void Dispose() {
    lock(this) {
      if (swigCPtr.Handle != global::System.IntPtr.Zero) {
        if (swigCMemOwn) {
          swigCMemOwn = false;
          AriaCSPINVOKE.delete_ArActionKeydrive(swigCPtr);
        }
        swigCPtr = new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero);
      }
      global::System.GC.SuppressFinalize(this);
      base.Dispose();
    }
  }

  public ArActionKeydrive(string name, double transVelMax, double turnAmountMax, double velIncrement, double turnIncrement) : this(AriaCSPINVOKE.new_ArActionKeydrive__SWIG_0(name, transVelMax, turnAmountMax, velIncrement, turnIncrement), true) {
  }

  public ArActionKeydrive(string name, double transVelMax, double turnAmountMax, double velIncrement) : this(AriaCSPINVOKE.new_ArActionKeydrive__SWIG_1(name, transVelMax, turnAmountMax, velIncrement), true) {
  }

  public ArActionKeydrive(string name, double transVelMax, double turnAmountMax) : this(AriaCSPINVOKE.new_ArActionKeydrive__SWIG_2(name, transVelMax, turnAmountMax), true) {
  }

  public ArActionKeydrive(string name, double transVelMax) : this(AriaCSPINVOKE.new_ArActionKeydrive__SWIG_3(name, transVelMax), true) {
  }

  public ArActionKeydrive(string name) : this(AriaCSPINVOKE.new_ArActionKeydrive__SWIG_4(name), true) {
  }

  public ArActionKeydrive() : this(AriaCSPINVOKE.new_ArActionKeydrive__SWIG_5(), true) {
  }

  public override ArActionDesired fire(ArActionDesired currentDesired) {
    global::System.IntPtr cPtr = AriaCSPINVOKE.ArActionKeydrive_fire(swigCPtr, ArActionDesired.getCPtr(currentDesired));
    ArActionDesired ret = (cPtr == global::System.IntPtr.Zero) ? null : new ArActionDesired(cPtr, false);
    if (AriaCSPINVOKE.SWIGPendingException.Pending) throw AriaCSPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public void setSpeeds(double transVelMax, double turnAmountMax) {
    AriaCSPINVOKE.ArActionKeydrive_setSpeeds(swigCPtr, transVelMax, turnAmountMax);
  }

  public void setIncrements(double velIncrement, double turnIncrement) {
    AriaCSPINVOKE.ArActionKeydrive_setIncrements(swigCPtr, velIncrement, turnIncrement);
  }

  public override ArActionDesired getDesired() {
    global::System.IntPtr cPtr = AriaCSPINVOKE.ArActionKeydrive_getDesired(swigCPtr);
    ArActionDesired ret = (cPtr == global::System.IntPtr.Zero) ? null : new ArActionDesired(cPtr, false);
    return ret;
  }

  public override void setRobot(ArRobot robot) {
    AriaCSPINVOKE.ArActionKeydrive_setRobot(swigCPtr, ArRobot.getCPtr(robot));
  }

  public override void activate() {
    AriaCSPINVOKE.ArActionKeydrive_activate(swigCPtr);
  }

  public override void deactivate() {
    AriaCSPINVOKE.ArActionKeydrive_deactivate(swigCPtr);
  }

  public void takeKeys() {
    AriaCSPINVOKE.ArActionKeydrive_takeKeys(swigCPtr);
  }

  public void giveUpKeys() {
    AriaCSPINVOKE.ArActionKeydrive_giveUpKeys(swigCPtr);
  }

  public void up() {
    AriaCSPINVOKE.ArActionKeydrive_up(swigCPtr);
  }

  public void down() {
    AriaCSPINVOKE.ArActionKeydrive_down(swigCPtr);
  }

  public void left() {
    AriaCSPINVOKE.ArActionKeydrive_left(swigCPtr);
  }

  public void right() {
    AriaCSPINVOKE.ArActionKeydrive_right(swigCPtr);
  }

  public void space() {
    AriaCSPINVOKE.ArActionKeydrive_space(swigCPtr);
  }

}

}
