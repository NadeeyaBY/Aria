//------------------------------------------------------------------------------
// <auto-generated />
//
// This file was automatically generated by SWIG (http://www.swig.org).
// Version 3.0.8
//
// Do not make changes to this file unless you know what you are doing--modify
// the SWIG interface file instead.
//------------------------------------------------------------------------------

namespace AriaCS {

public class ArGPSConnector : global::System.IDisposable {
  private global::System.Runtime.InteropServices.HandleRef swigCPtr;
  protected bool swigCMemOwn;

  public ArGPSConnector(global::System.IntPtr cPtr, bool cMemoryOwn) {
    swigCMemOwn = cMemoryOwn;
    swigCPtr = new global::System.Runtime.InteropServices.HandleRef(this, cPtr);
  }

  public static global::System.Runtime.InteropServices.HandleRef getCPtr(ArGPSConnector obj) {
    return (obj == null) ? new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero) : obj.swigCPtr;
  }

  ~ArGPSConnector() {
    Dispose();
  }

  public virtual void Dispose() {
    lock(this) {
      if (swigCPtr.Handle != global::System.IntPtr.Zero) {
        if (swigCMemOwn) {
          swigCMemOwn = false;
          AriaCSPINVOKE.delete_ArGPSConnector(swigCPtr);
        }
        swigCPtr = new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero);
      }
      global::System.GC.SuppressFinalize(this);
    }
  }

  public ArGPSConnector(ArArgumentParser argParser) : this(AriaCSPINVOKE.new_ArGPSConnector(ArArgumentParser.getCPtr(argParser)), true) {
  }

  public bool parseArgs() {
    bool ret = AriaCSPINVOKE.ArGPSConnector_parseArgs(swigCPtr);
    return ret;
  }

  public ArGPS createGPS(ArRobot robot) {
    global::System.IntPtr cPtr = AriaCSPINVOKE.ArGPSConnector_createGPS__SWIG_0(swigCPtr, ArRobot.getCPtr(robot));
    ArGPS ret = (cPtr == global::System.IntPtr.Zero) ? null : new ArGPS(cPtr, false);
    return ret;
  }

  public ArGPS createGPS() {
    global::System.IntPtr cPtr = AriaCSPINVOKE.ArGPSConnector_createGPS__SWIG_1(swigCPtr);
    ArGPS ret = (cPtr == global::System.IntPtr.Zero) ? null : new ArGPS(cPtr, false);
    return ret;
  }

  public ArGPS create(ArRobot robot) {
    global::System.IntPtr cPtr = AriaCSPINVOKE.ArGPSConnector_create__SWIG_0(swigCPtr, ArRobot.getCPtr(robot));
    ArGPS ret = (cPtr == global::System.IntPtr.Zero) ? null : new ArGPS(cPtr, false);
    return ret;
  }

  public ArGPS create() {
    global::System.IntPtr cPtr = AriaCSPINVOKE.ArGPSConnector_create__SWIG_1(swigCPtr);
    ArGPS ret = (cPtr == global::System.IntPtr.Zero) ? null : new ArGPS(cPtr, false);
    return ret;
  }

  public ArGPSConnector.GPSType getGPSType() {
    ArGPSConnector.GPSType ret = (ArGPSConnector.GPSType)AriaCSPINVOKE.ArGPSConnector_getGPSType(swigCPtr);
    return ret;
  }

  public enum GPSType {
    Standard,
    Novatel,
    Trimble,
    Invalid,
    NovatelSPAN,
    Simulator
  }

}

}
