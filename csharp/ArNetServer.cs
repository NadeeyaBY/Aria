//------------------------------------------------------------------------------
// <auto-generated />
//
// This file was automatically generated by SWIG (http://www.swig.org).
// Version 3.0.8
//
// Do not make changes to this file unless you know what you are doing--modify
// the SWIG interface file instead.
//------------------------------------------------------------------------------

namespace AriaCS {

public class ArNetServer : global::System.IDisposable {
  private global::System.Runtime.InteropServices.HandleRef swigCPtr;
  protected bool swigCMemOwn;

  public ArNetServer(global::System.IntPtr cPtr, bool cMemoryOwn) {
    swigCMemOwn = cMemoryOwn;
    swigCPtr = new global::System.Runtime.InteropServices.HandleRef(this, cPtr);
  }

  public static global::System.Runtime.InteropServices.HandleRef getCPtr(ArNetServer obj) {
    return (obj == null) ? new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero) : obj.swigCPtr;
  }

  ~ArNetServer() {
    Dispose();
  }

  public virtual void Dispose() {
    lock(this) {
      if (swigCPtr.Handle != global::System.IntPtr.Zero) {
        if (swigCMemOwn) {
          swigCMemOwn = false;
          AriaCSPINVOKE.delete_ArNetServer(swigCPtr);
        }
        swigCPtr = new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero);
      }
      global::System.GC.SuppressFinalize(this);
    }
  }

  public ArNetServer(bool addAriaExitCB, bool doNotAddShutdownServer, string name, ArNetServer childServer) : this(AriaCSPINVOKE.new_ArNetServer__SWIG_0(addAriaExitCB, doNotAddShutdownServer, name, ArNetServer.getCPtr(childServer)), true) {
  }

  public ArNetServer(bool addAriaExitCB, bool doNotAddShutdownServer, string name) : this(AriaCSPINVOKE.new_ArNetServer__SWIG_1(addAriaExitCB, doNotAddShutdownServer, name), true) {
  }

  public ArNetServer(bool addAriaExitCB, bool doNotAddShutdownServer) : this(AriaCSPINVOKE.new_ArNetServer__SWIG_2(addAriaExitCB, doNotAddShutdownServer), true) {
  }

  public ArNetServer(bool addAriaExitCB) : this(AriaCSPINVOKE.new_ArNetServer__SWIG_3(addAriaExitCB), true) {
  }

  public ArNetServer() : this(AriaCSPINVOKE.new_ArNetServer__SWIG_4(), true) {
  }

  public bool open(ArRobot robot, uint port, string password, bool multipleClients, string openOnIP) {
    bool ret = AriaCSPINVOKE.ArNetServer_open__SWIG_0(swigCPtr, ArRobot.getCPtr(robot), port, password, multipleClients, openOnIP);
    return ret;
  }

  public bool open(ArRobot robot, uint port, string password, bool multipleClients) {
    bool ret = AriaCSPINVOKE.ArNetServer_open__SWIG_1(swigCPtr, ArRobot.getCPtr(robot), port, password, multipleClients);
    return ret;
  }

  public bool open(ArRobot robot, uint port, string password) {
    bool ret = AriaCSPINVOKE.ArNetServer_open__SWIG_2(swigCPtr, ArRobot.getCPtr(robot), port, password);
    return ret;
  }

  public void close() {
    AriaCSPINVOKE.ArNetServer_close(swigCPtr);
  }

  public bool addCommand(string command, SWIGTYPE_p_ArFunctor3T_char_pp_int_ArSocket_p_t functor, string help) {
    bool ret = AriaCSPINVOKE.ArNetServer_addCommand(swigCPtr, command, SWIGTYPE_p_ArFunctor3T_char_pp_int_ArSocket_p_t.getCPtr(functor), help);
    return ret;
  }

  public bool remCommand(string command) {
    bool ret = AriaCSPINVOKE.ArNetServer_remCommand(swigCPtr, command);
    return ret;
  }

  public string getName() {
    string ret = AriaCSPINVOKE.ArNetServer_getName(swigCPtr);
    return ret;
  }

  public void sendToAllClientsPlain(string str) {
    AriaCSPINVOKE.ArNetServer_sendToAllClientsPlain(swigCPtr, str);
  }

  public void sendToAllClientsNextCyclePlain(string str) {
    AriaCSPINVOKE.ArNetServer_sendToAllClientsNextCyclePlain(swigCPtr, str);
  }

  public bool sendToAllClientsNextCyclePlainBool(string str) {
    bool ret = AriaCSPINVOKE.ArNetServer_sendToAllClientsNextCyclePlainBool(swigCPtr, str);
    return ret;
  }

  public void sendToClientPlain(ArSocket socket, string ipString, string str) {
    AriaCSPINVOKE.ArNetServer_sendToClientPlain(swigCPtr, ArSocket.getCPtr(socket), ipString, str);
  }

  public bool isOpen() {
    bool ret = AriaCSPINVOKE.ArNetServer_isOpen(swigCPtr);
    return ret;
  }

  public void setLoggingDataSent(bool loggingData) {
    AriaCSPINVOKE.ArNetServer_setLoggingDataSent(swigCPtr, loggingData);
  }

  public bool getLoggingDataSent() {
    bool ret = AriaCSPINVOKE.ArNetServer_getLoggingDataSent(swigCPtr);
    return ret;
  }

  public void setLoggingDataReceived(bool loggingData) {
    AriaCSPINVOKE.ArNetServer_setLoggingDataReceived(swigCPtr, loggingData);
  }

  public bool getLoggingDataReceived() {
    bool ret = AriaCSPINVOKE.ArNetServer_getLoggingDataReceived(swigCPtr);
    return ret;
  }

  public void setUseWrongEndChars(bool useWrongEndChars) {
    AriaCSPINVOKE.ArNetServer_setUseWrongEndChars(swigCPtr, useWrongEndChars);
  }

  public bool getUseWrongEndChars() {
    bool ret = AriaCSPINVOKE.ArNetServer_getUseWrongEndChars(swigCPtr);
    return ret;
  }

  public void runOnce() {
    AriaCSPINVOKE.ArNetServer_runOnce(swigCPtr);
  }

  public void internalGreeting(ArSocket socket) {
    AriaCSPINVOKE.ArNetServer_internalGreeting(swigCPtr, ArSocket.getCPtr(socket));
  }

  public void internalHelp(ArSocket socket) {
    AriaCSPINVOKE.ArNetServer_internalHelp__SWIG_0(swigCPtr, ArSocket.getCPtr(socket));
  }

  public void internalHelp(SWIGTYPE_p_p_char argv, int argc, ArSocket socket) {
    AriaCSPINVOKE.ArNetServer_internalHelp__SWIG_1(swigCPtr, SWIGTYPE_p_p_char.getCPtr(argv), argc, ArSocket.getCPtr(socket));
  }

  public void internalEcho(SWIGTYPE_p_p_char argv, int argc, ArSocket socket) {
    AriaCSPINVOKE.ArNetServer_internalEcho(swigCPtr, SWIGTYPE_p_p_char.getCPtr(argv), argc, ArSocket.getCPtr(socket));
  }

  public void internalQuit(SWIGTYPE_p_p_char argv, int argc, ArSocket socket) {
    AriaCSPINVOKE.ArNetServer_internalQuit(swigCPtr, SWIGTYPE_p_p_char.getCPtr(argv), argc, ArSocket.getCPtr(socket));
  }

  public void internalShutdownServer(SWIGTYPE_p_p_char argv, int argc, ArSocket socket) {
    AriaCSPINVOKE.ArNetServer_internalShutdownServer(swigCPtr, SWIGTYPE_p_p_char.getCPtr(argv), argc, ArSocket.getCPtr(socket));
  }

  public void parseCommandOnSocket(ArArgumentBuilder args, ArSocket socket, bool allowLog) {
    AriaCSPINVOKE.ArNetServer_parseCommandOnSocket__SWIG_0(swigCPtr, ArArgumentBuilder.getCPtr(args), ArSocket.getCPtr(socket), allowLog);
  }

  public void parseCommandOnSocket(ArArgumentBuilder args, ArSocket socket) {
    AriaCSPINVOKE.ArNetServer_parseCommandOnSocket__SWIG_1(swigCPtr, ArArgumentBuilder.getCPtr(args), ArSocket.getCPtr(socket));
  }

  public void internalAddSocketToList(ArSocket socket) {
    AriaCSPINVOKE.ArNetServer_internalAddSocketToList(swigCPtr, ArSocket.getCPtr(socket));
  }

  public void internalAddSocketToDeleteList(ArSocket socket) {
    AriaCSPINVOKE.ArNetServer_internalAddSocketToDeleteList(swigCPtr, ArSocket.getCPtr(socket));
  }

  public void squelchNormal() {
    AriaCSPINVOKE.ArNetServer_squelchNormal(swigCPtr);
  }

  public void setExtraString(string str) {
    AriaCSPINVOKE.ArNetServer_setExtraString(swigCPtr, str);
  }

  public string getExtraString() {
    string ret = AriaCSPINVOKE.ArNetServer_getExtraString(swigCPtr);
    return ret;
  }

  public int lockObj() {
    int ret = AriaCSPINVOKE.ArNetServer_lockObj(swigCPtr);
    return ret;
  }

  public int tryLock() {
    int ret = AriaCSPINVOKE.ArNetServer_tryLock(swigCPtr);
    return ret;
  }

  public int unlockObj() {
    int ret = AriaCSPINVOKE.ArNetServer_unlockObj(swigCPtr);
    return ret;
  }

}

}
