//------------------------------------------------------------------------------
// <auto-generated />
//
// This file was automatically generated by SWIG (http://www.swig.org).
// Version 3.0.8
//
// Do not make changes to this file unless you know what you are doing--modify
// the SWIG interface file instead.
//------------------------------------------------------------------------------

namespace AriaCS {

public class ArBasePacket : global::System.IDisposable {
  private global::System.Runtime.InteropServices.HandleRef swigCPtr;
  protected bool swigCMemOwn;

  public ArBasePacket(global::System.IntPtr cPtr, bool cMemoryOwn) {
    swigCMemOwn = cMemoryOwn;
    swigCPtr = new global::System.Runtime.InteropServices.HandleRef(this, cPtr);
  }

  public static global::System.Runtime.InteropServices.HandleRef getCPtr(ArBasePacket obj) {
    return (obj == null) ? new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero) : obj.swigCPtr;
  }

  ~ArBasePacket() {
    Dispose();
  }

  public virtual void Dispose() {
    lock(this) {
      if (swigCPtr.Handle != global::System.IntPtr.Zero) {
        if (swigCMemOwn) {
          swigCMemOwn = false;
          AriaCSPINVOKE.delete_ArBasePacket(swigCPtr);
        }
        swigCPtr = new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero);
      }
      global::System.GC.SuppressFinalize(this);
    }
  }

  public ArBasePacket(ushort bufferSize, ushort headerLength, string buf, ushort footerLength) : this(AriaCSPINVOKE.new_ArBasePacket__SWIG_0(bufferSize, headerLength, buf, footerLength), true) {
  }

  public ArBasePacket(ushort bufferSize, ushort headerLength, string buf) : this(AriaCSPINVOKE.new_ArBasePacket__SWIG_1(bufferSize, headerLength, buf), true) {
  }

  public ArBasePacket(ushort bufferSize, ushort headerLength) : this(AriaCSPINVOKE.new_ArBasePacket__SWIG_2(bufferSize, headerLength), true) {
  }

  public ArBasePacket(ushort bufferSize) : this(AriaCSPINVOKE.new_ArBasePacket__SWIG_3(bufferSize), true) {
  }

  public ArBasePacket() : this(AriaCSPINVOKE.new_ArBasePacket__SWIG_4(), true) {
  }

  public ArBasePacket(ArBasePacket other) : this(AriaCSPINVOKE.new_ArBasePacket__SWIG_5(ArBasePacket.getCPtr(other)), true) {
    if (AriaCSPINVOKE.SWIGPendingException.Pending) throw AriaCSPINVOKE.SWIGPendingException.Retrieve();
  }

  public virtual void empty() {
    AriaCSPINVOKE.ArBasePacket_empty(swigCPtr);
  }

  public virtual void finalizePacket() {
    AriaCSPINVOKE.ArBasePacket_finalizePacket(swigCPtr);
  }

  public virtual void log() {
    AriaCSPINVOKE.ArBasePacket_log(swigCPtr);
  }

  public virtual void printHex() {
    AriaCSPINVOKE.ArBasePacket_printHex(swigCPtr);
  }

  public virtual bool isValid() {
    bool ret = AriaCSPINVOKE.ArBasePacket_isValid(swigCPtr);
    return ret;
  }

  public virtual void resetValid() {
    AriaCSPINVOKE.ArBasePacket_resetValid(swigCPtr);
  }

  public virtual void byteToBuf(char val) {
    AriaCSPINVOKE.ArBasePacket_byteToBuf(swigCPtr, val);
  }

  public virtual void byte2ToBuf(short val) {
    AriaCSPINVOKE.ArBasePacket_byte2ToBuf(swigCPtr, val);
  }

  public virtual void byte4ToBuf(int val) {
    AriaCSPINVOKE.ArBasePacket_byte4ToBuf(swigCPtr, val);
  }

  public virtual void byte8ToBuf(long val) {
    AriaCSPINVOKE.ArBasePacket_byte8ToBuf(swigCPtr, val);
  }

  public virtual void uByteToBuf(byte val) {
    AriaCSPINVOKE.ArBasePacket_uByteToBuf(swigCPtr, val);
  }

  public virtual void uByte2ToBuf(ushort val) {
    AriaCSPINVOKE.ArBasePacket_uByte2ToBuf(swigCPtr, val);
  }

  public virtual void uByte4ToBuf(uint val) {
    AriaCSPINVOKE.ArBasePacket_uByte4ToBuf(swigCPtr, val);
  }

  public virtual void uByte8ToBuf(ulong val) {
    AriaCSPINVOKE.ArBasePacket_uByte8ToBuf(swigCPtr, val);
  }

  public virtual void strToBuf(string str) {
    AriaCSPINVOKE.ArBasePacket_strToBuf(swigCPtr, str);
  }

  public virtual void strNToBuf(string str, int length) {
    AriaCSPINVOKE.ArBasePacket_strNToBuf(swigCPtr, str, length);
  }

  public virtual void strToBufPadded(string str, int length) {
    AriaCSPINVOKE.ArBasePacket_strToBufPadded(swigCPtr, str, length);
  }

  public virtual void dataToBuf(string data, int length) {
    AriaCSPINVOKE.ArBasePacket_dataToBuf__SWIG_0(swigCPtr, data, length);
  }

  public virtual void dataToBuf(SWIGTYPE_p_unsigned_char data, int length) {
    AriaCSPINVOKE.ArBasePacket_dataToBuf__SWIG_1(swigCPtr, SWIGTYPE_p_unsigned_char.getCPtr(data), length);
  }

  public virtual char bufToByte() {
    char ret = AriaCSPINVOKE.ArBasePacket_bufToByte(swigCPtr);
    return ret;
  }

  public virtual short bufToByte2() {
    short ret = AriaCSPINVOKE.ArBasePacket_bufToByte2(swigCPtr);
    return ret;
  }

  public virtual int bufToByte4() {
    int ret = AriaCSPINVOKE.ArBasePacket_bufToByte4(swigCPtr);
    return ret;
  }

  public virtual long bufToByte8() {
    long ret = AriaCSPINVOKE.ArBasePacket_bufToByte8(swigCPtr);
    return ret;
  }

  public virtual byte bufToUByte() {
    byte ret = AriaCSPINVOKE.ArBasePacket_bufToUByte(swigCPtr);
    return ret;
  }

  public virtual ushort bufToUByte2() {
    ushort ret = AriaCSPINVOKE.ArBasePacket_bufToUByte2(swigCPtr);
    return ret;
  }

  public virtual uint bufToUByte4() {
    uint ret = AriaCSPINVOKE.ArBasePacket_bufToUByte4(swigCPtr);
    return ret;
  }

  public virtual ulong bufToUByte8() {
    ulong ret = AriaCSPINVOKE.ArBasePacket_bufToUByte8(swigCPtr);
    return ret;
  }

  public virtual void bufToStr(string buf, int maxlen) {
    AriaCSPINVOKE.ArBasePacket_bufToStr(swigCPtr, buf, maxlen);
  }

  public string bufToString() {
    string ret = AriaCSPINVOKE.ArBasePacket_bufToString__SWIG_0(swigCPtr);
    return ret;
  }

  public void bufToString(SWIGTYPE_p_std__string s) {
    AriaCSPINVOKE.ArBasePacket_bufToString__SWIG_1(swigCPtr, SWIGTYPE_p_std__string.getCPtr(s));
  }

  public virtual void bufToData(string data, int length) {
    AriaCSPINVOKE.ArBasePacket_bufToData__SWIG_0(swigCPtr, data, length);
  }

  public virtual void bufToData(SWIGTYPE_p_unsigned_char data, int length) {
    AriaCSPINVOKE.ArBasePacket_bufToData__SWIG_1(swigCPtr, SWIGTYPE_p_unsigned_char.getCPtr(data), length);
  }

  public virtual void resetRead() {
    AriaCSPINVOKE.ArBasePacket_resetRead(swigCPtr);
  }

  public virtual ushort getLength() {
    ushort ret = AriaCSPINVOKE.ArBasePacket_getLength(swigCPtr);
    return ret;
  }

  public virtual ushort getDataLength() {
    ushort ret = AriaCSPINVOKE.ArBasePacket_getDataLength(swigCPtr);
    return ret;
  }

  public virtual ushort getReadLength() {
    ushort ret = AriaCSPINVOKE.ArBasePacket_getReadLength(swigCPtr);
    return ret;
  }

  public virtual ushort getDataReadLength() {
    ushort ret = AriaCSPINVOKE.ArBasePacket_getDataReadLength(swigCPtr);
    return ret;
  }

  public virtual ushort getHeaderLength() {
    ushort ret = AriaCSPINVOKE.ArBasePacket_getHeaderLength(swigCPtr);
    return ret;
  }

  public virtual ushort getFooterLength() {
    ushort ret = AriaCSPINVOKE.ArBasePacket_getFooterLength(swigCPtr);
    return ret;
  }

  public virtual ushort getMaxLength() {
    ushort ret = AriaCSPINVOKE.ArBasePacket_getMaxLength(swigCPtr);
    return ret;
  }

  public virtual string getBuf() {
    string ret = AriaCSPINVOKE.ArBasePacket_getBuf__SWIG_0(swigCPtr);
    return ret;
  }

  public virtual void setBuf(string buf, ushort bufferSize) {
    AriaCSPINVOKE.ArBasePacket_setBuf(swigCPtr, buf, bufferSize);
  }

  public virtual void setMaxLength(ushort bufferSize) {
    AriaCSPINVOKE.ArBasePacket_setMaxLength(swigCPtr, bufferSize);
  }

  public virtual bool setLength(ushort length) {
    bool ret = AriaCSPINVOKE.ArBasePacket_setLength(swigCPtr, length);
    return ret;
  }

  public virtual void setReadLength(ushort readLength) {
    AriaCSPINVOKE.ArBasePacket_setReadLength(swigCPtr, readLength);
  }

  public virtual bool setHeaderLength(ushort length) {
    bool ret = AriaCSPINVOKE.ArBasePacket_setHeaderLength(swigCPtr, length);
    return ret;
  }

  public virtual void duplicatePacket(ArBasePacket packet) {
    AriaCSPINVOKE.ArBasePacket_duplicatePacket(swigCPtr, ArBasePacket.getCPtr(packet));
  }

  public bool bufferContainsBytes(int bytes) {
    bool ret = AriaCSPINVOKE.ArBasePacket_bufferContainsBytes(swigCPtr, bytes);
    return ret;
  }

}

}
