//------------------------------------------------------------------------------
// <auto-generated />
//
// This file was automatically generated by SWIG (http://www.swig.org).
// Version 3.0.8
//
// Do not make changes to this file unless you know what you are doing--modify
// the SWIG interface file instead.
//------------------------------------------------------------------------------

namespace AriaCS {

public class ArRVisionPTZ : ArPTZ {
  private global::System.Runtime.InteropServices.HandleRef swigCPtr;

  public ArRVisionPTZ(global::System.IntPtr cPtr, bool cMemoryOwn) : base(AriaCSPINVOKE.ArRVisionPTZ_SWIGUpcast(cPtr), cMemoryOwn) {
    swigCPtr = new global::System.Runtime.InteropServices.HandleRef(this, cPtr);
  }

  public static global::System.Runtime.InteropServices.HandleRef getCPtr(ArRVisionPTZ obj) {
    return (obj == null) ? new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero) : obj.swigCPtr;
  }

  ~ArRVisionPTZ() {
    Dispose();
  }

  public override void Dispose() {
    lock(this) {
      if (swigCPtr.Handle != global::System.IntPtr.Zero) {
        if (swigCMemOwn) {
          swigCMemOwn = false;
          AriaCSPINVOKE.delete_ArRVisionPTZ(swigCPtr);
        }
        swigCPtr = new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero);
      }
      global::System.GC.SuppressFinalize(this);
      base.Dispose();
    }
  }

  public ArRVisionPTZ(ArRobot robot) : this(AriaCSPINVOKE.new_ArRVisionPTZ(ArRobot.getCPtr(robot)), true) {
  }

  public override bool init() {
    bool ret = AriaCSPINVOKE.ArRVisionPTZ_init(swigCPtr);
    return ret;
  }

  public override string getTypeName() {
    string ret = AriaCSPINVOKE.ArRVisionPTZ_getTypeName(swigCPtr);
    return ret;
  }

  public void setPort(string port) {
    AriaCSPINVOKE.ArRVisionPTZ_setPort(swigCPtr, port);
  }

  public override bool canZoom() {
    bool ret = AriaCSPINVOKE.ArRVisionPTZ_canZoom(swigCPtr);
    return ret;
  }

  public override bool zoom(int zoomValue) {
    bool ret = AriaCSPINVOKE.ArRVisionPTZ_zoom(swigCPtr, zoomValue);
    return ret;
  }

  public override bool zoomRel(int zoomValue) {
    bool ret = AriaCSPINVOKE.ArRVisionPTZ_zoomRel(swigCPtr, zoomValue);
    return ret;
  }

  public override int getZoom() {
    int ret = AriaCSPINVOKE.ArRVisionPTZ_getZoom(swigCPtr);
    return ret;
  }

  public override bool canGetRealPanTilt() {
    bool ret = AriaCSPINVOKE.ArRVisionPTZ_canGetRealPanTilt(swigCPtr);
    return ret;
  }

  public override bool canGetRealZoom() {
    bool ret = AriaCSPINVOKE.ArRVisionPTZ_canGetRealZoom(swigCPtr);
    return ret;
  }

  public override bool canGetFOV() {
    bool ret = AriaCSPINVOKE.ArRVisionPTZ_canGetFOV(swigCPtr);
    return ret;
  }

  public override double getFOVAtMaxZoom() {
    double ret = AriaCSPINVOKE.ArRVisionPTZ_getFOVAtMaxZoom(swigCPtr);
    return ret;
  }

  public override double getFOVAtMinZoom() {
    double ret = AriaCSPINVOKE.ArRVisionPTZ_getFOVAtMinZoom(swigCPtr);
    return ret;
  }

  public override ArBasePacket readPacket() {
    global::System.IntPtr cPtr = AriaCSPINVOKE.ArRVisionPTZ_readPacket(swigCPtr);
    ArBasePacket ret = (cPtr == global::System.IntPtr.Zero) ? null : new ArBasePacket(cPtr, false);
    return ret;
  }

  public static readonly int MAX_PAN = AriaCSPINVOKE.ArRVisionPTZ_MAX_PAN_get();
  public static readonly int MIN_PAN = AriaCSPINVOKE.ArRVisionPTZ_MIN_PAN_get();
  public static readonly int MIN_TILT = AriaCSPINVOKE.ArRVisionPTZ_MIN_TILT_get();
  public static readonly int MAX_TILT = AriaCSPINVOKE.ArRVisionPTZ_MAX_TILT_get();
  public static readonly int MIN_ZOOM = AriaCSPINVOKE.ArRVisionPTZ_MIN_ZOOM_get();
  public static readonly int MAX_ZOOM = AriaCSPINVOKE.ArRVisionPTZ_MAX_ZOOM_get();
  public static readonly int TILT_OFFSET_IN_DEGREES = AriaCSPINVOKE.ArRVisionPTZ_TILT_OFFSET_IN_DEGREES_get();
  public static readonly int PAN_OFFSET_IN_DEGREES = AriaCSPINVOKE.ArRVisionPTZ_PAN_OFFSET_IN_DEGREES_get();

}

}
