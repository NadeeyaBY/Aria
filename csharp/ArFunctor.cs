//------------------------------------------------------------------------------
// <auto-generated />
//
// This file was automatically generated by SWIG (http://www.swig.org).
// Version 3.0.8
//
// Do not make changes to this file unless you know what you are doing--modify
// the SWIG interface file instead.
//------------------------------------------------------------------------------

namespace AriaCS {

public class ArFunctor : global::System.IDisposable {
  private global::System.Runtime.InteropServices.HandleRef swigCPtr;
  protected bool swigCMemOwn;

  public ArFunctor(global::System.IntPtr cPtr, bool cMemoryOwn) {
    swigCMemOwn = cMemoryOwn;
    swigCPtr = new global::System.Runtime.InteropServices.HandleRef(this, cPtr);
  }

  public static global::System.Runtime.InteropServices.HandleRef getCPtr(ArFunctor obj) {
    return (obj == null) ? new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero) : obj.swigCPtr;
  }

  ~ArFunctor() {
    Dispose();
  }

  public virtual void Dispose() {
    lock(this) {
      if (swigCPtr.Handle != global::System.IntPtr.Zero) {
        if (swigCMemOwn) {
          swigCMemOwn = false;
          AriaCSPINVOKE.delete_ArFunctor(swigCPtr);
        }
        swigCPtr = new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero);
      }
      global::System.GC.SuppressFinalize(this);
    }
  }

  public virtual void invoke() {
    AriaCSPINVOKE.ArFunctor_invoke(swigCPtr);
  }

  public virtual string getName() {
    string ret = (SwigDerivedClassHasMethod("getName", swigMethodTypes1) ? AriaCSPINVOKE.ArFunctor_getNameSwigExplicitArFunctor(swigCPtr) : AriaCSPINVOKE.ArFunctor_getName(swigCPtr));
    return ret;
  }

  public virtual void setName(string name) {
    if (SwigDerivedClassHasMethod("setName", swigMethodTypes2)) AriaCSPINVOKE.ArFunctor_setNameSwigExplicitArFunctor(swigCPtr, name); else AriaCSPINVOKE.ArFunctor_setName(swigCPtr, name);
  }

  public ArFunctor() : this(AriaCSPINVOKE.new_ArFunctor(), true) {
    SwigDirectorConnect();
  }

  private void SwigDirectorConnect() {
    if (SwigDerivedClassHasMethod("invoke", swigMethodTypes0))
      swigDelegate0 = new SwigDelegateArFunctor_0(SwigDirectorinvoke);
    if (SwigDerivedClassHasMethod("getName", swigMethodTypes1))
      swigDelegate1 = new SwigDelegateArFunctor_1(SwigDirectorgetName);
    if (SwigDerivedClassHasMethod("setName", swigMethodTypes2))
      swigDelegate2 = new SwigDelegateArFunctor_2(SwigDirectorsetName);
    AriaCSPINVOKE.ArFunctor_director_connect(swigCPtr, swigDelegate0, swigDelegate1, swigDelegate2);
  }

  private bool SwigDerivedClassHasMethod(string methodName, global::System.Type[] methodTypes) {
    global::System.Reflection.MethodInfo methodInfo = this.GetType().GetMethod(methodName, global::System.Reflection.BindingFlags.Public | global::System.Reflection.BindingFlags.NonPublic | global::System.Reflection.BindingFlags.Instance, null, methodTypes, null);
    bool hasDerivedMethod = methodInfo.DeclaringType.IsSubclassOf(typeof(ArFunctor));
    return hasDerivedMethod;
  }

  private void SwigDirectorinvoke() {
    invoke();
  }

  private string SwigDirectorgetName() {
    return getName();
  }

  private void SwigDirectorsetName(string name) {
    setName(name);
  }

  public delegate void SwigDelegateArFunctor_0();
  public delegate string SwigDelegateArFunctor_1();
  public delegate void SwigDelegateArFunctor_2(string name);

  private SwigDelegateArFunctor_0 swigDelegate0;
  private SwigDelegateArFunctor_1 swigDelegate1;
  private SwigDelegateArFunctor_2 swigDelegate2;

  private static global::System.Type[] swigMethodTypes0 = new global::System.Type[] {  };
  private static global::System.Type[] swigMethodTypes1 = new global::System.Type[] {  };
  private static global::System.Type[] swigMethodTypes2 = new global::System.Type[] { typeof(string) };
}

}
