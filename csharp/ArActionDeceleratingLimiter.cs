//------------------------------------------------------------------------------
// <auto-generated />
//
// This file was automatically generated by SWIG (http://www.swig.org).
// Version 3.0.8
//
// Do not make changes to this file unless you know what you are doing--modify
// the SWIG interface file instead.
//------------------------------------------------------------------------------

namespace AriaCS {

public class ArActionDeceleratingLimiter : ArAction {
  private global::System.Runtime.InteropServices.HandleRef swigCPtr;

  public ArActionDeceleratingLimiter(global::System.IntPtr cPtr, bool cMemoryOwn) : base(AriaCSPINVOKE.ArActionDeceleratingLimiter_SWIGUpcast(cPtr), cMemoryOwn) {
    swigCPtr = new global::System.Runtime.InteropServices.HandleRef(this, cPtr);
  }

  public static global::System.Runtime.InteropServices.HandleRef getCPtr(ArActionDeceleratingLimiter obj) {
    return (obj == null) ? new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero) : obj.swigCPtr;
  }

  ~ArActionDeceleratingLimiter() {
    Dispose();
  }

  public override void Dispose() {
    lock(this) {
      if (swigCPtr.Handle != global::System.IntPtr.Zero) {
        if (swigCMemOwn) {
          swigCMemOwn = false;
          AriaCSPINVOKE.delete_ArActionDeceleratingLimiter(swigCPtr);
        }
        swigCPtr = new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero);
      }
      global::System.GC.SuppressFinalize(this);
      base.Dispose();
    }
  }

  public ArActionDeceleratingLimiter(string name, ArActionDeceleratingLimiter.LimiterType type) : this(AriaCSPINVOKE.new_ArActionDeceleratingLimiter__SWIG_0(name, (int)type), true) {
  }

  public ArActionDeceleratingLimiter(string name) : this(AriaCSPINVOKE.new_ArActionDeceleratingLimiter__SWIG_1(name), true) {
  }

  public ArActionDeceleratingLimiter() : this(AriaCSPINVOKE.new_ArActionDeceleratingLimiter__SWIG_2(), true) {
  }

  public override ArActionDesired fire(ArActionDesired currentDesired) {
    global::System.IntPtr cPtr = AriaCSPINVOKE.ArActionDeceleratingLimiter_fire(swigCPtr, ArActionDesired.getCPtr(currentDesired));
    ArActionDesired ret = (cPtr == global::System.IntPtr.Zero) ? null : new ArActionDesired(cPtr, false);
    if (AriaCSPINVOKE.SWIGPendingException.Pending) throw AriaCSPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public override ArActionDesired getDesired() {
    global::System.IntPtr cPtr = AriaCSPINVOKE.ArActionDeceleratingLimiter_getDesired(swigCPtr);
    ArActionDesired ret = (cPtr == global::System.IntPtr.Zero) ? null : new ArActionDesired(cPtr, false);
    return ret;
  }

  public void setParameters(double clearance, double sideClearanceAtSlowSpeed, double paddingAtSlowSpeed, double slowSpeed, double sideClearanceAtFastSpeed, double paddingAtFastSpeed, double fastSpeed, double preferredDecel, bool useEStop, double maxEmergencyDecel) {
    AriaCSPINVOKE.ArActionDeceleratingLimiter_setParameters__SWIG_0(swigCPtr, clearance, sideClearanceAtSlowSpeed, paddingAtSlowSpeed, slowSpeed, sideClearanceAtFastSpeed, paddingAtFastSpeed, fastSpeed, preferredDecel, useEStop, maxEmergencyDecel);
  }

  public void setParameters(double clearance, double sideClearanceAtSlowSpeed, double paddingAtSlowSpeed, double slowSpeed, double sideClearanceAtFastSpeed, double paddingAtFastSpeed, double fastSpeed, double preferredDecel, bool useEStop) {
    AriaCSPINVOKE.ArActionDeceleratingLimiter_setParameters__SWIG_1(swigCPtr, clearance, sideClearanceAtSlowSpeed, paddingAtSlowSpeed, slowSpeed, sideClearanceAtFastSpeed, paddingAtFastSpeed, fastSpeed, preferredDecel, useEStop);
  }

  public void setParameters(double clearance, double sideClearanceAtSlowSpeed, double paddingAtSlowSpeed, double slowSpeed, double sideClearanceAtFastSpeed, double paddingAtFastSpeed, double fastSpeed, double preferredDecel) {
    AriaCSPINVOKE.ArActionDeceleratingLimiter_setParameters__SWIG_2(swigCPtr, clearance, sideClearanceAtSlowSpeed, paddingAtSlowSpeed, slowSpeed, sideClearanceAtFastSpeed, paddingAtFastSpeed, fastSpeed, preferredDecel);
  }

  public void setParameters(double clearance, double sideClearanceAtSlowSpeed, double paddingAtSlowSpeed, double slowSpeed, double sideClearanceAtFastSpeed, double paddingAtFastSpeed, double fastSpeed) {
    AriaCSPINVOKE.ArActionDeceleratingLimiter_setParameters__SWIG_3(swigCPtr, clearance, sideClearanceAtSlowSpeed, paddingAtSlowSpeed, slowSpeed, sideClearanceAtFastSpeed, paddingAtFastSpeed, fastSpeed);
  }

  public void setParameters(double clearance, double sideClearanceAtSlowSpeed, double paddingAtSlowSpeed, double slowSpeed, double sideClearanceAtFastSpeed, double paddingAtFastSpeed) {
    AriaCSPINVOKE.ArActionDeceleratingLimiter_setParameters__SWIG_4(swigCPtr, clearance, sideClearanceAtSlowSpeed, paddingAtSlowSpeed, slowSpeed, sideClearanceAtFastSpeed, paddingAtFastSpeed);
  }

  public void setParameters(double clearance, double sideClearanceAtSlowSpeed, double paddingAtSlowSpeed, double slowSpeed, double sideClearanceAtFastSpeed) {
    AriaCSPINVOKE.ArActionDeceleratingLimiter_setParameters__SWIG_5(swigCPtr, clearance, sideClearanceAtSlowSpeed, paddingAtSlowSpeed, slowSpeed, sideClearanceAtFastSpeed);
  }

  public void setParameters(double clearance, double sideClearanceAtSlowSpeed, double paddingAtSlowSpeed, double slowSpeed) {
    AriaCSPINVOKE.ArActionDeceleratingLimiter_setParameters__SWIG_6(swigCPtr, clearance, sideClearanceAtSlowSpeed, paddingAtSlowSpeed, slowSpeed);
  }

  public void setParameters(double clearance, double sideClearanceAtSlowSpeed, double paddingAtSlowSpeed) {
    AriaCSPINVOKE.ArActionDeceleratingLimiter_setParameters__SWIG_7(swigCPtr, clearance, sideClearanceAtSlowSpeed, paddingAtSlowSpeed);
  }

  public void setParameters(double clearance, double sideClearanceAtSlowSpeed) {
    AriaCSPINVOKE.ArActionDeceleratingLimiter_setParameters__SWIG_8(swigCPtr, clearance, sideClearanceAtSlowSpeed);
  }

  public void setParameters(double clearance) {
    AriaCSPINVOKE.ArActionDeceleratingLimiter_setParameters__SWIG_9(swigCPtr, clearance);
  }

  public void setParameters() {
    AriaCSPINVOKE.ArActionDeceleratingLimiter_setParameters__SWIG_10(swigCPtr);
  }

  public ArActionDeceleratingLimiter.LimiterType getType() {
    ArActionDeceleratingLimiter.LimiterType ret = (ArActionDeceleratingLimiter.LimiterType)AriaCSPINVOKE.ArActionDeceleratingLimiter_getType(swigCPtr);
    return ret;
  }

  public void setType(ArActionDeceleratingLimiter.LimiterType type) {
    AriaCSPINVOKE.ArActionDeceleratingLimiter_setType(swigCPtr, (int)type);
  }

  public void addToConfig(ArConfig config, string section, string prefix) {
    AriaCSPINVOKE.ArActionDeceleratingLimiter_addToConfig__SWIG_0(swigCPtr, ArConfig.getCPtr(config), section, prefix);
  }

  public void addToConfig(ArConfig config, string section) {
    AriaCSPINVOKE.ArActionDeceleratingLimiter_addToConfig__SWIG_1(swigCPtr, ArConfig.getCPtr(config), section);
  }

  public bool getUseLocationDependentDevices() {
    bool ret = AriaCSPINVOKE.ArActionDeceleratingLimiter_getUseLocationDependentDevices(swigCPtr);
    return ret;
  }

  public void setUseLocationDependentDevices(bool useLocationDependentDevices) {
    AriaCSPINVOKE.ArActionDeceleratingLimiter_setUseLocationDependentDevices(swigCPtr, useLocationDependentDevices);
  }

  public void setStopRotationToo(bool stopRotationToo) {
    AriaCSPINVOKE.ArActionDeceleratingLimiter_setStopRotationToo(swigCPtr, stopRotationToo);
  }

  public enum LimiterType {
    FORWARDS,
    BACKWARDS,
    LATERAL_LEFT,
    LATERAL_RIGHT
  }

}

}
