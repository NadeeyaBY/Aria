//------------------------------------------------------------------------------
// <auto-generated />
//
// This file was automatically generated by SWIG (http://www.swig.org).
// Version 3.0.8
//
// Do not make changes to this file unless you know what you are doing--modify
// the SWIG interface file instead.
//------------------------------------------------------------------------------

namespace AriaCS {

public class ArSignalHandler : ArASyncTask {
  private global::System.Runtime.InteropServices.HandleRef swigCPtr;

  public ArSignalHandler(global::System.IntPtr cPtr, bool cMemoryOwn) : base(AriaCSPINVOKE.ArSignalHandler_SWIGUpcast(cPtr), cMemoryOwn) {
    swigCPtr = new global::System.Runtime.InteropServices.HandleRef(this, cPtr);
  }

  public static global::System.Runtime.InteropServices.HandleRef getCPtr(ArSignalHandler obj) {
    return (obj == null) ? new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero) : obj.swigCPtr;
  }

  ~ArSignalHandler() {
    Dispose();
  }

  public override void Dispose() {
    lock(this) {
      if (swigCPtr.Handle != global::System.IntPtr.Zero) {
        if (swigCMemOwn) {
          swigCMemOwn = false;
          AriaCSPINVOKE.delete_ArSignalHandler(swigCPtr);
        }
        swigCPtr = new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero);
      }
      global::System.GC.SuppressFinalize(this);
      base.Dispose();
    }
  }

  public static void createHandlerNonThreaded() {
    AriaCSPINVOKE.ArSignalHandler_createHandlerNonThreaded();
  }

  public static void createHandlerThreaded() {
    AriaCSPINVOKE.ArSignalHandler_createHandlerThreaded();
  }

  public static void blockCommon() {
    AriaCSPINVOKE.ArSignalHandler_blockCommon();
  }

  public static void unblockAll() {
    AriaCSPINVOKE.ArSignalHandler_unblockAll();
  }

  public static void block(ArSignalHandler.Signal sig) {
    AriaCSPINVOKE.ArSignalHandler_block((int)sig);
  }

  public static void unblock(ArSignalHandler.Signal sig) {
    AriaCSPINVOKE.ArSignalHandler_unblock((int)sig);
  }

  public static void handle(ArSignalHandler.Signal sig) {
    AriaCSPINVOKE.ArSignalHandler_handle((int)sig);
  }

  public static void unhandle(ArSignalHandler.Signal sig) {
    AriaCSPINVOKE.ArSignalHandler_unhandle((int)sig);
  }

  public static void addHandlerCB(ArFunctor1_Int func, ArListPos.Pos position) {
    AriaCSPINVOKE.ArSignalHandler_addHandlerCB(ArFunctor1_Int.getCPtr(func), (int)position);
  }

  public static void delHandlerCB(ArFunctor1_Int func) {
    AriaCSPINVOKE.ArSignalHandler_delHandlerCB(ArFunctor1_Int.getCPtr(func));
  }

  public static void delAllHandlerCBs() {
    AriaCSPINVOKE.ArSignalHandler_delAllHandlerCBs();
  }

  public static ArSignalHandler getHandler() {
    global::System.IntPtr cPtr = AriaCSPINVOKE.ArSignalHandler_getHandler();
    ArSignalHandler ret = (cPtr == global::System.IntPtr.Zero) ? null : new ArSignalHandler(cPtr, false);
    return ret;
  }

  public static string nameSignal(int sig) {
    string ret = AriaCSPINVOKE.ArSignalHandler_nameSignal(sig);
    return ret;
  }

  public static void blockCommonThisThread() {
    AriaCSPINVOKE.ArSignalHandler_blockCommonThisThread();
  }

  public static void blockAllThisThread() {
    AriaCSPINVOKE.ArSignalHandler_blockAllThisThread();
  }

  public override SWIGTYPE_p_void runThread(SWIGTYPE_p_void arg) {
    global::System.IntPtr cPtr = AriaCSPINVOKE.ArSignalHandler_runThread(swigCPtr, SWIGTYPE_p_void.getCPtr(arg));
    SWIGTYPE_p_void ret = (cPtr == global::System.IntPtr.Zero) ? null : new SWIGTYPE_p_void(cPtr, false);
    return ret;
  }

  public static void signalCB(int sig) {
    AriaCSPINVOKE.ArSignalHandler_signalCB(sig);
  }

  public static void logThread() {
    AriaCSPINVOKE.ArSignalHandler_logThread();
  }

  public enum Signal {
    SigHUP = 1,
    SigINT,
    SigQUIT,
    SigILL,
    SigTRAP,
    SigABRT,
    SigBUS,
    SigFPE,
    SigKILL,
    SigUSR1,
    SigSEGV,
    SigUSR2,
    SigPIPE,
    SigALRM,
    SigTERM,
    SigSTKFLT,
    SigCHLD,
    SigCONT,
    SigSTOP,
    SigTSTP,
    SigTTIN,
    SigTTOU,
    SigURG,
    SigXCPU,
    SigXFSZ,
    SigVTALRM,
    SigPROF,
    SigWINCH,
    SigIO,
    SigPWR
  }

}

}
