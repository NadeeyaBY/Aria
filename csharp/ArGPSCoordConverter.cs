//------------------------------------------------------------------------------
// <auto-generated />
//
// This file was automatically generated by SWIG (http://www.swig.org).
// Version 3.0.8
//
// Do not make changes to this file unless you know what you are doing--modify
// the SWIG interface file instead.
//------------------------------------------------------------------------------

namespace AriaCS {

public class ArGPSCoordConverter : global::System.IDisposable {
  private global::System.Runtime.InteropServices.HandleRef swigCPtr;
  protected bool swigCMemOwn;

  public ArGPSCoordConverter(global::System.IntPtr cPtr, bool cMemoryOwn) {
    swigCMemOwn = cMemoryOwn;
    swigCPtr = new global::System.Runtime.InteropServices.HandleRef(this, cPtr);
  }

  public static global::System.Runtime.InteropServices.HandleRef getCPtr(ArGPSCoordConverter obj) {
    return (obj == null) ? new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero) : obj.swigCPtr;
  }

  ~ArGPSCoordConverter() {
    Dispose();
  }

  public virtual void Dispose() {
    lock(this) {
      if (swigCPtr.Handle != global::System.IntPtr.Zero) {
        if (swigCMemOwn) {
          swigCMemOwn = false;
          AriaCSPINVOKE.delete_ArGPSCoordConverter(swigCPtr);
        }
        swigCPtr = new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero);
      }
      global::System.GC.SuppressFinalize(this);
    }
  }

  public ArGPSCoordConverter(ArGPS _gps) : this(AriaCSPINVOKE.new_ArGPSCoordConverter__SWIG_0(ArGPS.getCPtr(_gps)), true) {
  }

  public ArGPSCoordConverter() : this(AriaCSPINVOKE.new_ArGPSCoordConverter__SWIG_1(), true) {
  }

  public ArGPSCoordConverter(SWIGTYPE_p_double originLat, SWIGTYPE_p_double originLon, SWIGTYPE_p_double originAlt, ArGPS _gps) : this(AriaCSPINVOKE.new_ArGPSCoordConverter__SWIG_2(SWIGTYPE_p_double.getCPtr(originLat), SWIGTYPE_p_double.getCPtr(originLon), SWIGTYPE_p_double.getCPtr(originAlt), ArGPS.getCPtr(_gps)), true) {
    if (AriaCSPINVOKE.SWIGPendingException.Pending) throw AriaCSPINVOKE.SWIGPendingException.Retrieve();
  }

  public ArGPSCoordConverter(SWIGTYPE_p_double originLat, SWIGTYPE_p_double originLon, SWIGTYPE_p_double originAlt) : this(AriaCSPINVOKE.new_ArGPSCoordConverter__SWIG_3(SWIGTYPE_p_double.getCPtr(originLat), SWIGTYPE_p_double.getCPtr(originLon), SWIGTYPE_p_double.getCPtr(originAlt)), true) {
    if (AriaCSPINVOKE.SWIGPendingException.Pending) throw AriaCSPINVOKE.SWIGPendingException.Retrieve();
  }

  public ArGPSCoordConverter(ArLLACoords originlla, ArGPS _gps) : this(AriaCSPINVOKE.new_ArGPSCoordConverter__SWIG_4(ArLLACoords.getCPtr(originlla), ArGPS.getCPtr(_gps)), true) {
    if (AriaCSPINVOKE.SWIGPendingException.Pending) throw AriaCSPINVOKE.SWIGPendingException.Retrieve();
  }

  public Ar3DPoint convert(ArLLACoords lla) {
    Ar3DPoint ret = new Ar3DPoint(AriaCSPINVOKE.ArGPSCoordConverter_convert__SWIG_0(swigCPtr, ArLLACoords.getCPtr(lla)), true);
    if (AriaCSPINVOKE.SWIGPendingException.Pending) throw AriaCSPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public Ar3DPoint convert(SWIGTYPE_p_double lat, SWIGTYPE_p_double lon, SWIGTYPE_p_double alt) {
    Ar3DPoint ret = new Ar3DPoint(AriaCSPINVOKE.ArGPSCoordConverter_convert__SWIG_1(swigCPtr, SWIGTYPE_p_double.getCPtr(lat), SWIGTYPE_p_double.getCPtr(lon), SWIGTYPE_p_double.getCPtr(alt)), true);
    if (AriaCSPINVOKE.SWIGPendingException.Pending) throw AriaCSPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public Ar3DPoint getCurrent() {
    Ar3DPoint ret = new Ar3DPoint(AriaCSPINVOKE.ArGPSCoordConverter_getCurrent(swigCPtr), true);
    return ret;
  }

  public SWIGTYPE_p_ArRetFunctorT_Ar3DPoint_t getCurrentFunc() {
    global::System.IntPtr cPtr = AriaCSPINVOKE.ArGPSCoordConverter_getCurrentFunc(swigCPtr);
    SWIGTYPE_p_ArRetFunctorT_Ar3DPoint_t ret = (cPtr == global::System.IntPtr.Zero) ? null : new SWIGTYPE_p_ArRetFunctorT_Ar3DPoint_t(cPtr, false);
    return ret;
  }

  public ArPose getCurrent2DPose() {
    ArPose ret = new ArPose(AriaCSPINVOKE.ArGPSCoordConverter_getCurrent2DPose(swigCPtr), true);
    return ret;
  }

  public SWIGTYPE_p_ArRetFunctorT_ArPose_t getCurrent2DPoseFunc() {
    global::System.IntPtr cPtr = AriaCSPINVOKE.ArGPSCoordConverter_getCurrent2DPoseFunc(swigCPtr);
    SWIGTYPE_p_ArRetFunctorT_ArPose_t ret = (cPtr == global::System.IntPtr.Zero) ? null : new SWIGTYPE_p_ArRetFunctorT_ArPose_t(cPtr, false);
    return ret;
  }

}

}
