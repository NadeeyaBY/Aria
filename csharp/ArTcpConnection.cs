//------------------------------------------------------------------------------
// <auto-generated />
//
// This file was automatically generated by SWIG (http://www.swig.org).
// Version 3.0.8
//
// Do not make changes to this file unless you know what you are doing--modify
// the SWIG interface file instead.
//------------------------------------------------------------------------------

namespace AriaCS {

public class ArTcpConnection : ArDeviceConnection {
  private global::System.Runtime.InteropServices.HandleRef swigCPtr;

  public ArTcpConnection(global::System.IntPtr cPtr, bool cMemoryOwn) : base(AriaCSPINVOKE.ArTcpConnection_SWIGUpcast(cPtr), cMemoryOwn) {
    swigCPtr = new global::System.Runtime.InteropServices.HandleRef(this, cPtr);
  }

  public static global::System.Runtime.InteropServices.HandleRef getCPtr(ArTcpConnection obj) {
    return (obj == null) ? new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero) : obj.swigCPtr;
  }

  ~ArTcpConnection() {
    Dispose();
  }

  public override void Dispose() {
    lock(this) {
      if (swigCPtr.Handle != global::System.IntPtr.Zero) {
        if (swigCMemOwn) {
          swigCMemOwn = false;
          AriaCSPINVOKE.delete_ArTcpConnection(swigCPtr);
        }
        swigCPtr = new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero);
      }
      global::System.GC.SuppressFinalize(this);
      base.Dispose();
    }
  }

  public ArTcpConnection() : this(AriaCSPINVOKE.new_ArTcpConnection(), true) {
  }

  public int open(string host, int port) {
    int ret = AriaCSPINVOKE.ArTcpConnection_open__SWIG_0(swigCPtr, host, port);
    return ret;
  }

  public int open(string host) {
    int ret = AriaCSPINVOKE.ArTcpConnection_open__SWIG_1(swigCPtr, host);
    return ret;
  }

  public int open() {
    int ret = AriaCSPINVOKE.ArTcpConnection_open__SWIG_2(swigCPtr);
    return ret;
  }

  public void setPort(string host, int port) {
    AriaCSPINVOKE.ArTcpConnection_setPort__SWIG_0(swigCPtr, host, port);
  }

  public void setPort(string host) {
    AriaCSPINVOKE.ArTcpConnection_setPort__SWIG_1(swigCPtr, host);
  }

  public void setPort() {
    AriaCSPINVOKE.ArTcpConnection_setPort__SWIG_2(swigCPtr);
  }

  public override bool openSimple() {
    bool ret = AriaCSPINVOKE.ArTcpConnection_openSimple(swigCPtr);
    return ret;
  }

  public override int getStatus() {
    int ret = AriaCSPINVOKE.ArTcpConnection_getStatus(swigCPtr);
    return ret;
  }

  public override bool close() {
    bool ret = AriaCSPINVOKE.ArTcpConnection_close(swigCPtr);
    return ret;
  }

  public override int read(string data, uint size, uint msWait) {
    int ret = AriaCSPINVOKE.ArTcpConnection_read__SWIG_0(swigCPtr, data, size, msWait);
    return ret;
  }

  public override int read(string data, uint size) {
    int ret = AriaCSPINVOKE.ArTcpConnection_read__SWIG_1(swigCPtr, data, size);
    return ret;
  }

  public override int write(string data, uint size) {
    int ret = AriaCSPINVOKE.ArTcpConnection_write(swigCPtr, data, size);
    return ret;
  }

  public override string getOpenMessage(int messageNumber) {
    string ret = AriaCSPINVOKE.ArTcpConnection_getOpenMessage(swigCPtr, messageNumber);
    return ret;
  }

  public override ArTime getTimeRead(int index) {
    ArTime ret = new ArTime(AriaCSPINVOKE.ArTcpConnection_getTimeRead(swigCPtr, index), true);
    return ret;
  }

  public override bool isTimeStamping() {
    bool ret = AriaCSPINVOKE.ArTcpConnection_isTimeStamping(swigCPtr);
    return ret;
  }

  public string getHost() {
    string ret = AriaCSPINVOKE.ArTcpConnection_getHost(swigCPtr);
    return ret;
  }

  public int getPort() {
    int ret = AriaCSPINVOKE.ArTcpConnection_getPort(swigCPtr);
    return ret;
  }

  public int internalOpen() {
    int ret = AriaCSPINVOKE.ArTcpConnection_internalOpen(swigCPtr);
    return ret;
  }

  public void setSocket(ArSocket socket) {
    AriaCSPINVOKE.ArTcpConnection_setSocket(swigCPtr, ArSocket.getCPtr(socket));
  }

  public ArSocket getSocket() {
    global::System.IntPtr cPtr = AriaCSPINVOKE.ArTcpConnection_getSocket(swigCPtr);
    ArSocket ret = (cPtr == global::System.IntPtr.Zero) ? null : new ArSocket(cPtr, false);
    return ret;
  }

  public void setStatus(int status) {
    AriaCSPINVOKE.ArTcpConnection_setStatus(swigCPtr, status);
  }

  public enum Open {
    OPEN_NET_FAIL = 1,
    OPEN_BAD_HOST,
    OPEN_NO_ROUTE,
    OPEN_CON_REFUSED
  }

}

}
