/* ----------------------------------------------------------------------------
 * This file was automatically generated by SWIG (http://www.swig.org).
 * Version 3.0.8
 *
 * This file is not intended to be easily readable and contains a number of
 * coding conventions designed to improve portability and efficiency. Do not make
 * changes to this file unless you know what you are doing--modify the SWIG
 * interface file instead.
 * ----------------------------------------------------------------------------- */


#ifndef SWIGCSHARP
#define SWIGCSHARP
#endif

#define SWIG_DIRECTORS


#ifdef __cplusplus
/* SwigValueWrapper is described in swig.swg */
template<typename T> class SwigValueWrapper {
  struct SwigMovePointer {
    T *ptr;
    SwigMovePointer(T *p) : ptr(p) { }
    ~SwigMovePointer() { delete ptr; }
    SwigMovePointer& operator=(SwigMovePointer& rhs) { T* oldptr = ptr; ptr = 0; delete oldptr; ptr = rhs.ptr; rhs.ptr = 0; return *this; }
  } pointer;
  SwigValueWrapper& operator=(const SwigValueWrapper<T>& rhs);
  SwigValueWrapper(const SwigValueWrapper<T>& rhs);
public:
  SwigValueWrapper() : pointer(0) { }
  SwigValueWrapper& operator=(const T& t) { SwigMovePointer tmp(new T(t)); pointer = tmp; return *this; }
  operator T&() const { return *pointer.ptr; }
  T *operator&() { return pointer.ptr; }
};

template <typename T> T SwigValueInit() {
  return T();
}
#endif

/* -----------------------------------------------------------------------------
 *  This section contains generic SWIG labels for method/variable
 *  declarations/attributes, and other compiler dependent labels.
 * ----------------------------------------------------------------------------- */

/* template workaround for compilers that cannot correctly implement the C++ standard */
#ifndef SWIGTEMPLATEDISAMBIGUATOR
# if defined(__SUNPRO_CC) && (__SUNPRO_CC <= 0x560)
#  define SWIGTEMPLATEDISAMBIGUATOR template
# elif defined(__HP_aCC)
/* Needed even with `aCC -AA' when `aCC -V' reports HP ANSI C++ B3910B A.03.55 */
/* If we find a maximum version that requires this, the test would be __HP_aCC <= 35500 for A.03.55 */
#  define SWIGTEMPLATEDISAMBIGUATOR template
# else
#  define SWIGTEMPLATEDISAMBIGUATOR
# endif
#endif

/* inline attribute */
#ifndef SWIGINLINE
# if defined(__cplusplus) || (defined(__GNUC__) && !defined(__STRICT_ANSI__))
#   define SWIGINLINE inline
# else
#   define SWIGINLINE
# endif
#endif

/* attribute recognised by some compilers to avoid 'unused' warnings */
#ifndef SWIGUNUSED
# if defined(__GNUC__)
#   if !(defined(__cplusplus)) || (__GNUC__ > 3 || (__GNUC__ == 3 && __GNUC_MINOR__ >= 4))
#     define SWIGUNUSED __attribute__ ((__unused__))
#   else
#     define SWIGUNUSED
#   endif
# elif defined(__ICC)
#   define SWIGUNUSED __attribute__ ((__unused__))
# else
#   define SWIGUNUSED
# endif
#endif

#ifndef SWIG_MSC_UNSUPPRESS_4505
# if defined(_MSC_VER)
#   pragma warning(disable : 4505) /* unreferenced local function has been removed */
# endif
#endif

#ifndef SWIGUNUSEDPARM
# ifdef __cplusplus
#   define SWIGUNUSEDPARM(p)
# else
#   define SWIGUNUSEDPARM(p) p SWIGUNUSED
# endif
#endif

/* internal SWIG method */
#ifndef SWIGINTERN
# define SWIGINTERN static SWIGUNUSED
#endif

/* internal inline SWIG method */
#ifndef SWIGINTERNINLINE
# define SWIGINTERNINLINE SWIGINTERN SWIGINLINE
#endif

/* exporting methods */
#if (__GNUC__ >= 4) || (__GNUC__ == 3 && __GNUC_MINOR__ >= 4)
#  ifndef GCC_HASCLASSVISIBILITY
#    define GCC_HASCLASSVISIBILITY
#  endif
#endif

#ifndef SWIGEXPORT
# if defined(_WIN32) || defined(__WIN32__) || defined(__CYGWIN__)
#   if defined(STATIC_LINKED)
#     define SWIGEXPORT
#   else
#     define SWIGEXPORT __declspec(dllexport)
#   endif
# else
#   if defined(__GNUC__) && defined(GCC_HASCLASSVISIBILITY)
#     define SWIGEXPORT __attribute__ ((visibility("default")))
#   else
#     define SWIGEXPORT
#   endif
# endif
#endif

/* calling conventions for Windows */
#ifndef SWIGSTDCALL
# if defined(_WIN32) || defined(__WIN32__) || defined(__CYGWIN__)
#   define SWIGSTDCALL __stdcall
# else
#   define SWIGSTDCALL
# endif
#endif

/* Deal with Microsoft's attempt at deprecating C standard runtime functions */
#if !defined(SWIG_NO_CRT_SECURE_NO_DEPRECATE) && defined(_MSC_VER) && !defined(_CRT_SECURE_NO_DEPRECATE)
# define _CRT_SECURE_NO_DEPRECATE
#endif

/* Deal with Microsoft's attempt at deprecating methods in the standard C++ library */
#if !defined(SWIG_NO_SCL_SECURE_NO_DEPRECATE) && defined(_MSC_VER) && !defined(_SCL_SECURE_NO_DEPRECATE)
# define _SCL_SECURE_NO_DEPRECATE
#endif

/* Deal with Apple's deprecated 'AssertMacros.h' from Carbon-framework */
#if defined(__APPLE__) && !defined(__ASSERT_MACROS_DEFINE_VERSIONS_WITHOUT_UNDERSCORES)
# define __ASSERT_MACROS_DEFINE_VERSIONS_WITHOUT_UNDERSCORES 0
#endif

/* Intel's compiler complains if a variable which was never initialised is
 * cast to void, which is a common idiom which we use to indicate that we
 * are aware a variable isn't used.  So we just silence that warning.
 * See: https://github.com/swig/swig/issues/192 for more discussion.
 */
#ifdef __INTEL_COMPILER
# pragma warning disable 592
#endif


#include <stdlib.h>
#include <string.h>
#include <stdio.h>


/* Support for throwing C# exceptions from C/C++. There are two types: 
 * Exceptions that take a message and ArgumentExceptions that take a message and a parameter name. */
typedef enum {
  SWIG_CSharpApplicationException,
  SWIG_CSharpArithmeticException,
  SWIG_CSharpDivideByZeroException,
  SWIG_CSharpIndexOutOfRangeException,
  SWIG_CSharpInvalidCastException,
  SWIG_CSharpInvalidOperationException,
  SWIG_CSharpIOException,
  SWIG_CSharpNullReferenceException,
  SWIG_CSharpOutOfMemoryException,
  SWIG_CSharpOverflowException,
  SWIG_CSharpSystemException
} SWIG_CSharpExceptionCodes;

typedef enum {
  SWIG_CSharpArgumentException,
  SWIG_CSharpArgumentNullException,
  SWIG_CSharpArgumentOutOfRangeException
} SWIG_CSharpExceptionArgumentCodes;

typedef void (SWIGSTDCALL* SWIG_CSharpExceptionCallback_t)(const char *);
typedef void (SWIGSTDCALL* SWIG_CSharpExceptionArgumentCallback_t)(const char *, const char *);

typedef struct {
  SWIG_CSharpExceptionCodes code;
  SWIG_CSharpExceptionCallback_t callback;
} SWIG_CSharpException_t;

typedef struct {
  SWIG_CSharpExceptionArgumentCodes code;
  SWIG_CSharpExceptionArgumentCallback_t callback;
} SWIG_CSharpExceptionArgument_t;

static SWIG_CSharpException_t SWIG_csharp_exceptions[] = {
  { SWIG_CSharpApplicationException, NULL },
  { SWIG_CSharpArithmeticException, NULL },
  { SWIG_CSharpDivideByZeroException, NULL },
  { SWIG_CSharpIndexOutOfRangeException, NULL },
  { SWIG_CSharpInvalidCastException, NULL },
  { SWIG_CSharpInvalidOperationException, NULL },
  { SWIG_CSharpIOException, NULL },
  { SWIG_CSharpNullReferenceException, NULL },
  { SWIG_CSharpOutOfMemoryException, NULL },
  { SWIG_CSharpOverflowException, NULL },
  { SWIG_CSharpSystemException, NULL }
};

static SWIG_CSharpExceptionArgument_t SWIG_csharp_exceptions_argument[] = {
  { SWIG_CSharpArgumentException, NULL },
  { SWIG_CSharpArgumentNullException, NULL },
  { SWIG_CSharpArgumentOutOfRangeException, NULL }
};

static void SWIGUNUSED SWIG_CSharpSetPendingException(SWIG_CSharpExceptionCodes code, const char *msg) {
  SWIG_CSharpExceptionCallback_t callback = SWIG_csharp_exceptions[SWIG_CSharpApplicationException].callback;
  if ((size_t)code < sizeof(SWIG_csharp_exceptions)/sizeof(SWIG_CSharpException_t)) {
    callback = SWIG_csharp_exceptions[code].callback;
  }
  callback(msg);
}

static void SWIGUNUSED SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpExceptionArgumentCodes code, const char *msg, const char *param_name) {
  SWIG_CSharpExceptionArgumentCallback_t callback = SWIG_csharp_exceptions_argument[SWIG_CSharpArgumentException].callback;
  if ((size_t)code < sizeof(SWIG_csharp_exceptions_argument)/sizeof(SWIG_CSharpExceptionArgument_t)) {
    callback = SWIG_csharp_exceptions_argument[code].callback;
  }
  callback(msg, param_name);
}


#ifdef __cplusplus
extern "C" 
#endif
SWIGEXPORT void SWIGSTDCALL SWIGRegisterExceptionCallbacks_AriaCS(
                                                SWIG_CSharpExceptionCallback_t applicationCallback,
                                                SWIG_CSharpExceptionCallback_t arithmeticCallback,
                                                SWIG_CSharpExceptionCallback_t divideByZeroCallback, 
                                                SWIG_CSharpExceptionCallback_t indexOutOfRangeCallback, 
                                                SWIG_CSharpExceptionCallback_t invalidCastCallback,
                                                SWIG_CSharpExceptionCallback_t invalidOperationCallback,
                                                SWIG_CSharpExceptionCallback_t ioCallback,
                                                SWIG_CSharpExceptionCallback_t nullReferenceCallback,
                                                SWIG_CSharpExceptionCallback_t outOfMemoryCallback, 
                                                SWIG_CSharpExceptionCallback_t overflowCallback, 
                                                SWIG_CSharpExceptionCallback_t systemCallback) {
  SWIG_csharp_exceptions[SWIG_CSharpApplicationException].callback = applicationCallback;
  SWIG_csharp_exceptions[SWIG_CSharpArithmeticException].callback = arithmeticCallback;
  SWIG_csharp_exceptions[SWIG_CSharpDivideByZeroException].callback = divideByZeroCallback;
  SWIG_csharp_exceptions[SWIG_CSharpIndexOutOfRangeException].callback = indexOutOfRangeCallback;
  SWIG_csharp_exceptions[SWIG_CSharpInvalidCastException].callback = invalidCastCallback;
  SWIG_csharp_exceptions[SWIG_CSharpInvalidOperationException].callback = invalidOperationCallback;
  SWIG_csharp_exceptions[SWIG_CSharpIOException].callback = ioCallback;
  SWIG_csharp_exceptions[SWIG_CSharpNullReferenceException].callback = nullReferenceCallback;
  SWIG_csharp_exceptions[SWIG_CSharpOutOfMemoryException].callback = outOfMemoryCallback;
  SWIG_csharp_exceptions[SWIG_CSharpOverflowException].callback = overflowCallback;
  SWIG_csharp_exceptions[SWIG_CSharpSystemException].callback = systemCallback;
}

#ifdef __cplusplus
extern "C" 
#endif
SWIGEXPORT void SWIGSTDCALL SWIGRegisterExceptionArgumentCallbacks_AriaCS(
                                                SWIG_CSharpExceptionArgumentCallback_t argumentCallback,
                                                SWIG_CSharpExceptionArgumentCallback_t argumentNullCallback,
                                                SWIG_CSharpExceptionArgumentCallback_t argumentOutOfRangeCallback) {
  SWIG_csharp_exceptions_argument[SWIG_CSharpArgumentException].callback = argumentCallback;
  SWIG_csharp_exceptions_argument[SWIG_CSharpArgumentNullException].callback = argumentNullCallback;
  SWIG_csharp_exceptions_argument[SWIG_CSharpArgumentOutOfRangeException].callback = argumentOutOfRangeCallback;
}


/* Callback for returning strings to C# without leaking memory */
typedef char * (SWIGSTDCALL* SWIG_CSharpStringHelperCallback)(const char *);
static SWIG_CSharpStringHelperCallback SWIG_csharp_string_callback = NULL;


#ifdef __cplusplus
extern "C" 
#endif
SWIGEXPORT void SWIGSTDCALL SWIGRegisterStringCallback_AriaCS(SWIG_CSharpStringHelperCallback callback) {
  SWIG_csharp_string_callback = callback;
}


/* Contract support */

#define SWIG_contract_assert(nullreturn, expr, msg) if (!(expr)) {SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, msg, ""); return nullreturn; } else

/* -----------------------------------------------------------------------------
 * director_common.swg
 *
 * This file contains support for director classes which is common between
 * languages.
 * ----------------------------------------------------------------------------- */

/*
  Use -DSWIG_DIRECTOR_STATIC if you prefer to avoid the use of the
  'Swig' namespace. This could be useful for multi-modules projects.
*/
#ifdef SWIG_DIRECTOR_STATIC
/* Force anonymous (static) namespace */
#define Swig
#endif
/* -----------------------------------------------------------------------------
 * director.swg
 *
 * This file contains support for director classes so that C# proxy
 * methods can be called from C++.
 * ----------------------------------------------------------------------------- */

#if defined(DEBUG_DIRECTOR_OWNED)
#include <iostream>
#endif
#include <string>
#include <exception>

namespace Swig {
  /* Director base class - not currently used in C# directors */
  class Director {
  };

  /* Base class for director exceptions */
  class DirectorException : public std::exception {
  protected:
    std::string swig_msg;

  public:
    DirectorException(const char *msg) : swig_msg(msg) {
    }

    DirectorException(const std::string &msg) : swig_msg(msg) {
    }

    virtual ~DirectorException() throw() {
    }

    const char *what() const throw() {
      return swig_msg.c_str();
    }
  };

  /* Pure virtual method exception */
  class DirectorPureVirtualException : public DirectorException {
  public:
    DirectorPureVirtualException(const char *msg) : DirectorException(std::string("Attempt to invoke pure virtual method ") + msg) {
    }
  };
}


        /* SWIG Wrapper Interface Definition for Aria */


#include "Aria.h"
#include "ArGPSConnector.h"
#include "ArSystemStatus.h"
#include "ArMD5Calculator.h"
/*#include "SwigTestClass.h"*/
#include "wrapper_ExtraClasses.h"
#include "wrapper_Functors.h"

#include <cstddef>

#pragma GCC diagnostic ignored "-Wunused-label"


#include "wrapper_Functors.h"


struct ArJoyVec3f { double x, y, z; };
struct ArJoyVec3i { int x, y, z; };


#include <stdexcept>


#include <vector>
#include <algorithm>
#include <stdexcept>

SWIGINTERN std::vector< ArPose > *new_std_vector_Sl_ArPose_Sg___SWIG_2(int capacity){
        std::vector< ArPose >* pv = 0;
        if (capacity >= 0) {
          pv = new std::vector< ArPose >();
          pv->reserve(capacity);
       } else {
          throw std::out_of_range("capacity");
       }
       return pv;
      }
SWIGINTERN ArPose std_vector_Sl_ArPose_Sg__getitemcopy(std::vector< ArPose > *self,int index){
        if (index>=0 && index<(int)self->size())
          return (*self)[index];
        else
          throw std::out_of_range("index");
      }
SWIGINTERN ArPose const &std_vector_Sl_ArPose_Sg__getitem(std::vector< ArPose > *self,int index){
        if (index>=0 && index<(int)self->size())
          return (*self)[index];
        else
          throw std::out_of_range("index");
      }
SWIGINTERN void std_vector_Sl_ArPose_Sg__setitem(std::vector< ArPose > *self,int index,ArPose const &val){
        if (index>=0 && index<(int)self->size())
          (*self)[index] = val;
        else
          throw std::out_of_range("index");
      }
SWIGINTERN void std_vector_Sl_ArPose_Sg__AddRange(std::vector< ArPose > *self,std::vector< ArPose > const &values){
        self->insert(self->end(), values.begin(), values.end());
      }
SWIGINTERN std::vector< ArPose > *std_vector_Sl_ArPose_Sg__GetRange(std::vector< ArPose > *self,int index,int count){
        if (index < 0)
          throw std::out_of_range("index");
        if (count < 0)
          throw std::out_of_range("count");
        if (index >= (int)self->size()+1 || index+count > (int)self->size())
          throw std::invalid_argument("invalid range");
        return new std::vector< ArPose >(self->begin()+index, self->begin()+index+count);
      }
SWIGINTERN void std_vector_Sl_ArPose_Sg__Insert(std::vector< ArPose > *self,int index,ArPose const &x){
        if (index>=0 && index<(int)self->size()+1)
          self->insert(self->begin()+index, x);
        else
          throw std::out_of_range("index");
      }
SWIGINTERN void std_vector_Sl_ArPose_Sg__InsertRange(std::vector< ArPose > *self,int index,std::vector< ArPose > const &values){
        if (index>=0 && index<(int)self->size()+1)
          self->insert(self->begin()+index, values.begin(), values.end());
        else
          throw std::out_of_range("index");
      }
SWIGINTERN void std_vector_Sl_ArPose_Sg__RemoveAt(std::vector< ArPose > *self,int index){
        if (index>=0 && index<(int)self->size())
          self->erase(self->begin() + index);
        else
          throw std::out_of_range("index");
      }
SWIGINTERN void std_vector_Sl_ArPose_Sg__RemoveRange(std::vector< ArPose > *self,int index,int count){
        if (index < 0)
          throw std::out_of_range("index");
        if (count < 0)
          throw std::out_of_range("count");
        if (index >= (int)self->size()+1 || index+count > (int)self->size())
          throw std::invalid_argument("invalid range");
        self->erase(self->begin()+index, self->begin()+index+count);
      }
SWIGINTERN std::vector< ArPose > *std_vector_Sl_ArPose_Sg__Repeat(ArPose const &value,int count){
        if (count < 0)
          throw std::out_of_range("count");
        return new std::vector< ArPose >(count, value);
      }
SWIGINTERN void std_vector_Sl_ArPose_Sg__Reverse__SWIG_0(std::vector< ArPose > *self){
        std::reverse(self->begin(), self->end());
      }
SWIGINTERN void std_vector_Sl_ArPose_Sg__Reverse__SWIG_1(std::vector< ArPose > *self,int index,int count){
        if (index < 0)
          throw std::out_of_range("index");
        if (count < 0)
          throw std::out_of_range("count");
        if (index >= (int)self->size()+1 || index+count > (int)self->size())
          throw std::invalid_argument("invalid range");
        std::reverse(self->begin()+index, self->begin()+index+count);
      }
SWIGINTERN void std_vector_Sl_ArPose_Sg__SetRange(std::vector< ArPose > *self,int index,std::vector< ArPose > const &values){
        if (index < 0)
          throw std::out_of_range("index");
        if (index+values.size() > self->size())
          throw std::out_of_range("index");
        std::copy(values.begin(), values.end(), self->begin()+index);
      }
SWIGINTERN std::vector< ArPoseWithTime > *new_std_vector_Sl_ArPoseWithTime_Sg___SWIG_2(int capacity){
        std::vector< ArPoseWithTime >* pv = 0;
        if (capacity >= 0) {
          pv = new std::vector< ArPoseWithTime >();
          pv->reserve(capacity);
       } else {
          throw std::out_of_range("capacity");
       }
       return pv;
      }
SWIGINTERN ArPoseWithTime std_vector_Sl_ArPoseWithTime_Sg__getitemcopy(std::vector< ArPoseWithTime > *self,int index){
        if (index>=0 && index<(int)self->size())
          return (*self)[index];
        else
          throw std::out_of_range("index");
      }
SWIGINTERN ArPoseWithTime const &std_vector_Sl_ArPoseWithTime_Sg__getitem(std::vector< ArPoseWithTime > *self,int index){
        if (index>=0 && index<(int)self->size())
          return (*self)[index];
        else
          throw std::out_of_range("index");
      }
SWIGINTERN void std_vector_Sl_ArPoseWithTime_Sg__setitem(std::vector< ArPoseWithTime > *self,int index,ArPoseWithTime const &val){
        if (index>=0 && index<(int)self->size())
          (*self)[index] = val;
        else
          throw std::out_of_range("index");
      }
SWIGINTERN void std_vector_Sl_ArPoseWithTime_Sg__AddRange(std::vector< ArPoseWithTime > *self,std::vector< ArPoseWithTime > const &values){
        self->insert(self->end(), values.begin(), values.end());
      }
SWIGINTERN std::vector< ArPoseWithTime > *std_vector_Sl_ArPoseWithTime_Sg__GetRange(std::vector< ArPoseWithTime > *self,int index,int count){
        if (index < 0)
          throw std::out_of_range("index");
        if (count < 0)
          throw std::out_of_range("count");
        if (index >= (int)self->size()+1 || index+count > (int)self->size())
          throw std::invalid_argument("invalid range");
        return new std::vector< ArPoseWithTime >(self->begin()+index, self->begin()+index+count);
      }
SWIGINTERN void std_vector_Sl_ArPoseWithTime_Sg__Insert(std::vector< ArPoseWithTime > *self,int index,ArPoseWithTime const &x){
        if (index>=0 && index<(int)self->size()+1)
          self->insert(self->begin()+index, x);
        else
          throw std::out_of_range("index");
      }
SWIGINTERN void std_vector_Sl_ArPoseWithTime_Sg__InsertRange(std::vector< ArPoseWithTime > *self,int index,std::vector< ArPoseWithTime > const &values){
        if (index>=0 && index<(int)self->size()+1)
          self->insert(self->begin()+index, values.begin(), values.end());
        else
          throw std::out_of_range("index");
      }
SWIGINTERN void std_vector_Sl_ArPoseWithTime_Sg__RemoveAt(std::vector< ArPoseWithTime > *self,int index){
        if (index>=0 && index<(int)self->size())
          self->erase(self->begin() + index);
        else
          throw std::out_of_range("index");
      }
SWIGINTERN void std_vector_Sl_ArPoseWithTime_Sg__RemoveRange(std::vector< ArPoseWithTime > *self,int index,int count){
        if (index < 0)
          throw std::out_of_range("index");
        if (count < 0)
          throw std::out_of_range("count");
        if (index >= (int)self->size()+1 || index+count > (int)self->size())
          throw std::invalid_argument("invalid range");
        self->erase(self->begin()+index, self->begin()+index+count);
      }
SWIGINTERN std::vector< ArPoseWithTime > *std_vector_Sl_ArPoseWithTime_Sg__Repeat(ArPoseWithTime const &value,int count){
        if (count < 0)
          throw std::out_of_range("count");
        return new std::vector< ArPoseWithTime >(count, value);
      }
SWIGINTERN void std_vector_Sl_ArPoseWithTime_Sg__Reverse__SWIG_0(std::vector< ArPoseWithTime > *self){
        std::reverse(self->begin(), self->end());
      }
SWIGINTERN void std_vector_Sl_ArPoseWithTime_Sg__Reverse__SWIG_1(std::vector< ArPoseWithTime > *self,int index,int count){
        if (index < 0)
          throw std::out_of_range("index");
        if (count < 0)
          throw std::out_of_range("count");
        if (index >= (int)self->size()+1 || index+count > (int)self->size())
          throw std::invalid_argument("invalid range");
        std::reverse(self->begin()+index, self->begin()+index+count);
      }
SWIGINTERN void std_vector_Sl_ArPoseWithTime_Sg__SetRange(std::vector< ArPoseWithTime > *self,int index,std::vector< ArPoseWithTime > const &values){
        if (index < 0)
          throw std::out_of_range("index");
        if (index+values.size() > self->size())
          throw std::out_of_range("index");
        std::copy(values.begin(), values.end(), self->begin()+index);
      }
SWIGINTERN std::vector< ArSensorReading > *new_std_vector_Sl_ArSensorReading_Sg___SWIG_2(int capacity){
        std::vector< ArSensorReading >* pv = 0;
        if (capacity >= 0) {
          pv = new std::vector< ArSensorReading >();
          pv->reserve(capacity);
       } else {
          throw std::out_of_range("capacity");
       }
       return pv;
      }
SWIGINTERN ArSensorReading std_vector_Sl_ArSensorReading_Sg__getitemcopy(std::vector< ArSensorReading > *self,int index){
        if (index>=0 && index<(int)self->size())
          return (*self)[index];
        else
          throw std::out_of_range("index");
      }
SWIGINTERN ArSensorReading const &std_vector_Sl_ArSensorReading_Sg__getitem(std::vector< ArSensorReading > *self,int index){
        if (index>=0 && index<(int)self->size())
          return (*self)[index];
        else
          throw std::out_of_range("index");
      }
SWIGINTERN void std_vector_Sl_ArSensorReading_Sg__setitem(std::vector< ArSensorReading > *self,int index,ArSensorReading const &val){
        if (index>=0 && index<(int)self->size())
          (*self)[index] = val;
        else
          throw std::out_of_range("index");
      }
SWIGINTERN void std_vector_Sl_ArSensorReading_Sg__AddRange(std::vector< ArSensorReading > *self,std::vector< ArSensorReading > const &values){
        self->insert(self->end(), values.begin(), values.end());
      }
SWIGINTERN std::vector< ArSensorReading > *std_vector_Sl_ArSensorReading_Sg__GetRange(std::vector< ArSensorReading > *self,int index,int count){
        if (index < 0)
          throw std::out_of_range("index");
        if (count < 0)
          throw std::out_of_range("count");
        if (index >= (int)self->size()+1 || index+count > (int)self->size())
          throw std::invalid_argument("invalid range");
        return new std::vector< ArSensorReading >(self->begin()+index, self->begin()+index+count);
      }
SWIGINTERN void std_vector_Sl_ArSensorReading_Sg__Insert(std::vector< ArSensorReading > *self,int index,ArSensorReading const &x){
        if (index>=0 && index<(int)self->size()+1)
          self->insert(self->begin()+index, x);
        else
          throw std::out_of_range("index");
      }
SWIGINTERN void std_vector_Sl_ArSensorReading_Sg__InsertRange(std::vector< ArSensorReading > *self,int index,std::vector< ArSensorReading > const &values){
        if (index>=0 && index<(int)self->size()+1)
          self->insert(self->begin()+index, values.begin(), values.end());
        else
          throw std::out_of_range("index");
      }
SWIGINTERN void std_vector_Sl_ArSensorReading_Sg__RemoveAt(std::vector< ArSensorReading > *self,int index){
        if (index>=0 && index<(int)self->size())
          self->erase(self->begin() + index);
        else
          throw std::out_of_range("index");
      }
SWIGINTERN void std_vector_Sl_ArSensorReading_Sg__RemoveRange(std::vector< ArSensorReading > *self,int index,int count){
        if (index < 0)
          throw std::out_of_range("index");
        if (count < 0)
          throw std::out_of_range("count");
        if (index >= (int)self->size()+1 || index+count > (int)self->size())
          throw std::invalid_argument("invalid range");
        self->erase(self->begin()+index, self->begin()+index+count);
      }
SWIGINTERN std::vector< ArSensorReading > *std_vector_Sl_ArSensorReading_Sg__Repeat(ArSensorReading const &value,int count){
        if (count < 0)
          throw std::out_of_range("count");
        return new std::vector< ArSensorReading >(count, value);
      }
SWIGINTERN void std_vector_Sl_ArSensorReading_Sg__Reverse__SWIG_0(std::vector< ArSensorReading > *self){
        std::reverse(self->begin(), self->end());
      }
SWIGINTERN void std_vector_Sl_ArSensorReading_Sg__Reverse__SWIG_1(std::vector< ArSensorReading > *self,int index,int count){
        if (index < 0)
          throw std::out_of_range("index");
        if (count < 0)
          throw std::out_of_range("count");
        if (index >= (int)self->size()+1 || index+count > (int)self->size())
          throw std::invalid_argument("invalid range");
        std::reverse(self->begin()+index, self->begin()+index+count);
      }
SWIGINTERN void std_vector_Sl_ArSensorReading_Sg__SetRange(std::vector< ArSensorReading > *self,int index,std::vector< ArSensorReading > const &values){
        if (index < 0)
          throw std::out_of_range("index");
        if (index+values.size() > self->size())
          throw std::out_of_range("index");
        std::copy(values.begin(), values.end(), self->begin()+index);
      }
SWIGINTERN std::vector< double > *new_std_vector_Sl_double_Sg___SWIG_2(int capacity){
        std::vector< double >* pv = 0;
        if (capacity >= 0) {
          pv = new std::vector< double >();
          pv->reserve(capacity);
       } else {
          throw std::out_of_range("capacity");
       }
       return pv;
      }
SWIGINTERN double std_vector_Sl_double_Sg__getitemcopy(std::vector< double > *self,int index){
        if (index>=0 && index<(int)self->size())
          return (*self)[index];
        else
          throw std::out_of_range("index");
      }
SWIGINTERN double const &std_vector_Sl_double_Sg__getitem(std::vector< double > *self,int index){
        if (index>=0 && index<(int)self->size())
          return (*self)[index];
        else
          throw std::out_of_range("index");
      }
SWIGINTERN void std_vector_Sl_double_Sg__setitem(std::vector< double > *self,int index,double const &val){
        if (index>=0 && index<(int)self->size())
          (*self)[index] = val;
        else
          throw std::out_of_range("index");
      }
SWIGINTERN void std_vector_Sl_double_Sg__AddRange(std::vector< double > *self,std::vector< double > const &values){
        self->insert(self->end(), values.begin(), values.end());
      }
SWIGINTERN std::vector< double > *std_vector_Sl_double_Sg__GetRange(std::vector< double > *self,int index,int count){
        if (index < 0)
          throw std::out_of_range("index");
        if (count < 0)
          throw std::out_of_range("count");
        if (index >= (int)self->size()+1 || index+count > (int)self->size())
          throw std::invalid_argument("invalid range");
        return new std::vector< double >(self->begin()+index, self->begin()+index+count);
      }
SWIGINTERN void std_vector_Sl_double_Sg__Insert(std::vector< double > *self,int index,double const &x){
        if (index>=0 && index<(int)self->size()+1)
          self->insert(self->begin()+index, x);
        else
          throw std::out_of_range("index");
      }
SWIGINTERN void std_vector_Sl_double_Sg__InsertRange(std::vector< double > *self,int index,std::vector< double > const &values){
        if (index>=0 && index<(int)self->size()+1)
          self->insert(self->begin()+index, values.begin(), values.end());
        else
          throw std::out_of_range("index");
      }
SWIGINTERN void std_vector_Sl_double_Sg__RemoveAt(std::vector< double > *self,int index){
        if (index>=0 && index<(int)self->size())
          self->erase(self->begin() + index);
        else
          throw std::out_of_range("index");
      }
SWIGINTERN void std_vector_Sl_double_Sg__RemoveRange(std::vector< double > *self,int index,int count){
        if (index < 0)
          throw std::out_of_range("index");
        if (count < 0)
          throw std::out_of_range("count");
        if (index >= (int)self->size()+1 || index+count > (int)self->size())
          throw std::invalid_argument("invalid range");
        self->erase(self->begin()+index, self->begin()+index+count);
      }
SWIGINTERN std::vector< double > *std_vector_Sl_double_Sg__Repeat(double const &value,int count){
        if (count < 0)
          throw std::out_of_range("count");
        return new std::vector< double >(count, value);
      }
SWIGINTERN void std_vector_Sl_double_Sg__Reverse__SWIG_0(std::vector< double > *self){
        std::reverse(self->begin(), self->end());
      }
SWIGINTERN void std_vector_Sl_double_Sg__Reverse__SWIG_1(std::vector< double > *self,int index,int count){
        if (index < 0)
          throw std::out_of_range("index");
        if (count < 0)
          throw std::out_of_range("count");
        if (index >= (int)self->size()+1 || index+count > (int)self->size())
          throw std::invalid_argument("invalid range");
        std::reverse(self->begin()+index, self->begin()+index+count);
      }
SWIGINTERN void std_vector_Sl_double_Sg__SetRange(std::vector< double > *self,int index,std::vector< double > const &values){
        if (index < 0)
          throw std::out_of_range("index");
        if (index+values.size() > self->size())
          throw std::out_of_range("index");
        std::copy(values.begin(), values.end(), self->begin()+index);
      }
SWIGINTERN bool std_vector_Sl_double_Sg__Contains(std::vector< double > *self,double const &value){
        return std::find(self->begin(), self->end(), value) != self->end();
      }
SWIGINTERN int std_vector_Sl_double_Sg__IndexOf(std::vector< double > *self,double const &value){
        int index = -1;
        std::vector< double >::iterator it = std::find(self->begin(), self->end(), value);
        if (it != self->end())
          index = (int)(it - self->begin());
        return index;
      }
SWIGINTERN int std_vector_Sl_double_Sg__LastIndexOf(std::vector< double > *self,double const &value){
        int index = -1;
        std::vector< double >::reverse_iterator rit = std::find(self->rbegin(), self->rend(), value);
        if (rit != self->rend())
          index = (int)(self->rend() - 1 - rit);
        return index;
      }
SWIGINTERN bool std_vector_Sl_double_Sg__Remove(std::vector< double > *self,double const &value){
        std::vector< double >::iterator it = std::find(self->begin(), self->end(), value);
        if (it != self->end()) {
          self->erase(it);
	  return true;
        }
        return false;
      }
SWIGINTERN std::vector< ArLineSegment > *new_std_vector_Sl_ArLineSegment_Sg___SWIG_2(int capacity){
        std::vector< ArLineSegment >* pv = 0;
        if (capacity >= 0) {
          pv = new std::vector< ArLineSegment >();
          pv->reserve(capacity);
       } else {
          throw std::out_of_range("capacity");
       }
       return pv;
      }
SWIGINTERN ArLineSegment std_vector_Sl_ArLineSegment_Sg__getitemcopy(std::vector< ArLineSegment > *self,int index){
        if (index>=0 && index<(int)self->size())
          return (*self)[index];
        else
          throw std::out_of_range("index");
      }
SWIGINTERN ArLineSegment const &std_vector_Sl_ArLineSegment_Sg__getitem(std::vector< ArLineSegment > *self,int index){
        if (index>=0 && index<(int)self->size())
          return (*self)[index];
        else
          throw std::out_of_range("index");
      }
SWIGINTERN void std_vector_Sl_ArLineSegment_Sg__setitem(std::vector< ArLineSegment > *self,int index,ArLineSegment const &val){
        if (index>=0 && index<(int)self->size())
          (*self)[index] = val;
        else
          throw std::out_of_range("index");
      }
SWIGINTERN void std_vector_Sl_ArLineSegment_Sg__AddRange(std::vector< ArLineSegment > *self,std::vector< ArLineSegment > const &values){
        self->insert(self->end(), values.begin(), values.end());
      }
SWIGINTERN std::vector< ArLineSegment > *std_vector_Sl_ArLineSegment_Sg__GetRange(std::vector< ArLineSegment > *self,int index,int count){
        if (index < 0)
          throw std::out_of_range("index");
        if (count < 0)
          throw std::out_of_range("count");
        if (index >= (int)self->size()+1 || index+count > (int)self->size())
          throw std::invalid_argument("invalid range");
        return new std::vector< ArLineSegment >(self->begin()+index, self->begin()+index+count);
      }
SWIGINTERN void std_vector_Sl_ArLineSegment_Sg__Insert(std::vector< ArLineSegment > *self,int index,ArLineSegment const &x){
        if (index>=0 && index<(int)self->size()+1)
          self->insert(self->begin()+index, x);
        else
          throw std::out_of_range("index");
      }
SWIGINTERN void std_vector_Sl_ArLineSegment_Sg__InsertRange(std::vector< ArLineSegment > *self,int index,std::vector< ArLineSegment > const &values){
        if (index>=0 && index<(int)self->size()+1)
          self->insert(self->begin()+index, values.begin(), values.end());
        else
          throw std::out_of_range("index");
      }
SWIGINTERN void std_vector_Sl_ArLineSegment_Sg__RemoveAt(std::vector< ArLineSegment > *self,int index){
        if (index>=0 && index<(int)self->size())
          self->erase(self->begin() + index);
        else
          throw std::out_of_range("index");
      }
SWIGINTERN void std_vector_Sl_ArLineSegment_Sg__RemoveRange(std::vector< ArLineSegment > *self,int index,int count){
        if (index < 0)
          throw std::out_of_range("index");
        if (count < 0)
          throw std::out_of_range("count");
        if (index >= (int)self->size()+1 || index+count > (int)self->size())
          throw std::invalid_argument("invalid range");
        self->erase(self->begin()+index, self->begin()+index+count);
      }
SWIGINTERN std::vector< ArLineSegment > *std_vector_Sl_ArLineSegment_Sg__Repeat(ArLineSegment const &value,int count){
        if (count < 0)
          throw std::out_of_range("count");
        return new std::vector< ArLineSegment >(count, value);
      }
SWIGINTERN void std_vector_Sl_ArLineSegment_Sg__Reverse__SWIG_0(std::vector< ArLineSegment > *self){
        std::reverse(self->begin(), self->end());
      }
SWIGINTERN void std_vector_Sl_ArLineSegment_Sg__Reverse__SWIG_1(std::vector< ArLineSegment > *self,int index,int count){
        if (index < 0)
          throw std::out_of_range("index");
        if (count < 0)
          throw std::out_of_range("count");
        if (index >= (int)self->size()+1 || index+count > (int)self->size())
          throw std::invalid_argument("invalid range");
        std::reverse(self->begin()+index, self->begin()+index+count);
      }
SWIGINTERN void std_vector_Sl_ArLineSegment_Sg__SetRange(std::vector< ArLineSegment > *self,int index,std::vector< ArLineSegment > const &values){
        if (index < 0)
          throw std::out_of_range("index");
        if (index+values.size() > self->size())
          throw std::out_of_range("index");
        std::copy(values.begin(), values.end(), self->begin()+index);
      }
SWIGINTERN std::vector< ArPTZ * > *new_std_vector_Sl_ArPTZ_Sm__Sg___SWIG_2(int capacity){
        std::vector< ArPTZ * >* pv = 0;
        if (capacity >= 0) {
          pv = new std::vector< ArPTZ * >();
          pv->reserve(capacity);
       } else {
          throw std::out_of_range("capacity");
       }
       return pv;
      }
SWIGINTERN ArPTZ *std_vector_Sl_ArPTZ_Sm__Sg__getitemcopy(std::vector< ArPTZ * > *self,int index){
        if (index>=0 && index<(int)self->size())
          return (*self)[index];
        else
          throw std::out_of_range("index");
      }
SWIGINTERN ArPTZ *const &std_vector_Sl_ArPTZ_Sm__Sg__getitem(std::vector< ArPTZ * > *self,int index){
        if (index>=0 && index<(int)self->size())
          return (*self)[index];
        else
          throw std::out_of_range("index");
      }
SWIGINTERN void std_vector_Sl_ArPTZ_Sm__Sg__setitem(std::vector< ArPTZ * > *self,int index,ArPTZ *const &val){
        if (index>=0 && index<(int)self->size())
          (*self)[index] = val;
        else
          throw std::out_of_range("index");
      }
SWIGINTERN void std_vector_Sl_ArPTZ_Sm__Sg__AddRange(std::vector< ArPTZ * > *self,std::vector< ArPTZ * > const &values){
        self->insert(self->end(), values.begin(), values.end());
      }
SWIGINTERN std::vector< ArPTZ * > *std_vector_Sl_ArPTZ_Sm__Sg__GetRange(std::vector< ArPTZ * > *self,int index,int count){
        if (index < 0)
          throw std::out_of_range("index");
        if (count < 0)
          throw std::out_of_range("count");
        if (index >= (int)self->size()+1 || index+count > (int)self->size())
          throw std::invalid_argument("invalid range");
        return new std::vector< ArPTZ * >(self->begin()+index, self->begin()+index+count);
      }
SWIGINTERN void std_vector_Sl_ArPTZ_Sm__Sg__Insert(std::vector< ArPTZ * > *self,int index,ArPTZ *const &x){
        if (index>=0 && index<(int)self->size()+1)
          self->insert(self->begin()+index, x);
        else
          throw std::out_of_range("index");
      }
SWIGINTERN void std_vector_Sl_ArPTZ_Sm__Sg__InsertRange(std::vector< ArPTZ * > *self,int index,std::vector< ArPTZ * > const &values){
        if (index>=0 && index<(int)self->size()+1)
          self->insert(self->begin()+index, values.begin(), values.end());
        else
          throw std::out_of_range("index");
      }
SWIGINTERN void std_vector_Sl_ArPTZ_Sm__Sg__RemoveAt(std::vector< ArPTZ * > *self,int index){
        if (index>=0 && index<(int)self->size())
          self->erase(self->begin() + index);
        else
          throw std::out_of_range("index");
      }
SWIGINTERN void std_vector_Sl_ArPTZ_Sm__Sg__RemoveRange(std::vector< ArPTZ * > *self,int index,int count){
        if (index < 0)
          throw std::out_of_range("index");
        if (count < 0)
          throw std::out_of_range("count");
        if (index >= (int)self->size()+1 || index+count > (int)self->size())
          throw std::invalid_argument("invalid range");
        self->erase(self->begin()+index, self->begin()+index+count);
      }
SWIGINTERN std::vector< ArPTZ * > *std_vector_Sl_ArPTZ_Sm__Sg__Repeat(ArPTZ *const &value,int count){
        if (count < 0)
          throw std::out_of_range("count");
        return new std::vector< ArPTZ * >(count, value);
      }
SWIGINTERN void std_vector_Sl_ArPTZ_Sm__Sg__Reverse__SWIG_0(std::vector< ArPTZ * > *self){
        std::reverse(self->begin(), self->end());
      }
SWIGINTERN void std_vector_Sl_ArPTZ_Sm__Sg__Reverse__SWIG_1(std::vector< ArPTZ * > *self,int index,int count){
        if (index < 0)
          throw std::out_of_range("index");
        if (count < 0)
          throw std::out_of_range("count");
        if (index >= (int)self->size()+1 || index+count > (int)self->size())
          throw std::invalid_argument("invalid range");
        std::reverse(self->begin()+index, self->begin()+index+count);
      }
SWIGINTERN void std_vector_Sl_ArPTZ_Sm__Sg__SetRange(std::vector< ArPTZ * > *self,int index,std::vector< ArPTZ * > const &values){
        if (index < 0)
          throw std::out_of_range("index");
        if (index+values.size() > self->size())
          throw std::out_of_range("index");
        std::copy(values.begin(), values.end(), self->begin()+index);
      }
SWIGINTERN bool std_vector_Sl_ArPTZ_Sm__Sg__Contains(std::vector< ArPTZ * > *self,ArPTZ *const &value){
        return std::find(self->begin(), self->end(), value) != self->end();
      }
SWIGINTERN int std_vector_Sl_ArPTZ_Sm__Sg__IndexOf(std::vector< ArPTZ * > *self,ArPTZ *const &value){
        int index = -1;
        std::vector< ArPTZ * >::iterator it = std::find(self->begin(), self->end(), value);
        if (it != self->end())
          index = (int)(it - self->begin());
        return index;
      }
SWIGINTERN int std_vector_Sl_ArPTZ_Sm__Sg__LastIndexOf(std::vector< ArPTZ * > *self,ArPTZ *const &value){
        int index = -1;
        std::vector< ArPTZ * >::reverse_iterator rit = std::find(self->rbegin(), self->rend(), value);
        if (rit != self->rend())
          index = (int)(self->rend() - 1 - rit);
        return index;
      }
SWIGINTERN bool std_vector_Sl_ArPTZ_Sm__Sg__Remove(std::vector< ArPTZ * > *self,ArPTZ *const &value){
        std::vector< ArPTZ * >::iterator it = std::find(self->begin(), self->end(), value);
        if (it != self->end()) {
          self->erase(it);
	  return true;
        }
        return false;
      }

#include <map>
#include <algorithm>
#include <stdexcept>

SWIGINTERN std::map< int,ArPose >::mapped_type const &std_map_Sl_int_Sc_ArPose_Sg__getitem(std::map< int,ArPose > *self,std::map< int,ArPose >::key_type const &key){
        std::map< int, ArPose, std::less< int > >::iterator iter = self->find(key);
        if (iter != self->end())
          return iter->second;
        else
          throw std::out_of_range("key not found");
      }
SWIGINTERN void std_map_Sl_int_Sc_ArPose_Sg__setitem(std::map< int,ArPose > *self,std::map< int,ArPose >::key_type const &key,std::map< int,ArPose >::mapped_type const &x){
        (*self)[key] = x;
      }
SWIGINTERN bool std_map_Sl_int_Sc_ArPose_Sg__ContainsKey(std::map< int,ArPose > *self,std::map< int,ArPose >::key_type const &key){
        std::map< int, ArPose, std::less< int > >::iterator iter = self->find(key);
        return iter != self->end();
      }
SWIGINTERN void std_map_Sl_int_Sc_ArPose_Sg__Add(std::map< int,ArPose > *self,std::map< int,ArPose >::key_type const &key,std::map< int,ArPose >::mapped_type const &val){
        std::map< int, ArPose, std::less< int > >::iterator iter = self->find(key);
        if (iter != self->end())
          throw std::out_of_range("key already exists");
        self->insert(std::pair< int, ArPose >(key, val));
      }
SWIGINTERN bool std_map_Sl_int_Sc_ArPose_Sg__Remove(std::map< int,ArPose > *self,std::map< int,ArPose >::key_type const &key){
        std::map< int, ArPose, std::less< int > >::iterator iter = self->find(key);
        if (iter != self->end()) {
          self->erase(iter);
          return true;
        }                
        return false;
      }
SWIGINTERN std::map< int,ArPose,std::less< int > >::iterator *std_map_Sl_int_Sc_ArPose_Sg__create_iterator_begin(std::map< int,ArPose > *self){
        return new std::map< int, ArPose, std::less< int > >::iterator(self->begin());
      }
SWIGINTERN std::map< int,ArPose >::key_type const &std_map_Sl_int_Sc_ArPose_Sg__get_next_key(std::map< int,ArPose > *self,std::map< int,ArPose,std::less< int > >::iterator *swigiterator){
        std::map< int, ArPose, std::less< int > >::iterator iter = *swigiterator;
        (*swigiterator)++;
        return (*iter).first;
      }
SWIGINTERN void std_map_Sl_int_Sc_ArPose_Sg__destroy_iterator(std::map< int,ArPose > *self,std::map< int,ArPose,std::less< int > >::iterator *swigiterator){
        delete swigiterator;
      }

#include <string>

SWIGINTERN void ArAction_setActionRobot(ArAction *self,ArRobot *robot){
    self->ArAction::setRobot(robot);
  }
SWIGINTERN ArJoyVec3f ArJoyHandler_getDoubles__SWIG_2(ArJoyHandler *self){
    ArJoyVec3f r;
    self->getDoubles(&r.x, &r.y, &r.z);
    return r;
  }
SWIGINTERN ArJoyVec3i ArJoyHandler_getAdjusted__SWIG_2(ArJoyHandler *self){
    ArJoyVec3i r;
    self->getAdjusted(&r.x, &r.y, &r.z);
    return r;
  }
SWIGINTERN ArJoyVec3i ArJoyHandler_getUnfiltered__SWIG_2(ArJoyHandler *self){
    ArJoyVec3i r;
    self->getUnfiltered(&r.x, &r.y, &r.z);
    return r;
  }
SWIGINTERN ArJoyVec3i ArJoyHandler_getSpeeds__SWIG_1(ArJoyHandler *self){
    ArJoyVec3i r;
    self->getSpeeds(&r.x, &r.y, &r.z);
    return r;
  }
SWIGINTERN ArSyncTask *ArRobot_addUserTask__SWIG_2(ArRobot *self,ArFunctor *functor,char const *name=NULL){
    self->lock();
    if(!name) name = functor->getName();
    ArLog::debug("functor name is %s", name);
    if(name == NULL || strlen(name) == 0)
      name = "unnamed";
    if(!self->addUserTask(name, 50, functor))
    {
      self->unlock();
      return NULL;
    }
    ArSyncTask *t = self->findTask(functor);
    self->unlock();
    return t;
  }
SWIGINTERN ArSyncTask *ArRobot_addSensorInterpTask__SWIG_2(ArRobot *self,ArFunctor *functor,char const *name=NULL){
    self->lock();
    if(!name) name = functor->getName();
    if(name == NULL || strlen(name) == 0)
      name = "unnamed";
    if(!self->addSensorInterpTask(name, 50, functor))
    {
      self->unlock();
      return NULL;
    }
    ArSyncTask *t = self->findTask(functor);
    self->unlock();
    return t;
  }
SWIGINTERN void ArRobot_removeTask__SWIG_0(ArRobot *self,char const *name){
    self->lock();
    // todo search tasks here instead of doing it twice via
    // these two calls
    self->remUserTask(name);
    self->remSensorInterpTask(name);
    self->unlock();
  }
SWIGINTERN bool ArRobot_replaceSensorInterpTask(ArRobot *self,ArFunctor *newFunctor,char const *name){
    self->lock();
    self->remSensorInterpTask(name);
    // TODO use position value of old task rather than assuming 50
    bool r = self->addSensorInterpTask(name, 50, newFunctor);
    self->unlock();
    return r;
  }
SWIGINTERN bool ArRobot_replaceUserTask(ArRobot *self,ArFunctor *newFunctor,char const *name){
    self->lock();
    self->remUserTask(name);
    // TODO use position value of old task rather than assuming 50
    bool r = self->addUserTask(name, 50, newFunctor);
    self->unlock();
    return r;
  }
SWIGINTERN void ArRobot_removeTask__SWIG_1(ArRobot *self,ArFunctor *f){
    self->lock();
    // todo search tasks here instead of doing it twice via
    // these two calls
    self->remUserTask(f);
    self->remSensorInterpTask(f);
    self->unlock();
  }
SWIGINTERN std::string ArSocket_read__SWIG_2(ArSocket *self,size_t len,unsigned int msWait){
    char *buf = (char*)malloc(len);
    int n = self->read(buf, len, msWait);
    if(n <= 0) {
      free(buf);
      return "";
    }
    std::string s(buf, n);
    free(buf);
    return s;
  }
SWIGINTERN bool ArSocket_write__SWIG_1(ArSocket *self,std::string s){ 
    return self->write( (void*)(s.c_str()), (size_t)(s.length())); 
  }

/* End SWIG Wrapper Interface Definition for Aria */



/* ---------------------------------------------------
 * C++ director class methods
 * --------------------------------------------------- */

#include "AriaCS_wrap.h"

SwigDirector_ArFunctor::SwigDirector_ArFunctor() : ArFunctor(), Swig::Director() {
  swig_init_callbacks();
}

SwigDirector_ArFunctor::~SwigDirector_ArFunctor() {
  
}


void SwigDirector_ArFunctor::invoke() {
  if (!swig_callbackinvoke) {
    throw Swig::DirectorPureVirtualException("ArFunctor::invoke");
  } else {
    swig_callbackinvoke();
  }
}

char const *SwigDirector_ArFunctor::getName() {
  char *c_result = 0 ;
  char * jresult = 0 ;
  
  if (!swig_callbackgetName) {
    return ArFunctor::getName();
  } else {
    jresult = (char *) swig_callbackgetName();
    c_result = (char *)jresult; 
  }
  return (char const *)c_result;
}

void SwigDirector_ArFunctor::setName(char const *name) {
  char * jname = 0 ;
  
  if (!swig_callbacksetName) {
    ArFunctor::setName(name);
    return;
  } else {
    jname = SWIG_csharp_string_callback((const char *)name); 
    swig_callbacksetName(jname);
  }
}

void SwigDirector_ArFunctor::swig_connect_director(SWIG_Callback0_t callbackinvoke, SWIG_Callback1_t callbackgetName, SWIG_Callback2_t callbacksetName) {
  swig_callbackinvoke = callbackinvoke;
  swig_callbackgetName = callbackgetName;
  swig_callbacksetName = callbacksetName;
}

void SwigDirector_ArFunctor::swig_init_callbacks() {
  swig_callbackinvoke = 0;
  swig_callbackgetName = 0;
  swig_callbacksetName = 0;
}

SwigDirector_ArRetFunctor_VoidP::SwigDirector_ArRetFunctor_VoidP() : ArRetFunctor< void * >(), Swig::Director() {
  swig_init_callbacks();
}

SwigDirector_ArRetFunctor_VoidP::~SwigDirector_ArRetFunctor_VoidP() {
  
}


void SwigDirector_ArRetFunctor_VoidP::invoke() {
  if (!swig_callbackinvoke) {
    ArRetFunctor< void * >::invoke();
    return;
  } else {
    swig_callbackinvoke();
  }
}

char const *SwigDirector_ArRetFunctor_VoidP::getName() {
  char *c_result = 0 ;
  char * jresult = 0 ;
  
  if (!swig_callbackgetName) {
    return ArFunctor::getName();
  } else {
    jresult = (char *) swig_callbackgetName();
    c_result = (char *)jresult; 
  }
  return (char const *)c_result;
}

void SwigDirector_ArRetFunctor_VoidP::setName(char const *name) {
  char * jname = 0 ;
  
  if (!swig_callbacksetName) {
    ArFunctor::setName(name);
    return;
  } else {
    jname = SWIG_csharp_string_callback((const char *)name); 
    swig_callbacksetName(jname);
  }
}

void * SwigDirector_ArRetFunctor_VoidP::invokeR() {
  void *c_result = 0 ;
  void * jresult = 0 ;
  
  if (!swig_callbackinvokeR) {
    throw Swig::DirectorPureVirtualException("ArRetFunctor< void * >::invokeR");
  } else {
    jresult = (void *) swig_callbackinvokeR();
    c_result = (void *)jresult; 
  }
  return c_result;
}

void SwigDirector_ArRetFunctor_VoidP::swig_connect_director(SWIG_Callback0_t callbackinvoke, SWIG_Callback1_t callbackgetName, SWIG_Callback2_t callbacksetName, SWIG_Callback3_t callbackinvokeR) {
  swig_callbackinvoke = callbackinvoke;
  swig_callbackgetName = callbackgetName;
  swig_callbacksetName = callbacksetName;
  swig_callbackinvokeR = callbackinvokeR;
}

void SwigDirector_ArRetFunctor_VoidP::swig_init_callbacks() {
  swig_callbackinvoke = 0;
  swig_callbackgetName = 0;
  swig_callbacksetName = 0;
  swig_callbackinvokeR = 0;
}

SwigDirector_ArRetFunctor_Bool::SwigDirector_ArRetFunctor_Bool() : ArRetFunctor< bool >(), Swig::Director() {
  swig_init_callbacks();
}

SwigDirector_ArRetFunctor_Bool::~SwigDirector_ArRetFunctor_Bool() {
  
}


void SwigDirector_ArRetFunctor_Bool::invoke() {
  if (!swig_callbackinvoke) {
    ArRetFunctor< bool >::invoke();
    return;
  } else {
    swig_callbackinvoke();
  }
}

char const *SwigDirector_ArRetFunctor_Bool::getName() {
  char *c_result = 0 ;
  char * jresult = 0 ;
  
  if (!swig_callbackgetName) {
    return ArFunctor::getName();
  } else {
    jresult = (char *) swig_callbackgetName();
    c_result = (char *)jresult; 
  }
  return (char const *)c_result;
}

void SwigDirector_ArRetFunctor_Bool::setName(char const *name) {
  char * jname = 0 ;
  
  if (!swig_callbacksetName) {
    ArFunctor::setName(name);
    return;
  } else {
    jname = SWIG_csharp_string_callback((const char *)name); 
    swig_callbacksetName(jname);
  }
}

bool SwigDirector_ArRetFunctor_Bool::invokeR() {
  bool c_result = SwigValueInit< bool >() ;
  unsigned int jresult = 0 ;
  
  if (!swig_callbackinvokeR) {
    throw Swig::DirectorPureVirtualException("ArRetFunctor< bool >::invokeR");
  } else {
    jresult = (unsigned int) swig_callbackinvokeR();
    c_result = jresult ? true : false; 
  }
  return c_result;
}

void SwigDirector_ArRetFunctor_Bool::swig_connect_director(SWIG_Callback0_t callbackinvoke, SWIG_Callback1_t callbackgetName, SWIG_Callback2_t callbacksetName, SWIG_Callback3_t callbackinvokeR) {
  swig_callbackinvoke = callbackinvoke;
  swig_callbackgetName = callbackgetName;
  swig_callbacksetName = callbacksetName;
  swig_callbackinvokeR = callbackinvokeR;
}

void SwigDirector_ArRetFunctor_Bool::swig_init_callbacks() {
  swig_callbackinvoke = 0;
  swig_callbackgetName = 0;
  swig_callbacksetName = 0;
  swig_callbackinvokeR = 0;
}

SwigDirector_ArFunctor1_CString::SwigDirector_ArFunctor1_CString() : ArFunctor1< char const * >(), Swig::Director() {
  swig_init_callbacks();
}

SwigDirector_ArFunctor1_CString::~SwigDirector_ArFunctor1_CString() {
  
}


void SwigDirector_ArFunctor1_CString::invoke() {
  if (!swig_callbackinvoke__SWIG_0) {
    throw Swig::DirectorPureVirtualException("ArFunctor1< char const * >::invoke");
  } else {
    swig_callbackinvoke__SWIG_0();
  }
}

char const *SwigDirector_ArFunctor1_CString::getName() {
  char *c_result = 0 ;
  char * jresult = 0 ;
  
  if (!swig_callbackgetName) {
    return ArFunctor::getName();
  } else {
    jresult = (char *) swig_callbackgetName();
    c_result = (char *)jresult; 
  }
  return (char const *)c_result;
}

void SwigDirector_ArFunctor1_CString::setName(char const *name) {
  char * jname = 0 ;
  
  if (!swig_callbacksetName) {
    ArFunctor::setName(name);
    return;
  } else {
    jname = SWIG_csharp_string_callback((const char *)name); 
    swig_callbacksetName(jname);
  }
}

void SwigDirector_ArFunctor1_CString::invoke(char const *p1) {
  char * jp1 = 0 ;
  
  if (!swig_callbackinvoke__SWIG_1) {
    throw Swig::DirectorPureVirtualException("ArFunctor1< char const * >::invoke");
  } else {
    jp1 = SWIG_csharp_string_callback((const char *)p1); 
    swig_callbackinvoke__SWIG_1(jp1);
  }
}

void SwigDirector_ArFunctor1_CString::swig_connect_director(SWIG_Callback0_t callbackinvoke__SWIG_0, SWIG_Callback1_t callbackgetName, SWIG_Callback2_t callbacksetName, SWIG_Callback3_t callbackinvoke__SWIG_1) {
  swig_callbackinvoke__SWIG_0 = callbackinvoke__SWIG_0;
  swig_callbackgetName = callbackgetName;
  swig_callbacksetName = callbacksetName;
  swig_callbackinvoke__SWIG_1 = callbackinvoke__SWIG_1;
}

void SwigDirector_ArFunctor1_CString::swig_init_callbacks() {
  swig_callbackinvoke__SWIG_0 = 0;
  swig_callbackgetName = 0;
  swig_callbacksetName = 0;
  swig_callbackinvoke__SWIG_1 = 0;
}

SwigDirector_ArFunctor1_Int::SwigDirector_ArFunctor1_Int() : ArFunctor1< int >(), Swig::Director() {
  swig_init_callbacks();
}

SwigDirector_ArFunctor1_Int::~SwigDirector_ArFunctor1_Int() {
  
}


void SwigDirector_ArFunctor1_Int::invoke() {
  if (!swig_callbackinvoke__SWIG_0) {
    throw Swig::DirectorPureVirtualException("ArFunctor1< int >::invoke");
  } else {
    swig_callbackinvoke__SWIG_0();
  }
}

char const *SwigDirector_ArFunctor1_Int::getName() {
  char *c_result = 0 ;
  char * jresult = 0 ;
  
  if (!swig_callbackgetName) {
    return ArFunctor::getName();
  } else {
    jresult = (char *) swig_callbackgetName();
    c_result = (char *)jresult; 
  }
  return (char const *)c_result;
}

void SwigDirector_ArFunctor1_Int::setName(char const *name) {
  char * jname = 0 ;
  
  if (!swig_callbacksetName) {
    ArFunctor::setName(name);
    return;
  } else {
    jname = SWIG_csharp_string_callback((const char *)name); 
    swig_callbacksetName(jname);
  }
}

void SwigDirector_ArFunctor1_Int::invoke(int p1) {
  int jp1  ;
  
  if (!swig_callbackinvoke__SWIG_1) {
    throw Swig::DirectorPureVirtualException("ArFunctor1< int >::invoke");
  } else {
    jp1 = p1;
    swig_callbackinvoke__SWIG_1(jp1);
  }
}

void SwigDirector_ArFunctor1_Int::swig_connect_director(SWIG_Callback0_t callbackinvoke__SWIG_0, SWIG_Callback1_t callbackgetName, SWIG_Callback2_t callbacksetName, SWIG_Callback3_t callbackinvoke__SWIG_1) {
  swig_callbackinvoke__SWIG_0 = callbackinvoke__SWIG_0;
  swig_callbackgetName = callbackgetName;
  swig_callbacksetName = callbacksetName;
  swig_callbackinvoke__SWIG_1 = callbackinvoke__SWIG_1;
}

void SwigDirector_ArFunctor1_Int::swig_init_callbacks() {
  swig_callbackinvoke__SWIG_0 = 0;
  swig_callbackgetName = 0;
  swig_callbacksetName = 0;
  swig_callbackinvoke__SWIG_1 = 0;
}

SwigDirector_ArFunctor1_ArRobotPacketP::SwigDirector_ArFunctor1_ArRobotPacketP() : ArFunctor1< ArRobotPacket * >(), Swig::Director() {
  swig_init_callbacks();
}

SwigDirector_ArFunctor1_ArRobotPacketP::~SwigDirector_ArFunctor1_ArRobotPacketP() {
  
}


void SwigDirector_ArFunctor1_ArRobotPacketP::invoke() {
  if (!swig_callbackinvoke__SWIG_0) {
    throw Swig::DirectorPureVirtualException("ArFunctor1< ArRobotPacket * >::invoke");
  } else {
    swig_callbackinvoke__SWIG_0();
  }
}

char const *SwigDirector_ArFunctor1_ArRobotPacketP::getName() {
  char *c_result = 0 ;
  char * jresult = 0 ;
  
  if (!swig_callbackgetName) {
    return ArFunctor::getName();
  } else {
    jresult = (char *) swig_callbackgetName();
    c_result = (char *)jresult; 
  }
  return (char const *)c_result;
}

void SwigDirector_ArFunctor1_ArRobotPacketP::setName(char const *name) {
  char * jname = 0 ;
  
  if (!swig_callbacksetName) {
    ArFunctor::setName(name);
    return;
  } else {
    jname = SWIG_csharp_string_callback((const char *)name); 
    swig_callbacksetName(jname);
  }
}

void SwigDirector_ArFunctor1_ArRobotPacketP::invoke(ArRobotPacket *p1) {
  void * jp1 = 0 ;
  
  if (!swig_callbackinvoke__SWIG_1) {
    throw Swig::DirectorPureVirtualException("ArFunctor1< ArRobotPacket * >::invoke");
  } else {
    jp1 = (void *) p1; 
    swig_callbackinvoke__SWIG_1(jp1);
  }
}

void SwigDirector_ArFunctor1_ArRobotPacketP::swig_connect_director(SWIG_Callback0_t callbackinvoke__SWIG_0, SWIG_Callback1_t callbackgetName, SWIG_Callback2_t callbacksetName, SWIG_Callback3_t callbackinvoke__SWIG_1) {
  swig_callbackinvoke__SWIG_0 = callbackinvoke__SWIG_0;
  swig_callbackgetName = callbackgetName;
  swig_callbacksetName = callbacksetName;
  swig_callbackinvoke__SWIG_1 = callbackinvoke__SWIG_1;
}

void SwigDirector_ArFunctor1_ArRobotPacketP::swig_init_callbacks() {
  swig_callbackinvoke__SWIG_0 = 0;
  swig_callbackgetName = 0;
  swig_callbacksetName = 0;
  swig_callbackinvoke__SWIG_1 = 0;
}

SwigDirector_ArRetFunctor_Int::SwigDirector_ArRetFunctor_Int() : ArRetFunctor< int >(), Swig::Director() {
  swig_init_callbacks();
}

SwigDirector_ArRetFunctor_Int::~SwigDirector_ArRetFunctor_Int() {
  
}


void SwigDirector_ArRetFunctor_Int::invoke() {
  if (!swig_callbackinvoke) {
    ArRetFunctor< int >::invoke();
    return;
  } else {
    swig_callbackinvoke();
  }
}

char const *SwigDirector_ArRetFunctor_Int::getName() {
  char *c_result = 0 ;
  char * jresult = 0 ;
  
  if (!swig_callbackgetName) {
    return ArFunctor::getName();
  } else {
    jresult = (char *) swig_callbackgetName();
    c_result = (char *)jresult; 
  }
  return (char const *)c_result;
}

void SwigDirector_ArRetFunctor_Int::setName(char const *name) {
  char * jname = 0 ;
  
  if (!swig_callbacksetName) {
    ArFunctor::setName(name);
    return;
  } else {
    jname = SWIG_csharp_string_callback((const char *)name); 
    swig_callbacksetName(jname);
  }
}

int SwigDirector_ArRetFunctor_Int::invokeR() {
  int c_result = SwigValueInit< int >() ;
  int jresult = 0 ;
  
  if (!swig_callbackinvokeR) {
    throw Swig::DirectorPureVirtualException("ArRetFunctor< int >::invokeR");
  } else {
    jresult = (int) swig_callbackinvokeR();
    c_result = (int)jresult; 
  }
  return c_result;
}

void SwigDirector_ArRetFunctor_Int::swig_connect_director(SWIG_Callback0_t callbackinvoke, SWIG_Callback1_t callbackgetName, SWIG_Callback2_t callbacksetName, SWIG_Callback3_t callbackinvokeR) {
  swig_callbackinvoke = callbackinvoke;
  swig_callbackgetName = callbackgetName;
  swig_callbacksetName = callbacksetName;
  swig_callbackinvokeR = callbackinvokeR;
}

void SwigDirector_ArRetFunctor_Int::swig_init_callbacks() {
  swig_callbackinvoke = 0;
  swig_callbackgetName = 0;
  swig_callbacksetName = 0;
  swig_callbackinvokeR = 0;
}

SwigDirector_ArRetFunctor_Double::SwigDirector_ArRetFunctor_Double() : ArRetFunctor< double >(), Swig::Director() {
  swig_init_callbacks();
}

SwigDirector_ArRetFunctor_Double::~SwigDirector_ArRetFunctor_Double() {
  
}


void SwigDirector_ArRetFunctor_Double::invoke() {
  if (!swig_callbackinvoke) {
    ArRetFunctor< double >::invoke();
    return;
  } else {
    swig_callbackinvoke();
  }
}

char const *SwigDirector_ArRetFunctor_Double::getName() {
  char *c_result = 0 ;
  char * jresult = 0 ;
  
  if (!swig_callbackgetName) {
    return ArFunctor::getName();
  } else {
    jresult = (char *) swig_callbackgetName();
    c_result = (char *)jresult; 
  }
  return (char const *)c_result;
}

void SwigDirector_ArRetFunctor_Double::setName(char const *name) {
  char * jname = 0 ;
  
  if (!swig_callbacksetName) {
    ArFunctor::setName(name);
    return;
  } else {
    jname = SWIG_csharp_string_callback((const char *)name); 
    swig_callbacksetName(jname);
  }
}

double SwigDirector_ArRetFunctor_Double::invokeR() {
  double c_result = SwigValueInit< double >() ;
  double jresult = 0 ;
  
  if (!swig_callbackinvokeR) {
    throw Swig::DirectorPureVirtualException("ArRetFunctor< double >::invokeR");
  } else {
    jresult = (double) swig_callbackinvokeR();
    c_result = (double)jresult; 
  }
  return c_result;
}

void SwigDirector_ArRetFunctor_Double::swig_connect_director(SWIG_Callback0_t callbackinvoke, SWIG_Callback1_t callbackgetName, SWIG_Callback2_t callbacksetName, SWIG_Callback3_t callbackinvokeR) {
  swig_callbackinvoke = callbackinvoke;
  swig_callbackgetName = callbackgetName;
  swig_callbacksetName = callbacksetName;
  swig_callbackinvokeR = callbackinvokeR;
}

void SwigDirector_ArRetFunctor_Double::swig_init_callbacks() {
  swig_callbackinvoke = 0;
  swig_callbackgetName = 0;
  swig_callbacksetName = 0;
  swig_callbackinvokeR = 0;
}

SwigDirector_ArRetFunctor_UnsignedInt::SwigDirector_ArRetFunctor_UnsignedInt() : ArRetFunctor< unsigned int >(), Swig::Director() {
  swig_init_callbacks();
}

SwigDirector_ArRetFunctor_UnsignedInt::~SwigDirector_ArRetFunctor_UnsignedInt() {
  
}


void SwigDirector_ArRetFunctor_UnsignedInt::invoke() {
  if (!swig_callbackinvoke) {
    ArRetFunctor< unsigned int >::invoke();
    return;
  } else {
    swig_callbackinvoke();
  }
}

char const *SwigDirector_ArRetFunctor_UnsignedInt::getName() {
  char *c_result = 0 ;
  char * jresult = 0 ;
  
  if (!swig_callbackgetName) {
    return ArFunctor::getName();
  } else {
    jresult = (char *) swig_callbackgetName();
    c_result = (char *)jresult; 
  }
  return (char const *)c_result;
}

void SwigDirector_ArRetFunctor_UnsignedInt::setName(char const *name) {
  char * jname = 0 ;
  
  if (!swig_callbacksetName) {
    ArFunctor::setName(name);
    return;
  } else {
    jname = SWIG_csharp_string_callback((const char *)name); 
    swig_callbacksetName(jname);
  }
}

unsigned int SwigDirector_ArRetFunctor_UnsignedInt::invokeR() {
  unsigned int c_result = SwigValueInit< unsigned int >() ;
  unsigned int jresult = 0 ;
  
  if (!swig_callbackinvokeR) {
    throw Swig::DirectorPureVirtualException("ArRetFunctor< unsigned int >::invokeR");
  } else {
    jresult = (unsigned int) swig_callbackinvokeR();
    c_result = (unsigned int)jresult; 
  }
  return c_result;
}

void SwigDirector_ArRetFunctor_UnsignedInt::swig_connect_director(SWIG_Callback0_t callbackinvoke, SWIG_Callback1_t callbackgetName, SWIG_Callback2_t callbacksetName, SWIG_Callback3_t callbackinvokeR) {
  swig_callbackinvoke = callbackinvoke;
  swig_callbackgetName = callbackgetName;
  swig_callbacksetName = callbacksetName;
  swig_callbackinvokeR = callbackinvokeR;
}

void SwigDirector_ArRetFunctor_UnsignedInt::swig_init_callbacks() {
  swig_callbackinvoke = 0;
  swig_callbackgetName = 0;
  swig_callbacksetName = 0;
  swig_callbackinvokeR = 0;
}

SwigDirector_ArRetFunctor1_Double_ArPoseWithTime::SwigDirector_ArRetFunctor1_Double_ArPoseWithTime() : ArRetFunctor1< double,ArPoseWithTime >(), Swig::Director() {
  swig_init_callbacks();
}

SwigDirector_ArRetFunctor1_Double_ArPoseWithTime::~SwigDirector_ArRetFunctor1_Double_ArPoseWithTime() {
  
}


void SwigDirector_ArRetFunctor1_Double_ArPoseWithTime::invoke() {
  if (!swig_callbackinvoke) {
    ArRetFunctor< double >::invoke();
    return;
  } else {
    swig_callbackinvoke();
  }
}

char const *SwigDirector_ArRetFunctor1_Double_ArPoseWithTime::getName() {
  char *c_result = 0 ;
  char * jresult = 0 ;
  
  if (!swig_callbackgetName) {
    return ArFunctor::getName();
  } else {
    jresult = (char *) swig_callbackgetName();
    c_result = (char *)jresult; 
  }
  return (char const *)c_result;
}

void SwigDirector_ArRetFunctor1_Double_ArPoseWithTime::setName(char const *name) {
  char * jname = 0 ;
  
  if (!swig_callbacksetName) {
    ArFunctor::setName(name);
    return;
  } else {
    jname = SWIG_csharp_string_callback((const char *)name); 
    swig_callbacksetName(jname);
  }
}

double SwigDirector_ArRetFunctor1_Double_ArPoseWithTime::invokeR() {
  double c_result = SwigValueInit< double >() ;
  double jresult = 0 ;
  
  if (!swig_callbackinvokeR__SWIG_0) {
    throw Swig::DirectorPureVirtualException("ArRetFunctor1< double,ArPoseWithTime >::invokeR");
  } else {
    jresult = (double) swig_callbackinvokeR__SWIG_0();
    c_result = (double)jresult; 
  }
  return c_result;
}

double SwigDirector_ArRetFunctor1_Double_ArPoseWithTime::invokeR(ArPoseWithTime p1) {
  double c_result = SwigValueInit< double >() ;
  double jresult = 0 ;
  void * jp1  ;
  
  if (!swig_callbackinvokeR__SWIG_1) {
    throw Swig::DirectorPureVirtualException("ArRetFunctor1< double,ArPoseWithTime >::invokeR");
  } else {
    jp1 = (void *)&p1; 
    jresult = (double) swig_callbackinvokeR__SWIG_1(jp1);
    c_result = (double)jresult; 
  }
  return c_result;
}

void SwigDirector_ArRetFunctor1_Double_ArPoseWithTime::swig_connect_director(SWIG_Callback0_t callbackinvoke, SWIG_Callback1_t callbackgetName, SWIG_Callback2_t callbacksetName, SWIG_Callback3_t callbackinvokeR__SWIG_0, SWIG_Callback4_t callbackinvokeR__SWIG_1) {
  swig_callbackinvoke = callbackinvoke;
  swig_callbackgetName = callbackgetName;
  swig_callbacksetName = callbacksetName;
  swig_callbackinvokeR__SWIG_0 = callbackinvokeR__SWIG_0;
  swig_callbackinvokeR__SWIG_1 = callbackinvokeR__SWIG_1;
}

void SwigDirector_ArRetFunctor1_Double_ArPoseWithTime::swig_init_callbacks() {
  swig_callbackinvoke = 0;
  swig_callbackgetName = 0;
  swig_callbacksetName = 0;
  swig_callbackinvokeR__SWIG_0 = 0;
  swig_callbackinvokeR__SWIG_1 = 0;
}

SwigDirector_ArRetFunctor1_Bool_ArRobotPacketP::SwigDirector_ArRetFunctor1_Bool_ArRobotPacketP() : ArRetFunctor1< bool,ArRobotPacket * >(), Swig::Director() {
  swig_init_callbacks();
}

SwigDirector_ArRetFunctor1_Bool_ArRobotPacketP::~SwigDirector_ArRetFunctor1_Bool_ArRobotPacketP() {
  
}


void SwigDirector_ArRetFunctor1_Bool_ArRobotPacketP::invoke() {
  if (!swig_callbackinvoke) {
    ArRetFunctor< bool >::invoke();
    return;
  } else {
    swig_callbackinvoke();
  }
}

char const *SwigDirector_ArRetFunctor1_Bool_ArRobotPacketP::getName() {
  char *c_result = 0 ;
  char * jresult = 0 ;
  
  if (!swig_callbackgetName) {
    return ArFunctor::getName();
  } else {
    jresult = (char *) swig_callbackgetName();
    c_result = (char *)jresult; 
  }
  return (char const *)c_result;
}

void SwigDirector_ArRetFunctor1_Bool_ArRobotPacketP::setName(char const *name) {
  char * jname = 0 ;
  
  if (!swig_callbacksetName) {
    ArFunctor::setName(name);
    return;
  } else {
    jname = SWIG_csharp_string_callback((const char *)name); 
    swig_callbacksetName(jname);
  }
}

bool SwigDirector_ArRetFunctor1_Bool_ArRobotPacketP::invokeR() {
  bool c_result = SwigValueInit< bool >() ;
  unsigned int jresult = 0 ;
  
  if (!swig_callbackinvokeR__SWIG_0) {
    throw Swig::DirectorPureVirtualException("ArRetFunctor1< bool,ArRobotPacket * >::invokeR");
  } else {
    jresult = (unsigned int) swig_callbackinvokeR__SWIG_0();
    c_result = jresult ? true : false; 
  }
  return c_result;
}

bool SwigDirector_ArRetFunctor1_Bool_ArRobotPacketP::invokeR(ArRobotPacket *p1) {
  bool c_result = SwigValueInit< bool >() ;
  unsigned int jresult = 0 ;
  void * jp1 = 0 ;
  
  if (!swig_callbackinvokeR__SWIG_1) {
    throw Swig::DirectorPureVirtualException("ArRetFunctor1< bool,ArRobotPacket * >::invokeR");
  } else {
    jp1 = (void *) p1; 
    jresult = (unsigned int) swig_callbackinvokeR__SWIG_1(jp1);
    c_result = jresult ? true : false; 
  }
  return c_result;
}

void SwigDirector_ArRetFunctor1_Bool_ArRobotPacketP::swig_connect_director(SWIG_Callback0_t callbackinvoke, SWIG_Callback1_t callbackgetName, SWIG_Callback2_t callbacksetName, SWIG_Callback3_t callbackinvokeR__SWIG_0, SWIG_Callback4_t callbackinvokeR__SWIG_1) {
  swig_callbackinvoke = callbackinvoke;
  swig_callbackgetName = callbackgetName;
  swig_callbacksetName = callbacksetName;
  swig_callbackinvokeR__SWIG_0 = callbackinvokeR__SWIG_0;
  swig_callbackinvokeR__SWIG_1 = callbackinvokeR__SWIG_1;
}

void SwigDirector_ArRetFunctor1_Bool_ArRobotPacketP::swig_init_callbacks() {
  swig_callbackinvoke = 0;
  swig_callbackgetName = 0;
  swig_callbacksetName = 0;
  swig_callbackinvokeR__SWIG_0 = 0;
  swig_callbackinvokeR__SWIG_1 = 0;
}

SwigDirector_ArRetFunctor1_Bool_ArgumentBuilder::SwigDirector_ArRetFunctor1_Bool_ArgumentBuilder() : ArRetFunctor1< bool,ArArgumentBuilder >(), Swig::Director() {
  swig_init_callbacks();
}

SwigDirector_ArRetFunctor1_Bool_ArgumentBuilder::~SwigDirector_ArRetFunctor1_Bool_ArgumentBuilder() {
  
}


void SwigDirector_ArRetFunctor1_Bool_ArgumentBuilder::invoke() {
  if (!swig_callbackinvoke) {
    ArRetFunctor< bool >::invoke();
    return;
  } else {
    swig_callbackinvoke();
  }
}

char const *SwigDirector_ArRetFunctor1_Bool_ArgumentBuilder::getName() {
  char *c_result = 0 ;
  char * jresult = 0 ;
  
  if (!swig_callbackgetName) {
    return ArFunctor::getName();
  } else {
    jresult = (char *) swig_callbackgetName();
    c_result = (char *)jresult; 
  }
  return (char const *)c_result;
}

void SwigDirector_ArRetFunctor1_Bool_ArgumentBuilder::setName(char const *name) {
  char * jname = 0 ;
  
  if (!swig_callbacksetName) {
    ArFunctor::setName(name);
    return;
  } else {
    jname = SWIG_csharp_string_callback((const char *)name); 
    swig_callbacksetName(jname);
  }
}

bool SwigDirector_ArRetFunctor1_Bool_ArgumentBuilder::invokeR() {
  bool c_result = SwigValueInit< bool >() ;
  unsigned int jresult = 0 ;
  
  if (!swig_callbackinvokeR__SWIG_0) {
    throw Swig::DirectorPureVirtualException("ArRetFunctor1< bool,ArArgumentBuilder >::invokeR");
  } else {
    jresult = (unsigned int) swig_callbackinvokeR__SWIG_0();
    c_result = jresult ? true : false; 
  }
  return c_result;
}

bool SwigDirector_ArRetFunctor1_Bool_ArgumentBuilder::invokeR(ArArgumentBuilder p1) {
  bool c_result = SwigValueInit< bool >() ;
  unsigned int jresult = 0 ;
  void * jp1  ;
  
  if (!swig_callbackinvokeR__SWIG_1) {
    throw Swig::DirectorPureVirtualException("ArRetFunctor1< bool,ArArgumentBuilder >::invokeR");
  } else {
    jp1 = (void *)&p1; 
    jresult = (unsigned int) swig_callbackinvokeR__SWIG_1(jp1);
    c_result = jresult ? true : false; 
  }
  return c_result;
}

void SwigDirector_ArRetFunctor1_Bool_ArgumentBuilder::swig_connect_director(SWIG_Callback0_t callbackinvoke, SWIG_Callback1_t callbackgetName, SWIG_Callback2_t callbacksetName, SWIG_Callback3_t callbackinvokeR__SWIG_0, SWIG_Callback4_t callbackinvokeR__SWIG_1) {
  swig_callbackinvoke = callbackinvoke;
  swig_callbackgetName = callbackgetName;
  swig_callbacksetName = callbacksetName;
  swig_callbackinvokeR__SWIG_0 = callbackinvokeR__SWIG_0;
  swig_callbackinvokeR__SWIG_1 = callbackinvokeR__SWIG_1;
}

void SwigDirector_ArRetFunctor1_Bool_ArgumentBuilder::swig_init_callbacks() {
  swig_callbackinvoke = 0;
  swig_callbackgetName = 0;
  swig_callbacksetName = 0;
  swig_callbackinvokeR__SWIG_0 = 0;
  swig_callbackinvokeR__SWIG_1 = 0;
}

SwigDirector_ArRetFunctor1_Bool_ArgumentBuilderP::SwigDirector_ArRetFunctor1_Bool_ArgumentBuilderP() : ArRetFunctor1< bool,ArArgumentBuilder * >(), Swig::Director() {
  swig_init_callbacks();
}

SwigDirector_ArRetFunctor1_Bool_ArgumentBuilderP::~SwigDirector_ArRetFunctor1_Bool_ArgumentBuilderP() {
  
}


void SwigDirector_ArRetFunctor1_Bool_ArgumentBuilderP::invoke() {
  if (!swig_callbackinvoke) {
    ArRetFunctor< bool >::invoke();
    return;
  } else {
    swig_callbackinvoke();
  }
}

char const *SwigDirector_ArRetFunctor1_Bool_ArgumentBuilderP::getName() {
  char *c_result = 0 ;
  char * jresult = 0 ;
  
  if (!swig_callbackgetName) {
    return ArFunctor::getName();
  } else {
    jresult = (char *) swig_callbackgetName();
    c_result = (char *)jresult; 
  }
  return (char const *)c_result;
}

void SwigDirector_ArRetFunctor1_Bool_ArgumentBuilderP::setName(char const *name) {
  char * jname = 0 ;
  
  if (!swig_callbacksetName) {
    ArFunctor::setName(name);
    return;
  } else {
    jname = SWIG_csharp_string_callback((const char *)name); 
    swig_callbacksetName(jname);
  }
}

bool SwigDirector_ArRetFunctor1_Bool_ArgumentBuilderP::invokeR() {
  bool c_result = SwigValueInit< bool >() ;
  unsigned int jresult = 0 ;
  
  if (!swig_callbackinvokeR__SWIG_0) {
    throw Swig::DirectorPureVirtualException("ArRetFunctor1< bool,ArArgumentBuilder * >::invokeR");
  } else {
    jresult = (unsigned int) swig_callbackinvokeR__SWIG_0();
    c_result = jresult ? true : false; 
  }
  return c_result;
}

bool SwigDirector_ArRetFunctor1_Bool_ArgumentBuilderP::invokeR(ArArgumentBuilder *p1) {
  bool c_result = SwigValueInit< bool >() ;
  unsigned int jresult = 0 ;
  void * jp1 = 0 ;
  
  if (!swig_callbackinvokeR__SWIG_1) {
    throw Swig::DirectorPureVirtualException("ArRetFunctor1< bool,ArArgumentBuilder * >::invokeR");
  } else {
    jp1 = (void *) p1; 
    jresult = (unsigned int) swig_callbackinvokeR__SWIG_1(jp1);
    c_result = jresult ? true : false; 
  }
  return c_result;
}

void SwigDirector_ArRetFunctor1_Bool_ArgumentBuilderP::swig_connect_director(SWIG_Callback0_t callbackinvoke, SWIG_Callback1_t callbackgetName, SWIG_Callback2_t callbacksetName, SWIG_Callback3_t callbackinvokeR__SWIG_0, SWIG_Callback4_t callbackinvokeR__SWIG_1) {
  swig_callbackinvoke = callbackinvoke;
  swig_callbackgetName = callbackgetName;
  swig_callbacksetName = callbacksetName;
  swig_callbackinvokeR__SWIG_0 = callbackinvokeR__SWIG_0;
  swig_callbackinvokeR__SWIG_1 = callbackinvokeR__SWIG_1;
}

void SwigDirector_ArRetFunctor1_Bool_ArgumentBuilderP::swig_init_callbacks() {
  swig_callbackinvoke = 0;
  swig_callbackgetName = 0;
  swig_callbacksetName = 0;
  swig_callbackinvokeR__SWIG_0 = 0;
  swig_callbackinvokeR__SWIG_1 = 0;
}

SwigDirector_ArRetFunctor1_VoidP_VoidP::SwigDirector_ArRetFunctor1_VoidP_VoidP() : ArRetFunctor1< void *,void * >(), Swig::Director() {
  swig_init_callbacks();
}

SwigDirector_ArRetFunctor1_VoidP_VoidP::~SwigDirector_ArRetFunctor1_VoidP_VoidP() {
  
}


void SwigDirector_ArRetFunctor1_VoidP_VoidP::invoke() {
  if (!swig_callbackinvoke) {
    ArRetFunctor< void * >::invoke();
    return;
  } else {
    swig_callbackinvoke();
  }
}

char const *SwigDirector_ArRetFunctor1_VoidP_VoidP::getName() {
  char *c_result = 0 ;
  char * jresult = 0 ;
  
  if (!swig_callbackgetName) {
    return ArFunctor::getName();
  } else {
    jresult = (char *) swig_callbackgetName();
    c_result = (char *)jresult; 
  }
  return (char const *)c_result;
}

void SwigDirector_ArRetFunctor1_VoidP_VoidP::setName(char const *name) {
  char * jname = 0 ;
  
  if (!swig_callbacksetName) {
    ArFunctor::setName(name);
    return;
  } else {
    jname = SWIG_csharp_string_callback((const char *)name); 
    swig_callbacksetName(jname);
  }
}

void * SwigDirector_ArRetFunctor1_VoidP_VoidP::invokeR() {
  void *c_result = 0 ;
  void * jresult = 0 ;
  
  if (!swig_callbackinvokeR__SWIG_0) {
    throw Swig::DirectorPureVirtualException("ArRetFunctor1< void *,void * >::invokeR");
  } else {
    jresult = (void *) swig_callbackinvokeR__SWIG_0();
    c_result = (void *)jresult; 
  }
  return c_result;
}

void * SwigDirector_ArRetFunctor1_VoidP_VoidP::invokeR(void *p1) {
  void *c_result = 0 ;
  void * jresult = 0 ;
  void * jp1 = 0 ;
  
  if (!swig_callbackinvokeR__SWIG_1) {
    throw Swig::DirectorPureVirtualException("ArRetFunctor1< void *,void * >::invokeR");
  } else {
    jp1 = (void *) p1; 
    jresult = (void *) swig_callbackinvokeR__SWIG_1(jp1);
    c_result = (void *)jresult; 
  }
  return c_result;
}

void SwigDirector_ArRetFunctor1_VoidP_VoidP::swig_connect_director(SWIG_Callback0_t callbackinvoke, SWIG_Callback1_t callbackgetName, SWIG_Callback2_t callbacksetName, SWIG_Callback3_t callbackinvokeR__SWIG_0, SWIG_Callback4_t callbackinvokeR__SWIG_1) {
  swig_callbackinvoke = callbackinvoke;
  swig_callbackgetName = callbackgetName;
  swig_callbacksetName = callbacksetName;
  swig_callbackinvokeR__SWIG_0 = callbackinvokeR__SWIG_0;
  swig_callbackinvokeR__SWIG_1 = callbackinvokeR__SWIG_1;
}

void SwigDirector_ArRetFunctor1_VoidP_VoidP::swig_init_callbacks() {
  swig_callbackinvoke = 0;
  swig_callbackgetName = 0;
  swig_callbacksetName = 0;
  swig_callbackinvokeR__SWIG_0 = 0;
  swig_callbackinvokeR__SWIG_1 = 0;
}

SwigDirector_ArAction::SwigDirector_ArAction(char const *name, char const *description) : ArAction(name, description), Swig::Director() {
  swig_init_callbacks();
}

SwigDirector_ArAction::~SwigDirector_ArAction() {
  
}


bool SwigDirector_ArAction::isActive() const {
  bool c_result = SwigValueInit< bool >() ;
  unsigned int jresult = 0 ;
  
  if (!swig_callbackisActive) {
    return ArAction::isActive();
  } else {
    jresult = (unsigned int) swig_callbackisActive();
    c_result = jresult ? true : false; 
  }
  return c_result;
}

void SwigDirector_ArAction::activate() {
  if (!swig_callbackactivate) {
    ArAction::activate();
    return;
  } else {
    swig_callbackactivate();
  }
}

void SwigDirector_ArAction::deactivate() {
  if (!swig_callbackdeactivate) {
    ArAction::deactivate();
    return;
  } else {
    swig_callbackdeactivate();
  }
}

ArActionDesired *SwigDirector_ArAction::fire(ArActionDesired currentDesired) {
  ArActionDesired *c_result = 0 ;
  void * jresult = 0 ;
  void * jcurrentDesired  ;
  
  if (!swig_callbackfire) {
    throw Swig::DirectorPureVirtualException("ArAction::fire");
  } else {
    jcurrentDesired = (void *)&currentDesired; 
    jresult = (void *) swig_callbackfire(jcurrentDesired);
    c_result = (ArActionDesired *)jresult; 
  }
  return c_result;
}

void SwigDirector_ArAction::setRobot(ArRobot *robot) {
  void * jrobot = 0 ;
  
  if (!swig_callbacksetRobot) {
    ArAction::setRobot(robot);
    return;
  } else {
    jrobot = (void *) robot; 
    swig_callbacksetRobot(jrobot);
  }
}

int SwigDirector_ArAction::getNumArgs() const {
  int c_result = SwigValueInit< int >() ;
  int jresult = 0 ;
  
  if (!swig_callbackgetNumArgs) {
    return ArAction::getNumArgs();
  } else {
    jresult = (int) swig_callbackgetNumArgs();
    c_result = (int)jresult; 
  }
  return c_result;
}

ArArg *SwigDirector_ArAction::getArg(int number) {
  ArArg *c_result = 0 ;
  void * jresult = 0 ;
  int jnumber  ;
  
  if (!swig_callbackgetArg) {
    return ArAction::getArg(number);
  } else {
    jnumber = number;
    jresult = (void *) swig_callbackgetArg(jnumber);
    c_result = (ArArg *)jresult; 
  }
  return c_result;
}

char const *SwigDirector_ArAction::getName() const {
  char *c_result = 0 ;
  char * jresult = 0 ;
  
  if (!swig_callbackgetName) {
    return ArAction::getName();
  } else {
    jresult = (char *) swig_callbackgetName();
    c_result = (char *)jresult; 
  }
  return (char const *)c_result;
}

char const *SwigDirector_ArAction::getDescription() const {
  char *c_result = 0 ;
  char * jresult = 0 ;
  
  if (!swig_callbackgetDescription) {
    return ArAction::getDescription();
  } else {
    jresult = (char *) swig_callbackgetDescription();
    c_result = (char *)jresult; 
  }
  return (char const *)c_result;
}

ArActionDesired *SwigDirector_ArAction::getDesired() {
  ArActionDesired *c_result = 0 ;
  void * jresult = 0 ;
  
  if (!swig_callbackgetDesired__SWIG_0) {
    return ArAction::getDesired();
  } else {
    jresult = (void *) swig_callbackgetDesired__SWIG_0();
    c_result = (ArActionDesired *)jresult; 
  }
  return c_result;
}

ArActionDesired const *SwigDirector_ArAction::getDesired() const {
  ArActionDesired *c_result = 0 ;
  void * jresult = 0 ;
  
  if (!swig_callbackgetDesired__SWIG_1) {
    return ArAction::getDesired();
  } else {
    jresult = (void *) swig_callbackgetDesired__SWIG_1();
    c_result = (ArActionDesired *)jresult; 
  }
  return (ArActionDesired const *)c_result;
}

void SwigDirector_ArAction::log(bool verbose) const {
  unsigned int jverbose  ;
  
  if (!swig_callbacklog__SWIG_0) {
    ArAction::log(verbose);
    return;
  } else {
    jverbose = verbose;
    swig_callbacklog__SWIG_0(jverbose);
  }
}

void SwigDirector_ArAction::swig_connect_director(SWIG_Callback0_t callbackisActive, SWIG_Callback1_t callbackactivate, SWIG_Callback2_t callbackdeactivate, SWIG_Callback3_t callbackfire, SWIG_Callback4_t callbacksetRobot, SWIG_Callback5_t callbackgetNumArgs, SWIG_Callback6_t callbackgetArg, SWIG_Callback7_t callbackgetName, SWIG_Callback8_t callbackgetDescription, SWIG_Callback9_t callbackgetDesired__SWIG_0, SWIG_Callback10_t callbackgetDesired__SWIG_1, SWIG_Callback11_t callbacklog__SWIG_0, SWIG_Callback12_t callbacklog__SWIG_1) {
  swig_callbackisActive = callbackisActive;
  swig_callbackactivate = callbackactivate;
  swig_callbackdeactivate = callbackdeactivate;
  swig_callbackfire = callbackfire;
  swig_callbacksetRobot = callbacksetRobot;
  swig_callbackgetNumArgs = callbackgetNumArgs;
  swig_callbackgetArg = callbackgetArg;
  swig_callbackgetName = callbackgetName;
  swig_callbackgetDescription = callbackgetDescription;
  swig_callbackgetDesired__SWIG_0 = callbackgetDesired__SWIG_0;
  swig_callbackgetDesired__SWIG_1 = callbackgetDesired__SWIG_1;
  swig_callbacklog__SWIG_0 = callbacklog__SWIG_0;
  swig_callbacklog__SWIG_1 = callbacklog__SWIG_1;
}

void SwigDirector_ArAction::swig_init_callbacks() {
  swig_callbackisActive = 0;
  swig_callbackactivate = 0;
  swig_callbackdeactivate = 0;
  swig_callbackfire = 0;
  swig_callbacksetRobot = 0;
  swig_callbackgetNumArgs = 0;
  swig_callbackgetArg = 0;
  swig_callbackgetName = 0;
  swig_callbackgetDescription = 0;
  swig_callbackgetDesired__SWIG_0 = 0;
  swig_callbackgetDesired__SWIG_1 = 0;
  swig_callbacklog__SWIG_0 = 0;
  swig_callbacklog__SWIG_1 = 0;
}


#ifdef __cplusplus
extern "C" {
#endif

SWIGEXPORT int SWIGSTDCALL CSharp_ENABLE_FUNCTOR_DIRECTORS_get() {
  int jresult ;
  int result;
  
  result = (int)(1);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_ArPoseVector_Clear(void * jarg1) {
  std::vector< ArPose > *arg1 = (std::vector< ArPose > *) 0 ;
  
  arg1 = (std::vector< ArPose > *)jarg1; 
  (arg1)->clear();
}


SWIGEXPORT void SWIGSTDCALL CSharp_ArPoseVector_Add(void * jarg1, void * jarg2) {
  std::vector< ArPose > *arg1 = (std::vector< ArPose > *) 0 ;
  ArPose *arg2 = 0 ;
  
  arg1 = (std::vector< ArPose > *)jarg1; 
  arg2 = (ArPose *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "ArPose const & type is null", 0);
    return ;
  } 
  (arg1)->push_back((ArPose const &)*arg2);
}


SWIGEXPORT unsigned long SWIGSTDCALL CSharp_ArPoseVector_size(void * jarg1) {
  unsigned long jresult ;
  std::vector< ArPose > *arg1 = (std::vector< ArPose > *) 0 ;
  std::vector< ArPose >::size_type result;
  
  arg1 = (std::vector< ArPose > *)jarg1; 
  result = ((std::vector< ArPose > const *)arg1)->size();
  jresult = (unsigned long)result; 
  return jresult;
}


SWIGEXPORT unsigned long SWIGSTDCALL CSharp_ArPoseVector_capacity(void * jarg1) {
  unsigned long jresult ;
  std::vector< ArPose > *arg1 = (std::vector< ArPose > *) 0 ;
  std::vector< ArPose >::size_type result;
  
  arg1 = (std::vector< ArPose > *)jarg1; 
  result = ((std::vector< ArPose > const *)arg1)->capacity();
  jresult = (unsigned long)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_ArPoseVector_reserve(void * jarg1, unsigned long jarg2) {
  std::vector< ArPose > *arg1 = (std::vector< ArPose > *) 0 ;
  std::vector< ArPose >::size_type arg2 ;
  
  arg1 = (std::vector< ArPose > *)jarg1; 
  arg2 = (std::vector< ArPose >::size_type)jarg2; 
  (arg1)->reserve(arg2);
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_ArPoseVector__SWIG_0() {
  void * jresult ;
  std::vector< ArPose > *result = 0 ;
  
  result = (std::vector< ArPose > *)new std::vector< ArPose >();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_ArPoseVector__SWIG_1(void * jarg1) {
  void * jresult ;
  std::vector< ArPose > *arg1 = 0 ;
  std::vector< ArPose > *result = 0 ;
  
  arg1 = (std::vector< ArPose > *)jarg1;
  if (!arg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "std::vector< ArPose > const & type is null", 0);
    return 0;
  } 
  result = (std::vector< ArPose > *)new std::vector< ArPose >((std::vector< ArPose > const &)*arg1);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_ArPoseVector__SWIG_2(int jarg1) {
  void * jresult ;
  int arg1 ;
  std::vector< ArPose > *result = 0 ;
  
  arg1 = (int)jarg1; 
  try {
    result = (std::vector< ArPose > *)new_std_vector_Sl_ArPose_Sg___SWIG_2(arg1);
  }
  catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return 0;
  }
  
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_ArPoseVector_getitemcopy(void * jarg1, int jarg2) {
  void * jresult ;
  std::vector< ArPose > *arg1 = (std::vector< ArPose > *) 0 ;
  int arg2 ;
  ArPose result;
  
  arg1 = (std::vector< ArPose > *)jarg1; 
  arg2 = (int)jarg2; 
  try {
    result = std_vector_Sl_ArPose_Sg__getitemcopy(arg1,arg2);
  }
  catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return 0;
  }
  
  jresult = new ArPose((const ArPose &)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_ArPoseVector_getitem(void * jarg1, int jarg2) {
  void * jresult ;
  std::vector< ArPose > *arg1 = (std::vector< ArPose > *) 0 ;
  int arg2 ;
  ArPose *result = 0 ;
  
  arg1 = (std::vector< ArPose > *)jarg1; 
  arg2 = (int)jarg2; 
  try {
    result = (ArPose *) &std_vector_Sl_ArPose_Sg__getitem(arg1,arg2);
  }
  catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return 0;
  }
  
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_ArPoseVector_setitem(void * jarg1, int jarg2, void * jarg3) {
  std::vector< ArPose > *arg1 = (std::vector< ArPose > *) 0 ;
  int arg2 ;
  ArPose *arg3 = 0 ;
  
  arg1 = (std::vector< ArPose > *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (ArPose *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "ArPose const & type is null", 0);
    return ;
  } 
  try {
    std_vector_Sl_ArPose_Sg__setitem(arg1,arg2,(ArPose const &)*arg3);
  }
  catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return ;
  }
  
}


SWIGEXPORT void SWIGSTDCALL CSharp_ArPoseVector_AddRange(void * jarg1, void * jarg2) {
  std::vector< ArPose > *arg1 = (std::vector< ArPose > *) 0 ;
  std::vector< ArPose > *arg2 = 0 ;
  
  arg1 = (std::vector< ArPose > *)jarg1; 
  arg2 = (std::vector< ArPose > *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "std::vector< ArPose > const & type is null", 0);
    return ;
  } 
  std_vector_Sl_ArPose_Sg__AddRange(arg1,(std::vector< ArPose > const &)*arg2);
}


SWIGEXPORT void * SWIGSTDCALL CSharp_ArPoseVector_GetRange(void * jarg1, int jarg2, int jarg3) {
  void * jresult ;
  std::vector< ArPose > *arg1 = (std::vector< ArPose > *) 0 ;
  int arg2 ;
  int arg3 ;
  std::vector< ArPose > *result = 0 ;
  
  arg1 = (std::vector< ArPose > *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (int)jarg3; 
  try {
    result = (std::vector< ArPose > *)std_vector_Sl_ArPose_Sg__GetRange(arg1,arg2,arg3);
  }
  catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return 0;
  }
  catch(std::invalid_argument &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentException, (&_e)->what(), "");
    return 0;
  }
  
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_ArPoseVector_Insert(void * jarg1, int jarg2, void * jarg3) {
  std::vector< ArPose > *arg1 = (std::vector< ArPose > *) 0 ;
  int arg2 ;
  ArPose *arg3 = 0 ;
  
  arg1 = (std::vector< ArPose > *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (ArPose *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "ArPose const & type is null", 0);
    return ;
  } 
  try {
    std_vector_Sl_ArPose_Sg__Insert(arg1,arg2,(ArPose const &)*arg3);
  }
  catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return ;
  }
  
}


SWIGEXPORT void SWIGSTDCALL CSharp_ArPoseVector_InsertRange(void * jarg1, int jarg2, void * jarg3) {
  std::vector< ArPose > *arg1 = (std::vector< ArPose > *) 0 ;
  int arg2 ;
  std::vector< ArPose > *arg3 = 0 ;
  
  arg1 = (std::vector< ArPose > *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (std::vector< ArPose > *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "std::vector< ArPose > const & type is null", 0);
    return ;
  } 
  try {
    std_vector_Sl_ArPose_Sg__InsertRange(arg1,arg2,(std::vector< ArPose > const &)*arg3);
  }
  catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return ;
  }
  
}


SWIGEXPORT void SWIGSTDCALL CSharp_ArPoseVector_RemoveAt(void * jarg1, int jarg2) {
  std::vector< ArPose > *arg1 = (std::vector< ArPose > *) 0 ;
  int arg2 ;
  
  arg1 = (std::vector< ArPose > *)jarg1; 
  arg2 = (int)jarg2; 
  try {
    std_vector_Sl_ArPose_Sg__RemoveAt(arg1,arg2);
  }
  catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return ;
  }
  
}


SWIGEXPORT void SWIGSTDCALL CSharp_ArPoseVector_RemoveRange(void * jarg1, int jarg2, int jarg3) {
  std::vector< ArPose > *arg1 = (std::vector< ArPose > *) 0 ;
  int arg2 ;
  int arg3 ;
  
  arg1 = (std::vector< ArPose > *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (int)jarg3; 
  try {
    std_vector_Sl_ArPose_Sg__RemoveRange(arg1,arg2,arg3);
  }
  catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return ;
  }
  catch(std::invalid_argument &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentException, (&_e)->what(), "");
    return ;
  }
  
}


SWIGEXPORT void * SWIGSTDCALL CSharp_ArPoseVector_Repeat(void * jarg1, int jarg2) {
  void * jresult ;
  ArPose *arg1 = 0 ;
  int arg2 ;
  std::vector< ArPose > *result = 0 ;
  
  arg1 = (ArPose *)jarg1;
  if (!arg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "ArPose const & type is null", 0);
    return 0;
  } 
  arg2 = (int)jarg2; 
  try {
    result = (std::vector< ArPose > *)std_vector_Sl_ArPose_Sg__Repeat((ArPose const &)*arg1,arg2);
  }
  catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return 0;
  }
  
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_ArPoseVector_Reverse__SWIG_0(void * jarg1) {
  std::vector< ArPose > *arg1 = (std::vector< ArPose > *) 0 ;
  
  arg1 = (std::vector< ArPose > *)jarg1; 
  std_vector_Sl_ArPose_Sg__Reverse__SWIG_0(arg1);
}


SWIGEXPORT void SWIGSTDCALL CSharp_ArPoseVector_Reverse__SWIG_1(void * jarg1, int jarg2, int jarg3) {
  std::vector< ArPose > *arg1 = (std::vector< ArPose > *) 0 ;
  int arg2 ;
  int arg3 ;
  
  arg1 = (std::vector< ArPose > *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (int)jarg3; 
  try {
    std_vector_Sl_ArPose_Sg__Reverse__SWIG_1(arg1,arg2,arg3);
  }
  catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return ;
  }
  catch(std::invalid_argument &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentException, (&_e)->what(), "");
    return ;
  }
  
}


SWIGEXPORT void SWIGSTDCALL CSharp_ArPoseVector_SetRange(void * jarg1, int jarg2, void * jarg3) {
  std::vector< ArPose > *arg1 = (std::vector< ArPose > *) 0 ;
  int arg2 ;
  std::vector< ArPose > *arg3 = 0 ;
  
  arg1 = (std::vector< ArPose > *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (std::vector< ArPose > *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "std::vector< ArPose > const & type is null", 0);
    return ;
  } 
  try {
    std_vector_Sl_ArPose_Sg__SetRange(arg1,arg2,(std::vector< ArPose > const &)*arg3);
  }
  catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return ;
  }
  
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_ArPoseVector(void * jarg1) {
  std::vector< ArPose > *arg1 = (std::vector< ArPose > *) 0 ;
  
  arg1 = (std::vector< ArPose > *)jarg1; 
  delete arg1;
}


SWIGEXPORT void SWIGSTDCALL CSharp_ArPoseWithTimeVector_Clear(void * jarg1) {
  std::vector< ArPoseWithTime > *arg1 = (std::vector< ArPoseWithTime > *) 0 ;
  
  arg1 = (std::vector< ArPoseWithTime > *)jarg1; 
  (arg1)->clear();
}


SWIGEXPORT void SWIGSTDCALL CSharp_ArPoseWithTimeVector_Add(void * jarg1, void * jarg2) {
  std::vector< ArPoseWithTime > *arg1 = (std::vector< ArPoseWithTime > *) 0 ;
  ArPoseWithTime *arg2 = 0 ;
  
  arg1 = (std::vector< ArPoseWithTime > *)jarg1; 
  arg2 = (ArPoseWithTime *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "ArPoseWithTime const & type is null", 0);
    return ;
  } 
  (arg1)->push_back((ArPoseWithTime const &)*arg2);
}


SWIGEXPORT unsigned long SWIGSTDCALL CSharp_ArPoseWithTimeVector_size(void * jarg1) {
  unsigned long jresult ;
  std::vector< ArPoseWithTime > *arg1 = (std::vector< ArPoseWithTime > *) 0 ;
  std::vector< ArPoseWithTime >::size_type result;
  
  arg1 = (std::vector< ArPoseWithTime > *)jarg1; 
  result = ((std::vector< ArPoseWithTime > const *)arg1)->size();
  jresult = (unsigned long)result; 
  return jresult;
}


SWIGEXPORT unsigned long SWIGSTDCALL CSharp_ArPoseWithTimeVector_capacity(void * jarg1) {
  unsigned long jresult ;
  std::vector< ArPoseWithTime > *arg1 = (std::vector< ArPoseWithTime > *) 0 ;
  std::vector< ArPoseWithTime >::size_type result;
  
  arg1 = (std::vector< ArPoseWithTime > *)jarg1; 
  result = ((std::vector< ArPoseWithTime > const *)arg1)->capacity();
  jresult = (unsigned long)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_ArPoseWithTimeVector_reserve(void * jarg1, unsigned long jarg2) {
  std::vector< ArPoseWithTime > *arg1 = (std::vector< ArPoseWithTime > *) 0 ;
  std::vector< ArPoseWithTime >::size_type arg2 ;
  
  arg1 = (std::vector< ArPoseWithTime > *)jarg1; 
  arg2 = (std::vector< ArPoseWithTime >::size_type)jarg2; 
  (arg1)->reserve(arg2);
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_ArPoseWithTimeVector__SWIG_0() {
  void * jresult ;
  std::vector< ArPoseWithTime > *result = 0 ;
  
  result = (std::vector< ArPoseWithTime > *)new std::vector< ArPoseWithTime >();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_ArPoseWithTimeVector__SWIG_1(void * jarg1) {
  void * jresult ;
  std::vector< ArPoseWithTime > *arg1 = 0 ;
  std::vector< ArPoseWithTime > *result = 0 ;
  
  arg1 = (std::vector< ArPoseWithTime > *)jarg1;
  if (!arg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "std::vector< ArPoseWithTime > const & type is null", 0);
    return 0;
  } 
  result = (std::vector< ArPoseWithTime > *)new std::vector< ArPoseWithTime >((std::vector< ArPoseWithTime > const &)*arg1);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_ArPoseWithTimeVector__SWIG_2(int jarg1) {
  void * jresult ;
  int arg1 ;
  std::vector< ArPoseWithTime > *result = 0 ;
  
  arg1 = (int)jarg1; 
  try {
    result = (std::vector< ArPoseWithTime > *)new_std_vector_Sl_ArPoseWithTime_Sg___SWIG_2(arg1);
  }
  catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return 0;
  }
  
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_ArPoseWithTimeVector_getitemcopy(void * jarg1, int jarg2) {
  void * jresult ;
  std::vector< ArPoseWithTime > *arg1 = (std::vector< ArPoseWithTime > *) 0 ;
  int arg2 ;
  ArPoseWithTime result;
  
  arg1 = (std::vector< ArPoseWithTime > *)jarg1; 
  arg2 = (int)jarg2; 
  try {
    result = std_vector_Sl_ArPoseWithTime_Sg__getitemcopy(arg1,arg2);
  }
  catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return 0;
  }
  
  jresult = new ArPoseWithTime((const ArPoseWithTime &)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_ArPoseWithTimeVector_getitem(void * jarg1, int jarg2) {
  void * jresult ;
  std::vector< ArPoseWithTime > *arg1 = (std::vector< ArPoseWithTime > *) 0 ;
  int arg2 ;
  ArPoseWithTime *result = 0 ;
  
  arg1 = (std::vector< ArPoseWithTime > *)jarg1; 
  arg2 = (int)jarg2; 
  try {
    result = (ArPoseWithTime *) &std_vector_Sl_ArPoseWithTime_Sg__getitem(arg1,arg2);
  }
  catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return 0;
  }
  
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_ArPoseWithTimeVector_setitem(void * jarg1, int jarg2, void * jarg3) {
  std::vector< ArPoseWithTime > *arg1 = (std::vector< ArPoseWithTime > *) 0 ;
  int arg2 ;
  ArPoseWithTime *arg3 = 0 ;
  
  arg1 = (std::vector< ArPoseWithTime > *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (ArPoseWithTime *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "ArPoseWithTime const & type is null", 0);
    return ;
  } 
  try {
    std_vector_Sl_ArPoseWithTime_Sg__setitem(arg1,arg2,(ArPoseWithTime const &)*arg3);
  }
  catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return ;
  }
  
}


SWIGEXPORT void SWIGSTDCALL CSharp_ArPoseWithTimeVector_AddRange(void * jarg1, void * jarg2) {
  std::vector< ArPoseWithTime > *arg1 = (std::vector< ArPoseWithTime > *) 0 ;
  std::vector< ArPoseWithTime > *arg2 = 0 ;
  
  arg1 = (std::vector< ArPoseWithTime > *)jarg1; 
  arg2 = (std::vector< ArPoseWithTime > *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "std::vector< ArPoseWithTime > const & type is null", 0);
    return ;
  } 
  std_vector_Sl_ArPoseWithTime_Sg__AddRange(arg1,(std::vector< ArPoseWithTime > const &)*arg2);
}


SWIGEXPORT void * SWIGSTDCALL CSharp_ArPoseWithTimeVector_GetRange(void * jarg1, int jarg2, int jarg3) {
  void * jresult ;
  std::vector< ArPoseWithTime > *arg1 = (std::vector< ArPoseWithTime > *) 0 ;
  int arg2 ;
  int arg3 ;
  std::vector< ArPoseWithTime > *result = 0 ;
  
  arg1 = (std::vector< ArPoseWithTime > *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (int)jarg3; 
  try {
    result = (std::vector< ArPoseWithTime > *)std_vector_Sl_ArPoseWithTime_Sg__GetRange(arg1,arg2,arg3);
  }
  catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return 0;
  }
  catch(std::invalid_argument &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentException, (&_e)->what(), "");
    return 0;
  }
  
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_ArPoseWithTimeVector_Insert(void * jarg1, int jarg2, void * jarg3) {
  std::vector< ArPoseWithTime > *arg1 = (std::vector< ArPoseWithTime > *) 0 ;
  int arg2 ;
  ArPoseWithTime *arg3 = 0 ;
  
  arg1 = (std::vector< ArPoseWithTime > *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (ArPoseWithTime *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "ArPoseWithTime const & type is null", 0);
    return ;
  } 
  try {
    std_vector_Sl_ArPoseWithTime_Sg__Insert(arg1,arg2,(ArPoseWithTime const &)*arg3);
  }
  catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return ;
  }
  
}


SWIGEXPORT void SWIGSTDCALL CSharp_ArPoseWithTimeVector_InsertRange(void * jarg1, int jarg2, void * jarg3) {
  std::vector< ArPoseWithTime > *arg1 = (std::vector< ArPoseWithTime > *) 0 ;
  int arg2 ;
  std::vector< ArPoseWithTime > *arg3 = 0 ;
  
  arg1 = (std::vector< ArPoseWithTime > *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (std::vector< ArPoseWithTime > *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "std::vector< ArPoseWithTime > const & type is null", 0);
    return ;
  } 
  try {
    std_vector_Sl_ArPoseWithTime_Sg__InsertRange(arg1,arg2,(std::vector< ArPoseWithTime > const &)*arg3);
  }
  catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return ;
  }
  
}


SWIGEXPORT void SWIGSTDCALL CSharp_ArPoseWithTimeVector_RemoveAt(void * jarg1, int jarg2) {
  std::vector< ArPoseWithTime > *arg1 = (std::vector< ArPoseWithTime > *) 0 ;
  int arg2 ;
  
  arg1 = (std::vector< ArPoseWithTime > *)jarg1; 
  arg2 = (int)jarg2; 
  try {
    std_vector_Sl_ArPoseWithTime_Sg__RemoveAt(arg1,arg2);
  }
  catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return ;
  }
  
}


SWIGEXPORT void SWIGSTDCALL CSharp_ArPoseWithTimeVector_RemoveRange(void * jarg1, int jarg2, int jarg3) {
  std::vector< ArPoseWithTime > *arg1 = (std::vector< ArPoseWithTime > *) 0 ;
  int arg2 ;
  int arg3 ;
  
  arg1 = (std::vector< ArPoseWithTime > *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (int)jarg3; 
  try {
    std_vector_Sl_ArPoseWithTime_Sg__RemoveRange(arg1,arg2,arg3);
  }
  catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return ;
  }
  catch(std::invalid_argument &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentException, (&_e)->what(), "");
    return ;
  }
  
}


SWIGEXPORT void * SWIGSTDCALL CSharp_ArPoseWithTimeVector_Repeat(void * jarg1, int jarg2) {
  void * jresult ;
  ArPoseWithTime *arg1 = 0 ;
  int arg2 ;
  std::vector< ArPoseWithTime > *result = 0 ;
  
  arg1 = (ArPoseWithTime *)jarg1;
  if (!arg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "ArPoseWithTime const & type is null", 0);
    return 0;
  } 
  arg2 = (int)jarg2; 
  try {
    result = (std::vector< ArPoseWithTime > *)std_vector_Sl_ArPoseWithTime_Sg__Repeat((ArPoseWithTime const &)*arg1,arg2);
  }
  catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return 0;
  }
  
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_ArPoseWithTimeVector_Reverse__SWIG_0(void * jarg1) {
  std::vector< ArPoseWithTime > *arg1 = (std::vector< ArPoseWithTime > *) 0 ;
  
  arg1 = (std::vector< ArPoseWithTime > *)jarg1; 
  std_vector_Sl_ArPoseWithTime_Sg__Reverse__SWIG_0(arg1);
}


SWIGEXPORT void SWIGSTDCALL CSharp_ArPoseWithTimeVector_Reverse__SWIG_1(void * jarg1, int jarg2, int jarg3) {
  std::vector< ArPoseWithTime > *arg1 = (std::vector< ArPoseWithTime > *) 0 ;
  int arg2 ;
  int arg3 ;
  
  arg1 = (std::vector< ArPoseWithTime > *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (int)jarg3; 
  try {
    std_vector_Sl_ArPoseWithTime_Sg__Reverse__SWIG_1(arg1,arg2,arg3);
  }
  catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return ;
  }
  catch(std::invalid_argument &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentException, (&_e)->what(), "");
    return ;
  }
  
}


SWIGEXPORT void SWIGSTDCALL CSharp_ArPoseWithTimeVector_SetRange(void * jarg1, int jarg2, void * jarg3) {
  std::vector< ArPoseWithTime > *arg1 = (std::vector< ArPoseWithTime > *) 0 ;
  int arg2 ;
  std::vector< ArPoseWithTime > *arg3 = 0 ;
  
  arg1 = (std::vector< ArPoseWithTime > *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (std::vector< ArPoseWithTime > *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "std::vector< ArPoseWithTime > const & type is null", 0);
    return ;
  } 
  try {
    std_vector_Sl_ArPoseWithTime_Sg__SetRange(arg1,arg2,(std::vector< ArPoseWithTime > const &)*arg3);
  }
  catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return ;
  }
  
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_ArPoseWithTimeVector(void * jarg1) {
  std::vector< ArPoseWithTime > *arg1 = (std::vector< ArPoseWithTime > *) 0 ;
  
  arg1 = (std::vector< ArPoseWithTime > *)jarg1; 
  delete arg1;
}


SWIGEXPORT void SWIGSTDCALL CSharp_ArSensorReadingVector_Clear(void * jarg1) {
  std::vector< ArSensorReading > *arg1 = (std::vector< ArSensorReading > *) 0 ;
  
  arg1 = (std::vector< ArSensorReading > *)jarg1; 
  (arg1)->clear();
}


SWIGEXPORT void SWIGSTDCALL CSharp_ArSensorReadingVector_Add(void * jarg1, void * jarg2) {
  std::vector< ArSensorReading > *arg1 = (std::vector< ArSensorReading > *) 0 ;
  ArSensorReading *arg2 = 0 ;
  
  arg1 = (std::vector< ArSensorReading > *)jarg1; 
  arg2 = (ArSensorReading *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "ArSensorReading const & type is null", 0);
    return ;
  } 
  (arg1)->push_back((ArSensorReading const &)*arg2);
}


SWIGEXPORT unsigned long SWIGSTDCALL CSharp_ArSensorReadingVector_size(void * jarg1) {
  unsigned long jresult ;
  std::vector< ArSensorReading > *arg1 = (std::vector< ArSensorReading > *) 0 ;
  std::vector< ArSensorReading >::size_type result;
  
  arg1 = (std::vector< ArSensorReading > *)jarg1; 
  result = ((std::vector< ArSensorReading > const *)arg1)->size();
  jresult = (unsigned long)result; 
  return jresult;
}


SWIGEXPORT unsigned long SWIGSTDCALL CSharp_ArSensorReadingVector_capacity(void * jarg1) {
  unsigned long jresult ;
  std::vector< ArSensorReading > *arg1 = (std::vector< ArSensorReading > *) 0 ;
  std::vector< ArSensorReading >::size_type result;
  
  arg1 = (std::vector< ArSensorReading > *)jarg1; 
  result = ((std::vector< ArSensorReading > const *)arg1)->capacity();
  jresult = (unsigned long)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_ArSensorReadingVector_reserve(void * jarg1, unsigned long jarg2) {
  std::vector< ArSensorReading > *arg1 = (std::vector< ArSensorReading > *) 0 ;
  std::vector< ArSensorReading >::size_type arg2 ;
  
  arg1 = (std::vector< ArSensorReading > *)jarg1; 
  arg2 = (std::vector< ArSensorReading >::size_type)jarg2; 
  (arg1)->reserve(arg2);
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_ArSensorReadingVector__SWIG_0() {
  void * jresult ;
  std::vector< ArSensorReading > *result = 0 ;
  
  result = (std::vector< ArSensorReading > *)new std::vector< ArSensorReading >();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_ArSensorReadingVector__SWIG_1(void * jarg1) {
  void * jresult ;
  std::vector< ArSensorReading > *arg1 = 0 ;
  std::vector< ArSensorReading > *result = 0 ;
  
  arg1 = (std::vector< ArSensorReading > *)jarg1;
  if (!arg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "std::vector< ArSensorReading > const & type is null", 0);
    return 0;
  } 
  result = (std::vector< ArSensorReading > *)new std::vector< ArSensorReading >((std::vector< ArSensorReading > const &)*arg1);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_ArSensorReadingVector__SWIG_2(int jarg1) {
  void * jresult ;
  int arg1 ;
  std::vector< ArSensorReading > *result = 0 ;
  
  arg1 = (int)jarg1; 
  try {
    result = (std::vector< ArSensorReading > *)new_std_vector_Sl_ArSensorReading_Sg___SWIG_2(arg1);
  }
  catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return 0;
  }
  
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_ArSensorReadingVector_getitemcopy(void * jarg1, int jarg2) {
  void * jresult ;
  std::vector< ArSensorReading > *arg1 = (std::vector< ArSensorReading > *) 0 ;
  int arg2 ;
  ArSensorReading result;
  
  arg1 = (std::vector< ArSensorReading > *)jarg1; 
  arg2 = (int)jarg2; 
  try {
    result = std_vector_Sl_ArSensorReading_Sg__getitemcopy(arg1,arg2);
  }
  catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return 0;
  }
  
  jresult = new ArSensorReading((const ArSensorReading &)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_ArSensorReadingVector_getitem(void * jarg1, int jarg2) {
  void * jresult ;
  std::vector< ArSensorReading > *arg1 = (std::vector< ArSensorReading > *) 0 ;
  int arg2 ;
  ArSensorReading *result = 0 ;
  
  arg1 = (std::vector< ArSensorReading > *)jarg1; 
  arg2 = (int)jarg2; 
  try {
    result = (ArSensorReading *) &std_vector_Sl_ArSensorReading_Sg__getitem(arg1,arg2);
  }
  catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return 0;
  }
  
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_ArSensorReadingVector_setitem(void * jarg1, int jarg2, void * jarg3) {
  std::vector< ArSensorReading > *arg1 = (std::vector< ArSensorReading > *) 0 ;
  int arg2 ;
  ArSensorReading *arg3 = 0 ;
  
  arg1 = (std::vector< ArSensorReading > *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (ArSensorReading *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "ArSensorReading const & type is null", 0);
    return ;
  } 
  try {
    std_vector_Sl_ArSensorReading_Sg__setitem(arg1,arg2,(ArSensorReading const &)*arg3);
  }
  catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return ;
  }
  
}


SWIGEXPORT void SWIGSTDCALL CSharp_ArSensorReadingVector_AddRange(void * jarg1, void * jarg2) {
  std::vector< ArSensorReading > *arg1 = (std::vector< ArSensorReading > *) 0 ;
  std::vector< ArSensorReading > *arg2 = 0 ;
  
  arg1 = (std::vector< ArSensorReading > *)jarg1; 
  arg2 = (std::vector< ArSensorReading > *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "std::vector< ArSensorReading > const & type is null", 0);
    return ;
  } 
  std_vector_Sl_ArSensorReading_Sg__AddRange(arg1,(std::vector< ArSensorReading > const &)*arg2);
}


SWIGEXPORT void * SWIGSTDCALL CSharp_ArSensorReadingVector_GetRange(void * jarg1, int jarg2, int jarg3) {
  void * jresult ;
  std::vector< ArSensorReading > *arg1 = (std::vector< ArSensorReading > *) 0 ;
  int arg2 ;
  int arg3 ;
  std::vector< ArSensorReading > *result = 0 ;
  
  arg1 = (std::vector< ArSensorReading > *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (int)jarg3; 
  try {
    result = (std::vector< ArSensorReading > *)std_vector_Sl_ArSensorReading_Sg__GetRange(arg1,arg2,arg3);
  }
  catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return 0;
  }
  catch(std::invalid_argument &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentException, (&_e)->what(), "");
    return 0;
  }
  
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_ArSensorReadingVector_Insert(void * jarg1, int jarg2, void * jarg3) {
  std::vector< ArSensorReading > *arg1 = (std::vector< ArSensorReading > *) 0 ;
  int arg2 ;
  ArSensorReading *arg3 = 0 ;
  
  arg1 = (std::vector< ArSensorReading > *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (ArSensorReading *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "ArSensorReading const & type is null", 0);
    return ;
  } 
  try {
    std_vector_Sl_ArSensorReading_Sg__Insert(arg1,arg2,(ArSensorReading const &)*arg3);
  }
  catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return ;
  }
  
}


SWIGEXPORT void SWIGSTDCALL CSharp_ArSensorReadingVector_InsertRange(void * jarg1, int jarg2, void * jarg3) {
  std::vector< ArSensorReading > *arg1 = (std::vector< ArSensorReading > *) 0 ;
  int arg2 ;
  std::vector< ArSensorReading > *arg3 = 0 ;
  
  arg1 = (std::vector< ArSensorReading > *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (std::vector< ArSensorReading > *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "std::vector< ArSensorReading > const & type is null", 0);
    return ;
  } 
  try {
    std_vector_Sl_ArSensorReading_Sg__InsertRange(arg1,arg2,(std::vector< ArSensorReading > const &)*arg3);
  }
  catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return ;
  }
  
}


SWIGEXPORT void SWIGSTDCALL CSharp_ArSensorReadingVector_RemoveAt(void * jarg1, int jarg2) {
  std::vector< ArSensorReading > *arg1 = (std::vector< ArSensorReading > *) 0 ;
  int arg2 ;
  
  arg1 = (std::vector< ArSensorReading > *)jarg1; 
  arg2 = (int)jarg2; 
  try {
    std_vector_Sl_ArSensorReading_Sg__RemoveAt(arg1,arg2);
  }
  catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return ;
  }
  
}


SWIGEXPORT void SWIGSTDCALL CSharp_ArSensorReadingVector_RemoveRange(void * jarg1, int jarg2, int jarg3) {
  std::vector< ArSensorReading > *arg1 = (std::vector< ArSensorReading > *) 0 ;
  int arg2 ;
  int arg3 ;
  
  arg1 = (std::vector< ArSensorReading > *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (int)jarg3; 
  try {
    std_vector_Sl_ArSensorReading_Sg__RemoveRange(arg1,arg2,arg3);
  }
  catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return ;
  }
  catch(std::invalid_argument &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentException, (&_e)->what(), "");
    return ;
  }
  
}


SWIGEXPORT void * SWIGSTDCALL CSharp_ArSensorReadingVector_Repeat(void * jarg1, int jarg2) {
  void * jresult ;
  ArSensorReading *arg1 = 0 ;
  int arg2 ;
  std::vector< ArSensorReading > *result = 0 ;
  
  arg1 = (ArSensorReading *)jarg1;
  if (!arg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "ArSensorReading const & type is null", 0);
    return 0;
  } 
  arg2 = (int)jarg2; 
  try {
    result = (std::vector< ArSensorReading > *)std_vector_Sl_ArSensorReading_Sg__Repeat((ArSensorReading const &)*arg1,arg2);
  }
  catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return 0;
  }
  
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_ArSensorReadingVector_Reverse__SWIG_0(void * jarg1) {
  std::vector< ArSensorReading > *arg1 = (std::vector< ArSensorReading > *) 0 ;
  
  arg1 = (std::vector< ArSensorReading > *)jarg1; 
  std_vector_Sl_ArSensorReading_Sg__Reverse__SWIG_0(arg1);
}


SWIGEXPORT void SWIGSTDCALL CSharp_ArSensorReadingVector_Reverse__SWIG_1(void * jarg1, int jarg2, int jarg3) {
  std::vector< ArSensorReading > *arg1 = (std::vector< ArSensorReading > *) 0 ;
  int arg2 ;
  int arg3 ;
  
  arg1 = (std::vector< ArSensorReading > *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (int)jarg3; 
  try {
    std_vector_Sl_ArSensorReading_Sg__Reverse__SWIG_1(arg1,arg2,arg3);
  }
  catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return ;
  }
  catch(std::invalid_argument &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentException, (&_e)->what(), "");
    return ;
  }
  
}


SWIGEXPORT void SWIGSTDCALL CSharp_ArSensorReadingVector_SetRange(void * jarg1, int jarg2, void * jarg3) {
  std::vector< ArSensorReading > *arg1 = (std::vector< ArSensorReading > *) 0 ;
  int arg2 ;
  std::vector< ArSensorReading > *arg3 = 0 ;
  
  arg1 = (std::vector< ArSensorReading > *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (std::vector< ArSensorReading > *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "std::vector< ArSensorReading > const & type is null", 0);
    return ;
  } 
  try {
    std_vector_Sl_ArSensorReading_Sg__SetRange(arg1,arg2,(std::vector< ArSensorReading > const &)*arg3);
  }
  catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return ;
  }
  
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_ArSensorReadingVector(void * jarg1) {
  std::vector< ArSensorReading > *arg1 = (std::vector< ArSensorReading > *) 0 ;
  
  arg1 = (std::vector< ArSensorReading > *)jarg1; 
  delete arg1;
}


SWIGEXPORT void SWIGSTDCALL CSharp_DoubleVector_Clear(void * jarg1) {
  std::vector< double > *arg1 = (std::vector< double > *) 0 ;
  
  arg1 = (std::vector< double > *)jarg1; 
  (arg1)->clear();
}


SWIGEXPORT void SWIGSTDCALL CSharp_DoubleVector_Add(void * jarg1, double jarg2) {
  std::vector< double > *arg1 = (std::vector< double > *) 0 ;
  double *arg2 = 0 ;
  double temp2 ;
  
  arg1 = (std::vector< double > *)jarg1; 
  temp2 = (double)jarg2; 
  arg2 = &temp2; 
  (arg1)->push_back((double const &)*arg2);
}


SWIGEXPORT unsigned long SWIGSTDCALL CSharp_DoubleVector_size(void * jarg1) {
  unsigned long jresult ;
  std::vector< double > *arg1 = (std::vector< double > *) 0 ;
  std::vector< double >::size_type result;
  
  arg1 = (std::vector< double > *)jarg1; 
  result = ((std::vector< double > const *)arg1)->size();
  jresult = (unsigned long)result; 
  return jresult;
}


SWIGEXPORT unsigned long SWIGSTDCALL CSharp_DoubleVector_capacity(void * jarg1) {
  unsigned long jresult ;
  std::vector< double > *arg1 = (std::vector< double > *) 0 ;
  std::vector< double >::size_type result;
  
  arg1 = (std::vector< double > *)jarg1; 
  result = ((std::vector< double > const *)arg1)->capacity();
  jresult = (unsigned long)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_DoubleVector_reserve(void * jarg1, unsigned long jarg2) {
  std::vector< double > *arg1 = (std::vector< double > *) 0 ;
  std::vector< double >::size_type arg2 ;
  
  arg1 = (std::vector< double > *)jarg1; 
  arg2 = (std::vector< double >::size_type)jarg2; 
  (arg1)->reserve(arg2);
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_DoubleVector__SWIG_0() {
  void * jresult ;
  std::vector< double > *result = 0 ;
  
  result = (std::vector< double > *)new std::vector< double >();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_DoubleVector__SWIG_1(void * jarg1) {
  void * jresult ;
  std::vector< double > *arg1 = 0 ;
  std::vector< double > *result = 0 ;
  
  arg1 = (std::vector< double > *)jarg1;
  if (!arg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "std::vector< double > const & type is null", 0);
    return 0;
  } 
  result = (std::vector< double > *)new std::vector< double >((std::vector< double > const &)*arg1);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_DoubleVector__SWIG_2(int jarg1) {
  void * jresult ;
  int arg1 ;
  std::vector< double > *result = 0 ;
  
  arg1 = (int)jarg1; 
  try {
    result = (std::vector< double > *)new_std_vector_Sl_double_Sg___SWIG_2(arg1);
  }
  catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return 0;
  }
  
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT double SWIGSTDCALL CSharp_DoubleVector_getitemcopy(void * jarg1, int jarg2) {
  double jresult ;
  std::vector< double > *arg1 = (std::vector< double > *) 0 ;
  int arg2 ;
  double result;
  
  arg1 = (std::vector< double > *)jarg1; 
  arg2 = (int)jarg2; 
  try {
    result = (double)std_vector_Sl_double_Sg__getitemcopy(arg1,arg2);
  }
  catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return 0;
  }
  
  jresult = result; 
  return jresult;
}


SWIGEXPORT double SWIGSTDCALL CSharp_DoubleVector_getitem(void * jarg1, int jarg2) {
  double jresult ;
  std::vector< double > *arg1 = (std::vector< double > *) 0 ;
  int arg2 ;
  double *result = 0 ;
  
  arg1 = (std::vector< double > *)jarg1; 
  arg2 = (int)jarg2; 
  try {
    result = (double *) &std_vector_Sl_double_Sg__getitem(arg1,arg2);
  }
  catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return 0;
  }
  
  jresult = *result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_DoubleVector_setitem(void * jarg1, int jarg2, double jarg3) {
  std::vector< double > *arg1 = (std::vector< double > *) 0 ;
  int arg2 ;
  double *arg3 = 0 ;
  double temp3 ;
  
  arg1 = (std::vector< double > *)jarg1; 
  arg2 = (int)jarg2; 
  temp3 = (double)jarg3; 
  arg3 = &temp3; 
  try {
    std_vector_Sl_double_Sg__setitem(arg1,arg2,(double const &)*arg3);
  }
  catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return ;
  }
  
}


SWIGEXPORT void SWIGSTDCALL CSharp_DoubleVector_AddRange(void * jarg1, void * jarg2) {
  std::vector< double > *arg1 = (std::vector< double > *) 0 ;
  std::vector< double > *arg2 = 0 ;
  
  arg1 = (std::vector< double > *)jarg1; 
  arg2 = (std::vector< double > *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "std::vector< double > const & type is null", 0);
    return ;
  } 
  std_vector_Sl_double_Sg__AddRange(arg1,(std::vector< double > const &)*arg2);
}


SWIGEXPORT void * SWIGSTDCALL CSharp_DoubleVector_GetRange(void * jarg1, int jarg2, int jarg3) {
  void * jresult ;
  std::vector< double > *arg1 = (std::vector< double > *) 0 ;
  int arg2 ;
  int arg3 ;
  std::vector< double > *result = 0 ;
  
  arg1 = (std::vector< double > *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (int)jarg3; 
  try {
    result = (std::vector< double > *)std_vector_Sl_double_Sg__GetRange(arg1,arg2,arg3);
  }
  catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return 0;
  }
  catch(std::invalid_argument &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentException, (&_e)->what(), "");
    return 0;
  }
  
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_DoubleVector_Insert(void * jarg1, int jarg2, double jarg3) {
  std::vector< double > *arg1 = (std::vector< double > *) 0 ;
  int arg2 ;
  double *arg3 = 0 ;
  double temp3 ;
  
  arg1 = (std::vector< double > *)jarg1; 
  arg2 = (int)jarg2; 
  temp3 = (double)jarg3; 
  arg3 = &temp3; 
  try {
    std_vector_Sl_double_Sg__Insert(arg1,arg2,(double const &)*arg3);
  }
  catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return ;
  }
  
}


SWIGEXPORT void SWIGSTDCALL CSharp_DoubleVector_InsertRange(void * jarg1, int jarg2, void * jarg3) {
  std::vector< double > *arg1 = (std::vector< double > *) 0 ;
  int arg2 ;
  std::vector< double > *arg3 = 0 ;
  
  arg1 = (std::vector< double > *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (std::vector< double > *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "std::vector< double > const & type is null", 0);
    return ;
  } 
  try {
    std_vector_Sl_double_Sg__InsertRange(arg1,arg2,(std::vector< double > const &)*arg3);
  }
  catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return ;
  }
  
}


SWIGEXPORT void SWIGSTDCALL CSharp_DoubleVector_RemoveAt(void * jarg1, int jarg2) {
  std::vector< double > *arg1 = (std::vector< double > *) 0 ;
  int arg2 ;
  
  arg1 = (std::vector< double > *)jarg1; 
  arg2 = (int)jarg2; 
  try {
    std_vector_Sl_double_Sg__RemoveAt(arg1,arg2);
  }
  catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return ;
  }
  
}


SWIGEXPORT void SWIGSTDCALL CSharp_DoubleVector_RemoveRange(void * jarg1, int jarg2, int jarg3) {
  std::vector< double > *arg1 = (std::vector< double > *) 0 ;
  int arg2 ;
  int arg3 ;
  
  arg1 = (std::vector< double > *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (int)jarg3; 
  try {
    std_vector_Sl_double_Sg__RemoveRange(arg1,arg2,arg3);
  }
  catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return ;
  }
  catch(std::invalid_argument &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentException, (&_e)->what(), "");
    return ;
  }
  
}


SWIGEXPORT void * SWIGSTDCALL CSharp_DoubleVector_Repeat(double jarg1, int jarg2) {
  void * jresult ;
  double *arg1 = 0 ;
  int arg2 ;
  double temp1 ;
  std::vector< double > *result = 0 ;
  
  temp1 = (double)jarg1; 
  arg1 = &temp1; 
  arg2 = (int)jarg2; 
  try {
    result = (std::vector< double > *)std_vector_Sl_double_Sg__Repeat((double const &)*arg1,arg2);
  }
  catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return 0;
  }
  
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_DoubleVector_Reverse__SWIG_0(void * jarg1) {
  std::vector< double > *arg1 = (std::vector< double > *) 0 ;
  
  arg1 = (std::vector< double > *)jarg1; 
  std_vector_Sl_double_Sg__Reverse__SWIG_0(arg1);
}


SWIGEXPORT void SWIGSTDCALL CSharp_DoubleVector_Reverse__SWIG_1(void * jarg1, int jarg2, int jarg3) {
  std::vector< double > *arg1 = (std::vector< double > *) 0 ;
  int arg2 ;
  int arg3 ;
  
  arg1 = (std::vector< double > *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (int)jarg3; 
  try {
    std_vector_Sl_double_Sg__Reverse__SWIG_1(arg1,arg2,arg3);
  }
  catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return ;
  }
  catch(std::invalid_argument &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentException, (&_e)->what(), "");
    return ;
  }
  
}


SWIGEXPORT void SWIGSTDCALL CSharp_DoubleVector_SetRange(void * jarg1, int jarg2, void * jarg3) {
  std::vector< double > *arg1 = (std::vector< double > *) 0 ;
  int arg2 ;
  std::vector< double > *arg3 = 0 ;
  
  arg1 = (std::vector< double > *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (std::vector< double > *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "std::vector< double > const & type is null", 0);
    return ;
  } 
  try {
    std_vector_Sl_double_Sg__SetRange(arg1,arg2,(std::vector< double > const &)*arg3);
  }
  catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return ;
  }
  
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_DoubleVector_Contains(void * jarg1, double jarg2) {
  unsigned int jresult ;
  std::vector< double > *arg1 = (std::vector< double > *) 0 ;
  double *arg2 = 0 ;
  double temp2 ;
  bool result;
  
  arg1 = (std::vector< double > *)jarg1; 
  temp2 = (double)jarg2; 
  arg2 = &temp2; 
  result = (bool)std_vector_Sl_double_Sg__Contains(arg1,(double const &)*arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_DoubleVector_IndexOf(void * jarg1, double jarg2) {
  int jresult ;
  std::vector< double > *arg1 = (std::vector< double > *) 0 ;
  double *arg2 = 0 ;
  double temp2 ;
  int result;
  
  arg1 = (std::vector< double > *)jarg1; 
  temp2 = (double)jarg2; 
  arg2 = &temp2; 
  result = (int)std_vector_Sl_double_Sg__IndexOf(arg1,(double const &)*arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_DoubleVector_LastIndexOf(void * jarg1, double jarg2) {
  int jresult ;
  std::vector< double > *arg1 = (std::vector< double > *) 0 ;
  double *arg2 = 0 ;
  double temp2 ;
  int result;
  
  arg1 = (std::vector< double > *)jarg1; 
  temp2 = (double)jarg2; 
  arg2 = &temp2; 
  result = (int)std_vector_Sl_double_Sg__LastIndexOf(arg1,(double const &)*arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_DoubleVector_Remove(void * jarg1, double jarg2) {
  unsigned int jresult ;
  std::vector< double > *arg1 = (std::vector< double > *) 0 ;
  double *arg2 = 0 ;
  double temp2 ;
  bool result;
  
  arg1 = (std::vector< double > *)jarg1; 
  temp2 = (double)jarg2; 
  arg2 = &temp2; 
  result = (bool)std_vector_Sl_double_Sg__Remove(arg1,(double const &)*arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_DoubleVector(void * jarg1) {
  std::vector< double > *arg1 = (std::vector< double > *) 0 ;
  
  arg1 = (std::vector< double > *)jarg1; 
  delete arg1;
}


SWIGEXPORT void SWIGSTDCALL CSharp_ArLineSegmentVector_Clear(void * jarg1) {
  std::vector< ArLineSegment > *arg1 = (std::vector< ArLineSegment > *) 0 ;
  
  arg1 = (std::vector< ArLineSegment > *)jarg1; 
  (arg1)->clear();
}


SWIGEXPORT void SWIGSTDCALL CSharp_ArLineSegmentVector_Add(void * jarg1, void * jarg2) {
  std::vector< ArLineSegment > *arg1 = (std::vector< ArLineSegment > *) 0 ;
  ArLineSegment *arg2 = 0 ;
  
  arg1 = (std::vector< ArLineSegment > *)jarg1; 
  arg2 = (ArLineSegment *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "ArLineSegment const & type is null", 0);
    return ;
  } 
  (arg1)->push_back((ArLineSegment const &)*arg2);
}


SWIGEXPORT unsigned long SWIGSTDCALL CSharp_ArLineSegmentVector_size(void * jarg1) {
  unsigned long jresult ;
  std::vector< ArLineSegment > *arg1 = (std::vector< ArLineSegment > *) 0 ;
  std::vector< ArLineSegment >::size_type result;
  
  arg1 = (std::vector< ArLineSegment > *)jarg1; 
  result = ((std::vector< ArLineSegment > const *)arg1)->size();
  jresult = (unsigned long)result; 
  return jresult;
}


SWIGEXPORT unsigned long SWIGSTDCALL CSharp_ArLineSegmentVector_capacity(void * jarg1) {
  unsigned long jresult ;
  std::vector< ArLineSegment > *arg1 = (std::vector< ArLineSegment > *) 0 ;
  std::vector< ArLineSegment >::size_type result;
  
  arg1 = (std::vector< ArLineSegment > *)jarg1; 
  result = ((std::vector< ArLineSegment > const *)arg1)->capacity();
  jresult = (unsigned long)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_ArLineSegmentVector_reserve(void * jarg1, unsigned long jarg2) {
  std::vector< ArLineSegment > *arg1 = (std::vector< ArLineSegment > *) 0 ;
  std::vector< ArLineSegment >::size_type arg2 ;
  
  arg1 = (std::vector< ArLineSegment > *)jarg1; 
  arg2 = (std::vector< ArLineSegment >::size_type)jarg2; 
  (arg1)->reserve(arg2);
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_ArLineSegmentVector__SWIG_0() {
  void * jresult ;
  std::vector< ArLineSegment > *result = 0 ;
  
  result = (std::vector< ArLineSegment > *)new std::vector< ArLineSegment >();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_ArLineSegmentVector__SWIG_1(void * jarg1) {
  void * jresult ;
  std::vector< ArLineSegment > *arg1 = 0 ;
  std::vector< ArLineSegment > *result = 0 ;
  
  arg1 = (std::vector< ArLineSegment > *)jarg1;
  if (!arg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "std::vector< ArLineSegment > const & type is null", 0);
    return 0;
  } 
  result = (std::vector< ArLineSegment > *)new std::vector< ArLineSegment >((std::vector< ArLineSegment > const &)*arg1);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_ArLineSegmentVector__SWIG_2(int jarg1) {
  void * jresult ;
  int arg1 ;
  std::vector< ArLineSegment > *result = 0 ;
  
  arg1 = (int)jarg1; 
  try {
    result = (std::vector< ArLineSegment > *)new_std_vector_Sl_ArLineSegment_Sg___SWIG_2(arg1);
  }
  catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return 0;
  }
  
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_ArLineSegmentVector_getitemcopy(void * jarg1, int jarg2) {
  void * jresult ;
  std::vector< ArLineSegment > *arg1 = (std::vector< ArLineSegment > *) 0 ;
  int arg2 ;
  SwigValueWrapper< ArLineSegment > result;
  
  arg1 = (std::vector< ArLineSegment > *)jarg1; 
  arg2 = (int)jarg2; 
  try {
    result = std_vector_Sl_ArLineSegment_Sg__getitemcopy(arg1,arg2);
  }
  catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return 0;
  }
  
  jresult = new ArLineSegment((const ArLineSegment &)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_ArLineSegmentVector_getitem(void * jarg1, int jarg2) {
  void * jresult ;
  std::vector< ArLineSegment > *arg1 = (std::vector< ArLineSegment > *) 0 ;
  int arg2 ;
  ArLineSegment *result = 0 ;
  
  arg1 = (std::vector< ArLineSegment > *)jarg1; 
  arg2 = (int)jarg2; 
  try {
    result = (ArLineSegment *) &std_vector_Sl_ArLineSegment_Sg__getitem(arg1,arg2);
  }
  catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return 0;
  }
  
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_ArLineSegmentVector_setitem(void * jarg1, int jarg2, void * jarg3) {
  std::vector< ArLineSegment > *arg1 = (std::vector< ArLineSegment > *) 0 ;
  int arg2 ;
  ArLineSegment *arg3 = 0 ;
  
  arg1 = (std::vector< ArLineSegment > *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (ArLineSegment *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "ArLineSegment const & type is null", 0);
    return ;
  } 
  try {
    std_vector_Sl_ArLineSegment_Sg__setitem(arg1,arg2,(ArLineSegment const &)*arg3);
  }
  catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return ;
  }
  
}


SWIGEXPORT void SWIGSTDCALL CSharp_ArLineSegmentVector_AddRange(void * jarg1, void * jarg2) {
  std::vector< ArLineSegment > *arg1 = (std::vector< ArLineSegment > *) 0 ;
  std::vector< ArLineSegment > *arg2 = 0 ;
  
  arg1 = (std::vector< ArLineSegment > *)jarg1; 
  arg2 = (std::vector< ArLineSegment > *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "std::vector< ArLineSegment > const & type is null", 0);
    return ;
  } 
  std_vector_Sl_ArLineSegment_Sg__AddRange(arg1,(std::vector< ArLineSegment > const &)*arg2);
}


SWIGEXPORT void * SWIGSTDCALL CSharp_ArLineSegmentVector_GetRange(void * jarg1, int jarg2, int jarg3) {
  void * jresult ;
  std::vector< ArLineSegment > *arg1 = (std::vector< ArLineSegment > *) 0 ;
  int arg2 ;
  int arg3 ;
  std::vector< ArLineSegment > *result = 0 ;
  
  arg1 = (std::vector< ArLineSegment > *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (int)jarg3; 
  try {
    result = (std::vector< ArLineSegment > *)std_vector_Sl_ArLineSegment_Sg__GetRange(arg1,arg2,arg3);
  }
  catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return 0;
  }
  catch(std::invalid_argument &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentException, (&_e)->what(), "");
    return 0;
  }
  
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_ArLineSegmentVector_Insert(void * jarg1, int jarg2, void * jarg3) {
  std::vector< ArLineSegment > *arg1 = (std::vector< ArLineSegment > *) 0 ;
  int arg2 ;
  ArLineSegment *arg3 = 0 ;
  
  arg1 = (std::vector< ArLineSegment > *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (ArLineSegment *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "ArLineSegment const & type is null", 0);
    return ;
  } 
  try {
    std_vector_Sl_ArLineSegment_Sg__Insert(arg1,arg2,(ArLineSegment const &)*arg3);
  }
  catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return ;
  }
  
}


SWIGEXPORT void SWIGSTDCALL CSharp_ArLineSegmentVector_InsertRange(void * jarg1, int jarg2, void * jarg3) {
  std::vector< ArLineSegment > *arg1 = (std::vector< ArLineSegment > *) 0 ;
  int arg2 ;
  std::vector< ArLineSegment > *arg3 = 0 ;
  
  arg1 = (std::vector< ArLineSegment > *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (std::vector< ArLineSegment > *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "std::vector< ArLineSegment > const & type is null", 0);
    return ;
  } 
  try {
    std_vector_Sl_ArLineSegment_Sg__InsertRange(arg1,arg2,(std::vector< ArLineSegment > const &)*arg3);
  }
  catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return ;
  }
  
}


SWIGEXPORT void SWIGSTDCALL CSharp_ArLineSegmentVector_RemoveAt(void * jarg1, int jarg2) {
  std::vector< ArLineSegment > *arg1 = (std::vector< ArLineSegment > *) 0 ;
  int arg2 ;
  
  arg1 = (std::vector< ArLineSegment > *)jarg1; 
  arg2 = (int)jarg2; 
  try {
    std_vector_Sl_ArLineSegment_Sg__RemoveAt(arg1,arg2);
  }
  catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return ;
  }
  
}


SWIGEXPORT void SWIGSTDCALL CSharp_ArLineSegmentVector_RemoveRange(void * jarg1, int jarg2, int jarg3) {
  std::vector< ArLineSegment > *arg1 = (std::vector< ArLineSegment > *) 0 ;
  int arg2 ;
  int arg3 ;
  
  arg1 = (std::vector< ArLineSegment > *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (int)jarg3; 
  try {
    std_vector_Sl_ArLineSegment_Sg__RemoveRange(arg1,arg2,arg3);
  }
  catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return ;
  }
  catch(std::invalid_argument &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentException, (&_e)->what(), "");
    return ;
  }
  
}


SWIGEXPORT void * SWIGSTDCALL CSharp_ArLineSegmentVector_Repeat(void * jarg1, int jarg2) {
  void * jresult ;
  ArLineSegment *arg1 = 0 ;
  int arg2 ;
  std::vector< ArLineSegment > *result = 0 ;
  
  arg1 = (ArLineSegment *)jarg1;
  if (!arg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "ArLineSegment const & type is null", 0);
    return 0;
  } 
  arg2 = (int)jarg2; 
  try {
    result = (std::vector< ArLineSegment > *)std_vector_Sl_ArLineSegment_Sg__Repeat((ArLineSegment const &)*arg1,arg2);
  }
  catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return 0;
  }
  
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_ArLineSegmentVector_Reverse__SWIG_0(void * jarg1) {
  std::vector< ArLineSegment > *arg1 = (std::vector< ArLineSegment > *) 0 ;
  
  arg1 = (std::vector< ArLineSegment > *)jarg1; 
  std_vector_Sl_ArLineSegment_Sg__Reverse__SWIG_0(arg1);
}


SWIGEXPORT void SWIGSTDCALL CSharp_ArLineSegmentVector_Reverse__SWIG_1(void * jarg1, int jarg2, int jarg3) {
  std::vector< ArLineSegment > *arg1 = (std::vector< ArLineSegment > *) 0 ;
  int arg2 ;
  int arg3 ;
  
  arg1 = (std::vector< ArLineSegment > *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (int)jarg3; 
  try {
    std_vector_Sl_ArLineSegment_Sg__Reverse__SWIG_1(arg1,arg2,arg3);
  }
  catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return ;
  }
  catch(std::invalid_argument &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentException, (&_e)->what(), "");
    return ;
  }
  
}


SWIGEXPORT void SWIGSTDCALL CSharp_ArLineSegmentVector_SetRange(void * jarg1, int jarg2, void * jarg3) {
  std::vector< ArLineSegment > *arg1 = (std::vector< ArLineSegment > *) 0 ;
  int arg2 ;
  std::vector< ArLineSegment > *arg3 = 0 ;
  
  arg1 = (std::vector< ArLineSegment > *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (std::vector< ArLineSegment > *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "std::vector< ArLineSegment > const & type is null", 0);
    return ;
  } 
  try {
    std_vector_Sl_ArLineSegment_Sg__SetRange(arg1,arg2,(std::vector< ArLineSegment > const &)*arg3);
  }
  catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return ;
  }
  
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_ArLineSegmentVector(void * jarg1) {
  std::vector< ArLineSegment > *arg1 = (std::vector< ArLineSegment > *) 0 ;
  
  arg1 = (std::vector< ArLineSegment > *)jarg1; 
  delete arg1;
}


SWIGEXPORT void SWIGSTDCALL CSharp_ArPTZPtrVector_Clear(void * jarg1) {
  std::vector< ArPTZ * > *arg1 = (std::vector< ArPTZ * > *) 0 ;
  
  arg1 = (std::vector< ArPTZ * > *)jarg1; 
  (arg1)->clear();
}


SWIGEXPORT void SWIGSTDCALL CSharp_ArPTZPtrVector_Add(void * jarg1, void * jarg2) {
  std::vector< ArPTZ * > *arg1 = (std::vector< ArPTZ * > *) 0 ;
  ArPTZ **arg2 = 0 ;
  ArPTZ *temp2 = 0 ;
  
  arg1 = (std::vector< ArPTZ * > *)jarg1; 
  temp2 = (ArPTZ *)jarg2;
  arg2 = (ArPTZ **)&temp2; 
  (arg1)->push_back((ArPTZ *const &)*arg2);
}


SWIGEXPORT unsigned long SWIGSTDCALL CSharp_ArPTZPtrVector_size(void * jarg1) {
  unsigned long jresult ;
  std::vector< ArPTZ * > *arg1 = (std::vector< ArPTZ * > *) 0 ;
  std::vector< ArPTZ * >::size_type result;
  
  arg1 = (std::vector< ArPTZ * > *)jarg1; 
  result = ((std::vector< ArPTZ * > const *)arg1)->size();
  jresult = (unsigned long)result; 
  return jresult;
}


SWIGEXPORT unsigned long SWIGSTDCALL CSharp_ArPTZPtrVector_capacity(void * jarg1) {
  unsigned long jresult ;
  std::vector< ArPTZ * > *arg1 = (std::vector< ArPTZ * > *) 0 ;
  std::vector< ArPTZ * >::size_type result;
  
  arg1 = (std::vector< ArPTZ * > *)jarg1; 
  result = ((std::vector< ArPTZ * > const *)arg1)->capacity();
  jresult = (unsigned long)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_ArPTZPtrVector_reserve(void * jarg1, unsigned long jarg2) {
  std::vector< ArPTZ * > *arg1 = (std::vector< ArPTZ * > *) 0 ;
  std::vector< ArPTZ * >::size_type arg2 ;
  
  arg1 = (std::vector< ArPTZ * > *)jarg1; 
  arg2 = (std::vector< ArPTZ * >::size_type)jarg2; 
  (arg1)->reserve(arg2);
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_ArPTZPtrVector__SWIG_0() {
  void * jresult ;
  std::vector< ArPTZ * > *result = 0 ;
  
  result = (std::vector< ArPTZ * > *)new std::vector< ArPTZ * >();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_ArPTZPtrVector__SWIG_1(void * jarg1) {
  void * jresult ;
  std::vector< ArPTZ * > *arg1 = 0 ;
  std::vector< ArPTZ * > *result = 0 ;
  
  arg1 = (std::vector< ArPTZ * > *)jarg1;
  if (!arg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "std::vector< ArPTZ * > const & type is null", 0);
    return 0;
  } 
  result = (std::vector< ArPTZ * > *)new std::vector< ArPTZ * >((std::vector< ArPTZ * > const &)*arg1);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_ArPTZPtrVector__SWIG_2(int jarg1) {
  void * jresult ;
  int arg1 ;
  std::vector< ArPTZ * > *result = 0 ;
  
  arg1 = (int)jarg1; 
  try {
    result = (std::vector< ArPTZ * > *)new_std_vector_Sl_ArPTZ_Sm__Sg___SWIG_2(arg1);
  }
  catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return 0;
  }
  
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_ArPTZPtrVector_getitemcopy(void * jarg1, int jarg2) {
  void * jresult ;
  std::vector< ArPTZ * > *arg1 = (std::vector< ArPTZ * > *) 0 ;
  int arg2 ;
  ArPTZ *result = 0 ;
  
  arg1 = (std::vector< ArPTZ * > *)jarg1; 
  arg2 = (int)jarg2; 
  try {
    result = (ArPTZ *)std_vector_Sl_ArPTZ_Sm__Sg__getitemcopy(arg1,arg2);
  }
  catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return 0;
  }
  
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_ArPTZPtrVector_getitem(void * jarg1, int jarg2) {
  void * jresult ;
  std::vector< ArPTZ * > *arg1 = (std::vector< ArPTZ * > *) 0 ;
  int arg2 ;
  ArPTZ **result = 0 ;
  
  arg1 = (std::vector< ArPTZ * > *)jarg1; 
  arg2 = (int)jarg2; 
  try {
    result = (ArPTZ **) &std_vector_Sl_ArPTZ_Sm__Sg__getitem(arg1,arg2);
  }
  catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return 0;
  }
  
  jresult = (void *)*result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_ArPTZPtrVector_setitem(void * jarg1, int jarg2, void * jarg3) {
  std::vector< ArPTZ * > *arg1 = (std::vector< ArPTZ * > *) 0 ;
  int arg2 ;
  ArPTZ **arg3 = 0 ;
  ArPTZ *temp3 = 0 ;
  
  arg1 = (std::vector< ArPTZ * > *)jarg1; 
  arg2 = (int)jarg2; 
  temp3 = (ArPTZ *)jarg3;
  arg3 = (ArPTZ **)&temp3; 
  try {
    std_vector_Sl_ArPTZ_Sm__Sg__setitem(arg1,arg2,(ArPTZ *const &)*arg3);
  }
  catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return ;
  }
  
}


SWIGEXPORT void SWIGSTDCALL CSharp_ArPTZPtrVector_AddRange(void * jarg1, void * jarg2) {
  std::vector< ArPTZ * > *arg1 = (std::vector< ArPTZ * > *) 0 ;
  std::vector< ArPTZ * > *arg2 = 0 ;
  
  arg1 = (std::vector< ArPTZ * > *)jarg1; 
  arg2 = (std::vector< ArPTZ * > *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "std::vector< ArPTZ * > const & type is null", 0);
    return ;
  } 
  std_vector_Sl_ArPTZ_Sm__Sg__AddRange(arg1,(std::vector< ArPTZ * > const &)*arg2);
}


SWIGEXPORT void * SWIGSTDCALL CSharp_ArPTZPtrVector_GetRange(void * jarg1, int jarg2, int jarg3) {
  void * jresult ;
  std::vector< ArPTZ * > *arg1 = (std::vector< ArPTZ * > *) 0 ;
  int arg2 ;
  int arg3 ;
  std::vector< ArPTZ * > *result = 0 ;
  
  arg1 = (std::vector< ArPTZ * > *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (int)jarg3; 
  try {
    result = (std::vector< ArPTZ * > *)std_vector_Sl_ArPTZ_Sm__Sg__GetRange(arg1,arg2,arg3);
  }
  catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return 0;
  }
  catch(std::invalid_argument &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentException, (&_e)->what(), "");
    return 0;
  }
  
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_ArPTZPtrVector_Insert(void * jarg1, int jarg2, void * jarg3) {
  std::vector< ArPTZ * > *arg1 = (std::vector< ArPTZ * > *) 0 ;
  int arg2 ;
  ArPTZ **arg3 = 0 ;
  ArPTZ *temp3 = 0 ;
  
  arg1 = (std::vector< ArPTZ * > *)jarg1; 
  arg2 = (int)jarg2; 
  temp3 = (ArPTZ *)jarg3;
  arg3 = (ArPTZ **)&temp3; 
  try {
    std_vector_Sl_ArPTZ_Sm__Sg__Insert(arg1,arg2,(ArPTZ *const &)*arg3);
  }
  catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return ;
  }
  
}


SWIGEXPORT void SWIGSTDCALL CSharp_ArPTZPtrVector_InsertRange(void * jarg1, int jarg2, void * jarg3) {
  std::vector< ArPTZ * > *arg1 = (std::vector< ArPTZ * > *) 0 ;
  int arg2 ;
  std::vector< ArPTZ * > *arg3 = 0 ;
  
  arg1 = (std::vector< ArPTZ * > *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (std::vector< ArPTZ * > *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "std::vector< ArPTZ * > const & type is null", 0);
    return ;
  } 
  try {
    std_vector_Sl_ArPTZ_Sm__Sg__InsertRange(arg1,arg2,(std::vector< ArPTZ * > const &)*arg3);
  }
  catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return ;
  }
  
}


SWIGEXPORT void SWIGSTDCALL CSharp_ArPTZPtrVector_RemoveAt(void * jarg1, int jarg2) {
  std::vector< ArPTZ * > *arg1 = (std::vector< ArPTZ * > *) 0 ;
  int arg2 ;
  
  arg1 = (std::vector< ArPTZ * > *)jarg1; 
  arg2 = (int)jarg2; 
  try {
    std_vector_Sl_ArPTZ_Sm__Sg__RemoveAt(arg1,arg2);
  }
  catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return ;
  }
  
}


SWIGEXPORT void SWIGSTDCALL CSharp_ArPTZPtrVector_RemoveRange(void * jarg1, int jarg2, int jarg3) {
  std::vector< ArPTZ * > *arg1 = (std::vector< ArPTZ * > *) 0 ;
  int arg2 ;
  int arg3 ;
  
  arg1 = (std::vector< ArPTZ * > *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (int)jarg3; 
  try {
    std_vector_Sl_ArPTZ_Sm__Sg__RemoveRange(arg1,arg2,arg3);
  }
  catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return ;
  }
  catch(std::invalid_argument &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentException, (&_e)->what(), "");
    return ;
  }
  
}


SWIGEXPORT void * SWIGSTDCALL CSharp_ArPTZPtrVector_Repeat(void * jarg1, int jarg2) {
  void * jresult ;
  ArPTZ **arg1 = 0 ;
  int arg2 ;
  ArPTZ *temp1 = 0 ;
  std::vector< ArPTZ * > *result = 0 ;
  
  temp1 = (ArPTZ *)jarg1;
  arg1 = (ArPTZ **)&temp1; 
  arg2 = (int)jarg2; 
  try {
    result = (std::vector< ArPTZ * > *)std_vector_Sl_ArPTZ_Sm__Sg__Repeat((ArPTZ *const &)*arg1,arg2);
  }
  catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return 0;
  }
  
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_ArPTZPtrVector_Reverse__SWIG_0(void * jarg1) {
  std::vector< ArPTZ * > *arg1 = (std::vector< ArPTZ * > *) 0 ;
  
  arg1 = (std::vector< ArPTZ * > *)jarg1; 
  std_vector_Sl_ArPTZ_Sm__Sg__Reverse__SWIG_0(arg1);
}


SWIGEXPORT void SWIGSTDCALL CSharp_ArPTZPtrVector_Reverse__SWIG_1(void * jarg1, int jarg2, int jarg3) {
  std::vector< ArPTZ * > *arg1 = (std::vector< ArPTZ * > *) 0 ;
  int arg2 ;
  int arg3 ;
  
  arg1 = (std::vector< ArPTZ * > *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (int)jarg3; 
  try {
    std_vector_Sl_ArPTZ_Sm__Sg__Reverse__SWIG_1(arg1,arg2,arg3);
  }
  catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return ;
  }
  catch(std::invalid_argument &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentException, (&_e)->what(), "");
    return ;
  }
  
}


SWIGEXPORT void SWIGSTDCALL CSharp_ArPTZPtrVector_SetRange(void * jarg1, int jarg2, void * jarg3) {
  std::vector< ArPTZ * > *arg1 = (std::vector< ArPTZ * > *) 0 ;
  int arg2 ;
  std::vector< ArPTZ * > *arg3 = 0 ;
  
  arg1 = (std::vector< ArPTZ * > *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (std::vector< ArPTZ * > *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "std::vector< ArPTZ * > const & type is null", 0);
    return ;
  } 
  try {
    std_vector_Sl_ArPTZ_Sm__Sg__SetRange(arg1,arg2,(std::vector< ArPTZ * > const &)*arg3);
  }
  catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return ;
  }
  
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_ArPTZPtrVector_Contains(void * jarg1, void * jarg2) {
  unsigned int jresult ;
  std::vector< ArPTZ * > *arg1 = (std::vector< ArPTZ * > *) 0 ;
  ArPTZ **arg2 = 0 ;
  ArPTZ *temp2 = 0 ;
  bool result;
  
  arg1 = (std::vector< ArPTZ * > *)jarg1; 
  temp2 = (ArPTZ *)jarg2;
  arg2 = (ArPTZ **)&temp2; 
  result = (bool)std_vector_Sl_ArPTZ_Sm__Sg__Contains(arg1,(ArPTZ *const &)*arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_ArPTZPtrVector_IndexOf(void * jarg1, void * jarg2) {
  int jresult ;
  std::vector< ArPTZ * > *arg1 = (std::vector< ArPTZ * > *) 0 ;
  ArPTZ **arg2 = 0 ;
  ArPTZ *temp2 = 0 ;
  int result;
  
  arg1 = (std::vector< ArPTZ * > *)jarg1; 
  temp2 = (ArPTZ *)jarg2;
  arg2 = (ArPTZ **)&temp2; 
  result = (int)std_vector_Sl_ArPTZ_Sm__Sg__IndexOf(arg1,(ArPTZ *const &)*arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_ArPTZPtrVector_LastIndexOf(void * jarg1, void * jarg2) {
  int jresult ;
  std::vector< ArPTZ * > *arg1 = (std::vector< ArPTZ * > *) 0 ;
  ArPTZ **arg2 = 0 ;
  ArPTZ *temp2 = 0 ;
  int result;
  
  arg1 = (std::vector< ArPTZ * > *)jarg1; 
  temp2 = (ArPTZ *)jarg2;
  arg2 = (ArPTZ **)&temp2; 
  result = (int)std_vector_Sl_ArPTZ_Sm__Sg__LastIndexOf(arg1,(ArPTZ *const &)*arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_ArPTZPtrVector_Remove(void * jarg1, void * jarg2) {
  unsigned int jresult ;
  std::vector< ArPTZ * > *arg1 = (std::vector< ArPTZ * > *) 0 ;
  ArPTZ **arg2 = 0 ;
  ArPTZ *temp2 = 0 ;
  bool result;
  
  arg1 = (std::vector< ArPTZ * > *)jarg1; 
  temp2 = (ArPTZ *)jarg2;
  arg2 = (ArPTZ **)&temp2; 
  result = (bool)std_vector_Sl_ArPTZ_Sm__Sg__Remove(arg1,(ArPTZ *const &)*arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_ArPTZPtrVector(void * jarg1) {
  std::vector< ArPTZ * > *arg1 = (std::vector< ArPTZ * > *) 0 ;
  
  arg1 = (std::vector< ArPTZ * > *)jarg1; 
  delete arg1;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_IntArPoseMap__SWIG_0() {
  void * jresult ;
  std::map< int,ArPose > *result = 0 ;
  
  result = (std::map< int,ArPose > *)new std::map< int,ArPose >();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_IntArPoseMap__SWIG_1(void * jarg1) {
  void * jresult ;
  std::map< int,ArPose,std::less< int > > *arg1 = 0 ;
  std::map< int,ArPose > *result = 0 ;
  
  arg1 = (std::map< int,ArPose,std::less< int > > *)jarg1;
  if (!arg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "std::map< int,ArPose,std::less< int > > const & type is null", 0);
    return 0;
  } 
  result = (std::map< int,ArPose > *)new std::map< int,ArPose >((std::map< int,ArPose,std::less< int > > const &)*arg1);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT unsigned long SWIGSTDCALL CSharp_IntArPoseMap_size(void * jarg1) {
  unsigned long jresult ;
  std::map< int,ArPose > *arg1 = (std::map< int,ArPose > *) 0 ;
  std::map< int,ArPose >::size_type result;
  
  arg1 = (std::map< int,ArPose > *)jarg1; 
  result = ((std::map< int,ArPose > const *)arg1)->size();
  jresult = (unsigned long)result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_IntArPoseMap_empty(void * jarg1) {
  unsigned int jresult ;
  std::map< int,ArPose > *arg1 = (std::map< int,ArPose > *) 0 ;
  bool result;
  
  arg1 = (std::map< int,ArPose > *)jarg1; 
  result = (bool)((std::map< int,ArPose > const *)arg1)->empty();
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_IntArPoseMap_Clear(void * jarg1) {
  std::map< int,ArPose > *arg1 = (std::map< int,ArPose > *) 0 ;
  
  arg1 = (std::map< int,ArPose > *)jarg1; 
  (arg1)->clear();
}


SWIGEXPORT void * SWIGSTDCALL CSharp_IntArPoseMap_getitem(void * jarg1, int jarg2) {
  void * jresult ;
  std::map< int,ArPose > *arg1 = (std::map< int,ArPose > *) 0 ;
  std::map< int,ArPose >::key_type *arg2 = 0 ;
  std::map< int,ArPose >::key_type temp2 ;
  std::map< int,ArPose >::mapped_type *result = 0 ;
  
  arg1 = (std::map< int,ArPose > *)jarg1; 
  temp2 = (std::map< int,ArPose >::key_type)jarg2; 
  arg2 = &temp2; 
  try {
    result = (std::map< int,ArPose >::mapped_type *) &std_map_Sl_int_Sc_ArPose_Sg__getitem(arg1,(int const &)*arg2);
  }
  catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return 0;
  }
  
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_IntArPoseMap_setitem(void * jarg1, int jarg2, void * jarg3) {
  std::map< int,ArPose > *arg1 = (std::map< int,ArPose > *) 0 ;
  std::map< int,ArPose >::key_type *arg2 = 0 ;
  std::map< int,ArPose >::mapped_type *arg3 = 0 ;
  std::map< int,ArPose >::key_type temp2 ;
  
  arg1 = (std::map< int,ArPose > *)jarg1; 
  temp2 = (std::map< int,ArPose >::key_type)jarg2; 
  arg2 = &temp2; 
  arg3 = (std::map< int,ArPose >::mapped_type *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "std::map< int,ArPose >::mapped_type const & type is null", 0);
    return ;
  } 
  std_map_Sl_int_Sc_ArPose_Sg__setitem(arg1,(int const &)*arg2,(ArPose const &)*arg3);
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_IntArPoseMap_ContainsKey(void * jarg1, int jarg2) {
  unsigned int jresult ;
  std::map< int,ArPose > *arg1 = (std::map< int,ArPose > *) 0 ;
  std::map< int,ArPose >::key_type *arg2 = 0 ;
  std::map< int,ArPose >::key_type temp2 ;
  bool result;
  
  arg1 = (std::map< int,ArPose > *)jarg1; 
  temp2 = (std::map< int,ArPose >::key_type)jarg2; 
  arg2 = &temp2; 
  result = (bool)std_map_Sl_int_Sc_ArPose_Sg__ContainsKey(arg1,(int const &)*arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_IntArPoseMap_Add(void * jarg1, int jarg2, void * jarg3) {
  std::map< int,ArPose > *arg1 = (std::map< int,ArPose > *) 0 ;
  std::map< int,ArPose >::key_type *arg2 = 0 ;
  std::map< int,ArPose >::mapped_type *arg3 = 0 ;
  std::map< int,ArPose >::key_type temp2 ;
  
  arg1 = (std::map< int,ArPose > *)jarg1; 
  temp2 = (std::map< int,ArPose >::key_type)jarg2; 
  arg2 = &temp2; 
  arg3 = (std::map< int,ArPose >::mapped_type *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "std::map< int,ArPose >::mapped_type const & type is null", 0);
    return ;
  } 
  try {
    std_map_Sl_int_Sc_ArPose_Sg__Add(arg1,(int const &)*arg2,(ArPose const &)*arg3);
  }
  catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return ;
  }
  
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_IntArPoseMap_Remove(void * jarg1, int jarg2) {
  unsigned int jresult ;
  std::map< int,ArPose > *arg1 = (std::map< int,ArPose > *) 0 ;
  std::map< int,ArPose >::key_type *arg2 = 0 ;
  std::map< int,ArPose >::key_type temp2 ;
  bool result;
  
  arg1 = (std::map< int,ArPose > *)jarg1; 
  temp2 = (std::map< int,ArPose >::key_type)jarg2; 
  arg2 = &temp2; 
  result = (bool)std_map_Sl_int_Sc_ArPose_Sg__Remove(arg1,(int const &)*arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_IntArPoseMap_create_iterator_begin(void * jarg1) {
  void * jresult ;
  std::map< int,ArPose > *arg1 = (std::map< int,ArPose > *) 0 ;
  std::map< int,ArPose,std::less< int > >::iterator *result = 0 ;
  
  arg1 = (std::map< int,ArPose > *)jarg1; 
  result = (std::map< int,ArPose,std::less< int > >::iterator *)std_map_Sl_int_Sc_ArPose_Sg__create_iterator_begin(arg1);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_IntArPoseMap_get_next_key(void * jarg1, void * jarg2) {
  int jresult ;
  std::map< int,ArPose > *arg1 = (std::map< int,ArPose > *) 0 ;
  std::map< int,ArPose,std::less< int > >::iterator *arg2 = (std::map< int,ArPose,std::less< int > >::iterator *) 0 ;
  std::map< int,ArPose >::key_type *result = 0 ;
  
  arg1 = (std::map< int,ArPose > *)jarg1; 
  arg2 = (std::map< int,ArPose,std::less< int > >::iterator *)jarg2; 
  result = (std::map< int,ArPose >::key_type *) &std_map_Sl_int_Sc_ArPose_Sg__get_next_key(arg1,arg2);
  jresult = *result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_IntArPoseMap_destroy_iterator(void * jarg1, void * jarg2) {
  std::map< int,ArPose > *arg1 = (std::map< int,ArPose > *) 0 ;
  std::map< int,ArPose,std::less< int > >::iterator *arg2 = (std::map< int,ArPose,std::less< int > >::iterator *) 0 ;
  
  arg1 = (std::map< int,ArPose > *)jarg1; 
  arg2 = (std::map< int,ArPose,std::less< int > >::iterator *)jarg2; 
  std_map_Sl_int_Sc_ArPose_Sg__destroy_iterator(arg1,arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_IntArPoseMap(void * jarg1) {
  std::map< int,ArPose > *arg1 = (std::map< int,ArPose > *) 0 ;
  
  arg1 = (std::map< int,ArPose > *)jarg1; 
  delete arg1;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_ArListPos() {
  void * jresult ;
  ArListPos *result = 0 ;
  
  result = (ArListPos *)new ArListPos();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_ArListPos(void * jarg1) {
  ArListPos *arg1 = (ArListPos *) 0 ;
  
  arg1 = (ArListPos *)jarg1; 
  delete arg1;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_ArTypes() {
  void * jresult ;
  ArTypes *result = 0 ;
  
  result = (ArTypes *)new ArTypes();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_ArTypes(void * jarg1) {
  ArTypes *arg1 = (ArTypes *) 0 ;
  
  arg1 = (ArTypes *)jarg1; 
  delete arg1;
}


SWIGEXPORT int SWIGSTDCALL CSharp__GNU_SOURCE_get() {
  int jresult ;
  int result;
  
  result = (int)(1);
  jresult = result; 
  return jresult;
}


SWIGEXPORT double SWIGSTDCALL CSharp_M_PI_get() {
  double jresult ;
  double result;
  
  result = (double)(3.1415927);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_ArUtil_ReturnTrue() {
  unsigned int jresult ;
  bool result;
  
  result = (bool)ArUtil::ReturnTrue();
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_ArUtil_ReturnFalse() {
  unsigned int jresult ;
  bool result;
  
  result = (bool)ArUtil::ReturnFalse();
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_ArUtil_sleep(unsigned int jarg1) {
  unsigned int arg1 ;
  
  arg1 = (unsigned int)jarg1; 
  ArUtil::sleep(arg1);
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_ArUtil_getTime() {
  unsigned int jresult ;
  unsigned int result;
  
  result = (unsigned int)ArUtil::getTime();
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_ArUtil_findMin__SWIG_0(int jarg1, int jarg2) {
  int jresult ;
  int arg1 ;
  int arg2 ;
  int result;
  
  arg1 = (int)jarg1; 
  arg2 = (int)jarg2; 
  result = (int)ArUtil::findMin(arg1,arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_ArUtil_findMax__SWIG_0(int jarg1, int jarg2) {
  int jresult ;
  int arg1 ;
  int arg2 ;
  int result;
  
  arg1 = (int)jarg1; 
  arg2 = (int)jarg2; 
  result = (int)ArUtil::findMax(arg1,arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_ArUtil_findMinU(unsigned int jarg1, unsigned int jarg2) {
  unsigned int jresult ;
  unsigned int arg1 ;
  unsigned int arg2 ;
  unsigned int result;
  
  arg1 = (unsigned int)jarg1; 
  arg2 = (unsigned int)jarg2; 
  result = (unsigned int)ArUtil::findMinU(arg1,arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_ArUtil_findMaxU(unsigned int jarg1, unsigned int jarg2) {
  unsigned int jresult ;
  unsigned int arg1 ;
  unsigned int arg2 ;
  unsigned int result;
  
  arg1 = (unsigned int)jarg1; 
  arg2 = (unsigned int)jarg2; 
  result = (unsigned int)ArUtil::findMaxU(arg1,arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT double SWIGSTDCALL CSharp_ArUtil_findMin__SWIG_1(double jarg1, double jarg2) {
  double jresult ;
  double arg1 ;
  double arg2 ;
  double result;
  
  arg1 = (double)jarg1; 
  arg2 = (double)jarg2; 
  result = (double)ArUtil::findMin(arg1,arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT double SWIGSTDCALL CSharp_ArUtil_findMax__SWIG_1(double jarg1, double jarg2) {
  double jresult ;
  double arg1 ;
  double arg2 ;
  double result;
  
  arg1 = (double)jarg1; 
  arg2 = (double)jarg2; 
  result = (double)ArUtil::findMax(arg1,arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT long SWIGSTDCALL CSharp_ArUtil_sizeFile__SWIG_0(char * jarg1) {
  long jresult ;
  char *arg1 = (char *) 0 ;
  long result;
  
  arg1 = (char *)jarg1; 
  result = (long)ArUtil::sizeFile((char const *)arg1);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_ArUtil_findFile(char * jarg1) {
  unsigned int jresult ;
  char *arg1 = (char *) 0 ;
  bool result;
  
  arg1 = (char *)jarg1; 
  result = (bool)ArUtil::findFile((char const *)arg1);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_ArUtil_appendSlash__SWIG_0(char * jarg1, unsigned long jarg2) {
  char *arg1 = (char *) 0 ;
  size_t arg2 ;
  
  arg1 = (char *)jarg1; 
  arg2 = (size_t)jarg2; 
  ArUtil::appendSlash(arg1,arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_ArUtil_appendSlash__SWIG_1(void * jarg1) {
  std::string *arg1 = 0 ;
  
  arg1 = (std::string *)jarg1;
  if (!arg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "std::string & type is null", 0);
    return ;
  } 
  ArUtil::appendSlash(*arg1);
}


SWIGEXPORT void SWIGSTDCALL CSharp_ArUtil_fixSlashes__SWIG_0(char * jarg1, unsigned long jarg2) {
  char *arg1 = (char *) 0 ;
  size_t arg2 ;
  
  arg1 = (char *)jarg1; 
  arg2 = (size_t)jarg2; 
  ArUtil::fixSlashes(arg1,arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_ArUtil_fixSlashes__SWIG_1(void * jarg1) {
  std::string *arg1 = 0 ;
  
  arg1 = (std::string *)jarg1;
  if (!arg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "std::string & type is null", 0);
    return ;
  } 
  ArUtil::fixSlashes(*arg1);
}


SWIGEXPORT void SWIGSTDCALL CSharp_ArUtil_fixSlashesForward(char * jarg1, unsigned long jarg2) {
  char *arg1 = (char *) 0 ;
  size_t arg2 ;
  
  arg1 = (char *)jarg1; 
  arg2 = (size_t)jarg2; 
  ArUtil::fixSlashesForward(arg1,arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_ArUtil_fixSlashesBackward(char * jarg1, unsigned long jarg2) {
  char *arg1 = (char *) 0 ;
  size_t arg2 ;
  
  arg1 = (char *)jarg1; 
  arg2 = (size_t)jarg2; 
  ArUtil::fixSlashesBackward(arg1,arg2);
}


SWIGEXPORT char SWIGSTDCALL CSharp_ArUtil_getSlash() {
  char jresult ;
  char result;
  
  result = (char)ArUtil::getSlash();
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_ArUtil_addDirectories(char * jarg1, unsigned long jarg2, char * jarg3, char * jarg4) {
  char *arg1 = (char *) 0 ;
  size_t arg2 ;
  char *arg3 = (char *) 0 ;
  char *arg4 = (char *) 0 ;
  
  arg1 = (char *)jarg1; 
  arg2 = (size_t)jarg2; 
  arg3 = (char *)jarg3; 
  arg4 = (char *)jarg4; 
  ArUtil::addDirectories(arg1,arg2,(char const *)arg3,(char const *)arg4);
}


SWIGEXPORT int SWIGSTDCALL CSharp_ArUtil_strcmp__SWIG_0(char * jarg1, char * jarg2) {
  int jresult ;
  std::string *arg1 = 0 ;
  std::string *arg2 = 0 ;
  int result;
  
  if (!jarg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return 0;
  }
  std::string arg1_str(jarg1);
  arg1 = &arg1_str; 
  if (!jarg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return 0;
  }
  std::string arg2_str(jarg2);
  arg2 = &arg2_str; 
  result = (int)ArUtil::strcmp((std::string const &)*arg1,(std::string const &)*arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_ArUtil_strcasecmp__SWIG_0(char * jarg1, char * jarg2) {
  int jresult ;
  std::string *arg1 = 0 ;
  std::string *arg2 = 0 ;
  int result;
  
  if (!jarg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return 0;
  }
  std::string arg1_str(jarg1);
  arg1 = &arg1_str; 
  if (!jarg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return 0;
  }
  std::string arg2_str(jarg2);
  arg2 = &arg2_str; 
  result = (int)ArUtil::strcasecmp((std::string const &)*arg1,(std::string const &)*arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_ArUtil_strSuffixCmp(char * jarg1, char * jarg2) {
  unsigned int jresult ;
  char *arg1 = (char *) 0 ;
  char *arg2 = (char *) 0 ;
  bool result;
  
  arg1 = (char *)jarg1; 
  arg2 = (char *)jarg2; 
  result = (bool)ArUtil::strSuffixCmp((char const *)arg1,(char const *)arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_ArUtil_strSuffixCaseCmp(char * jarg1, char * jarg2) {
  unsigned int jresult ;
  char *arg1 = (char *) 0 ;
  char *arg2 = (char *) 0 ;
  bool result;
  
  arg1 = (char *)jarg1; 
  arg2 = (char *)jarg2; 
  result = (bool)ArUtil::strSuffixCaseCmp((char const *)arg1,(char const *)arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_ArUtil_strcasequotecmp(char * jarg1, char * jarg2) {
  int jresult ;
  std::string *arg1 = 0 ;
  std::string *arg2 = 0 ;
  int result;
  
  if (!jarg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return 0;
  }
  std::string arg1_str(jarg1);
  arg1 = &arg1_str; 
  if (!jarg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return 0;
  }
  std::string arg2_str(jarg2);
  arg2 = &arg2_str; 
  result = (int)ArUtil::strcasequotecmp((std::string const &)*arg1,(std::string const &)*arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_ArUtil_escapeSpaces(char * jarg1, char * jarg2, unsigned long jarg3) {
  char *arg1 = (char *) 0 ;
  char *arg2 = (char *) 0 ;
  size_t arg3 ;
  
  arg1 = (char *)jarg1; 
  arg2 = (char *)jarg2; 
  arg3 = (size_t)jarg3; 
  ArUtil::escapeSpaces(arg1,(char const *)arg2,arg3);
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_ArUtil_stripQuotes__SWIG_0(char * jarg1, char * jarg2, unsigned long jarg3) {
  unsigned int jresult ;
  char *arg1 = (char *) 0 ;
  char *arg2 = (char *) 0 ;
  size_t arg3 ;
  bool result;
  
  arg1 = (char *)jarg1; 
  arg2 = (char *)jarg2; 
  arg3 = (size_t)jarg3; 
  result = (bool)ArUtil::stripQuotes(arg1,(char const *)arg2,arg3);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_ArUtil_stripQuotes__SWIG_1(void * jarg1) {
  unsigned int jresult ;
  std::string *arg1 = (std::string *) 0 ;
  bool result;
  
  arg1 = (std::string *)jarg1; 
  result = (bool)ArUtil::stripQuotes(arg1);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_ArUtil_fixBadCharacters__SWIG_0(void * jarg1, unsigned int jarg2, unsigned int jarg3) {
  unsigned int jresult ;
  std::string *arg1 = (std::string *) 0 ;
  bool arg2 ;
  bool arg3 ;
  bool result;
  
  arg1 = (std::string *)jarg1; 
  arg2 = jarg2 ? true : false; 
  arg3 = jarg3 ? true : false; 
  result = (bool)ArUtil::fixBadCharacters(arg1,arg2,arg3);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_ArUtil_fixBadCharacters__SWIG_1(void * jarg1, unsigned int jarg2) {
  unsigned int jresult ;
  std::string *arg1 = (std::string *) 0 ;
  bool arg2 ;
  bool result;
  
  arg1 = (std::string *)jarg1; 
  arg2 = jarg2 ? true : false; 
  result = (bool)ArUtil::fixBadCharacters(arg1,arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_ArUtil_lower(char * jarg1, char * jarg2, unsigned long jarg3) {
  char *arg1 = (char *) 0 ;
  char *arg2 = (char *) 0 ;
  size_t arg3 ;
  
  arg1 = (char *)jarg1; 
  arg2 = (char *)jarg2; 
  arg3 = (size_t)jarg3; 
  ArUtil::lower(arg1,(char const *)arg2,arg3);
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_ArUtil_isOnlyAlphaNumeric(char * jarg1) {
  unsigned int jresult ;
  char *arg1 = (char *) 0 ;
  bool result;
  
  arg1 = (char *)jarg1; 
  result = (bool)ArUtil::isOnlyAlphaNumeric((char const *)arg1);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_ArUtil_isOnlyNumeric(char * jarg1) {
  unsigned int jresult ;
  char *arg1 = (char *) 0 ;
  bool result;
  
  arg1 = (char *)jarg1; 
  result = (bool)ArUtil::isOnlyNumeric((char const *)arg1);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_ArUtil_isStrEmpty(char * jarg1) {
  unsigned int jresult ;
  char *arg1 = (char *) 0 ;
  bool result;
  
  arg1 = (char *)jarg1; 
  result = (bool)ArUtil::isStrEmpty((char const *)arg1);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_ArUtil_isStrInList__SWIG_0(char * jarg1, void * jarg2, unsigned int jarg3) {
  unsigned int jresult ;
  char *arg1 = (char *) 0 ;
  std::list< std::string > *arg2 = 0 ;
  bool arg3 ;
  bool result;
  
  arg1 = (char *)jarg1; 
  arg2 = (std::list< std::string > *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "std::list< std::string > const & type is null", 0);
    return 0;
  } 
  arg3 = jarg3 ? true : false; 
  result = (bool)ArUtil::isStrInList((char const *)arg1,(std::list< std::string > const &)*arg2,arg3);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_ArUtil_isStrInList__SWIG_1(char * jarg1, void * jarg2) {
  unsigned int jresult ;
  char *arg1 = (char *) 0 ;
  std::list< std::string > *arg2 = 0 ;
  bool result;
  
  arg1 = (char *)jarg1; 
  arg2 = (std::list< std::string > *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "std::list< std::string > const & type is null", 0);
    return 0;
  } 
  result = (bool)ArUtil::isStrInList((char const *)arg1,(std::list< std::string > const &)*arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT double SWIGSTDCALL CSharp_ArUtil_atof(char * jarg1) {
  double jresult ;
  char *arg1 = (char *) 0 ;
  double result;
  
  arg1 = (char *)jarg1; 
  result = (double)ArUtil::atof((char const *)arg1);
  jresult = result; 
  return jresult;
}


SWIGEXPORT char * SWIGSTDCALL CSharp_ArUtil_convertBool(int jarg1) {
  char * jresult ;
  int arg1 ;
  char *result = 0 ;
  
  arg1 = (int)jarg1; 
  result = (char *)ArUtil::convertBool(arg1);
  jresult = SWIG_csharp_string_callback((const char *)result); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_ArUtil_writeToFile(char * jarg1, void * jarg2) {
  char *arg1 = (char *) 0 ;
  FILE *arg2 = (FILE *) 0 ;
  
  arg1 = (char *)jarg1; 
  arg2 = (FILE *)jarg2; 
  ArUtil::writeToFile((char const *)arg1,arg2);
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_ArUtil_getStringFromFile(char * jarg1, char * jarg2, unsigned long jarg3) {
  unsigned int jresult ;
  char *arg1 = (char *) 0 ;
  char *arg2 = (char *) 0 ;
  size_t arg3 ;
  bool result;
  
  arg1 = (char *)jarg1; 
  arg2 = (char *)jarg2; 
  arg3 = (size_t)jarg3; 
  result = (bool)ArUtil::getStringFromFile((char const *)arg1,arg2,arg3);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_ArUtil_getStringFromRegistry(int jarg1, char * jarg2, char * jarg3, char * jarg4, int jarg5) {
  unsigned int jresult ;
  ArUtil::REGKEY arg1 ;
  char *arg2 = (char *) 0 ;
  char *arg3 = (char *) 0 ;
  char *arg4 = (char *) 0 ;
  int arg5 ;
  bool result;
  
  arg1 = (ArUtil::REGKEY)jarg1; 
  arg2 = (char *)jarg2; 
  arg3 = (char *)jarg3; 
  arg4 = (char *)jarg4; 
  arg5 = (int)jarg5; 
  result = (bool)ArUtil::getStringFromRegistry(arg1,(char const *)arg2,(char const *)arg3,arg4,arg5);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_ArUtil_findFirstStringInRegistry(char * jarg1, char * jarg2, char * jarg3, int jarg4) {
  unsigned int jresult ;
  char *arg1 = (char *) 0 ;
  char *arg2 = (char *) 0 ;
  char *arg3 = (char *) 0 ;
  int arg4 ;
  bool result;
  
  arg1 = (char *)jarg1; 
  arg2 = (char *)jarg2; 
  arg3 = (char *)jarg3; 
  arg4 = (int)jarg4; 
  result = (bool)ArUtil::findFirstStringInRegistry((char const *)arg1,(char const *)arg2,arg3,arg4);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_ArUtil_COM1_set(char * jarg1) {
  char *arg1 = (char *) 0 ;
  
  arg1 = (char *)jarg1; 
  {
    if (arg1) {
      ArUtil::COM1 = (char const *) (new char[strlen((const char *)arg1)+1]);
      strcpy((char *)ArUtil::COM1, (const char *)arg1);
    } else {
      ArUtil::COM1 = 0;
    }
  }
}


SWIGEXPORT char * SWIGSTDCALL CSharp_ArUtil_COM1_get() {
  char * jresult ;
  char *result = 0 ;
  
  result = (char *)ArUtil::COM1;
  jresult = SWIG_csharp_string_callback((const char *)result); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_ArUtil_COM2_set(char * jarg1) {
  char *arg1 = (char *) 0 ;
  
  arg1 = (char *)jarg1; 
  {
    if (arg1) {
      ArUtil::COM2 = (char const *) (new char[strlen((const char *)arg1)+1]);
      strcpy((char *)ArUtil::COM2, (const char *)arg1);
    } else {
      ArUtil::COM2 = 0;
    }
  }
}


SWIGEXPORT char * SWIGSTDCALL CSharp_ArUtil_COM2_get() {
  char * jresult ;
  char *result = 0 ;
  
  result = (char *)ArUtil::COM2;
  jresult = SWIG_csharp_string_callback((const char *)result); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_ArUtil_COM3_set(char * jarg1) {
  char *arg1 = (char *) 0 ;
  
  arg1 = (char *)jarg1; 
  {
    if (arg1) {
      ArUtil::COM3 = (char const *) (new char[strlen((const char *)arg1)+1]);
      strcpy((char *)ArUtil::COM3, (const char *)arg1);
    } else {
      ArUtil::COM3 = 0;
    }
  }
}


SWIGEXPORT char * SWIGSTDCALL CSharp_ArUtil_COM3_get() {
  char * jresult ;
  char *result = 0 ;
  
  result = (char *)ArUtil::COM3;
  jresult = SWIG_csharp_string_callback((const char *)result); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_ArUtil_COM4_set(char * jarg1) {
  char *arg1 = (char *) 0 ;
  
  arg1 = (char *)jarg1; 
  {
    if (arg1) {
      ArUtil::COM4 = (char const *) (new char[strlen((const char *)arg1)+1]);
      strcpy((char *)ArUtil::COM4, (const char *)arg1);
    } else {
      ArUtil::COM4 = 0;
    }
  }
}


SWIGEXPORT char * SWIGSTDCALL CSharp_ArUtil_COM4_get() {
  char * jresult ;
  char *result = 0 ;
  
  result = (char *)ArUtil::COM4;
  jresult = SWIG_csharp_string_callback((const char *)result); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_ArUtil_COM5_set(char * jarg1) {
  char *arg1 = (char *) 0 ;
  
  arg1 = (char *)jarg1; 
  {
    if (arg1) {
      ArUtil::COM5 = (char const *) (new char[strlen((const char *)arg1)+1]);
      strcpy((char *)ArUtil::COM5, (const char *)arg1);
    } else {
      ArUtil::COM5 = 0;
    }
  }
}


SWIGEXPORT char * SWIGSTDCALL CSharp_ArUtil_COM5_get() {
  char * jresult ;
  char *result = 0 ;
  
  result = (char *)ArUtil::COM5;
  jresult = SWIG_csharp_string_callback((const char *)result); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_ArUtil_COM6_set(char * jarg1) {
  char *arg1 = (char *) 0 ;
  
  arg1 = (char *)jarg1; 
  {
    if (arg1) {
      ArUtil::COM6 = (char const *) (new char[strlen((const char *)arg1)+1]);
      strcpy((char *)ArUtil::COM6, (const char *)arg1);
    } else {
      ArUtil::COM6 = 0;
    }
  }
}


SWIGEXPORT char * SWIGSTDCALL CSharp_ArUtil_COM6_get() {
  char * jresult ;
  char *result = 0 ;
  
  result = (char *)ArUtil::COM6;
  jresult = SWIG_csharp_string_callback((const char *)result); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_ArUtil_COM7_set(char * jarg1) {
  char *arg1 = (char *) 0 ;
  
  arg1 = (char *)jarg1; 
  {
    if (arg1) {
      ArUtil::COM7 = (char const *) (new char[strlen((const char *)arg1)+1]);
      strcpy((char *)ArUtil::COM7, (const char *)arg1);
    } else {
      ArUtil::COM7 = 0;
    }
  }
}


SWIGEXPORT char * SWIGSTDCALL CSharp_ArUtil_COM7_get() {
  char * jresult ;
  char *result = 0 ;
  
  result = (char *)ArUtil::COM7;
  jresult = SWIG_csharp_string_callback((const char *)result); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_ArUtil_COM8_set(char * jarg1) {
  char *arg1 = (char *) 0 ;
  
  arg1 = (char *)jarg1; 
  {
    if (arg1) {
      ArUtil::COM8 = (char const *) (new char[strlen((const char *)arg1)+1]);
      strcpy((char *)ArUtil::COM8, (const char *)arg1);
    } else {
      ArUtil::COM8 = 0;
    }
  }
}


SWIGEXPORT char * SWIGSTDCALL CSharp_ArUtil_COM8_get() {
  char * jresult ;
  char *result = 0 ;
  
  result = (char *)ArUtil::COM8;
  jresult = SWIG_csharp_string_callback((const char *)result); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_ArUtil_COM9_set(char * jarg1) {
  char *arg1 = (char *) 0 ;
  
  arg1 = (char *)jarg1; 
  {
    if (arg1) {
      ArUtil::COM9 = (char const *) (new char[strlen((const char *)arg1)+1]);
      strcpy((char *)ArUtil::COM9, (const char *)arg1);
    } else {
      ArUtil::COM9 = 0;
    }
  }
}


SWIGEXPORT char * SWIGSTDCALL CSharp_ArUtil_COM9_get() {
  char * jresult ;
  char *result = 0 ;
  
  result = (char *)ArUtil::COM9;
  jresult = SWIG_csharp_string_callback((const char *)result); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_ArUtil_COM10_set(char * jarg1) {
  char *arg1 = (char *) 0 ;
  
  arg1 = (char *)jarg1; 
  {
    if (arg1) {
      ArUtil::COM10 = (char const *) (new char[strlen((const char *)arg1)+1]);
      strcpy((char *)ArUtil::COM10, (const char *)arg1);
    } else {
      ArUtil::COM10 = 0;
    }
  }
}


SWIGEXPORT char * SWIGSTDCALL CSharp_ArUtil_COM10_get() {
  char * jresult ;
  char *result = 0 ;
  
  result = (char *)ArUtil::COM10;
  jresult = SWIG_csharp_string_callback((const char *)result); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_ArUtil_COM11_set(char * jarg1) {
  char *arg1 = (char *) 0 ;
  
  arg1 = (char *)jarg1; 
  {
    if (arg1) {
      ArUtil::COM11 = (char const *) (new char[strlen((const char *)arg1)+1]);
      strcpy((char *)ArUtil::COM11, (const char *)arg1);
    } else {
      ArUtil::COM11 = 0;
    }
  }
}


SWIGEXPORT char * SWIGSTDCALL CSharp_ArUtil_COM11_get() {
  char * jresult ;
  char *result = 0 ;
  
  result = (char *)ArUtil::COM11;
  jresult = SWIG_csharp_string_callback((const char *)result); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_ArUtil_COM12_set(char * jarg1) {
  char *arg1 = (char *) 0 ;
  
  arg1 = (char *)jarg1; 
  {
    if (arg1) {
      ArUtil::COM12 = (char const *) (new char[strlen((const char *)arg1)+1]);
      strcpy((char *)ArUtil::COM12, (const char *)arg1);
    } else {
      ArUtil::COM12 = 0;
    }
  }
}


SWIGEXPORT char * SWIGSTDCALL CSharp_ArUtil_COM12_get() {
  char * jresult ;
  char *result = 0 ;
  
  result = (char *)ArUtil::COM12;
  jresult = SWIG_csharp_string_callback((const char *)result); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_ArUtil_COM13_set(char * jarg1) {
  char *arg1 = (char *) 0 ;
  
  arg1 = (char *)jarg1; 
  {
    if (arg1) {
      ArUtil::COM13 = (char const *) (new char[strlen((const char *)arg1)+1]);
      strcpy((char *)ArUtil::COM13, (const char *)arg1);
    } else {
      ArUtil::COM13 = 0;
    }
  }
}


SWIGEXPORT char * SWIGSTDCALL CSharp_ArUtil_COM13_get() {
  char * jresult ;
  char *result = 0 ;
  
  result = (char *)ArUtil::COM13;
  jresult = SWIG_csharp_string_callback((const char *)result); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_ArUtil_COM14_set(char * jarg1) {
  char *arg1 = (char *) 0 ;
  
  arg1 = (char *)jarg1; 
  {
    if (arg1) {
      ArUtil::COM14 = (char const *) (new char[strlen((const char *)arg1)+1]);
      strcpy((char *)ArUtil::COM14, (const char *)arg1);
    } else {
      ArUtil::COM14 = 0;
    }
  }
}


SWIGEXPORT char * SWIGSTDCALL CSharp_ArUtil_COM14_get() {
  char * jresult ;
  char *result = 0 ;
  
  result = (char *)ArUtil::COM14;
  jresult = SWIG_csharp_string_callback((const char *)result); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_ArUtil_COM15_set(char * jarg1) {
  char *arg1 = (char *) 0 ;
  
  arg1 = (char *)jarg1; 
  {
    if (arg1) {
      ArUtil::COM15 = (char const *) (new char[strlen((const char *)arg1)+1]);
      strcpy((char *)ArUtil::COM15, (const char *)arg1);
    } else {
      ArUtil::COM15 = 0;
    }
  }
}


SWIGEXPORT char * SWIGSTDCALL CSharp_ArUtil_COM15_get() {
  char * jresult ;
  char *result = 0 ;
  
  result = (char *)ArUtil::COM15;
  jresult = SWIG_csharp_string_callback((const char *)result); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_ArUtil_COM16_set(char * jarg1) {
  char *arg1 = (char *) 0 ;
  
  arg1 = (char *)jarg1; 
  {
    if (arg1) {
      ArUtil::COM16 = (char const *) (new char[strlen((const char *)arg1)+1]);
      strcpy((char *)ArUtil::COM16, (const char *)arg1);
    } else {
      ArUtil::COM16 = 0;
    }
  }
}


SWIGEXPORT char * SWIGSTDCALL CSharp_ArUtil_COM16_get() {
  char * jresult ;
  char *result = 0 ;
  
  result = (char *)ArUtil::COM16;
  jresult = SWIG_csharp_string_callback((const char *)result); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_ArUtil_TRUESTRING_set(char * jarg1) {
  char *arg1 = (char *) 0 ;
  
  arg1 = (char *)jarg1; 
  {
    if (arg1) {
      ArUtil::TRUESTRING = (char const *) (new char[strlen((const char *)arg1)+1]);
      strcpy((char *)ArUtil::TRUESTRING, (const char *)arg1);
    } else {
      ArUtil::TRUESTRING = 0;
    }
  }
}


SWIGEXPORT char * SWIGSTDCALL CSharp_ArUtil_TRUESTRING_get() {
  char * jresult ;
  char *result = 0 ;
  
  result = (char *)ArUtil::TRUESTRING;
  jresult = SWIG_csharp_string_callback((const char *)result); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_ArUtil_FALSESTRING_set(char * jarg1) {
  char *arg1 = (char *) 0 ;
  
  arg1 = (char *)jarg1; 
  {
    if (arg1) {
      ArUtil::FALSESTRING = (char const *) (new char[strlen((const char *)arg1)+1]);
      strcpy((char *)ArUtil::FALSESTRING, (const char *)arg1);
    } else {
      ArUtil::FALSESTRING = 0;
    }
  }
}


SWIGEXPORT char * SWIGSTDCALL CSharp_ArUtil_FALSESTRING_get() {
  char * jresult ;
  char *result = 0 ;
  
  result = (char *)ArUtil::FALSESTRING;
  jresult = SWIG_csharp_string_callback((const char *)result); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_ArUtil_putCurrentYearInString(char * jarg1, unsigned long jarg2) {
  char *arg1 = (char *) 0 ;
  size_t arg2 ;
  
  arg1 = (char *)jarg1; 
  arg2 = (size_t)jarg2; 
  ArUtil::putCurrentYearInString(arg1,arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_ArUtil_putCurrentMonthInString(char * jarg1, unsigned long jarg2) {
  char *arg1 = (char *) 0 ;
  size_t arg2 ;
  
  arg1 = (char *)jarg1; 
  arg2 = (size_t)jarg2; 
  ArUtil::putCurrentMonthInString(arg1,arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_ArUtil_putCurrentDayInString(char * jarg1, unsigned long jarg2) {
  char *arg1 = (char *) 0 ;
  size_t arg2 ;
  
  arg1 = (char *)jarg1; 
  arg2 = (size_t)jarg2; 
  ArUtil::putCurrentDayInString(arg1,arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_ArUtil_putCurrentHourInString(char * jarg1, unsigned long jarg2) {
  char *arg1 = (char *) 0 ;
  size_t arg2 ;
  
  arg1 = (char *)jarg1; 
  arg2 = (size_t)jarg2; 
  ArUtil::putCurrentHourInString(arg1,arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_ArUtil_putCurrentMinuteInString(char * jarg1, unsigned long jarg2) {
  char *arg1 = (char *) 0 ;
  size_t arg2 ;
  
  arg1 = (char *)jarg1; 
  arg2 = (size_t)jarg2; 
  ArUtil::putCurrentMinuteInString(arg1,arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_ArUtil_putCurrentSecondInString(char * jarg1, unsigned long jarg2) {
  char *arg1 = (char *) 0 ;
  size_t arg2 ;
  
  arg1 = (char *)jarg1; 
  arg2 = (size_t)jarg2; 
  ArUtil::putCurrentSecondInString(arg1,arg2);
}


SWIGEXPORT void * SWIGSTDCALL CSharp_ArUtil_parseTime__SWIG_0(char * jarg1, void * jarg2, unsigned int jarg3) {
  void * jresult ;
  char *arg1 = (char *) 0 ;
  bool *arg2 = (bool *) 0 ;
  bool arg3 ;
  time_t result;
  
  arg1 = (char *)jarg1; 
  arg2 = (bool *)jarg2; 
  arg3 = jarg3 ? true : false; 
  result = ArUtil::parseTime((char const *)arg1,arg2,arg3);
  jresult = new time_t((const time_t &)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_ArUtil_parseTime__SWIG_1(char * jarg1, void * jarg2) {
  void * jresult ;
  char *arg1 = (char *) 0 ;
  bool *arg2 = (bool *) 0 ;
  time_t result;
  
  arg1 = (char *)jarg1; 
  arg2 = (bool *)jarg2; 
  result = ArUtil::parseTime((char const *)arg1,arg2);
  jresult = new time_t((const time_t &)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_ArUtil_parseTime__SWIG_2(char * jarg1) {
  void * jresult ;
  char *arg1 = (char *) 0 ;
  time_t result;
  
  arg1 = (char *)jarg1; 
  result = ArUtil::parseTime((char const *)arg1);
  jresult = new time_t((const time_t &)result); 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_ArUtil_localtime__SWIG_0(void * jarg1, void * jarg2) {
  unsigned int jresult ;
  time_t *arg1 = (time_t *) 0 ;
  tm *arg2 = (tm *) 0 ;
  bool result;
  
  arg1 = (time_t *)jarg1; 
  arg2 = (tm *)jarg2; 
  result = (bool)ArUtil::localtime((time_t const *)arg1,arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_ArUtil_localtime__SWIG_1(void * jarg1) {
  unsigned int jresult ;
  tm *arg1 = (tm *) 0 ;
  bool result;
  
  arg1 = (tm *)jarg1; 
  result = (bool)ArUtil::localtime(arg1);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_ArUtil_matchCase(char * jarg1, char * jarg2, char * jarg3, unsigned long jarg4) {
  unsigned int jresult ;
  char *arg1 = (char *) 0 ;
  char *arg2 = (char *) 0 ;
  char *arg3 = (char *) 0 ;
  size_t arg4 ;
  bool result;
  
  arg1 = (char *)jarg1; 
  arg2 = (char *)jarg2; 
  arg3 = (char *)jarg3; 
  arg4 = (size_t)jarg4; 
  result = (bool)ArUtil::matchCase((char const *)arg1,(char const *)arg2,arg3,arg4);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_ArUtil_getDirectory(char * jarg1, char * jarg2, unsigned long jarg3) {
  unsigned int jresult ;
  char *arg1 = (char *) 0 ;
  char *arg2 = (char *) 0 ;
  size_t arg3 ;
  bool result;
  
  arg1 = (char *)jarg1; 
  arg2 = (char *)jarg2; 
  arg3 = (size_t)jarg3; 
  result = (bool)ArUtil::getDirectory((char const *)arg1,arg2,arg3);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_ArUtil_getFileName(char * jarg1, char * jarg2, unsigned long jarg3) {
  unsigned int jresult ;
  char *arg1 = (char *) 0 ;
  char *arg2 = (char *) 0 ;
  size_t arg3 ;
  bool result;
  
  arg1 = (char *)jarg1; 
  arg2 = (char *)jarg2; 
  arg3 = (size_t)jarg3; 
  result = (bool)ArUtil::getFileName((char const *)arg1,arg2,arg3);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_ArUtil_changeFileTimestamp(char * jarg1, void * jarg2) {
  unsigned int jresult ;
  char *arg1 = (char *) 0 ;
  time_t arg2 ;
  time_t *argp2 ;
  bool result;
  
  arg1 = (char *)jarg1; 
  argp2 = (time_t *)jarg2; 
  if (!argp2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Attempt to dereference null time_t", 0);
    return 0;
  }
  arg2 = *argp2; 
  result = (bool)ArUtil::changeFileTimestamp((char const *)arg1,arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT char * SWIGSTDCALL CSharp_ArUtil_insertSuffixBeforeExtension(char * jarg1, char * jarg2) {
  char * jresult ;
  char *arg1 = (char *) 0 ;
  char *arg2 = (char *) 0 ;
  std::string result;
  
  arg1 = (char *)jarg1; 
  arg2 = (char *)jarg2; 
  result = ArUtil::insertSuffixBeforeExtension((char const *)arg1,(char const *)arg2);
  jresult = SWIG_csharp_string_callback((&result)->c_str()); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_ArUtil_fopen__SWIG_0(char * jarg1, char * jarg2, unsigned int jarg3) {
  void * jresult ;
  char *arg1 = (char *) 0 ;
  char *arg2 = (char *) 0 ;
  bool arg3 ;
  FILE *result = 0 ;
  
  arg1 = (char *)jarg1; 
  arg2 = (char *)jarg2; 
  arg3 = jarg3 ? true : false; 
  result = (FILE *)ArUtil::fopen((char const *)arg1,(char const *)arg2,arg3);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_ArUtil_fopen__SWIG_1(char * jarg1, char * jarg2) {
  void * jresult ;
  char *arg1 = (char *) 0 ;
  char *arg2 = (char *) 0 ;
  FILE *result = 0 ;
  
  arg1 = (char *)jarg1; 
  arg2 = (char *)jarg2; 
  result = (FILE *)ArUtil::fopen((char const *)arg1,(char const *)arg2);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_ArUtil_open__SWIG_0(char * jarg1, int jarg2, unsigned int jarg3) {
  int jresult ;
  char *arg1 = (char *) 0 ;
  int arg2 ;
  bool arg3 ;
  int result;
  
  arg1 = (char *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = jarg3 ? true : false; 
  result = (int)ArUtil::open((char const *)arg1,arg2,arg3);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_ArUtil_open__SWIG_1(char * jarg1, int jarg2) {
  int jresult ;
  char *arg1 = (char *) 0 ;
  int arg2 ;
  int result;
  
  arg1 = (char *)jarg1; 
  arg2 = (int)jarg2; 
  result = (int)ArUtil::open((char const *)arg1,arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_ArUtil_open__SWIG_2(char * jarg1, int jarg2, void * jarg3, unsigned int jarg4) {
  int jresult ;
  char *arg1 = (char *) 0 ;
  int arg2 ;
  mode_t arg3 ;
  bool arg4 ;
  mode_t *argp3 ;
  int result;
  
  arg1 = (char *)jarg1; 
  arg2 = (int)jarg2; 
  argp3 = (mode_t *)jarg3; 
  if (!argp3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Attempt to dereference null mode_t", 0);
    return 0;
  }
  arg3 = *argp3; 
  arg4 = jarg4 ? true : false; 
  result = (int)ArUtil::open((char const *)arg1,arg2,arg3,arg4);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_ArUtil_open__SWIG_3(char * jarg1, int jarg2, void * jarg3) {
  int jresult ;
  char *arg1 = (char *) 0 ;
  int arg2 ;
  mode_t arg3 ;
  mode_t *argp3 ;
  int result;
  
  arg1 = (char *)jarg1; 
  arg2 = (int)jarg2; 
  argp3 = (mode_t *)jarg3; 
  if (!argp3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Attempt to dereference null mode_t", 0);
    return 0;
  }
  arg3 = *argp3; 
  result = (int)ArUtil::open((char const *)arg1,arg2,arg3);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_ArUtil_close(int jarg1) {
  int jresult ;
  int arg1 ;
  int result;
  
  arg1 = (int)jarg1; 
  result = (int)ArUtil::close(arg1);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_ArUtil_creat__SWIG_0(char * jarg1, void * jarg2, unsigned int jarg3) {
  int jresult ;
  char *arg1 = (char *) 0 ;
  mode_t arg2 ;
  bool arg3 ;
  mode_t *argp2 ;
  int result;
  
  arg1 = (char *)jarg1; 
  argp2 = (mode_t *)jarg2; 
  if (!argp2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Attempt to dereference null mode_t", 0);
    return 0;
  }
  arg2 = *argp2; 
  arg3 = jarg3 ? true : false; 
  result = (int)ArUtil::creat((char const *)arg1,arg2,arg3);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_ArUtil_creat__SWIG_1(char * jarg1, void * jarg2) {
  int jresult ;
  char *arg1 = (char *) 0 ;
  mode_t arg2 ;
  mode_t *argp2 ;
  int result;
  
  arg1 = (char *)jarg1; 
  argp2 = (mode_t *)jarg2; 
  if (!argp2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Attempt to dereference null mode_t", 0);
    return 0;
  }
  arg2 = *argp2; 
  result = (int)ArUtil::creat((char const *)arg1,arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_ArUtil_popen__SWIG_0(char * jarg1, char * jarg2, unsigned int jarg3) {
  void * jresult ;
  char *arg1 = (char *) 0 ;
  char *arg2 = (char *) 0 ;
  bool arg3 ;
  FILE *result = 0 ;
  
  arg1 = (char *)jarg1; 
  arg2 = (char *)jarg2; 
  arg3 = jarg3 ? true : false; 
  result = (FILE *)ArUtil::popen((char const *)arg1,(char const *)arg2,arg3);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_ArUtil_popen__SWIG_1(char * jarg1, char * jarg2) {
  void * jresult ;
  char *arg1 = (char *) 0 ;
  char *arg2 = (char *) 0 ;
  FILE *result = 0 ;
  
  arg1 = (char *)jarg1; 
  arg2 = (char *)jarg2; 
  result = (FILE *)ArUtil::popen((char const *)arg1,(char const *)arg2);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_ArUtil_setFileCloseOnExec__SWIG_0(int jarg1, unsigned int jarg2) {
  int arg1 ;
  bool arg2 ;
  
  arg1 = (int)jarg1; 
  arg2 = jarg2 ? true : false; 
  ArUtil::setFileCloseOnExec(arg1,arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_ArUtil_setFileCloseOnExec__SWIG_1(int jarg1) {
  int arg1 ;
  
  arg1 = (int)jarg1; 
  ArUtil::setFileCloseOnExec(arg1);
}


SWIGEXPORT void SWIGSTDCALL CSharp_ArUtil_setFileCloseOnExec__SWIG_2(void * jarg1, unsigned int jarg2) {
  FILE *arg1 = (FILE *) 0 ;
  bool arg2 ;
  
  arg1 = (FILE *)jarg1; 
  arg2 = jarg2 ? true : false; 
  ArUtil::setFileCloseOnExec(arg1,arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_ArUtil_setFileCloseOnExec__SWIG_3(void * jarg1) {
  FILE *arg1 = (FILE *) 0 ;
  
  arg1 = (FILE *)jarg1; 
  ArUtil::setFileCloseOnExec(arg1);
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_ArUtil_floatIsNormal(double jarg1) {
  unsigned int jresult ;
  double arg1 ;
  bool result;
  
  arg1 = (double)jarg1; 
  result = (bool)ArUtil::floatIsNormal(arg1);
  jresult = result; 
  return jresult;
}


SWIGEXPORT double SWIGSTDCALL CSharp_ArUtil_secToMSec(double jarg1) {
  double jresult ;
  double arg1 ;
  double result;
  
  arg1 = (double)jarg1; 
  result = (double)ArUtil::secToMSec(arg1);
  jresult = result; 
  return jresult;
}


SWIGEXPORT double SWIGSTDCALL CSharp_ArUtil_mSecToSec(double jarg1) {
  double jresult ;
  double arg1 ;
  double result;
  
  arg1 = (double)jarg1; 
  result = (double)ArUtil::mSecToSec(arg1);
  jresult = result; 
  return jresult;
}


SWIGEXPORT double SWIGSTDCALL CSharp_ArUtil_metersToFeet(double jarg1) {
  double jresult ;
  double arg1 ;
  double result;
  
  arg1 = (double)jarg1; 
  result = (double)ArUtil::metersToFeet(arg1);
  jresult = result; 
  return jresult;
}


SWIGEXPORT double SWIGSTDCALL CSharp_ArUtil_feetToMeters(double jarg1) {
  double jresult ;
  double arg1 ;
  double result;
  
  arg1 = (double)jarg1; 
  result = (double)ArUtil::feetToMeters(arg1);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_ArUtil_atoi__SWIG_0(char * jarg1, void * jarg2, unsigned int jarg3) {
  int jresult ;
  char *arg1 = (char *) 0 ;
  bool *arg2 = (bool *) 0 ;
  bool arg3 ;
  int result;
  
  arg1 = (char *)jarg1; 
  arg2 = (bool *)jarg2; 
  arg3 = jarg3 ? true : false; 
  result = (int)ArUtil::atoi((char const *)arg1,arg2,arg3);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_ArUtil_atoi__SWIG_1(char * jarg1, void * jarg2) {
  int jresult ;
  char *arg1 = (char *) 0 ;
  bool *arg2 = (bool *) 0 ;
  int result;
  
  arg1 = (char *)jarg1; 
  arg2 = (bool *)jarg2; 
  result = (int)ArUtil::atoi((char const *)arg1,arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_ArUtil_atoi__SWIG_2(char * jarg1) {
  int jresult ;
  char *arg1 = (char *) 0 ;
  int result;
  
  arg1 = (char *)jarg1; 
  result = (int)ArUtil::atoi((char const *)arg1);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned long SWIGSTDCALL CSharp_ArUtil_availableDiskSpaceKB__SWIG_0(char * jarg1, void * jarg2) {
  unsigned long jresult ;
  char *arg1 = (char *) 0 ;
  bool *arg2 = (bool *) 0 ;
  unsigned long result;
  
  arg1 = (char *)jarg1; 
  arg2 = (bool *)jarg2; 
  result = (unsigned long)ArUtil::availableDiskSpaceKB((char const *)arg1,arg2);
  jresult = (unsigned long)result; 
  return jresult;
}


SWIGEXPORT unsigned long SWIGSTDCALL CSharp_ArUtil_availableDiskSpaceKB__SWIG_1(char * jarg1) {
  unsigned long jresult ;
  char *arg1 = (char *) 0 ;
  unsigned long result;
  
  arg1 = (char *)jarg1; 
  result = (unsigned long)ArUtil::availableDiskSpaceKB((char const *)arg1);
  jresult = (unsigned long)result; 
  return jresult;
}


SWIGEXPORT unsigned long SWIGSTDCALL CSharp_ArUtil_availableDiskSpaceMB__SWIG_0(char * jarg1, void * jarg2) {
  unsigned long jresult ;
  char *arg1 = (char *) 0 ;
  bool *arg2 = (bool *) 0 ;
  unsigned long result;
  
  arg1 = (char *)jarg1; 
  arg2 = (bool *)jarg2; 
  result = (unsigned long)ArUtil::availableDiskSpaceMB((char const *)arg1,arg2);
  jresult = (unsigned long)result; 
  return jresult;
}


SWIGEXPORT unsigned long SWIGSTDCALL CSharp_ArUtil_availableDiskSpaceMB__SWIG_1(char * jarg1) {
  unsigned long jresult ;
  char *arg1 = (char *) 0 ;
  unsigned long result;
  
  arg1 = (char *)jarg1; 
  result = (unsigned long)ArUtil::availableDiskSpaceMB((char const *)arg1);
  jresult = (unsigned long)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_ArUtil() {
  void * jresult ;
  ArUtil *result = 0 ;
  
  result = (ArUtil *)new ArUtil();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_ArUtil(void * jarg1) {
  ArUtil *arg1 = (ArUtil *) 0 ;
  
  arg1 = (ArUtil *)jarg1; 
  delete arg1;
}


SWIGEXPORT double SWIGSTDCALL CSharp_ArMath_epsilon() {
  double jresult ;
  double result;
  
  result = (double)ArMath::epsilon();
  jresult = result; 
  return jresult;
}


SWIGEXPORT double SWIGSTDCALL CSharp_ArMath_addAngle(double jarg1, double jarg2) {
  double jresult ;
  double arg1 ;
  double arg2 ;
  double result;
  
  arg1 = (double)jarg1; 
  arg2 = (double)jarg2; 
  result = (double)ArMath::addAngle(arg1,arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT double SWIGSTDCALL CSharp_ArMath_subAngle(double jarg1, double jarg2) {
  double jresult ;
  double arg1 ;
  double arg2 ;
  double result;
  
  arg1 = (double)jarg1; 
  arg2 = (double)jarg2; 
  result = (double)ArMath::subAngle(arg1,arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT double SWIGSTDCALL CSharp_ArMath_fixAngle(double jarg1) {
  double jresult ;
  double arg1 ;
  double result;
  
  arg1 = (double)jarg1; 
  result = (double)ArMath::fixAngle(arg1);
  jresult = result; 
  return jresult;
}


SWIGEXPORT double SWIGSTDCALL CSharp_ArMath_degToRad(double jarg1) {
  double jresult ;
  double arg1 ;
  double result;
  
  arg1 = (double)jarg1; 
  result = (double)ArMath::degToRad(arg1);
  jresult = result; 
  return jresult;
}


SWIGEXPORT double SWIGSTDCALL CSharp_ArMath_radToDeg(double jarg1) {
  double jresult ;
  double arg1 ;
  double result;
  
  arg1 = (double)jarg1; 
  result = (double)ArMath::radToDeg(arg1);
  jresult = result; 
  return jresult;
}


SWIGEXPORT double SWIGSTDCALL CSharp_ArMath_cos(double jarg1) {
  double jresult ;
  double arg1 ;
  double result;
  
  arg1 = (double)jarg1; 
  result = (double)ArMath::cos(arg1);
  jresult = result; 
  return jresult;
}


SWIGEXPORT double SWIGSTDCALL CSharp_ArMath_sin(double jarg1) {
  double jresult ;
  double arg1 ;
  double result;
  
  arg1 = (double)jarg1; 
  result = (double)ArMath::sin(arg1);
  jresult = result; 
  return jresult;
}


SWIGEXPORT double SWIGSTDCALL CSharp_ArMath_tan(double jarg1) {
  double jresult ;
  double arg1 ;
  double result;
  
  arg1 = (double)jarg1; 
  result = (double)ArMath::tan(arg1);
  jresult = result; 
  return jresult;
}


SWIGEXPORT double SWIGSTDCALL CSharp_ArMath_atan2(double jarg1, double jarg2) {
  double jresult ;
  double arg1 ;
  double arg2 ;
  double result;
  
  arg1 = (double)jarg1; 
  arg2 = (double)jarg2; 
  result = (double)ArMath::atan2(arg1,arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_ArMath_angleBetween(double jarg1, double jarg2, double jarg3) {
  unsigned int jresult ;
  double arg1 ;
  double arg2 ;
  double arg3 ;
  bool result;
  
  arg1 = (double)jarg1; 
  arg2 = (double)jarg2; 
  arg3 = (double)jarg3; 
  result = (bool)ArMath::angleBetween(arg1,arg2,arg3);
  jresult = result; 
  return jresult;
}


SWIGEXPORT double SWIGSTDCALL CSharp_ArMath_fabs(double jarg1) {
  double jresult ;
  double arg1 ;
  double result;
  
  arg1 = (double)jarg1; 
  result = (double)ArMath::fabs(arg1);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_ArMath_roundInt(double jarg1) {
  int jresult ;
  double arg1 ;
  int result;
  
  arg1 = (double)jarg1; 
  result = (int)ArMath::roundInt(arg1);
  jresult = result; 
  return jresult;
}


SWIGEXPORT short SWIGSTDCALL CSharp_ArMath_roundShort(double jarg1) {
  short jresult ;
  double arg1 ;
  short result;
  
  arg1 = (double)jarg1; 
  result = (short)ArMath::roundShort(arg1);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_ArMath_pointRotate(double * jarg1, double * jarg2, double jarg3) {
  double *arg1 = (double *) 0 ;
  double *arg2 = (double *) 0 ;
  double arg3 ;
  
  arg1 = (double *)jarg1; 
  arg2 = (double *)jarg2; 
  arg3 = (double)jarg3; 
  ArMath::pointRotate(arg1,arg2,arg3);
}


SWIGEXPORT long SWIGSTDCALL CSharp_ArMath_random() {
  long jresult ;
  long result;
  
  result = (long)ArMath::random();
  jresult = result; 
  return jresult;
}


SWIGEXPORT long SWIGSTDCALL CSharp_ArMath_getRandMax() {
  long jresult ;
  long result;
  
  result = (long)ArMath::getRandMax();
  jresult = result; 
  return jresult;
}


SWIGEXPORT long SWIGSTDCALL CSharp_ArMath_randomInRange(long jarg1, long jarg2) {
  long jresult ;
  long arg1 ;
  long arg2 ;
  long result;
  
  arg1 = (long)jarg1; 
  arg2 = (long)jarg2; 
  result = (long)ArMath::randomInRange(arg1,arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT double SWIGSTDCALL CSharp_ArMath_distanceBetween(double jarg1, double jarg2, double jarg3, double jarg4) {
  double jresult ;
  double arg1 ;
  double arg2 ;
  double arg3 ;
  double arg4 ;
  double result;
  
  arg1 = (double)jarg1; 
  arg2 = (double)jarg2; 
  arg3 = (double)jarg3; 
  arg4 = (double)jarg4; 
  result = (double)ArMath::distanceBetween(arg1,arg2,arg3,arg4);
  jresult = result; 
  return jresult;
}


SWIGEXPORT double SWIGSTDCALL CSharp_ArMath_squaredDistanceBetween(double jarg1, double jarg2, double jarg3, double jarg4) {
  double jresult ;
  double arg1 ;
  double arg2 ;
  double arg3 ;
  double arg4 ;
  double result;
  
  arg1 = (double)jarg1; 
  arg2 = (double)jarg2; 
  arg3 = (double)jarg3; 
  arg4 = (double)jarg4; 
  result = (double)ArMath::squaredDistanceBetween(arg1,arg2,arg3,arg4);
  jresult = result; 
  return jresult;
}


SWIGEXPORT double SWIGSTDCALL CSharp_ArMath_log2(double jarg1) {
  double jresult ;
  double arg1 ;
  double result;
  
  arg1 = (double)jarg1; 
  result = (double)ArMath::log2(arg1);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_ArMath_isNan__SWIG_0(double jarg1) {
  unsigned int jresult ;
  double arg1 ;
  bool result;
  
  arg1 = (double)jarg1; 
  result = (bool)ArMath::isNan(arg1);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_ArMath_isNan__SWIG_1(float jarg1) {
  unsigned int jresult ;
  float arg1 ;
  bool result;
  
  arg1 = (float)jarg1; 
  result = (bool)ArMath::isNan(arg1);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_ArMath_isFinite__SWIG_0(float jarg1) {
  unsigned int jresult ;
  float arg1 ;
  bool result;
  
  arg1 = (float)jarg1; 
  result = (bool)ArMath::isFinite(arg1);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_ArMath_isFinite__SWIG_1(double jarg1) {
  unsigned int jresult ;
  double arg1 ;
  bool result;
  
  arg1 = (double)jarg1; 
  result = (bool)ArMath::isFinite(arg1);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_ArMath_compareFloats__SWIG_0(double jarg1, double jarg2, double jarg3) {
  unsigned int jresult ;
  double arg1 ;
  double arg2 ;
  double arg3 ;
  bool result;
  
  arg1 = (double)jarg1; 
  arg2 = (double)jarg2; 
  arg3 = (double)jarg3; 
  result = (bool)ArMath::compareFloats(arg1,arg2,arg3);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_ArMath_compareFloats__SWIG_1(double jarg1, double jarg2) {
  unsigned int jresult ;
  double arg1 ;
  double arg2 ;
  bool result;
  
  arg1 = (double)jarg1; 
  arg2 = (double)jarg2; 
  result = (bool)ArMath::compareFloats(arg1,arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_ArMath() {
  void * jresult ;
  ArMath *result = 0 ;
  
  result = (ArMath *)new ArMath();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_ArMath(void * jarg1) {
  ArMath *arg1 = (ArMath *) 0 ;
  
  arg1 = (ArMath *)jarg1; 
  delete arg1;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_ArPose__SWIG_0(double jarg1, double jarg2, double jarg3) {
  void * jresult ;
  double arg1 ;
  double arg2 ;
  double arg3 ;
  ArPose *result = 0 ;
  
  arg1 = (double)jarg1; 
  arg2 = (double)jarg2; 
  arg3 = (double)jarg3; 
  result = (ArPose *)new ArPose(arg1,arg2,arg3);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_ArPose__SWIG_1(double jarg1, double jarg2) {
  void * jresult ;
  double arg1 ;
  double arg2 ;
  ArPose *result = 0 ;
  
  arg1 = (double)jarg1; 
  arg2 = (double)jarg2; 
  result = (ArPose *)new ArPose(arg1,arg2);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_ArPose__SWIG_2(double jarg1) {
  void * jresult ;
  double arg1 ;
  ArPose *result = 0 ;
  
  arg1 = (double)jarg1; 
  result = (ArPose *)new ArPose(arg1);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_ArPose__SWIG_3() {
  void * jresult ;
  ArPose *result = 0 ;
  
  result = (ArPose *)new ArPose();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_ArPose__SWIG_4(void * jarg1) {
  void * jresult ;
  ArPose *arg1 = 0 ;
  ArPose *result = 0 ;
  
  arg1 = (ArPose *)jarg1;
  if (!arg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "ArPose const & type is null", 0);
    return 0;
  } 
  result = (ArPose *)new ArPose((ArPose const &)*arg1);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_ArPose(void * jarg1) {
  ArPose *arg1 = (ArPose *) 0 ;
  
  arg1 = (ArPose *)jarg1; 
  delete arg1;
}


SWIGEXPORT void SWIGSTDCALL CSharp_ArPose_setPose__SWIG_0(void * jarg1, double jarg2, double jarg3, double jarg4) {
  ArPose *arg1 = (ArPose *) 0 ;
  double arg2 ;
  double arg3 ;
  double arg4 ;
  
  arg1 = (ArPose *)jarg1; 
  arg2 = (double)jarg2; 
  arg3 = (double)jarg3; 
  arg4 = (double)jarg4; 
  (arg1)->setPose(arg2,arg3,arg4);
}


SWIGEXPORT void SWIGSTDCALL CSharp_ArPose_setPose__SWIG_1(void * jarg1, double jarg2, double jarg3) {
  ArPose *arg1 = (ArPose *) 0 ;
  double arg2 ;
  double arg3 ;
  
  arg1 = (ArPose *)jarg1; 
  arg2 = (double)jarg2; 
  arg3 = (double)jarg3; 
  (arg1)->setPose(arg2,arg3);
}


SWIGEXPORT void SWIGSTDCALL CSharp_ArPose_setPose__SWIG_2(void * jarg1, void * jarg2) {
  ArPose *arg1 = (ArPose *) 0 ;
  ArPose arg2 ;
  ArPose *argp2 ;
  
  arg1 = (ArPose *)jarg1; 
  argp2 = (ArPose *)jarg2; 
  if (!argp2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Attempt to dereference null ArPose", 0);
    return ;
  }
  arg2 = *argp2; 
  (arg1)->setPose(arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_ArPose_setX(void * jarg1, double jarg2) {
  ArPose *arg1 = (ArPose *) 0 ;
  double arg2 ;
  
  arg1 = (ArPose *)jarg1; 
  arg2 = (double)jarg2; 
  (arg1)->setX(arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_ArPose_setY(void * jarg1, double jarg2) {
  ArPose *arg1 = (ArPose *) 0 ;
  double arg2 ;
  
  arg1 = (ArPose *)jarg1; 
  arg2 = (double)jarg2; 
  (arg1)->setY(arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_ArPose_setTh(void * jarg1, double jarg2) {
  ArPose *arg1 = (ArPose *) 0 ;
  double arg2 ;
  
  arg1 = (ArPose *)jarg1; 
  arg2 = (double)jarg2; 
  (arg1)->setTh(arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_ArPose_setThRad(void * jarg1, double jarg2) {
  ArPose *arg1 = (ArPose *) 0 ;
  double arg2 ;
  
  arg1 = (ArPose *)jarg1; 
  arg2 = (double)jarg2; 
  (arg1)->setThRad(arg2);
}


SWIGEXPORT double SWIGSTDCALL CSharp_ArPose_getX(void * jarg1) {
  double jresult ;
  ArPose *arg1 = (ArPose *) 0 ;
  double result;
  
  arg1 = (ArPose *)jarg1; 
  result = (double)((ArPose const *)arg1)->getX();
  jresult = result; 
  return jresult;
}


SWIGEXPORT double SWIGSTDCALL CSharp_ArPose_getY(void * jarg1) {
  double jresult ;
  ArPose *arg1 = (ArPose *) 0 ;
  double result;
  
  arg1 = (ArPose *)jarg1; 
  result = (double)((ArPose const *)arg1)->getY();
  jresult = result; 
  return jresult;
}


SWIGEXPORT double SWIGSTDCALL CSharp_ArPose_getTh(void * jarg1) {
  double jresult ;
  ArPose *arg1 = (ArPose *) 0 ;
  double result;
  
  arg1 = (ArPose *)jarg1; 
  result = (double)((ArPose const *)arg1)->getTh();
  jresult = result; 
  return jresult;
}


SWIGEXPORT double SWIGSTDCALL CSharp_ArPose_getThRad(void * jarg1) {
  double jresult ;
  ArPose *arg1 = (ArPose *) 0 ;
  double result;
  
  arg1 = (ArPose *)jarg1; 
  result = (double)((ArPose const *)arg1)->getThRad();
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_ArPose_getPose__SWIG_0(void * jarg1, double * jarg2, double * jarg3, double * jarg4) {
  ArPose *arg1 = (ArPose *) 0 ;
  double *arg2 = (double *) 0 ;
  double *arg3 = (double *) 0 ;
  double *arg4 = (double *) 0 ;
  
  arg1 = (ArPose *)jarg1; 
  arg2 = (double *)jarg2; 
  arg3 = (double *)jarg3; 
  arg4 = (double *)jarg4; 
  ((ArPose const *)arg1)->getPose(arg2,arg3,arg4);
}


SWIGEXPORT void SWIGSTDCALL CSharp_ArPose_getPose__SWIG_1(void * jarg1, double * jarg2, double * jarg3) {
  ArPose *arg1 = (ArPose *) 0 ;
  double *arg2 = (double *) 0 ;
  double *arg3 = (double *) 0 ;
  
  arg1 = (ArPose *)jarg1; 
  arg2 = (double *)jarg2; 
  arg3 = (double *)jarg3; 
  ((ArPose const *)arg1)->getPose(arg2,arg3);
}


SWIGEXPORT double SWIGSTDCALL CSharp_ArPose_findDistanceTo(void * jarg1, void * jarg2) {
  double jresult ;
  ArPose *arg1 = (ArPose *) 0 ;
  ArPose arg2 ;
  ArPose *argp2 ;
  double result;
  
  arg1 = (ArPose *)jarg1; 
  argp2 = (ArPose *)jarg2; 
  if (!argp2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Attempt to dereference null ArPose", 0);
    return 0;
  }
  arg2 = *argp2; 
  result = (double)((ArPose const *)arg1)->findDistanceTo(arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT double SWIGSTDCALL CSharp_ArPose_squaredFindDistanceTo(void * jarg1, void * jarg2) {
  double jresult ;
  ArPose *arg1 = (ArPose *) 0 ;
  ArPose arg2 ;
  ArPose *argp2 ;
  double result;
  
  arg1 = (ArPose *)jarg1; 
  argp2 = (ArPose *)jarg2; 
  if (!argp2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Attempt to dereference null ArPose", 0);
    return 0;
  }
  arg2 = *argp2; 
  result = (double)((ArPose const *)arg1)->squaredFindDistanceTo(arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT double SWIGSTDCALL CSharp_ArPose_findAngleTo(void * jarg1, void * jarg2) {
  double jresult ;
  ArPose *arg1 = (ArPose *) 0 ;
  ArPose arg2 ;
  ArPose *argp2 ;
  double result;
  
  arg1 = (ArPose *)jarg1; 
  argp2 = (ArPose *)jarg2; 
  if (!argp2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Attempt to dereference null ArPose", 0);
    return 0;
  }
  arg2 = *argp2; 
  result = (double)((ArPose const *)arg1)->findAngleTo(arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_ArPose_log(void * jarg1) {
  ArPose *arg1 = (ArPose *) 0 ;
  
  arg1 = (ArPose *)jarg1; 
  ((ArPose const *)arg1)->log();
}


SWIGEXPORT double SWIGSTDCALL CSharp_ArPose_distanceBetween(void * jarg1, void * jarg2) {
  double jresult ;
  ArPose arg1 ;
  ArPose arg2 ;
  ArPose *argp1 ;
  ArPose *argp2 ;
  double result;
  
  argp1 = (ArPose *)jarg1; 
  if (!argp1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Attempt to dereference null ArPose", 0);
    return 0;
  }
  arg1 = *argp1; 
  argp2 = (ArPose *)jarg2; 
  if (!argp2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Attempt to dereference null ArPose", 0);
    return 0;
  }
  arg2 = *argp2; 
  result = (double)ArPose::distanceBetween(arg1,arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_ArPose_compareX(void * jarg1, void * jarg2) {
  unsigned int jresult ;
  ArPose *arg1 = 0 ;
  ArPose *arg2 = 0 ;
  bool result;
  
  arg1 = (ArPose *)jarg1;
  if (!arg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "ArPose const & type is null", 0);
    return 0;
  } 
  arg2 = (ArPose *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "ArPose const & type is null", 0);
    return 0;
  } 
  result = (bool)ArPose::compareX((ArPose const &)*arg1,(ArPose const &)*arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_ArPose_compareY(void * jarg1, void * jarg2) {
  unsigned int jresult ;
  ArPose *arg1 = 0 ;
  ArPose *arg2 = 0 ;
  bool result;
  
  arg1 = (ArPose *)jarg1;
  if (!arg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "ArPose const & type is null", 0);
    return 0;
  } 
  arg2 = (ArPose *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "ArPose const & type is null", 0);
    return 0;
  } 
  result = (bool)ArPose::compareY((ArPose const &)*arg1,(ArPose const &)*arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_ArPose_isInsidePolygon(void * jarg1, void * jarg2) {
  unsigned int jresult ;
  ArPose *arg1 = (ArPose *) 0 ;
  std::vector< ArPose > *arg2 = 0 ;
  bool result;
  
  arg1 = (ArPose *)jarg1; 
  arg2 = (std::vector< ArPose > *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "std::vector< ArPose > const & type is null", 0);
    return 0;
  } 
  result = (bool)((ArPose const *)arg1)->isInsidePolygon((std::vector< ArPose > const &)*arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_ArPos2D(double jarg1, double jarg2) {
  void * jresult ;
  double arg1 ;
  double arg2 ;
  ArPos2D *result = 0 ;
  
  arg1 = (double)jarg1; 
  arg2 = (double)jarg2; 
  result = (ArPos2D *)new ArPos2D(arg1,arg2);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_ArPos2D(void * jarg1) {
  ArPos2D *arg1 = (ArPos2D *) 0 ;
  
  arg1 = (ArPos2D *)jarg1; 
  delete arg1;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_ArTime__SWIG_0() {
  void * jresult ;
  ArTime *result = 0 ;
  
  result = (ArTime *)new ArTime();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_ArTime__SWIG_1(void * jarg1) {
  void * jresult ;
  ArTime *arg1 = 0 ;
  ArTime *result = 0 ;
  
  arg1 = (ArTime *)jarg1;
  if (!arg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "ArTime const & type is null", 0);
    return 0;
  } 
  result = (ArTime *)new ArTime((ArTime const &)*arg1);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_ArTime(void * jarg1) {
  ArTime *arg1 = (ArTime *) 0 ;
  
  arg1 = (ArTime *)jarg1; 
  delete arg1;
}


SWIGEXPORT long SWIGSTDCALL CSharp_ArTime_mSecSince__SWIG_0(void * jarg1, void * jarg2) {
  long jresult ;
  ArTime *arg1 = (ArTime *) 0 ;
  ArTime arg2 ;
  ArTime *argp2 ;
  long result;
  
  arg1 = (ArTime *)jarg1; 
  argp2 = (ArTime *)jarg2; 
  if (!argp2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Attempt to dereference null ArTime", 0);
    return 0;
  }
  arg2 = *argp2; 
  result = (long)((ArTime const *)arg1)->mSecSince(arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT long long SWIGSTDCALL CSharp_ArTime_mSecSinceLL__SWIG_0(void * jarg1, void * jarg2) {
  long long jresult ;
  ArTime *arg1 = (ArTime *) 0 ;
  ArTime arg2 ;
  ArTime *argp2 ;
  long long result;
  
  arg1 = (ArTime *)jarg1; 
  argp2 = (ArTime *)jarg2; 
  if (!argp2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Attempt to dereference null ArTime", 0);
    return 0;
  }
  arg2 = *argp2; 
  result = (long long)((ArTime const *)arg1)->mSecSinceLL(arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT long SWIGSTDCALL CSharp_ArTime_secSince__SWIG_0(void * jarg1, void * jarg2) {
  long jresult ;
  ArTime *arg1 = (ArTime *) 0 ;
  ArTime arg2 ;
  ArTime *argp2 ;
  long result;
  
  arg1 = (ArTime *)jarg1; 
  argp2 = (ArTime *)jarg2; 
  if (!argp2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Attempt to dereference null ArTime", 0);
    return 0;
  }
  arg2 = *argp2; 
  result = (long)((ArTime const *)arg1)->secSince(arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT long long SWIGSTDCALL CSharp_ArTime_secSinceLL__SWIG_0(void * jarg1, void * jarg2) {
  long long jresult ;
  ArTime *arg1 = (ArTime *) 0 ;
  ArTime arg2 ;
  ArTime *argp2 ;
  long long result;
  
  arg1 = (ArTime *)jarg1; 
  argp2 = (ArTime *)jarg2; 
  if (!argp2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Attempt to dereference null ArTime", 0);
    return 0;
  }
  arg2 = *argp2; 
  result = (long long)((ArTime const *)arg1)->secSinceLL(arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT long SWIGSTDCALL CSharp_ArTime_mSecTo(void * jarg1) {
  long jresult ;
  ArTime *arg1 = (ArTime *) 0 ;
  long result;
  
  arg1 = (ArTime *)jarg1; 
  result = (long)((ArTime const *)arg1)->mSecTo();
  jresult = result; 
  return jresult;
}


SWIGEXPORT long long SWIGSTDCALL CSharp_ArTime_mSecToLL(void * jarg1) {
  long long jresult ;
  ArTime *arg1 = (ArTime *) 0 ;
  long long result;
  
  arg1 = (ArTime *)jarg1; 
  result = (long long)((ArTime const *)arg1)->mSecToLL();
  jresult = result; 
  return jresult;
}


SWIGEXPORT long SWIGSTDCALL CSharp_ArTime_secTo(void * jarg1) {
  long jresult ;
  ArTime *arg1 = (ArTime *) 0 ;
  long result;
  
  arg1 = (ArTime *)jarg1; 
  result = (long)((ArTime const *)arg1)->secTo();
  jresult = result; 
  return jresult;
}


SWIGEXPORT long long SWIGSTDCALL CSharp_ArTime_secToLL(void * jarg1) {
  long long jresult ;
  ArTime *arg1 = (ArTime *) 0 ;
  long long result;
  
  arg1 = (ArTime *)jarg1; 
  result = (long long)((ArTime const *)arg1)->secToLL();
  jresult = result; 
  return jresult;
}


SWIGEXPORT long SWIGSTDCALL CSharp_ArTime_mSecSince__SWIG_1(void * jarg1) {
  long jresult ;
  ArTime *arg1 = (ArTime *) 0 ;
  long result;
  
  arg1 = (ArTime *)jarg1; 
  result = (long)((ArTime const *)arg1)->mSecSince();
  jresult = result; 
  return jresult;
}


SWIGEXPORT long long SWIGSTDCALL CSharp_ArTime_mSecSinceLL__SWIG_1(void * jarg1) {
  long long jresult ;
  ArTime *arg1 = (ArTime *) 0 ;
  long long result;
  
  arg1 = (ArTime *)jarg1; 
  result = (long long)((ArTime const *)arg1)->mSecSinceLL();
  jresult = result; 
  return jresult;
}


SWIGEXPORT long SWIGSTDCALL CSharp_ArTime_secSince__SWIG_1(void * jarg1) {
  long jresult ;
  ArTime *arg1 = (ArTime *) 0 ;
  long result;
  
  arg1 = (ArTime *)jarg1; 
  result = (long)((ArTime const *)arg1)->secSince();
  jresult = result; 
  return jresult;
}


SWIGEXPORT long long SWIGSTDCALL CSharp_ArTime_secSinceLL__SWIG_1(void * jarg1) {
  long long jresult ;
  ArTime *arg1 = (ArTime *) 0 ;
  long long result;
  
  arg1 = (ArTime *)jarg1; 
  result = (long long)((ArTime const *)arg1)->secSinceLL();
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_ArTime_isBefore(void * jarg1, void * jarg2) {
  unsigned int jresult ;
  ArTime *arg1 = (ArTime *) 0 ;
  ArTime arg2 ;
  ArTime *argp2 ;
  bool result;
  
  arg1 = (ArTime *)jarg1; 
  argp2 = (ArTime *)jarg2; 
  if (!argp2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Attempt to dereference null ArTime", 0);
    return 0;
  }
  arg2 = *argp2; 
  result = (bool)((ArTime const *)arg1)->isBefore(arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_ArTime_isAt(void * jarg1, void * jarg2) {
  unsigned int jresult ;
  ArTime *arg1 = (ArTime *) 0 ;
  ArTime arg2 ;
  ArTime *argp2 ;
  bool result;
  
  arg1 = (ArTime *)jarg1; 
  argp2 = (ArTime *)jarg2; 
  if (!argp2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Attempt to dereference null ArTime", 0);
    return 0;
  }
  arg2 = *argp2; 
  result = (bool)((ArTime const *)arg1)->isAt(arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_ArTime_isAfter(void * jarg1, void * jarg2) {
  unsigned int jresult ;
  ArTime *arg1 = (ArTime *) 0 ;
  ArTime arg2 ;
  ArTime *argp2 ;
  bool result;
  
  arg1 = (ArTime *)jarg1; 
  argp2 = (ArTime *)jarg2; 
  if (!argp2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Attempt to dereference null ArTime", 0);
    return 0;
  }
  arg2 = *argp2; 
  result = (bool)((ArTime const *)arg1)->isAfter(arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_ArTime_setToNow(void * jarg1) {
  ArTime *arg1 = (ArTime *) 0 ;
  
  arg1 = (ArTime *)jarg1; 
  (arg1)->setToNow();
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_ArTime_addMSec(void * jarg1, long jarg2) {
  unsigned int jresult ;
  ArTime *arg1 = (ArTime *) 0 ;
  long arg2 ;
  bool result;
  
  arg1 = (ArTime *)jarg1; 
  arg2 = (long)jarg2; 
  result = (bool)(arg1)->addMSec(arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_ArTime_addMSecLL(void * jarg1, long long jarg2) {
  unsigned int jresult ;
  ArTime *arg1 = (ArTime *) 0 ;
  long long arg2 ;
  bool result;
  
  arg1 = (ArTime *)jarg1; 
  arg2 = (long long)jarg2; 
  result = (bool)(arg1)->addMSecLL(arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_ArTime_setSec(void * jarg1, unsigned long jarg2) {
  ArTime *arg1 = (ArTime *) 0 ;
  unsigned long arg2 ;
  
  arg1 = (ArTime *)jarg1; 
  arg2 = (unsigned long)jarg2; 
  (arg1)->setSec(arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_ArTime_setMSec(void * jarg1, unsigned long jarg2) {
  ArTime *arg1 = (ArTime *) 0 ;
  unsigned long arg2 ;
  
  arg1 = (ArTime *)jarg1; 
  arg2 = (unsigned long)jarg2; 
  (arg1)->setMSec(arg2);
}


SWIGEXPORT unsigned long SWIGSTDCALL CSharp_ArTime_getSec(void * jarg1) {
  unsigned long jresult ;
  ArTime *arg1 = (ArTime *) 0 ;
  unsigned long result;
  
  arg1 = (ArTime *)jarg1; 
  result = (unsigned long)((ArTime const *)arg1)->getSec();
  jresult = (unsigned long)result; 
  return jresult;
}


SWIGEXPORT unsigned long SWIGSTDCALL CSharp_ArTime_getMSec(void * jarg1) {
  unsigned long jresult ;
  ArTime *arg1 = (ArTime *) 0 ;
  unsigned long result;
  
  arg1 = (ArTime *)jarg1; 
  result = (unsigned long)((ArTime const *)arg1)->getMSec();
  jresult = (unsigned long)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_ArTime_setSecLL(void * jarg1, unsigned long long jarg2) {
  ArTime *arg1 = (ArTime *) 0 ;
  unsigned long long arg2 ;
  
  arg1 = (ArTime *)jarg1; 
  arg2 = (unsigned long long)jarg2; 
  (arg1)->setSecLL(arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_ArTime_setMSecLL(void * jarg1, unsigned long long jarg2) {
  ArTime *arg1 = (ArTime *) 0 ;
  unsigned long long arg2 ;
  
  arg1 = (ArTime *)jarg1; 
  arg2 = (unsigned long long)jarg2; 
  (arg1)->setMSecLL(arg2);
}


SWIGEXPORT unsigned long long SWIGSTDCALL CSharp_ArTime_getSecLL(void * jarg1) {
  unsigned long long jresult ;
  ArTime *arg1 = (ArTime *) 0 ;
  unsigned long long result;
  
  arg1 = (ArTime *)jarg1; 
  result = (unsigned long long)((ArTime const *)arg1)->getSecLL();
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned long long SWIGSTDCALL CSharp_ArTime_getMSecLL(void * jarg1) {
  unsigned long long jresult ;
  ArTime *arg1 = (ArTime *) 0 ;
  unsigned long long result;
  
  arg1 = (ArTime *)jarg1; 
  result = (unsigned long long)((ArTime const *)arg1)->getMSecLL();
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_ArTime_log__SWIG_0(void * jarg1, char * jarg2) {
  ArTime *arg1 = (ArTime *) 0 ;
  char *arg2 = (char *) 0 ;
  
  arg1 = (ArTime *)jarg1; 
  arg2 = (char *)jarg2; 
  ((ArTime const *)arg1)->log((char const *)arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_ArTime_log__SWIG_1(void * jarg1) {
  ArTime *arg1 = (ArTime *) 0 ;
  
  arg1 = (ArTime *)jarg1; 
  ((ArTime const *)arg1)->log();
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_ArTime_usingMonotonicClock() {
  unsigned int jresult ;
  bool result;
  
  result = (bool)ArTime::usingMonotonicClock();
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_ArPoseWithTime__SWIG_0(double jarg1, double jarg2, double jarg3, void * jarg4) {
  void * jresult ;
  double arg1 ;
  double arg2 ;
  double arg3 ;
  ArTime arg4 ;
  ArTime *argp4 ;
  ArPoseWithTime *result = 0 ;
  
  arg1 = (double)jarg1; 
  arg2 = (double)jarg2; 
  arg3 = (double)jarg3; 
  argp4 = (ArTime *)jarg4; 
  if (!argp4) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Attempt to dereference null ArTime", 0);
    return 0;
  }
  arg4 = *argp4; 
  result = (ArPoseWithTime *)new ArPoseWithTime(arg1,arg2,arg3,arg4);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_ArPoseWithTime__SWIG_1(double jarg1, double jarg2, double jarg3) {
  void * jresult ;
  double arg1 ;
  double arg2 ;
  double arg3 ;
  ArPoseWithTime *result = 0 ;
  
  arg1 = (double)jarg1; 
  arg2 = (double)jarg2; 
  arg3 = (double)jarg3; 
  result = (ArPoseWithTime *)new ArPoseWithTime(arg1,arg2,arg3);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_ArPoseWithTime__SWIG_2(double jarg1, double jarg2) {
  void * jresult ;
  double arg1 ;
  double arg2 ;
  ArPoseWithTime *result = 0 ;
  
  arg1 = (double)jarg1; 
  arg2 = (double)jarg2; 
  result = (ArPoseWithTime *)new ArPoseWithTime(arg1,arg2);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_ArPoseWithTime__SWIG_3(double jarg1) {
  void * jresult ;
  double arg1 ;
  ArPoseWithTime *result = 0 ;
  
  arg1 = (double)jarg1; 
  result = (ArPoseWithTime *)new ArPoseWithTime(arg1);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_ArPoseWithTime__SWIG_4() {
  void * jresult ;
  ArPoseWithTime *result = 0 ;
  
  result = (ArPoseWithTime *)new ArPoseWithTime();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_ArPoseWithTime__SWIG_5(void * jarg1) {
  void * jresult ;
  ArPose *arg1 = 0 ;
  ArPoseWithTime *result = 0 ;
  
  arg1 = (ArPose *)jarg1;
  if (!arg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "ArPose const & type is null", 0);
    return 0;
  } 
  result = (ArPoseWithTime *)new ArPoseWithTime((ArPose const &)*arg1);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_ArPoseWithTime(void * jarg1) {
  ArPoseWithTime *arg1 = (ArPoseWithTime *) 0 ;
  
  arg1 = (ArPoseWithTime *)jarg1; 
  delete arg1;
}


SWIGEXPORT void SWIGSTDCALL CSharp_ArPoseWithTime_setTime(void * jarg1, void * jarg2) {
  ArPoseWithTime *arg1 = (ArPoseWithTime *) 0 ;
  ArTime arg2 ;
  ArTime *argp2 ;
  
  arg1 = (ArPoseWithTime *)jarg1; 
  argp2 = (ArTime *)jarg2; 
  if (!argp2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Attempt to dereference null ArTime", 0);
    return ;
  }
  arg2 = *argp2; 
  (arg1)->setTime(arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_ArPoseWithTime_setTimeToNow(void * jarg1) {
  ArPoseWithTime *arg1 = (ArPoseWithTime *) 0 ;
  
  arg1 = (ArPoseWithTime *)jarg1; 
  (arg1)->setTimeToNow();
}


SWIGEXPORT void * SWIGSTDCALL CSharp_ArPoseWithTime_getTime(void * jarg1) {
  void * jresult ;
  ArPoseWithTime *arg1 = (ArPoseWithTime *) 0 ;
  ArTime result;
  
  arg1 = (ArPoseWithTime *)jarg1; 
  result = ((ArPoseWithTime const *)arg1)->getTime();
  jresult = new ArTime((const ArTime &)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_ArSectors__SWIG_0(int jarg1) {
  void * jresult ;
  int arg1 ;
  ArSectors *result = 0 ;
  
  arg1 = (int)jarg1; 
  result = (ArSectors *)new ArSectors(arg1);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_ArSectors__SWIG_1() {
  void * jresult ;
  ArSectors *result = 0 ;
  
  result = (ArSectors *)new ArSectors();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_ArSectors(void * jarg1) {
  ArSectors *arg1 = (ArSectors *) 0 ;
  
  arg1 = (ArSectors *)jarg1; 
  delete arg1;
}


SWIGEXPORT void SWIGSTDCALL CSharp_ArSectors_clear(void * jarg1) {
  ArSectors *arg1 = (ArSectors *) 0 ;
  
  arg1 = (ArSectors *)jarg1; 
  (arg1)->clear();
}


SWIGEXPORT void SWIGSTDCALL CSharp_ArSectors_update(void * jarg1, double jarg2) {
  ArSectors *arg1 = (ArSectors *) 0 ;
  double arg2 ;
  
  arg1 = (ArSectors *)jarg1; 
  arg2 = (double)jarg2; 
  (arg1)->update(arg2);
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_ArSectors_didAll(void * jarg1) {
  unsigned int jresult ;
  ArSectors *arg1 = (ArSectors *) 0 ;
  bool result;
  
  arg1 = (ArSectors *)jarg1; 
  result = (bool)((ArSectors const *)arg1)->didAll();
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_ArLine__SWIG_0() {
  void * jresult ;
  ArLine *result = 0 ;
  
  result = (ArLine *)new ArLine();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_ArLine__SWIG_1(double jarg1, double jarg2, double jarg3) {
  void * jresult ;
  double arg1 ;
  double arg2 ;
  double arg3 ;
  ArLine *result = 0 ;
  
  arg1 = (double)jarg1; 
  arg2 = (double)jarg2; 
  arg3 = (double)jarg3; 
  result = (ArLine *)new ArLine(arg1,arg2,arg3);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_ArLine__SWIG_2(double jarg1, double jarg2, double jarg3, double jarg4) {
  void * jresult ;
  double arg1 ;
  double arg2 ;
  double arg3 ;
  double arg4 ;
  ArLine *result = 0 ;
  
  arg1 = (double)jarg1; 
  arg2 = (double)jarg2; 
  arg3 = (double)jarg3; 
  arg4 = (double)jarg4; 
  result = (ArLine *)new ArLine(arg1,arg2,arg3,arg4);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_ArLine(void * jarg1) {
  ArLine *arg1 = (ArLine *) 0 ;
  
  arg1 = (ArLine *)jarg1; 
  delete arg1;
}


SWIGEXPORT void SWIGSTDCALL CSharp_ArLine_newParameters(void * jarg1, double jarg2, double jarg3, double jarg4) {
  ArLine *arg1 = (ArLine *) 0 ;
  double arg2 ;
  double arg3 ;
  double arg4 ;
  
  arg1 = (ArLine *)jarg1; 
  arg2 = (double)jarg2; 
  arg3 = (double)jarg3; 
  arg4 = (double)jarg4; 
  (arg1)->newParameters(arg2,arg3,arg4);
}


SWIGEXPORT void SWIGSTDCALL CSharp_ArLine_newParametersFromEndpoints(void * jarg1, double jarg2, double jarg3, double jarg4, double jarg5) {
  ArLine *arg1 = (ArLine *) 0 ;
  double arg2 ;
  double arg3 ;
  double arg4 ;
  double arg5 ;
  
  arg1 = (ArLine *)jarg1; 
  arg2 = (double)jarg2; 
  arg3 = (double)jarg3; 
  arg4 = (double)jarg4; 
  arg5 = (double)jarg5; 
  (arg1)->newParametersFromEndpoints(arg2,arg3,arg4,arg5);
}


SWIGEXPORT double SWIGSTDCALL CSharp_ArLine_getA(void * jarg1) {
  double jresult ;
  ArLine *arg1 = (ArLine *) 0 ;
  double result;
  
  arg1 = (ArLine *)jarg1; 
  result = (double)((ArLine const *)arg1)->getA();
  jresult = result; 
  return jresult;
}


SWIGEXPORT double SWIGSTDCALL CSharp_ArLine_getB(void * jarg1) {
  double jresult ;
  ArLine *arg1 = (ArLine *) 0 ;
  double result;
  
  arg1 = (ArLine *)jarg1; 
  result = (double)((ArLine const *)arg1)->getB();
  jresult = result; 
  return jresult;
}


SWIGEXPORT double SWIGSTDCALL CSharp_ArLine_getC(void * jarg1) {
  double jresult ;
  ArLine *arg1 = (ArLine *) 0 ;
  double result;
  
  arg1 = (ArLine *)jarg1; 
  result = (double)((ArLine const *)arg1)->getC();
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_ArLine_intersects(void * jarg1, void * jarg2, void * jarg3) {
  unsigned int jresult ;
  ArLine *arg1 = (ArLine *) 0 ;
  ArLine *arg2 = (ArLine *) 0 ;
  ArPose *arg3 = (ArPose *) 0 ;
  bool result;
  
  arg1 = (ArLine *)jarg1; 
  arg2 = (ArLine *)jarg2; 
  arg3 = (ArPose *)jarg3; 
  result = (bool)((ArLine const *)arg1)->intersects((ArLine const *)arg2,arg3);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_ArLine_makeLinePerp(void * jarg1, void * jarg2, void * jarg3) {
  ArLine *arg1 = (ArLine *) 0 ;
  ArPose *arg2 = (ArPose *) 0 ;
  ArLine *arg3 = (ArLine *) 0 ;
  
  arg1 = (ArLine *)jarg1; 
  arg2 = (ArPose *)jarg2; 
  arg3 = (ArLine *)jarg3; 
  ((ArLine const *)arg1)->makeLinePerp((ArPose const *)arg2,arg3);
}


SWIGEXPORT double SWIGSTDCALL CSharp_ArLine_getPerpDist(void * jarg1, void * jarg2) {
  double jresult ;
  ArLine *arg1 = (ArLine *) 0 ;
  ArPose *arg2 = 0 ;
  double result;
  
  arg1 = (ArLine *)jarg1; 
  arg2 = (ArPose *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "ArPose const & type is null", 0);
    return 0;
  } 
  result = (double)((ArLine const *)arg1)->getPerpDist((ArPose const &)*arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT double SWIGSTDCALL CSharp_ArLine_getPerpSquaredDist(void * jarg1, void * jarg2) {
  double jresult ;
  ArLine *arg1 = (ArLine *) 0 ;
  ArPose *arg2 = 0 ;
  double result;
  
  arg1 = (ArLine *)jarg1; 
  arg2 = (ArPose *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "ArPose const & type is null", 0);
    return 0;
  } 
  result = (double)((ArLine const *)arg1)->getPerpSquaredDist((ArPose const &)*arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_ArLine_getPerpPoint(void * jarg1, void * jarg2, void * jarg3) {
  unsigned int jresult ;
  ArLine *arg1 = (ArLine *) 0 ;
  ArPose *arg2 = 0 ;
  ArPose *arg3 = (ArPose *) 0 ;
  bool result;
  
  arg1 = (ArLine *)jarg1; 
  arg2 = (ArPose *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "ArPose const & type is null", 0);
    return 0;
  } 
  arg3 = (ArPose *)jarg3; 
  result = (bool)((ArLine const *)arg1)->getPerpPoint((ArPose const &)*arg2,arg3);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_ArLineSegment(void * jarg1, void * jarg2) {
  void * jresult ;
  ArPose arg1 ;
  ArPose arg2 ;
  ArPose *argp1 ;
  ArPose *argp2 ;
  ArLineSegment *result = 0 ;
  
  argp1 = (ArPose *)jarg1; 
  if (!argp1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Attempt to dereference null ArPose", 0);
    return 0;
  }
  arg1 = *argp1; 
  argp2 = (ArPose *)jarg2; 
  if (!argp2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Attempt to dereference null ArPose", 0);
    return 0;
  }
  arg2 = *argp2; 
  result = (ArLineSegment *)new ArLineSegment(arg1,arg2);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_ArLineSegment(void * jarg1) {
  ArLineSegment *arg1 = (ArLineSegment *) 0 ;
  
  arg1 = (ArLineSegment *)jarg1; 
  delete arg1;
}


SWIGEXPORT void SWIGSTDCALL CSharp_ArLineSegment_newEndPoints__SWIG_0(void * jarg1, double jarg2, double jarg3, double jarg4, double jarg5) {
  ArLineSegment *arg1 = (ArLineSegment *) 0 ;
  double arg2 ;
  double arg3 ;
  double arg4 ;
  double arg5 ;
  
  arg1 = (ArLineSegment *)jarg1; 
  arg2 = (double)jarg2; 
  arg3 = (double)jarg3; 
  arg4 = (double)jarg4; 
  arg5 = (double)jarg5; 
  (arg1)->newEndPoints(arg2,arg3,arg4,arg5);
}


SWIGEXPORT void SWIGSTDCALL CSharp_ArLineSegment_newEndPoints__SWIG_1(void * jarg1, void * jarg2, void * jarg3) {
  ArLineSegment *arg1 = (ArLineSegment *) 0 ;
  ArPose *arg2 = 0 ;
  ArPose *arg3 = 0 ;
  
  arg1 = (ArLineSegment *)jarg1; 
  arg2 = (ArPose *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "ArPose const & type is null", 0);
    return ;
  } 
  arg3 = (ArPose *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "ArPose const & type is null", 0);
    return ;
  } 
  (arg1)->newEndPoints((ArPose const &)*arg2,(ArPose const &)*arg3);
}


SWIGEXPORT void * SWIGSTDCALL CSharp_ArLineSegment_getEndPoint1(void * jarg1) {
  void * jresult ;
  ArLineSegment *arg1 = (ArLineSegment *) 0 ;
  ArPose result;
  
  arg1 = (ArLineSegment *)jarg1; 
  result = ((ArLineSegment const *)arg1)->getEndPoint1();
  jresult = new ArPose((const ArPose &)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_ArLineSegment_getEndPoint2(void * jarg1) {
  void * jresult ;
  ArLineSegment *arg1 = (ArLineSegment *) 0 ;
  ArPose result;
  
  arg1 = (ArLineSegment *)jarg1; 
  result = ((ArLineSegment const *)arg1)->getEndPoint2();
  jresult = new ArPose((const ArPose &)result); 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_ArLineSegment_intersects__SWIG_0(void * jarg1, void * jarg2, void * jarg3) {
  unsigned int jresult ;
  ArLineSegment *arg1 = (ArLineSegment *) 0 ;
  ArLine *arg2 = (ArLine *) 0 ;
  ArPose *arg3 = (ArPose *) 0 ;
  bool result;
  
  arg1 = (ArLineSegment *)jarg1; 
  arg2 = (ArLine *)jarg2; 
  arg3 = (ArPose *)jarg3; 
  result = (bool)((ArLineSegment const *)arg1)->intersects((ArLine const *)arg2,arg3);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_ArLineSegment_intersects__SWIG_1(void * jarg1, void * jarg2, void * jarg3) {
  unsigned int jresult ;
  ArLineSegment *arg1 = (ArLineSegment *) 0 ;
  ArLineSegment *arg2 = (ArLineSegment *) 0 ;
  ArPose *arg3 = (ArPose *) 0 ;
  bool result;
  
  arg1 = (ArLineSegment *)jarg1; 
  arg2 = (ArLineSegment *)jarg2; 
  arg3 = (ArPose *)jarg3; 
  result = (bool)((ArLineSegment const *)arg1)->intersects(arg2,arg3);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_ArLineSegment_getPerpPoint(void * jarg1, void * jarg2, void * jarg3) {
  unsigned int jresult ;
  ArLineSegment *arg1 = (ArLineSegment *) 0 ;
  ArPose *arg2 = (ArPose *) 0 ;
  ArPose *arg3 = (ArPose *) 0 ;
  bool result;
  
  arg1 = (ArLineSegment *)jarg1; 
  arg2 = (ArPose *)jarg2; 
  arg3 = (ArPose *)jarg3; 
  result = (bool)((ArLineSegment const *)arg1)->getPerpPoint((ArPose const *)arg2,arg3);
  jresult = result; 
  return jresult;
}


SWIGEXPORT double SWIGSTDCALL CSharp_ArLineSegment_getPerpDist(void * jarg1, void * jarg2) {
  double jresult ;
  ArLineSegment *arg1 = (ArLineSegment *) 0 ;
  ArPose *arg2 = 0 ;
  double result;
  
  arg1 = (ArLineSegment *)jarg1; 
  arg2 = (ArPose *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "ArPose const & type is null", 0);
    return 0;
  } 
  result = (double)((ArLineSegment const *)arg1)->getPerpDist((ArPose const &)*arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT double SWIGSTDCALL CSharp_ArLineSegment_getPerpSquaredDist(void * jarg1, void * jarg2) {
  double jresult ;
  ArLineSegment *arg1 = (ArLineSegment *) 0 ;
  ArPose *arg2 = 0 ;
  double result;
  
  arg1 = (ArLineSegment *)jarg1; 
  arg2 = (ArPose *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "ArPose const & type is null", 0);
    return 0;
  } 
  result = (double)((ArLineSegment const *)arg1)->getPerpSquaredDist((ArPose const &)*arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT double SWIGSTDCALL CSharp_ArLineSegment_getDistToLine(void * jarg1, void * jarg2) {
  double jresult ;
  ArLineSegment *arg1 = (ArLineSegment *) 0 ;
  ArPose *arg2 = 0 ;
  double result;
  
  arg1 = (ArLineSegment *)jarg1; 
  arg2 = (ArPose *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "ArPose const & type is null", 0);
    return 0;
  } 
  result = (double)((ArLineSegment const *)arg1)->getDistToLine((ArPose const &)*arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT double SWIGSTDCALL CSharp_ArLineSegment_getLengthOf(void * jarg1) {
  double jresult ;
  ArLineSegment *arg1 = (ArLineSegment *) 0 ;
  double result;
  
  arg1 = (ArLineSegment *)jarg1; 
  result = (double)((ArLineSegment const *)arg1)->getLengthOf();
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_ArLineSegment_getMidPoint(void * jarg1) {
  void * jresult ;
  ArLineSegment *arg1 = (ArLineSegment *) 0 ;
  ArPose result;
  
  arg1 = (ArLineSegment *)jarg1; 
  result = ((ArLineSegment const *)arg1)->getMidPoint();
  jresult = new ArPose((const ArPose &)result); 
  return jresult;
}


SWIGEXPORT double SWIGSTDCALL CSharp_ArLineSegment_getX1(void * jarg1) {
  double jresult ;
  ArLineSegment *arg1 = (ArLineSegment *) 0 ;
  double result;
  
  arg1 = (ArLineSegment *)jarg1; 
  result = (double)((ArLineSegment const *)arg1)->getX1();
  jresult = result; 
  return jresult;
}


SWIGEXPORT double SWIGSTDCALL CSharp_ArLineSegment_getY1(void * jarg1) {
  double jresult ;
  ArLineSegment *arg1 = (ArLineSegment *) 0 ;
  double result;
  
  arg1 = (ArLineSegment *)jarg1; 
  result = (double)((ArLineSegment const *)arg1)->getY1();
  jresult = result; 
  return jresult;
}


SWIGEXPORT double SWIGSTDCALL CSharp_ArLineSegment_getX2(void * jarg1) {
  double jresult ;
  ArLineSegment *arg1 = (ArLineSegment *) 0 ;
  double result;
  
  arg1 = (ArLineSegment *)jarg1; 
  result = (double)((ArLineSegment const *)arg1)->getX2();
  jresult = result; 
  return jresult;
}


SWIGEXPORT double SWIGSTDCALL CSharp_ArLineSegment_getY2(void * jarg1) {
  double jresult ;
  ArLineSegment *arg1 = (ArLineSegment *) 0 ;
  double result;
  
  arg1 = (ArLineSegment *)jarg1; 
  result = (double)((ArLineSegment const *)arg1)->getY2();
  jresult = result; 
  return jresult;
}


SWIGEXPORT double SWIGSTDCALL CSharp_ArLineSegment_getA(void * jarg1) {
  double jresult ;
  ArLineSegment *arg1 = (ArLineSegment *) 0 ;
  double result;
  
  arg1 = (ArLineSegment *)jarg1; 
  result = (double)((ArLineSegment const *)arg1)->getA();
  jresult = result; 
  return jresult;
}


SWIGEXPORT double SWIGSTDCALL CSharp_ArLineSegment_getB(void * jarg1) {
  double jresult ;
  ArLineSegment *arg1 = (ArLineSegment *) 0 ;
  double result;
  
  arg1 = (ArLineSegment *)jarg1; 
  result = (double)((ArLineSegment const *)arg1)->getB();
  jresult = result; 
  return jresult;
}


SWIGEXPORT double SWIGSTDCALL CSharp_ArLineSegment_getC(void * jarg1) {
  double jresult ;
  ArLineSegment *arg1 = (ArLineSegment *) 0 ;
  double result;
  
  arg1 = (ArLineSegment *)jarg1; 
  result = (double)((ArLineSegment const *)arg1)->getC();
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_ArLineSegment_linePointIsInSegment(void * jarg1, void * jarg2) {
  unsigned int jresult ;
  ArLineSegment *arg1 = (ArLineSegment *) 0 ;
  ArPose *arg2 = (ArPose *) 0 ;
  bool result;
  
  arg1 = (ArLineSegment *)jarg1; 
  arg2 = (ArPose *)jarg2; 
  result = (bool)((ArLineSegment const *)arg1)->linePointIsInSegment(arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_ArLineSegment_getLine(void * jarg1) {
  void * jresult ;
  ArLineSegment *arg1 = (ArLineSegment *) 0 ;
  ArLine *result = 0 ;
  
  arg1 = (ArLineSegment *)jarg1; 
  result = (ArLine *)((ArLineSegment const *)arg1)->getLine();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_ArRunningAverage(unsigned long jarg1) {
  void * jresult ;
  size_t arg1 ;
  ArRunningAverage *result = 0 ;
  
  arg1 = (size_t)jarg1; 
  result = (ArRunningAverage *)new ArRunningAverage(arg1);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_ArRunningAverage(void * jarg1) {
  ArRunningAverage *arg1 = (ArRunningAverage *) 0 ;
  
  arg1 = (ArRunningAverage *)jarg1; 
  delete arg1;
}


SWIGEXPORT double SWIGSTDCALL CSharp_ArRunningAverage_getAverage(void * jarg1) {
  double jresult ;
  ArRunningAverage *arg1 = (ArRunningAverage *) 0 ;
  double result;
  
  arg1 = (ArRunningAverage *)jarg1; 
  result = (double)((ArRunningAverage const *)arg1)->getAverage();
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_ArRunningAverage_add(void * jarg1, double jarg2) {
  ArRunningAverage *arg1 = (ArRunningAverage *) 0 ;
  double arg2 ;
  
  arg1 = (ArRunningAverage *)jarg1; 
  arg2 = (double)jarg2; 
  (arg1)->add(arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_ArRunningAverage_clear(void * jarg1) {
  ArRunningAverage *arg1 = (ArRunningAverage *) 0 ;
  
  arg1 = (ArRunningAverage *)jarg1; 
  (arg1)->clear();
}


SWIGEXPORT unsigned long SWIGSTDCALL CSharp_ArRunningAverage_getNumToAverage(void * jarg1) {
  unsigned long jresult ;
  ArRunningAverage *arg1 = (ArRunningAverage *) 0 ;
  size_t result;
  
  arg1 = (ArRunningAverage *)jarg1; 
  result = ((ArRunningAverage const *)arg1)->getNumToAverage();
  jresult = (unsigned long)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_ArRunningAverage_setNumToAverage(void * jarg1, unsigned long jarg2) {
  ArRunningAverage *arg1 = (ArRunningAverage *) 0 ;
  size_t arg2 ;
  
  arg1 = (ArRunningAverage *)jarg1; 
  arg2 = (size_t)jarg2; 
  (arg1)->setNumToAverage(arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_ArRunningAverage_setUseRootMeanSquare(void * jarg1, unsigned int jarg2) {
  ArRunningAverage *arg1 = (ArRunningAverage *) 0 ;
  bool arg2 ;
  
  arg1 = (ArRunningAverage *)jarg1; 
  arg2 = jarg2 ? true : false; 
  (arg1)->setUseRootMeanSquare(arg2);
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_ArRunningAverage_getUseRootMeanSquare(void * jarg1) {
  unsigned int jresult ;
  ArRunningAverage *arg1 = (ArRunningAverage *) 0 ;
  bool result;
  
  arg1 = (ArRunningAverage *)jarg1; 
  result = (bool)(arg1)->getUseRootMeanSquare();
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned long SWIGSTDCALL CSharp_ArRunningAverage_getCurrentNumAveraged(void * jarg1) {
  unsigned long jresult ;
  ArRunningAverage *arg1 = (ArRunningAverage *) 0 ;
  size_t result;
  
  arg1 = (ArRunningAverage *)jarg1; 
  result = (arg1)->getCurrentNumAveraged();
  jresult = (unsigned long)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_ArRootMeanSquareCalculator() {
  void * jresult ;
  ArRootMeanSquareCalculator *result = 0 ;
  
  result = (ArRootMeanSquareCalculator *)new ArRootMeanSquareCalculator();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_ArRootMeanSquareCalculator(void * jarg1) {
  ArRootMeanSquareCalculator *arg1 = (ArRootMeanSquareCalculator *) 0 ;
  
  arg1 = (ArRootMeanSquareCalculator *)jarg1; 
  delete arg1;
}


SWIGEXPORT double SWIGSTDCALL CSharp_ArRootMeanSquareCalculator_getRootMeanSquare(void * jarg1) {
  double jresult ;
  ArRootMeanSquareCalculator *arg1 = (ArRootMeanSquareCalculator *) 0 ;
  double result;
  
  arg1 = (ArRootMeanSquareCalculator *)jarg1; 
  result = (double)((ArRootMeanSquareCalculator const *)arg1)->getRootMeanSquare();
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_ArRootMeanSquareCalculator_add(void * jarg1, int jarg2) {
  ArRootMeanSquareCalculator *arg1 = (ArRootMeanSquareCalculator *) 0 ;
  int arg2 ;
  
  arg1 = (ArRootMeanSquareCalculator *)jarg1; 
  arg2 = (int)jarg2; 
  (arg1)->add(arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_ArRootMeanSquareCalculator_clear(void * jarg1) {
  ArRootMeanSquareCalculator *arg1 = (ArRootMeanSquareCalculator *) 0 ;
  
  arg1 = (ArRootMeanSquareCalculator *)jarg1; 
  (arg1)->clear();
}


SWIGEXPORT void SWIGSTDCALL CSharp_ArRootMeanSquareCalculator_setName(void * jarg1, char * jarg2) {
  ArRootMeanSquareCalculator *arg1 = (ArRootMeanSquareCalculator *) 0 ;
  char *arg2 = (char *) 0 ;
  
  arg1 = (ArRootMeanSquareCalculator *)jarg1; 
  arg2 = (char *)jarg2; 
  (arg1)->setName((char const *)arg2);
}


SWIGEXPORT char * SWIGSTDCALL CSharp_ArRootMeanSquareCalculator_getName(void * jarg1) {
  char * jresult ;
  ArRootMeanSquareCalculator *arg1 = (ArRootMeanSquareCalculator *) 0 ;
  char *result = 0 ;
  
  arg1 = (ArRootMeanSquareCalculator *)jarg1; 
  result = (char *)(arg1)->getName();
  jresult = SWIG_csharp_string_callback((const char *)result); 
  return jresult;
}


SWIGEXPORT unsigned long SWIGSTDCALL CSharp_ArRootMeanSquareCalculator_getCurrentNumAveraged(void * jarg1) {
  unsigned long jresult ;
  ArRootMeanSquareCalculator *arg1 = (ArRootMeanSquareCalculator *) 0 ;
  size_t result;
  
  arg1 = (ArRootMeanSquareCalculator *)jarg1; 
  result = (arg1)->getCurrentNumAveraged();
  jresult = (unsigned long)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_ArStrCaseCmpOp() {
  void * jresult ;
  ArStrCaseCmpOp *result = 0 ;
  
  result = (ArStrCaseCmpOp *)new ArStrCaseCmpOp();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_ArStrCaseCmpOp(void * jarg1) {
  ArStrCaseCmpOp *arg1 = (ArStrCaseCmpOp *) 0 ;
  
  arg1 = (ArStrCaseCmpOp *)jarg1; 
  delete arg1;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_ArPoseCmpOp() {
  void * jresult ;
  ArPoseCmpOp *result = 0 ;
  
  result = (ArPoseCmpOp *)new ArPoseCmpOp();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_ArPoseCmpOp(void * jarg1) {
  ArPoseCmpOp *arg1 = (ArPoseCmpOp *) 0 ;
  
  arg1 = (ArPoseCmpOp *)jarg1; 
  delete arg1;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_ArLineSegmentCmpOp() {
  void * jresult ;
  ArLineSegmentCmpOp *result = 0 ;
  
  result = (ArLineSegmentCmpOp *)new ArLineSegmentCmpOp();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_ArLineSegmentCmpOp(void * jarg1) {
  ArLineSegmentCmpOp *arg1 = (ArLineSegmentCmpOp *) 0 ;
  
  arg1 = (ArLineSegmentCmpOp *)jarg1; 
  delete arg1;
}


SWIGEXPORT int SWIGSTDCALL CSharp_ArPriority_PRIORITY_COUNT_get() {
  int jresult ;
  int result;
  
  result = (int)ArPriority::PRIORITY_COUNT;
  jresult = (int)result; 
  return jresult;
}


SWIGEXPORT char * SWIGSTDCALL CSharp_ArPriority_getPriorityName(int jarg1) {
  char * jresult ;
  ArPriority::Priority arg1 ;
  char *result = 0 ;
  
  arg1 = (ArPriority::Priority)jarg1; 
  result = (char *)ArPriority::getPriorityName(arg1);
  jresult = SWIG_csharp_string_callback((const char *)result); 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_ArPriority_getPriorityFromName__SWIG_0(char * jarg1, void * jarg2) {
  int jresult ;
  char *arg1 = (char *) 0 ;
  bool *arg2 = (bool *) 0 ;
  ArPriority::Priority result;
  
  arg1 = (char *)jarg1; 
  arg2 = (bool *)jarg2; 
  result = (ArPriority::Priority)ArPriority::getPriorityFromName((char const *)arg1,arg2);
  jresult = (int)result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_ArPriority_getPriorityFromName__SWIG_1(char * jarg1) {
  int jresult ;
  char *arg1 = (char *) 0 ;
  ArPriority::Priority result;
  
  arg1 = (char *)jarg1; 
  result = (ArPriority::Priority)ArPriority::getPriorityFromName((char const *)arg1);
  jresult = (int)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_ArPriority() {
  void * jresult ;
  ArPriority *result = 0 ;
  
  result = (ArPriority *)new ArPriority();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_ArPriority(void * jarg1) {
  ArPriority *arg1 = (ArPriority *) 0 ;
  
  arg1 = (ArPriority *)jarg1; 
  delete arg1;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_ArStringInfoHolder(char * jarg1, unsigned short jarg2, void * jarg3) {
  void * jresult ;
  char *arg1 = (char *) 0 ;
  ArTypes::UByte2 arg2 ;
  ArFunctor2< char *,ArTypes::UByte2 > *arg3 = (ArFunctor2< char *,ArTypes::UByte2 > *) 0 ;
  ArStringInfoHolder *result = 0 ;
  
  arg1 = (char *)jarg1; 
  arg2 = (ArTypes::UByte2)jarg2; 
  arg3 = (ArFunctor2< char *,ArTypes::UByte2 > *)jarg3; 
  result = (ArStringInfoHolder *)new ArStringInfoHolder((char const *)arg1,arg2,arg3);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_ArStringInfoHolder(void * jarg1) {
  ArStringInfoHolder *arg1 = (ArStringInfoHolder *) 0 ;
  
  arg1 = (ArStringInfoHolder *)jarg1; 
  delete arg1;
}


SWIGEXPORT char * SWIGSTDCALL CSharp_ArStringInfoHolder_getName(void * jarg1) {
  char * jresult ;
  ArStringInfoHolder *arg1 = (ArStringInfoHolder *) 0 ;
  char *result = 0 ;
  
  arg1 = (ArStringInfoHolder *)jarg1; 
  result = (char *)(arg1)->getName();
  jresult = SWIG_csharp_string_callback((const char *)result); 
  return jresult;
}


SWIGEXPORT unsigned short SWIGSTDCALL CSharp_ArStringInfoHolder_getMaxLength(void * jarg1) {
  unsigned short jresult ;
  ArStringInfoHolder *arg1 = (ArStringInfoHolder *) 0 ;
  ArTypes::UByte2 result;
  
  arg1 = (ArStringInfoHolder *)jarg1; 
  result = (ArTypes::UByte2)(arg1)->getMaxLength();
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_ArStringInfoHolder_getFunctor(void * jarg1) {
  void * jresult ;
  ArStringInfoHolder *arg1 = (ArStringInfoHolder *) 0 ;
  ArFunctor2< char *,ArTypes::UByte2 > *result = 0 ;
  
  arg1 = (ArStringInfoHolder *)jarg1; 
  result = (ArFunctor2< char *,ArTypes::UByte2 > *)(arg1)->getFunctor();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_ArStringInfoHolderFunctions_intWrapper(char * jarg1, unsigned short jarg2, void * jarg3, char * jarg4, int jarg5) {
  char *arg1 = (char *) 0 ;
  ArTypes::UByte2 arg2 ;
  ArRetFunctor< int > *arg3 = (ArRetFunctor< int > *) 0 ;
  char *arg4 = (char *) 0 ;
  int arg5 ;
  
  arg1 = (char *)jarg1; 
  arg2 = (ArTypes::UByte2)jarg2; 
  arg3 = (ArRetFunctor< int > *)jarg3; 
  arg4 = (char *)jarg4; 
  arg5 = (int)jarg5; 
  ArStringInfoHolderFunctions::intWrapper(arg1,arg2,arg3,(char const *)arg4,arg5);
}


SWIGEXPORT void SWIGSTDCALL CSharp_ArStringInfoHolderFunctions_doubleWrapper(char * jarg1, unsigned short jarg2, void * jarg3, char * jarg4) {
  char *arg1 = (char *) 0 ;
  ArTypes::UByte2 arg2 ;
  ArRetFunctor< double > *arg3 = (ArRetFunctor< double > *) 0 ;
  char *arg4 = (char *) 0 ;
  
  arg1 = (char *)jarg1; 
  arg2 = (ArTypes::UByte2)jarg2; 
  arg3 = (ArRetFunctor< double > *)jarg3; 
  arg4 = (char *)jarg4; 
  ArStringInfoHolderFunctions::doubleWrapper(arg1,arg2,arg3,(char const *)arg4);
}


SWIGEXPORT void SWIGSTDCALL CSharp_ArStringInfoHolderFunctions_boolWrapper(char * jarg1, unsigned short jarg2, void * jarg3, char * jarg4) {
  char *arg1 = (char *) 0 ;
  ArTypes::UByte2 arg2 ;
  ArRetFunctor< bool > *arg3 = (ArRetFunctor< bool > *) 0 ;
  char *arg4 = (char *) 0 ;
  
  arg1 = (char *)jarg1; 
  arg2 = (ArTypes::UByte2)jarg2; 
  arg3 = (ArRetFunctor< bool > *)jarg3; 
  arg4 = (char *)jarg4; 
  ArStringInfoHolderFunctions::boolWrapper(arg1,arg2,arg3,(char const *)arg4);
}


SWIGEXPORT void SWIGSTDCALL CSharp_ArStringInfoHolderFunctions_stringWrapper(char * jarg1, unsigned short jarg2, void * jarg3, char * jarg4) {
  char *arg1 = (char *) 0 ;
  ArTypes::UByte2 arg2 ;
  ArRetFunctor< char const * > *arg3 = (ArRetFunctor< char const * > *) 0 ;
  char *arg4 = (char *) 0 ;
  
  arg1 = (char *)jarg1; 
  arg2 = (ArTypes::UByte2)jarg2; 
  arg3 = (ArRetFunctor< char const * > *)jarg3; 
  arg4 = (char *)jarg4; 
  ArStringInfoHolderFunctions::stringWrapper(arg1,arg2,arg3,(char const *)arg4);
}


SWIGEXPORT void SWIGSTDCALL CSharp_ArStringInfoHolderFunctions_cppStringWrapper(char * jarg1, unsigned short jarg2, void * jarg3) {
  char *arg1 = (char *) 0 ;
  ArTypes::UByte2 arg2 ;
  ArRetFunctor< std::string > *arg3 = (ArRetFunctor< std::string > *) 0 ;
  
  arg1 = (char *)jarg1; 
  arg2 = (ArTypes::UByte2)jarg2; 
  arg3 = (ArRetFunctor< std::string > *)jarg3; 
  ArStringInfoHolderFunctions::cppStringWrapper(arg1,arg2,arg3);
}


SWIGEXPORT void SWIGSTDCALL CSharp_ArStringInfoHolderFunctions_unsignedLongWrapper(char * jarg1, unsigned short jarg2, void * jarg3, char * jarg4, unsigned long jarg5) {
  char *arg1 = (char *) 0 ;
  ArTypes::UByte2 arg2 ;
  ArRetFunctor< unsigned long > *arg3 = (ArRetFunctor< unsigned long > *) 0 ;
  char *arg4 = (char *) 0 ;
  unsigned long arg5 ;
  
  arg1 = (char *)jarg1; 
  arg2 = (ArTypes::UByte2)jarg2; 
  arg3 = (ArRetFunctor< unsigned long > *)jarg3; 
  arg4 = (char *)jarg4; 
  arg5 = (unsigned long)jarg5; 
  ArStringInfoHolderFunctions::unsignedLongWrapper(arg1,arg2,arg3,(char const *)arg4,arg5);
}


SWIGEXPORT void SWIGSTDCALL CSharp_ArStringInfoHolderFunctions_longWrapper(char * jarg1, unsigned short jarg2, void * jarg3, char * jarg4, long jarg5) {
  char *arg1 = (char *) 0 ;
  ArTypes::UByte2 arg2 ;
  ArRetFunctor< long > *arg3 = (ArRetFunctor< long > *) 0 ;
  char *arg4 = (char *) 0 ;
  long arg5 ;
  
  arg1 = (char *)jarg1; 
  arg2 = (ArTypes::UByte2)jarg2; 
  arg3 = (ArRetFunctor< long > *)jarg3; 
  arg4 = (char *)jarg4; 
  arg5 = (long)jarg5; 
  ArStringInfoHolderFunctions::longWrapper(arg1,arg2,arg3,(char const *)arg4,arg5);
}


SWIGEXPORT void SWIGSTDCALL CSharp_ArStringInfoHolderFunctions_arTimeWrapper(char * jarg1, unsigned short jarg2, void * jarg3, char * jarg4) {
  char *arg1 = (char *) 0 ;
  ArTypes::UByte2 arg2 ;
  ArRetFunctor< ArTime > *arg3 = (ArRetFunctor< ArTime > *) 0 ;
  char *arg4 = (char *) 0 ;
  
  arg1 = (char *)jarg1; 
  arg2 = (ArTypes::UByte2)jarg2; 
  arg3 = (ArRetFunctor< ArTime > *)jarg3; 
  arg4 = (char *)jarg4; 
  ArStringInfoHolderFunctions::arTimeWrapper(arg1,arg2,arg3,(char const *)arg4);
}


SWIGEXPORT void SWIGSTDCALL CSharp_ArStringInfoHolderFunctions_floatWrapper(char * jarg1, unsigned short jarg2, void * jarg3, char * jarg4) {
  char *arg1 = (char *) 0 ;
  ArTypes::UByte2 arg2 ;
  ArRetFunctor< float > *arg3 = (ArRetFunctor< float > *) 0 ;
  char *arg4 = (char *) 0 ;
  
  arg1 = (char *)jarg1; 
  arg2 = (ArTypes::UByte2)jarg2; 
  arg3 = (ArRetFunctor< float > *)jarg3; 
  arg4 = (char *)jarg4; 
  ArStringInfoHolderFunctions::floatWrapper(arg1,arg2,arg3,(char const *)arg4);
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_ArStringInfoHolderFunctions() {
  void * jresult ;
  ArStringInfoHolderFunctions *result = 0 ;
  
  result = (ArStringInfoHolderFunctions *)new ArStringInfoHolderFunctions();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_ArStringInfoHolderFunctions(void * jarg1) {
  ArStringInfoHolderFunctions *arg1 = (ArStringInfoHolderFunctions *) 0 ;
  
  arg1 = (ArStringInfoHolderFunctions *)jarg1; 
  delete arg1;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_ArCallbackList__SWIG_0(char * jarg1, int jarg2, unsigned int jarg3) {
  void * jresult ;
  char *arg1 = (char *) 0 ;
  ArLog::LogLevel arg2 ;
  bool arg3 ;
  ArCallbackList *result = 0 ;
  
  arg1 = (char *)jarg1; 
  arg2 = (ArLog::LogLevel)jarg2; 
  arg3 = jarg3 ? true : false; 
  result = (ArCallbackList *)new ArCallbackList((char const *)arg1,arg2,arg3);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_ArCallbackList__SWIG_1(char * jarg1, int jarg2) {
  void * jresult ;
  char *arg1 = (char *) 0 ;
  ArLog::LogLevel arg2 ;
  ArCallbackList *result = 0 ;
  
  arg1 = (char *)jarg1; 
  arg2 = (ArLog::LogLevel)jarg2; 
  result = (ArCallbackList *)new ArCallbackList((char const *)arg1,arg2);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_ArCallbackList__SWIG_2(char * jarg1) {
  void * jresult ;
  char *arg1 = (char *) 0 ;
  ArCallbackList *result = 0 ;
  
  arg1 = (char *)jarg1; 
  result = (ArCallbackList *)new ArCallbackList((char const *)arg1);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_ArCallbackList__SWIG_3() {
  void * jresult ;
  ArCallbackList *result = 0 ;
  
  result = (ArCallbackList *)new ArCallbackList();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_ArCallbackList(void * jarg1) {
  ArCallbackList *arg1 = (ArCallbackList *) 0 ;
  
  arg1 = (ArCallbackList *)jarg1; 
  delete arg1;
}


SWIGEXPORT void SWIGSTDCALL CSharp_ArCallbackList_invoke(void * jarg1) {
  ArCallbackList *arg1 = (ArCallbackList *) 0 ;
  
  arg1 = (ArCallbackList *)jarg1; 
  (arg1)->invoke();
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_ArThreadedCallbackList(int jarg1, char * jarg2) {
  void * jresult ;
  int arg1 ;
  char *arg2 = (char *) 0 ;
  ArThreadedCallbackList *result = 0 ;
  
  arg1 = (int)jarg1; 
  arg2 = (char *)jarg2; 
  result = (ArThreadedCallbackList *)new ArThreadedCallbackList(arg1,(char const *)arg2);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_ArThreadedCallbackList(void * jarg1) {
  ArThreadedCallbackList *arg1 = (ArThreadedCallbackList *) 0 ;
  
  arg1 = (ArThreadedCallbackList *)jarg1; 
  delete arg1;
}


SWIGEXPORT void SWIGSTDCALL CSharp_ArThreadedCallbackList_addCallback__SWIG_0(void * jarg1, void * jarg2, int jarg3) {
  ArThreadedCallbackList *arg1 = (ArThreadedCallbackList *) 0 ;
  ArFunctor *arg2 = (ArFunctor *) 0 ;
  int arg3 ;
  
  arg1 = (ArThreadedCallbackList *)jarg1; 
  arg2 = (ArFunctor *)jarg2; 
  arg3 = (int)jarg3; 
  (arg1)->addCallback(arg2,arg3);
}


SWIGEXPORT void SWIGSTDCALL CSharp_ArThreadedCallbackList_addCallback__SWIG_1(void * jarg1, void * jarg2) {
  ArThreadedCallbackList *arg1 = (ArThreadedCallbackList *) 0 ;
  ArFunctor *arg2 = (ArFunctor *) 0 ;
  
  arg1 = (ArThreadedCallbackList *)jarg1; 
  arg2 = (ArFunctor *)jarg2; 
  (arg1)->addCallback(arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_ArThreadedCallbackList_remCallback(void * jarg1, void * jarg2) {
  ArThreadedCallbackList *arg1 = (ArThreadedCallbackList *) 0 ;
  ArFunctor *arg2 = (ArFunctor *) 0 ;
  
  arg1 = (ArThreadedCallbackList *)jarg1; 
  arg2 = (ArFunctor *)jarg2; 
  (arg1)->remCallback(arg2);
}


SWIGEXPORT void * SWIGSTDCALL CSharp_ArThreadedCallbackList_runThread(void * jarg1, void * jarg2) {
  void * jresult ;
  ArThreadedCallbackList *arg1 = (ArThreadedCallbackList *) 0 ;
  void *arg2 = (void *) 0 ;
  void *result = 0 ;
  
  arg1 = (ArThreadedCallbackList *)jarg1; 
  arg2 = (void *)jarg2; 
  result = (void *)(arg1)->runThread(arg2);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_ArPoseUtil_findCornersFromRobotBounds(double jarg1, double jarg2, double jarg3, double jarg4, double jarg5, unsigned int jarg6) {
  void * jresult ;
  double arg1 ;
  double arg2 ;
  double arg3 ;
  double arg4 ;
  double arg5 ;
  bool arg6 ;
  SwigValueWrapper< std::list< ArPose > > result;
  
  arg1 = (double)jarg1; 
  arg2 = (double)jarg2; 
  arg3 = (double)jarg3; 
  arg4 = (double)jarg4; 
  arg5 = (double)jarg5; 
  arg6 = jarg6 ? true : false; 
  result = ArPoseUtil::findCornersFromRobotBounds(arg1,arg2,arg3,arg4,arg5,arg6);
  jresult = new std::list< ArPose >((const std::list< ArPose > &)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_ArPoseUtil_breakUpDistanceEvenly(void * jarg1, void * jarg2, int jarg3) {
  void * jresult ;
  ArPose arg1 ;
  ArPose arg2 ;
  int arg3 ;
  ArPose *argp1 ;
  ArPose *argp2 ;
  SwigValueWrapper< std::list< ArPose > > result;
  
  argp1 = (ArPose *)jarg1; 
  if (!argp1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Attempt to dereference null ArPose", 0);
    return 0;
  }
  arg1 = *argp1; 
  argp2 = (ArPose *)jarg2; 
  if (!argp2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Attempt to dereference null ArPose", 0);
    return 0;
  }
  arg2 = *argp2; 
  arg3 = (int)jarg3; 
  result = ArPoseUtil::breakUpDistanceEvenly(arg1,arg2,arg3);
  jresult = new std::list< ArPose >((const std::list< ArPose > &)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_ArPoseUtil() {
  void * jresult ;
  ArPoseUtil *result = 0 ;
  
  result = (ArPoseUtil *)new ArPoseUtil();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_ArPoseUtil(void * jarg1) {
  ArPoseUtil *arg1 = (ArPoseUtil *) 0 ;
  
  arg1 = (ArPoseUtil *)jarg1; 
  delete arg1;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_ArTimeChecker__SWIG_0(char * jarg1, int jarg2) {
  void * jresult ;
  char *arg1 = (char *) 0 ;
  int arg2 ;
  ArTimeChecker *result = 0 ;
  
  arg1 = (char *)jarg1; 
  arg2 = (int)jarg2; 
  result = (ArTimeChecker *)new ArTimeChecker((char const *)arg1,arg2);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_ArTimeChecker__SWIG_1(char * jarg1) {
  void * jresult ;
  char *arg1 = (char *) 0 ;
  ArTimeChecker *result = 0 ;
  
  arg1 = (char *)jarg1; 
  result = (ArTimeChecker *)new ArTimeChecker((char const *)arg1);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_ArTimeChecker__SWIG_2() {
  void * jresult ;
  ArTimeChecker *result = 0 ;
  
  result = (ArTimeChecker *)new ArTimeChecker();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_ArTimeChecker(void * jarg1) {
  ArTimeChecker *arg1 = (ArTimeChecker *) 0 ;
  
  arg1 = (ArTimeChecker *)jarg1; 
  delete arg1;
}


SWIGEXPORT void SWIGSTDCALL CSharp_ArTimeChecker_setName(void * jarg1, char * jarg2) {
  ArTimeChecker *arg1 = (ArTimeChecker *) 0 ;
  char *arg2 = (char *) 0 ;
  
  arg1 = (ArTimeChecker *)jarg1; 
  arg2 = (char *)jarg2; 
  (arg1)->setName((char const *)arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_ArTimeChecker_setDefaultMSecs(void * jarg1, int jarg2) {
  ArTimeChecker *arg1 = (ArTimeChecker *) 0 ;
  int arg2 ;
  
  arg1 = (ArTimeChecker *)jarg1; 
  arg2 = (int)jarg2; 
  (arg1)->setDefaultMSecs(arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_ArTimeChecker_start(void * jarg1) {
  ArTimeChecker *arg1 = (ArTimeChecker *) 0 ;
  
  arg1 = (ArTimeChecker *)jarg1; 
  (arg1)->start();
}


SWIGEXPORT void SWIGSTDCALL CSharp_ArTimeChecker_check(void * jarg1, char * jarg2) {
  ArTimeChecker *arg1 = (ArTimeChecker *) 0 ;
  char *arg2 = (char *) 0 ;
  
  arg1 = (ArTimeChecker *)jarg1; 
  arg2 = (char *)jarg2; 
  (arg1)->check((char const *)arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_ArTimeChecker_finish(void * jarg1) {
  ArTimeChecker *arg1 = (ArTimeChecker *) 0 ;
  
  arg1 = (ArTimeChecker *)jarg1; 
  (arg1)->finish();
}


SWIGEXPORT void * SWIGSTDCALL CSharp_ArTimeChecker_getLastCheckTime(void * jarg1) {
  void * jresult ;
  ArTimeChecker *arg1 = (ArTimeChecker *) 0 ;
  ArTime result;
  
  arg1 = (ArTimeChecker *)jarg1; 
  result = (arg1)->getLastCheckTime();
  jresult = new ArTime((const ArTime &)result); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_md5_state_t_count_set(void * jarg1, void * jarg2) {
  md5_state_s *arg1 = (md5_state_s *) 0 ;
  md5_word_t *arg2 ;
  
  arg1 = (md5_state_s *)jarg1; 
  arg2 = (md5_word_t *)jarg2; 
  {
    size_t ii;
    md5_word_t *b = (md5_word_t *) arg1->count;
    for (ii = 0; ii < (size_t)2; ii++) b[ii] = *((md5_word_t *) arg2 + ii);
  }
}


SWIGEXPORT void * SWIGSTDCALL CSharp_md5_state_t_count_get(void * jarg1) {
  void * jresult ;
  md5_state_s *arg1 = (md5_state_s *) 0 ;
  md5_word_t *result = 0 ;
  
  arg1 = (md5_state_s *)jarg1; 
  result = (md5_word_t *)(md5_word_t *) ((arg1)->count);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_md5_state_t_abcd_set(void * jarg1, void * jarg2) {
  md5_state_s *arg1 = (md5_state_s *) 0 ;
  md5_word_t *arg2 ;
  
  arg1 = (md5_state_s *)jarg1; 
  arg2 = (md5_word_t *)jarg2; 
  {
    size_t ii;
    md5_word_t *b = (md5_word_t *) arg1->abcd;
    for (ii = 0; ii < (size_t)4; ii++) b[ii] = *((md5_word_t *) arg2 + ii);
  }
}


SWIGEXPORT void * SWIGSTDCALL CSharp_md5_state_t_abcd_get(void * jarg1) {
  void * jresult ;
  md5_state_s *arg1 = (md5_state_s *) 0 ;
  md5_word_t *result = 0 ;
  
  arg1 = (md5_state_s *)jarg1; 
  result = (md5_word_t *)(md5_word_t *) ((arg1)->abcd);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_md5_state_t_buf_set(void * jarg1, void * jarg2) {
  md5_state_s *arg1 = (md5_state_s *) 0 ;
  md5_byte_t *arg2 ;
  
  arg1 = (md5_state_s *)jarg1; 
  arg2 = (md5_byte_t *)jarg2; 
  {
    size_t ii;
    md5_byte_t *b = (md5_byte_t *) arg1->buf;
    for (ii = 0; ii < (size_t)64; ii++) b[ii] = *((md5_byte_t *) arg2 + ii);
  }
}


SWIGEXPORT void * SWIGSTDCALL CSharp_md5_state_t_buf_get(void * jarg1) {
  void * jresult ;
  md5_state_s *arg1 = (md5_state_s *) 0 ;
  md5_byte_t *result = 0 ;
  
  arg1 = (md5_state_s *)jarg1; 
  result = (md5_byte_t *)(md5_byte_t *) ((arg1)->buf);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_md5_state_t() {
  void * jresult ;
  md5_state_s *result = 0 ;
  
  result = (md5_state_s *)new md5_state_s();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_md5_state_t(void * jarg1) {
  md5_state_s *arg1 = (md5_state_s *) 0 ;
  
  arg1 = (md5_state_s *)jarg1; 
  delete arg1;
}


SWIGEXPORT void SWIGSTDCALL CSharp_md5_init(void * jarg1) {
  md5_state_t *arg1 = (md5_state_t *) 0 ;
  
  arg1 = (md5_state_t *)jarg1; 
  md5_init(arg1);
}


SWIGEXPORT void SWIGSTDCALL CSharp_md5_append(void * jarg1, void * jarg2, int jarg3) {
  md5_state_t *arg1 = (md5_state_t *) 0 ;
  md5_byte_t *arg2 = (md5_byte_t *) 0 ;
  int arg3 ;
  
  arg1 = (md5_state_t *)jarg1; 
  arg2 = (md5_byte_t *)jarg2; 
  arg3 = (int)jarg3; 
  md5_append(arg1,(unsigned char const *)arg2,arg3);
}


SWIGEXPORT void SWIGSTDCALL CSharp_md5_finish(void * jarg1, void * jarg2) {
  md5_state_t *arg1 = (md5_state_t *) 0 ;
  md5_byte_t *arg2 ;
  
  arg1 = (md5_state_t *)jarg1; 
  arg2 = (md5_byte_t *)jarg2; 
  md5_finish(arg1,arg2);
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_ArBasePacket__SWIG_0(unsigned short jarg1, unsigned short jarg2, char * jarg3, unsigned short jarg4) {
  void * jresult ;
  ArTypes::UByte2 arg1 ;
  ArTypes::UByte2 arg2 ;
  char *arg3 = (char *) 0 ;
  ArTypes::UByte2 arg4 ;
  ArBasePacket *result = 0 ;
  
  arg1 = (ArTypes::UByte2)jarg1; 
  arg2 = (ArTypes::UByte2)jarg2; 
  arg3 = (char *)jarg3; 
  arg4 = (ArTypes::UByte2)jarg4; 
  result = (ArBasePacket *)new ArBasePacket(arg1,arg2,arg3,arg4);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_ArBasePacket__SWIG_1(unsigned short jarg1, unsigned short jarg2, char * jarg3) {
  void * jresult ;
  ArTypes::UByte2 arg1 ;
  ArTypes::UByte2 arg2 ;
  char *arg3 = (char *) 0 ;
  ArBasePacket *result = 0 ;
  
  arg1 = (ArTypes::UByte2)jarg1; 
  arg2 = (ArTypes::UByte2)jarg2; 
  arg3 = (char *)jarg3; 
  result = (ArBasePacket *)new ArBasePacket(arg1,arg2,arg3);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_ArBasePacket__SWIG_2(unsigned short jarg1, unsigned short jarg2) {
  void * jresult ;
  ArTypes::UByte2 arg1 ;
  ArTypes::UByte2 arg2 ;
  ArBasePacket *result = 0 ;
  
  arg1 = (ArTypes::UByte2)jarg1; 
  arg2 = (ArTypes::UByte2)jarg2; 
  result = (ArBasePacket *)new ArBasePacket(arg1,arg2);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_ArBasePacket__SWIG_3(unsigned short jarg1) {
  void * jresult ;
  ArTypes::UByte2 arg1 ;
  ArBasePacket *result = 0 ;
  
  arg1 = (ArTypes::UByte2)jarg1; 
  result = (ArBasePacket *)new ArBasePacket(arg1);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_ArBasePacket__SWIG_4() {
  void * jresult ;
  ArBasePacket *result = 0 ;
  
  result = (ArBasePacket *)new ArBasePacket();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_ArBasePacket__SWIG_5(void * jarg1) {
  void * jresult ;
  ArBasePacket *arg1 = 0 ;
  ArBasePacket *result = 0 ;
  
  arg1 = (ArBasePacket *)jarg1;
  if (!arg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "ArBasePacket const & type is null", 0);
    return 0;
  } 
  result = (ArBasePacket *)new ArBasePacket((ArBasePacket const &)*arg1);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_ArBasePacket(void * jarg1) {
  ArBasePacket *arg1 = (ArBasePacket *) 0 ;
  
  arg1 = (ArBasePacket *)jarg1; 
  delete arg1;
}


SWIGEXPORT void SWIGSTDCALL CSharp_ArBasePacket_empty(void * jarg1) {
  ArBasePacket *arg1 = (ArBasePacket *) 0 ;
  
  arg1 = (ArBasePacket *)jarg1; 
  (arg1)->empty();
}


SWIGEXPORT void SWIGSTDCALL CSharp_ArBasePacket_finalizePacket(void * jarg1) {
  ArBasePacket *arg1 = (ArBasePacket *) 0 ;
  
  arg1 = (ArBasePacket *)jarg1; 
  (arg1)->finalizePacket();
}


SWIGEXPORT void SWIGSTDCALL CSharp_ArBasePacket_log(void * jarg1) {
  ArBasePacket *arg1 = (ArBasePacket *) 0 ;
  
  arg1 = (ArBasePacket *)jarg1; 
  (arg1)->log();
}


SWIGEXPORT void SWIGSTDCALL CSharp_ArBasePacket_printHex(void * jarg1) {
  ArBasePacket *arg1 = (ArBasePacket *) 0 ;
  
  arg1 = (ArBasePacket *)jarg1; 
  (arg1)->printHex();
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_ArBasePacket_isValid(void * jarg1) {
  unsigned int jresult ;
  ArBasePacket *arg1 = (ArBasePacket *) 0 ;
  bool result;
  
  arg1 = (ArBasePacket *)jarg1; 
  result = (bool)(arg1)->isValid();
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_ArBasePacket_resetValid(void * jarg1) {
  ArBasePacket *arg1 = (ArBasePacket *) 0 ;
  
  arg1 = (ArBasePacket *)jarg1; 
  (arg1)->resetValid();
}


SWIGEXPORT void SWIGSTDCALL CSharp_ArBasePacket_byteToBuf(void * jarg1, char jarg2) {
  ArBasePacket *arg1 = (ArBasePacket *) 0 ;
  ArTypes::Byte arg2 ;
  
  arg1 = (ArBasePacket *)jarg1; 
  arg2 = (ArTypes::Byte)jarg2; 
  (arg1)->byteToBuf(arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_ArBasePacket_byte2ToBuf(void * jarg1, short jarg2) {
  ArBasePacket *arg1 = (ArBasePacket *) 0 ;
  ArTypes::Byte2 arg2 ;
  
  arg1 = (ArBasePacket *)jarg1; 
  arg2 = (ArTypes::Byte2)jarg2; 
  (arg1)->byte2ToBuf(arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_ArBasePacket_byte4ToBuf(void * jarg1, int jarg2) {
  ArBasePacket *arg1 = (ArBasePacket *) 0 ;
  ArTypes::Byte4 arg2 ;
  
  arg1 = (ArBasePacket *)jarg1; 
  arg2 = (ArTypes::Byte4)jarg2; 
  (arg1)->byte4ToBuf(arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_ArBasePacket_byte8ToBuf(void * jarg1, long long jarg2) {
  ArBasePacket *arg1 = (ArBasePacket *) 0 ;
  ArTypes::Byte8 arg2 ;
  
  arg1 = (ArBasePacket *)jarg1; 
  arg2 = (ArTypes::Byte8)jarg2; 
  (arg1)->byte8ToBuf(arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_ArBasePacket_uByteToBuf(void * jarg1, unsigned char jarg2) {
  ArBasePacket *arg1 = (ArBasePacket *) 0 ;
  ArTypes::UByte arg2 ;
  
  arg1 = (ArBasePacket *)jarg1; 
  arg2 = (ArTypes::UByte)jarg2; 
  (arg1)->uByteToBuf(arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_ArBasePacket_uByte2ToBuf(void * jarg1, unsigned short jarg2) {
  ArBasePacket *arg1 = (ArBasePacket *) 0 ;
  ArTypes::UByte2 arg2 ;
  
  arg1 = (ArBasePacket *)jarg1; 
  arg2 = (ArTypes::UByte2)jarg2; 
  (arg1)->uByte2ToBuf(arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_ArBasePacket_uByte4ToBuf(void * jarg1, unsigned int jarg2) {
  ArBasePacket *arg1 = (ArBasePacket *) 0 ;
  ArTypes::UByte4 arg2 ;
  
  arg1 = (ArBasePacket *)jarg1; 
  arg2 = (ArTypes::UByte4)jarg2; 
  (arg1)->uByte4ToBuf(arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_ArBasePacket_uByte8ToBuf(void * jarg1, unsigned long long jarg2) {
  ArBasePacket *arg1 = (ArBasePacket *) 0 ;
  ArTypes::UByte8 arg2 ;
  
  arg1 = (ArBasePacket *)jarg1; 
  arg2 = (ArTypes::UByte8)jarg2; 
  (arg1)->uByte8ToBuf(arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_ArBasePacket_strToBuf(void * jarg1, char * jarg2) {
  ArBasePacket *arg1 = (ArBasePacket *) 0 ;
  char *arg2 = (char *) 0 ;
  
  arg1 = (ArBasePacket *)jarg1; 
  arg2 = (char *)jarg2; 
  (arg1)->strToBuf((char const *)arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_ArBasePacket_strNToBuf(void * jarg1, char * jarg2, int jarg3) {
  ArBasePacket *arg1 = (ArBasePacket *) 0 ;
  char *arg2 = (char *) 0 ;
  int arg3 ;
  
  arg1 = (ArBasePacket *)jarg1; 
  arg2 = (char *)jarg2; 
  arg3 = (int)jarg3; 
  (arg1)->strNToBuf((char const *)arg2,arg3);
}


SWIGEXPORT void SWIGSTDCALL CSharp_ArBasePacket_strToBufPadded(void * jarg1, char * jarg2, int jarg3) {
  ArBasePacket *arg1 = (ArBasePacket *) 0 ;
  char *arg2 = (char *) 0 ;
  int arg3 ;
  
  arg1 = (ArBasePacket *)jarg1; 
  arg2 = (char *)jarg2; 
  arg3 = (int)jarg3; 
  (arg1)->strToBufPadded((char const *)arg2,arg3);
}


SWIGEXPORT void SWIGSTDCALL CSharp_ArBasePacket_dataToBuf__SWIG_0(void * jarg1, char * jarg2, int jarg3) {
  ArBasePacket *arg1 = (ArBasePacket *) 0 ;
  char *arg2 = (char *) 0 ;
  int arg3 ;
  
  arg1 = (ArBasePacket *)jarg1; 
  arg2 = (char *)jarg2; 
  arg3 = (int)jarg3; 
  (arg1)->dataToBuf((char const *)arg2,arg3);
}


SWIGEXPORT void SWIGSTDCALL CSharp_ArBasePacket_dataToBuf__SWIG_1(void * jarg1, void * jarg2, int jarg3) {
  ArBasePacket *arg1 = (ArBasePacket *) 0 ;
  unsigned char *arg2 = (unsigned char *) 0 ;
  int arg3 ;
  
  arg1 = (ArBasePacket *)jarg1; 
  arg2 = (unsigned char *)jarg2; 
  arg3 = (int)jarg3; 
  (arg1)->dataToBuf((unsigned char const *)arg2,arg3);
}


SWIGEXPORT char SWIGSTDCALL CSharp_ArBasePacket_bufToByte(void * jarg1) {
  char jresult ;
  ArBasePacket *arg1 = (ArBasePacket *) 0 ;
  ArTypes::Byte result;
  
  arg1 = (ArBasePacket *)jarg1; 
  result = (ArTypes::Byte)(arg1)->bufToByte();
  jresult = result; 
  return jresult;
}


SWIGEXPORT short SWIGSTDCALL CSharp_ArBasePacket_bufToByte2(void * jarg1) {
  short jresult ;
  ArBasePacket *arg1 = (ArBasePacket *) 0 ;
  ArTypes::Byte2 result;
  
  arg1 = (ArBasePacket *)jarg1; 
  result = (ArTypes::Byte2)(arg1)->bufToByte2();
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_ArBasePacket_bufToByte4(void * jarg1) {
  int jresult ;
  ArBasePacket *arg1 = (ArBasePacket *) 0 ;
  ArTypes::Byte4 result;
  
  arg1 = (ArBasePacket *)jarg1; 
  result = (ArTypes::Byte4)(arg1)->bufToByte4();
  jresult = result; 
  return jresult;
}


SWIGEXPORT long long SWIGSTDCALL CSharp_ArBasePacket_bufToByte8(void * jarg1) {
  long long jresult ;
  ArBasePacket *arg1 = (ArBasePacket *) 0 ;
  ArTypes::Byte8 result;
  
  arg1 = (ArBasePacket *)jarg1; 
  result = (ArTypes::Byte8)(arg1)->bufToByte8();
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned char SWIGSTDCALL CSharp_ArBasePacket_bufToUByte(void * jarg1) {
  unsigned char jresult ;
  ArBasePacket *arg1 = (ArBasePacket *) 0 ;
  ArTypes::UByte result;
  
  arg1 = (ArBasePacket *)jarg1; 
  result = (ArTypes::UByte)(arg1)->bufToUByte();
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned short SWIGSTDCALL CSharp_ArBasePacket_bufToUByte2(void * jarg1) {
  unsigned short jresult ;
  ArBasePacket *arg1 = (ArBasePacket *) 0 ;
  ArTypes::UByte2 result;
  
  arg1 = (ArBasePacket *)jarg1; 
  result = (ArTypes::UByte2)(arg1)->bufToUByte2();
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_ArBasePacket_bufToUByte4(void * jarg1) {
  unsigned int jresult ;
  ArBasePacket *arg1 = (ArBasePacket *) 0 ;
  ArTypes::UByte4 result;
  
  arg1 = (ArBasePacket *)jarg1; 
  result = (ArTypes::UByte4)(arg1)->bufToUByte4();
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned long long SWIGSTDCALL CSharp_ArBasePacket_bufToUByte8(void * jarg1) {
  unsigned long long jresult ;
  ArBasePacket *arg1 = (ArBasePacket *) 0 ;
  ArTypes::UByte8 result;
  
  arg1 = (ArBasePacket *)jarg1; 
  result = (ArTypes::UByte8)(arg1)->bufToUByte8();
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_ArBasePacket_bufToStr(void * jarg1, char * jarg2, int jarg3) {
  ArBasePacket *arg1 = (ArBasePacket *) 0 ;
  char *arg2 = (char *) 0 ;
  int arg3 ;
  
  arg1 = (ArBasePacket *)jarg1; 
  arg2 = (char *)jarg2; 
  arg3 = (int)jarg3; 
  (arg1)->bufToStr(arg2,arg3);
}


SWIGEXPORT char * SWIGSTDCALL CSharp_ArBasePacket_bufToString__SWIG_0(void * jarg1) {
  char * jresult ;
  ArBasePacket *arg1 = (ArBasePacket *) 0 ;
  std::string result;
  
  arg1 = (ArBasePacket *)jarg1; 
  result = (arg1)->bufToString();
  jresult = SWIG_csharp_string_callback((&result)->c_str()); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_ArBasePacket_bufToString__SWIG_1(void * jarg1, void * jarg2) {
  ArBasePacket *arg1 = (ArBasePacket *) 0 ;
  std::string *arg2 = (std::string *) 0 ;
  
  arg1 = (ArBasePacket *)jarg1; 
  arg2 = (std::string *)jarg2; 
  (arg1)->bufToString(arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_ArBasePacket_bufToData__SWIG_0(void * jarg1, char * jarg2, int jarg3) {
  ArBasePacket *arg1 = (ArBasePacket *) 0 ;
  char *arg2 = (char *) 0 ;
  int arg3 ;
  
  arg1 = (ArBasePacket *)jarg1; 
  arg2 = (char *)jarg2; 
  arg3 = (int)jarg3; 
  (arg1)->bufToData(arg2,arg3);
}


SWIGEXPORT void SWIGSTDCALL CSharp_ArBasePacket_bufToData__SWIG_1(void * jarg1, void * jarg2, int jarg3) {
  ArBasePacket *arg1 = (ArBasePacket *) 0 ;
  unsigned char *arg2 = (unsigned char *) 0 ;
  int arg3 ;
  
  arg1 = (ArBasePacket *)jarg1; 
  arg2 = (unsigned char *)jarg2; 
  arg3 = (int)jarg3; 
  (arg1)->bufToData(arg2,arg3);
}


SWIGEXPORT void SWIGSTDCALL CSharp_ArBasePacket_resetRead(void * jarg1) {
  ArBasePacket *arg1 = (ArBasePacket *) 0 ;
  
  arg1 = (ArBasePacket *)jarg1; 
  (arg1)->resetRead();
}


SWIGEXPORT unsigned short SWIGSTDCALL CSharp_ArBasePacket_getLength(void * jarg1) {
  unsigned short jresult ;
  ArBasePacket *arg1 = (ArBasePacket *) 0 ;
  ArTypes::UByte2 result;
  
  arg1 = (ArBasePacket *)jarg1; 
  result = (ArTypes::UByte2)((ArBasePacket const *)arg1)->getLength();
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned short SWIGSTDCALL CSharp_ArBasePacket_getDataLength(void * jarg1) {
  unsigned short jresult ;
  ArBasePacket *arg1 = (ArBasePacket *) 0 ;
  ArTypes::UByte2 result;
  
  arg1 = (ArBasePacket *)jarg1; 
  result = (ArTypes::UByte2)((ArBasePacket const *)arg1)->getDataLength();
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned short SWIGSTDCALL CSharp_ArBasePacket_getReadLength(void * jarg1) {
  unsigned short jresult ;
  ArBasePacket *arg1 = (ArBasePacket *) 0 ;
  ArTypes::UByte2 result;
  
  arg1 = (ArBasePacket *)jarg1; 
  result = (ArTypes::UByte2)((ArBasePacket const *)arg1)->getReadLength();
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned short SWIGSTDCALL CSharp_ArBasePacket_getDataReadLength(void * jarg1) {
  unsigned short jresult ;
  ArBasePacket *arg1 = (ArBasePacket *) 0 ;
  ArTypes::UByte2 result;
  
  arg1 = (ArBasePacket *)jarg1; 
  result = (ArTypes::UByte2)((ArBasePacket const *)arg1)->getDataReadLength();
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned short SWIGSTDCALL CSharp_ArBasePacket_getHeaderLength(void * jarg1) {
  unsigned short jresult ;
  ArBasePacket *arg1 = (ArBasePacket *) 0 ;
  ArTypes::UByte2 result;
  
  arg1 = (ArBasePacket *)jarg1; 
  result = (ArTypes::UByte2)((ArBasePacket const *)arg1)->getHeaderLength();
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned short SWIGSTDCALL CSharp_ArBasePacket_getFooterLength(void * jarg1) {
  unsigned short jresult ;
  ArBasePacket *arg1 = (ArBasePacket *) 0 ;
  ArTypes::UByte2 result;
  
  arg1 = (ArBasePacket *)jarg1; 
  result = (ArTypes::UByte2)((ArBasePacket const *)arg1)->getFooterLength();
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned short SWIGSTDCALL CSharp_ArBasePacket_getMaxLength(void * jarg1) {
  unsigned short jresult ;
  ArBasePacket *arg1 = (ArBasePacket *) 0 ;
  ArTypes::UByte2 result;
  
  arg1 = (ArBasePacket *)jarg1; 
  result = (ArTypes::UByte2)((ArBasePacket const *)arg1)->getMaxLength();
  jresult = result; 
  return jresult;
}


SWIGEXPORT char * SWIGSTDCALL CSharp_ArBasePacket_getBuf__SWIG_0(void * jarg1) {
  char * jresult ;
  ArBasePacket *arg1 = (ArBasePacket *) 0 ;
  char *result = 0 ;
  
  arg1 = (ArBasePacket *)jarg1; 
  result = (char *)((ArBasePacket const *)arg1)->getBuf();
  jresult = SWIG_csharp_string_callback((const char *)result); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_ArBasePacket_setBuf(void * jarg1, char * jarg2, unsigned short jarg3) {
  ArBasePacket *arg1 = (ArBasePacket *) 0 ;
  char *arg2 = (char *) 0 ;
  ArTypes::UByte2 arg3 ;
  
  arg1 = (ArBasePacket *)jarg1; 
  arg2 = (char *)jarg2; 
  arg3 = (ArTypes::UByte2)jarg3; 
  (arg1)->setBuf(arg2,arg3);
}


SWIGEXPORT void SWIGSTDCALL CSharp_ArBasePacket_setMaxLength(void * jarg1, unsigned short jarg2) {
  ArBasePacket *arg1 = (ArBasePacket *) 0 ;
  ArTypes::UByte2 arg2 ;
  
  arg1 = (ArBasePacket *)jarg1; 
  arg2 = (ArTypes::UByte2)jarg2; 
  (arg1)->setMaxLength(arg2);
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_ArBasePacket_setLength(void * jarg1, unsigned short jarg2) {
  unsigned int jresult ;
  ArBasePacket *arg1 = (ArBasePacket *) 0 ;
  ArTypes::UByte2 arg2 ;
  bool result;
  
  arg1 = (ArBasePacket *)jarg1; 
  arg2 = (ArTypes::UByte2)jarg2; 
  result = (bool)(arg1)->setLength(arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_ArBasePacket_setReadLength(void * jarg1, unsigned short jarg2) {
  ArBasePacket *arg1 = (ArBasePacket *) 0 ;
  ArTypes::UByte2 arg2 ;
  
  arg1 = (ArBasePacket *)jarg1; 
  arg2 = (ArTypes::UByte2)jarg2; 
  (arg1)->setReadLength(arg2);
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_ArBasePacket_setHeaderLength(void * jarg1, unsigned short jarg2) {
  unsigned int jresult ;
  ArBasePacket *arg1 = (ArBasePacket *) 0 ;
  ArTypes::UByte2 arg2 ;
  bool result;
  
  arg1 = (ArBasePacket *)jarg1; 
  arg2 = (ArTypes::UByte2)jarg2; 
  result = (bool)(arg1)->setHeaderLength(arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_ArBasePacket_duplicatePacket(void * jarg1, void * jarg2) {
  ArBasePacket *arg1 = (ArBasePacket *) 0 ;
  ArBasePacket *arg2 = (ArBasePacket *) 0 ;
  
  arg1 = (ArBasePacket *)jarg1; 
  arg2 = (ArBasePacket *)jarg2; 
  (arg1)->duplicatePacket(arg2);
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_ArBasePacket_bufferContainsBytes(void * jarg1, int jarg2) {
  unsigned int jresult ;
  ArBasePacket *arg1 = (ArBasePacket *) 0 ;
  int arg2 ;
  bool result;
  
  arg1 = (ArBasePacket *)jarg1; 
  arg2 = (int)jarg2; 
  result = (bool)(arg1)->bufferContainsBytes(arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_ArPTZ(void * jarg1) {
  ArPTZ *arg1 = (ArPTZ *) 0 ;
  
  arg1 = (ArPTZ *)jarg1; 
  delete arg1;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_ArPTZ_init(void * jarg1) {
  unsigned int jresult ;
  ArPTZ *arg1 = (ArPTZ *) 0 ;
  bool result;
  
  arg1 = (ArPTZ *)jarg1; 
  result = (bool)(arg1)->init();
  jresult = result; 
  return jresult;
}


SWIGEXPORT char * SWIGSTDCALL CSharp_ArPTZ_getTypeName(void * jarg1) {
  char * jresult ;
  ArPTZ *arg1 = (ArPTZ *) 0 ;
  char *result = 0 ;
  
  arg1 = (ArPTZ *)jarg1; 
  result = (char *)(arg1)->getTypeName();
  jresult = SWIG_csharp_string_callback((const char *)result); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_ArPTZ_reset(void * jarg1) {
  ArPTZ *arg1 = (ArPTZ *) 0 ;
  
  arg1 = (ArPTZ *)jarg1; 
  (arg1)->reset();
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_ArPTZ_pan(void * jarg1, double jarg2) {
  unsigned int jresult ;
  ArPTZ *arg1 = (ArPTZ *) 0 ;
  double arg2 ;
  bool result;
  
  arg1 = (ArPTZ *)jarg1; 
  arg2 = (double)jarg2; 
  result = (bool)(arg1)->pan(arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_ArPTZ_panRel(void * jarg1, double jarg2) {
  unsigned int jresult ;
  ArPTZ *arg1 = (ArPTZ *) 0 ;
  double arg2 ;
  bool result;
  
  arg1 = (ArPTZ *)jarg1; 
  arg2 = (double)jarg2; 
  result = (bool)(arg1)->panRel(arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_ArPTZ_tilt(void * jarg1, double jarg2) {
  unsigned int jresult ;
  ArPTZ *arg1 = (ArPTZ *) 0 ;
  double arg2 ;
  bool result;
  
  arg1 = (ArPTZ *)jarg1; 
  arg2 = (double)jarg2; 
  result = (bool)(arg1)->tilt(arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_ArPTZ_tiltRel(void * jarg1, double jarg2) {
  unsigned int jresult ;
  ArPTZ *arg1 = (ArPTZ *) 0 ;
  double arg2 ;
  bool result;
  
  arg1 = (ArPTZ *)jarg1; 
  arg2 = (double)jarg2; 
  result = (bool)(arg1)->tiltRel(arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_ArPTZ_panTilt(void * jarg1, double jarg2, double jarg3) {
  unsigned int jresult ;
  ArPTZ *arg1 = (ArPTZ *) 0 ;
  double arg2 ;
  double arg3 ;
  bool result;
  
  arg1 = (ArPTZ *)jarg1; 
  arg2 = (double)jarg2; 
  arg3 = (double)jarg3; 
  result = (bool)(arg1)->panTilt(arg2,arg3);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_ArPTZ_panTiltRel(void * jarg1, double jarg2, double jarg3) {
  unsigned int jresult ;
  ArPTZ *arg1 = (ArPTZ *) 0 ;
  double arg2 ;
  double arg3 ;
  bool result;
  
  arg1 = (ArPTZ *)jarg1; 
  arg2 = (double)jarg2; 
  arg3 = (double)jarg3; 
  result = (bool)(arg1)->panTiltRel(arg2,arg3);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_ArPTZ_canZoom(void * jarg1) {
  unsigned int jresult ;
  ArPTZ *arg1 = (ArPTZ *) 0 ;
  bool result;
  
  arg1 = (ArPTZ *)jarg1; 
  result = (bool)((ArPTZ const *)arg1)->canZoom();
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_ArPTZ_zoom(void * jarg1, int jarg2) {
  unsigned int jresult ;
  ArPTZ *arg1 = (ArPTZ *) 0 ;
  int arg2 ;
  bool result;
  
  arg1 = (ArPTZ *)jarg1; 
  arg2 = (int)jarg2; 
  result = (bool)(arg1)->zoom(arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_ArPTZ_zoomRel(void * jarg1, int jarg2) {
  unsigned int jresult ;
  ArPTZ *arg1 = (ArPTZ *) 0 ;
  int arg2 ;
  bool result;
  
  arg1 = (ArPTZ *)jarg1; 
  arg2 = (int)jarg2; 
  result = (bool)(arg1)->zoomRel(arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT double SWIGSTDCALL CSharp_ArPTZ_getPan(void * jarg1) {
  double jresult ;
  ArPTZ *arg1 = (ArPTZ *) 0 ;
  double result;
  
  arg1 = (ArPTZ *)jarg1; 
  result = (double)((ArPTZ const *)arg1)->getPan();
  jresult = result; 
  return jresult;
}


SWIGEXPORT double SWIGSTDCALL CSharp_ArPTZ_getTilt(void * jarg1) {
  double jresult ;
  ArPTZ *arg1 = (ArPTZ *) 0 ;
  double result;
  
  arg1 = (ArPTZ *)jarg1; 
  result = (double)((ArPTZ const *)arg1)->getTilt();
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_ArPTZ_getZoom(void * jarg1) {
  int jresult ;
  ArPTZ *arg1 = (ArPTZ *) 0 ;
  int result;
  
  arg1 = (ArPTZ *)jarg1; 
  result = (int)((ArPTZ const *)arg1)->getZoom();
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_ArPTZ_canGetRealPanTilt(void * jarg1) {
  unsigned int jresult ;
  ArPTZ *arg1 = (ArPTZ *) 0 ;
  bool result;
  
  arg1 = (ArPTZ *)jarg1; 
  result = (bool)((ArPTZ const *)arg1)->canGetRealPanTilt();
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_ArPTZ_canGetRealZoom(void * jarg1) {
  unsigned int jresult ;
  ArPTZ *arg1 = (ArPTZ *) 0 ;
  bool result;
  
  arg1 = (ArPTZ *)jarg1; 
  result = (bool)((ArPTZ const *)arg1)->canGetRealZoom();
  jresult = result; 
  return jresult;
}


SWIGEXPORT double SWIGSTDCALL CSharp_ArPTZ_getMaxPosPan(void * jarg1) {
  double jresult ;
  ArPTZ *arg1 = (ArPTZ *) 0 ;
  double result;
  
  arg1 = (ArPTZ *)jarg1; 
  result = (double)((ArPTZ const *)arg1)->getMaxPosPan();
  jresult = result; 
  return jresult;
}


SWIGEXPORT double SWIGSTDCALL CSharp_ArPTZ_getMaxPan(void * jarg1) {
  double jresult ;
  ArPTZ *arg1 = (ArPTZ *) 0 ;
  double result;
  
  arg1 = (ArPTZ *)jarg1; 
  result = (double)((ArPTZ const *)arg1)->getMaxPan();
  jresult = result; 
  return jresult;
}


SWIGEXPORT double SWIGSTDCALL CSharp_ArPTZ_getMaxNegPan(void * jarg1) {
  double jresult ;
  ArPTZ *arg1 = (ArPTZ *) 0 ;
  double result;
  
  arg1 = (ArPTZ *)jarg1; 
  result = (double)((ArPTZ const *)arg1)->getMaxNegPan();
  jresult = result; 
  return jresult;
}


SWIGEXPORT double SWIGSTDCALL CSharp_ArPTZ_getMinPan(void * jarg1) {
  double jresult ;
  ArPTZ *arg1 = (ArPTZ *) 0 ;
  double result;
  
  arg1 = (ArPTZ *)jarg1; 
  result = (double)((ArPTZ const *)arg1)->getMinPan();
  jresult = result; 
  return jresult;
}


SWIGEXPORT double SWIGSTDCALL CSharp_ArPTZ_getMaxPosTilt(void * jarg1) {
  double jresult ;
  ArPTZ *arg1 = (ArPTZ *) 0 ;
  double result;
  
  arg1 = (ArPTZ *)jarg1; 
  result = (double)((ArPTZ const *)arg1)->getMaxPosTilt();
  jresult = result; 
  return jresult;
}


SWIGEXPORT double SWIGSTDCALL CSharp_ArPTZ_getMaxTilt(void * jarg1) {
  double jresult ;
  ArPTZ *arg1 = (ArPTZ *) 0 ;
  double result;
  
  arg1 = (ArPTZ *)jarg1; 
  result = (double)((ArPTZ const *)arg1)->getMaxTilt();
  jresult = result; 
  return jresult;
}


SWIGEXPORT double SWIGSTDCALL CSharp_ArPTZ_getMaxNegTilt(void * jarg1) {
  double jresult ;
  ArPTZ *arg1 = (ArPTZ *) 0 ;
  double result;
  
  arg1 = (ArPTZ *)jarg1; 
  result = (double)((ArPTZ const *)arg1)->getMaxNegTilt();
  jresult = result; 
  return jresult;
}


SWIGEXPORT double SWIGSTDCALL CSharp_ArPTZ_getMinTilt(void * jarg1) {
  double jresult ;
  ArPTZ *arg1 = (ArPTZ *) 0 ;
  double result;
  
  arg1 = (ArPTZ *)jarg1; 
  result = (double)((ArPTZ const *)arg1)->getMinTilt();
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_ArPTZ_haltPanTilt(void * jarg1) {
  unsigned int jresult ;
  ArPTZ *arg1 = (ArPTZ *) 0 ;
  bool result;
  
  arg1 = (ArPTZ *)jarg1; 
  result = (bool)(arg1)->haltPanTilt();
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_ArPTZ_haltZoom(void * jarg1) {
  unsigned int jresult ;
  ArPTZ *arg1 = (ArPTZ *) 0 ;
  bool result;
  
  arg1 = (ArPTZ *)jarg1; 
  result = (bool)(arg1)->haltZoom();
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_ArPTZ_canPanTiltSlew(void * jarg1) {
  unsigned int jresult ;
  ArPTZ *arg1 = (ArPTZ *) 0 ;
  bool result;
  
  arg1 = (ArPTZ *)jarg1; 
  result = (bool)(arg1)->canPanTiltSlew();
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_ArPTZ_canSetSpeed(void * jarg1) {
  unsigned int jresult ;
  ArPTZ *arg1 = (ArPTZ *) 0 ;
  bool result;
  
  arg1 = (ArPTZ *)jarg1; 
  result = (bool)(arg1)->canSetSpeed();
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_ArPTZ_panSlew(void * jarg1, double jarg2) {
  unsigned int jresult ;
  ArPTZ *arg1 = (ArPTZ *) 0 ;
  double arg2 ;
  bool result;
  
  arg1 = (ArPTZ *)jarg1; 
  arg2 = (double)jarg2; 
  result = (bool)(arg1)->panSlew(arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_ArPTZ_setPanSpeed(void * jarg1, double jarg2) {
  unsigned int jresult ;
  ArPTZ *arg1 = (ArPTZ *) 0 ;
  double arg2 ;
  bool result;
  
  arg1 = (ArPTZ *)jarg1; 
  arg2 = (double)jarg2; 
  result = (bool)(arg1)->setPanSpeed(arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_ArPTZ_tiltSlew(void * jarg1, double jarg2) {
  unsigned int jresult ;
  ArPTZ *arg1 = (ArPTZ *) 0 ;
  double arg2 ;
  bool result;
  
  arg1 = (ArPTZ *)jarg1; 
  arg2 = (double)jarg2; 
  result = (bool)(arg1)->tiltSlew(arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_ArPTZ_setTiltSpeed(void * jarg1, double jarg2) {
  unsigned int jresult ;
  ArPTZ *arg1 = (ArPTZ *) 0 ;
  double arg2 ;
  bool result;
  
  arg1 = (ArPTZ *)jarg1; 
  arg2 = (double)jarg2; 
  result = (bool)(arg1)->setTiltSpeed(arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT double SWIGSTDCALL CSharp_ArPTZ_getMaxPanSpeed(void * jarg1) {
  double jresult ;
  ArPTZ *arg1 = (ArPTZ *) 0 ;
  double result;
  
  arg1 = (ArPTZ *)jarg1; 
  result = (double)(arg1)->getMaxPanSpeed();
  jresult = result; 
  return jresult;
}


SWIGEXPORT double SWIGSTDCALL CSharp_ArPTZ_getMaxTiltSpeed(void * jarg1) {
  double jresult ;
  ArPTZ *arg1 = (ArPTZ *) 0 ;
  double result;
  
  arg1 = (ArPTZ *)jarg1; 
  result = (double)(arg1)->getMaxTiltSpeed();
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_ArPTZ_getMaxZoom(void * jarg1) {
  int jresult ;
  ArPTZ *arg1 = (ArPTZ *) 0 ;
  int result;
  
  arg1 = (ArPTZ *)jarg1; 
  result = (int)((ArPTZ const *)arg1)->getMaxZoom();
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_ArPTZ_getMinZoom(void * jarg1) {
  int jresult ;
  ArPTZ *arg1 = (ArPTZ *) 0 ;
  int result;
  
  arg1 = (ArPTZ *)jarg1; 
  result = (int)((ArPTZ const *)arg1)->getMinZoom();
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_ArPTZ_canGetFOV(void * jarg1) {
  unsigned int jresult ;
  ArPTZ *arg1 = (ArPTZ *) 0 ;
  bool result;
  
  arg1 = (ArPTZ *)jarg1; 
  result = (bool)(arg1)->canGetFOV();
  jresult = result; 
  return jresult;
}


SWIGEXPORT double SWIGSTDCALL CSharp_ArPTZ_getFOVAtMaxZoom(void * jarg1) {
  double jresult ;
  ArPTZ *arg1 = (ArPTZ *) 0 ;
  double result;
  
  arg1 = (ArPTZ *)jarg1; 
  result = (double)(arg1)->getFOVAtMaxZoom();
  jresult = result; 
  return jresult;
}


SWIGEXPORT double SWIGSTDCALL CSharp_ArPTZ_getFOVAtMinZoom(void * jarg1) {
  double jresult ;
  ArPTZ *arg1 = (ArPTZ *) 0 ;
  double result;
  
  arg1 = (ArPTZ *)jarg1; 
  result = (double)(arg1)->getFOVAtMinZoom();
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_ArPTZ_setGain(void * jarg1, double jarg2) {
  unsigned int jresult ;
  ArPTZ *arg1 = (ArPTZ *) 0 ;
  double arg2 ;
  bool result;
  
  arg1 = (ArPTZ *)jarg1; 
  arg2 = (double)jarg2; 
  result = (bool)((ArPTZ const *)arg1)->setGain(arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT double SWIGSTDCALL CSharp_ArPTZ_getGain(void * jarg1, double jarg2) {
  double jresult ;
  ArPTZ *arg1 = (ArPTZ *) 0 ;
  double arg2 ;
  double result;
  
  arg1 = (ArPTZ *)jarg1; 
  arg2 = (double)jarg2; 
  result = (double)((ArPTZ const *)arg1)->getGain(arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_ArPTZ_canSetGain(void * jarg1) {
  unsigned int jresult ;
  ArPTZ *arg1 = (ArPTZ *) 0 ;
  bool result;
  
  arg1 = (ArPTZ *)jarg1; 
  result = (bool)((ArPTZ const *)arg1)->canSetGain();
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_ArPTZ_setFocus(void * jarg1, double jarg2) {
  unsigned int jresult ;
  ArPTZ *arg1 = (ArPTZ *) 0 ;
  double arg2 ;
  bool result;
  
  arg1 = (ArPTZ *)jarg1; 
  arg2 = (double)jarg2; 
  result = (bool)((ArPTZ const *)arg1)->setFocus(arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT double SWIGSTDCALL CSharp_ArPTZ_getFocus(void * jarg1, double jarg2) {
  double jresult ;
  ArPTZ *arg1 = (ArPTZ *) 0 ;
  double arg2 ;
  double result;
  
  arg1 = (ArPTZ *)jarg1; 
  arg2 = (double)jarg2; 
  result = (double)((ArPTZ const *)arg1)->getFocus(arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_ArPTZ_canSetFocus(void * jarg1) {
  unsigned int jresult ;
  ArPTZ *arg1 = (ArPTZ *) 0 ;
  bool result;
  
  arg1 = (ArPTZ *)jarg1; 
  result = (bool)((ArPTZ const *)arg1)->canSetFocus();
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_ArPTZ_setAutoFocus__SWIG_0(void * jarg1, unsigned int jarg2) {
  unsigned int jresult ;
  ArPTZ *arg1 = (ArPTZ *) 0 ;
  bool arg2 ;
  bool result;
  
  arg1 = (ArPTZ *)jarg1; 
  arg2 = jarg2 ? true : false; 
  result = (bool)(arg1)->setAutoFocus(arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_ArPTZ_setAutoFocus__SWIG_1(void * jarg1) {
  unsigned int jresult ;
  ArPTZ *arg1 = (ArPTZ *) 0 ;
  bool result;
  
  arg1 = (ArPTZ *)jarg1; 
  result = (bool)(arg1)->setAutoFocus();
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_ArPTZ_setInverted(void * jarg1, unsigned int jarg2) {
  ArPTZ *arg1 = (ArPTZ *) 0 ;
  bool arg2 ;
  
  arg1 = (ArPTZ *)jarg1; 
  arg2 = jarg2 ? true : false; 
  (arg1)->setInverted(arg2);
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_ArPTZ_getInverted(void * jarg1) {
  unsigned int jresult ;
  ArPTZ *arg1 = (ArPTZ *) 0 ;
  bool result;
  
  arg1 = (ArPTZ *)jarg1; 
  result = (bool)(arg1)->getInverted();
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_ArPTZ_setDeviceConnection__SWIG_0(void * jarg1, void * jarg2, unsigned int jarg3) {
  unsigned int jresult ;
  ArPTZ *arg1 = (ArPTZ *) 0 ;
  ArDeviceConnection *arg2 = (ArDeviceConnection *) 0 ;
  bool arg3 ;
  bool result;
  
  arg1 = (ArPTZ *)jarg1; 
  arg2 = (ArDeviceConnection *)jarg2; 
  arg3 = jarg3 ? true : false; 
  result = (bool)(arg1)->setDeviceConnection(arg2,arg3);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_ArPTZ_setDeviceConnection__SWIG_1(void * jarg1, void * jarg2) {
  unsigned int jresult ;
  ArPTZ *arg1 = (ArPTZ *) 0 ;
  ArDeviceConnection *arg2 = (ArDeviceConnection *) 0 ;
  bool result;
  
  arg1 = (ArPTZ *)jarg1; 
  arg2 = (ArDeviceConnection *)jarg2; 
  result = (bool)(arg1)->setDeviceConnection(arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_ArPTZ_getDeviceConnection(void * jarg1) {
  void * jresult ;
  ArPTZ *arg1 = (ArPTZ *) 0 ;
  ArDeviceConnection *result = 0 ;
  
  arg1 = (ArPTZ *)jarg1; 
  result = (ArDeviceConnection *)(arg1)->getDeviceConnection();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_ArPTZ_setAuxPort(void * jarg1, int jarg2) {
  unsigned int jresult ;
  ArPTZ *arg1 = (ArPTZ *) 0 ;
  int arg2 ;
  bool result;
  
  arg1 = (ArPTZ *)jarg1; 
  arg2 = (int)jarg2; 
  result = (bool)(arg1)->setAuxPort(arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_ArPTZ_getAuxPort(void * jarg1) {
  int jresult ;
  ArPTZ *arg1 = (ArPTZ *) 0 ;
  int result;
  
  arg1 = (ArPTZ *)jarg1; 
  result = (int)(arg1)->getAuxPort();
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_ArPTZ_readPacket(void * jarg1) {
  void * jresult ;
  ArPTZ *arg1 = (ArPTZ *) 0 ;
  ArBasePacket *result = 0 ;
  
  arg1 = (ArPTZ *)jarg1; 
  result = (ArBasePacket *)(arg1)->readPacket();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_ArPTZ_sendPacket(void * jarg1, void * jarg2) {
  unsigned int jresult ;
  ArPTZ *arg1 = (ArPTZ *) 0 ;
  ArBasePacket *arg2 = (ArBasePacket *) 0 ;
  bool result;
  
  arg1 = (ArPTZ *)jarg1; 
  arg2 = (ArBasePacket *)jarg2; 
  result = (bool)(arg1)->sendPacket(arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_ArPTZ_packetHandler(void * jarg1, void * jarg2) {
  unsigned int jresult ;
  ArPTZ *arg1 = (ArPTZ *) 0 ;
  ArBasePacket *arg2 = (ArBasePacket *) 0 ;
  bool result;
  
  arg1 = (ArPTZ *)jarg1; 
  arg2 = (ArBasePacket *)jarg2; 
  result = (bool)(arg1)->packetHandler(arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_ArPTZ_robotPacketHandler(void * jarg1, void * jarg2) {
  unsigned int jresult ;
  ArPTZ *arg1 = (ArPTZ *) 0 ;
  ArRobotPacket *arg2 = (ArRobotPacket *) 0 ;
  bool result;
  
  arg1 = (ArPTZ *)jarg1; 
  arg2 = (ArRobotPacket *)jarg2; 
  result = (bool)(arg1)->robotPacketHandler(arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_ArPTZ_connectHandler(void * jarg1) {
  ArPTZ *arg1 = (ArPTZ *) 0 ;
  
  arg1 = (ArPTZ *)jarg1; 
  (arg1)->connectHandler();
}


SWIGEXPORT void SWIGSTDCALL CSharp_ArPTZ_sensorInterpHandler(void * jarg1) {
  ArPTZ *arg1 = (ArPTZ *) 0 ;
  
  arg1 = (ArPTZ *)jarg1; 
  (arg1)->sensorInterpHandler();
}


SWIGEXPORT void * SWIGSTDCALL CSharp_ArPTZ_getRobot(void * jarg1) {
  void * jresult ;
  ArPTZ *arg1 = (ArPTZ *) 0 ;
  ArRobot *result = 0 ;
  
  arg1 = (ArPTZ *)jarg1; 
  result = (ArRobot *)(arg1)->getRobot();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_ArPTZ_setRobot(void * jarg1, void * jarg2) {
  ArPTZ *arg1 = (ArPTZ *) 0 ;
  ArRobot *arg2 = (ArRobot *) 0 ;
  
  arg1 = (ArPTZ *)jarg1; 
  arg2 = (ArRobot *)jarg2; 
  (arg1)->setRobot(arg2);
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_ArRangeDevice__SWIG_0(unsigned long jarg1, unsigned long jarg2, char * jarg3, unsigned int jarg4, int jarg5, int jarg6, double jarg7, unsigned int jarg8) {
  void * jresult ;
  size_t arg1 ;
  size_t arg2 ;
  char *arg3 = (char *) 0 ;
  unsigned int arg4 ;
  int arg5 ;
  int arg6 ;
  double arg7 ;
  bool arg8 ;
  ArRangeDevice *result = 0 ;
  
  arg1 = (size_t)jarg1; 
  arg2 = (size_t)jarg2; 
  arg3 = (char *)jarg3; 
  arg4 = (unsigned int)jarg4; 
  arg5 = (int)jarg5; 
  arg6 = (int)jarg6; 
  arg7 = (double)jarg7; 
  arg8 = jarg8 ? true : false; 
  result = (ArRangeDevice *)new ArRangeDevice(arg1,arg2,(char const *)arg3,arg4,arg5,arg6,arg7,arg8);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_ArRangeDevice__SWIG_1(unsigned long jarg1, unsigned long jarg2, char * jarg3, unsigned int jarg4, int jarg5, int jarg6, double jarg7) {
  void * jresult ;
  size_t arg1 ;
  size_t arg2 ;
  char *arg3 = (char *) 0 ;
  unsigned int arg4 ;
  int arg5 ;
  int arg6 ;
  double arg7 ;
  ArRangeDevice *result = 0 ;
  
  arg1 = (size_t)jarg1; 
  arg2 = (size_t)jarg2; 
  arg3 = (char *)jarg3; 
  arg4 = (unsigned int)jarg4; 
  arg5 = (int)jarg5; 
  arg6 = (int)jarg6; 
  arg7 = (double)jarg7; 
  result = (ArRangeDevice *)new ArRangeDevice(arg1,arg2,(char const *)arg3,arg4,arg5,arg6,arg7);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_ArRangeDevice__SWIG_2(unsigned long jarg1, unsigned long jarg2, char * jarg3, unsigned int jarg4, int jarg5, int jarg6) {
  void * jresult ;
  size_t arg1 ;
  size_t arg2 ;
  char *arg3 = (char *) 0 ;
  unsigned int arg4 ;
  int arg5 ;
  int arg6 ;
  ArRangeDevice *result = 0 ;
  
  arg1 = (size_t)jarg1; 
  arg2 = (size_t)jarg2; 
  arg3 = (char *)jarg3; 
  arg4 = (unsigned int)jarg4; 
  arg5 = (int)jarg5; 
  arg6 = (int)jarg6; 
  result = (ArRangeDevice *)new ArRangeDevice(arg1,arg2,(char const *)arg3,arg4,arg5,arg6);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_ArRangeDevice__SWIG_3(unsigned long jarg1, unsigned long jarg2, char * jarg3, unsigned int jarg4, int jarg5) {
  void * jresult ;
  size_t arg1 ;
  size_t arg2 ;
  char *arg3 = (char *) 0 ;
  unsigned int arg4 ;
  int arg5 ;
  ArRangeDevice *result = 0 ;
  
  arg1 = (size_t)jarg1; 
  arg2 = (size_t)jarg2; 
  arg3 = (char *)jarg3; 
  arg4 = (unsigned int)jarg4; 
  arg5 = (int)jarg5; 
  result = (ArRangeDevice *)new ArRangeDevice(arg1,arg2,(char const *)arg3,arg4,arg5);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_ArRangeDevice__SWIG_4(unsigned long jarg1, unsigned long jarg2, char * jarg3, unsigned int jarg4) {
  void * jresult ;
  size_t arg1 ;
  size_t arg2 ;
  char *arg3 = (char *) 0 ;
  unsigned int arg4 ;
  ArRangeDevice *result = 0 ;
  
  arg1 = (size_t)jarg1; 
  arg2 = (size_t)jarg2; 
  arg3 = (char *)jarg3; 
  arg4 = (unsigned int)jarg4; 
  result = (ArRangeDevice *)new ArRangeDevice(arg1,arg2,(char const *)arg3,arg4);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_ArRangeDevice(void * jarg1) {
  ArRangeDevice *arg1 = (ArRangeDevice *) 0 ;
  
  arg1 = (ArRangeDevice *)jarg1; 
  delete arg1;
}


SWIGEXPORT char * SWIGSTDCALL CSharp_ArRangeDevice_getName(void * jarg1) {
  char * jresult ;
  ArRangeDevice *arg1 = (ArRangeDevice *) 0 ;
  char *result = 0 ;
  
  arg1 = (ArRangeDevice *)jarg1; 
  result = (char *)((ArRangeDevice const *)arg1)->getName();
  jresult = SWIG_csharp_string_callback((const char *)result); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_ArRangeDevice_setRobot(void * jarg1, void * jarg2) {
  ArRangeDevice *arg1 = (ArRangeDevice *) 0 ;
  ArRobot *arg2 = (ArRobot *) 0 ;
  
  arg1 = (ArRangeDevice *)jarg1; 
  arg2 = (ArRobot *)jarg2; 
  (arg1)->setRobot(arg2);
}


SWIGEXPORT void * SWIGSTDCALL CSharp_ArRangeDevice_getRobot(void * jarg1) {
  void * jresult ;
  ArRangeDevice *arg1 = (ArRangeDevice *) 0 ;
  ArRobot *result = 0 ;
  
  arg1 = (ArRangeDevice *)jarg1; 
  result = (ArRobot *)(arg1)->getRobot();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_ArRangeDevice_setCurrentBufferSize(void * jarg1, unsigned long jarg2) {
  ArRangeDevice *arg1 = (ArRangeDevice *) 0 ;
  size_t arg2 ;
  
  arg1 = (ArRangeDevice *)jarg1; 
  arg2 = (size_t)jarg2; 
  (arg1)->setCurrentBufferSize(arg2);
}


SWIGEXPORT unsigned long SWIGSTDCALL CSharp_ArRangeDevice_getCurrentBufferSize(void * jarg1) {
  unsigned long jresult ;
  ArRangeDevice *arg1 = (ArRangeDevice *) 0 ;
  size_t result;
  
  arg1 = (ArRangeDevice *)jarg1; 
  result = ((ArRangeDevice const *)arg1)->getCurrentBufferSize();
  jresult = (unsigned long)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_ArRangeDevice_setCumulativeBufferSize(void * jarg1, unsigned long jarg2) {
  ArRangeDevice *arg1 = (ArRangeDevice *) 0 ;
  size_t arg2 ;
  
  arg1 = (ArRangeDevice *)jarg1; 
  arg2 = (size_t)jarg2; 
  (arg1)->setCumulativeBufferSize(arg2);
}


SWIGEXPORT unsigned long SWIGSTDCALL CSharp_ArRangeDevice_getCumulativeBufferSize(void * jarg1) {
  unsigned long jresult ;
  ArRangeDevice *arg1 = (ArRangeDevice *) 0 ;
  size_t result;
  
  arg1 = (ArRangeDevice *)jarg1; 
  result = ((ArRangeDevice const *)arg1)->getCumulativeBufferSize();
  jresult = (unsigned long)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_ArRangeDevice_addReading__SWIG_0(void * jarg1, double jarg2, double jarg3, void * jarg4) {
  ArRangeDevice *arg1 = (ArRangeDevice *) 0 ;
  double arg2 ;
  double arg3 ;
  bool *arg4 = (bool *) 0 ;
  
  arg1 = (ArRangeDevice *)jarg1; 
  arg2 = (double)jarg2; 
  arg3 = (double)jarg3; 
  arg4 = (bool *)jarg4; 
  (arg1)->addReading(arg2,arg3,arg4);
}


SWIGEXPORT void SWIGSTDCALL CSharp_ArRangeDevice_addReading__SWIG_1(void * jarg1, double jarg2, double jarg3) {
  ArRangeDevice *arg1 = (ArRangeDevice *) 0 ;
  double arg2 ;
  double arg3 ;
  
  arg1 = (ArRangeDevice *)jarg1; 
  arg2 = (double)jarg2; 
  arg3 = (double)jarg3; 
  (arg1)->addReading(arg2,arg3);
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_ArRangeDevice_isLocationDependent(void * jarg1) {
  unsigned int jresult ;
  ArRangeDevice *arg1 = (ArRangeDevice *) 0 ;
  bool result;
  
  arg1 = (ArRangeDevice *)jarg1; 
  result = (bool)(arg1)->isLocationDependent();
  jresult = result; 
  return jresult;
}


SWIGEXPORT double SWIGSTDCALL CSharp_ArRangeDevice_currentReadingPolar__SWIG_0(void * jarg1, double jarg2, double jarg3, void * jarg4) {
  double jresult ;
  ArRangeDevice *arg1 = (ArRangeDevice *) 0 ;
  double arg2 ;
  double arg3 ;
  double *arg4 = (double *) 0 ;
  double result;
  
  arg1 = (ArRangeDevice *)jarg1; 
  arg2 = (double)jarg2; 
  arg3 = (double)jarg3; 
  arg4 = (double *)jarg4; 
  result = (double)((ArRangeDevice const *)arg1)->currentReadingPolar(arg2,arg3,arg4);
  jresult = result; 
  return jresult;
}


SWIGEXPORT double SWIGSTDCALL CSharp_ArRangeDevice_currentReadingPolar__SWIG_1(void * jarg1, double jarg2, double jarg3) {
  double jresult ;
  ArRangeDevice *arg1 = (ArRangeDevice *) 0 ;
  double arg2 ;
  double arg3 ;
  double result;
  
  arg1 = (ArRangeDevice *)jarg1; 
  arg2 = (double)jarg2; 
  arg3 = (double)jarg3; 
  result = (double)((ArRangeDevice const *)arg1)->currentReadingPolar(arg2,arg3);
  jresult = result; 
  return jresult;
}


SWIGEXPORT double SWIGSTDCALL CSharp_ArRangeDevice_cumulativeReadingPolar__SWIG_0(void * jarg1, double jarg2, double jarg3, void * jarg4) {
  double jresult ;
  ArRangeDevice *arg1 = (ArRangeDevice *) 0 ;
  double arg2 ;
  double arg3 ;
  double *arg4 = (double *) 0 ;
  double result;
  
  arg1 = (ArRangeDevice *)jarg1; 
  arg2 = (double)jarg2; 
  arg3 = (double)jarg3; 
  arg4 = (double *)jarg4; 
  result = (double)((ArRangeDevice const *)arg1)->cumulativeReadingPolar(arg2,arg3,arg4);
  jresult = result; 
  return jresult;
}


SWIGEXPORT double SWIGSTDCALL CSharp_ArRangeDevice_cumulativeReadingPolar__SWIG_1(void * jarg1, double jarg2, double jarg3) {
  double jresult ;
  ArRangeDevice *arg1 = (ArRangeDevice *) 0 ;
  double arg2 ;
  double arg3 ;
  double result;
  
  arg1 = (ArRangeDevice *)jarg1; 
  arg2 = (double)jarg2; 
  arg3 = (double)jarg3; 
  result = (double)((ArRangeDevice const *)arg1)->cumulativeReadingPolar(arg2,arg3);
  jresult = result; 
  return jresult;
}


SWIGEXPORT double SWIGSTDCALL CSharp_ArRangeDevice_currentReadingBox__SWIG_0(void * jarg1, double jarg2, double jarg3, double jarg4, double jarg5, void * jarg6) {
  double jresult ;
  ArRangeDevice *arg1 = (ArRangeDevice *) 0 ;
  double arg2 ;
  double arg3 ;
  double arg4 ;
  double arg5 ;
  ArPose *arg6 = (ArPose *) 0 ;
  double result;
  
  arg1 = (ArRangeDevice *)jarg1; 
  arg2 = (double)jarg2; 
  arg3 = (double)jarg3; 
  arg4 = (double)jarg4; 
  arg5 = (double)jarg5; 
  arg6 = (ArPose *)jarg6; 
  result = (double)((ArRangeDevice const *)arg1)->currentReadingBox(arg2,arg3,arg4,arg5,arg6);
  jresult = result; 
  return jresult;
}


SWIGEXPORT double SWIGSTDCALL CSharp_ArRangeDevice_currentReadingBox__SWIG_1(void * jarg1, double jarg2, double jarg3, double jarg4, double jarg5) {
  double jresult ;
  ArRangeDevice *arg1 = (ArRangeDevice *) 0 ;
  double arg2 ;
  double arg3 ;
  double arg4 ;
  double arg5 ;
  double result;
  
  arg1 = (ArRangeDevice *)jarg1; 
  arg2 = (double)jarg2; 
  arg3 = (double)jarg3; 
  arg4 = (double)jarg4; 
  arg5 = (double)jarg5; 
  result = (double)((ArRangeDevice const *)arg1)->currentReadingBox(arg2,arg3,arg4,arg5);
  jresult = result; 
  return jresult;
}


SWIGEXPORT double SWIGSTDCALL CSharp_ArRangeDevice_cumulativeReadingBox__SWIG_0(void * jarg1, double jarg2, double jarg3, double jarg4, double jarg5, void * jarg6) {
  double jresult ;
  ArRangeDevice *arg1 = (ArRangeDevice *) 0 ;
  double arg2 ;
  double arg3 ;
  double arg4 ;
  double arg5 ;
  ArPose *arg6 = (ArPose *) 0 ;
  double result;
  
  arg1 = (ArRangeDevice *)jarg1; 
  arg2 = (double)jarg2; 
  arg3 = (double)jarg3; 
  arg4 = (double)jarg4; 
  arg5 = (double)jarg5; 
  arg6 = (ArPose *)jarg6; 
  result = (double)((ArRangeDevice const *)arg1)->cumulativeReadingBox(arg2,arg3,arg4,arg5,arg6);
  jresult = result; 
  return jresult;
}


SWIGEXPORT double SWIGSTDCALL CSharp_ArRangeDevice_cumulativeReadingBox__SWIG_1(void * jarg1, double jarg2, double jarg3, double jarg4, double jarg5) {
  double jresult ;
  ArRangeDevice *arg1 = (ArRangeDevice *) 0 ;
  double arg2 ;
  double arg3 ;
  double arg4 ;
  double arg5 ;
  double result;
  
  arg1 = (ArRangeDevice *)jarg1; 
  arg2 = (double)jarg2; 
  arg3 = (double)jarg3; 
  arg4 = (double)jarg4; 
  arg5 = (double)jarg5; 
  result = (double)((ArRangeDevice const *)arg1)->cumulativeReadingBox(arg2,arg3,arg4,arg5);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_ArRangeDevice_getCurrentRangeBuffer(void * jarg1) {
  void * jresult ;
  ArRangeDevice *arg1 = (ArRangeDevice *) 0 ;
  ArRangeBuffer *result = 0 ;
  
  arg1 = (ArRangeDevice *)jarg1; 
  result = (ArRangeBuffer *)(arg1)->getCurrentRangeBuffer();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_ArRangeDevice_getCumulativeRangeBuffer(void * jarg1) {
  void * jresult ;
  ArRangeDevice *arg1 = (ArRangeDevice *) 0 ;
  ArRangeBuffer *result = 0 ;
  
  arg1 = (ArRangeDevice *)jarg1; 
  result = (ArRangeBuffer *)(arg1)->getCumulativeRangeBuffer();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_ArRangeDevice_getCurrentBuffer(void * jarg1) {
  void * jresult ;
  ArRangeDevice *arg1 = (ArRangeDevice *) 0 ;
  std::list< ArPoseWithTime * > *result = 0 ;
  
  arg1 = (ArRangeDevice *)jarg1; 
  result = (std::list< ArPoseWithTime * > *)(arg1)->getCurrentBuffer();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_ArRangeDevice_getCurrentBufferAsVector(void * jarg1) {
  void * jresult ;
  ArRangeDevice *arg1 = (ArRangeDevice *) 0 ;
  std::vector< ArPoseWithTime > *result = 0 ;
  
  arg1 = (ArRangeDevice *)jarg1; 
  result = (std::vector< ArPoseWithTime > *)(arg1)->getCurrentBufferAsVector();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_ArRangeDevice_getCumulativeBuffer(void * jarg1) {
  void * jresult ;
  ArRangeDevice *arg1 = (ArRangeDevice *) 0 ;
  std::list< ArPoseWithTime * > *result = 0 ;
  
  arg1 = (ArRangeDevice *)jarg1; 
  result = (std::list< ArPoseWithTime * > *)(arg1)->getCumulativeBuffer();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_ArRangeDevice_getCumulativeBufferAsVector(void * jarg1) {
  void * jresult ;
  ArRangeDevice *arg1 = (ArRangeDevice *) 0 ;
  std::vector< ArPoseWithTime > *result = 0 ;
  
  arg1 = (ArRangeDevice *)jarg1; 
  result = (std::vector< ArPoseWithTime > *)(arg1)->getCumulativeBufferAsVector();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_ArRangeDevice_getRawReadings(void * jarg1) {
  void * jresult ;
  ArRangeDevice *arg1 = (ArRangeDevice *) 0 ;
  std::list< ArSensorReading * > *result = 0 ;
  
  arg1 = (ArRangeDevice *)jarg1; 
  result = (std::list< ArSensorReading * > *)((ArRangeDevice const *)arg1)->getRawReadings();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_ArRangeDevice_getRawReadingsAsVector(void * jarg1) {
  void * jresult ;
  ArRangeDevice *arg1 = (ArRangeDevice *) 0 ;
  std::vector< ArSensorReading > *result = 0 ;
  
  arg1 = (ArRangeDevice *)jarg1; 
  result = (std::vector< ArSensorReading > *)(arg1)->getRawReadingsAsVector();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_ArRangeDevice_getAdjustedRawReadings(void * jarg1) {
  void * jresult ;
  ArRangeDevice *arg1 = (ArRangeDevice *) 0 ;
  std::list< ArSensorReading * > *result = 0 ;
  
  arg1 = (ArRangeDevice *)jarg1; 
  result = (std::list< ArSensorReading * > *)((ArRangeDevice const *)arg1)->getAdjustedRawReadings();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_ArRangeDevice_getAdjustedRawReadingsAsVector(void * jarg1) {
  void * jresult ;
  ArRangeDevice *arg1 = (ArRangeDevice *) 0 ;
  std::vector< ArSensorReading > *result = 0 ;
  
  arg1 = (ArRangeDevice *)jarg1; 
  result = (std::vector< ArSensorReading > *)(arg1)->getAdjustedRawReadingsAsVector();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_ArRangeDevice_setMaxSecondsToKeepCurrent(void * jarg1, int jarg2) {
  ArRangeDevice *arg1 = (ArRangeDevice *) 0 ;
  int arg2 ;
  
  arg1 = (ArRangeDevice *)jarg1; 
  arg2 = (int)jarg2; 
  (arg1)->setMaxSecondsToKeepCurrent(arg2);
}


SWIGEXPORT int SWIGSTDCALL CSharp_ArRangeDevice_getMaxSecondsToKeepCurrent(void * jarg1) {
  int jresult ;
  ArRangeDevice *arg1 = (ArRangeDevice *) 0 ;
  int result;
  
  arg1 = (ArRangeDevice *)jarg1; 
  result = (int)(arg1)->getMaxSecondsToKeepCurrent();
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_ArRangeDevice_setMinDistBetweenCurrent(void * jarg1, double jarg2) {
  ArRangeDevice *arg1 = (ArRangeDevice *) 0 ;
  double arg2 ;
  
  arg1 = (ArRangeDevice *)jarg1; 
  arg2 = (double)jarg2; 
  (arg1)->setMinDistBetweenCurrent(arg2);
}


SWIGEXPORT double SWIGSTDCALL CSharp_ArRangeDevice_getMinDistBetweenCurrent(void * jarg1) {
  double jresult ;
  ArRangeDevice *arg1 = (ArRangeDevice *) 0 ;
  double result;
  
  arg1 = (ArRangeDevice *)jarg1; 
  result = (double)(arg1)->getMinDistBetweenCurrent();
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_ArRangeDevice_setMaxSecondsToKeepCumulative(void * jarg1, int jarg2) {
  ArRangeDevice *arg1 = (ArRangeDevice *) 0 ;
  int arg2 ;
  
  arg1 = (ArRangeDevice *)jarg1; 
  arg2 = (int)jarg2; 
  (arg1)->setMaxSecondsToKeepCumulative(arg2);
}


SWIGEXPORT int SWIGSTDCALL CSharp_ArRangeDevice_getMaxSecondsToKeepCumulative(void * jarg1) {
  int jresult ;
  ArRangeDevice *arg1 = (ArRangeDevice *) 0 ;
  int result;
  
  arg1 = (ArRangeDevice *)jarg1; 
  result = (int)(arg1)->getMaxSecondsToKeepCumulative();
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_ArRangeDevice_setMaxDistToKeepCumulative(void * jarg1, double jarg2) {
  ArRangeDevice *arg1 = (ArRangeDevice *) 0 ;
  double arg2 ;
  
  arg1 = (ArRangeDevice *)jarg1; 
  arg2 = (double)jarg2; 
  (arg1)->setMaxDistToKeepCumulative(arg2);
}


SWIGEXPORT double SWIGSTDCALL CSharp_ArRangeDevice_getMaxDistToKeepCumulative(void * jarg1) {
  double jresult ;
  ArRangeDevice *arg1 = (ArRangeDevice *) 0 ;
  double result;
  
  arg1 = (ArRangeDevice *)jarg1; 
  result = (double)(arg1)->getMaxDistToKeepCumulative();
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_ArRangeDevice_setMinDistBetweenCumulative(void * jarg1, double jarg2) {
  ArRangeDevice *arg1 = (ArRangeDevice *) 0 ;
  double arg2 ;
  
  arg1 = (ArRangeDevice *)jarg1; 
  arg2 = (double)jarg2; 
  (arg1)->setMinDistBetweenCumulative(arg2);
}


SWIGEXPORT double SWIGSTDCALL CSharp_ArRangeDevice_getMinDistBetweenCumulative(void * jarg1) {
  double jresult ;
  ArRangeDevice *arg1 = (ArRangeDevice *) 0 ;
  double result;
  
  arg1 = (ArRangeDevice *)jarg1; 
  result = (double)(arg1)->getMinDistBetweenCumulative();
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_ArRangeDevice_setMaxInsertDistCumulative(void * jarg1, double jarg2) {
  ArRangeDevice *arg1 = (ArRangeDevice *) 0 ;
  double arg2 ;
  
  arg1 = (ArRangeDevice *)jarg1; 
  arg2 = (double)jarg2; 
  (arg1)->setMaxInsertDistCumulative(arg2);
}


SWIGEXPORT double SWIGSTDCALL CSharp_ArRangeDevice_getMaxInsertDistCumulative(void * jarg1) {
  double jresult ;
  ArRangeDevice *arg1 = (ArRangeDevice *) 0 ;
  double result;
  
  arg1 = (ArRangeDevice *)jarg1; 
  result = (double)(arg1)->getMaxInsertDistCumulative();
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_ArRangeDevice_clearCurrentReadings(void * jarg1) {
  ArRangeDevice *arg1 = (ArRangeDevice *) 0 ;
  
  arg1 = (ArRangeDevice *)jarg1; 
  (arg1)->clearCurrentReadings();
}


SWIGEXPORT void SWIGSTDCALL CSharp_ArRangeDevice_clearCumulativeReadings(void * jarg1) {
  ArRangeDevice *arg1 = (ArRangeDevice *) 0 ;
  
  arg1 = (ArRangeDevice *)jarg1; 
  (arg1)->clearCumulativeReadings();
}


SWIGEXPORT void SWIGSTDCALL CSharp_ArRangeDevice_clearCumulativeOlderThan(void * jarg1, int jarg2) {
  ArRangeDevice *arg1 = (ArRangeDevice *) 0 ;
  int arg2 ;
  
  arg1 = (ArRangeDevice *)jarg1; 
  arg2 = (int)jarg2; 
  (arg1)->clearCumulativeOlderThan(arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_ArRangeDevice_clearCumulativeOlderThanSeconds(void * jarg1, int jarg2) {
  ArRangeDevice *arg1 = (ArRangeDevice *) 0 ;
  int arg2 ;
  
  arg1 = (ArRangeDevice *)jarg1; 
  arg2 = (int)jarg2; 
  (arg1)->clearCumulativeOlderThanSeconds(arg2);
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_ArRangeDevice_getMaxRange(void * jarg1) {
  unsigned int jresult ;
  ArRangeDevice *arg1 = (ArRangeDevice *) 0 ;
  unsigned int result;
  
  arg1 = (ArRangeDevice *)jarg1; 
  result = (unsigned int)((ArRangeDevice const *)arg1)->getMaxRange();
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_ArRangeDevice_setMaxRange(void * jarg1, unsigned int jarg2) {
  ArRangeDevice *arg1 = (ArRangeDevice *) 0 ;
  unsigned int arg2 ;
  
  arg1 = (ArRangeDevice *)jarg1; 
  arg2 = (unsigned int)jarg2; 
  (arg1)->setMaxRange(arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_ArRangeDevice_applyTransform__SWIG_0(void * jarg1, void * jarg2, unsigned int jarg3) {
  ArRangeDevice *arg1 = (ArRangeDevice *) 0 ;
  ArTransform arg2 ;
  bool arg3 ;
  ArTransform *argp2 ;
  
  arg1 = (ArRangeDevice *)jarg1; 
  argp2 = (ArTransform *)jarg2; 
  if (!argp2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Attempt to dereference null ArTransform", 0);
    return ;
  }
  arg2 = *argp2; 
  arg3 = jarg3 ? true : false; 
  (arg1)->applyTransform(arg2,arg3);
}


SWIGEXPORT void SWIGSTDCALL CSharp_ArRangeDevice_applyTransform__SWIG_1(void * jarg1, void * jarg2) {
  ArRangeDevice *arg1 = (ArRangeDevice *) 0 ;
  ArTransform arg2 ;
  ArTransform *argp2 ;
  
  arg1 = (ArRangeDevice *)jarg1; 
  argp2 = (ArTransform *)jarg2; 
  if (!argp2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Attempt to dereference null ArTransform", 0);
    return ;
  }
  arg2 = *argp2; 
  (arg1)->applyTransform(arg2);
}


SWIGEXPORT void * SWIGSTDCALL CSharp_ArRangeDevice_getCurrentDrawingData(void * jarg1) {
  void * jresult ;
  ArRangeDevice *arg1 = (ArRangeDevice *) 0 ;
  ArDrawingData *result = 0 ;
  
  arg1 = (ArRangeDevice *)jarg1; 
  result = (ArDrawingData *)(arg1)->getCurrentDrawingData();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_ArRangeDevice_getCumulativeDrawingData(void * jarg1) {
  void * jresult ;
  ArRangeDevice *arg1 = (ArRangeDevice *) 0 ;
  ArDrawingData *result = 0 ;
  
  arg1 = (ArRangeDevice *)jarg1; 
  result = (ArDrawingData *)(arg1)->getCumulativeDrawingData();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_ArRangeDevice_setCurrentDrawingData(void * jarg1, void * jarg2, unsigned int jarg3) {
  ArRangeDevice *arg1 = (ArRangeDevice *) 0 ;
  ArDrawingData *arg2 = (ArDrawingData *) 0 ;
  bool arg3 ;
  
  arg1 = (ArRangeDevice *)jarg1; 
  arg2 = (ArDrawingData *)jarg2; 
  arg3 = jarg3 ? true : false; 
  (arg1)->setCurrentDrawingData(arg2,arg3);
}


SWIGEXPORT void SWIGSTDCALL CSharp_ArRangeDevice_setCumulativeDrawingData(void * jarg1, void * jarg2, unsigned int jarg3) {
  ArRangeDevice *arg1 = (ArRangeDevice *) 0 ;
  ArDrawingData *arg2 = (ArDrawingData *) 0 ;
  bool arg3 ;
  
  arg1 = (ArRangeDevice *)jarg1; 
  arg2 = (ArDrawingData *)jarg2; 
  arg3 = jarg3 ? true : false; 
  (arg1)->setCumulativeDrawingData(arg2,arg3);
}


SWIGEXPORT int SWIGSTDCALL CSharp_ArRangeDevice_lockDevice(void * jarg1) {
  int jresult ;
  ArRangeDevice *arg1 = (ArRangeDevice *) 0 ;
  int result;
  
  arg1 = (ArRangeDevice *)jarg1; 
  result = (int)(arg1)->lockDevice();
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_ArRangeDevice_tryLockDevice(void * jarg1) {
  int jresult ;
  ArRangeDevice *arg1 = (ArRangeDevice *) 0 ;
  int result;
  
  arg1 = (ArRangeDevice *)jarg1; 
  result = (int)(arg1)->tryLockDevice();
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_ArRangeDevice_unlockDevice(void * jarg1) {
  int jresult ;
  ArRangeDevice *arg1 = (ArRangeDevice *) 0 ;
  int result;
  
  arg1 = (ArRangeDevice *)jarg1; 
  result = (int)(arg1)->unlockDevice();
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_ArRangeDevice_filterCallback(void * jarg1) {
  ArRangeDevice *arg1 = (ArRangeDevice *) 0 ;
  
  arg1 = (ArRangeDevice *)jarg1; 
  (arg1)->filterCallback();
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_ArRangeDeviceThreaded(void * jarg1) {
  ArRangeDeviceThreaded *arg1 = (ArRangeDeviceThreaded *) 0 ;
  
  arg1 = (ArRangeDeviceThreaded *)jarg1; 
  delete arg1;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_ArRangeDeviceThreaded_runThread(void * jarg1, void * jarg2) {
  void * jresult ;
  ArRangeDeviceThreaded *arg1 = (ArRangeDeviceThreaded *) 0 ;
  void *arg2 = (void *) 0 ;
  void *result = 0 ;
  
  arg1 = (ArRangeDeviceThreaded *)jarg1; 
  arg2 = (void *)jarg2; 
  result = (void *)(arg1)->runThread(arg2);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_ArRangeDeviceThreaded_run(void * jarg1) {
  ArRangeDeviceThreaded *arg1 = (ArRangeDeviceThreaded *) 0 ;
  
  arg1 = (ArRangeDeviceThreaded *)jarg1; 
  (arg1)->run();
}


SWIGEXPORT void SWIGSTDCALL CSharp_ArRangeDeviceThreaded_runAsync(void * jarg1) {
  ArRangeDeviceThreaded *arg1 = (ArRangeDeviceThreaded *) 0 ;
  
  arg1 = (ArRangeDeviceThreaded *)jarg1; 
  (arg1)->runAsync();
}


SWIGEXPORT void SWIGSTDCALL CSharp_ArRangeDeviceThreaded_stopRunning(void * jarg1) {
  ArRangeDeviceThreaded *arg1 = (ArRangeDeviceThreaded *) 0 ;
  
  arg1 = (ArRangeDeviceThreaded *)jarg1; 
  (arg1)->stopRunning();
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_ArRangeDeviceThreaded_getRunning(void * jarg1) {
  unsigned int jresult ;
  ArRangeDeviceThreaded *arg1 = (ArRangeDeviceThreaded *) 0 ;
  bool result;
  
  arg1 = (ArRangeDeviceThreaded *)jarg1; 
  result = (bool)(arg1)->getRunning();
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_ArRangeDeviceThreaded_getRunningWithLock(void * jarg1) {
  unsigned int jresult ;
  ArRangeDeviceThreaded *arg1 = (ArRangeDeviceThreaded *) 0 ;
  bool result;
  
  arg1 = (ArRangeDeviceThreaded *)jarg1; 
  result = (bool)(arg1)->getRunningWithLock();
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_ArRangeDeviceThreaded_lockDevice(void * jarg1) {
  int jresult ;
  ArRangeDeviceThreaded *arg1 = (ArRangeDeviceThreaded *) 0 ;
  int result;
  
  arg1 = (ArRangeDeviceThreaded *)jarg1; 
  result = (int)(arg1)->lockDevice();
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_ArRangeDeviceThreaded_tryLockDevice(void * jarg1) {
  int jresult ;
  ArRangeDeviceThreaded *arg1 = (ArRangeDeviceThreaded *) 0 ;
  int result;
  
  arg1 = (ArRangeDeviceThreaded *)jarg1; 
  result = (int)(arg1)->tryLockDevice();
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_ArRangeDeviceThreaded_unlockDevice(void * jarg1) {
  int jresult ;
  ArRangeDeviceThreaded *arg1 = (ArRangeDeviceThreaded *) 0 ;
  int result;
  
  arg1 = (ArRangeDeviceThreaded *)jarg1; 
  result = (int)(arg1)->unlockDevice();
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_ArLaser(void * jarg1) {
  ArLaser *arg1 = (ArLaser *) 0 ;
  
  arg1 = (ArLaser *)jarg1; 
  delete arg1;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_ArLaser_blockingConnect(void * jarg1) {
  unsigned int jresult ;
  ArLaser *arg1 = (ArLaser *) 0 ;
  bool result;
  
  arg1 = (ArLaser *)jarg1; 
  result = (bool)(arg1)->blockingConnect();
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_ArLaser_asyncConnect(void * jarg1) {
  unsigned int jresult ;
  ArLaser *arg1 = (ArLaser *) 0 ;
  bool result;
  
  arg1 = (ArLaser *)jarg1; 
  result = (bool)(arg1)->asyncConnect();
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_ArLaser_disconnect(void * jarg1) {
  unsigned int jresult ;
  ArLaser *arg1 = (ArLaser *) 0 ;
  bool result;
  
  arg1 = (ArLaser *)jarg1; 
  result = (bool)(arg1)->disconnect();
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_ArLaser_isConnected(void * jarg1) {
  unsigned int jresult ;
  ArLaser *arg1 = (ArLaser *) 0 ;
  bool result;
  
  arg1 = (ArLaser *)jarg1; 
  result = (bool)(arg1)->isConnected();
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_ArLaser_isTryingToConnect(void * jarg1) {
  unsigned int jresult ;
  ArLaser *arg1 = (ArLaser *) 0 ;
  bool result;
  
  arg1 = (ArLaser *)jarg1; 
  result = (bool)(arg1)->isTryingToConnect();
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_ArLaser_setConnectionTimeoutSeconds(void * jarg1, double jarg2) {
  ArLaser *arg1 = (ArLaser *) 0 ;
  double arg2 ;
  
  arg1 = (ArLaser *)jarg1; 
  arg2 = (double)jarg2; 
  (arg1)->setConnectionTimeoutSeconds(arg2);
}


SWIGEXPORT double SWIGSTDCALL CSharp_ArLaser_getConnectionTimeoutSeconds(void * jarg1) {
  double jresult ;
  ArLaser *arg1 = (ArLaser *) 0 ;
  double result;
  
  arg1 = (ArLaser *)jarg1; 
  result = (double)(arg1)->getConnectionTimeoutSeconds();
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_ArLaser_getLastReadingTime(void * jarg1) {
  void * jresult ;
  ArLaser *arg1 = (ArLaser *) 0 ;
  ArTime result;
  
  arg1 = (ArLaser *)jarg1; 
  result = (arg1)->getLastReadingTime();
  jresult = new ArTime((const ArTime &)result); 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_ArLaser_getReadingCount(void * jarg1) {
  int jresult ;
  ArLaser *arg1 = (ArLaser *) 0 ;
  int result;
  
  arg1 = (ArLaser *)jarg1; 
  result = (int)(arg1)->getReadingCount();
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_ArLaser_setDeviceConnection(void * jarg1, void * jarg2) {
  ArLaser *arg1 = (ArLaser *) 0 ;
  ArDeviceConnection *arg2 = (ArDeviceConnection *) 0 ;
  
  arg1 = (ArLaser *)jarg1; 
  arg2 = (ArDeviceConnection *)jarg2; 
  (arg1)->setDeviceConnection(arg2);
}


SWIGEXPORT void * SWIGSTDCALL CSharp_ArLaser_getDeviceConnection(void * jarg1) {
  void * jresult ;
  ArLaser *arg1 = (ArLaser *) 0 ;
  ArDeviceConnection *result = 0 ;
  
  arg1 = (ArLaser *)jarg1; 
  result = (ArDeviceConnection *)(arg1)->getDeviceConnection();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_ArLaser_setSensorPosition__SWIG_0(void * jarg1, double jarg2, double jarg3, double jarg4, double jarg5) {
  ArLaser *arg1 = (ArLaser *) 0 ;
  double arg2 ;
  double arg3 ;
  double arg4 ;
  double arg5 ;
  
  arg1 = (ArLaser *)jarg1; 
  arg2 = (double)jarg2; 
  arg3 = (double)jarg3; 
  arg4 = (double)jarg4; 
  arg5 = (double)jarg5; 
  (arg1)->setSensorPosition(arg2,arg3,arg4,arg5);
}


SWIGEXPORT void SWIGSTDCALL CSharp_ArLaser_setSensorPosition__SWIG_1(void * jarg1, double jarg2, double jarg3, double jarg4) {
  ArLaser *arg1 = (ArLaser *) 0 ;
  double arg2 ;
  double arg3 ;
  double arg4 ;
  
  arg1 = (ArLaser *)jarg1; 
  arg2 = (double)jarg2; 
  arg3 = (double)jarg3; 
  arg4 = (double)jarg4; 
  (arg1)->setSensorPosition(arg2,arg3,arg4);
}


SWIGEXPORT void SWIGSTDCALL CSharp_ArLaser_setSensorPosition__SWIG_2(void * jarg1, void * jarg2, double jarg3) {
  ArLaser *arg1 = (ArLaser *) 0 ;
  ArPose arg2 ;
  double arg3 ;
  ArPose *argp2 ;
  
  arg1 = (ArLaser *)jarg1; 
  argp2 = (ArPose *)jarg2; 
  if (!argp2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Attempt to dereference null ArPose", 0);
    return ;
  }
  arg2 = *argp2; 
  arg3 = (double)jarg3; 
  (arg1)->setSensorPosition(arg2,arg3);
}


SWIGEXPORT void SWIGSTDCALL CSharp_ArLaser_setSensorPosition__SWIG_3(void * jarg1, void * jarg2) {
  ArLaser *arg1 = (ArLaser *) 0 ;
  ArPose arg2 ;
  ArPose *argp2 ;
  
  arg1 = (ArLaser *)jarg1; 
  argp2 = (ArPose *)jarg2; 
  if (!argp2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Attempt to dereference null ArPose", 0);
    return ;
  }
  arg2 = *argp2; 
  (arg1)->setSensorPosition(arg2);
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_ArLaser_hasSensorPosition(void * jarg1) {
  unsigned int jresult ;
  ArLaser *arg1 = (ArLaser *) 0 ;
  bool result;
  
  arg1 = (ArLaser *)jarg1; 
  result = (bool)(arg1)->hasSensorPosition();
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_ArLaser_getSensorPosition(void * jarg1) {
  void * jresult ;
  ArLaser *arg1 = (ArLaser *) 0 ;
  ArPose result;
  
  arg1 = (ArLaser *)jarg1; 
  result = (arg1)->getSensorPosition();
  jresult = new ArPose((const ArPose &)result); 
  return jresult;
}


SWIGEXPORT double SWIGSTDCALL CSharp_ArLaser_getSensorPositionX(void * jarg1) {
  double jresult ;
  ArLaser *arg1 = (ArLaser *) 0 ;
  double result;
  
  arg1 = (ArLaser *)jarg1; 
  result = (double)(arg1)->getSensorPositionX();
  jresult = result; 
  return jresult;
}


SWIGEXPORT double SWIGSTDCALL CSharp_ArLaser_getSensorPositionY(void * jarg1) {
  double jresult ;
  ArLaser *arg1 = (ArLaser *) 0 ;
  double result;
  
  arg1 = (ArLaser *)jarg1; 
  result = (double)(arg1)->getSensorPositionY();
  jresult = result; 
  return jresult;
}


SWIGEXPORT double SWIGSTDCALL CSharp_ArLaser_getSensorPositionZ(void * jarg1) {
  double jresult ;
  ArLaser *arg1 = (ArLaser *) 0 ;
  double result;
  
  arg1 = (ArLaser *)jarg1; 
  result = (double)(arg1)->getSensorPositionZ();
  jresult = result; 
  return jresult;
}


SWIGEXPORT double SWIGSTDCALL CSharp_ArLaser_getSensorPositionTh(void * jarg1) {
  double jresult ;
  ArLaser *arg1 = (ArLaser *) 0 ;
  double result;
  
  arg1 = (ArLaser *)jarg1; 
  result = (double)(arg1)->getSensorPositionTh();
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_ArLaser_getLaserNumber(void * jarg1) {
  int jresult ;
  ArLaser *arg1 = (ArLaser *) 0 ;
  int result;
  
  arg1 = (ArLaser *)jarg1; 
  result = (int)(arg1)->getLaserNumber();
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_ArLaser_setInfoLogLevel(void * jarg1, int jarg2) {
  ArLaser *arg1 = (ArLaser *) 0 ;
  ArLog::LogLevel arg2 ;
  
  arg1 = (ArLaser *)jarg1; 
  arg2 = (ArLog::LogLevel)jarg2; 
  (arg1)->setInfoLogLevel(arg2);
}


SWIGEXPORT int SWIGSTDCALL CSharp_ArLaser_getInfoLogLevel(void * jarg1) {
  int jresult ;
  ArLaser *arg1 = (ArLaser *) 0 ;
  ArLog::LogLevel result;
  
  arg1 = (ArLaser *)jarg1; 
  result = (ArLog::LogLevel)(arg1)->getInfoLogLevel();
  jresult = (int)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_ArLaser_setCumulativeCleanDist(void * jarg1, double jarg2) {
  ArLaser *arg1 = (ArLaser *) 0 ;
  double arg2 ;
  
  arg1 = (ArLaser *)jarg1; 
  arg2 = (double)jarg2; 
  (arg1)->setCumulativeCleanDist(arg2);
}


SWIGEXPORT double SWIGSTDCALL CSharp_ArLaser_getCumulativeCleanDist(void * jarg1) {
  double jresult ;
  ArLaser *arg1 = (ArLaser *) 0 ;
  double result;
  
  arg1 = (ArLaser *)jarg1; 
  result = (double)(arg1)->getCumulativeCleanDist();
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_ArLaser_setCumulativeCleanInterval(void * jarg1, int jarg2) {
  ArLaser *arg1 = (ArLaser *) 0 ;
  int arg2 ;
  
  arg1 = (ArLaser *)jarg1; 
  arg2 = (int)jarg2; 
  (arg1)->setCumulativeCleanInterval(arg2);
}


SWIGEXPORT int SWIGSTDCALL CSharp_ArLaser_getCumulativeCleanInterval(void * jarg1) {
  int jresult ;
  ArLaser *arg1 = (ArLaser *) 0 ;
  int result;
  
  arg1 = (ArLaser *)jarg1; 
  result = (int)(arg1)->getCumulativeCleanInterval();
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_ArLaser_setCumulativeCleanOffset(void * jarg1, int jarg2) {
  ArLaser *arg1 = (ArLaser *) 0 ;
  int arg2 ;
  
  arg1 = (ArLaser *)jarg1; 
  arg2 = (int)jarg2; 
  (arg1)->setCumulativeCleanOffset(arg2);
}


SWIGEXPORT int SWIGSTDCALL CSharp_ArLaser_getCumulativeCleanOffset(void * jarg1) {
  int jresult ;
  ArLaser *arg1 = (ArLaser *) 0 ;
  int result;
  
  arg1 = (ArLaser *)jarg1; 
  result = (int)(arg1)->getCumulativeCleanOffset();
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_ArLaser_resetLastCumulativeCleanTime(void * jarg1) {
  ArLaser *arg1 = (ArLaser *) 0 ;
  
  arg1 = (ArLaser *)jarg1; 
  (arg1)->resetLastCumulativeCleanTime();
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_ArLaser_addIgnoreReadings(void * jarg1, char * jarg2) {
  unsigned int jresult ;
  ArLaser *arg1 = (ArLaser *) 0 ;
  char *arg2 = (char *) 0 ;
  bool result;
  
  arg1 = (ArLaser *)jarg1; 
  arg2 = (char *)jarg2; 
  result = (bool)(arg1)->addIgnoreReadings((char const *)arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_ArLaser_addIgnoreReading(void * jarg1, double jarg2) {
  ArLaser *arg1 = (ArLaser *) 0 ;
  double arg2 ;
  
  arg1 = (ArLaser *)jarg1; 
  arg2 = (double)jarg2; 
  (arg1)->addIgnoreReading(arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_ArLaser_clearIgnoreReadings(void * jarg1) {
  ArLaser *arg1 = (ArLaser *) 0 ;
  
  arg1 = (ArLaser *)jarg1; 
  (arg1)->clearIgnoreReadings();
}


SWIGEXPORT void * SWIGSTDCALL CSharp_ArLaser_getIgnoreReadings(void * jarg1) {
  void * jresult ;
  ArLaser *arg1 = (ArLaser *) 0 ;
  std::set< int > *result = 0 ;
  
  arg1 = (ArLaser *)jarg1; 
  result = (std::set< int > *)((ArLaser const *)arg1)->getIgnoreReadings();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_ArLaser_getFlipped(void * jarg1) {
  unsigned int jresult ;
  ArLaser *arg1 = (ArLaser *) 0 ;
  bool result;
  
  arg1 = (ArLaser *)jarg1; 
  result = (bool)(arg1)->getFlipped();
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_ArLaser_setFlipped(void * jarg1, unsigned int jarg2) {
  unsigned int jresult ;
  ArLaser *arg1 = (ArLaser *) 0 ;
  bool arg2 ;
  bool result;
  
  arg1 = (ArLaser *)jarg1; 
  arg2 = jarg2 ? true : false; 
  result = (bool)(arg1)->setFlipped(arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_ArLaser_getDefaultTcpPort(void * jarg1) {
  int jresult ;
  ArLaser *arg1 = (ArLaser *) 0 ;
  int result;
  
  arg1 = (ArLaser *)jarg1; 
  result = (int)(arg1)->getDefaultTcpPort();
  jresult = result; 
  return jresult;
}


SWIGEXPORT char * SWIGSTDCALL CSharp_ArLaser_getDefaultPortType(void * jarg1) {
  char * jresult ;
  ArLaser *arg1 = (ArLaser *) 0 ;
  char *result = 0 ;
  
  arg1 = (ArLaser *)jarg1; 
  result = (char *)(arg1)->getDefaultPortType();
  jresult = SWIG_csharp_string_callback((const char *)result); 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_ArLaser_canSetDegrees(void * jarg1) {
  unsigned int jresult ;
  ArLaser *arg1 = (ArLaser *) 0 ;
  bool result;
  
  arg1 = (ArLaser *)jarg1; 
  result = (bool)(arg1)->canSetDegrees();
  jresult = result; 
  return jresult;
}


SWIGEXPORT double SWIGSTDCALL CSharp_ArLaser_getStartDegreesMin(void * jarg1) {
  double jresult ;
  ArLaser *arg1 = (ArLaser *) 0 ;
  double result;
  
  arg1 = (ArLaser *)jarg1; 
  result = (double)(arg1)->getStartDegreesMin();
  jresult = result; 
  return jresult;
}


SWIGEXPORT double SWIGSTDCALL CSharp_ArLaser_getStartDegreesMax(void * jarg1) {
  double jresult ;
  ArLaser *arg1 = (ArLaser *) 0 ;
  double result;
  
  arg1 = (ArLaser *)jarg1; 
  result = (double)(arg1)->getStartDegreesMax();
  jresult = result; 
  return jresult;
}


SWIGEXPORT double SWIGSTDCALL CSharp_ArLaser_getStartDegrees(void * jarg1) {
  double jresult ;
  ArLaser *arg1 = (ArLaser *) 0 ;
  double result;
  
  arg1 = (ArLaser *)jarg1; 
  result = (double)(arg1)->getStartDegrees();
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_ArLaser_setStartDegrees(void * jarg1, double jarg2) {
  unsigned int jresult ;
  ArLaser *arg1 = (ArLaser *) 0 ;
  double arg2 ;
  bool result;
  
  arg1 = (ArLaser *)jarg1; 
  arg2 = (double)jarg2; 
  result = (bool)(arg1)->setStartDegrees(arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT double SWIGSTDCALL CSharp_ArLaser_getEndDegreesMin(void * jarg1) {
  double jresult ;
  ArLaser *arg1 = (ArLaser *) 0 ;
  double result;
  
  arg1 = (ArLaser *)jarg1; 
  result = (double)(arg1)->getEndDegreesMin();
  jresult = result; 
  return jresult;
}


SWIGEXPORT double SWIGSTDCALL CSharp_ArLaser_getEndDegreesMax(void * jarg1) {
  double jresult ;
  ArLaser *arg1 = (ArLaser *) 0 ;
  double result;
  
  arg1 = (ArLaser *)jarg1; 
  result = (double)(arg1)->getEndDegreesMax();
  jresult = result; 
  return jresult;
}


SWIGEXPORT double SWIGSTDCALL CSharp_ArLaser_getEndDegrees(void * jarg1) {
  double jresult ;
  ArLaser *arg1 = (ArLaser *) 0 ;
  double result;
  
  arg1 = (ArLaser *)jarg1; 
  result = (double)(arg1)->getEndDegrees();
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_ArLaser_setEndDegrees(void * jarg1, double jarg2) {
  unsigned int jresult ;
  ArLaser *arg1 = (ArLaser *) 0 ;
  double arg2 ;
  bool result;
  
  arg1 = (ArLaser *)jarg1; 
  arg2 = (double)jarg2; 
  result = (bool)(arg1)->setEndDegrees(arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_ArLaser_canChooseDegrees(void * jarg1) {
  unsigned int jresult ;
  ArLaser *arg1 = (ArLaser *) 0 ;
  bool result;
  
  arg1 = (ArLaser *)jarg1; 
  result = (bool)(arg1)->canChooseDegrees();
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_ArLaser_getDegreesChoices(void * jarg1) {
  void * jresult ;
  ArLaser *arg1 = (ArLaser *) 0 ;
  SwigValueWrapper< std::list< std::string > > result;
  
  arg1 = (ArLaser *)jarg1; 
  result = (arg1)->getDegreesChoices();
  jresult = new std::list< std::string >((const std::list< std::string > &)result); 
  return jresult;
}


SWIGEXPORT char * SWIGSTDCALL CSharp_ArLaser_getDegreesChoicesString(void * jarg1) {
  char * jresult ;
  ArLaser *arg1 = (ArLaser *) 0 ;
  char *result = 0 ;
  
  arg1 = (ArLaser *)jarg1; 
  result = (char *)(arg1)->getDegreesChoicesString();
  jresult = SWIG_csharp_string_callback((const char *)result); 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_ArLaser_chooseDegrees(void * jarg1, char * jarg2) {
  unsigned int jresult ;
  ArLaser *arg1 = (ArLaser *) 0 ;
  char *arg2 = (char *) 0 ;
  bool result;
  
  arg1 = (ArLaser *)jarg1; 
  arg2 = (char *)jarg2; 
  result = (bool)(arg1)->chooseDegrees((char const *)arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT char * SWIGSTDCALL CSharp_ArLaser_getDegreesChoice(void * jarg1) {
  char * jresult ;
  ArLaser *arg1 = (ArLaser *) 0 ;
  char *result = 0 ;
  
  arg1 = (ArLaser *)jarg1; 
  result = (char *)(arg1)->getDegreesChoice();
  jresult = SWIG_csharp_string_callback((const char *)result); 
  return jresult;
}


SWIGEXPORT double SWIGSTDCALL CSharp_ArLaser_getDegreesChoiceDouble(void * jarg1) {
  double jresult ;
  ArLaser *arg1 = (ArLaser *) 0 ;
  double result;
  
  arg1 = (ArLaser *)jarg1; 
  result = (double)(arg1)->getDegreesChoiceDouble();
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_ArLaser_getDegreesChoicesMap(void * jarg1) {
  void * jresult ;
  ArLaser *arg1 = (ArLaser *) 0 ;
  SwigValueWrapper< std::map< std::string,double,std::less< std::string > > > result;
  
  arg1 = (ArLaser *)jarg1; 
  result = (arg1)->getDegreesChoicesMap();
  jresult = new std::map< std::string,double,std::less< std::string > >((const std::map< std::string,double,std::less< std::string > > &)result); 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_ArLaser_canSetIncrement(void * jarg1) {
  unsigned int jresult ;
  ArLaser *arg1 = (ArLaser *) 0 ;
  bool result;
  
  arg1 = (ArLaser *)jarg1; 
  result = (bool)(arg1)->canSetIncrement();
  jresult = result; 
  return jresult;
}


SWIGEXPORT double SWIGSTDCALL CSharp_ArLaser_getIncrementMin(void * jarg1) {
  double jresult ;
  ArLaser *arg1 = (ArLaser *) 0 ;
  double result;
  
  arg1 = (ArLaser *)jarg1; 
  result = (double)(arg1)->getIncrementMin();
  jresult = result; 
  return jresult;
}


SWIGEXPORT double SWIGSTDCALL CSharp_ArLaser_getIncrementMax(void * jarg1) {
  double jresult ;
  ArLaser *arg1 = (ArLaser *) 0 ;
  double result;
  
  arg1 = (ArLaser *)jarg1; 
  result = (double)(arg1)->getIncrementMax();
  jresult = result; 
  return jresult;
}


SWIGEXPORT double SWIGSTDCALL CSharp_ArLaser_getIncrement(void * jarg1) {
  double jresult ;
  ArLaser *arg1 = (ArLaser *) 0 ;
  double result;
  
  arg1 = (ArLaser *)jarg1; 
  result = (double)(arg1)->getIncrement();
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_ArLaser_setIncrement(void * jarg1, double jarg2) {
  unsigned int jresult ;
  ArLaser *arg1 = (ArLaser *) 0 ;
  double arg2 ;
  bool result;
  
  arg1 = (ArLaser *)jarg1; 
  arg2 = (double)jarg2; 
  result = (bool)(arg1)->setIncrement(arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_ArLaser_canChooseIncrement(void * jarg1) {
  unsigned int jresult ;
  ArLaser *arg1 = (ArLaser *) 0 ;
  bool result;
  
  arg1 = (ArLaser *)jarg1; 
  result = (bool)(arg1)->canChooseIncrement();
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_ArLaser_getIncrementChoices(void * jarg1) {
  void * jresult ;
  ArLaser *arg1 = (ArLaser *) 0 ;
  SwigValueWrapper< std::list< std::string > > result;
  
  arg1 = (ArLaser *)jarg1; 
  result = (arg1)->getIncrementChoices();
  jresult = new std::list< std::string >((const std::list< std::string > &)result); 
  return jresult;
}


SWIGEXPORT char * SWIGSTDCALL CSharp_ArLaser_getIncrementChoicesString(void * jarg1) {
  char * jresult ;
  ArLaser *arg1 = (ArLaser *) 0 ;
  char *result = 0 ;
  
  arg1 = (ArLaser *)jarg1; 
  result = (char *)(arg1)->getIncrementChoicesString();
  jresult = SWIG_csharp_string_callback((const char *)result); 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_ArLaser_chooseIncrement(void * jarg1, char * jarg2) {
  unsigned int jresult ;
  ArLaser *arg1 = (ArLaser *) 0 ;
  char *arg2 = (char *) 0 ;
  bool result;
  
  arg1 = (ArLaser *)jarg1; 
  arg2 = (char *)jarg2; 
  result = (bool)(arg1)->chooseIncrement((char const *)arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT char * SWIGSTDCALL CSharp_ArLaser_getIncrementChoice(void * jarg1) {
  char * jresult ;
  ArLaser *arg1 = (ArLaser *) 0 ;
  char *result = 0 ;
  
  arg1 = (ArLaser *)jarg1; 
  result = (char *)(arg1)->getIncrementChoice();
  jresult = SWIG_csharp_string_callback((const char *)result); 
  return jresult;
}


SWIGEXPORT double SWIGSTDCALL CSharp_ArLaser_getIncrementChoiceDouble(void * jarg1) {
  double jresult ;
  ArLaser *arg1 = (ArLaser *) 0 ;
  double result;
  
  arg1 = (ArLaser *)jarg1; 
  result = (double)(arg1)->getIncrementChoiceDouble();
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_ArLaser_getIncrementChoicesMap(void * jarg1) {
  void * jresult ;
  ArLaser *arg1 = (ArLaser *) 0 ;
  SwigValueWrapper< std::map< std::string,double,std::less< std::string > > > result;
  
  arg1 = (ArLaser *)jarg1; 
  result = (arg1)->getIncrementChoicesMap();
  jresult = new std::map< std::string,double,std::less< std::string > >((const std::map< std::string,double,std::less< std::string > > &)result); 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_ArLaser_canChooseUnits(void * jarg1) {
  unsigned int jresult ;
  ArLaser *arg1 = (ArLaser *) 0 ;
  bool result;
  
  arg1 = (ArLaser *)jarg1; 
  result = (bool)(arg1)->canChooseUnits();
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_ArLaser_getUnitsChoices(void * jarg1) {
  void * jresult ;
  ArLaser *arg1 = (ArLaser *) 0 ;
  SwigValueWrapper< std::list< std::string > > result;
  
  arg1 = (ArLaser *)jarg1; 
  result = (arg1)->getUnitsChoices();
  jresult = new std::list< std::string >((const std::list< std::string > &)result); 
  return jresult;
}


SWIGEXPORT char * SWIGSTDCALL CSharp_ArLaser_getUnitsChoicesString(void * jarg1) {
  char * jresult ;
  ArLaser *arg1 = (ArLaser *) 0 ;
  char *result = 0 ;
  
  arg1 = (ArLaser *)jarg1; 
  result = (char *)(arg1)->getUnitsChoicesString();
  jresult = SWIG_csharp_string_callback((const char *)result); 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_ArLaser_chooseUnits(void * jarg1, char * jarg2) {
  unsigned int jresult ;
  ArLaser *arg1 = (ArLaser *) 0 ;
  char *arg2 = (char *) 0 ;
  bool result;
  
  arg1 = (ArLaser *)jarg1; 
  arg2 = (char *)jarg2; 
  result = (bool)(arg1)->chooseUnits((char const *)arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT char * SWIGSTDCALL CSharp_ArLaser_getUnitsChoice(void * jarg1) {
  char * jresult ;
  ArLaser *arg1 = (ArLaser *) 0 ;
  char *result = 0 ;
  
  arg1 = (ArLaser *)jarg1; 
  result = (char *)(arg1)->getUnitsChoice();
  jresult = SWIG_csharp_string_callback((const char *)result); 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_ArLaser_canChooseReflectorBits(void * jarg1) {
  unsigned int jresult ;
  ArLaser *arg1 = (ArLaser *) 0 ;
  bool result;
  
  arg1 = (ArLaser *)jarg1; 
  result = (bool)(arg1)->canChooseReflectorBits();
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_ArLaser_getReflectorBitsChoices(void * jarg1) {
  void * jresult ;
  ArLaser *arg1 = (ArLaser *) 0 ;
  SwigValueWrapper< std::list< std::string > > result;
  
  arg1 = (ArLaser *)jarg1; 
  result = (arg1)->getReflectorBitsChoices();
  jresult = new std::list< std::string >((const std::list< std::string > &)result); 
  return jresult;
}


SWIGEXPORT char * SWIGSTDCALL CSharp_ArLaser_getReflectorBitsChoicesString(void * jarg1) {
  char * jresult ;
  ArLaser *arg1 = (ArLaser *) 0 ;
  char *result = 0 ;
  
  arg1 = (ArLaser *)jarg1; 
  result = (char *)(arg1)->getReflectorBitsChoicesString();
  jresult = SWIG_csharp_string_callback((const char *)result); 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_ArLaser_chooseReflectorBits(void * jarg1, char * jarg2) {
  unsigned int jresult ;
  ArLaser *arg1 = (ArLaser *) 0 ;
  char *arg2 = (char *) 0 ;
  bool result;
  
  arg1 = (ArLaser *)jarg1; 
  arg2 = (char *)jarg2; 
  result = (bool)(arg1)->chooseReflectorBits((char const *)arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT char * SWIGSTDCALL CSharp_ArLaser_getReflectorBitsChoice(void * jarg1) {
  char * jresult ;
  ArLaser *arg1 = (ArLaser *) 0 ;
  char *result = 0 ;
  
  arg1 = (ArLaser *)jarg1; 
  result = (char *)(arg1)->getReflectorBitsChoice();
  jresult = SWIG_csharp_string_callback((const char *)result); 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_ArLaser_canSetPowerControlled(void * jarg1) {
  unsigned int jresult ;
  ArLaser *arg1 = (ArLaser *) 0 ;
  bool result;
  
  arg1 = (ArLaser *)jarg1; 
  result = (bool)(arg1)->canSetPowerControlled();
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_ArLaser_setPowerControlled(void * jarg1, unsigned int jarg2) {
  unsigned int jresult ;
  ArLaser *arg1 = (ArLaser *) 0 ;
  bool arg2 ;
  bool result;
  
  arg1 = (ArLaser *)jarg1; 
  arg2 = jarg2 ? true : false; 
  result = (bool)(arg1)->setPowerControlled(arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_ArLaser_getPowerControlled(void * jarg1) {
  unsigned int jresult ;
  ArLaser *arg1 = (ArLaser *) 0 ;
  bool result;
  
  arg1 = (ArLaser *)jarg1; 
  result = (bool)(arg1)->getPowerControlled();
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_ArLaser_canChooseStartingBaud(void * jarg1) {
  unsigned int jresult ;
  ArLaser *arg1 = (ArLaser *) 0 ;
  bool result;
  
  arg1 = (ArLaser *)jarg1; 
  result = (bool)(arg1)->canChooseStartingBaud();
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_ArLaser_getStartingBaudChoices(void * jarg1) {
  void * jresult ;
  ArLaser *arg1 = (ArLaser *) 0 ;
  SwigValueWrapper< std::list< std::string > > result;
  
  arg1 = (ArLaser *)jarg1; 
  result = (arg1)->getStartingBaudChoices();
  jresult = new std::list< std::string >((const std::list< std::string > &)result); 
  return jresult;
}


SWIGEXPORT char * SWIGSTDCALL CSharp_ArLaser_getStartingBaudChoicesString(void * jarg1) {
  char * jresult ;
  ArLaser *arg1 = (ArLaser *) 0 ;
  char *result = 0 ;
  
  arg1 = (ArLaser *)jarg1; 
  result = (char *)(arg1)->getStartingBaudChoicesString();
  jresult = SWIG_csharp_string_callback((const char *)result); 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_ArLaser_chooseStartingBaud(void * jarg1, char * jarg2) {
  unsigned int jresult ;
  ArLaser *arg1 = (ArLaser *) 0 ;
  char *arg2 = (char *) 0 ;
  bool result;
  
  arg1 = (ArLaser *)jarg1; 
  arg2 = (char *)jarg2; 
  result = (bool)(arg1)->chooseStartingBaud((char const *)arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT char * SWIGSTDCALL CSharp_ArLaser_getStartingBaudChoice(void * jarg1) {
  char * jresult ;
  ArLaser *arg1 = (ArLaser *) 0 ;
  char *result = 0 ;
  
  arg1 = (ArLaser *)jarg1; 
  result = (char *)(arg1)->getStartingBaudChoice();
  jresult = SWIG_csharp_string_callback((const char *)result); 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_ArLaser_canChooseAutoBaud(void * jarg1) {
  unsigned int jresult ;
  ArLaser *arg1 = (ArLaser *) 0 ;
  bool result;
  
  arg1 = (ArLaser *)jarg1; 
  result = (bool)(arg1)->canChooseAutoBaud();
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_ArLaser_getAutoBaudChoices(void * jarg1) {
  void * jresult ;
  ArLaser *arg1 = (ArLaser *) 0 ;
  SwigValueWrapper< std::list< std::string > > result;
  
  arg1 = (ArLaser *)jarg1; 
  result = (arg1)->getAutoBaudChoices();
  jresult = new std::list< std::string >((const std::list< std::string > &)result); 
  return jresult;
}


SWIGEXPORT char * SWIGSTDCALL CSharp_ArLaser_getAutoBaudChoicesString(void * jarg1) {
  char * jresult ;
  ArLaser *arg1 = (ArLaser *) 0 ;
  char *result = 0 ;
  
  arg1 = (ArLaser *)jarg1; 
  result = (char *)(arg1)->getAutoBaudChoicesString();
  jresult = SWIG_csharp_string_callback((const char *)result); 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_ArLaser_chooseAutoBaud(void * jarg1, char * jarg2) {
  unsigned int jresult ;
  ArLaser *arg1 = (ArLaser *) 0 ;
  char *arg2 = (char *) 0 ;
  bool result;
  
  arg1 = (ArLaser *)jarg1; 
  arg2 = (char *)jarg2; 
  result = (bool)(arg1)->chooseAutoBaud((char const *)arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT char * SWIGSTDCALL CSharp_ArLaser_getAutoBaudChoice(void * jarg1) {
  char * jresult ;
  ArLaser *arg1 = (ArLaser *) 0 ;
  char *result = 0 ;
  
  arg1 = (ArLaser *)jarg1; 
  result = (char *)(arg1)->getAutoBaudChoice();
  jresult = SWIG_csharp_string_callback((const char *)result); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_ArLaser_addConnectCB__SWIG_0(void * jarg1, void * jarg2, int jarg3) {
  ArLaser *arg1 = (ArLaser *) 0 ;
  ArFunctor *arg2 = (ArFunctor *) 0 ;
  int arg3 ;
  
  arg1 = (ArLaser *)jarg1; 
  arg2 = (ArFunctor *)jarg2; 
  arg3 = (int)jarg3; 
  (arg1)->addConnectCB(arg2,arg3);
}


SWIGEXPORT void SWIGSTDCALL CSharp_ArLaser_addConnectCB__SWIG_1(void * jarg1, void * jarg2) {
  ArLaser *arg1 = (ArLaser *) 0 ;
  ArFunctor *arg2 = (ArFunctor *) 0 ;
  
  arg1 = (ArLaser *)jarg1; 
  arg2 = (ArFunctor *)jarg2; 
  (arg1)->addConnectCB(arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_ArLaser_remConnectCB(void * jarg1, void * jarg2) {
  ArLaser *arg1 = (ArLaser *) 0 ;
  ArFunctor *arg2 = (ArFunctor *) 0 ;
  
  arg1 = (ArLaser *)jarg1; 
  arg2 = (ArFunctor *)jarg2; 
  (arg1)->remConnectCB(arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_ArLaser_addFailedConnectCB__SWIG_0(void * jarg1, void * jarg2, int jarg3) {
  ArLaser *arg1 = (ArLaser *) 0 ;
  ArFunctor *arg2 = (ArFunctor *) 0 ;
  int arg3 ;
  
  arg1 = (ArLaser *)jarg1; 
  arg2 = (ArFunctor *)jarg2; 
  arg3 = (int)jarg3; 
  (arg1)->addFailedConnectCB(arg2,arg3);
}


SWIGEXPORT void SWIGSTDCALL CSharp_ArLaser_addFailedConnectCB__SWIG_1(void * jarg1, void * jarg2) {
  ArLaser *arg1 = (ArLaser *) 0 ;
  ArFunctor *arg2 = (ArFunctor *) 0 ;
  
  arg1 = (ArLaser *)jarg1; 
  arg2 = (ArFunctor *)jarg2; 
  (arg1)->addFailedConnectCB(arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_ArLaser_remFailedConnectCB(void * jarg1, void * jarg2) {
  ArLaser *arg1 = (ArLaser *) 0 ;
  ArFunctor *arg2 = (ArFunctor *) 0 ;
  
  arg1 = (ArLaser *)jarg1; 
  arg2 = (ArFunctor *)jarg2; 
  (arg1)->remFailedConnectCB(arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_ArLaser_addDisconnectNormallyCB__SWIG_0(void * jarg1, void * jarg2, int jarg3) {
  ArLaser *arg1 = (ArLaser *) 0 ;
  ArFunctor *arg2 = (ArFunctor *) 0 ;
  int arg3 ;
  
  arg1 = (ArLaser *)jarg1; 
  arg2 = (ArFunctor *)jarg2; 
  arg3 = (int)jarg3; 
  (arg1)->addDisconnectNormallyCB(arg2,arg3);
}


SWIGEXPORT void SWIGSTDCALL CSharp_ArLaser_addDisconnectNormallyCB__SWIG_1(void * jarg1, void * jarg2) {
  ArLaser *arg1 = (ArLaser *) 0 ;
  ArFunctor *arg2 = (ArFunctor *) 0 ;
  
  arg1 = (ArLaser *)jarg1; 
  arg2 = (ArFunctor *)jarg2; 
  (arg1)->addDisconnectNormallyCB(arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_ArLaser_remDisconnectNormallyCB(void * jarg1, void * jarg2) {
  ArLaser *arg1 = (ArLaser *) 0 ;
  ArFunctor *arg2 = (ArFunctor *) 0 ;
  
  arg1 = (ArLaser *)jarg1; 
  arg2 = (ArFunctor *)jarg2; 
  (arg1)->remDisconnectNormallyCB(arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_ArLaser_addDisconnectOnErrorCB__SWIG_0(void * jarg1, void * jarg2, int jarg3) {
  ArLaser *arg1 = (ArLaser *) 0 ;
  ArFunctor *arg2 = (ArFunctor *) 0 ;
  int arg3 ;
  
  arg1 = (ArLaser *)jarg1; 
  arg2 = (ArFunctor *)jarg2; 
  arg3 = (int)jarg3; 
  (arg1)->addDisconnectOnErrorCB(arg2,arg3);
}


SWIGEXPORT void SWIGSTDCALL CSharp_ArLaser_addDisconnectOnErrorCB__SWIG_1(void * jarg1, void * jarg2) {
  ArLaser *arg1 = (ArLaser *) 0 ;
  ArFunctor *arg2 = (ArFunctor *) 0 ;
  
  arg1 = (ArLaser *)jarg1; 
  arg2 = (ArFunctor *)jarg2; 
  (arg1)->addDisconnectOnErrorCB(arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_ArLaser_remDisconnectOnErrorCB(void * jarg1, void * jarg2) {
  ArLaser *arg1 = (ArLaser *) 0 ;
  ArFunctor *arg2 = (ArFunctor *) 0 ;
  
  arg1 = (ArLaser *)jarg1; 
  arg2 = (ArFunctor *)jarg2; 
  (arg1)->remDisconnectOnErrorCB(arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_ArLaser_addReadingCB__SWIG_0(void * jarg1, void * jarg2, int jarg3) {
  ArLaser *arg1 = (ArLaser *) 0 ;
  ArFunctor *arg2 = (ArFunctor *) 0 ;
  int arg3 ;
  
  arg1 = (ArLaser *)jarg1; 
  arg2 = (ArFunctor *)jarg2; 
  arg3 = (int)jarg3; 
  (arg1)->addReadingCB(arg2,arg3);
}


SWIGEXPORT void SWIGSTDCALL CSharp_ArLaser_addReadingCB__SWIG_1(void * jarg1, void * jarg2) {
  ArLaser *arg1 = (ArLaser *) 0 ;
  ArFunctor *arg2 = (ArFunctor *) 0 ;
  
  arg1 = (ArLaser *)jarg1; 
  arg2 = (ArFunctor *)jarg2; 
  (arg1)->addReadingCB(arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_ArLaser_remReadingCB(void * jarg1, void * jarg2) {
  ArLaser *arg1 = (ArLaser *) 0 ;
  ArFunctor *arg2 = (ArFunctor *) 0 ;
  
  arg1 = (ArLaser *)jarg1; 
  arg2 = (ArFunctor *)jarg2; 
  (arg1)->remReadingCB(arg2);
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_ArLaser_getAbsoluteMaxRange(void * jarg1) {
  unsigned int jresult ;
  ArLaser *arg1 = (ArLaser *) 0 ;
  unsigned int result;
  
  arg1 = (ArLaser *)jarg1; 
  result = (unsigned int)(arg1)->getAbsoluteMaxRange();
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_ArLaser_copyReadingCount(void * jarg1, void * jarg2) {
  ArLaser *arg1 = (ArLaser *) 0 ;
  ArLaser *arg2 = (ArLaser *) 0 ;
  
  arg1 = (ArLaser *)jarg1; 
  arg2 = (ArLaser *)jarg2; 
  (arg1)->copyReadingCount((ArLaser const *)arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_ArLaser_setMaxRange(void * jarg1, unsigned int jarg2) {
  ArLaser *arg1 = (ArLaser *) 0 ;
  unsigned int arg2 ;
  
  arg1 = (ArLaser *)jarg1; 
  arg2 = (unsigned int)jarg2; 
  (arg1)->setMaxRange(arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_ArLaser_setCumulativeBufferSize(void * jarg1, unsigned long jarg2) {
  ArLaser *arg1 = (ArLaser *) 0 ;
  size_t arg2 ;
  
  arg1 = (ArLaser *)jarg1; 
  arg2 = (size_t)jarg2; 
  (arg1)->setCumulativeBufferSize(arg2);
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_ArLaser_laserCheckParams(void * jarg1) {
  unsigned int jresult ;
  ArLaser *arg1 = (ArLaser *) 0 ;
  bool result;
  
  arg1 = (ArLaser *)jarg1; 
  result = (bool)(arg1)->laserCheckParams();
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_ArLaser_applyTransform__SWIG_0(void * jarg1, void * jarg2, unsigned int jarg3) {
  ArLaser *arg1 = (ArLaser *) 0 ;
  ArTransform arg2 ;
  bool arg3 ;
  ArTransform *argp2 ;
  
  arg1 = (ArLaser *)jarg1; 
  argp2 = (ArTransform *)jarg2; 
  if (!argp2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Attempt to dereference null ArTransform", 0);
    return ;
  }
  arg2 = *argp2; 
  arg3 = jarg3 ? true : false; 
  (arg1)->applyTransform(arg2,arg3);
}


SWIGEXPORT void SWIGSTDCALL CSharp_ArLaser_applyTransform__SWIG_1(void * jarg1, void * jarg2) {
  ArLaser *arg1 = (ArLaser *) 0 ;
  ArTransform arg2 ;
  ArTransform *argp2 ;
  
  arg1 = (ArLaser *)jarg1; 
  argp2 = (ArTransform *)jarg2; 
  if (!argp2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Attempt to dereference null ArTransform", 0);
    return ;
  }
  arg2 = *argp2; 
  (arg1)->applyTransform(arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_ArLaser_useSimpleNamingForAllLasers() {
  ArLaser::useSimpleNamingForAllLasers();
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_ArResolver(void * jarg1) {
  ArResolver *arg1 = (ArResolver *) 0 ;
  
  arg1 = (ArResolver *)jarg1; 
  delete arg1;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_ArResolver_resolve__SWIG_0(void * jarg1, void * jarg2, void * jarg3, unsigned int jarg4) {
  void * jresult ;
  ArResolver *arg1 = (ArResolver *) 0 ;
  ArResolver::ActionMap *arg2 = (ArResolver::ActionMap *) 0 ;
  ArRobot *arg3 = (ArRobot *) 0 ;
  bool arg4 ;
  ArActionDesired *result = 0 ;
  
  arg1 = (ArResolver *)jarg1; 
  arg2 = (ArResolver::ActionMap *)jarg2; 
  arg3 = (ArRobot *)jarg3; 
  arg4 = jarg4 ? true : false; 
  result = (ArActionDesired *)(arg1)->resolve(arg2,arg3,arg4);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_ArResolver_resolve__SWIG_1(void * jarg1, void * jarg2, void * jarg3) {
  void * jresult ;
  ArResolver *arg1 = (ArResolver *) 0 ;
  ArResolver::ActionMap *arg2 = (ArResolver::ActionMap *) 0 ;
  ArRobot *arg3 = (ArRobot *) 0 ;
  ArActionDesired *result = 0 ;
  
  arg1 = (ArResolver *)jarg1; 
  arg2 = (ArResolver::ActionMap *)jarg2; 
  arg3 = (ArRobot *)jarg3; 
  result = (ArActionDesired *)(arg1)->resolve(arg2,arg3);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT char * SWIGSTDCALL CSharp_ArResolver_getName(void * jarg1) {
  char * jresult ;
  ArResolver *arg1 = (ArResolver *) 0 ;
  char *result = 0 ;
  
  arg1 = (ArResolver *)jarg1; 
  result = (char *)((ArResolver const *)arg1)->getName();
  jresult = SWIG_csharp_string_callback((const char *)result); 
  return jresult;
}


SWIGEXPORT char * SWIGSTDCALL CSharp_ArResolver_getDescription(void * jarg1) {
  char * jresult ;
  ArResolver *arg1 = (ArResolver *) 0 ;
  char *result = 0 ;
  
  arg1 = (ArResolver *)jarg1; 
  result = (char *)((ArResolver const *)arg1)->getDescription();
  jresult = SWIG_csharp_string_callback((const char *)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_ArThread__SWIG_0(unsigned int jarg1) {
  void * jresult ;
  bool arg1 ;
  ArThread *result = 0 ;
  
  arg1 = jarg1 ? true : false; 
  result = (ArThread *)new ArThread(arg1);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_ArThread__SWIG_1() {
  void * jresult ;
  ArThread *result = 0 ;
  
  result = (ArThread *)new ArThread();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_ArThread__SWIG_2(void * jarg1, unsigned int jarg2, unsigned int jarg3) {
  void * jresult ;
  ArThread::ThreadType arg1 ;
  bool arg2 ;
  bool arg3 ;
  ArThread::ThreadType *argp1 ;
  ArThread *result = 0 ;
  
  argp1 = (ArThread::ThreadType *)jarg1; 
  if (!argp1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Attempt to dereference null ArThread::ThreadType", 0);
    return 0;
  }
  arg1 = *argp1; 
  arg2 = jarg2 ? true : false; 
  arg3 = jarg3 ? true : false; 
  result = (ArThread *)new ArThread(arg1,arg2,arg3);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_ArThread__SWIG_3(void * jarg1, unsigned int jarg2) {
  void * jresult ;
  ArThread::ThreadType arg1 ;
  bool arg2 ;
  ArThread::ThreadType *argp1 ;
  ArThread *result = 0 ;
  
  argp1 = (ArThread::ThreadType *)jarg1; 
  if (!argp1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Attempt to dereference null ArThread::ThreadType", 0);
    return 0;
  }
  arg1 = *argp1; 
  arg2 = jarg2 ? true : false; 
  result = (ArThread *)new ArThread(arg1,arg2);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_ArThread__SWIG_4(void * jarg1, unsigned int jarg2, unsigned int jarg3) {
  void * jresult ;
  ArFunctor *arg1 = (ArFunctor *) 0 ;
  bool arg2 ;
  bool arg3 ;
  ArThread *result = 0 ;
  
  arg1 = (ArFunctor *)jarg1; 
  arg2 = jarg2 ? true : false; 
  arg3 = jarg3 ? true : false; 
  result = (ArThread *)new ArThread(arg1,arg2,arg3);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_ArThread__SWIG_5(void * jarg1, unsigned int jarg2) {
  void * jresult ;
  ArFunctor *arg1 = (ArFunctor *) 0 ;
  bool arg2 ;
  ArThread *result = 0 ;
  
  arg1 = (ArFunctor *)jarg1; 
  arg2 = jarg2 ? true : false; 
  result = (ArThread *)new ArThread(arg1,arg2);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_ArThread__SWIG_6(void * jarg1) {
  void * jresult ;
  ArFunctor *arg1 = (ArFunctor *) 0 ;
  ArThread *result = 0 ;
  
  arg1 = (ArFunctor *)jarg1; 
  result = (ArThread *)new ArThread(arg1);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_ArThread(void * jarg1) {
  ArThread *arg1 = (ArThread *) 0 ;
  
  arg1 = (ArThread *)jarg1; 
  delete arg1;
}


SWIGEXPORT void SWIGSTDCALL CSharp_ArThread_init() {
  ArThread::init();
}


SWIGEXPORT void * SWIGSTDCALL CSharp_ArThread_self() {
  void * jresult ;
  ArThread *result = 0 ;
  
  result = (ArThread *)ArThread::self();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_ArThread_osSelf() {
  void * jresult ;
  ArThread::ThreadType result;
  
  result = ArThread::osSelf();
  jresult = new ArThread::ThreadType((const ArThread::ThreadType &)result); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_ArThread_stopAll() {
  ArThread::stopAll();
}


SWIGEXPORT void SWIGSTDCALL CSharp_ArThread_cancelAll() {
  ArThread::cancelAll();
}


SWIGEXPORT void SWIGSTDCALL CSharp_ArThread_joinAll() {
  ArThread::joinAll();
}


SWIGEXPORT void SWIGSTDCALL CSharp_ArThread_shutdown() {
  ArThread::shutdown();
}


SWIGEXPORT void SWIGSTDCALL CSharp_ArThread_yieldProcessor() {
  ArThread::yieldProcessor();
}


SWIGEXPORT int SWIGSTDCALL CSharp_ArThread_getLogLevel() {
  int jresult ;
  ArLog::LogLevel result;
  
  result = (ArLog::LogLevel)ArThread::getLogLevel();
  jresult = (int)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_ArThread_setLogLevel(int jarg1) {
  ArLog::LogLevel arg1 ;
  
  arg1 = (ArLog::LogLevel)jarg1; 
  ArThread::setLogLevel(arg1);
}


SWIGEXPORT int SWIGSTDCALL CSharp_ArThread_create__SWIG_0(void * jarg1, void * jarg2, unsigned int jarg3, unsigned int jarg4) {
  int jresult ;
  ArThread *arg1 = (ArThread *) 0 ;
  ArFunctor *arg2 = (ArFunctor *) 0 ;
  bool arg3 ;
  bool arg4 ;
  int result;
  
  arg1 = (ArThread *)jarg1; 
  arg2 = (ArFunctor *)jarg2; 
  arg3 = jarg3 ? true : false; 
  arg4 = jarg4 ? true : false; 
  result = (int)(arg1)->create(arg2,arg3,arg4);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_ArThread_create__SWIG_1(void * jarg1, void * jarg2, unsigned int jarg3) {
  int jresult ;
  ArThread *arg1 = (ArThread *) 0 ;
  ArFunctor *arg2 = (ArFunctor *) 0 ;
  bool arg3 ;
  int result;
  
  arg1 = (ArThread *)jarg1; 
  arg2 = (ArFunctor *)jarg2; 
  arg3 = jarg3 ? true : false; 
  result = (int)(arg1)->create(arg2,arg3);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_ArThread_create__SWIG_2(void * jarg1, void * jarg2) {
  int jresult ;
  ArThread *arg1 = (ArThread *) 0 ;
  ArFunctor *arg2 = (ArFunctor *) 0 ;
  int result;
  
  arg1 = (ArThread *)jarg1; 
  arg2 = (ArFunctor *)jarg2; 
  result = (int)(arg1)->create(arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_ArThread_stopRunning(void * jarg1) {
  ArThread *arg1 = (ArThread *) 0 ;
  
  arg1 = (ArThread *)jarg1; 
  (arg1)->stopRunning();
}


SWIGEXPORT int SWIGSTDCALL CSharp_ArThread_join__SWIG_0(void * jarg1, void * jarg2) {
  int jresult ;
  ArThread *arg1 = (ArThread *) 0 ;
  void **arg2 = (void **) 0 ;
  int result;
  
  arg1 = (ArThread *)jarg1; 
  arg2 = (void **)jarg2; 
  result = (int)(arg1)->join(arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_ArThread_join__SWIG_1(void * jarg1) {
  int jresult ;
  ArThread *arg1 = (ArThread *) 0 ;
  int result;
  
  arg1 = (ArThread *)jarg1; 
  result = (int)(arg1)->join();
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_ArThread_detach(void * jarg1) {
  int jresult ;
  ArThread *arg1 = (ArThread *) 0 ;
  int result;
  
  arg1 = (ArThread *)jarg1; 
  result = (int)(arg1)->detach();
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_ArThread_cancel(void * jarg1) {
  ArThread *arg1 = (ArThread *) 0 ;
  
  arg1 = (ArThread *)jarg1; 
  (arg1)->cancel();
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_ArThread_getRunning(void * jarg1) {
  unsigned int jresult ;
  ArThread *arg1 = (ArThread *) 0 ;
  bool result;
  
  arg1 = (ArThread *)jarg1; 
  result = (bool)((ArThread const *)arg1)->getRunning();
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_ArThread_getRunningWithLock(void * jarg1) {
  unsigned int jresult ;
  ArThread *arg1 = (ArThread *) 0 ;
  bool result;
  
  arg1 = (ArThread *)jarg1; 
  result = (bool)(arg1)->getRunningWithLock();
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_ArThread_getJoinable(void * jarg1) {
  unsigned int jresult ;
  ArThread *arg1 = (ArThread *) 0 ;
  bool result;
  
  arg1 = (ArThread *)jarg1; 
  result = (bool)((ArThread const *)arg1)->getJoinable();
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_ArThread_getThread(void * jarg1) {
  void * jresult ;
  ArThread *arg1 = (ArThread *) 0 ;
  ArThread::ThreadType *result = 0 ;
  
  arg1 = (ArThread *)jarg1; 
  result = (ArThread::ThreadType *)((ArThread const *)arg1)->getThread();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_ArThread_getOSThread(void * jarg1) {
  void * jresult ;
  ArThread *arg1 = (ArThread *) 0 ;
  ArThread::ThreadType result;
  
  arg1 = (ArThread *)jarg1; 
  result = ((ArThread const *)arg1)->getOSThread();
  jresult = new ArThread::ThreadType((const ArThread::ThreadType &)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_ArThread_getFunc(void * jarg1) {
  void * jresult ;
  ArThread *arg1 = (ArThread *) 0 ;
  ArFunctor *result = 0 ;
  
  arg1 = (ArThread *)jarg1; 
  result = (ArFunctor *)((ArThread const *)arg1)->getFunc();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_ArThread_setRunning(void * jarg1, unsigned int jarg2) {
  ArThread *arg1 = (ArThread *) 0 ;
  bool arg2 ;
  
  arg1 = (ArThread *)jarg1; 
  arg2 = jarg2 ? true : false; 
  (arg1)->setRunning(arg2);
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_ArThread_getBlockAllSignals(void * jarg1) {
  unsigned int jresult ;
  ArThread *arg1 = (ArThread *) 0 ;
  bool result;
  
  arg1 = (ArThread *)jarg1; 
  result = (bool)(arg1)->getBlockAllSignals();
  jresult = result; 
  return jresult;
}


SWIGEXPORT char * SWIGSTDCALL CSharp_ArThread_getThreadName(void * jarg1) {
  char * jresult ;
  ArThread *arg1 = (ArThread *) 0 ;
  char *result = 0 ;
  
  arg1 = (ArThread *)jarg1; 
  result = (char *)(arg1)->getThreadName();
  jresult = SWIG_csharp_string_callback((const char *)result); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_ArThread_setThreadName(void * jarg1, char * jarg2) {
  ArThread *arg1 = (ArThread *) 0 ;
  char *arg2 = (char *) 0 ;
  
  arg1 = (ArThread *)jarg1; 
  arg2 = (char *)jarg2; 
  (arg1)->setThreadName((char const *)arg2);
}


SWIGEXPORT char * SWIGSTDCALL CSharp_ArThread_getThreadActivity(void * jarg1) {
  char * jresult ;
  ArThread *arg1 = (ArThread *) 0 ;
  char *result = 0 ;
  
  arg1 = (ArThread *)jarg1; 
  result = (char *)(arg1)->getThreadActivity();
  jresult = SWIG_csharp_string_callback((const char *)result); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_ArThread_threadStarted(void * jarg1) {
  ArThread *arg1 = (ArThread *) 0 ;
  
  arg1 = (ArThread *)jarg1; 
  (arg1)->threadStarted();
}


SWIGEXPORT void SWIGSTDCALL CSharp_ArThread_threadFinished(void * jarg1) {
  ArThread *arg1 = (ArThread *) 0 ;
  
  arg1 = (ArThread *)jarg1; 
  (arg1)->threadFinished();
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_ArThread_isThreadStarted(void * jarg1) {
  unsigned int jresult ;
  ArThread *arg1 = (ArThread *) 0 ;
  bool result;
  
  arg1 = (ArThread *)jarg1; 
  result = (bool)((ArThread const *)arg1)->isThreadStarted();
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_ArThread_isThreadFinished(void * jarg1) {
  unsigned int jresult ;
  ArThread *arg1 = (ArThread *) 0 ;
  bool result;
  
  arg1 = (ArThread *)jarg1; 
  result = (bool)((ArThread const *)arg1)->isThreadFinished();
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_ArThread_logThreadInfo(void * jarg1) {
  ArThread *arg1 = (ArThread *) 0 ;
  
  arg1 = (ArThread *)jarg1; 
  (arg1)->logThreadInfo();
}


SWIGEXPORT void * SWIGSTDCALL CSharp_ArThread_getPID(void * jarg1) {
  void * jresult ;
  ArThread *arg1 = (ArThread *) 0 ;
  pid_t result;
  
  arg1 = (ArThread *)jarg1; 
  result = (arg1)->getPID();
  jresult = new pid_t((const pid_t &)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_ArThread_getTID(void * jarg1) {
  void * jresult ;
  ArThread *arg1 = (ArThread *) 0 ;
  pid_t result;
  
  arg1 = (ArThread *)jarg1; 
  result = (arg1)->getTID();
  jresult = new pid_t((const pid_t &)result); 
  return jresult;
}


SWIGEXPORT char * SWIGSTDCALL CSharp_ArThread_getThisThreadName() {
  char * jresult ;
  char *result = 0 ;
  
  result = (char *)ArThread::getThisThreadName();
  jresult = SWIG_csharp_string_callback((const char *)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_ArThread_getThisThread() {
  void * jresult ;
  ArThread::ThreadType *result = 0 ;
  
  result = (ArThread::ThreadType *)ArThread::getThisThread();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_ArThread_getThisOSThread() {
  void * jresult ;
  ArThread::ThreadType result;
  
  result = ArThread::getThisOSThread();
  jresult = new ArThread::ThreadType((const ArThread::ThreadType &)result); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_ArFunctor(void * jarg1) {
  ArFunctor *arg1 = (ArFunctor *) 0 ;
  
  arg1 = (ArFunctor *)jarg1; 
  delete arg1;
}


SWIGEXPORT void SWIGSTDCALL CSharp_ArFunctor_invoke(void * jarg1) {
  ArFunctor *arg1 = (ArFunctor *) 0 ;
  
  arg1 = (ArFunctor *)jarg1; 
  (arg1)->invoke();
}


SWIGEXPORT char * SWIGSTDCALL CSharp_ArFunctor_getName(void * jarg1) {
  char * jresult ;
  ArFunctor *arg1 = (ArFunctor *) 0 ;
  char *result = 0 ;
  
  arg1 = (ArFunctor *)jarg1; 
  result = (char *)(arg1)->getName();
  jresult = SWIG_csharp_string_callback((const char *)result); 
  return jresult;
}


SWIGEXPORT char * SWIGSTDCALL CSharp_ArFunctor_getNameSwigExplicitArFunctor(void * jarg1) {
  char * jresult ;
  ArFunctor *arg1 = (ArFunctor *) 0 ;
  char *result = 0 ;
  
  arg1 = (ArFunctor *)jarg1; 
  result = (char *)(arg1)->ArFunctor::getName();
  jresult = SWIG_csharp_string_callback((const char *)result); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_ArFunctor_setName(void * jarg1, char * jarg2) {
  ArFunctor *arg1 = (ArFunctor *) 0 ;
  char *arg2 = (char *) 0 ;
  
  arg1 = (ArFunctor *)jarg1; 
  arg2 = (char *)jarg2; 
  (arg1)->setName((char const *)arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_ArFunctor_setNameSwigExplicitArFunctor(void * jarg1, char * jarg2) {
  ArFunctor *arg1 = (ArFunctor *) 0 ;
  char *arg2 = (char *) 0 ;
  
  arg1 = (ArFunctor *)jarg1; 
  arg2 = (char *)jarg2; 
  (arg1)->ArFunctor::setName((char const *)arg2);
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_ArFunctor() {
  void * jresult ;
  ArFunctor *result = 0 ;
  
  result = (ArFunctor *)new SwigDirector_ArFunctor();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_ArFunctor_director_connect(void *objarg, SwigDirector_ArFunctor::SWIG_Callback0_t callback0, SwigDirector_ArFunctor::SWIG_Callback1_t callback1, SwigDirector_ArFunctor::SWIG_Callback2_t callback2) {
  ArFunctor *obj = (ArFunctor *)objarg;
  SwigDirector_ArFunctor *director = dynamic_cast<SwigDirector_ArFunctor *>(obj);
  if (director) {
    director->swig_connect_director(callback0, callback1, callback2);
  }
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_ArRetFunctor_VoidP(void * jarg1) {
  ArRetFunctor< void * > *arg1 = (ArRetFunctor< void * > *) 0 ;
  
  arg1 = (ArRetFunctor< void * > *)jarg1; 
  delete arg1;
}


SWIGEXPORT void SWIGSTDCALL CSharp_ArRetFunctor_VoidP_invoke(void * jarg1) {
  ArRetFunctor< void * > *arg1 = (ArRetFunctor< void * > *) 0 ;
  
  arg1 = (ArRetFunctor< void * > *)jarg1; 
  (arg1)->invoke();
}


SWIGEXPORT void SWIGSTDCALL CSharp_ArRetFunctor_VoidP_invokeSwigExplicitArRetFunctor_VoidP(void * jarg1) {
  ArRetFunctor< void * > *arg1 = (ArRetFunctor< void * > *) 0 ;
  
  arg1 = (ArRetFunctor< void * > *)jarg1; 
  (arg1)->ArRetFunctor< void * >::invoke();
}


SWIGEXPORT void * SWIGSTDCALL CSharp_ArRetFunctor_VoidP_invokeR(void * jarg1) {
  void * jresult ;
  ArRetFunctor< void * > *arg1 = (ArRetFunctor< void * > *) 0 ;
  void *result = 0 ;
  
  arg1 = (ArRetFunctor< void * > *)jarg1; 
  result = (void *)(arg1)->invokeR();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_ArRetFunctor_VoidP() {
  void * jresult ;
  ArRetFunctor< void * > *result = 0 ;
  
  result = (ArRetFunctor< void * > *)new SwigDirector_ArRetFunctor_VoidP();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_ArRetFunctor_VoidP_director_connect(void *objarg, SwigDirector_ArRetFunctor_VoidP::SWIG_Callback0_t callback0, SwigDirector_ArRetFunctor_VoidP::SWIG_Callback1_t callback1, SwigDirector_ArRetFunctor_VoidP::SWIG_Callback2_t callback2, SwigDirector_ArRetFunctor_VoidP::SWIG_Callback3_t callback3) {
  ArRetFunctor< void * > *obj = (ArRetFunctor< void * > *)objarg;
  SwigDirector_ArRetFunctor_VoidP *director = dynamic_cast<SwigDirector_ArRetFunctor_VoidP *>(obj);
  if (director) {
    director->swig_connect_director(callback0, callback1, callback2, callback3);
  }
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_ArRetFunctor_Bool(void * jarg1) {
  ArRetFunctor< bool > *arg1 = (ArRetFunctor< bool > *) 0 ;
  
  arg1 = (ArRetFunctor< bool > *)jarg1; 
  delete arg1;
}


SWIGEXPORT void SWIGSTDCALL CSharp_ArRetFunctor_Bool_invoke(void * jarg1) {
  ArRetFunctor< bool > *arg1 = (ArRetFunctor< bool > *) 0 ;
  
  arg1 = (ArRetFunctor< bool > *)jarg1; 
  (arg1)->invoke();
}


SWIGEXPORT void SWIGSTDCALL CSharp_ArRetFunctor_Bool_invokeSwigExplicitArRetFunctor_Bool(void * jarg1) {
  ArRetFunctor< bool > *arg1 = (ArRetFunctor< bool > *) 0 ;
  
  arg1 = (ArRetFunctor< bool > *)jarg1; 
  (arg1)->ArRetFunctor< bool >::invoke();
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_ArRetFunctor_Bool_invokeR(void * jarg1) {
  unsigned int jresult ;
  ArRetFunctor< bool > *arg1 = (ArRetFunctor< bool > *) 0 ;
  bool result;
  
  arg1 = (ArRetFunctor< bool > *)jarg1; 
  result = (bool)(arg1)->invokeR();
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_ArRetFunctor_Bool() {
  void * jresult ;
  ArRetFunctor< bool > *result = 0 ;
  
  result = (ArRetFunctor< bool > *)new SwigDirector_ArRetFunctor_Bool();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_ArRetFunctor_Bool_director_connect(void *objarg, SwigDirector_ArRetFunctor_Bool::SWIG_Callback0_t callback0, SwigDirector_ArRetFunctor_Bool::SWIG_Callback1_t callback1, SwigDirector_ArRetFunctor_Bool::SWIG_Callback2_t callback2, SwigDirector_ArRetFunctor_Bool::SWIG_Callback3_t callback3) {
  ArRetFunctor< bool > *obj = (ArRetFunctor< bool > *)objarg;
  SwigDirector_ArRetFunctor_Bool *director = dynamic_cast<SwigDirector_ArRetFunctor_Bool *>(obj);
  if (director) {
    director->swig_connect_director(callback0, callback1, callback2, callback3);
  }
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_ArFunctor1_CString(void * jarg1) {
  ArFunctor1< char const * > *arg1 = (ArFunctor1< char const * > *) 0 ;
  
  arg1 = (ArFunctor1< char const * > *)jarg1; 
  delete arg1;
}


SWIGEXPORT void SWIGSTDCALL CSharp_ArFunctor1_CString_invoke__SWIG_0(void * jarg1) {
  ArFunctor1< char const * > *arg1 = (ArFunctor1< char const * > *) 0 ;
  
  arg1 = (ArFunctor1< char const * > *)jarg1; 
  (arg1)->invoke();
}


SWIGEXPORT void SWIGSTDCALL CSharp_ArFunctor1_CString_invoke__SWIG_1(void * jarg1, char * jarg2) {
  ArFunctor1< char const * > *arg1 = (ArFunctor1< char const * > *) 0 ;
  char *arg2 = (char *) 0 ;
  
  arg1 = (ArFunctor1< char const * > *)jarg1; 
  arg2 = (char *)jarg2; 
  (arg1)->invoke((char const *)arg2);
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_ArFunctor1_CString() {
  void * jresult ;
  ArFunctor1< char const * > *result = 0 ;
  
  result = (ArFunctor1< char const * > *)new SwigDirector_ArFunctor1_CString();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_ArFunctor1_CString_director_connect(void *objarg, SwigDirector_ArFunctor1_CString::SWIG_Callback0_t callback0, SwigDirector_ArFunctor1_CString::SWIG_Callback1_t callback1, SwigDirector_ArFunctor1_CString::SWIG_Callback2_t callback2, SwigDirector_ArFunctor1_CString::SWIG_Callback3_t callback3) {
  ArFunctor1< char const * > *obj = (ArFunctor1< char const * > *)objarg;
  SwigDirector_ArFunctor1_CString *director = dynamic_cast<SwigDirector_ArFunctor1_CString *>(obj);
  if (director) {
    director->swig_connect_director(callback0, callback1, callback2, callback3);
  }
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_ArFunctor1_Int(void * jarg1) {
  ArFunctor1< int > *arg1 = (ArFunctor1< int > *) 0 ;
  
  arg1 = (ArFunctor1< int > *)jarg1; 
  delete arg1;
}


SWIGEXPORT void SWIGSTDCALL CSharp_ArFunctor1_Int_invoke__SWIG_0(void * jarg1) {
  ArFunctor1< int > *arg1 = (ArFunctor1< int > *) 0 ;
  
  arg1 = (ArFunctor1< int > *)jarg1; 
  (arg1)->invoke();
}


SWIGEXPORT void SWIGSTDCALL CSharp_ArFunctor1_Int_invoke__SWIG_1(void * jarg1, int jarg2) {
  ArFunctor1< int > *arg1 = (ArFunctor1< int > *) 0 ;
  int arg2 ;
  
  arg1 = (ArFunctor1< int > *)jarg1; 
  arg2 = (int)jarg2; 
  (arg1)->invoke(arg2);
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_ArFunctor1_Int() {
  void * jresult ;
  ArFunctor1< int > *result = 0 ;
  
  result = (ArFunctor1< int > *)new SwigDirector_ArFunctor1_Int();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_ArFunctor1_Int_director_connect(void *objarg, SwigDirector_ArFunctor1_Int::SWIG_Callback0_t callback0, SwigDirector_ArFunctor1_Int::SWIG_Callback1_t callback1, SwigDirector_ArFunctor1_Int::SWIG_Callback2_t callback2, SwigDirector_ArFunctor1_Int::SWIG_Callback3_t callback3) {
  ArFunctor1< int > *obj = (ArFunctor1< int > *)objarg;
  SwigDirector_ArFunctor1_Int *director = dynamic_cast<SwigDirector_ArFunctor1_Int *>(obj);
  if (director) {
    director->swig_connect_director(callback0, callback1, callback2, callback3);
  }
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_ArFunctor1_ArRobotPacketP(void * jarg1) {
  ArFunctor1< ArRobotPacket * > *arg1 = (ArFunctor1< ArRobotPacket * > *) 0 ;
  
  arg1 = (ArFunctor1< ArRobotPacket * > *)jarg1; 
  delete arg1;
}


SWIGEXPORT void SWIGSTDCALL CSharp_ArFunctor1_ArRobotPacketP_invoke__SWIG_0(void * jarg1) {
  ArFunctor1< ArRobotPacket * > *arg1 = (ArFunctor1< ArRobotPacket * > *) 0 ;
  
  arg1 = (ArFunctor1< ArRobotPacket * > *)jarg1; 
  (arg1)->invoke();
}


SWIGEXPORT void SWIGSTDCALL CSharp_ArFunctor1_ArRobotPacketP_invoke__SWIG_1(void * jarg1, void * jarg2) {
  ArFunctor1< ArRobotPacket * > *arg1 = (ArFunctor1< ArRobotPacket * > *) 0 ;
  ArRobotPacket *arg2 = (ArRobotPacket *) 0 ;
  
  arg1 = (ArFunctor1< ArRobotPacket * > *)jarg1; 
  arg2 = (ArRobotPacket *)jarg2; 
  (arg1)->invoke(arg2);
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_ArFunctor1_ArRobotPacketP() {
  void * jresult ;
  ArFunctor1< ArRobotPacket * > *result = 0 ;
  
  result = (ArFunctor1< ArRobotPacket * > *)new SwigDirector_ArFunctor1_ArRobotPacketP();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_ArFunctor1_ArRobotPacketP_director_connect(void *objarg, SwigDirector_ArFunctor1_ArRobotPacketP::SWIG_Callback0_t callback0, SwigDirector_ArFunctor1_ArRobotPacketP::SWIG_Callback1_t callback1, SwigDirector_ArFunctor1_ArRobotPacketP::SWIG_Callback2_t callback2, SwigDirector_ArFunctor1_ArRobotPacketP::SWIG_Callback3_t callback3) {
  ArFunctor1< ArRobotPacket * > *obj = (ArFunctor1< ArRobotPacket * > *)objarg;
  SwigDirector_ArFunctor1_ArRobotPacketP *director = dynamic_cast<SwigDirector_ArFunctor1_ArRobotPacketP *>(obj);
  if (director) {
    director->swig_connect_director(callback0, callback1, callback2, callback3);
  }
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_ArRetFunctor_Int(void * jarg1) {
  ArRetFunctor< int > *arg1 = (ArRetFunctor< int > *) 0 ;
  
  arg1 = (ArRetFunctor< int > *)jarg1; 
  delete arg1;
}


SWIGEXPORT void SWIGSTDCALL CSharp_ArRetFunctor_Int_invoke(void * jarg1) {
  ArRetFunctor< int > *arg1 = (ArRetFunctor< int > *) 0 ;
  
  arg1 = (ArRetFunctor< int > *)jarg1; 
  (arg1)->invoke();
}


SWIGEXPORT void SWIGSTDCALL CSharp_ArRetFunctor_Int_invokeSwigExplicitArRetFunctor_Int(void * jarg1) {
  ArRetFunctor< int > *arg1 = (ArRetFunctor< int > *) 0 ;
  
  arg1 = (ArRetFunctor< int > *)jarg1; 
  (arg1)->ArRetFunctor< int >::invoke();
}


SWIGEXPORT int SWIGSTDCALL CSharp_ArRetFunctor_Int_invokeR(void * jarg1) {
  int jresult ;
  ArRetFunctor< int > *arg1 = (ArRetFunctor< int > *) 0 ;
  int result;
  
  arg1 = (ArRetFunctor< int > *)jarg1; 
  result = (int)(arg1)->invokeR();
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_ArRetFunctor_Int() {
  void * jresult ;
  ArRetFunctor< int > *result = 0 ;
  
  result = (ArRetFunctor< int > *)new SwigDirector_ArRetFunctor_Int();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_ArRetFunctor_Int_director_connect(void *objarg, SwigDirector_ArRetFunctor_Int::SWIG_Callback0_t callback0, SwigDirector_ArRetFunctor_Int::SWIG_Callback1_t callback1, SwigDirector_ArRetFunctor_Int::SWIG_Callback2_t callback2, SwigDirector_ArRetFunctor_Int::SWIG_Callback3_t callback3) {
  ArRetFunctor< int > *obj = (ArRetFunctor< int > *)objarg;
  SwigDirector_ArRetFunctor_Int *director = dynamic_cast<SwigDirector_ArRetFunctor_Int *>(obj);
  if (director) {
    director->swig_connect_director(callback0, callback1, callback2, callback3);
  }
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_ArRetFunctor_Double(void * jarg1) {
  ArRetFunctor< double > *arg1 = (ArRetFunctor< double > *) 0 ;
  
  arg1 = (ArRetFunctor< double > *)jarg1; 
  delete arg1;
}


SWIGEXPORT void SWIGSTDCALL CSharp_ArRetFunctor_Double_invoke(void * jarg1) {
  ArRetFunctor< double > *arg1 = (ArRetFunctor< double > *) 0 ;
  
  arg1 = (ArRetFunctor< double > *)jarg1; 
  (arg1)->invoke();
}


SWIGEXPORT void SWIGSTDCALL CSharp_ArRetFunctor_Double_invokeSwigExplicitArRetFunctor_Double(void * jarg1) {
  ArRetFunctor< double > *arg1 = (ArRetFunctor< double > *) 0 ;
  
  arg1 = (ArRetFunctor< double > *)jarg1; 
  (arg1)->ArRetFunctor< double >::invoke();
}


SWIGEXPORT double SWIGSTDCALL CSharp_ArRetFunctor_Double_invokeR(void * jarg1) {
  double jresult ;
  ArRetFunctor< double > *arg1 = (ArRetFunctor< double > *) 0 ;
  double result;
  
  arg1 = (ArRetFunctor< double > *)jarg1; 
  result = (double)(arg1)->invokeR();
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_ArRetFunctor_Double() {
  void * jresult ;
  ArRetFunctor< double > *result = 0 ;
  
  result = (ArRetFunctor< double > *)new SwigDirector_ArRetFunctor_Double();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_ArRetFunctor_Double_director_connect(void *objarg, SwigDirector_ArRetFunctor_Double::SWIG_Callback0_t callback0, SwigDirector_ArRetFunctor_Double::SWIG_Callback1_t callback1, SwigDirector_ArRetFunctor_Double::SWIG_Callback2_t callback2, SwigDirector_ArRetFunctor_Double::SWIG_Callback3_t callback3) {
  ArRetFunctor< double > *obj = (ArRetFunctor< double > *)objarg;
  SwigDirector_ArRetFunctor_Double *director = dynamic_cast<SwigDirector_ArRetFunctor_Double *>(obj);
  if (director) {
    director->swig_connect_director(callback0, callback1, callback2, callback3);
  }
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_ArRetFunctor_UnsignedInt(void * jarg1) {
  ArRetFunctor< unsigned int > *arg1 = (ArRetFunctor< unsigned int > *) 0 ;
  
  arg1 = (ArRetFunctor< unsigned int > *)jarg1; 
  delete arg1;
}


SWIGEXPORT void SWIGSTDCALL CSharp_ArRetFunctor_UnsignedInt_invoke(void * jarg1) {
  ArRetFunctor< unsigned int > *arg1 = (ArRetFunctor< unsigned int > *) 0 ;
  
  arg1 = (ArRetFunctor< unsigned int > *)jarg1; 
  (arg1)->invoke();
}


SWIGEXPORT void SWIGSTDCALL CSharp_ArRetFunctor_UnsignedInt_invokeSwigExplicitArRetFunctor_UnsignedInt(void * jarg1) {
  ArRetFunctor< unsigned int > *arg1 = (ArRetFunctor< unsigned int > *) 0 ;
  
  arg1 = (ArRetFunctor< unsigned int > *)jarg1; 
  (arg1)->ArRetFunctor< unsigned int >::invoke();
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_ArRetFunctor_UnsignedInt_invokeR(void * jarg1) {
  unsigned int jresult ;
  ArRetFunctor< unsigned int > *arg1 = (ArRetFunctor< unsigned int > *) 0 ;
  unsigned int result;
  
  arg1 = (ArRetFunctor< unsigned int > *)jarg1; 
  result = (unsigned int)(arg1)->invokeR();
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_ArRetFunctor_UnsignedInt() {
  void * jresult ;
  ArRetFunctor< unsigned int > *result = 0 ;
  
  result = (ArRetFunctor< unsigned int > *)new SwigDirector_ArRetFunctor_UnsignedInt();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_ArRetFunctor_UnsignedInt_director_connect(void *objarg, SwigDirector_ArRetFunctor_UnsignedInt::SWIG_Callback0_t callback0, SwigDirector_ArRetFunctor_UnsignedInt::SWIG_Callback1_t callback1, SwigDirector_ArRetFunctor_UnsignedInt::SWIG_Callback2_t callback2, SwigDirector_ArRetFunctor_UnsignedInt::SWIG_Callback3_t callback3) {
  ArRetFunctor< unsigned int > *obj = (ArRetFunctor< unsigned int > *)objarg;
  SwigDirector_ArRetFunctor_UnsignedInt *director = dynamic_cast<SwigDirector_ArRetFunctor_UnsignedInt *>(obj);
  if (director) {
    director->swig_connect_director(callback0, callback1, callback2, callback3);
  }
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_ArRetFunctor1_Double_ArPoseWithTime(void * jarg1) {
  ArRetFunctor1< double,ArPoseWithTime > *arg1 = (ArRetFunctor1< double,ArPoseWithTime > *) 0 ;
  
  arg1 = (ArRetFunctor1< double,ArPoseWithTime > *)jarg1; 
  delete arg1;
}


SWIGEXPORT double SWIGSTDCALL CSharp_ArRetFunctor1_Double_ArPoseWithTime_invokeR__SWIG_0(void * jarg1) {
  double jresult ;
  ArRetFunctor1< double,ArPoseWithTime > *arg1 = (ArRetFunctor1< double,ArPoseWithTime > *) 0 ;
  double result;
  
  arg1 = (ArRetFunctor1< double,ArPoseWithTime > *)jarg1; 
  result = (double)(arg1)->invokeR();
  jresult = result; 
  return jresult;
}


SWIGEXPORT double SWIGSTDCALL CSharp_ArRetFunctor1_Double_ArPoseWithTime_invokeR__SWIG_1(void * jarg1, void * jarg2) {
  double jresult ;
  ArRetFunctor1< double,ArPoseWithTime > *arg1 = (ArRetFunctor1< double,ArPoseWithTime > *) 0 ;
  ArPoseWithTime arg2 ;
  ArPoseWithTime *argp2 ;
  double result;
  
  arg1 = (ArRetFunctor1< double,ArPoseWithTime > *)jarg1; 
  argp2 = (ArPoseWithTime *)jarg2; 
  if (!argp2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Attempt to dereference null ArPoseWithTime", 0);
    return 0;
  }
  arg2 = *argp2; 
  result = (double)(arg1)->invokeR(arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_ArRetFunctor1_Double_ArPoseWithTime() {
  void * jresult ;
  ArRetFunctor1< double,ArPoseWithTime > *result = 0 ;
  
  result = (ArRetFunctor1< double,ArPoseWithTime > *)new SwigDirector_ArRetFunctor1_Double_ArPoseWithTime();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_ArRetFunctor1_Double_ArPoseWithTime_director_connect(void *objarg, SwigDirector_ArRetFunctor1_Double_ArPoseWithTime::SWIG_Callback0_t callback0, SwigDirector_ArRetFunctor1_Double_ArPoseWithTime::SWIG_Callback1_t callback1, SwigDirector_ArRetFunctor1_Double_ArPoseWithTime::SWIG_Callback2_t callback2, SwigDirector_ArRetFunctor1_Double_ArPoseWithTime::SWIG_Callback3_t callback3, SwigDirector_ArRetFunctor1_Double_ArPoseWithTime::SWIG_Callback4_t callback4) {
  ArRetFunctor1< double,ArPoseWithTime > *obj = (ArRetFunctor1< double,ArPoseWithTime > *)objarg;
  SwigDirector_ArRetFunctor1_Double_ArPoseWithTime *director = dynamic_cast<SwigDirector_ArRetFunctor1_Double_ArPoseWithTime *>(obj);
  if (director) {
    director->swig_connect_director(callback0, callback1, callback2, callback3, callback4);
  }
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_ArRetFunctor1_Bool_ArRobotPacketP(void * jarg1) {
  ArRetFunctor1< bool,ArRobotPacket * > *arg1 = (ArRetFunctor1< bool,ArRobotPacket * > *) 0 ;
  
  arg1 = (ArRetFunctor1< bool,ArRobotPacket * > *)jarg1; 
  delete arg1;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_ArRetFunctor1_Bool_ArRobotPacketP_invokeR__SWIG_0(void * jarg1) {
  unsigned int jresult ;
  ArRetFunctor1< bool,ArRobotPacket * > *arg1 = (ArRetFunctor1< bool,ArRobotPacket * > *) 0 ;
  bool result;
  
  arg1 = (ArRetFunctor1< bool,ArRobotPacket * > *)jarg1; 
  result = (bool)(arg1)->invokeR();
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_ArRetFunctor1_Bool_ArRobotPacketP_invokeR__SWIG_1(void * jarg1, void * jarg2) {
  unsigned int jresult ;
  ArRetFunctor1< bool,ArRobotPacket * > *arg1 = (ArRetFunctor1< bool,ArRobotPacket * > *) 0 ;
  ArRobotPacket *arg2 = (ArRobotPacket *) 0 ;
  bool result;
  
  arg1 = (ArRetFunctor1< bool,ArRobotPacket * > *)jarg1; 
  arg2 = (ArRobotPacket *)jarg2; 
  result = (bool)(arg1)->invokeR(arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_ArRetFunctor1_Bool_ArRobotPacketP() {
  void * jresult ;
  ArRetFunctor1< bool,ArRobotPacket * > *result = 0 ;
  
  result = (ArRetFunctor1< bool,ArRobotPacket * > *)new SwigDirector_ArRetFunctor1_Bool_ArRobotPacketP();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_ArRetFunctor1_Bool_ArRobotPacketP_director_connect(void *objarg, SwigDirector_ArRetFunctor1_Bool_ArRobotPacketP::SWIG_Callback0_t callback0, SwigDirector_ArRetFunctor1_Bool_ArRobotPacketP::SWIG_Callback1_t callback1, SwigDirector_ArRetFunctor1_Bool_ArRobotPacketP::SWIG_Callback2_t callback2, SwigDirector_ArRetFunctor1_Bool_ArRobotPacketP::SWIG_Callback3_t callback3, SwigDirector_ArRetFunctor1_Bool_ArRobotPacketP::SWIG_Callback4_t callback4) {
  ArRetFunctor1< bool,ArRobotPacket * > *obj = (ArRetFunctor1< bool,ArRobotPacket * > *)objarg;
  SwigDirector_ArRetFunctor1_Bool_ArRobotPacketP *director = dynamic_cast<SwigDirector_ArRetFunctor1_Bool_ArRobotPacketP *>(obj);
  if (director) {
    director->swig_connect_director(callback0, callback1, callback2, callback3, callback4);
  }
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_ArRetFunctor1_Bool_ArgumentBuilder(void * jarg1) {
  ArRetFunctor1< bool,ArArgumentBuilder > *arg1 = (ArRetFunctor1< bool,ArArgumentBuilder > *) 0 ;
  
  arg1 = (ArRetFunctor1< bool,ArArgumentBuilder > *)jarg1; 
  delete arg1;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_ArRetFunctor1_Bool_ArgumentBuilder_invokeR__SWIG_0(void * jarg1) {
  unsigned int jresult ;
  ArRetFunctor1< bool,ArArgumentBuilder > *arg1 = (ArRetFunctor1< bool,ArArgumentBuilder > *) 0 ;
  bool result;
  
  arg1 = (ArRetFunctor1< bool,ArArgumentBuilder > *)jarg1; 
  result = (bool)(arg1)->invokeR();
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_ArRetFunctor1_Bool_ArgumentBuilder_invokeR__SWIG_1(void * jarg1, void * jarg2) {
  unsigned int jresult ;
  ArRetFunctor1< bool,ArArgumentBuilder > *arg1 = (ArRetFunctor1< bool,ArArgumentBuilder > *) 0 ;
  ArArgumentBuilder arg2 ;
  ArArgumentBuilder *argp2 ;
  bool result;
  
  arg1 = (ArRetFunctor1< bool,ArArgumentBuilder > *)jarg1; 
  argp2 = (ArArgumentBuilder *)jarg2; 
  if (!argp2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Attempt to dereference null ArArgumentBuilder", 0);
    return 0;
  }
  arg2 = *argp2; 
  result = (bool)(arg1)->invokeR(arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_ArRetFunctor1_Bool_ArgumentBuilder() {
  void * jresult ;
  ArRetFunctor1< bool,ArArgumentBuilder > *result = 0 ;
  
  result = (ArRetFunctor1< bool,ArArgumentBuilder > *)new SwigDirector_ArRetFunctor1_Bool_ArgumentBuilder();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_ArRetFunctor1_Bool_ArgumentBuilder_director_connect(void *objarg, SwigDirector_ArRetFunctor1_Bool_ArgumentBuilder::SWIG_Callback0_t callback0, SwigDirector_ArRetFunctor1_Bool_ArgumentBuilder::SWIG_Callback1_t callback1, SwigDirector_ArRetFunctor1_Bool_ArgumentBuilder::SWIG_Callback2_t callback2, SwigDirector_ArRetFunctor1_Bool_ArgumentBuilder::SWIG_Callback3_t callback3, SwigDirector_ArRetFunctor1_Bool_ArgumentBuilder::SWIG_Callback4_t callback4) {
  ArRetFunctor1< bool,ArArgumentBuilder > *obj = (ArRetFunctor1< bool,ArArgumentBuilder > *)objarg;
  SwigDirector_ArRetFunctor1_Bool_ArgumentBuilder *director = dynamic_cast<SwigDirector_ArRetFunctor1_Bool_ArgumentBuilder *>(obj);
  if (director) {
    director->swig_connect_director(callback0, callback1, callback2, callback3, callback4);
  }
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_ArRetFunctor1_Bool_ArgumentBuilderP(void * jarg1) {
  ArRetFunctor1< bool,ArArgumentBuilder * > *arg1 = (ArRetFunctor1< bool,ArArgumentBuilder * > *) 0 ;
  
  arg1 = (ArRetFunctor1< bool,ArArgumentBuilder * > *)jarg1; 
  delete arg1;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_ArRetFunctor1_Bool_ArgumentBuilderP_invokeR__SWIG_0(void * jarg1) {
  unsigned int jresult ;
  ArRetFunctor1< bool,ArArgumentBuilder * > *arg1 = (ArRetFunctor1< bool,ArArgumentBuilder * > *) 0 ;
  bool result;
  
  arg1 = (ArRetFunctor1< bool,ArArgumentBuilder * > *)jarg1; 
  result = (bool)(arg1)->invokeR();
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_ArRetFunctor1_Bool_ArgumentBuilderP_invokeR__SWIG_1(void * jarg1, void * jarg2) {
  unsigned int jresult ;
  ArRetFunctor1< bool,ArArgumentBuilder * > *arg1 = (ArRetFunctor1< bool,ArArgumentBuilder * > *) 0 ;
  ArArgumentBuilder *arg2 = (ArArgumentBuilder *) 0 ;
  bool result;
  
  arg1 = (ArRetFunctor1< bool,ArArgumentBuilder * > *)jarg1; 
  arg2 = (ArArgumentBuilder *)jarg2; 
  result = (bool)(arg1)->invokeR(arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_ArRetFunctor1_Bool_ArgumentBuilderP() {
  void * jresult ;
  ArRetFunctor1< bool,ArArgumentBuilder * > *result = 0 ;
  
  result = (ArRetFunctor1< bool,ArArgumentBuilder * > *)new SwigDirector_ArRetFunctor1_Bool_ArgumentBuilderP();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_ArRetFunctor1_Bool_ArgumentBuilderP_director_connect(void *objarg, SwigDirector_ArRetFunctor1_Bool_ArgumentBuilderP::SWIG_Callback0_t callback0, SwigDirector_ArRetFunctor1_Bool_ArgumentBuilderP::SWIG_Callback1_t callback1, SwigDirector_ArRetFunctor1_Bool_ArgumentBuilderP::SWIG_Callback2_t callback2, SwigDirector_ArRetFunctor1_Bool_ArgumentBuilderP::SWIG_Callback3_t callback3, SwigDirector_ArRetFunctor1_Bool_ArgumentBuilderP::SWIG_Callback4_t callback4) {
  ArRetFunctor1< bool,ArArgumentBuilder * > *obj = (ArRetFunctor1< bool,ArArgumentBuilder * > *)objarg;
  SwigDirector_ArRetFunctor1_Bool_ArgumentBuilderP *director = dynamic_cast<SwigDirector_ArRetFunctor1_Bool_ArgumentBuilderP *>(obj);
  if (director) {
    director->swig_connect_director(callback0, callback1, callback2, callback3, callback4);
  }
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_ArRetFunctor1_VoidP_VoidP(void * jarg1) {
  ArRetFunctor1< void *,void * > *arg1 = (ArRetFunctor1< void *,void * > *) 0 ;
  
  arg1 = (ArRetFunctor1< void *,void * > *)jarg1; 
  delete arg1;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_ArRetFunctor1_VoidP_VoidP_invokeR__SWIG_0(void * jarg1) {
  void * jresult ;
  ArRetFunctor1< void *,void * > *arg1 = (ArRetFunctor1< void *,void * > *) 0 ;
  void *result = 0 ;
  
  arg1 = (ArRetFunctor1< void *,void * > *)jarg1; 
  result = (void *)(arg1)->invokeR();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_ArRetFunctor1_VoidP_VoidP_invokeR__SWIG_1(void * jarg1, void * jarg2) {
  void * jresult ;
  ArRetFunctor1< void *,void * > *arg1 = (ArRetFunctor1< void *,void * > *) 0 ;
  void *arg2 = (void *) 0 ;
  void *result = 0 ;
  
  arg1 = (ArRetFunctor1< void *,void * > *)jarg1; 
  arg2 = (void *)jarg2; 
  result = (void *)(arg1)->invokeR(arg2);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_ArRetFunctor1_VoidP_VoidP() {
  void * jresult ;
  ArRetFunctor1< void *,void * > *result = 0 ;
  
  result = (ArRetFunctor1< void *,void * > *)new SwigDirector_ArRetFunctor1_VoidP_VoidP();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_ArRetFunctor1_VoidP_VoidP_director_connect(void *objarg, SwigDirector_ArRetFunctor1_VoidP_VoidP::SWIG_Callback0_t callback0, SwigDirector_ArRetFunctor1_VoidP_VoidP::SWIG_Callback1_t callback1, SwigDirector_ArRetFunctor1_VoidP_VoidP::SWIG_Callback2_t callback2, SwigDirector_ArRetFunctor1_VoidP_VoidP::SWIG_Callback3_t callback3, SwigDirector_ArRetFunctor1_VoidP_VoidP::SWIG_Callback4_t callback4) {
  ArRetFunctor1< void *,void * > *obj = (ArRetFunctor1< void *,void * > *)objarg;
  SwigDirector_ArRetFunctor1_VoidP_VoidP *director = dynamic_cast<SwigDirector_ArRetFunctor1_VoidP_VoidP *>(obj);
  if (director) {
    director->swig_connect_director(callback0, callback1, callback2, callback3, callback4);
  }
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_ArGenericCallbackList_ArFunctorP__SWIG_0(char * jarg1, int jarg2, unsigned int jarg3) {
  void * jresult ;
  char *arg1 = (char *) 0 ;
  ArLog::LogLevel arg2 ;
  bool arg3 ;
  ArGenericCallbackList< ArFunctor * > *result = 0 ;
  
  arg1 = (char *)jarg1; 
  arg2 = (ArLog::LogLevel)jarg2; 
  arg3 = jarg3 ? true : false; 
  result = (ArGenericCallbackList< ArFunctor * > *)new ArGenericCallbackList< ArFunctor * >((char const *)arg1,arg2,arg3);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_ArGenericCallbackList_ArFunctorP__SWIG_1(char * jarg1, int jarg2) {
  void * jresult ;
  char *arg1 = (char *) 0 ;
  ArLog::LogLevel arg2 ;
  ArGenericCallbackList< ArFunctor * > *result = 0 ;
  
  arg1 = (char *)jarg1; 
  arg2 = (ArLog::LogLevel)jarg2; 
  result = (ArGenericCallbackList< ArFunctor * > *)new ArGenericCallbackList< ArFunctor * >((char const *)arg1,arg2);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_ArGenericCallbackList_ArFunctorP__SWIG_2(char * jarg1) {
  void * jresult ;
  char *arg1 = (char *) 0 ;
  ArGenericCallbackList< ArFunctor * > *result = 0 ;
  
  arg1 = (char *)jarg1; 
  result = (ArGenericCallbackList< ArFunctor * > *)new ArGenericCallbackList< ArFunctor * >((char const *)arg1);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_ArGenericCallbackList_ArFunctorP__SWIG_3() {
  void * jresult ;
  ArGenericCallbackList< ArFunctor * > *result = 0 ;
  
  result = (ArGenericCallbackList< ArFunctor * > *)new ArGenericCallbackList< ArFunctor * >();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_ArGenericCallbackList_ArFunctorP(void * jarg1) {
  ArGenericCallbackList< ArFunctor * > *arg1 = (ArGenericCallbackList< ArFunctor * > *) 0 ;
  
  arg1 = (ArGenericCallbackList< ArFunctor * > *)jarg1; 
  delete arg1;
}


SWIGEXPORT void SWIGSTDCALL CSharp_ArGenericCallbackList_ArFunctorP_addCallback__SWIG_0(void * jarg1, void * jarg2, int jarg3) {
  ArGenericCallbackList< ArFunctor * > *arg1 = (ArGenericCallbackList< ArFunctor * > *) 0 ;
  ArFunctor *arg2 = (ArFunctor *) 0 ;
  int arg3 ;
  
  arg1 = (ArGenericCallbackList< ArFunctor * > *)jarg1; 
  arg2 = (ArFunctor *)jarg2; 
  arg3 = (int)jarg3; 
  (arg1)->addCallback(arg2,arg3);
}


SWIGEXPORT void SWIGSTDCALL CSharp_ArGenericCallbackList_ArFunctorP_addCallback__SWIG_1(void * jarg1, void * jarg2) {
  ArGenericCallbackList< ArFunctor * > *arg1 = (ArGenericCallbackList< ArFunctor * > *) 0 ;
  ArFunctor *arg2 = (ArFunctor *) 0 ;
  
  arg1 = (ArGenericCallbackList< ArFunctor * > *)jarg1; 
  arg2 = (ArFunctor *)jarg2; 
  (arg1)->addCallback(arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_ArGenericCallbackList_ArFunctorP_remCallback(void * jarg1, void * jarg2) {
  ArGenericCallbackList< ArFunctor * > *arg1 = (ArGenericCallbackList< ArFunctor * > *) 0 ;
  ArFunctor *arg2 = (ArFunctor *) 0 ;
  
  arg1 = (ArGenericCallbackList< ArFunctor * > *)jarg1; 
  arg2 = (ArFunctor *)jarg2; 
  (arg1)->remCallback(arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_ArGenericCallbackList_ArFunctorP_setName(void * jarg1, char * jarg2) {
  ArGenericCallbackList< ArFunctor * > *arg1 = (ArGenericCallbackList< ArFunctor * > *) 0 ;
  char *arg2 = (char *) 0 ;
  
  arg1 = (ArGenericCallbackList< ArFunctor * > *)jarg1; 
  arg2 = (char *)jarg2; 
  (arg1)->setName((char const *)arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_ArGenericCallbackList_ArFunctorP_setLogLevel(void * jarg1, int jarg2) {
  ArGenericCallbackList< ArFunctor * > *arg1 = (ArGenericCallbackList< ArFunctor * > *) 0 ;
  ArLog::LogLevel arg2 ;
  
  arg1 = (ArGenericCallbackList< ArFunctor * > *)jarg1; 
  arg2 = (ArLog::LogLevel)jarg2; 
  (arg1)->setLogLevel(arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_ArGenericCallbackList_ArFunctorP_setSingleShot(void * jarg1, unsigned int jarg2) {
  ArGenericCallbackList< ArFunctor * > *arg1 = (ArGenericCallbackList< ArFunctor * > *) 0 ;
  bool arg2 ;
  
  arg1 = (ArGenericCallbackList< ArFunctor * > *)jarg1; 
  arg2 = jarg2 ? true : false; 
  (arg1)->setSingleShot(arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_ArGenericCallbackList_ArFunctorP_setLogging(void * jarg1, unsigned int jarg2) {
  ArGenericCallbackList< ArFunctor * > *arg1 = (ArGenericCallbackList< ArFunctor * > *) 0 ;
  bool arg2 ;
  
  arg1 = (ArGenericCallbackList< ArFunctor * > *)jarg1; 
  arg2 = jarg2 ? true : false; 
  (arg1)->setLogging(arg2);
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_ArACTSBlob() {
  void * jresult ;
  ArACTSBlob *result = 0 ;
  
  result = (ArACTSBlob *)new ArACTSBlob();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_ArACTSBlob(void * jarg1) {
  ArACTSBlob *arg1 = (ArACTSBlob *) 0 ;
  
  arg1 = (ArACTSBlob *)jarg1; 
  delete arg1;
}


SWIGEXPORT int SWIGSTDCALL CSharp_ArACTSBlob_getArea(void * jarg1) {
  int jresult ;
  ArACTSBlob *arg1 = (ArACTSBlob *) 0 ;
  int result;
  
  arg1 = (ArACTSBlob *)jarg1; 
  result = (int)(arg1)->getArea();
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_ArACTSBlob_getXCG(void * jarg1) {
  int jresult ;
  ArACTSBlob *arg1 = (ArACTSBlob *) 0 ;
  int result;
  
  arg1 = (ArACTSBlob *)jarg1; 
  result = (int)(arg1)->getXCG();
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_ArACTSBlob_getYCG(void * jarg1) {
  int jresult ;
  ArACTSBlob *arg1 = (ArACTSBlob *) 0 ;
  int result;
  
  arg1 = (ArACTSBlob *)jarg1; 
  result = (int)(arg1)->getYCG();
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_ArACTSBlob_getLeft(void * jarg1) {
  int jresult ;
  ArACTSBlob *arg1 = (ArACTSBlob *) 0 ;
  int result;
  
  arg1 = (ArACTSBlob *)jarg1; 
  result = (int)(arg1)->getLeft();
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_ArACTSBlob_getRight(void * jarg1) {
  int jresult ;
  ArACTSBlob *arg1 = (ArACTSBlob *) 0 ;
  int result;
  
  arg1 = (ArACTSBlob *)jarg1; 
  result = (int)(arg1)->getRight();
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_ArACTSBlob_getTop(void * jarg1) {
  int jresult ;
  ArACTSBlob *arg1 = (ArACTSBlob *) 0 ;
  int result;
  
  arg1 = (ArACTSBlob *)jarg1; 
  result = (int)(arg1)->getTop();
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_ArACTSBlob_getBottom(void * jarg1) {
  int jresult ;
  ArACTSBlob *arg1 = (ArACTSBlob *) 0 ;
  int result;
  
  arg1 = (ArACTSBlob *)jarg1; 
  result = (int)(arg1)->getBottom();
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_ArACTSBlob_setArea(void * jarg1, int jarg2) {
  ArACTSBlob *arg1 = (ArACTSBlob *) 0 ;
  int arg2 ;
  
  arg1 = (ArACTSBlob *)jarg1; 
  arg2 = (int)jarg2; 
  (arg1)->setArea(arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_ArACTSBlob_setXCG(void * jarg1, int jarg2) {
  ArACTSBlob *arg1 = (ArACTSBlob *) 0 ;
  int arg2 ;
  
  arg1 = (ArACTSBlob *)jarg1; 
  arg2 = (int)jarg2; 
  (arg1)->setXCG(arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_ArACTSBlob_setYCG(void * jarg1, int jarg2) {
  ArACTSBlob *arg1 = (ArACTSBlob *) 0 ;
  int arg2 ;
  
  arg1 = (ArACTSBlob *)jarg1; 
  arg2 = (int)jarg2; 
  (arg1)->setYCG(arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_ArACTSBlob_setLeft(void * jarg1, int jarg2) {
  ArACTSBlob *arg1 = (ArACTSBlob *) 0 ;
  int arg2 ;
  
  arg1 = (ArACTSBlob *)jarg1; 
  arg2 = (int)jarg2; 
  (arg1)->setLeft(arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_ArACTSBlob_setRight(void * jarg1, int jarg2) {
  ArACTSBlob *arg1 = (ArACTSBlob *) 0 ;
  int arg2 ;
  
  arg1 = (ArACTSBlob *)jarg1; 
  arg2 = (int)jarg2; 
  (arg1)->setRight(arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_ArACTSBlob_setTop(void * jarg1, int jarg2) {
  ArACTSBlob *arg1 = (ArACTSBlob *) 0 ;
  int arg2 ;
  
  arg1 = (ArACTSBlob *)jarg1; 
  arg2 = (int)jarg2; 
  (arg1)->setTop(arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_ArACTSBlob_setBottom(void * jarg1, int jarg2) {
  ArACTSBlob *arg1 = (ArACTSBlob *) 0 ;
  int arg2 ;
  
  arg1 = (ArACTSBlob *)jarg1; 
  arg2 = (int)jarg2; 
  (arg1)->setBottom(arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_ArACTSBlob_log(void * jarg1) {
  ArACTSBlob *arg1 = (ArACTSBlob *) 0 ;
  
  arg1 = (ArACTSBlob *)jarg1; 
  (arg1)->log();
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_ArACTS_1_2() {
  void * jresult ;
  ArACTS_1_2 *result = 0 ;
  
  result = (ArACTS_1_2 *)new ArACTS_1_2();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_ArACTS_1_2(void * jarg1) {
  ArACTS_1_2 *arg1 = (ArACTS_1_2 *) 0 ;
  
  arg1 = (ArACTS_1_2 *)jarg1; 
  delete arg1;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_ArACTS_1_2_openPort__SWIG_0(void * jarg1, void * jarg2, char * jarg3, int jarg4) {
  unsigned int jresult ;
  ArACTS_1_2 *arg1 = (ArACTS_1_2 *) 0 ;
  ArRobot *arg2 = (ArRobot *) 0 ;
  char *arg3 = (char *) 0 ;
  int arg4 ;
  bool result;
  
  arg1 = (ArACTS_1_2 *)jarg1; 
  arg2 = (ArRobot *)jarg2; 
  arg3 = (char *)jarg3; 
  arg4 = (int)jarg4; 
  result = (bool)(arg1)->openPort(arg2,(char const *)arg3,arg4);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_ArACTS_1_2_openPort__SWIG_1(void * jarg1, void * jarg2, char * jarg3) {
  unsigned int jresult ;
  ArACTS_1_2 *arg1 = (ArACTS_1_2 *) 0 ;
  ArRobot *arg2 = (ArRobot *) 0 ;
  char *arg3 = (char *) 0 ;
  bool result;
  
  arg1 = (ArACTS_1_2 *)jarg1; 
  arg2 = (ArRobot *)jarg2; 
  arg3 = (char *)jarg3; 
  result = (bool)(arg1)->openPort(arg2,(char const *)arg3);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_ArACTS_1_2_openPort__SWIG_2(void * jarg1, void * jarg2) {
  unsigned int jresult ;
  ArACTS_1_2 *arg1 = (ArACTS_1_2 *) 0 ;
  ArRobot *arg2 = (ArRobot *) 0 ;
  bool result;
  
  arg1 = (ArACTS_1_2 *)jarg1; 
  arg2 = (ArRobot *)jarg2; 
  result = (bool)(arg1)->openPort(arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_ArACTS_1_2_closePort(void * jarg1) {
  unsigned int jresult ;
  ArACTS_1_2 *arg1 = (ArACTS_1_2 *) 0 ;
  bool result;
  
  arg1 = (ArACTS_1_2 *)jarg1; 
  result = (bool)(arg1)->closePort();
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_ArACTS_1_2_isConnected(void * jarg1) {
  unsigned int jresult ;
  ArACTS_1_2 *arg1 = (ArACTS_1_2 *) 0 ;
  bool result;
  
  arg1 = (ArACTS_1_2 *)jarg1; 
  result = (bool)(arg1)->isConnected();
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_ArACTS_1_2_getRobot(void * jarg1) {
  void * jresult ;
  ArACTS_1_2 *arg1 = (ArACTS_1_2 *) 0 ;
  ArRobot *result = 0 ;
  
  arg1 = (ArACTS_1_2 *)jarg1; 
  result = (ArRobot *)(arg1)->getRobot();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_ArACTS_1_2_setRobot(void * jarg1, void * jarg2) {
  ArACTS_1_2 *arg1 = (ArACTS_1_2 *) 0 ;
  ArRobot *arg2 = (ArRobot *) 0 ;
  
  arg1 = (ArACTS_1_2 *)jarg1; 
  arg2 = (ArRobot *)jarg2; 
  (arg1)->setRobot(arg2);
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_ArACTS_1_2_requestPacket(void * jarg1) {
  unsigned int jresult ;
  ArACTS_1_2 *arg1 = (ArACTS_1_2 *) 0 ;
  bool result;
  
  arg1 = (ArACTS_1_2 *)jarg1; 
  result = (bool)(arg1)->requestPacket();
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_ArACTS_1_2_requestQuit(void * jarg1) {
  unsigned int jresult ;
  ArACTS_1_2 *arg1 = (ArACTS_1_2 *) 0 ;
  bool result;
  
  arg1 = (ArACTS_1_2 *)jarg1; 
  result = (bool)(arg1)->requestQuit();
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_ArACTS_1_2_receiveBlobInfo(void * jarg1) {
  unsigned int jresult ;
  ArACTS_1_2 *arg1 = (ArACTS_1_2 *) 0 ;
  bool result;
  
  arg1 = (ArACTS_1_2 *)jarg1; 
  result = (bool)(arg1)->receiveBlobInfo();
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_ArACTS_1_2_getNumBlobs(void * jarg1, int jarg2) {
  int jresult ;
  ArACTS_1_2 *arg1 = (ArACTS_1_2 *) 0 ;
  int arg2 ;
  int result;
  
  arg1 = (ArACTS_1_2 *)jarg1; 
  arg2 = (int)jarg2; 
  result = (int)(arg1)->getNumBlobs(arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_ArACTS_1_2_getBlob(void * jarg1, int jarg2, int jarg3, void * jarg4) {
  unsigned int jresult ;
  ArACTS_1_2 *arg1 = (ArACTS_1_2 *) 0 ;
  int arg2 ;
  int arg3 ;
  ArACTSBlob *arg4 = (ArACTSBlob *) 0 ;
  bool result;
  
  arg1 = (ArACTS_1_2 *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (int)jarg3; 
  arg4 = (ArACTSBlob *)jarg4; 
  result = (bool)(arg1)->getBlob(arg2,arg3,arg4);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_ArACTS_1_2_actsHandler(void * jarg1) {
  ArACTS_1_2 *arg1 = (ArACTS_1_2 *) 0 ;
  
  arg1 = (ArACTS_1_2 *)jarg1; 
  (arg1)->actsHandler();
}


SWIGEXPORT void SWIGSTDCALL CSharp_ArACTS_1_2_invert__SWIG_0(void * jarg1, int jarg2, int jarg3) {
  ArACTS_1_2 *arg1 = (ArACTS_1_2 *) 0 ;
  int arg2 ;
  int arg3 ;
  
  arg1 = (ArACTS_1_2 *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (int)jarg3; 
  (arg1)->invert(arg2,arg3);
}


SWIGEXPORT void SWIGSTDCALL CSharp_ArACTS_1_2_invert__SWIG_1(void * jarg1, int jarg2) {
  ArACTS_1_2 *arg1 = (ArACTS_1_2 *) 0 ;
  int arg2 ;
  
  arg1 = (ArACTS_1_2 *)jarg1; 
  arg2 = (int)jarg2; 
  (arg1)->invert(arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_ArACTS_1_2_invert__SWIG_2(void * jarg1) {
  ArACTS_1_2 *arg1 = (ArACTS_1_2 *) 0 ;
  
  arg1 = (ArACTS_1_2 *)jarg1; 
  (arg1)->invert();
}


SWIGEXPORT int SWIGSTDCALL CSharp_ArAMPTUCommands_ABSTILT_get() {
  int jresult ;
  int result;
  
  result = (int)ArAMPTUCommands::ABSTILT;
  jresult = (int)result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_ArAMPTUCommands_RELTILTU_get() {
  int jresult ;
  int result;
  
  result = (int)ArAMPTUCommands::RELTILTU;
  jresult = (int)result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_ArAMPTUCommands_RELTILTD_get() {
  int jresult ;
  int result;
  
  result = (int)ArAMPTUCommands::RELTILTD;
  jresult = (int)result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_ArAMPTUCommands_ABSPAN_get() {
  int jresult ;
  int result;
  
  result = (int)ArAMPTUCommands::ABSPAN;
  jresult = (int)result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_ArAMPTUCommands_RELPANCW_get() {
  int jresult ;
  int result;
  
  result = (int)ArAMPTUCommands::RELPANCW;
  jresult = (int)result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_ArAMPTUCommands_RELPANCCW_get() {
  int jresult ;
  int result;
  
  result = (int)ArAMPTUCommands::RELPANCCW;
  jresult = (int)result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_ArAMPTUCommands_PANTILT_get() {
  int jresult ;
  int result;
  
  result = (int)ArAMPTUCommands::PANTILT;
  jresult = (int)result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_ArAMPTUCommands_PANTILTUCW_get() {
  int jresult ;
  int result;
  
  result = (int)ArAMPTUCommands::PANTILTUCW;
  jresult = (int)result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_ArAMPTUCommands_PANTILTDCW_get() {
  int jresult ;
  int result;
  
  result = (int)ArAMPTUCommands::PANTILTDCW;
  jresult = (int)result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_ArAMPTUCommands_PANTILTUCCW_get() {
  int jresult ;
  int result;
  
  result = (int)ArAMPTUCommands::PANTILTUCCW;
  jresult = (int)result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_ArAMPTUCommands_PANTILTDCCW_get() {
  int jresult ;
  int result;
  
  result = (int)ArAMPTUCommands::PANTILTDCCW;
  jresult = (int)result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_ArAMPTUCommands_ZOOM_get() {
  int jresult ;
  int result;
  
  result = (int)ArAMPTUCommands::ZOOM;
  jresult = (int)result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_ArAMPTUCommands_PAUSE_get() {
  int jresult ;
  int result;
  
  result = (int)ArAMPTUCommands::PAUSE;
  jresult = (int)result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_ArAMPTUCommands_CONT_get() {
  int jresult ;
  int result;
  
  result = (int)ArAMPTUCommands::CONT;
  jresult = (int)result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_ArAMPTUCommands_PURGE_get() {
  int jresult ;
  int result;
  
  result = (int)ArAMPTUCommands::PURGE;
  jresult = (int)result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_ArAMPTUCommands_STATUS_get() {
  int jresult ;
  int result;
  
  result = (int)ArAMPTUCommands::STATUS;
  jresult = (int)result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_ArAMPTUCommands_INIT_get() {
  int jresult ;
  int result;
  
  result = (int)ArAMPTUCommands::INIT;
  jresult = (int)result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_ArAMPTUCommands_RESP_get() {
  int jresult ;
  int result;
  
  result = (int)ArAMPTUCommands::RESP;
  jresult = (int)result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_ArAMPTUCommands_PANSLEW_get() {
  int jresult ;
  int result;
  
  result = (int)ArAMPTUCommands::PANSLEW;
  jresult = (int)result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_ArAMPTUCommands_TILTSLEW_get() {
  int jresult ;
  int result;
  
  result = (int)ArAMPTUCommands::TILTSLEW;
  jresult = (int)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_ArAMPTUCommands() {
  void * jresult ;
  ArAMPTUCommands *result = 0 ;
  
  result = (ArAMPTUCommands *)new ArAMPTUCommands();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_ArAMPTUCommands(void * jarg1) {
  ArAMPTUCommands *arg1 = (ArAMPTUCommands *) 0 ;
  
  arg1 = (ArAMPTUCommands *)jarg1; 
  delete arg1;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_ArAMPTUPacket__SWIG_0(unsigned short jarg1) {
  void * jresult ;
  ArTypes::UByte2 arg1 ;
  ArAMPTUPacket *result = 0 ;
  
  arg1 = (ArTypes::UByte2)jarg1; 
  result = (ArAMPTUPacket *)new ArAMPTUPacket(arg1);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_ArAMPTUPacket__SWIG_1() {
  void * jresult ;
  ArAMPTUPacket *result = 0 ;
  
  result = (ArAMPTUPacket *)new ArAMPTUPacket();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_ArAMPTUPacket(void * jarg1) {
  ArAMPTUPacket *arg1 = (ArAMPTUPacket *) 0 ;
  
  arg1 = (ArAMPTUPacket *)jarg1; 
  delete arg1;
}


SWIGEXPORT unsigned char SWIGSTDCALL CSharp_ArAMPTUPacket_getUnitNumber(void * jarg1) {
  unsigned char jresult ;
  ArAMPTUPacket *arg1 = (ArAMPTUPacket *) 0 ;
  unsigned char result;
  
  arg1 = (ArAMPTUPacket *)jarg1; 
  result = (unsigned char)(arg1)->getUnitNumber();
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_ArAMPTUPacket_setUnitNumber(void * jarg1, unsigned char jarg2) {
  unsigned int jresult ;
  ArAMPTUPacket *arg1 = (ArAMPTUPacket *) 0 ;
  unsigned char arg2 ;
  bool result;
  
  arg1 = (ArAMPTUPacket *)jarg1; 
  arg2 = (unsigned char)jarg2; 
  result = (bool)(arg1)->setUnitNumber(arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_ArAMPTUPacket_byteToBuf(void * jarg1, char jarg2) {
  ArAMPTUPacket *arg1 = (ArAMPTUPacket *) 0 ;
  ArTypes::Byte arg2 ;
  
  arg1 = (ArAMPTUPacket *)jarg1; 
  arg2 = (ArTypes::Byte)jarg2; 
  (arg1)->byteToBuf(arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_ArAMPTUPacket_byte2ToBuf(void * jarg1, short jarg2) {
  ArAMPTUPacket *arg1 = (ArAMPTUPacket *) 0 ;
  ArTypes::Byte2 arg2 ;
  
  arg1 = (ArAMPTUPacket *)jarg1; 
  arg2 = (ArTypes::Byte2)jarg2; 
  (arg1)->byte2ToBuf(arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_ArAMPTUPacket_finalizePacket(void * jarg1) {
  ArAMPTUPacket *arg1 = (ArAMPTUPacket *) 0 ;
  
  arg1 = (ArAMPTUPacket *)jarg1; 
  (arg1)->finalizePacket();
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_ArAMPTU__SWIG_0(void * jarg1, int jarg2) {
  void * jresult ;
  ArRobot *arg1 = (ArRobot *) 0 ;
  int arg2 ;
  ArAMPTU *result = 0 ;
  
  arg1 = (ArRobot *)jarg1; 
  arg2 = (int)jarg2; 
  result = (ArAMPTU *)new ArAMPTU(arg1,arg2);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_ArAMPTU__SWIG_1(void * jarg1) {
  void * jresult ;
  ArRobot *arg1 = (ArRobot *) 0 ;
  ArAMPTU *result = 0 ;
  
  arg1 = (ArRobot *)jarg1; 
  result = (ArAMPTU *)new ArAMPTU(arg1);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_ArAMPTU(void * jarg1) {
  ArAMPTU *arg1 = (ArAMPTU *) 0 ;
  
  arg1 = (ArAMPTU *)jarg1; 
  delete arg1;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_ArAMPTU_init(void * jarg1) {
  unsigned int jresult ;
  ArAMPTU *arg1 = (ArAMPTU *) 0 ;
  bool result;
  
  arg1 = (ArAMPTU *)jarg1; 
  result = (bool)(arg1)->init();
  jresult = result; 
  return jresult;
}


SWIGEXPORT char * SWIGSTDCALL CSharp_ArAMPTU_getTypeName(void * jarg1) {
  char * jresult ;
  ArAMPTU *arg1 = (ArAMPTU *) 0 ;
  char *result = 0 ;
  
  arg1 = (ArAMPTU *)jarg1; 
  result = (char *)(arg1)->getTypeName();
  jresult = SWIG_csharp_string_callback((const char *)result); 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_ArAMPTU_panSlew(void * jarg1, double jarg2) {
  unsigned int jresult ;
  ArAMPTU *arg1 = (ArAMPTU *) 0 ;
  double arg2 ;
  bool result;
  
  arg1 = (ArAMPTU *)jarg1; 
  arg2 = (double)jarg2; 
  result = (bool)(arg1)->panSlew(arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_ArAMPTU_tiltSlew(void * jarg1, double jarg2) {
  unsigned int jresult ;
  ArAMPTU *arg1 = (ArAMPTU *) 0 ;
  double arg2 ;
  bool result;
  
  arg1 = (ArAMPTU *)jarg1; 
  arg2 = (double)jarg2; 
  result = (bool)(arg1)->tiltSlew(arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_ArAMPTU_canZoom(void * jarg1) {
  unsigned int jresult ;
  ArAMPTU *arg1 = (ArAMPTU *) 0 ;
  bool result;
  
  arg1 = (ArAMPTU *)jarg1; 
  result = (bool)((ArAMPTU const *)arg1)->canZoom();
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_ArAMPTU_canPanTiltSlew(void * jarg1) {
  unsigned int jresult ;
  ArAMPTU *arg1 = (ArAMPTU *) 0 ;
  bool result;
  
  arg1 = (ArAMPTU *)jarg1; 
  result = (bool)(arg1)->canPanTiltSlew();
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_ArAMPTU_pause(void * jarg1) {
  unsigned int jresult ;
  ArAMPTU *arg1 = (ArAMPTU *) 0 ;
  bool result;
  
  arg1 = (ArAMPTU *)jarg1; 
  result = (bool)(arg1)->pause();
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_ArAMPTU_resume(void * jarg1) {
  unsigned int jresult ;
  ArAMPTU *arg1 = (ArAMPTU *) 0 ;
  bool result;
  
  arg1 = (ArAMPTU *)jarg1; 
  result = (bool)(arg1)->resume();
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_ArAMPTU_purge(void * jarg1) {
  unsigned int jresult ;
  ArAMPTU *arg1 = (ArAMPTU *) 0 ;
  bool result;
  
  arg1 = (ArAMPTU *)jarg1; 
  result = (bool)(arg1)->purge();
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_ArAMPTU_requestStatus(void * jarg1) {
  unsigned int jresult ;
  ArAMPTU *arg1 = (ArAMPTU *) 0 ;
  bool result;
  
  arg1 = (ArAMPTU *)jarg1; 
  result = (bool)(arg1)->requestStatus();
  jresult = result; 
  return jresult;
}


SWIGEXPORT double SWIGSTDCALL CSharp_ArAMPTU_getPan_i(void * jarg1) {
  double jresult ;
  ArAMPTU *arg1 = (ArAMPTU *) 0 ;
  double result;
  
  arg1 = (ArAMPTU *)jarg1; 
  result = (double)((ArAMPTU const *)arg1)->getPan_i();
  jresult = result; 
  return jresult;
}


SWIGEXPORT double SWIGSTDCALL CSharp_ArAMPTU_getTilt_i(void * jarg1) {
  double jresult ;
  ArAMPTU *arg1 = (ArAMPTU *) 0 ;
  double result;
  
  arg1 = (ArAMPTU *)jarg1; 
  result = (double)((ArAMPTU const *)arg1)->getTilt_i();
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_ArAMPTU_MIN_SLEW_get() {
  int jresult ;
  int result;
  
  result = (int)ArAMPTU::MIN_SLEW;
  jresult = (int)result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_ArAMPTU_MAX_TILT_SLEW_get() {
  int jresult ;
  int result;
  
  result = (int)ArAMPTU::MAX_TILT_SLEW;
  jresult = (int)result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_ArAMPTU_MAX_PAN_SLEW_get() {
  int jresult ;
  int result;
  
  result = (int)ArAMPTU::MAX_PAN_SLEW;
  jresult = (int)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_ArASyncTask(void * jarg1) {
  ArASyncTask *arg1 = (ArASyncTask *) 0 ;
  
  arg1 = (ArASyncTask *)jarg1; 
  delete arg1;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_ArASyncTask_runThread(void * jarg1, void * jarg2) {
  void * jresult ;
  ArASyncTask *arg1 = (ArASyncTask *) 0 ;
  void *arg2 = (void *) 0 ;
  void *result = 0 ;
  
  arg1 = (ArASyncTask *)jarg1; 
  arg2 = (void *)jarg2; 
  result = (void *)(arg1)->runThread(arg2);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_ArASyncTask_run(void * jarg1) {
  ArASyncTask *arg1 = (ArASyncTask *) 0 ;
  
  arg1 = (ArASyncTask *)jarg1; 
  (arg1)->run();
}


SWIGEXPORT void SWIGSTDCALL CSharp_ArASyncTask_runAsync(void * jarg1) {
  ArASyncTask *arg1 = (ArASyncTask *) 0 ;
  
  arg1 = (ArASyncTask *)jarg1; 
  (arg1)->runAsync();
}


SWIGEXPORT void SWIGSTDCALL CSharp_ArASyncTask_stopRunning(void * jarg1) {
  ArASyncTask *arg1 = (ArASyncTask *) 0 ;
  
  arg1 = (ArASyncTask *)jarg1; 
  (arg1)->stopRunning();
}


SWIGEXPORT int SWIGSTDCALL CSharp_ArASyncTask_create__SWIG_0(void * jarg1, unsigned int jarg2, unsigned int jarg3) {
  int jresult ;
  ArASyncTask *arg1 = (ArASyncTask *) 0 ;
  bool arg2 ;
  bool arg3 ;
  int result;
  
  arg1 = (ArASyncTask *)jarg1; 
  arg2 = jarg2 ? true : false; 
  arg3 = jarg3 ? true : false; 
  result = (int)(arg1)->create(arg2,arg3);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_ArASyncTask_create__SWIG_1(void * jarg1, unsigned int jarg2) {
  int jresult ;
  ArASyncTask *arg1 = (ArASyncTask *) 0 ;
  bool arg2 ;
  int result;
  
  arg1 = (ArASyncTask *)jarg1; 
  arg2 = jarg2 ? true : false; 
  result = (int)(arg1)->create(arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_ArASyncTask_create__SWIG_2(void * jarg1) {
  int jresult ;
  ArASyncTask *arg1 = (ArASyncTask *) 0 ;
  int result;
  
  arg1 = (ArASyncTask *)jarg1; 
  result = (int)(arg1)->create();
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_ArASyncTask_runInThisThread__SWIG_0(void * jarg1, void * jarg2) {
  void * jresult ;
  ArASyncTask *arg1 = (ArASyncTask *) 0 ;
  void *arg2 = (void *) 0 ;
  void *result = 0 ;
  
  arg1 = (ArASyncTask *)jarg1; 
  arg2 = (void *)jarg2; 
  result = (void *)(arg1)->runInThisThread(arg2);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_ArASyncTask_runInThisThread__SWIG_1(void * jarg1) {
  void * jresult ;
  ArASyncTask *arg1 = (ArASyncTask *) 0 ;
  void *result = 0 ;
  
  arg1 = (ArASyncTask *)jarg1; 
  result = (void *)(arg1)->runInThisThread();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT char * SWIGSTDCALL CSharp_ArASyncTask_getThreadActivity(void * jarg1) {
  char * jresult ;
  ArASyncTask *arg1 = (ArASyncTask *) 0 ;
  char *result = 0 ;
  
  arg1 = (ArASyncTask *)jarg1; 
  result = (char *)(arg1)->getThreadActivity();
  jresult = SWIG_csharp_string_callback((const char *)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_ArAction__SWIG_0(char * jarg1, char * jarg2) {
  void * jresult ;
  char *arg1 = (char *) 0 ;
  char *arg2 = (char *) 0 ;
  ArAction *result = 0 ;
  
  arg1 = (char *)jarg1; 
  arg2 = (char *)jarg2; 
  result = (ArAction *)new SwigDirector_ArAction((char const *)arg1,(char const *)arg2);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_ArAction__SWIG_1(char * jarg1) {
  void * jresult ;
  char *arg1 = (char *) 0 ;
  ArAction *result = 0 ;
  
  arg1 = (char *)jarg1; 
  result = (ArAction *)new SwigDirector_ArAction((char const *)arg1);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_ArAction(void * jarg1) {
  ArAction *arg1 = (ArAction *) 0 ;
  
  arg1 = (ArAction *)jarg1; 
  delete arg1;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_ArAction_isActive(void * jarg1) {
  unsigned int jresult ;
  ArAction *arg1 = (ArAction *) 0 ;
  bool result;
  
  arg1 = (ArAction *)jarg1; 
  result = (bool)((ArAction const *)arg1)->isActive();
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_ArAction_isActiveSwigExplicitArAction(void * jarg1) {
  unsigned int jresult ;
  ArAction *arg1 = (ArAction *) 0 ;
  bool result;
  
  arg1 = (ArAction *)jarg1; 
  result = (bool)((ArAction const *)arg1)->ArAction::isActive();
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_ArAction_activate(void * jarg1) {
  ArAction *arg1 = (ArAction *) 0 ;
  
  arg1 = (ArAction *)jarg1; 
  (arg1)->activate();
}


SWIGEXPORT void SWIGSTDCALL CSharp_ArAction_activateSwigExplicitArAction(void * jarg1) {
  ArAction *arg1 = (ArAction *) 0 ;
  
  arg1 = (ArAction *)jarg1; 
  (arg1)->ArAction::activate();
}


SWIGEXPORT void SWIGSTDCALL CSharp_ArAction_deactivate(void * jarg1) {
  ArAction *arg1 = (ArAction *) 0 ;
  
  arg1 = (ArAction *)jarg1; 
  (arg1)->deactivate();
}


SWIGEXPORT void SWIGSTDCALL CSharp_ArAction_deactivateSwigExplicitArAction(void * jarg1) {
  ArAction *arg1 = (ArAction *) 0 ;
  
  arg1 = (ArAction *)jarg1; 
  (arg1)->ArAction::deactivate();
}


SWIGEXPORT void * SWIGSTDCALL CSharp_ArAction_fire(void * jarg1, void * jarg2) {
  void * jresult ;
  ArAction *arg1 = (ArAction *) 0 ;
  ArActionDesired arg2 ;
  ArActionDesired *argp2 ;
  ArActionDesired *result = 0 ;
  
  arg1 = (ArAction *)jarg1; 
  argp2 = (ArActionDesired *)jarg2; 
  if (!argp2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Attempt to dereference null ArActionDesired", 0);
    return 0;
  }
  arg2 = *argp2; 
  result = (ArActionDesired *)(arg1)->fire(arg2);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_ArAction_setRobot(void * jarg1, void * jarg2) {
  ArAction *arg1 = (ArAction *) 0 ;
  ArRobot *arg2 = (ArRobot *) 0 ;
  
  arg1 = (ArAction *)jarg1; 
  arg2 = (ArRobot *)jarg2; 
  (arg1)->setRobot(arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_ArAction_setRobotSwigExplicitArAction(void * jarg1, void * jarg2) {
  ArAction *arg1 = (ArAction *) 0 ;
  ArRobot *arg2 = (ArRobot *) 0 ;
  
  arg1 = (ArAction *)jarg1; 
  arg2 = (ArRobot *)jarg2; 
  (arg1)->ArAction::setRobot(arg2);
}


SWIGEXPORT int SWIGSTDCALL CSharp_ArAction_getNumArgs(void * jarg1) {
  int jresult ;
  ArAction *arg1 = (ArAction *) 0 ;
  int result;
  
  arg1 = (ArAction *)jarg1; 
  result = (int)((ArAction const *)arg1)->getNumArgs();
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_ArAction_getNumArgsSwigExplicitArAction(void * jarg1) {
  int jresult ;
  ArAction *arg1 = (ArAction *) 0 ;
  int result;
  
  arg1 = (ArAction *)jarg1; 
  result = (int)((ArAction const *)arg1)->ArAction::getNumArgs();
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_ArAction_getArg(void * jarg1, int jarg2) {
  void * jresult ;
  ArAction *arg1 = (ArAction *) 0 ;
  int arg2 ;
  ArArg *result = 0 ;
  
  arg1 = (ArAction *)jarg1; 
  arg2 = (int)jarg2; 
  result = (ArArg *)(arg1)->getArg(arg2);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_ArAction_getArgSwigExplicitArAction(void * jarg1, int jarg2) {
  void * jresult ;
  ArAction *arg1 = (ArAction *) 0 ;
  int arg2 ;
  ArArg *result = 0 ;
  
  arg1 = (ArAction *)jarg1; 
  arg2 = (int)jarg2; 
  result = (ArArg *)(arg1)->ArAction::getArg(arg2);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT char * SWIGSTDCALL CSharp_ArAction_getName(void * jarg1) {
  char * jresult ;
  ArAction *arg1 = (ArAction *) 0 ;
  char *result = 0 ;
  
  arg1 = (ArAction *)jarg1; 
  result = (char *)((ArAction const *)arg1)->getName();
  jresult = SWIG_csharp_string_callback((const char *)result); 
  return jresult;
}


SWIGEXPORT char * SWIGSTDCALL CSharp_ArAction_getNameSwigExplicitArAction(void * jarg1) {
  char * jresult ;
  ArAction *arg1 = (ArAction *) 0 ;
  char *result = 0 ;
  
  arg1 = (ArAction *)jarg1; 
  result = (char *)((ArAction const *)arg1)->ArAction::getName();
  jresult = SWIG_csharp_string_callback((const char *)result); 
  return jresult;
}


SWIGEXPORT char * SWIGSTDCALL CSharp_ArAction_getDescription(void * jarg1) {
  char * jresult ;
  ArAction *arg1 = (ArAction *) 0 ;
  char *result = 0 ;
  
  arg1 = (ArAction *)jarg1; 
  result = (char *)((ArAction const *)arg1)->getDescription();
  jresult = SWIG_csharp_string_callback((const char *)result); 
  return jresult;
}


SWIGEXPORT char * SWIGSTDCALL CSharp_ArAction_getDescriptionSwigExplicitArAction(void * jarg1) {
  char * jresult ;
  ArAction *arg1 = (ArAction *) 0 ;
  char *result = 0 ;
  
  arg1 = (ArAction *)jarg1; 
  result = (char *)((ArAction const *)arg1)->ArAction::getDescription();
  jresult = SWIG_csharp_string_callback((const char *)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_ArAction_getDesired__SWIG_0(void * jarg1) {
  void * jresult ;
  ArAction *arg1 = (ArAction *) 0 ;
  ArActionDesired *result = 0 ;
  
  arg1 = (ArAction *)jarg1; 
  result = (ArActionDesired *)(arg1)->getDesired();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_ArAction_getDesiredSwigExplicitArAction__SWIG_0(void * jarg1) {
  void * jresult ;
  ArAction *arg1 = (ArAction *) 0 ;
  ArActionDesired *result = 0 ;
  
  arg1 = (ArAction *)jarg1; 
  result = (ArActionDesired *)(arg1)->ArAction::getDesired();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_ArAction_getDesiredSwigExplicitArAction__SWIG_1(void * jarg1) {
  void * jresult ;
  ArAction *arg1 = (ArAction *) 0 ;
  ArActionDesired *result = 0 ;
  
  arg1 = (ArAction *)jarg1; 
  result = (ArActionDesired *)((ArAction const *)arg1)->ArAction::getDesired();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_ArAction_log__SWIG_0(void * jarg1, unsigned int jarg2) {
  ArAction *arg1 = (ArAction *) 0 ;
  bool arg2 ;
  
  arg1 = (ArAction *)jarg1; 
  arg2 = jarg2 ? true : false; 
  ((ArAction const *)arg1)->log(arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_ArAction_logSwigExplicitArAction__SWIG_0(void * jarg1, unsigned int jarg2) {
  ArAction *arg1 = (ArAction *) 0 ;
  bool arg2 ;
  
  arg1 = (ArAction *)jarg1; 
  arg2 = jarg2 ? true : false; 
  ((ArAction const *)arg1)->ArAction::log(arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_ArAction_log__SWIG_1(void * jarg1) {
  ArAction *arg1 = (ArAction *) 0 ;
  
  arg1 = (ArAction *)jarg1; 
  ((ArAction const *)arg1)->log();
}


SWIGEXPORT void SWIGSTDCALL CSharp_ArAction_logSwigExplicitArAction__SWIG_1(void * jarg1) {
  ArAction *arg1 = (ArAction *) 0 ;
  
  arg1 = (ArAction *)jarg1; 
  ((ArAction const *)arg1)->ArAction::log();
}


SWIGEXPORT void * SWIGSTDCALL CSharp_ArAction_getRobot(void * jarg1) {
  void * jresult ;
  ArAction *arg1 = (ArAction *) 0 ;
  ArRobot *result = 0 ;
  
  arg1 = (ArAction *)jarg1; 
  result = (ArRobot *)((ArAction const *)arg1)->getRobot();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_ArAction_setDefaultActivationState(unsigned int jarg1) {
  bool arg1 ;
  
  arg1 = jarg1 ? true : false; 
  ArAction::setDefaultActivationState(arg1);
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_ArAction_getDefaultActivationState() {
  unsigned int jresult ;
  bool result;
  
  result = (bool)ArAction::getDefaultActivationState();
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_ArAction_setActionRobot(void * jarg1, void * jarg2) {
  ArAction *arg1 = (ArAction *) 0 ;
  ArRobot *arg2 = (ArRobot *) 0 ;
  
  arg1 = (ArAction *)jarg1; 
  arg2 = (ArRobot *)jarg2; 
  ArAction_setActionRobot(arg1,arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_ArAction_director_connect(void *objarg, SwigDirector_ArAction::SWIG_Callback0_t callback0, SwigDirector_ArAction::SWIG_Callback1_t callback1, SwigDirector_ArAction::SWIG_Callback2_t callback2, SwigDirector_ArAction::SWIG_Callback3_t callback3, SwigDirector_ArAction::SWIG_Callback4_t callback4, SwigDirector_ArAction::SWIG_Callback5_t callback5, SwigDirector_ArAction::SWIG_Callback6_t callback6, SwigDirector_ArAction::SWIG_Callback7_t callback7, SwigDirector_ArAction::SWIG_Callback8_t callback8, SwigDirector_ArAction::SWIG_Callback9_t callback9, SwigDirector_ArAction::SWIG_Callback10_t callback10, SwigDirector_ArAction::SWIG_Callback11_t callback11, SwigDirector_ArAction::SWIG_Callback12_t callback12) {
  ArAction *obj = (ArAction *)objarg;
  SwigDirector_ArAction *director = dynamic_cast<SwigDirector_ArAction *>(obj);
  if (director) {
    director->swig_connect_director(callback0, callback1, callback2, callback3, callback4, callback5, callback6, callback7, callback8, callback9, callback10, callback11, callback12);
  }
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_ArActionAvoidFront__SWIG_0(char * jarg1, double jarg2, double jarg3, double jarg4, unsigned int jarg5) {
  void * jresult ;
  char *arg1 = (char *) 0 ;
  double arg2 ;
  double arg3 ;
  double arg4 ;
  bool arg5 ;
  ArActionAvoidFront *result = 0 ;
  
  arg1 = (char *)jarg1; 
  arg2 = (double)jarg2; 
  arg3 = (double)jarg3; 
  arg4 = (double)jarg4; 
  arg5 = jarg5 ? true : false; 
  result = (ArActionAvoidFront *)new ArActionAvoidFront((char const *)arg1,arg2,arg3,arg4,arg5);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_ArActionAvoidFront__SWIG_1(char * jarg1, double jarg2, double jarg3, double jarg4) {
  void * jresult ;
  char *arg1 = (char *) 0 ;
  double arg2 ;
  double arg3 ;
  double arg4 ;
  ArActionAvoidFront *result = 0 ;
  
  arg1 = (char *)jarg1; 
  arg2 = (double)jarg2; 
  arg3 = (double)jarg3; 
  arg4 = (double)jarg4; 
  result = (ArActionAvoidFront *)new ArActionAvoidFront((char const *)arg1,arg2,arg3,arg4);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_ArActionAvoidFront__SWIG_2(char * jarg1, double jarg2, double jarg3) {
  void * jresult ;
  char *arg1 = (char *) 0 ;
  double arg2 ;
  double arg3 ;
  ArActionAvoidFront *result = 0 ;
  
  arg1 = (char *)jarg1; 
  arg2 = (double)jarg2; 
  arg3 = (double)jarg3; 
  result = (ArActionAvoidFront *)new ArActionAvoidFront((char const *)arg1,arg2,arg3);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_ArActionAvoidFront__SWIG_3(char * jarg1, double jarg2) {
  void * jresult ;
  char *arg1 = (char *) 0 ;
  double arg2 ;
  ArActionAvoidFront *result = 0 ;
  
  arg1 = (char *)jarg1; 
  arg2 = (double)jarg2; 
  result = (ArActionAvoidFront *)new ArActionAvoidFront((char const *)arg1,arg2);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_ArActionAvoidFront__SWIG_4(char * jarg1) {
  void * jresult ;
  char *arg1 = (char *) 0 ;
  ArActionAvoidFront *result = 0 ;
  
  arg1 = (char *)jarg1; 
  result = (ArActionAvoidFront *)new ArActionAvoidFront((char const *)arg1);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_ArActionAvoidFront__SWIG_5() {
  void * jresult ;
  ArActionAvoidFront *result = 0 ;
  
  result = (ArActionAvoidFront *)new ArActionAvoidFront();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_ArActionAvoidFront(void * jarg1) {
  ArActionAvoidFront *arg1 = (ArActionAvoidFront *) 0 ;
  
  arg1 = (ArActionAvoidFront *)jarg1; 
  delete arg1;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_ArActionAvoidFront_fire(void * jarg1, void * jarg2) {
  void * jresult ;
  ArActionAvoidFront *arg1 = (ArActionAvoidFront *) 0 ;
  ArActionDesired arg2 ;
  ArActionDesired *argp2 ;
  ArActionDesired *result = 0 ;
  
  arg1 = (ArActionAvoidFront *)jarg1; 
  argp2 = (ArActionDesired *)jarg2; 
  if (!argp2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Attempt to dereference null ArActionDesired", 0);
    return 0;
  }
  arg2 = *argp2; 
  result = (ArActionDesired *)(arg1)->fire(arg2);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_ArActionAvoidFront_getDesired(void * jarg1) {
  void * jresult ;
  ArActionAvoidFront *arg1 = (ArActionAvoidFront *) 0 ;
  ArActionDesired *result = 0 ;
  
  arg1 = (ArActionAvoidFront *)jarg1; 
  result = (ArActionDesired *)(arg1)->getDesired();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_ArActionAvoidSide__SWIG_0(char * jarg1, double jarg2, double jarg3) {
  void * jresult ;
  char *arg1 = (char *) 0 ;
  double arg2 ;
  double arg3 ;
  ArActionAvoidSide *result = 0 ;
  
  arg1 = (char *)jarg1; 
  arg2 = (double)jarg2; 
  arg3 = (double)jarg3; 
  result = (ArActionAvoidSide *)new ArActionAvoidSide((char const *)arg1,arg2,arg3);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_ArActionAvoidSide__SWIG_1(char * jarg1, double jarg2) {
  void * jresult ;
  char *arg1 = (char *) 0 ;
  double arg2 ;
  ArActionAvoidSide *result = 0 ;
  
  arg1 = (char *)jarg1; 
  arg2 = (double)jarg2; 
  result = (ArActionAvoidSide *)new ArActionAvoidSide((char const *)arg1,arg2);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_ArActionAvoidSide__SWIG_2(char * jarg1) {
  void * jresult ;
  char *arg1 = (char *) 0 ;
  ArActionAvoidSide *result = 0 ;
  
  arg1 = (char *)jarg1; 
  result = (ArActionAvoidSide *)new ArActionAvoidSide((char const *)arg1);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_ArActionAvoidSide__SWIG_3() {
  void * jresult ;
  ArActionAvoidSide *result = 0 ;
  
  result = (ArActionAvoidSide *)new ArActionAvoidSide();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_ArActionAvoidSide(void * jarg1) {
  ArActionAvoidSide *arg1 = (ArActionAvoidSide *) 0 ;
  
  arg1 = (ArActionAvoidSide *)jarg1; 
  delete arg1;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_ArActionAvoidSide_fire(void * jarg1, void * jarg2) {
  void * jresult ;
  ArActionAvoidSide *arg1 = (ArActionAvoidSide *) 0 ;
  ArActionDesired arg2 ;
  ArActionDesired *argp2 ;
  ArActionDesired *result = 0 ;
  
  arg1 = (ArActionAvoidSide *)jarg1; 
  argp2 = (ArActionDesired *)jarg2; 
  if (!argp2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Attempt to dereference null ArActionDesired", 0);
    return 0;
  }
  arg2 = *argp2; 
  result = (ArActionDesired *)(arg1)->fire(arg2);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_ArActionAvoidSide_getDesired(void * jarg1) {
  void * jresult ;
  ArActionAvoidSide *arg1 = (ArActionAvoidSide *) 0 ;
  ArActionDesired *result = 0 ;
  
  arg1 = (ArActionAvoidSide *)jarg1; 
  result = (ArActionDesired *)(arg1)->getDesired();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_ArActionBumpers__SWIG_0(char * jarg1, double jarg2, int jarg3, int jarg4, unsigned int jarg5) {
  void * jresult ;
  char *arg1 = (char *) 0 ;
  double arg2 ;
  int arg3 ;
  int arg4 ;
  bool arg5 ;
  ArActionBumpers *result = 0 ;
  
  arg1 = (char *)jarg1; 
  arg2 = (double)jarg2; 
  arg3 = (int)jarg3; 
  arg4 = (int)jarg4; 
  arg5 = jarg5 ? true : false; 
  result = (ArActionBumpers *)new ArActionBumpers((char const *)arg1,arg2,arg3,arg4,arg5);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_ArActionBumpers__SWIG_1(char * jarg1, double jarg2, int jarg3, int jarg4) {
  void * jresult ;
  char *arg1 = (char *) 0 ;
  double arg2 ;
  int arg3 ;
  int arg4 ;
  ArActionBumpers *result = 0 ;
  
  arg1 = (char *)jarg1; 
  arg2 = (double)jarg2; 
  arg3 = (int)jarg3; 
  arg4 = (int)jarg4; 
  result = (ArActionBumpers *)new ArActionBumpers((char const *)arg1,arg2,arg3,arg4);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_ArActionBumpers__SWIG_2(char * jarg1, double jarg2, int jarg3) {
  void * jresult ;
  char *arg1 = (char *) 0 ;
  double arg2 ;
  int arg3 ;
  ArActionBumpers *result = 0 ;
  
  arg1 = (char *)jarg1; 
  arg2 = (double)jarg2; 
  arg3 = (int)jarg3; 
  result = (ArActionBumpers *)new ArActionBumpers((char const *)arg1,arg2,arg3);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_ArActionBumpers__SWIG_3(char * jarg1, double jarg2) {
  void * jresult ;
  char *arg1 = (char *) 0 ;
  double arg2 ;
  ArActionBumpers *result = 0 ;
  
  arg1 = (char *)jarg1; 
  arg2 = (double)jarg2; 
  result = (ArActionBumpers *)new ArActionBumpers((char const *)arg1,arg2);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_ArActionBumpers__SWIG_4(char * jarg1) {
  void * jresult ;
  char *arg1 = (char *) 0 ;
  ArActionBumpers *result = 0 ;
  
  arg1 = (char *)jarg1; 
  result = (ArActionBumpers *)new ArActionBumpers((char const *)arg1);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_ArActionBumpers__SWIG_5() {
  void * jresult ;
  ArActionBumpers *result = 0 ;
  
  result = (ArActionBumpers *)new ArActionBumpers();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_ArActionBumpers(void * jarg1) {
  ArActionBumpers *arg1 = (ArActionBumpers *) 0 ;
  
  arg1 = (ArActionBumpers *)jarg1; 
  delete arg1;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_ArActionBumpers_fire(void * jarg1, void * jarg2) {
  void * jresult ;
  ArActionBumpers *arg1 = (ArActionBumpers *) 0 ;
  ArActionDesired arg2 ;
  ArActionDesired *argp2 ;
  ArActionDesired *result = 0 ;
  
  arg1 = (ArActionBumpers *)jarg1; 
  argp2 = (ArActionDesired *)jarg2; 
  if (!argp2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Attempt to dereference null ArActionDesired", 0);
    return 0;
  }
  arg2 = *argp2; 
  result = (ArActionDesired *)(arg1)->fire(arg2);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_ArActionBumpers_getDesired(void * jarg1) {
  void * jresult ;
  ArActionBumpers *arg1 = (ArActionBumpers *) 0 ;
  ArActionDesired *result = 0 ;
  
  arg1 = (ArActionBumpers *)jarg1; 
  result = (ArActionDesired *)(arg1)->getDesired();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT double SWIGSTDCALL CSharp_ArActionBumpers_findDegreesToTurn(void * jarg1, int jarg2, int jarg3) {
  double jresult ;
  ArActionBumpers *arg1 = (ArActionBumpers *) 0 ;
  int arg2 ;
  int arg3 ;
  double result;
  
  arg1 = (ArActionBumpers *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (int)jarg3; 
  result = (double)(arg1)->findDegreesToTurn(arg2,arg3);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_ArActionBumpers_activate(void * jarg1) {
  ArActionBumpers *arg1 = (ArActionBumpers *) 0 ;
  
  arg1 = (ArActionBumpers *)jarg1; 
  (arg1)->activate();
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_ArActionColorFollow__SWIG_0(char * jarg1, void * jarg2, void * jarg3, double jarg4, int jarg5, int jarg6) {
  void * jresult ;
  char *arg1 = (char *) 0 ;
  ArACTS_1_2 *arg2 = (ArACTS_1_2 *) 0 ;
  ArPTZ *arg3 = (ArPTZ *) 0 ;
  double arg4 ;
  int arg5 ;
  int arg6 ;
  ArActionColorFollow *result = 0 ;
  
  arg1 = (char *)jarg1; 
  arg2 = (ArACTS_1_2 *)jarg2; 
  arg3 = (ArPTZ *)jarg3; 
  arg4 = (double)jarg4; 
  arg5 = (int)jarg5; 
  arg6 = (int)jarg6; 
  result = (ArActionColorFollow *)new ArActionColorFollow((char const *)arg1,arg2,arg3,arg4,arg5,arg6);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_ArActionColorFollow__SWIG_1(char * jarg1, void * jarg2, void * jarg3, double jarg4, int jarg5) {
  void * jresult ;
  char *arg1 = (char *) 0 ;
  ArACTS_1_2 *arg2 = (ArACTS_1_2 *) 0 ;
  ArPTZ *arg3 = (ArPTZ *) 0 ;
  double arg4 ;
  int arg5 ;
  ArActionColorFollow *result = 0 ;
  
  arg1 = (char *)jarg1; 
  arg2 = (ArACTS_1_2 *)jarg2; 
  arg3 = (ArPTZ *)jarg3; 
  arg4 = (double)jarg4; 
  arg5 = (int)jarg5; 
  result = (ArActionColorFollow *)new ArActionColorFollow((char const *)arg1,arg2,arg3,arg4,arg5);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_ArActionColorFollow__SWIG_2(char * jarg1, void * jarg2, void * jarg3, double jarg4) {
  void * jresult ;
  char *arg1 = (char *) 0 ;
  ArACTS_1_2 *arg2 = (ArACTS_1_2 *) 0 ;
  ArPTZ *arg3 = (ArPTZ *) 0 ;
  double arg4 ;
  ArActionColorFollow *result = 0 ;
  
  arg1 = (char *)jarg1; 
  arg2 = (ArACTS_1_2 *)jarg2; 
  arg3 = (ArPTZ *)jarg3; 
  arg4 = (double)jarg4; 
  result = (ArActionColorFollow *)new ArActionColorFollow((char const *)arg1,arg2,arg3,arg4);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_ArActionColorFollow__SWIG_3(char * jarg1, void * jarg2, void * jarg3) {
  void * jresult ;
  char *arg1 = (char *) 0 ;
  ArACTS_1_2 *arg2 = (ArACTS_1_2 *) 0 ;
  ArPTZ *arg3 = (ArPTZ *) 0 ;
  ArActionColorFollow *result = 0 ;
  
  arg1 = (char *)jarg1; 
  arg2 = (ArACTS_1_2 *)jarg2; 
  arg3 = (ArPTZ *)jarg3; 
  result = (ArActionColorFollow *)new ArActionColorFollow((char const *)arg1,arg2,arg3);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_ArActionColorFollow(void * jarg1) {
  ArActionColorFollow *arg1 = (ArActionColorFollow *) 0 ;
  
  arg1 = (ArActionColorFollow *)jarg1; 
  delete arg1;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_ArActionColorFollow_fire(void * jarg1, void * jarg2) {
  void * jresult ;
  ArActionColorFollow *arg1 = (ArActionColorFollow *) 0 ;
  ArActionDesired arg2 ;
  ArActionDesired *argp2 ;
  ArActionDesired *result = 0 ;
  
  arg1 = (ArActionColorFollow *)jarg1; 
  argp2 = (ArActionDesired *)jarg2; 
  if (!argp2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Attempt to dereference null ArActionDesired", 0);
    return 0;
  }
  arg2 = *argp2; 
  result = (ArActionDesired *)(arg1)->fire(arg2);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_ArActionColorFollow_setChannel(void * jarg1, int jarg2) {
  unsigned int jresult ;
  ArActionColorFollow *arg1 = (ArActionColorFollow *) 0 ;
  int arg2 ;
  bool result;
  
  arg1 = (ArActionColorFollow *)jarg1; 
  arg2 = (int)jarg2; 
  result = (bool)(arg1)->setChannel(arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_ArActionColorFollow_setCamera(void * jarg1, void * jarg2) {
  ArActionColorFollow *arg1 = (ArActionColorFollow *) 0 ;
  ArPTZ *arg2 = (ArPTZ *) 0 ;
  
  arg1 = (ArActionColorFollow *)jarg1; 
  arg2 = (ArPTZ *)jarg2; 
  (arg1)->setCamera(arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_ArActionColorFollow_setAcquire(void * jarg1, unsigned int jarg2) {
  ArActionColorFollow *arg1 = (ArActionColorFollow *) 0 ;
  bool arg2 ;
  
  arg1 = (ArActionColorFollow *)jarg1; 
  arg2 = jarg2 ? true : false; 
  (arg1)->setAcquire(arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_ArActionColorFollow_stopMovement(void * jarg1) {
  ArActionColorFollow *arg1 = (ArActionColorFollow *) 0 ;
  
  arg1 = (ArActionColorFollow *)jarg1; 
  (arg1)->stopMovement();
}


SWIGEXPORT void SWIGSTDCALL CSharp_ArActionColorFollow_startMovement(void * jarg1) {
  ArActionColorFollow *arg1 = (ArActionColorFollow *) 0 ;
  
  arg1 = (ArActionColorFollow *)jarg1; 
  (arg1)->startMovement();
}


SWIGEXPORT int SWIGSTDCALL CSharp_ArActionColorFollow_getChannel(void * jarg1) {
  int jresult ;
  ArActionColorFollow *arg1 = (ArActionColorFollow *) 0 ;
  int result;
  
  arg1 = (ArActionColorFollow *)jarg1; 
  result = (int)(arg1)->getChannel();
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_ArActionColorFollow_getAcquire(void * jarg1) {
  unsigned int jresult ;
  ArActionColorFollow *arg1 = (ArActionColorFollow *) 0 ;
  bool result;
  
  arg1 = (ArActionColorFollow *)jarg1; 
  result = (bool)(arg1)->getAcquire();
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_ArActionColorFollow_getMovement(void * jarg1) {
  unsigned int jresult ;
  ArActionColorFollow *arg1 = (ArActionColorFollow *) 0 ;
  bool result;
  
  arg1 = (ArActionColorFollow *)jarg1; 
  result = (bool)(arg1)->getMovement();
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_ArActionColorFollow_getBlob(void * jarg1) {
  unsigned int jresult ;
  ArActionColorFollow *arg1 = (ArActionColorFollow *) 0 ;
  bool result;
  
  arg1 = (ArActionColorFollow *)jarg1; 
  result = (bool)(arg1)->getBlob();
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_ArActionColorFollow_getDesired(void * jarg1) {
  void * jresult ;
  ArActionColorFollow *arg1 = (ArActionColorFollow *) 0 ;
  ArActionDesired *result = 0 ;
  
  arg1 = (ArActionColorFollow *)jarg1; 
  result = (ArActionDesired *)(arg1)->getDesired();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_ArActionConstantVelocity__SWIG_0(char * jarg1, double jarg2) {
  void * jresult ;
  char *arg1 = (char *) 0 ;
  double arg2 ;
  ArActionConstantVelocity *result = 0 ;
  
  arg1 = (char *)jarg1; 
  arg2 = (double)jarg2; 
  result = (ArActionConstantVelocity *)new ArActionConstantVelocity((char const *)arg1,arg2);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_ArActionConstantVelocity__SWIG_1(char * jarg1) {
  void * jresult ;
  char *arg1 = (char *) 0 ;
  ArActionConstantVelocity *result = 0 ;
  
  arg1 = (char *)jarg1; 
  result = (ArActionConstantVelocity *)new ArActionConstantVelocity((char const *)arg1);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_ArActionConstantVelocity__SWIG_2() {
  void * jresult ;
  ArActionConstantVelocity *result = 0 ;
  
  result = (ArActionConstantVelocity *)new ArActionConstantVelocity();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_ArActionConstantVelocity(void * jarg1) {
  ArActionConstantVelocity *arg1 = (ArActionConstantVelocity *) 0 ;
  
  arg1 = (ArActionConstantVelocity *)jarg1; 
  delete arg1;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_ArActionConstantVelocity_fire(void * jarg1, void * jarg2) {
  void * jresult ;
  ArActionConstantVelocity *arg1 = (ArActionConstantVelocity *) 0 ;
  ArActionDesired arg2 ;
  ArActionDesired *argp2 ;
  ArActionDesired *result = 0 ;
  
  arg1 = (ArActionConstantVelocity *)jarg1; 
  argp2 = (ArActionDesired *)jarg2; 
  if (!argp2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Attempt to dereference null ArActionDesired", 0);
    return 0;
  }
  arg2 = *argp2; 
  result = (ArActionDesired *)(arg1)->fire(arg2);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_ArActionConstantVelocity_getDesired(void * jarg1) {
  void * jresult ;
  ArActionConstantVelocity *arg1 = (ArActionConstantVelocity *) 0 ;
  ArActionDesired *result = 0 ;
  
  arg1 = (ArActionConstantVelocity *)jarg1; 
  result = (ArActionDesired *)(arg1)->getDesired();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_ArActionDeceleratingLimiter__SWIG_0(char * jarg1, int jarg2) {
  void * jresult ;
  char *arg1 = (char *) 0 ;
  ArActionDeceleratingLimiter::LimiterType arg2 ;
  ArActionDeceleratingLimiter *result = 0 ;
  
  arg1 = (char *)jarg1; 
  arg2 = (ArActionDeceleratingLimiter::LimiterType)jarg2; 
  result = (ArActionDeceleratingLimiter *)new ArActionDeceleratingLimiter((char const *)arg1,arg2);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_ArActionDeceleratingLimiter__SWIG_1(char * jarg1) {
  void * jresult ;
  char *arg1 = (char *) 0 ;
  ArActionDeceleratingLimiter *result = 0 ;
  
  arg1 = (char *)jarg1; 
  result = (ArActionDeceleratingLimiter *)new ArActionDeceleratingLimiter((char const *)arg1);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_ArActionDeceleratingLimiter__SWIG_2() {
  void * jresult ;
  ArActionDeceleratingLimiter *result = 0 ;
  
  result = (ArActionDeceleratingLimiter *)new ArActionDeceleratingLimiter();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_ArActionDeceleratingLimiter(void * jarg1) {
  ArActionDeceleratingLimiter *arg1 = (ArActionDeceleratingLimiter *) 0 ;
  
  arg1 = (ArActionDeceleratingLimiter *)jarg1; 
  delete arg1;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_ArActionDeceleratingLimiter_fire(void * jarg1, void * jarg2) {
  void * jresult ;
  ArActionDeceleratingLimiter *arg1 = (ArActionDeceleratingLimiter *) 0 ;
  ArActionDesired arg2 ;
  ArActionDesired *argp2 ;
  ArActionDesired *result = 0 ;
  
  arg1 = (ArActionDeceleratingLimiter *)jarg1; 
  argp2 = (ArActionDesired *)jarg2; 
  if (!argp2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Attempt to dereference null ArActionDesired", 0);
    return 0;
  }
  arg2 = *argp2; 
  result = (ArActionDesired *)(arg1)->fire(arg2);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_ArActionDeceleratingLimiter_getDesired(void * jarg1) {
  void * jresult ;
  ArActionDeceleratingLimiter *arg1 = (ArActionDeceleratingLimiter *) 0 ;
  ArActionDesired *result = 0 ;
  
  arg1 = (ArActionDeceleratingLimiter *)jarg1; 
  result = (ArActionDesired *)(arg1)->getDesired();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_ArActionDeceleratingLimiter_setParameters__SWIG_0(void * jarg1, double jarg2, double jarg3, double jarg4, double jarg5, double jarg6, double jarg7, double jarg8, double jarg9, unsigned int jarg10, double jarg11) {
  ArActionDeceleratingLimiter *arg1 = (ArActionDeceleratingLimiter *) 0 ;
  double arg2 ;
  double arg3 ;
  double arg4 ;
  double arg5 ;
  double arg6 ;
  double arg7 ;
  double arg8 ;
  double arg9 ;
  bool arg10 ;
  double arg11 ;
  
  arg1 = (ArActionDeceleratingLimiter *)jarg1; 
  arg2 = (double)jarg2; 
  arg3 = (double)jarg3; 
  arg4 = (double)jarg4; 
  arg5 = (double)jarg5; 
  arg6 = (double)jarg6; 
  arg7 = (double)jarg7; 
  arg8 = (double)jarg8; 
  arg9 = (double)jarg9; 
  arg10 = jarg10 ? true : false; 
  arg11 = (double)jarg11; 
  (arg1)->setParameters(arg2,arg3,arg4,arg5,arg6,arg7,arg8,arg9,arg10,arg11);
}


SWIGEXPORT void SWIGSTDCALL CSharp_ArActionDeceleratingLimiter_setParameters__SWIG_1(void * jarg1, double jarg2, double jarg3, double jarg4, double jarg5, double jarg6, double jarg7, double jarg8, double jarg9, unsigned int jarg10) {
  ArActionDeceleratingLimiter *arg1 = (ArActionDeceleratingLimiter *) 0 ;
  double arg2 ;
  double arg3 ;
  double arg4 ;
  double arg5 ;
  double arg6 ;
  double arg7 ;
  double arg8 ;
  double arg9 ;
  bool arg10 ;
  
  arg1 = (ArActionDeceleratingLimiter *)jarg1; 
  arg2 = (double)jarg2; 
  arg3 = (double)jarg3; 
  arg4 = (double)jarg4; 
  arg5 = (double)jarg5; 
  arg6 = (double)jarg6; 
  arg7 = (double)jarg7; 
  arg8 = (double)jarg8; 
  arg9 = (double)jarg9; 
  arg10 = jarg10 ? true : false; 
  (arg1)->setParameters(arg2,arg3,arg4,arg5,arg6,arg7,arg8,arg9,arg10);
}


SWIGEXPORT void SWIGSTDCALL CSharp_ArActionDeceleratingLimiter_setParameters__SWIG_2(void * jarg1, double jarg2, double jarg3, double jarg4, double jarg5, double jarg6, double jarg7, double jarg8, double jarg9) {
  ArActionDeceleratingLimiter *arg1 = (ArActionDeceleratingLimiter *) 0 ;
  double arg2 ;
  double arg3 ;
  double arg4 ;
  double arg5 ;
  double arg6 ;
  double arg7 ;
  double arg8 ;
  double arg9 ;
  
  arg1 = (ArActionDeceleratingLimiter *)jarg1; 
  arg2 = (double)jarg2; 
  arg3 = (double)jarg3; 
  arg4 = (double)jarg4; 
  arg5 = (double)jarg5; 
  arg6 = (double)jarg6; 
  arg7 = (double)jarg7; 
  arg8 = (double)jarg8; 
  arg9 = (double)jarg9; 
  (arg1)->setParameters(arg2,arg3,arg4,arg5,arg6,arg7,arg8,arg9);
}


SWIGEXPORT void SWIGSTDCALL CSharp_ArActionDeceleratingLimiter_setParameters__SWIG_3(void * jarg1, double jarg2, double jarg3, double jarg4, double jarg5, double jarg6, double jarg7, double jarg8) {
  ArActionDeceleratingLimiter *arg1 = (ArActionDeceleratingLimiter *) 0 ;
  double arg2 ;
  double arg3 ;
  double arg4 ;
  double arg5 ;
  double arg6 ;
  double arg7 ;
  double arg8 ;
  
  arg1 = (ArActionDeceleratingLimiter *)jarg1; 
  arg2 = (double)jarg2; 
  arg3 = (double)jarg3; 
  arg4 = (double)jarg4; 
  arg5 = (double)jarg5; 
  arg6 = (double)jarg6; 
  arg7 = (double)jarg7; 
  arg8 = (double)jarg8; 
  (arg1)->setParameters(arg2,arg3,arg4,arg5,arg6,arg7,arg8);
}


SWIGEXPORT void SWIGSTDCALL CSharp_ArActionDeceleratingLimiter_setParameters__SWIG_4(void * jarg1, double jarg2, double jarg3, double jarg4, double jarg5, double jarg6, double jarg7) {
  ArActionDeceleratingLimiter *arg1 = (ArActionDeceleratingLimiter *) 0 ;
  double arg2 ;
  double arg3 ;
  double arg4 ;
  double arg5 ;
  double arg6 ;
  double arg7 ;
  
  arg1 = (ArActionDeceleratingLimiter *)jarg1; 
  arg2 = (double)jarg2; 
  arg3 = (double)jarg3; 
  arg4 = (double)jarg4; 
  arg5 = (double)jarg5; 
  arg6 = (double)jarg6; 
  arg7 = (double)jarg7; 
  (arg1)->setParameters(arg2,arg3,arg4,arg5,arg6,arg7);
}


SWIGEXPORT void SWIGSTDCALL CSharp_ArActionDeceleratingLimiter_setParameters__SWIG_5(void * jarg1, double jarg2, double jarg3, double jarg4, double jarg5, double jarg6) {
  ArActionDeceleratingLimiter *arg1 = (ArActionDeceleratingLimiter *) 0 ;
  double arg2 ;
  double arg3 ;
  double arg4 ;
  double arg5 ;
  double arg6 ;
  
  arg1 = (ArActionDeceleratingLimiter *)jarg1; 
  arg2 = (double)jarg2; 
  arg3 = (double)jarg3; 
  arg4 = (double)jarg4; 
  arg5 = (double)jarg5; 
  arg6 = (double)jarg6; 
  (arg1)->setParameters(arg2,arg3,arg4,arg5,arg6);
}


SWIGEXPORT void SWIGSTDCALL CSharp_ArActionDeceleratingLimiter_setParameters__SWIG_6(void * jarg1, double jarg2, double jarg3, double jarg4, double jarg5) {
  ArActionDeceleratingLimiter *arg1 = (ArActionDeceleratingLimiter *) 0 ;
  double arg2 ;
  double arg3 ;
  double arg4 ;
  double arg5 ;
  
  arg1 = (ArActionDeceleratingLimiter *)jarg1; 
  arg2 = (double)jarg2; 
  arg3 = (double)jarg3; 
  arg4 = (double)jarg4; 
  arg5 = (double)jarg5; 
  (arg1)->setParameters(arg2,arg3,arg4,arg5);
}


SWIGEXPORT void SWIGSTDCALL CSharp_ArActionDeceleratingLimiter_setParameters__SWIG_7(void * jarg1, double jarg2, double jarg3, double jarg4) {
  ArActionDeceleratingLimiter *arg1 = (ArActionDeceleratingLimiter *) 0 ;
  double arg2 ;
  double arg3 ;
  double arg4 ;
  
  arg1 = (ArActionDeceleratingLimiter *)jarg1; 
  arg2 = (double)jarg2; 
  arg3 = (double)jarg3; 
  arg4 = (double)jarg4; 
  (arg1)->setParameters(arg2,arg3,arg4);
}


SWIGEXPORT void SWIGSTDCALL CSharp_ArActionDeceleratingLimiter_setParameters__SWIG_8(void * jarg1, double jarg2, double jarg3) {
  ArActionDeceleratingLimiter *arg1 = (ArActionDeceleratingLimiter *) 0 ;
  double arg2 ;
  double arg3 ;
  
  arg1 = (ArActionDeceleratingLimiter *)jarg1; 
  arg2 = (double)jarg2; 
  arg3 = (double)jarg3; 
  (arg1)->setParameters(arg2,arg3);
}


SWIGEXPORT void SWIGSTDCALL CSharp_ArActionDeceleratingLimiter_setParameters__SWIG_9(void * jarg1, double jarg2) {
  ArActionDeceleratingLimiter *arg1 = (ArActionDeceleratingLimiter *) 0 ;
  double arg2 ;
  
  arg1 = (ArActionDeceleratingLimiter *)jarg1; 
  arg2 = (double)jarg2; 
  (arg1)->setParameters(arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_ArActionDeceleratingLimiter_setParameters__SWIG_10(void * jarg1) {
  ArActionDeceleratingLimiter *arg1 = (ArActionDeceleratingLimiter *) 0 ;
  
  arg1 = (ArActionDeceleratingLimiter *)jarg1; 
  (arg1)->setParameters();
}


SWIGEXPORT int SWIGSTDCALL CSharp_ArActionDeceleratingLimiter_getType(void * jarg1) {
  int jresult ;
  ArActionDeceleratingLimiter *arg1 = (ArActionDeceleratingLimiter *) 0 ;
  ArActionDeceleratingLimiter::LimiterType result;
  
  arg1 = (ArActionDeceleratingLimiter *)jarg1; 
  result = (ArActionDeceleratingLimiter::LimiterType)(arg1)->getType();
  jresult = (int)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_ArActionDeceleratingLimiter_setType(void * jarg1, int jarg2) {
  ArActionDeceleratingLimiter *arg1 = (ArActionDeceleratingLimiter *) 0 ;
  ArActionDeceleratingLimiter::LimiterType arg2 ;
  
  arg1 = (ArActionDeceleratingLimiter *)jarg1; 
  arg2 = (ArActionDeceleratingLimiter::LimiterType)jarg2; 
  (arg1)->setType(arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_ArActionDeceleratingLimiter_addToConfig__SWIG_0(void * jarg1, void * jarg2, char * jarg3, char * jarg4) {
  ArActionDeceleratingLimiter *arg1 = (ArActionDeceleratingLimiter *) 0 ;
  ArConfig *arg2 = (ArConfig *) 0 ;
  char *arg3 = (char *) 0 ;
  char *arg4 = (char *) 0 ;
  
  arg1 = (ArActionDeceleratingLimiter *)jarg1; 
  arg2 = (ArConfig *)jarg2; 
  arg3 = (char *)jarg3; 
  arg4 = (char *)jarg4; 
  (arg1)->addToConfig(arg2,(char const *)arg3,(char const *)arg4);
}


SWIGEXPORT void SWIGSTDCALL CSharp_ArActionDeceleratingLimiter_addToConfig__SWIG_1(void * jarg1, void * jarg2, char * jarg3) {
  ArActionDeceleratingLimiter *arg1 = (ArActionDeceleratingLimiter *) 0 ;
  ArConfig *arg2 = (ArConfig *) 0 ;
  char *arg3 = (char *) 0 ;
  
  arg1 = (ArActionDeceleratingLimiter *)jarg1; 
  arg2 = (ArConfig *)jarg2; 
  arg3 = (char *)jarg3; 
  (arg1)->addToConfig(arg2,(char const *)arg3);
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_ArActionDeceleratingLimiter_getUseLocationDependentDevices(void * jarg1) {
  unsigned int jresult ;
  ArActionDeceleratingLimiter *arg1 = (ArActionDeceleratingLimiter *) 0 ;
  bool result;
  
  arg1 = (ArActionDeceleratingLimiter *)jarg1; 
  result = (bool)(arg1)->getUseLocationDependentDevices();
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_ArActionDeceleratingLimiter_setUseLocationDependentDevices(void * jarg1, unsigned int jarg2) {
  ArActionDeceleratingLimiter *arg1 = (ArActionDeceleratingLimiter *) 0 ;
  bool arg2 ;
  
  arg1 = (ArActionDeceleratingLimiter *)jarg1; 
  arg2 = jarg2 ? true : false; 
  (arg1)->setUseLocationDependentDevices(arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_ArActionDeceleratingLimiter_setStopRotationToo(void * jarg1, unsigned int jarg2) {
  ArActionDeceleratingLimiter *arg1 = (ArActionDeceleratingLimiter *) 0 ;
  bool arg2 ;
  
  arg1 = (ArActionDeceleratingLimiter *)jarg1; 
  arg2 = jarg2 ? true : false; 
  (arg1)->setStopRotationToo(arg2);
}


SWIGEXPORT double SWIGSTDCALL CSharp_ArActionDesiredChannel_NO_STRENGTH_get() {
  double jresult ;
  double result;
  
  result = (double)(double)ArActionDesiredChannel::NO_STRENGTH;
  jresult = result; 
  return jresult;
}


SWIGEXPORT double SWIGSTDCALL CSharp_ArActionDesiredChannel_MIN_STRENGTH_get() {
  double jresult ;
  double result;
  
  result = (double)(double)ArActionDesiredChannel::MIN_STRENGTH;
  jresult = result; 
  return jresult;
}


SWIGEXPORT double SWIGSTDCALL CSharp_ArActionDesiredChannel_MAX_STRENGTH_get() {
  double jresult ;
  double result;
  
  result = (double)(double)ArActionDesiredChannel::MAX_STRENGTH;
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_ArActionDesiredChannel() {
  void * jresult ;
  ArActionDesiredChannel *result = 0 ;
  
  result = (ArActionDesiredChannel *)new ArActionDesiredChannel();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_ArActionDesiredChannel(void * jarg1) {
  ArActionDesiredChannel *arg1 = (ArActionDesiredChannel *) 0 ;
  
  arg1 = (ArActionDesiredChannel *)jarg1; 
  delete arg1;
}


SWIGEXPORT void SWIGSTDCALL CSharp_ArActionDesiredChannel_setOverrideDoesLessThan(void * jarg1, unsigned int jarg2) {
  ArActionDesiredChannel *arg1 = (ArActionDesiredChannel *) 0 ;
  bool arg2 ;
  
  arg1 = (ArActionDesiredChannel *)jarg1; 
  arg2 = jarg2 ? true : false; 
  (arg1)->setOverrideDoesLessThan(arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_ArActionDesiredChannel_setDesired__SWIG_0(void * jarg1, double jarg2, double jarg3, unsigned int jarg4) {
  ArActionDesiredChannel *arg1 = (ArActionDesiredChannel *) 0 ;
  double arg2 ;
  double arg3 ;
  bool arg4 ;
  
  arg1 = (ArActionDesiredChannel *)jarg1; 
  arg2 = (double)jarg2; 
  arg3 = (double)jarg3; 
  arg4 = jarg4 ? true : false; 
  (arg1)->setDesired(arg2,arg3,arg4);
}


SWIGEXPORT void SWIGSTDCALL CSharp_ArActionDesiredChannel_setDesired__SWIG_1(void * jarg1, double jarg2, double jarg3) {
  ArActionDesiredChannel *arg1 = (ArActionDesiredChannel *) 0 ;
  double arg2 ;
  double arg3 ;
  
  arg1 = (ArActionDesiredChannel *)jarg1; 
  arg2 = (double)jarg2; 
  arg3 = (double)jarg3; 
  (arg1)->setDesired(arg2,arg3);
}


SWIGEXPORT double SWIGSTDCALL CSharp_ArActionDesiredChannel_getDesired(void * jarg1) {
  double jresult ;
  ArActionDesiredChannel *arg1 = (ArActionDesiredChannel *) 0 ;
  double result;
  
  arg1 = (ArActionDesiredChannel *)jarg1; 
  result = (double)((ArActionDesiredChannel const *)arg1)->getDesired();
  jresult = result; 
  return jresult;
}


SWIGEXPORT double SWIGSTDCALL CSharp_ArActionDesiredChannel_getStrength(void * jarg1) {
  double jresult ;
  ArActionDesiredChannel *arg1 = (ArActionDesiredChannel *) 0 ;
  double result;
  
  arg1 = (ArActionDesiredChannel *)jarg1; 
  result = (double)((ArActionDesiredChannel const *)arg1)->getStrength();
  jresult = result; 
  return jresult;
}


SWIGEXPORT double SWIGSTDCALL CSharp_ArActionDesiredChannel_getAllowOverride(void * jarg1) {
  double jresult ;
  ArActionDesiredChannel *arg1 = (ArActionDesiredChannel *) 0 ;
  double result;
  
  arg1 = (ArActionDesiredChannel *)jarg1; 
  result = (double)((ArActionDesiredChannel const *)arg1)->getAllowOverride();
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_ArActionDesiredChannel_reset(void * jarg1) {
  ArActionDesiredChannel *arg1 = (ArActionDesiredChannel *) 0 ;
  
  arg1 = (ArActionDesiredChannel *)jarg1; 
  (arg1)->reset();
}


SWIGEXPORT void SWIGSTDCALL CSharp_ArActionDesiredChannel_merge(void * jarg1, void * jarg2) {
  ArActionDesiredChannel *arg1 = (ArActionDesiredChannel *) 0 ;
  ArActionDesiredChannel *arg2 = (ArActionDesiredChannel *) 0 ;
  
  arg1 = (ArActionDesiredChannel *)jarg1; 
  arg2 = (ArActionDesiredChannel *)jarg2; 
  (arg1)->merge(arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_ArActionDesiredChannel_startAverage(void * jarg1) {
  ArActionDesiredChannel *arg1 = (ArActionDesiredChannel *) 0 ;
  
  arg1 = (ArActionDesiredChannel *)jarg1; 
  (arg1)->startAverage();
}


SWIGEXPORT void SWIGSTDCALL CSharp_ArActionDesiredChannel_addAverage(void * jarg1, void * jarg2) {
  ArActionDesiredChannel *arg1 = (ArActionDesiredChannel *) 0 ;
  ArActionDesiredChannel *arg2 = (ArActionDesiredChannel *) 0 ;
  
  arg1 = (ArActionDesiredChannel *)jarg1; 
  arg2 = (ArActionDesiredChannel *)jarg2; 
  (arg1)->addAverage(arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_ArActionDesiredChannel_endAverage(void * jarg1) {
  ArActionDesiredChannel *arg1 = (ArActionDesiredChannel *) 0 ;
  
  arg1 = (ArActionDesiredChannel *)jarg1; 
  (arg1)->endAverage();
}


SWIGEXPORT void SWIGSTDCALL CSharp_ArActionDesiredChannel_checkLowerBound(void * jarg1, char * jarg2, char * jarg3, int jarg4) {
  ArActionDesiredChannel *arg1 = (ArActionDesiredChannel *) 0 ;
  char *arg2 = (char *) 0 ;
  char *arg3 = (char *) 0 ;
  int arg4 ;
  
  arg1 = (ArActionDesiredChannel *)jarg1; 
  arg2 = (char *)jarg2; 
  arg3 = (char *)jarg3; 
  arg4 = (int)jarg4; 
  (arg1)->checkLowerBound((char const *)arg2,(char const *)arg3,arg4);
}


SWIGEXPORT void SWIGSTDCALL CSharp_ArActionDesiredChannel_checkUpperBound(void * jarg1, char * jarg2, char * jarg3, int jarg4) {
  ArActionDesiredChannel *arg1 = (ArActionDesiredChannel *) 0 ;
  char *arg2 = (char *) 0 ;
  char *arg3 = (char *) 0 ;
  int arg4 ;
  
  arg1 = (ArActionDesiredChannel *)jarg1; 
  arg2 = (char *)jarg2; 
  arg3 = (char *)jarg3; 
  arg4 = (int)jarg4; 
  (arg1)->checkUpperBound((char const *)arg2,(char const *)arg3,arg4);
}


SWIGEXPORT double SWIGSTDCALL CSharp_ArActionDesired_NO_STRENGTH_get() {
  double jresult ;
  double result;
  
  result = (double)(double)ArActionDesired::NO_STRENGTH;
  jresult = result; 
  return jresult;
}


SWIGEXPORT double SWIGSTDCALL CSharp_ArActionDesired_MIN_STRENGTH_get() {
  double jresult ;
  double result;
  
  result = (double)(double)ArActionDesired::MIN_STRENGTH;
  jresult = result; 
  return jresult;
}


SWIGEXPORT double SWIGSTDCALL CSharp_ArActionDesired_MAX_STRENGTH_get() {
  double jresult ;
  double result;
  
  result = (double)(double)ArActionDesired::MAX_STRENGTH;
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_ArActionDesired() {
  void * jresult ;
  ArActionDesired *result = 0 ;
  
  result = (ArActionDesired *)new ArActionDesired();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_ArActionDesired(void * jarg1) {
  ArActionDesired *arg1 = (ArActionDesired *) 0 ;
  
  arg1 = (ArActionDesired *)jarg1; 
  delete arg1;
}


SWIGEXPORT void SWIGSTDCALL CSharp_ArActionDesired_setVel__SWIG_0(void * jarg1, double jarg2, double jarg3) {
  ArActionDesired *arg1 = (ArActionDesired *) 0 ;
  double arg2 ;
  double arg3 ;
  
  arg1 = (ArActionDesired *)jarg1; 
  arg2 = (double)jarg2; 
  arg3 = (double)jarg3; 
  (arg1)->setVel(arg2,arg3);
}


SWIGEXPORT void SWIGSTDCALL CSharp_ArActionDesired_setVel__SWIG_1(void * jarg1, double jarg2) {
  ArActionDesired *arg1 = (ArActionDesired *) 0 ;
  double arg2 ;
  
  arg1 = (ArActionDesired *)jarg1; 
  arg2 = (double)jarg2; 
  (arg1)->setVel(arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_ArActionDesired_setDeltaHeading__SWIG_0(void * jarg1, double jarg2, double jarg3) {
  ArActionDesired *arg1 = (ArActionDesired *) 0 ;
  double arg2 ;
  double arg3 ;
  
  arg1 = (ArActionDesired *)jarg1; 
  arg2 = (double)jarg2; 
  arg3 = (double)jarg3; 
  (arg1)->setDeltaHeading(arg2,arg3);
}


SWIGEXPORT void SWIGSTDCALL CSharp_ArActionDesired_setDeltaHeading__SWIG_1(void * jarg1, double jarg2) {
  ArActionDesired *arg1 = (ArActionDesired *) 0 ;
  double arg2 ;
  
  arg1 = (ArActionDesired *)jarg1; 
  arg2 = (double)jarg2; 
  (arg1)->setDeltaHeading(arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_ArActionDesired_setHeading__SWIG_0(void * jarg1, double jarg2, double jarg3) {
  ArActionDesired *arg1 = (ArActionDesired *) 0 ;
  double arg2 ;
  double arg3 ;
  
  arg1 = (ArActionDesired *)jarg1; 
  arg2 = (double)jarg2; 
  arg3 = (double)jarg3; 
  (arg1)->setHeading(arg2,arg3);
}


SWIGEXPORT void SWIGSTDCALL CSharp_ArActionDesired_setHeading__SWIG_1(void * jarg1, double jarg2) {
  ArActionDesired *arg1 = (ArActionDesired *) 0 ;
  double arg2 ;
  
  arg1 = (ArActionDesired *)jarg1; 
  arg2 = (double)jarg2; 
  (arg1)->setHeading(arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_ArActionDesired_setRotVel__SWIG_0(void * jarg1, double jarg2, double jarg3) {
  ArActionDesired *arg1 = (ArActionDesired *) 0 ;
  double arg2 ;
  double arg3 ;
  
  arg1 = (ArActionDesired *)jarg1; 
  arg2 = (double)jarg2; 
  arg3 = (double)jarg3; 
  (arg1)->setRotVel(arg2,arg3);
}


SWIGEXPORT void SWIGSTDCALL CSharp_ArActionDesired_setRotVel__SWIG_1(void * jarg1, double jarg2) {
  ArActionDesired *arg1 = (ArActionDesired *) 0 ;
  double arg2 ;
  
  arg1 = (ArActionDesired *)jarg1; 
  arg2 = (double)jarg2; 
  (arg1)->setRotVel(arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_ArActionDesired_setMaxVel__SWIG_0(void * jarg1, double jarg2, double jarg3, unsigned int jarg4) {
  ArActionDesired *arg1 = (ArActionDesired *) 0 ;
  double arg2 ;
  double arg3 ;
  bool arg4 ;
  
  arg1 = (ArActionDesired *)jarg1; 
  arg2 = (double)jarg2; 
  arg3 = (double)jarg3; 
  arg4 = jarg4 ? true : false; 
  (arg1)->setMaxVel(arg2,arg3,arg4);
}


SWIGEXPORT void SWIGSTDCALL CSharp_ArActionDesired_setMaxVel__SWIG_1(void * jarg1, double jarg2, double jarg3) {
  ArActionDesired *arg1 = (ArActionDesired *) 0 ;
  double arg2 ;
  double arg3 ;
  
  arg1 = (ArActionDesired *)jarg1; 
  arg2 = (double)jarg2; 
  arg3 = (double)jarg3; 
  (arg1)->setMaxVel(arg2,arg3);
}


SWIGEXPORT void SWIGSTDCALL CSharp_ArActionDesired_setMaxVel__SWIG_2(void * jarg1, double jarg2) {
  ArActionDesired *arg1 = (ArActionDesired *) 0 ;
  double arg2 ;
  
  arg1 = (ArActionDesired *)jarg1; 
  arg2 = (double)jarg2; 
  (arg1)->setMaxVel(arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_ArActionDesired_setMaxNegVel__SWIG_0(void * jarg1, double jarg2, double jarg3, unsigned int jarg4) {
  ArActionDesired *arg1 = (ArActionDesired *) 0 ;
  double arg2 ;
  double arg3 ;
  bool arg4 ;
  
  arg1 = (ArActionDesired *)jarg1; 
  arg2 = (double)jarg2; 
  arg3 = (double)jarg3; 
  arg4 = jarg4 ? true : false; 
  (arg1)->setMaxNegVel(arg2,arg3,arg4);
}


SWIGEXPORT void SWIGSTDCALL CSharp_ArActionDesired_setMaxNegVel__SWIG_1(void * jarg1, double jarg2, double jarg3) {
  ArActionDesired *arg1 = (ArActionDesired *) 0 ;
  double arg2 ;
  double arg3 ;
  
  arg1 = (ArActionDesired *)jarg1; 
  arg2 = (double)jarg2; 
  arg3 = (double)jarg3; 
  (arg1)->setMaxNegVel(arg2,arg3);
}


SWIGEXPORT void SWIGSTDCALL CSharp_ArActionDesired_setMaxNegVel__SWIG_2(void * jarg1, double jarg2) {
  ArActionDesired *arg1 = (ArActionDesired *) 0 ;
  double arg2 ;
  
  arg1 = (ArActionDesired *)jarg1; 
  arg2 = (double)jarg2; 
  (arg1)->setMaxNegVel(arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_ArActionDesired_setTransAccel__SWIG_0(void * jarg1, double jarg2, double jarg3, unsigned int jarg4) {
  ArActionDesired *arg1 = (ArActionDesired *) 0 ;
  double arg2 ;
  double arg3 ;
  bool arg4 ;
  
  arg1 = (ArActionDesired *)jarg1; 
  arg2 = (double)jarg2; 
  arg3 = (double)jarg3; 
  arg4 = jarg4 ? true : false; 
  (arg1)->setTransAccel(arg2,arg3,arg4);
}


SWIGEXPORT void SWIGSTDCALL CSharp_ArActionDesired_setTransAccel__SWIG_1(void * jarg1, double jarg2, double jarg3) {
  ArActionDesired *arg1 = (ArActionDesired *) 0 ;
  double arg2 ;
  double arg3 ;
  
  arg1 = (ArActionDesired *)jarg1; 
  arg2 = (double)jarg2; 
  arg3 = (double)jarg3; 
  (arg1)->setTransAccel(arg2,arg3);
}


SWIGEXPORT void SWIGSTDCALL CSharp_ArActionDesired_setTransAccel__SWIG_2(void * jarg1, double jarg2) {
  ArActionDesired *arg1 = (ArActionDesired *) 0 ;
  double arg2 ;
  
  arg1 = (ArActionDesired *)jarg1; 
  arg2 = (double)jarg2; 
  (arg1)->setTransAccel(arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_ArActionDesired_setTransDecel__SWIG_0(void * jarg1, double jarg2, double jarg3, unsigned int jarg4) {
  ArActionDesired *arg1 = (ArActionDesired *) 0 ;
  double arg2 ;
  double arg3 ;
  bool arg4 ;
  
  arg1 = (ArActionDesired *)jarg1; 
  arg2 = (double)jarg2; 
  arg3 = (double)jarg3; 
  arg4 = jarg4 ? true : false; 
  (arg1)->setTransDecel(arg2,arg3,arg4);
}


SWIGEXPORT void SWIGSTDCALL CSharp_ArActionDesired_setTransDecel__SWIG_1(void * jarg1, double jarg2, double jarg3) {
  ArActionDesired *arg1 = (ArActionDesired *) 0 ;
  double arg2 ;
  double arg3 ;
  
  arg1 = (ArActionDesired *)jarg1; 
  arg2 = (double)jarg2; 
  arg3 = (double)jarg3; 
  (arg1)->setTransDecel(arg2,arg3);
}


SWIGEXPORT void SWIGSTDCALL CSharp_ArActionDesired_setTransDecel__SWIG_2(void * jarg1, double jarg2) {
  ArActionDesired *arg1 = (ArActionDesired *) 0 ;
  double arg2 ;
  
  arg1 = (ArActionDesired *)jarg1; 
  arg2 = (double)jarg2; 
  (arg1)->setTransDecel(arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_ArActionDesired_setMaxRotVel__SWIG_0(void * jarg1, double jarg2, double jarg3, unsigned int jarg4) {
  ArActionDesired *arg1 = (ArActionDesired *) 0 ;
  double arg2 ;
  double arg3 ;
  bool arg4 ;
  
  arg1 = (ArActionDesired *)jarg1; 
  arg2 = (double)jarg2; 
  arg3 = (double)jarg3; 
  arg4 = jarg4 ? true : false; 
  (arg1)->setMaxRotVel(arg2,arg3,arg4);
}


SWIGEXPORT void SWIGSTDCALL CSharp_ArActionDesired_setMaxRotVel__SWIG_1(void * jarg1, double jarg2, double jarg3) {
  ArActionDesired *arg1 = (ArActionDesired *) 0 ;
  double arg2 ;
  double arg3 ;
  
  arg1 = (ArActionDesired *)jarg1; 
  arg2 = (double)jarg2; 
  arg3 = (double)jarg3; 
  (arg1)->setMaxRotVel(arg2,arg3);
}


SWIGEXPORT void SWIGSTDCALL CSharp_ArActionDesired_setMaxRotVel__SWIG_2(void * jarg1, double jarg2) {
  ArActionDesired *arg1 = (ArActionDesired *) 0 ;
  double arg2 ;
  
  arg1 = (ArActionDesired *)jarg1; 
  arg2 = (double)jarg2; 
  (arg1)->setMaxRotVel(arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_ArActionDesired_setMaxRotVelPos__SWIG_0(void * jarg1, double jarg2, double jarg3, unsigned int jarg4) {
  ArActionDesired *arg1 = (ArActionDesired *) 0 ;
  double arg2 ;
  double arg3 ;
  bool arg4 ;
  
  arg1 = (ArActionDesired *)jarg1; 
  arg2 = (double)jarg2; 
  arg3 = (double)jarg3; 
  arg4 = jarg4 ? true : false; 
  (arg1)->setMaxRotVelPos(arg2,arg3,arg4);
}


SWIGEXPORT void SWIGSTDCALL CSharp_ArActionDesired_setMaxRotVelPos__SWIG_1(void * jarg1, double jarg2, double jarg3) {
  ArActionDesired *arg1 = (ArActionDesired *) 0 ;
  double arg2 ;
  double arg3 ;
  
  arg1 = (ArActionDesired *)jarg1; 
  arg2 = (double)jarg2; 
  arg3 = (double)jarg3; 
  (arg1)->setMaxRotVelPos(arg2,arg3);
}


SWIGEXPORT void SWIGSTDCALL CSharp_ArActionDesired_setMaxRotVelPos__SWIG_2(void * jarg1, double jarg2) {
  ArActionDesired *arg1 = (ArActionDesired *) 0 ;
  double arg2 ;
  
  arg1 = (ArActionDesired *)jarg1; 
  arg2 = (double)jarg2; 
  (arg1)->setMaxRotVelPos(arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_ArActionDesired_setMaxRotVelNeg__SWIG_0(void * jarg1, double jarg2, double jarg3, unsigned int jarg4) {
  ArActionDesired *arg1 = (ArActionDesired *) 0 ;
  double arg2 ;
  double arg3 ;
  bool arg4 ;
  
  arg1 = (ArActionDesired *)jarg1; 
  arg2 = (double)jarg2; 
  arg3 = (double)jarg3; 
  arg4 = jarg4 ? true : false; 
  (arg1)->setMaxRotVelNeg(arg2,arg3,arg4);
}


SWIGEXPORT void SWIGSTDCALL CSharp_ArActionDesired_setMaxRotVelNeg__SWIG_1(void * jarg1, double jarg2, double jarg3) {
  ArActionDesired *arg1 = (ArActionDesired *) 0 ;
  double arg2 ;
  double arg3 ;
  
  arg1 = (ArActionDesired *)jarg1; 
  arg2 = (double)jarg2; 
  arg3 = (double)jarg3; 
  (arg1)->setMaxRotVelNeg(arg2,arg3);
}


SWIGEXPORT void SWIGSTDCALL CSharp_ArActionDesired_setMaxRotVelNeg__SWIG_2(void * jarg1, double jarg2) {
  ArActionDesired *arg1 = (ArActionDesired *) 0 ;
  double arg2 ;
  
  arg1 = (ArActionDesired *)jarg1; 
  arg2 = (double)jarg2; 
  (arg1)->setMaxRotVelNeg(arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_ArActionDesired_setRotAccel__SWIG_0(void * jarg1, double jarg2, double jarg3, unsigned int jarg4) {
  ArActionDesired *arg1 = (ArActionDesired *) 0 ;
  double arg2 ;
  double arg3 ;
  bool arg4 ;
  
  arg1 = (ArActionDesired *)jarg1; 
  arg2 = (double)jarg2; 
  arg3 = (double)jarg3; 
  arg4 = jarg4 ? true : false; 
  (arg1)->setRotAccel(arg2,arg3,arg4);
}


SWIGEXPORT void SWIGSTDCALL CSharp_ArActionDesired_setRotAccel__SWIG_1(void * jarg1, double jarg2, double jarg3) {
  ArActionDesired *arg1 = (ArActionDesired *) 0 ;
  double arg2 ;
  double arg3 ;
  
  arg1 = (ArActionDesired *)jarg1; 
  arg2 = (double)jarg2; 
  arg3 = (double)jarg3; 
  (arg1)->setRotAccel(arg2,arg3);
}


SWIGEXPORT void SWIGSTDCALL CSharp_ArActionDesired_setRotAccel__SWIG_2(void * jarg1, double jarg2) {
  ArActionDesired *arg1 = (ArActionDesired *) 0 ;
  double arg2 ;
  
  arg1 = (ArActionDesired *)jarg1; 
  arg2 = (double)jarg2; 
  (arg1)->setRotAccel(arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_ArActionDesired_setRotDecel__SWIG_0(void * jarg1, double jarg2, double jarg3, unsigned int jarg4) {
  ArActionDesired *arg1 = (ArActionDesired *) 0 ;
  double arg2 ;
  double arg3 ;
  bool arg4 ;
  
  arg1 = (ArActionDesired *)jarg1; 
  arg2 = (double)jarg2; 
  arg3 = (double)jarg3; 
  arg4 = jarg4 ? true : false; 
  (arg1)->setRotDecel(arg2,arg3,arg4);
}


SWIGEXPORT void SWIGSTDCALL CSharp_ArActionDesired_setRotDecel__SWIG_1(void * jarg1, double jarg2, double jarg3) {
  ArActionDesired *arg1 = (ArActionDesired *) 0 ;
  double arg2 ;
  double arg3 ;
  
  arg1 = (ArActionDesired *)jarg1; 
  arg2 = (double)jarg2; 
  arg3 = (double)jarg3; 
  (arg1)->setRotDecel(arg2,arg3);
}


SWIGEXPORT void SWIGSTDCALL CSharp_ArActionDesired_setRotDecel__SWIG_2(void * jarg1, double jarg2) {
  ArActionDesired *arg1 = (ArActionDesired *) 0 ;
  double arg2 ;
  
  arg1 = (ArActionDesired *)jarg1; 
  arg2 = (double)jarg2; 
  (arg1)->setRotDecel(arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_ArActionDesired_setLeftLatVel__SWIG_0(void * jarg1, double jarg2, double jarg3) {
  ArActionDesired *arg1 = (ArActionDesired *) 0 ;
  double arg2 ;
  double arg3 ;
  
  arg1 = (ArActionDesired *)jarg1; 
  arg2 = (double)jarg2; 
  arg3 = (double)jarg3; 
  (arg1)->setLeftLatVel(arg2,arg3);
}


SWIGEXPORT void SWIGSTDCALL CSharp_ArActionDesired_setLeftLatVel__SWIG_1(void * jarg1, double jarg2) {
  ArActionDesired *arg1 = (ArActionDesired *) 0 ;
  double arg2 ;
  
  arg1 = (ArActionDesired *)jarg1; 
  arg2 = (double)jarg2; 
  (arg1)->setLeftLatVel(arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_ArActionDesired_setRightLatVel__SWIG_0(void * jarg1, double jarg2, double jarg3) {
  ArActionDesired *arg1 = (ArActionDesired *) 0 ;
  double arg2 ;
  double arg3 ;
  
  arg1 = (ArActionDesired *)jarg1; 
  arg2 = (double)jarg2; 
  arg3 = (double)jarg3; 
  (arg1)->setRightLatVel(arg2,arg3);
}


SWIGEXPORT void SWIGSTDCALL CSharp_ArActionDesired_setRightLatVel__SWIG_1(void * jarg1, double jarg2) {
  ArActionDesired *arg1 = (ArActionDesired *) 0 ;
  double arg2 ;
  
  arg1 = (ArActionDesired *)jarg1; 
  arg2 = (double)jarg2; 
  (arg1)->setRightLatVel(arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_ArActionDesired_setMaxLeftLatVel__SWIG_0(void * jarg1, double jarg2, double jarg3, unsigned int jarg4) {
  ArActionDesired *arg1 = (ArActionDesired *) 0 ;
  double arg2 ;
  double arg3 ;
  bool arg4 ;
  
  arg1 = (ArActionDesired *)jarg1; 
  arg2 = (double)jarg2; 
  arg3 = (double)jarg3; 
  arg4 = jarg4 ? true : false; 
  (arg1)->setMaxLeftLatVel(arg2,arg3,arg4);
}


SWIGEXPORT void SWIGSTDCALL CSharp_ArActionDesired_setMaxLeftLatVel__SWIG_1(void * jarg1, double jarg2, double jarg3) {
  ArActionDesired *arg1 = (ArActionDesired *) 0 ;
  double arg2 ;
  double arg3 ;
  
  arg1 = (ArActionDesired *)jarg1; 
  arg2 = (double)jarg2; 
  arg3 = (double)jarg3; 
  (arg1)->setMaxLeftLatVel(arg2,arg3);
}


SWIGEXPORT void SWIGSTDCALL CSharp_ArActionDesired_setMaxLeftLatVel__SWIG_2(void * jarg1, double jarg2) {
  ArActionDesired *arg1 = (ArActionDesired *) 0 ;
  double arg2 ;
  
  arg1 = (ArActionDesired *)jarg1; 
  arg2 = (double)jarg2; 
  (arg1)->setMaxLeftLatVel(arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_ArActionDesired_setMaxRightLatVel__SWIG_0(void * jarg1, double jarg2, double jarg3, unsigned int jarg4) {
  ArActionDesired *arg1 = (ArActionDesired *) 0 ;
  double arg2 ;
  double arg3 ;
  bool arg4 ;
  
  arg1 = (ArActionDesired *)jarg1; 
  arg2 = (double)jarg2; 
  arg3 = (double)jarg3; 
  arg4 = jarg4 ? true : false; 
  (arg1)->setMaxRightLatVel(arg2,arg3,arg4);
}


SWIGEXPORT void SWIGSTDCALL CSharp_ArActionDesired_setMaxRightLatVel__SWIG_1(void * jarg1, double jarg2, double jarg3) {
  ArActionDesired *arg1 = (ArActionDesired *) 0 ;
  double arg2 ;
  double arg3 ;
  
  arg1 = (ArActionDesired *)jarg1; 
  arg2 = (double)jarg2; 
  arg3 = (double)jarg3; 
  (arg1)->setMaxRightLatVel(arg2,arg3);
}


SWIGEXPORT void SWIGSTDCALL CSharp_ArActionDesired_setMaxRightLatVel__SWIG_2(void * jarg1, double jarg2) {
  ArActionDesired *arg1 = (ArActionDesired *) 0 ;
  double arg2 ;
  
  arg1 = (ArActionDesired *)jarg1; 
  arg2 = (double)jarg2; 
  (arg1)->setMaxRightLatVel(arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_ArActionDesired_setLatAccel__SWIG_0(void * jarg1, double jarg2, double jarg3, unsigned int jarg4) {
  ArActionDesired *arg1 = (ArActionDesired *) 0 ;
  double arg2 ;
  double arg3 ;
  bool arg4 ;
  
  arg1 = (ArActionDesired *)jarg1; 
  arg2 = (double)jarg2; 
  arg3 = (double)jarg3; 
  arg4 = jarg4 ? true : false; 
  (arg1)->setLatAccel(arg2,arg3,arg4);
}


SWIGEXPORT void SWIGSTDCALL CSharp_ArActionDesired_setLatAccel__SWIG_1(void * jarg1, double jarg2, double jarg3) {
  ArActionDesired *arg1 = (ArActionDesired *) 0 ;
  double arg2 ;
  double arg3 ;
  
  arg1 = (ArActionDesired *)jarg1; 
  arg2 = (double)jarg2; 
  arg3 = (double)jarg3; 
  (arg1)->setLatAccel(arg2,arg3);
}


SWIGEXPORT void SWIGSTDCALL CSharp_ArActionDesired_setLatAccel__SWIG_2(void * jarg1, double jarg2) {
  ArActionDesired *arg1 = (ArActionDesired *) 0 ;
  double arg2 ;
  
  arg1 = (ArActionDesired *)jarg1; 
  arg2 = (double)jarg2; 
  (arg1)->setLatAccel(arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_ArActionDesired_setLatDecel__SWIG_0(void * jarg1, double jarg2, double jarg3, unsigned int jarg4) {
  ArActionDesired *arg1 = (ArActionDesired *) 0 ;
  double arg2 ;
  double arg3 ;
  bool arg4 ;
  
  arg1 = (ArActionDesired *)jarg1; 
  arg2 = (double)jarg2; 
  arg3 = (double)jarg3; 
  arg4 = jarg4 ? true : false; 
  (arg1)->setLatDecel(arg2,arg3,arg4);
}


SWIGEXPORT void SWIGSTDCALL CSharp_ArActionDesired_setLatDecel__SWIG_1(void * jarg1, double jarg2, double jarg3) {
  ArActionDesired *arg1 = (ArActionDesired *) 0 ;
  double arg2 ;
  double arg3 ;
  
  arg1 = (ArActionDesired *)jarg1; 
  arg2 = (double)jarg2; 
  arg3 = (double)jarg3; 
  (arg1)->setLatDecel(arg2,arg3);
}


SWIGEXPORT void SWIGSTDCALL CSharp_ArActionDesired_setLatDecel__SWIG_2(void * jarg1, double jarg2) {
  ArActionDesired *arg1 = (ArActionDesired *) 0 ;
  double arg2 ;
  
  arg1 = (ArActionDesired *)jarg1; 
  arg2 = (double)jarg2; 
  (arg1)->setLatDecel(arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_ArActionDesired_reset(void * jarg1) {
  ArActionDesired *arg1 = (ArActionDesired *) 0 ;
  
  arg1 = (ArActionDesired *)jarg1; 
  (arg1)->reset();
}


SWIGEXPORT double SWIGSTDCALL CSharp_ArActionDesired_getVel(void * jarg1) {
  double jresult ;
  ArActionDesired *arg1 = (ArActionDesired *) 0 ;
  double result;
  
  arg1 = (ArActionDesired *)jarg1; 
  result = (double)((ArActionDesired const *)arg1)->getVel();
  jresult = result; 
  return jresult;
}


SWIGEXPORT double SWIGSTDCALL CSharp_ArActionDesired_getVelStrength(void * jarg1) {
  double jresult ;
  ArActionDesired *arg1 = (ArActionDesired *) 0 ;
  double result;
  
  arg1 = (ArActionDesired *)jarg1; 
  result = (double)((ArActionDesired const *)arg1)->getVelStrength();
  jresult = result; 
  return jresult;
}


SWIGEXPORT double SWIGSTDCALL CSharp_ArActionDesired_getHeading(void * jarg1) {
  double jresult ;
  ArActionDesired *arg1 = (ArActionDesired *) 0 ;
  double result;
  
  arg1 = (ArActionDesired *)jarg1; 
  result = (double)((ArActionDesired const *)arg1)->getHeading();
  jresult = result; 
  return jresult;
}


SWIGEXPORT double SWIGSTDCALL CSharp_ArActionDesired_getHeadingStrength(void * jarg1) {
  double jresult ;
  ArActionDesired *arg1 = (ArActionDesired *) 0 ;
  double result;
  
  arg1 = (ArActionDesired *)jarg1; 
  result = (double)((ArActionDesired const *)arg1)->getHeadingStrength();
  jresult = result; 
  return jresult;
}


SWIGEXPORT double SWIGSTDCALL CSharp_ArActionDesired_getDeltaHeading(void * jarg1) {
  double jresult ;
  ArActionDesired *arg1 = (ArActionDesired *) 0 ;
  double result;
  
  arg1 = (ArActionDesired *)jarg1; 
  result = (double)((ArActionDesired const *)arg1)->getDeltaHeading();
  jresult = result; 
  return jresult;
}


SWIGEXPORT double SWIGSTDCALL CSharp_ArActionDesired_getDeltaHeadingStrength(void * jarg1) {
  double jresult ;
  ArActionDesired *arg1 = (ArActionDesired *) 0 ;
  double result;
  
  arg1 = (ArActionDesired *)jarg1; 
  result = (double)((ArActionDesired const *)arg1)->getDeltaHeadingStrength();
  jresult = result; 
  return jresult;
}


SWIGEXPORT double SWIGSTDCALL CSharp_ArActionDesired_getRotVel(void * jarg1) {
  double jresult ;
  ArActionDesired *arg1 = (ArActionDesired *) 0 ;
  double result;
  
  arg1 = (ArActionDesired *)jarg1; 
  result = (double)((ArActionDesired const *)arg1)->getRotVel();
  jresult = result; 
  return jresult;
}


SWIGEXPORT double SWIGSTDCALL CSharp_ArActionDesired_getRotVelStrength(void * jarg1) {
  double jresult ;
  ArActionDesired *arg1 = (ArActionDesired *) 0 ;
  double result;
  
  arg1 = (ArActionDesired *)jarg1; 
  result = (double)((ArActionDesired const *)arg1)->getRotVelStrength();
  jresult = result; 
  return jresult;
}


SWIGEXPORT double SWIGSTDCALL CSharp_ArActionDesired_getMaxVel(void * jarg1) {
  double jresult ;
  ArActionDesired *arg1 = (ArActionDesired *) 0 ;
  double result;
  
  arg1 = (ArActionDesired *)jarg1; 
  result = (double)((ArActionDesired const *)arg1)->getMaxVel();
  jresult = result; 
  return jresult;
}


SWIGEXPORT double SWIGSTDCALL CSharp_ArActionDesired_getMaxVelStrength(void * jarg1) {
  double jresult ;
  ArActionDesired *arg1 = (ArActionDesired *) 0 ;
  double result;
  
  arg1 = (ArActionDesired *)jarg1; 
  result = (double)((ArActionDesired const *)arg1)->getMaxVelStrength();
  jresult = result; 
  return jresult;
}


SWIGEXPORT double SWIGSTDCALL CSharp_ArActionDesired_getMaxVelSlowestUsed(void * jarg1) {
  double jresult ;
  ArActionDesired *arg1 = (ArActionDesired *) 0 ;
  double result;
  
  arg1 = (ArActionDesired *)jarg1; 
  result = (double)((ArActionDesired const *)arg1)->getMaxVelSlowestUsed();
  jresult = result; 
  return jresult;
}


SWIGEXPORT double SWIGSTDCALL CSharp_ArActionDesired_getMaxNegVel(void * jarg1) {
  double jresult ;
  ArActionDesired *arg1 = (ArActionDesired *) 0 ;
  double result;
  
  arg1 = (ArActionDesired *)jarg1; 
  result = (double)((ArActionDesired const *)arg1)->getMaxNegVel();
  jresult = result; 
  return jresult;
}


SWIGEXPORT double SWIGSTDCALL CSharp_ArActionDesired_getMaxNegVelStrength(void * jarg1) {
  double jresult ;
  ArActionDesired *arg1 = (ArActionDesired *) 0 ;
  double result;
  
  arg1 = (ArActionDesired *)jarg1; 
  result = (double)((ArActionDesired const *)arg1)->getMaxNegVelStrength();
  jresult = result; 
  return jresult;
}


SWIGEXPORT double SWIGSTDCALL CSharp_ArActionDesired_getMaxNegVelSlowestUsed(void * jarg1) {
  double jresult ;
  ArActionDesired *arg1 = (ArActionDesired *) 0 ;
  double result;
  
  arg1 = (ArActionDesired *)jarg1; 
  result = (double)((ArActionDesired const *)arg1)->getMaxNegVelSlowestUsed();
  jresult = result; 
  return jresult;
}


SWIGEXPORT double SWIGSTDCALL CSharp_ArActionDesired_getTransAccel(void * jarg1) {
  double jresult ;
  ArActionDesired *arg1 = (ArActionDesired *) 0 ;
  double result;
  
  arg1 = (ArActionDesired *)jarg1; 
  result = (double)((ArActionDesired const *)arg1)->getTransAccel();
  jresult = result; 
  return jresult;
}


SWIGEXPORT double SWIGSTDCALL CSharp_ArActionDesired_getTransAccelStrength(void * jarg1) {
  double jresult ;
  ArActionDesired *arg1 = (ArActionDesired *) 0 ;
  double result;
  
  arg1 = (ArActionDesired *)jarg1; 
  result = (double)((ArActionDesired const *)arg1)->getTransAccelStrength();
  jresult = result; 
  return jresult;
}


SWIGEXPORT double SWIGSTDCALL CSharp_ArActionDesired_getTransAccelSlowestUsed(void * jarg1) {
  double jresult ;
  ArActionDesired *arg1 = (ArActionDesired *) 0 ;
  double result;
  
  arg1 = (ArActionDesired *)jarg1; 
  result = (double)((ArActionDesired const *)arg1)->getTransAccelSlowestUsed();
  jresult = result; 
  return jresult;
}


SWIGEXPORT double SWIGSTDCALL CSharp_ArActionDesired_getTransDecel(void * jarg1) {
  double jresult ;
  ArActionDesired *arg1 = (ArActionDesired *) 0 ;
  double result;
  
  arg1 = (ArActionDesired *)jarg1; 
  result = (double)((ArActionDesired const *)arg1)->getTransDecel();
  jresult = result; 
  return jresult;
}


SWIGEXPORT double SWIGSTDCALL CSharp_ArActionDesired_getTransDecelStrength(void * jarg1) {
  double jresult ;
  ArActionDesired *arg1 = (ArActionDesired *) 0 ;
  double result;
  
  arg1 = (ArActionDesired *)jarg1; 
  result = (double)((ArActionDesired const *)arg1)->getTransDecelStrength();
  jresult = result; 
  return jresult;
}


SWIGEXPORT double SWIGSTDCALL CSharp_ArActionDesired_getTransDecelFastestUsed(void * jarg1) {
  double jresult ;
  ArActionDesired *arg1 = (ArActionDesired *) 0 ;
  double result;
  
  arg1 = (ArActionDesired *)jarg1; 
  result = (double)((ArActionDesired const *)arg1)->getTransDecelFastestUsed();
  jresult = result; 
  return jresult;
}


SWIGEXPORT double SWIGSTDCALL CSharp_ArActionDesired_getMaxRotVel(void * jarg1) {
  double jresult ;
  ArActionDesired *arg1 = (ArActionDesired *) 0 ;
  double result;
  
  arg1 = (ArActionDesired *)jarg1; 
  result = (double)((ArActionDesired const *)arg1)->getMaxRotVel();
  jresult = result; 
  return jresult;
}


SWIGEXPORT double SWIGSTDCALL CSharp_ArActionDesired_getMaxRotVelStrength(void * jarg1) {
  double jresult ;
  ArActionDesired *arg1 = (ArActionDesired *) 0 ;
  double result;
  
  arg1 = (ArActionDesired *)jarg1; 
  result = (double)((ArActionDesired const *)arg1)->getMaxRotVelStrength();
  jresult = result; 
  return jresult;
}


SWIGEXPORT double SWIGSTDCALL CSharp_ArActionDesired_getMaxRotVelSlowestUsed(void * jarg1) {
  double jresult ;
  ArActionDesired *arg1 = (ArActionDesired *) 0 ;
  double result;
  
  arg1 = (ArActionDesired *)jarg1; 
  result = (double)((ArActionDesired const *)arg1)->getMaxRotVelSlowestUsed();
  jresult = result; 
  return jresult;
}


SWIGEXPORT double SWIGSTDCALL CSharp_ArActionDesired_getMaxRotVelPos(void * jarg1) {
  double jresult ;
  ArActionDesired *arg1 = (ArActionDesired *) 0 ;
  double result;
  
  arg1 = (ArActionDesired *)jarg1; 
  result = (double)((ArActionDesired const *)arg1)->getMaxRotVelPos();
  jresult = result; 
  return jresult;
}


SWIGEXPORT double SWIGSTDCALL CSharp_ArActionDesired_getMaxRotVelPosStrength(void * jarg1) {
  double jresult ;
  ArActionDesired *arg1 = (ArActionDesired *) 0 ;
  double result;
  
  arg1 = (ArActionDesired *)jarg1; 
  result = (double)((ArActionDesired const *)arg1)->getMaxRotVelPosStrength();
  jresult = result; 
  return jresult;
}


SWIGEXPORT double SWIGSTDCALL CSharp_ArActionDesired_getMaxRotVelPosSlowestUsed(void * jarg1) {
  double jresult ;
  ArActionDesired *arg1 = (ArActionDesired *) 0 ;
  double result;
  
  arg1 = (ArActionDesired *)jarg1; 
  result = (double)((ArActionDesired const *)arg1)->getMaxRotVelPosSlowestUsed();
  jresult = result; 
  return jresult;
}


SWIGEXPORT double SWIGSTDCALL CSharp_ArActionDesired_getMaxRotVelNeg(void * jarg1) {
  double jresult ;
  ArActionDesired *arg1 = (ArActionDesired *) 0 ;
  double result;
  
  arg1 = (ArActionDesired *)jarg1; 
  result = (double)((ArActionDesired const *)arg1)->getMaxRotVelNeg();
  jresult = result; 
  return jresult;
}


SWIGEXPORT double SWIGSTDCALL CSharp_ArActionDesired_getMaxRotVelNegStrength(void * jarg1) {
  double jresult ;
  ArActionDesired *arg1 = (ArActionDesired *) 0 ;
  double result;
  
  arg1 = (ArActionDesired *)jarg1; 
  result = (double)((ArActionDesired const *)arg1)->getMaxRotVelNegStrength();
  jresult = result; 
  return jresult;
}


SWIGEXPORT double SWIGSTDCALL CSharp_ArActionDesired_getMaxRotVelNegSlowestUsed(void * jarg1) {
  double jresult ;
  ArActionDesired *arg1 = (ArActionDesired *) 0 ;
  double result;
  
  arg1 = (ArActionDesired *)jarg1; 
  result = (double)((ArActionDesired const *)arg1)->getMaxRotVelNegSlowestUsed();
  jresult = result; 
  return jresult;
}


SWIGEXPORT double SWIGSTDCALL CSharp_ArActionDesired_getRotAccel(void * jarg1) {
  double jresult ;
  ArActionDesired *arg1 = (ArActionDesired *) 0 ;
  double result;
  
  arg1 = (ArActionDesired *)jarg1; 
  result = (double)((ArActionDesired const *)arg1)->getRotAccel();
  jresult = result; 
  return jresult;
}


SWIGEXPORT double SWIGSTDCALL CSharp_ArActionDesired_getRotAccelStrength(void * jarg1) {
  double jresult ;
  ArActionDesired *arg1 = (ArActionDesired *) 0 ;
  double result;
  
  arg1 = (ArActionDesired *)jarg1; 
  result = (double)((ArActionDesired const *)arg1)->getRotAccelStrength();
  jresult = result; 
  return jresult;
}


SWIGEXPORT double SWIGSTDCALL CSharp_ArActionDesired_getRotAccelSlowestUsed(void * jarg1) {
  double jresult ;
  ArActionDesired *arg1 = (ArActionDesired *) 0 ;
  double result;
  
  arg1 = (ArActionDesired *)jarg1; 
  result = (double)((ArActionDesired const *)arg1)->getRotAccelSlowestUsed();
  jresult = result; 
  return jresult;
}


SWIGEXPORT double SWIGSTDCALL CSharp_ArActionDesired_getRotDecel(void * jarg1) {
  double jresult ;
  ArActionDesired *arg1 = (ArActionDesired *) 0 ;
  double result;
  
  arg1 = (ArActionDesired *)jarg1; 
  result = (double)((ArActionDesired const *)arg1)->getRotDecel();
  jresult = result; 
  return jresult;
}


SWIGEXPORT double SWIGSTDCALL CSharp_ArActionDesired_getRotDecelStrength(void * jarg1) {
  double jresult ;
  ArActionDesired *arg1 = (ArActionDesired *) 0 ;
  double result;
  
  arg1 = (ArActionDesired *)jarg1; 
  result = (double)((ArActionDesired const *)arg1)->getRotDecelStrength();
  jresult = result; 
  return jresult;
}


SWIGEXPORT double SWIGSTDCALL CSharp_ArActionDesired_getRotDecelFastestUsed(void * jarg1) {
  double jresult ;
  ArActionDesired *arg1 = (ArActionDesired *) 0 ;
  double result;
  
  arg1 = (ArActionDesired *)jarg1; 
  result = (double)((ArActionDesired const *)arg1)->getRotDecelFastestUsed();
  jresult = result; 
  return jresult;
}


SWIGEXPORT double SWIGSTDCALL CSharp_ArActionDesired_getLatVel(void * jarg1) {
  double jresult ;
  ArActionDesired *arg1 = (ArActionDesired *) 0 ;
  double result;
  
  arg1 = (ArActionDesired *)jarg1; 
  result = (double)((ArActionDesired const *)arg1)->getLatVel();
  jresult = result; 
  return jresult;
}


SWIGEXPORT double SWIGSTDCALL CSharp_ArActionDesired_getLatVelStrength(void * jarg1) {
  double jresult ;
  ArActionDesired *arg1 = (ArActionDesired *) 0 ;
  double result;
  
  arg1 = (ArActionDesired *)jarg1; 
  result = (double)((ArActionDesired const *)arg1)->getLatVelStrength();
  jresult = result; 
  return jresult;
}


SWIGEXPORT double SWIGSTDCALL CSharp_ArActionDesired_getMaxLeftLatVel(void * jarg1) {
  double jresult ;
  ArActionDesired *arg1 = (ArActionDesired *) 0 ;
  double result;
  
  arg1 = (ArActionDesired *)jarg1; 
  result = (double)((ArActionDesired const *)arg1)->getMaxLeftLatVel();
  jresult = result; 
  return jresult;
}


SWIGEXPORT double SWIGSTDCALL CSharp_ArActionDesired_getMaxLeftLatVelStrength(void * jarg1) {
  double jresult ;
  ArActionDesired *arg1 = (ArActionDesired *) 0 ;
  double result;
  
  arg1 = (ArActionDesired *)jarg1; 
  result = (double)((ArActionDesired const *)arg1)->getMaxLeftLatVelStrength();
  jresult = result; 
  return jresult;
}


SWIGEXPORT double SWIGSTDCALL CSharp_ArActionDesired_getMaxLeftLatVelSlowestUsed(void * jarg1) {
  double jresult ;
  ArActionDesired *arg1 = (ArActionDesired *) 0 ;
  double result;
  
  arg1 = (ArActionDesired *)jarg1; 
  result = (double)((ArActionDesired const *)arg1)->getMaxLeftLatVelSlowestUsed();
  jresult = result; 
  return jresult;
}


SWIGEXPORT double SWIGSTDCALL CSharp_ArActionDesired_getMaxRightLatVel(void * jarg1) {
  double jresult ;
  ArActionDesired *arg1 = (ArActionDesired *) 0 ;
  double result;
  
  arg1 = (ArActionDesired *)jarg1; 
  result = (double)((ArActionDesired const *)arg1)->getMaxRightLatVel();
  jresult = result; 
  return jresult;
}


SWIGEXPORT double SWIGSTDCALL CSharp_ArActionDesired_getMaxRightLatVelStrength(void * jarg1) {
  double jresult ;
  ArActionDesired *arg1 = (ArActionDesired *) 0 ;
  double result;
  
  arg1 = (ArActionDesired *)jarg1; 
  result = (double)((ArActionDesired const *)arg1)->getMaxRightLatVelStrength();
  jresult = result; 
  return jresult;
}


SWIGEXPORT double SWIGSTDCALL CSharp_ArActionDesired_getMaxRightLatVelSlowestUsed(void * jarg1) {
  double jresult ;
  ArActionDesired *arg1 = (ArActionDesired *) 0 ;
  double result;
  
  arg1 = (ArActionDesired *)jarg1; 
  result = (double)((ArActionDesired const *)arg1)->getMaxRightLatVelSlowestUsed();
  jresult = result; 
  return jresult;
}


SWIGEXPORT double SWIGSTDCALL CSharp_ArActionDesired_getLatAccel(void * jarg1) {
  double jresult ;
  ArActionDesired *arg1 = (ArActionDesired *) 0 ;
  double result;
  
  arg1 = (ArActionDesired *)jarg1; 
  result = (double)((ArActionDesired const *)arg1)->getLatAccel();
  jresult = result; 
  return jresult;
}


SWIGEXPORT double SWIGSTDCALL CSharp_ArActionDesired_getLatAccelStrength(void * jarg1) {
  double jresult ;
  ArActionDesired *arg1 = (ArActionDesired *) 0 ;
  double result;
  
  arg1 = (ArActionDesired *)jarg1; 
  result = (double)((ArActionDesired const *)arg1)->getLatAccelStrength();
  jresult = result; 
  return jresult;
}


SWIGEXPORT double SWIGSTDCALL CSharp_ArActionDesired_getLatAccelSlowestUsed(void * jarg1) {
  double jresult ;
  ArActionDesired *arg1 = (ArActionDesired *) 0 ;
  double result;
  
  arg1 = (ArActionDesired *)jarg1; 
  result = (double)((ArActionDesired const *)arg1)->getLatAccelSlowestUsed();
  jresult = result; 
  return jresult;
}


SWIGEXPORT double SWIGSTDCALL CSharp_ArActionDesired_getLatDecel(void * jarg1) {
  double jresult ;
  ArActionDesired *arg1 = (ArActionDesired *) 0 ;
  double result;
  
  arg1 = (ArActionDesired *)jarg1; 
  result = (double)((ArActionDesired const *)arg1)->getLatDecel();
  jresult = result; 
  return jresult;
}


SWIGEXPORT double SWIGSTDCALL CSharp_ArActionDesired_getLatDecelStrength(void * jarg1) {
  double jresult ;
  ArActionDesired *arg1 = (ArActionDesired *) 0 ;
  double result;
  
  arg1 = (ArActionDesired *)jarg1; 
  result = (double)((ArActionDesired const *)arg1)->getLatDecelStrength();
  jresult = result; 
  return jresult;
}


SWIGEXPORT double SWIGSTDCALL CSharp_ArActionDesired_getLatDecelFastestUsed(void * jarg1) {
  double jresult ;
  ArActionDesired *arg1 = (ArActionDesired *) 0 ;
  double result;
  
  arg1 = (ArActionDesired *)jarg1; 
  result = (double)((ArActionDesired const *)arg1)->getLatDecelFastestUsed();
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_ArActionDesired_merge(void * jarg1, void * jarg2) {
  ArActionDesired *arg1 = (ArActionDesired *) 0 ;
  ArActionDesired *arg2 = (ArActionDesired *) 0 ;
  
  arg1 = (ArActionDesired *)jarg1; 
  arg2 = (ArActionDesired *)jarg2; 
  (arg1)->merge(arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_ArActionDesired_startAverage(void * jarg1) {
  ArActionDesired *arg1 = (ArActionDesired *) 0 ;
  
  arg1 = (ArActionDesired *)jarg1; 
  (arg1)->startAverage();
}


SWIGEXPORT void SWIGSTDCALL CSharp_ArActionDesired_addAverage(void * jarg1, void * jarg2) {
  ArActionDesired *arg1 = (ArActionDesired *) 0 ;
  ArActionDesired *arg2 = (ArActionDesired *) 0 ;
  
  arg1 = (ArActionDesired *)jarg1; 
  arg2 = (ArActionDesired *)jarg2; 
  (arg1)->addAverage(arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_ArActionDesired_endAverage(void * jarg1) {
  ArActionDesired *arg1 = (ArActionDesired *) 0 ;
  
  arg1 = (ArActionDesired *)jarg1; 
  (arg1)->endAverage();
}


SWIGEXPORT void SWIGSTDCALL CSharp_ArActionDesired_accountForRobotHeading(void * jarg1, double jarg2) {
  ArActionDesired *arg1 = (ArActionDesired *) 0 ;
  double arg2 ;
  
  arg1 = (ArActionDesired *)jarg1; 
  arg2 = (double)jarg2; 
  (arg1)->accountForRobotHeading(arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_ArActionDesired_log(void * jarg1) {
  ArActionDesired *arg1 = (ArActionDesired *) 0 ;
  
  arg1 = (ArActionDesired *)jarg1; 
  ((ArActionDesired const *)arg1)->log();
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_ArActionDesired_isAnythingDesired(void * jarg1) {
  unsigned int jresult ;
  ArActionDesired *arg1 = (ArActionDesired *) 0 ;
  bool result;
  
  arg1 = (ArActionDesired *)jarg1; 
  result = (bool)((ArActionDesired const *)arg1)->isAnythingDesired();
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_ArActionDesired_sanityCheck(void * jarg1, char * jarg2) {
  ArActionDesired *arg1 = (ArActionDesired *) 0 ;
  char *arg2 = (char *) 0 ;
  
  arg1 = (ArActionDesired *)jarg1; 
  arg2 = (char *)jarg2; 
  (arg1)->sanityCheck((char const *)arg2);
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_ArActionDriveDistance__SWIG_0(char * jarg1, double jarg2, double jarg3) {
  void * jresult ;
  char *arg1 = (char *) 0 ;
  double arg2 ;
  double arg3 ;
  ArActionDriveDistance *result = 0 ;
  
  arg1 = (char *)jarg1; 
  arg2 = (double)jarg2; 
  arg3 = (double)jarg3; 
  result = (ArActionDriveDistance *)new ArActionDriveDistance((char const *)arg1,arg2,arg3);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_ArActionDriveDistance__SWIG_1(char * jarg1, double jarg2) {
  void * jresult ;
  char *arg1 = (char *) 0 ;
  double arg2 ;
  ArActionDriveDistance *result = 0 ;
  
  arg1 = (char *)jarg1; 
  arg2 = (double)jarg2; 
  result = (ArActionDriveDistance *)new ArActionDriveDistance((char const *)arg1,arg2);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_ArActionDriveDistance__SWIG_2(char * jarg1) {
  void * jresult ;
  char *arg1 = (char *) 0 ;
  ArActionDriveDistance *result = 0 ;
  
  arg1 = (char *)jarg1; 
  result = (ArActionDriveDistance *)new ArActionDriveDistance((char const *)arg1);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_ArActionDriveDistance__SWIG_3() {
  void * jresult ;
  ArActionDriveDistance *result = 0 ;
  
  result = (ArActionDriveDistance *)new ArActionDriveDistance();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_ArActionDriveDistance(void * jarg1) {
  ArActionDriveDistance *arg1 = (ArActionDriveDistance *) 0 ;
  
  arg1 = (ArActionDriveDistance *)jarg1; 
  delete arg1;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_ArActionDriveDistance_haveAchievedDistance(void * jarg1) {
  unsigned int jresult ;
  ArActionDriveDistance *arg1 = (ArActionDriveDistance *) 0 ;
  bool result;
  
  arg1 = (ArActionDriveDistance *)jarg1; 
  result = (bool)(arg1)->haveAchievedDistance();
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_ArActionDriveDistance_cancelDistance(void * jarg1) {
  ArActionDriveDistance *arg1 = (ArActionDriveDistance *) 0 ;
  
  arg1 = (ArActionDriveDistance *)jarg1; 
  (arg1)->cancelDistance();
}


SWIGEXPORT void SWIGSTDCALL CSharp_ArActionDriveDistance_setDistance__SWIG_0(void * jarg1, double jarg2, unsigned int jarg3) {
  ArActionDriveDistance *arg1 = (ArActionDriveDistance *) 0 ;
  double arg2 ;
  bool arg3 ;
  
  arg1 = (ArActionDriveDistance *)jarg1; 
  arg2 = (double)jarg2; 
  arg3 = jarg3 ? true : false; 
  (arg1)->setDistance(arg2,arg3);
}


SWIGEXPORT void SWIGSTDCALL CSharp_ArActionDriveDistance_setDistance__SWIG_1(void * jarg1, double jarg2) {
  ArActionDriveDistance *arg1 = (ArActionDriveDistance *) 0 ;
  double arg2 ;
  
  arg1 = (ArActionDriveDistance *)jarg1; 
  arg2 = (double)jarg2; 
  (arg1)->setDistance(arg2);
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_ArActionDriveDistance_usingEncoders(void * jarg1) {
  unsigned int jresult ;
  ArActionDriveDistance *arg1 = (ArActionDriveDistance *) 0 ;
  bool result;
  
  arg1 = (ArActionDriveDistance *)jarg1; 
  result = (bool)(arg1)->usingEncoders();
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_ArActionDriveDistance_setSpeed__SWIG_0(void * jarg1, double jarg2) {
  ArActionDriveDistance *arg1 = (ArActionDriveDistance *) 0 ;
  double arg2 ;
  
  arg1 = (ArActionDriveDistance *)jarg1; 
  arg2 = (double)jarg2; 
  (arg1)->setSpeed(arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_ArActionDriveDistance_setSpeed__SWIG_1(void * jarg1) {
  ArActionDriveDistance *arg1 = (ArActionDriveDistance *) 0 ;
  
  arg1 = (ArActionDriveDistance *)jarg1; 
  (arg1)->setSpeed();
}


SWIGEXPORT double SWIGSTDCALL CSharp_ArActionDriveDistance_getSpeed(void * jarg1) {
  double jresult ;
  ArActionDriveDistance *arg1 = (ArActionDriveDistance *) 0 ;
  double result;
  
  arg1 = (ArActionDriveDistance *)jarg1; 
  result = (double)(arg1)->getSpeed();
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_ArActionDriveDistance_setDeceleration__SWIG_0(void * jarg1, double jarg2) {
  ArActionDriveDistance *arg1 = (ArActionDriveDistance *) 0 ;
  double arg2 ;
  
  arg1 = (ArActionDriveDistance *)jarg1; 
  arg2 = (double)jarg2; 
  (arg1)->setDeceleration(arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_ArActionDriveDistance_setDeceleration__SWIG_1(void * jarg1) {
  ArActionDriveDistance *arg1 = (ArActionDriveDistance *) 0 ;
  
  arg1 = (ArActionDriveDistance *)jarg1; 
  (arg1)->setDeceleration();
}


SWIGEXPORT double SWIGSTDCALL CSharp_ArActionDriveDistance_getDeceleration(void * jarg1) {
  double jresult ;
  ArActionDriveDistance *arg1 = (ArActionDriveDistance *) 0 ;
  double result;
  
  arg1 = (ArActionDriveDistance *)jarg1; 
  result = (double)(arg1)->getDeceleration();
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_ArActionDriveDistance_setPrinting(void * jarg1, unsigned int jarg2) {
  ArActionDriveDistance *arg1 = (ArActionDriveDistance *) 0 ;
  bool arg2 ;
  
  arg1 = (ArActionDriveDistance *)jarg1; 
  arg2 = jarg2 ? true : false; 
  (arg1)->setPrinting(arg2);
}


SWIGEXPORT void * SWIGSTDCALL CSharp_ArActionDriveDistance_fire(void * jarg1, void * jarg2) {
  void * jresult ;
  ArActionDriveDistance *arg1 = (ArActionDriveDistance *) 0 ;
  ArActionDesired arg2 ;
  ArActionDesired *argp2 ;
  ArActionDesired *result = 0 ;
  
  arg1 = (ArActionDriveDistance *)jarg1; 
  argp2 = (ArActionDesired *)jarg2; 
  if (!argp2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Attempt to dereference null ArActionDesired", 0);
    return 0;
  }
  arg2 = *argp2; 
  result = (ArActionDesired *)(arg1)->fire(arg2);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_ArActionDriveDistance_getDesired(void * jarg1) {
  void * jresult ;
  ArActionDriveDistance *arg1 = (ArActionDriveDistance *) 0 ;
  ArActionDesired *result = 0 ;
  
  arg1 = (ArActionDriveDistance *)jarg1; 
  result = (ArActionDesired *)(arg1)->getDesired();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_ArActionGoto__SWIG_0(char * jarg1, void * jarg2, double jarg3, double jarg4, double jarg5, double jarg6) {
  void * jresult ;
  char *arg1 = (char *) 0 ;
  ArPose arg2 ;
  double arg3 ;
  double arg4 ;
  double arg5 ;
  double arg6 ;
  ArPose *argp2 ;
  ArActionGoto *result = 0 ;
  
  arg1 = (char *)jarg1; 
  argp2 = (ArPose *)jarg2; 
  if (!argp2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Attempt to dereference null ArPose", 0);
    return 0;
  }
  arg2 = *argp2; 
  arg3 = (double)jarg3; 
  arg4 = (double)jarg4; 
  arg5 = (double)jarg5; 
  arg6 = (double)jarg6; 
  result = (ArActionGoto *)new ArActionGoto((char const *)arg1,arg2,arg3,arg4,arg5,arg6);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_ArActionGoto__SWIG_1(char * jarg1, void * jarg2, double jarg3, double jarg4, double jarg5) {
  void * jresult ;
  char *arg1 = (char *) 0 ;
  ArPose arg2 ;
  double arg3 ;
  double arg4 ;
  double arg5 ;
  ArPose *argp2 ;
  ArActionGoto *result = 0 ;
  
  arg1 = (char *)jarg1; 
  argp2 = (ArPose *)jarg2; 
  if (!argp2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Attempt to dereference null ArPose", 0);
    return 0;
  }
  arg2 = *argp2; 
  arg3 = (double)jarg3; 
  arg4 = (double)jarg4; 
  arg5 = (double)jarg5; 
  result = (ArActionGoto *)new ArActionGoto((char const *)arg1,arg2,arg3,arg4,arg5);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_ArActionGoto__SWIG_2(char * jarg1, void * jarg2, double jarg3, double jarg4) {
  void * jresult ;
  char *arg1 = (char *) 0 ;
  ArPose arg2 ;
  double arg3 ;
  double arg4 ;
  ArPose *argp2 ;
  ArActionGoto *result = 0 ;
  
  arg1 = (char *)jarg1; 
  argp2 = (ArPose *)jarg2; 
  if (!argp2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Attempt to dereference null ArPose", 0);
    return 0;
  }
  arg2 = *argp2; 
  arg3 = (double)jarg3; 
  arg4 = (double)jarg4; 
  result = (ArActionGoto *)new ArActionGoto((char const *)arg1,arg2,arg3,arg4);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_ArActionGoto__SWIG_3(char * jarg1, void * jarg2, double jarg3) {
  void * jresult ;
  char *arg1 = (char *) 0 ;
  ArPose arg2 ;
  double arg3 ;
  ArPose *argp2 ;
  ArActionGoto *result = 0 ;
  
  arg1 = (char *)jarg1; 
  argp2 = (ArPose *)jarg2; 
  if (!argp2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Attempt to dereference null ArPose", 0);
    return 0;
  }
  arg2 = *argp2; 
  arg3 = (double)jarg3; 
  result = (ArActionGoto *)new ArActionGoto((char const *)arg1,arg2,arg3);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_ArActionGoto__SWIG_4(char * jarg1, void * jarg2) {
  void * jresult ;
  char *arg1 = (char *) 0 ;
  ArPose arg2 ;
  ArPose *argp2 ;
  ArActionGoto *result = 0 ;
  
  arg1 = (char *)jarg1; 
  argp2 = (ArPose *)jarg2; 
  if (!argp2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Attempt to dereference null ArPose", 0);
    return 0;
  }
  arg2 = *argp2; 
  result = (ArActionGoto *)new ArActionGoto((char const *)arg1,arg2);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_ArActionGoto__SWIG_5(char * jarg1) {
  void * jresult ;
  char *arg1 = (char *) 0 ;
  ArActionGoto *result = 0 ;
  
  arg1 = (char *)jarg1; 
  result = (ArActionGoto *)new ArActionGoto((char const *)arg1);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_ArActionGoto__SWIG_6() {
  void * jresult ;
  ArActionGoto *result = 0 ;
  
  result = (ArActionGoto *)new ArActionGoto();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_ArActionGoto(void * jarg1) {
  ArActionGoto *arg1 = (ArActionGoto *) 0 ;
  
  arg1 = (ArActionGoto *)jarg1; 
  delete arg1;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_ArActionGoto_haveAchievedGoal(void * jarg1) {
  unsigned int jresult ;
  ArActionGoto *arg1 = (ArActionGoto *) 0 ;
  bool result;
  
  arg1 = (ArActionGoto *)jarg1; 
  result = (bool)(arg1)->haveAchievedGoal();
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_ArActionGoto_cancelGoal(void * jarg1) {
  ArActionGoto *arg1 = (ArActionGoto *) 0 ;
  
  arg1 = (ArActionGoto *)jarg1; 
  (arg1)->cancelGoal();
}


SWIGEXPORT void SWIGSTDCALL CSharp_ArActionGoto_setGoal(void * jarg1, void * jarg2) {
  ArActionGoto *arg1 = (ArActionGoto *) 0 ;
  ArPose arg2 ;
  ArPose *argp2 ;
  
  arg1 = (ArActionGoto *)jarg1; 
  argp2 = (ArPose *)jarg2; 
  if (!argp2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Attempt to dereference null ArPose", 0);
    return ;
  }
  arg2 = *argp2; 
  (arg1)->setGoal(arg2);
}


SWIGEXPORT void * SWIGSTDCALL CSharp_ArActionGoto_getGoal(void * jarg1) {
  void * jresult ;
  ArActionGoto *arg1 = (ArActionGoto *) 0 ;
  ArPose result;
  
  arg1 = (ArActionGoto *)jarg1; 
  result = (arg1)->getGoal();
  jresult = new ArPose((const ArPose &)result); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_ArActionGoto_setCloseDist(void * jarg1, double jarg2) {
  ArActionGoto *arg1 = (ArActionGoto *) 0 ;
  double arg2 ;
  
  arg1 = (ArActionGoto *)jarg1; 
  arg2 = (double)jarg2; 
  (arg1)->setCloseDist(arg2);
}


SWIGEXPORT double SWIGSTDCALL CSharp_ArActionGoto_getCloseDist(void * jarg1) {
  double jresult ;
  ArActionGoto *arg1 = (ArActionGoto *) 0 ;
  double result;
  
  arg1 = (ArActionGoto *)jarg1; 
  result = (double)(arg1)->getCloseDist();
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_ArActionGoto_setSpeed(void * jarg1, double jarg2) {
  ArActionGoto *arg1 = (ArActionGoto *) 0 ;
  double arg2 ;
  
  arg1 = (ArActionGoto *)jarg1; 
  arg2 = (double)jarg2; 
  (arg1)->setSpeed(arg2);
}


SWIGEXPORT double SWIGSTDCALL CSharp_ArActionGoto_getSpeed(void * jarg1) {
  double jresult ;
  ArActionGoto *arg1 = (ArActionGoto *) 0 ;
  double result;
  
  arg1 = (ArActionGoto *)jarg1; 
  result = (double)(arg1)->getSpeed();
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_ArActionGoto_fire(void * jarg1, void * jarg2) {
  void * jresult ;
  ArActionGoto *arg1 = (ArActionGoto *) 0 ;
  ArActionDesired arg2 ;
  ArActionDesired *argp2 ;
  ArActionDesired *result = 0 ;
  
  arg1 = (ArActionGoto *)jarg1; 
  argp2 = (ArActionDesired *)jarg2; 
  if (!argp2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Attempt to dereference null ArActionDesired", 0);
    return 0;
  }
  arg2 = *argp2; 
  result = (ArActionDesired *)(arg1)->fire(arg2);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_ArActionGoto_getDesired(void * jarg1) {
  void * jresult ;
  ArActionGoto *arg1 = (ArActionGoto *) 0 ;
  ArActionDesired *result = 0 ;
  
  arg1 = (ArActionGoto *)jarg1; 
  result = (ArActionDesired *)(arg1)->getDesired();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_ArActionGotoStraight__SWIG_0(char * jarg1, double jarg2) {
  void * jresult ;
  char *arg1 = (char *) 0 ;
  double arg2 ;
  ArActionGotoStraight *result = 0 ;
  
  arg1 = (char *)jarg1; 
  arg2 = (double)jarg2; 
  result = (ArActionGotoStraight *)new ArActionGotoStraight((char const *)arg1,arg2);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_ArActionGotoStraight__SWIG_1(char * jarg1) {
  void * jresult ;
  char *arg1 = (char *) 0 ;
  ArActionGotoStraight *result = 0 ;
  
  arg1 = (char *)jarg1; 
  result = (ArActionGotoStraight *)new ArActionGotoStraight((char const *)arg1);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_ArActionGotoStraight__SWIG_2() {
  void * jresult ;
  ArActionGotoStraight *result = 0 ;
  
  result = (ArActionGotoStraight *)new ArActionGotoStraight();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_ArActionGotoStraight(void * jarg1) {
  ArActionGotoStraight *arg1 = (ArActionGotoStraight *) 0 ;
  
  arg1 = (ArActionGotoStraight *)jarg1; 
  delete arg1;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_ArActionGotoStraight_haveAchievedGoal(void * jarg1) {
  unsigned int jresult ;
  ArActionGotoStraight *arg1 = (ArActionGotoStraight *) 0 ;
  bool result;
  
  arg1 = (ArActionGotoStraight *)jarg1; 
  result = (bool)(arg1)->haveAchievedGoal();
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_ArActionGotoStraight_cancelGoal(void * jarg1) {
  ArActionGotoStraight *arg1 = (ArActionGotoStraight *) 0 ;
  
  arg1 = (ArActionGotoStraight *)jarg1; 
  (arg1)->cancelGoal();
}


SWIGEXPORT void SWIGSTDCALL CSharp_ArActionGotoStraight_setGoal__SWIG_0(void * jarg1, void * jarg2, unsigned int jarg3, unsigned int jarg4) {
  ArActionGotoStraight *arg1 = (ArActionGotoStraight *) 0 ;
  ArPose arg2 ;
  bool arg3 ;
  bool arg4 ;
  ArPose *argp2 ;
  
  arg1 = (ArActionGotoStraight *)jarg1; 
  argp2 = (ArPose *)jarg2; 
  if (!argp2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Attempt to dereference null ArPose", 0);
    return ;
  }
  arg2 = *argp2; 
  arg3 = jarg3 ? true : false; 
  arg4 = jarg4 ? true : false; 
  (arg1)->setGoal(arg2,arg3,arg4);
}


SWIGEXPORT void SWIGSTDCALL CSharp_ArActionGotoStraight_setGoal__SWIG_1(void * jarg1, void * jarg2, unsigned int jarg3) {
  ArActionGotoStraight *arg1 = (ArActionGotoStraight *) 0 ;
  ArPose arg2 ;
  bool arg3 ;
  ArPose *argp2 ;
  
  arg1 = (ArActionGotoStraight *)jarg1; 
  argp2 = (ArPose *)jarg2; 
  if (!argp2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Attempt to dereference null ArPose", 0);
    return ;
  }
  arg2 = *argp2; 
  arg3 = jarg3 ? true : false; 
  (arg1)->setGoal(arg2,arg3);
}


SWIGEXPORT void SWIGSTDCALL CSharp_ArActionGotoStraight_setGoal__SWIG_2(void * jarg1, void * jarg2) {
  ArActionGotoStraight *arg1 = (ArActionGotoStraight *) 0 ;
  ArPose arg2 ;
  ArPose *argp2 ;
  
  arg1 = (ArActionGotoStraight *)jarg1; 
  argp2 = (ArPose *)jarg2; 
  if (!argp2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Attempt to dereference null ArPose", 0);
    return ;
  }
  arg2 = *argp2; 
  (arg1)->setGoal(arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_ArActionGotoStraight_setGoalRel__SWIG_0(void * jarg1, double jarg2, double jarg3, unsigned int jarg4, unsigned int jarg5) {
  ArActionGotoStraight *arg1 = (ArActionGotoStraight *) 0 ;
  double arg2 ;
  double arg3 ;
  bool arg4 ;
  bool arg5 ;
  
  arg1 = (ArActionGotoStraight *)jarg1; 
  arg2 = (double)jarg2; 
  arg3 = (double)jarg3; 
  arg4 = jarg4 ? true : false; 
  arg5 = jarg5 ? true : false; 
  (arg1)->setGoalRel(arg2,arg3,arg4,arg5);
}


SWIGEXPORT void SWIGSTDCALL CSharp_ArActionGotoStraight_setGoalRel__SWIG_1(void * jarg1, double jarg2, double jarg3, unsigned int jarg4) {
  ArActionGotoStraight *arg1 = (ArActionGotoStraight *) 0 ;
  double arg2 ;
  double arg3 ;
  bool arg4 ;
  
  arg1 = (ArActionGotoStraight *)jarg1; 
  arg2 = (double)jarg2; 
  arg3 = (double)jarg3; 
  arg4 = jarg4 ? true : false; 
  (arg1)->setGoalRel(arg2,arg3,arg4);
}


SWIGEXPORT void SWIGSTDCALL CSharp_ArActionGotoStraight_setGoalRel__SWIG_2(void * jarg1, double jarg2, double jarg3) {
  ArActionGotoStraight *arg1 = (ArActionGotoStraight *) 0 ;
  double arg2 ;
  double arg3 ;
  
  arg1 = (ArActionGotoStraight *)jarg1; 
  arg2 = (double)jarg2; 
  arg3 = (double)jarg3; 
  (arg1)->setGoalRel(arg2,arg3);
}


SWIGEXPORT void * SWIGSTDCALL CSharp_ArActionGotoStraight_getGoal(void * jarg1) {
  void * jresult ;
  ArActionGotoStraight *arg1 = (ArActionGotoStraight *) 0 ;
  ArPose result;
  
  arg1 = (ArActionGotoStraight *)jarg1; 
  result = (arg1)->getGoal();
  jresult = new ArPose((const ArPose &)result); 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_ArActionGotoStraight_usingEncoderGoal(void * jarg1) {
  unsigned int jresult ;
  ArActionGotoStraight *arg1 = (ArActionGotoStraight *) 0 ;
  bool result;
  
  arg1 = (ArActionGotoStraight *)jarg1; 
  result = (bool)(arg1)->usingEncoderGoal();
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_ArActionGotoStraight_setEncoderGoal__SWIG_0(void * jarg1, void * jarg2, unsigned int jarg3, unsigned int jarg4) {
  ArActionGotoStraight *arg1 = (ArActionGotoStraight *) 0 ;
  ArPose arg2 ;
  bool arg3 ;
  bool arg4 ;
  ArPose *argp2 ;
  
  arg1 = (ArActionGotoStraight *)jarg1; 
  argp2 = (ArPose *)jarg2; 
  if (!argp2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Attempt to dereference null ArPose", 0);
    return ;
  }
  arg2 = *argp2; 
  arg3 = jarg3 ? true : false; 
  arg4 = jarg4 ? true : false; 
  (arg1)->setEncoderGoal(arg2,arg3,arg4);
}


SWIGEXPORT void SWIGSTDCALL CSharp_ArActionGotoStraight_setEncoderGoal__SWIG_1(void * jarg1, void * jarg2, unsigned int jarg3) {
  ArActionGotoStraight *arg1 = (ArActionGotoStraight *) 0 ;
  ArPose arg2 ;
  bool arg3 ;
  ArPose *argp2 ;
  
  arg1 = (ArActionGotoStraight *)jarg1; 
  argp2 = (ArPose *)jarg2; 
  if (!argp2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Attempt to dereference null ArPose", 0);
    return ;
  }
  arg2 = *argp2; 
  arg3 = jarg3 ? true : false; 
  (arg1)->setEncoderGoal(arg2,arg3);
}


SWIGEXPORT void SWIGSTDCALL CSharp_ArActionGotoStraight_setEncoderGoal__SWIG_2(void * jarg1, void * jarg2) {
  ArActionGotoStraight *arg1 = (ArActionGotoStraight *) 0 ;
  ArPose arg2 ;
  ArPose *argp2 ;
  
  arg1 = (ArActionGotoStraight *)jarg1; 
  argp2 = (ArPose *)jarg2; 
  if (!argp2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Attempt to dereference null ArPose", 0);
    return ;
  }
  arg2 = *argp2; 
  (arg1)->setEncoderGoal(arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_ArActionGotoStraight_setEncoderGoalRel__SWIG_0(void * jarg1, double jarg2, double jarg3, unsigned int jarg4, unsigned int jarg5) {
  ArActionGotoStraight *arg1 = (ArActionGotoStraight *) 0 ;
  double arg2 ;
  double arg3 ;
  bool arg4 ;
  bool arg5 ;
  
  arg1 = (ArActionGotoStraight *)jarg1; 
  arg2 = (double)jarg2; 
  arg3 = (double)jarg3; 
  arg4 = jarg4 ? true : false; 
  arg5 = jarg5 ? true : false; 
  (arg1)->setEncoderGoalRel(arg2,arg3,arg4,arg5);
}


SWIGEXPORT void SWIGSTDCALL CSharp_ArActionGotoStraight_setEncoderGoalRel__SWIG_1(void * jarg1, double jarg2, double jarg3, unsigned int jarg4) {
  ArActionGotoStraight *arg1 = (ArActionGotoStraight *) 0 ;
  double arg2 ;
  double arg3 ;
  bool arg4 ;
  
  arg1 = (ArActionGotoStraight *)jarg1; 
  arg2 = (double)jarg2; 
  arg3 = (double)jarg3; 
  arg4 = jarg4 ? true : false; 
  (arg1)->setEncoderGoalRel(arg2,arg3,arg4);
}


SWIGEXPORT void SWIGSTDCALL CSharp_ArActionGotoStraight_setEncoderGoalRel__SWIG_2(void * jarg1, double jarg2, double jarg3) {
  ArActionGotoStraight *arg1 = (ArActionGotoStraight *) 0 ;
  double arg2 ;
  double arg3 ;
  
  arg1 = (ArActionGotoStraight *)jarg1; 
  arg2 = (double)jarg2; 
  arg3 = (double)jarg3; 
  (arg1)->setEncoderGoalRel(arg2,arg3);
}


SWIGEXPORT void * SWIGSTDCALL CSharp_ArActionGotoStraight_getEncoderGoal(void * jarg1) {
  void * jresult ;
  ArActionGotoStraight *arg1 = (ArActionGotoStraight *) 0 ;
  ArPose result;
  
  arg1 = (ArActionGotoStraight *)jarg1; 
  result = (arg1)->getEncoderGoal();
  jresult = new ArPose((const ArPose &)result); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_ArActionGotoStraight_setSpeed(void * jarg1, double jarg2) {
  ArActionGotoStraight *arg1 = (ArActionGotoStraight *) 0 ;
  double arg2 ;
  
  arg1 = (ArActionGotoStraight *)jarg1; 
  arg2 = (double)jarg2; 
  (arg1)->setSpeed(arg2);
}


SWIGEXPORT double SWIGSTDCALL CSharp_ArActionGotoStraight_getSpeed(void * jarg1) {
  double jresult ;
  ArActionGotoStraight *arg1 = (ArActionGotoStraight *) 0 ;
  double result;
  
  arg1 = (ArActionGotoStraight *)jarg1; 
  result = (double)(arg1)->getSpeed();
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_ArActionGotoStraight_setCloseDist__SWIG_0(void * jarg1, double jarg2) {
  ArActionGotoStraight *arg1 = (ArActionGotoStraight *) 0 ;
  double arg2 ;
  
  arg1 = (ArActionGotoStraight *)jarg1; 
  arg2 = (double)jarg2; 
  (arg1)->setCloseDist(arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_ArActionGotoStraight_setCloseDist__SWIG_1(void * jarg1) {
  ArActionGotoStraight *arg1 = (ArActionGotoStraight *) 0 ;
  
  arg1 = (ArActionGotoStraight *)jarg1; 
  (arg1)->setCloseDist();
}


SWIGEXPORT double SWIGSTDCALL CSharp_ArActionGotoStraight_getCloseDist(void * jarg1) {
  double jresult ;
  ArActionGotoStraight *arg1 = (ArActionGotoStraight *) 0 ;
  double result;
  
  arg1 = (ArActionGotoStraight *)jarg1; 
  result = (double)(arg1)->getCloseDist();
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_ArActionGotoStraight_getBacking(void * jarg1) {
  unsigned int jresult ;
  ArActionGotoStraight *arg1 = (ArActionGotoStraight *) 0 ;
  bool result;
  
  arg1 = (ArActionGotoStraight *)jarg1; 
  result = (bool)(arg1)->getBacking();
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_ArActionGotoStraight_setTurnThreshold(void * jarg1, double jarg2) {
  ArActionGotoStraight *arg1 = (ArActionGotoStraight *) 0 ;
  double arg2 ;
  
  arg1 = (ArActionGotoStraight *)jarg1; 
  arg2 = (double)jarg2; 
  (arg1)->setTurnThreshold(arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_ArActionGotoStraight_setTurnSpeed(void * jarg1, double jarg2) {
  ArActionGotoStraight *arg1 = (ArActionGotoStraight *) 0 ;
  double arg2 ;
  
  arg1 = (ArActionGotoStraight *)jarg1; 
  arg2 = (double)jarg2; 
  (arg1)->setTurnSpeed(arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_ArActionGotoStraight_setMaxRotVel(void * jarg1, double jarg2) {
  ArActionGotoStraight *arg1 = (ArActionGotoStraight *) 0 ;
  double arg2 ;
  
  arg1 = (ArActionGotoStraight *)jarg1; 
  arg2 = (double)jarg2; 
  (arg1)->setMaxRotVel(arg2);
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_ArActionGroup(void * jarg1) {
  void * jresult ;
  ArRobot *arg1 = (ArRobot *) 0 ;
  ArActionGroup *result = 0 ;
  
  arg1 = (ArRobot *)jarg1; 
  result = (ArActionGroup *)new ArActionGroup(arg1);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_ArActionGroup(void * jarg1) {
  ArActionGroup *arg1 = (ArActionGroup *) 0 ;
  
  arg1 = (ArActionGroup *)jarg1; 
  delete arg1;
}


SWIGEXPORT void SWIGSTDCALL CSharp_ArActionGroup_addAction(void * jarg1, void * jarg2, int jarg3) {
  ArActionGroup *arg1 = (ArActionGroup *) 0 ;
  ArAction *arg2 = (ArAction *) 0 ;
  int arg3 ;
  
  arg1 = (ArActionGroup *)jarg1; 
  arg2 = (ArAction *)jarg2; 
  arg3 = (int)jarg3; 
  (arg1)->addAction(arg2,arg3);
}


SWIGEXPORT void SWIGSTDCALL CSharp_ArActionGroup_remAction(void * jarg1, void * jarg2) {
  ArActionGroup *arg1 = (ArActionGroup *) 0 ;
  ArAction *arg2 = (ArAction *) 0 ;
  
  arg1 = (ArActionGroup *)jarg1; 
  arg2 = (ArAction *)jarg2; 
  (arg1)->remAction(arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_ArActionGroup_activate(void * jarg1) {
  ArActionGroup *arg1 = (ArActionGroup *) 0 ;
  
  arg1 = (ArActionGroup *)jarg1; 
  (arg1)->activate();
}


SWIGEXPORT void SWIGSTDCALL CSharp_ArActionGroup_activateExclusive(void * jarg1) {
  ArActionGroup *arg1 = (ArActionGroup *) 0 ;
  
  arg1 = (ArActionGroup *)jarg1; 
  (arg1)->activateExclusive();
}


SWIGEXPORT void SWIGSTDCALL CSharp_ArActionGroup_deactivate(void * jarg1) {
  ArActionGroup *arg1 = (ArActionGroup *) 0 ;
  
  arg1 = (ArActionGroup *)jarg1; 
  (arg1)->deactivate();
}


SWIGEXPORT void SWIGSTDCALL CSharp_ArActionGroup_removeActions(void * jarg1) {
  ArActionGroup *arg1 = (ArActionGroup *) 0 ;
  
  arg1 = (ArActionGroup *)jarg1; 
  (arg1)->removeActions();
}


SWIGEXPORT void SWIGSTDCALL CSharp_ArActionGroup_deleteActions(void * jarg1) {
  ArActionGroup *arg1 = (ArActionGroup *) 0 ;
  
  arg1 = (ArActionGroup *)jarg1; 
  (arg1)->deleteActions();
}


SWIGEXPORT void * SWIGSTDCALL CSharp_ArActionGroup_getActionList(void * jarg1) {
  void * jresult ;
  ArActionGroup *arg1 = (ArActionGroup *) 0 ;
  std::list< ArAction * > *result = 0 ;
  
  arg1 = (ArActionGroup *)jarg1; 
  result = (std::list< ArAction * > *)(arg1)->getActionList();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_ArActionGroupInput(void * jarg1) {
  void * jresult ;
  ArRobot *arg1 = (ArRobot *) 0 ;
  ArActionGroupInput *result = 0 ;
  
  arg1 = (ArRobot *)jarg1; 
  result = (ArActionGroupInput *)new ArActionGroupInput(arg1);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_ArActionGroupInput(void * jarg1) {
  ArActionGroupInput *arg1 = (ArActionGroupInput *) 0 ;
  
  arg1 = (ArActionGroupInput *)jarg1; 
  delete arg1;
}


SWIGEXPORT void SWIGSTDCALL CSharp_ArActionGroupInput_setVel(void * jarg1, double jarg2) {
  ArActionGroupInput *arg1 = (ArActionGroupInput *) 0 ;
  double arg2 ;
  
  arg1 = (ArActionGroupInput *)jarg1; 
  arg2 = (double)jarg2; 
  (arg1)->setVel(arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_ArActionGroupInput_setRotVel(void * jarg1, double jarg2) {
  ArActionGroupInput *arg1 = (ArActionGroupInput *) 0 ;
  double arg2 ;
  
  arg1 = (ArActionGroupInput *)jarg1; 
  arg2 = (double)jarg2; 
  (arg1)->setRotVel(arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_ArActionGroupInput_setHeading(void * jarg1, double jarg2) {
  ArActionGroupInput *arg1 = (ArActionGroupInput *) 0 ;
  double arg2 ;
  
  arg1 = (ArActionGroupInput *)jarg1; 
  arg2 = (double)jarg2; 
  (arg1)->setHeading(arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_ArActionGroupInput_deltaHeadingFromCurrent(void * jarg1, double jarg2) {
  ArActionGroupInput *arg1 = (ArActionGroupInput *) 0 ;
  double arg2 ;
  
  arg1 = (ArActionGroupInput *)jarg1; 
  arg2 = (double)jarg2; 
  (arg1)->deltaHeadingFromCurrent(arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_ArActionGroupInput_clear(void * jarg1) {
  ArActionGroupInput *arg1 = (ArActionGroupInput *) 0 ;
  
  arg1 = (ArActionGroupInput *)jarg1; 
  (arg1)->clear();
}


SWIGEXPORT void * SWIGSTDCALL CSharp_ArActionGroupInput_getActionInput(void * jarg1) {
  void * jresult ;
  ArActionGroupInput *arg1 = (ArActionGroupInput *) 0 ;
  ArActionInput *result = 0 ;
  
  arg1 = (ArActionGroupInput *)jarg1; 
  result = (ArActionInput *)(arg1)->getActionInput();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_ArActionGroupStop(void * jarg1) {
  void * jresult ;
  ArRobot *arg1 = (ArRobot *) 0 ;
  ArActionGroupStop *result = 0 ;
  
  arg1 = (ArRobot *)jarg1; 
  result = (ArActionGroupStop *)new ArActionGroupStop(arg1);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_ArActionGroupStop(void * jarg1) {
  ArActionGroupStop *arg1 = (ArActionGroupStop *) 0 ;
  
  arg1 = (ArActionGroupStop *)jarg1; 
  delete arg1;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_ArActionGroupStop_getActionStop(void * jarg1) {
  void * jresult ;
  ArActionGroupStop *arg1 = (ArActionGroupStop *) 0 ;
  ArActionStop *result = 0 ;
  
  arg1 = (ArActionGroupStop *)jarg1; 
  result = (ArActionStop *)(arg1)->getActionStop();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_ArActionGroupStop_myActionStop_set(void * jarg1, void * jarg2) {
  ArActionGroupStop *arg1 = (ArActionGroupStop *) 0 ;
  ArActionStop *arg2 = (ArActionStop *) 0 ;
  
  arg1 = (ArActionGroupStop *)jarg1; 
  arg2 = (ArActionStop *)jarg2; 
  if (arg1) (arg1)->myActionStop = arg2;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_ArActionGroupStop_myActionStop_get(void * jarg1) {
  void * jresult ;
  ArActionGroupStop *arg1 = (ArActionGroupStop *) 0 ;
  ArActionStop *result = 0 ;
  
  arg1 = (ArActionGroupStop *)jarg1; 
  result = (ArActionStop *) ((arg1)->myActionStop);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_ArActionGroupTeleop(void * jarg1) {
  void * jresult ;
  ArRobot *arg1 = (ArRobot *) 0 ;
  ArActionGroupTeleop *result = 0 ;
  
  arg1 = (ArRobot *)jarg1; 
  result = (ArActionGroupTeleop *)new ArActionGroupTeleop(arg1);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_ArActionGroupTeleop(void * jarg1) {
  ArActionGroupTeleop *arg1 = (ArActionGroupTeleop *) 0 ;
  
  arg1 = (ArActionGroupTeleop *)jarg1; 
  delete arg1;
}


SWIGEXPORT void SWIGSTDCALL CSharp_ArActionGroupTeleop_setThrottleParams(void * jarg1, int jarg2, int jarg3) {
  ArActionGroupTeleop *arg1 = (ArActionGroupTeleop *) 0 ;
  int arg2 ;
  int arg3 ;
  
  arg1 = (ArActionGroupTeleop *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (int)jarg3; 
  (arg1)->setThrottleParams(arg2,arg3);
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_ArActionGroupUnguardedTeleop(void * jarg1) {
  void * jresult ;
  ArRobot *arg1 = (ArRobot *) 0 ;
  ArActionGroupUnguardedTeleop *result = 0 ;
  
  arg1 = (ArRobot *)jarg1; 
  result = (ArActionGroupUnguardedTeleop *)new ArActionGroupUnguardedTeleop(arg1);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_ArActionGroupUnguardedTeleop(void * jarg1) {
  ArActionGroupUnguardedTeleop *arg1 = (ArActionGroupUnguardedTeleop *) 0 ;
  
  arg1 = (ArActionGroupUnguardedTeleop *)jarg1; 
  delete arg1;
}


SWIGEXPORT void SWIGSTDCALL CSharp_ArActionGroupUnguardedTeleop_setThrottleParams(void * jarg1, int jarg2, int jarg3) {
  ArActionGroupUnguardedTeleop *arg1 = (ArActionGroupUnguardedTeleop *) 0 ;
  int arg2 ;
  int arg3 ;
  
  arg1 = (ArActionGroupUnguardedTeleop *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (int)jarg3; 
  (arg1)->setThrottleParams(arg2,arg3);
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_ArActionGroupWander__SWIG_0(void * jarg1, int jarg2, int jarg3, int jarg4, int jarg5) {
  void * jresult ;
  ArRobot *arg1 = (ArRobot *) 0 ;
  int arg2 ;
  int arg3 ;
  int arg4 ;
  int arg5 ;
  ArActionGroupWander *result = 0 ;
  
  arg1 = (ArRobot *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (int)jarg3; 
  arg4 = (int)jarg4; 
  arg5 = (int)jarg5; 
  result = (ArActionGroupWander *)new ArActionGroupWander(arg1,arg2,arg3,arg4,arg5);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_ArActionGroupWander__SWIG_1(void * jarg1, int jarg2, int jarg3, int jarg4) {
  void * jresult ;
  ArRobot *arg1 = (ArRobot *) 0 ;
  int arg2 ;
  int arg3 ;
  int arg4 ;
  ArActionGroupWander *result = 0 ;
  
  arg1 = (ArRobot *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (int)jarg3; 
  arg4 = (int)jarg4; 
  result = (ArActionGroupWander *)new ArActionGroupWander(arg1,arg2,arg3,arg4);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_ArActionGroupWander__SWIG_2(void * jarg1, int jarg2, int jarg3) {
  void * jresult ;
  ArRobot *arg1 = (ArRobot *) 0 ;
  int arg2 ;
  int arg3 ;
  ArActionGroupWander *result = 0 ;
  
  arg1 = (ArRobot *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (int)jarg3; 
  result = (ArActionGroupWander *)new ArActionGroupWander(arg1,arg2,arg3);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_ArActionGroupWander__SWIG_3(void * jarg1, int jarg2) {
  void * jresult ;
  ArRobot *arg1 = (ArRobot *) 0 ;
  int arg2 ;
  ArActionGroupWander *result = 0 ;
  
  arg1 = (ArRobot *)jarg1; 
  arg2 = (int)jarg2; 
  result = (ArActionGroupWander *)new ArActionGroupWander(arg1,arg2);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_ArActionGroupWander__SWIG_4(void * jarg1) {
  void * jresult ;
  ArRobot *arg1 = (ArRobot *) 0 ;
  ArActionGroupWander *result = 0 ;
  
  arg1 = (ArRobot *)jarg1; 
  result = (ArActionGroupWander *)new ArActionGroupWander(arg1);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_ArActionGroupWander(void * jarg1) {
  ArActionGroupWander *arg1 = (ArActionGroupWander *) 0 ;
  
  arg1 = (ArActionGroupWander *)jarg1; 
  delete arg1;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_ArActionGroupColorFollow(void * jarg1, void * jarg2, void * jarg3) {
  void * jresult ;
  ArRobot *arg1 = (ArRobot *) 0 ;
  ArACTS_1_2 *arg2 = (ArACTS_1_2 *) 0 ;
  ArPTZ *arg3 = (ArPTZ *) 0 ;
  ArActionGroupColorFollow *result = 0 ;
  
  arg1 = (ArRobot *)jarg1; 
  arg2 = (ArACTS_1_2 *)jarg2; 
  arg3 = (ArPTZ *)jarg3; 
  result = (ArActionGroupColorFollow *)new ArActionGroupColorFollow(arg1,arg2,arg3);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_ArActionGroupColorFollow(void * jarg1) {
  ArActionGroupColorFollow *arg1 = (ArActionGroupColorFollow *) 0 ;
  
  arg1 = (ArActionGroupColorFollow *)jarg1; 
  delete arg1;
}


SWIGEXPORT void SWIGSTDCALL CSharp_ArActionGroupColorFollow_setCamera(void * jarg1, void * jarg2) {
  ArActionGroupColorFollow *arg1 = (ArActionGroupColorFollow *) 0 ;
  ArPTZ *arg2 = (ArPTZ *) 0 ;
  
  arg1 = (ArActionGroupColorFollow *)jarg1; 
  arg2 = (ArPTZ *)jarg2; 
  (arg1)->setCamera(arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_ArActionGroupColorFollow_setChannel(void * jarg1, int jarg2) {
  ArActionGroupColorFollow *arg1 = (ArActionGroupColorFollow *) 0 ;
  int arg2 ;
  
  arg1 = (ArActionGroupColorFollow *)jarg1; 
  arg2 = (int)jarg2; 
  (arg1)->setChannel(arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_ArActionGroupColorFollow_startMovement(void * jarg1) {
  ArActionGroupColorFollow *arg1 = (ArActionGroupColorFollow *) 0 ;
  
  arg1 = (ArActionGroupColorFollow *)jarg1; 
  (arg1)->startMovement();
}


SWIGEXPORT void SWIGSTDCALL CSharp_ArActionGroupColorFollow_stopMovement(void * jarg1) {
  ArActionGroupColorFollow *arg1 = (ArActionGroupColorFollow *) 0 ;
  
  arg1 = (ArActionGroupColorFollow *)jarg1; 
  (arg1)->stopMovement();
}


SWIGEXPORT void SWIGSTDCALL CSharp_ArActionGroupColorFollow_setAcquire(void * jarg1, unsigned int jarg2) {
  ArActionGroupColorFollow *arg1 = (ArActionGroupColorFollow *) 0 ;
  bool arg2 ;
  
  arg1 = (ArActionGroupColorFollow *)jarg1; 
  arg2 = jarg2 ? true : false; 
  (arg1)->setAcquire(arg2);
}


SWIGEXPORT int SWIGSTDCALL CSharp_ArActionGroupColorFollow_getChannel(void * jarg1) {
  int jresult ;
  ArActionGroupColorFollow *arg1 = (ArActionGroupColorFollow *) 0 ;
  int result;
  
  arg1 = (ArActionGroupColorFollow *)jarg1; 
  result = (int)(arg1)->getChannel();
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_ArActionGroupColorFollow_getAcquire(void * jarg1) {
  unsigned int jresult ;
  ArActionGroupColorFollow *arg1 = (ArActionGroupColorFollow *) 0 ;
  bool result;
  
  arg1 = (ArActionGroupColorFollow *)jarg1; 
  result = (bool)(arg1)->getAcquire();
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_ArActionGroupColorFollow_getMovement(void * jarg1) {
  unsigned int jresult ;
  ArActionGroupColorFollow *arg1 = (ArActionGroupColorFollow *) 0 ;
  bool result;
  
  arg1 = (ArActionGroupColorFollow *)jarg1; 
  result = (bool)(arg1)->getMovement();
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_ArActionGroupColorFollow_getBlob(void * jarg1) {
  unsigned int jresult ;
  ArActionGroupColorFollow *arg1 = (ArActionGroupColorFollow *) 0 ;
  bool result;
  
  arg1 = (ArActionGroupColorFollow *)jarg1; 
  result = (bool)(arg1)->getBlob();
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_ArActionGroupRatioDrive(void * jarg1) {
  void * jresult ;
  ArRobot *arg1 = (ArRobot *) 0 ;
  ArActionGroupRatioDrive *result = 0 ;
  
  arg1 = (ArRobot *)jarg1; 
  result = (ArActionGroupRatioDrive *)new ArActionGroupRatioDrive(arg1);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_ArActionGroupRatioDrive(void * jarg1) {
  ArActionGroupRatioDrive *arg1 = (ArActionGroupRatioDrive *) 0 ;
  
  arg1 = (ArActionGroupRatioDrive *)jarg1; 
  delete arg1;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_ArActionGroupRatioDrive_getActionRatioInput(void * jarg1) {
  void * jresult ;
  ArActionGroupRatioDrive *arg1 = (ArActionGroupRatioDrive *) 0 ;
  ArActionRatioInput *result = 0 ;
  
  arg1 = (ArActionGroupRatioDrive *)jarg1; 
  result = (ArActionRatioInput *)(arg1)->getActionRatioInput();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_ArActionGroupRatioDrive_addToConfig(void * jarg1, void * jarg2, char * jarg3) {
  ArActionGroupRatioDrive *arg1 = (ArActionGroupRatioDrive *) 0 ;
  ArConfig *arg2 = (ArConfig *) 0 ;
  char *arg3 = (char *) 0 ;
  
  arg1 = (ArActionGroupRatioDrive *)jarg1; 
  arg2 = (ArConfig *)jarg2; 
  arg3 = (char *)jarg3; 
  (arg1)->addToConfig(arg2,(char const *)arg3);
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_ArActionGroupRatioDriveUnsafe(void * jarg1) {
  void * jresult ;
  ArRobot *arg1 = (ArRobot *) 0 ;
  ArActionGroupRatioDriveUnsafe *result = 0 ;
  
  arg1 = (ArRobot *)jarg1; 
  result = (ArActionGroupRatioDriveUnsafe *)new ArActionGroupRatioDriveUnsafe(arg1);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_ArActionGroupRatioDriveUnsafe(void * jarg1) {
  ArActionGroupRatioDriveUnsafe *arg1 = (ArActionGroupRatioDriveUnsafe *) 0 ;
  
  arg1 = (ArActionGroupRatioDriveUnsafe *)jarg1; 
  delete arg1;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_ArActionGroupRatioDriveUnsafe_getActionRatioInput(void * jarg1) {
  void * jresult ;
  ArActionGroupRatioDriveUnsafe *arg1 = (ArActionGroupRatioDriveUnsafe *) 0 ;
  ArActionRatioInput *result = 0 ;
  
  arg1 = (ArActionGroupRatioDriveUnsafe *)jarg1; 
  result = (ArActionRatioInput *)(arg1)->getActionRatioInput();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_ArActionGroupRatioDriveUnsafe_addToConfig(void * jarg1, void * jarg2, char * jarg3) {
  ArActionGroupRatioDriveUnsafe *arg1 = (ArActionGroupRatioDriveUnsafe *) 0 ;
  ArConfig *arg2 = (ArConfig *) 0 ;
  char *arg3 = (char *) 0 ;
  
  arg1 = (ArActionGroupRatioDriveUnsafe *)jarg1; 
  arg2 = (ArConfig *)jarg2; 
  arg3 = (char *)jarg3; 
  (arg1)->addToConfig(arg2,(char const *)arg3);
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_ArActionIRs__SWIG_0(char * jarg1, double jarg2, int jarg3, int jarg4, unsigned int jarg5) {
  void * jresult ;
  char *arg1 = (char *) 0 ;
  double arg2 ;
  int arg3 ;
  int arg4 ;
  bool arg5 ;
  ArActionIRs *result = 0 ;
  
  arg1 = (char *)jarg1; 
  arg2 = (double)jarg2; 
  arg3 = (int)jarg3; 
  arg4 = (int)jarg4; 
  arg5 = jarg5 ? true : false; 
  result = (ArActionIRs *)new ArActionIRs((char const *)arg1,arg2,arg3,arg4,arg5);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_ArActionIRs__SWIG_1(char * jarg1, double jarg2, int jarg3, int jarg4) {
  void * jresult ;
  char *arg1 = (char *) 0 ;
  double arg2 ;
  int arg3 ;
  int arg4 ;
  ArActionIRs *result = 0 ;
  
  arg1 = (char *)jarg1; 
  arg2 = (double)jarg2; 
  arg3 = (int)jarg3; 
  arg4 = (int)jarg4; 
  result = (ArActionIRs *)new ArActionIRs((char const *)arg1,arg2,arg3,arg4);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_ArActionIRs__SWIG_2(char * jarg1, double jarg2, int jarg3) {
  void * jresult ;
  char *arg1 = (char *) 0 ;
  double arg2 ;
  int arg3 ;
  ArActionIRs *result = 0 ;
  
  arg1 = (char *)jarg1; 
  arg2 = (double)jarg2; 
  arg3 = (int)jarg3; 
  result = (ArActionIRs *)new ArActionIRs((char const *)arg1,arg2,arg3);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_ArActionIRs__SWIG_3(char * jarg1, double jarg2) {
  void * jresult ;
  char *arg1 = (char *) 0 ;
  double arg2 ;
  ArActionIRs *result = 0 ;
  
  arg1 = (char *)jarg1; 
  arg2 = (double)jarg2; 
  result = (ArActionIRs *)new ArActionIRs((char const *)arg1,arg2);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_ArActionIRs__SWIG_4(char * jarg1) {
  void * jresult ;
  char *arg1 = (char *) 0 ;
  ArActionIRs *result = 0 ;
  
  arg1 = (char *)jarg1; 
  result = (ArActionIRs *)new ArActionIRs((char const *)arg1);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_ArActionIRs__SWIG_5() {
  void * jresult ;
  ArActionIRs *result = 0 ;
  
  result = (ArActionIRs *)new ArActionIRs();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_ArActionIRs(void * jarg1) {
  ArActionIRs *arg1 = (ArActionIRs *) 0 ;
  
  arg1 = (ArActionIRs *)jarg1; 
  delete arg1;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_ArActionIRs_fire(void * jarg1, void * jarg2) {
  void * jresult ;
  ArActionIRs *arg1 = (ArActionIRs *) 0 ;
  ArActionDesired arg2 ;
  ArActionDesired *argp2 ;
  ArActionDesired *result = 0 ;
  
  arg1 = (ArActionIRs *)jarg1; 
  argp2 = (ArActionDesired *)jarg2; 
  if (!argp2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Attempt to dereference null ArActionDesired", 0);
    return 0;
  }
  arg2 = *argp2; 
  result = (ArActionDesired *)(arg1)->fire(arg2);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_ArActionIRs_setRobot(void * jarg1, void * jarg2) {
  ArActionIRs *arg1 = (ArActionIRs *) 0 ;
  ArRobot *arg2 = (ArRobot *) 0 ;
  
  arg1 = (ArActionIRs *)jarg1; 
  arg2 = (ArRobot *)jarg2; 
  (arg1)->setRobot(arg2);
}


SWIGEXPORT void * SWIGSTDCALL CSharp_ArActionIRs_getDesired(void * jarg1) {
  void * jresult ;
  ArActionIRs *arg1 = (ArActionIRs *) 0 ;
  ArActionDesired *result = 0 ;
  
  arg1 = (ArActionIRs *)jarg1; 
  result = (ArActionDesired *)(arg1)->getDesired();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_ArActionInput__SWIG_0(char * jarg1) {
  void * jresult ;
  char *arg1 = (char *) 0 ;
  ArActionInput *result = 0 ;
  
  arg1 = (char *)jarg1; 
  result = (ArActionInput *)new ArActionInput((char const *)arg1);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_ArActionInput__SWIG_1() {
  void * jresult ;
  ArActionInput *result = 0 ;
  
  result = (ArActionInput *)new ArActionInput();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_ArActionInput(void * jarg1) {
  ArActionInput *arg1 = (ArActionInput *) 0 ;
  
  arg1 = (ArActionInput *)jarg1; 
  delete arg1;
}


SWIGEXPORT void SWIGSTDCALL CSharp_ArActionInput_setVel(void * jarg1, double jarg2) {
  ArActionInput *arg1 = (ArActionInput *) 0 ;
  double arg2 ;
  
  arg1 = (ArActionInput *)jarg1; 
  arg2 = (double)jarg2; 
  (arg1)->setVel(arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_ArActionInput_deltaHeadingFromCurrent(void * jarg1, double jarg2) {
  ArActionInput *arg1 = (ArActionInput *) 0 ;
  double arg2 ;
  
  arg1 = (ArActionInput *)jarg1; 
  arg2 = (double)jarg2; 
  (arg1)->deltaHeadingFromCurrent(arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_ArActionInput_setRotVel(void * jarg1, double jarg2) {
  ArActionInput *arg1 = (ArActionInput *) 0 ;
  double arg2 ;
  
  arg1 = (ArActionInput *)jarg1; 
  arg2 = (double)jarg2; 
  (arg1)->setRotVel(arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_ArActionInput_setHeading(void * jarg1, double jarg2) {
  ArActionInput *arg1 = (ArActionInput *) 0 ;
  double arg2 ;
  
  arg1 = (ArActionInput *)jarg1; 
  arg2 = (double)jarg2; 
  (arg1)->setHeading(arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_ArActionInput_clear(void * jarg1) {
  ArActionInput *arg1 = (ArActionInput *) 0 ;
  
  arg1 = (ArActionInput *)jarg1; 
  (arg1)->clear();
}


SWIGEXPORT void * SWIGSTDCALL CSharp_ArActionInput_fire(void * jarg1, void * jarg2) {
  void * jresult ;
  ArActionInput *arg1 = (ArActionInput *) 0 ;
  ArActionDesired arg2 ;
  ArActionDesired *argp2 ;
  ArActionDesired *result = 0 ;
  
  arg1 = (ArActionInput *)jarg1; 
  argp2 = (ArActionDesired *)jarg2; 
  if (!argp2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Attempt to dereference null ArActionDesired", 0);
    return 0;
  }
  arg2 = *argp2; 
  result = (ArActionDesired *)(arg1)->fire(arg2);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_ArActionInput_getDesired(void * jarg1) {
  void * jresult ;
  ArActionInput *arg1 = (ArActionInput *) 0 ;
  ArActionDesired *result = 0 ;
  
  arg1 = (ArActionInput *)jarg1; 
  result = (ArActionDesired *)(arg1)->getDesired();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_ArActionJoydrive__SWIG_0(char * jarg1, double jarg2, double jarg3, unsigned int jarg4, unsigned int jarg5) {
  void * jresult ;
  char *arg1 = (char *) 0 ;
  double arg2 ;
  double arg3 ;
  bool arg4 ;
  bool arg5 ;
  ArActionJoydrive *result = 0 ;
  
  arg1 = (char *)jarg1; 
  arg2 = (double)jarg2; 
  arg3 = (double)jarg3; 
  arg4 = jarg4 ? true : false; 
  arg5 = jarg5 ? true : false; 
  result = (ArActionJoydrive *)new ArActionJoydrive((char const *)arg1,arg2,arg3,arg4,arg5);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_ArActionJoydrive__SWIG_1(char * jarg1, double jarg2, double jarg3, unsigned int jarg4) {
  void * jresult ;
  char *arg1 = (char *) 0 ;
  double arg2 ;
  double arg3 ;
  bool arg4 ;
  ArActionJoydrive *result = 0 ;
  
  arg1 = (char *)jarg1; 
  arg2 = (double)jarg2; 
  arg3 = (double)jarg3; 
  arg4 = jarg4 ? true : false; 
  result = (ArActionJoydrive *)new ArActionJoydrive((char const *)arg1,arg2,arg3,arg4);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_ArActionJoydrive__SWIG_2(char * jarg1, double jarg2, double jarg3) {
  void * jresult ;
  char *arg1 = (char *) 0 ;
  double arg2 ;
  double arg3 ;
  ArActionJoydrive *result = 0 ;
  
  arg1 = (char *)jarg1; 
  arg2 = (double)jarg2; 
  arg3 = (double)jarg3; 
  result = (ArActionJoydrive *)new ArActionJoydrive((char const *)arg1,arg2,arg3);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_ArActionJoydrive__SWIG_3(char * jarg1, double jarg2) {
  void * jresult ;
  char *arg1 = (char *) 0 ;
  double arg2 ;
  ArActionJoydrive *result = 0 ;
  
  arg1 = (char *)jarg1; 
  arg2 = (double)jarg2; 
  result = (ArActionJoydrive *)new ArActionJoydrive((char const *)arg1,arg2);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_ArActionJoydrive__SWIG_4(char * jarg1) {
  void * jresult ;
  char *arg1 = (char *) 0 ;
  ArActionJoydrive *result = 0 ;
  
  arg1 = (char *)jarg1; 
  result = (ArActionJoydrive *)new ArActionJoydrive((char const *)arg1);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_ArActionJoydrive__SWIG_5() {
  void * jresult ;
  ArActionJoydrive *result = 0 ;
  
  result = (ArActionJoydrive *)new ArActionJoydrive();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_ArActionJoydrive(void * jarg1) {
  ArActionJoydrive *arg1 = (ArActionJoydrive *) 0 ;
  
  arg1 = (ArActionJoydrive *)jarg1; 
  delete arg1;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_ArActionJoydrive_fire(void * jarg1, void * jarg2) {
  void * jresult ;
  ArActionJoydrive *arg1 = (ArActionJoydrive *) 0 ;
  ArActionDesired arg2 ;
  ArActionDesired *argp2 ;
  ArActionDesired *result = 0 ;
  
  arg1 = (ArActionJoydrive *)jarg1; 
  argp2 = (ArActionDesired *)jarg2; 
  if (!argp2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Attempt to dereference null ArActionDesired", 0);
    return 0;
  }
  arg2 = *argp2; 
  result = (ArActionDesired *)(arg1)->fire(arg2);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_ArActionJoydrive_joystickInited(void * jarg1) {
  unsigned int jresult ;
  ArActionJoydrive *arg1 = (ArActionJoydrive *) 0 ;
  bool result;
  
  arg1 = (ArActionJoydrive *)jarg1; 
  result = (bool)(arg1)->joystickInited();
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_ArActionJoydrive_setSpeeds(void * jarg1, double jarg2, double jarg3) {
  ArActionJoydrive *arg1 = (ArActionJoydrive *) 0 ;
  double arg2 ;
  double arg3 ;
  
  arg1 = (ArActionJoydrive *)jarg1; 
  arg2 = (double)jarg2; 
  arg3 = (double)jarg3; 
  (arg1)->setSpeeds(arg2,arg3);
}


SWIGEXPORT void SWIGSTDCALL CSharp_ArActionJoydrive_setStopIfNoButtonPressed(void * jarg1, unsigned int jarg2) {
  ArActionJoydrive *arg1 = (ArActionJoydrive *) 0 ;
  bool arg2 ;
  
  arg1 = (ArActionJoydrive *)jarg1; 
  arg2 = jarg2 ? true : false; 
  (arg1)->setStopIfNoButtonPressed(arg2);
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_ArActionJoydrive_getStopIfNoButtonPressed(void * jarg1) {
  unsigned int jresult ;
  ArActionJoydrive *arg1 = (ArActionJoydrive *) 0 ;
  bool result;
  
  arg1 = (ArActionJoydrive *)jarg1; 
  result = (bool)(arg1)->getStopIfNoButtonPressed();
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_ArActionJoydrive_setThrottleParams(void * jarg1, double jarg2, double jarg3) {
  ArActionJoydrive *arg1 = (ArActionJoydrive *) 0 ;
  double arg2 ;
  double arg3 ;
  
  arg1 = (ArActionJoydrive *)jarg1; 
  arg2 = (double)jarg2; 
  arg3 = (double)jarg3; 
  (arg1)->setThrottleParams(arg2,arg3);
}


SWIGEXPORT void SWIGSTDCALL CSharp_ArActionJoydrive_setUseOSCal(void * jarg1, unsigned int jarg2) {
  ArActionJoydrive *arg1 = (ArActionJoydrive *) 0 ;
  bool arg2 ;
  
  arg1 = (ArActionJoydrive *)jarg1; 
  arg2 = jarg2 ? true : false; 
  (arg1)->setUseOSCal(arg2);
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_ArActionJoydrive_getUseOSCal(void * jarg1) {
  unsigned int jresult ;
  ArActionJoydrive *arg1 = (ArActionJoydrive *) 0 ;
  bool result;
  
  arg1 = (ArActionJoydrive *)jarg1; 
  result = (bool)(arg1)->getUseOSCal();
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_ArActionJoydrive_getJoyHandler(void * jarg1) {
  void * jresult ;
  ArActionJoydrive *arg1 = (ArActionJoydrive *) 0 ;
  ArJoyHandler *result = 0 ;
  
  arg1 = (ArActionJoydrive *)jarg1; 
  result = (ArJoyHandler *)(arg1)->getJoyHandler();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_ArActionJoydrive_getDesired(void * jarg1) {
  void * jresult ;
  ArActionJoydrive *arg1 = (ArActionJoydrive *) 0 ;
  ArActionDesired *result = 0 ;
  
  arg1 = (ArActionJoydrive *)jarg1; 
  result = (ArActionDesired *)(arg1)->getDesired();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_ArActionKeydrive__SWIG_0(char * jarg1, double jarg2, double jarg3, double jarg4, double jarg5) {
  void * jresult ;
  char *arg1 = (char *) 0 ;
  double arg2 ;
  double arg3 ;
  double arg4 ;
  double arg5 ;
  ArActionKeydrive *result = 0 ;
  
  arg1 = (char *)jarg1; 
  arg2 = (double)jarg2; 
  arg3 = (double)jarg3; 
  arg4 = (double)jarg4; 
  arg5 = (double)jarg5; 
  result = (ArActionKeydrive *)new ArActionKeydrive((char const *)arg1,arg2,arg3,arg4,arg5);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_ArActionKeydrive__SWIG_1(char * jarg1, double jarg2, double jarg3, double jarg4) {
  void * jresult ;
  char *arg1 = (char *) 0 ;
  double arg2 ;
  double arg3 ;
  double arg4 ;
  ArActionKeydrive *result = 0 ;
  
  arg1 = (char *)jarg1; 
  arg2 = (double)jarg2; 
  arg3 = (double)jarg3; 
  arg4 = (double)jarg4; 
  result = (ArActionKeydrive *)new ArActionKeydrive((char const *)arg1,arg2,arg3,arg4);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_ArActionKeydrive__SWIG_2(char * jarg1, double jarg2, double jarg3) {
  void * jresult ;
  char *arg1 = (char *) 0 ;
  double arg2 ;
  double arg3 ;
  ArActionKeydrive *result = 0 ;
  
  arg1 = (char *)jarg1; 
  arg2 = (double)jarg2; 
  arg3 = (double)jarg3; 
  result = (ArActionKeydrive *)new ArActionKeydrive((char const *)arg1,arg2,arg3);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_ArActionKeydrive__SWIG_3(char * jarg1, double jarg2) {
  void * jresult ;
  char *arg1 = (char *) 0 ;
  double arg2 ;
  ArActionKeydrive *result = 0 ;
  
  arg1 = (char *)jarg1; 
  arg2 = (double)jarg2; 
  result = (ArActionKeydrive *)new ArActionKeydrive((char const *)arg1,arg2);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_ArActionKeydrive__SWIG_4(char * jarg1) {
  void * jresult ;
  char *arg1 = (char *) 0 ;
  ArActionKeydrive *result = 0 ;
  
  arg1 = (char *)jarg1; 
  result = (ArActionKeydrive *)new ArActionKeydrive((char const *)arg1);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_ArActionKeydrive__SWIG_5() {
  void * jresult ;
  ArActionKeydrive *result = 0 ;
  
  result = (ArActionKeydrive *)new ArActionKeydrive();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_ArActionKeydrive(void * jarg1) {
  ArActionKeydrive *arg1 = (ArActionKeydrive *) 0 ;
  
  arg1 = (ArActionKeydrive *)jarg1; 
  delete arg1;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_ArActionKeydrive_fire(void * jarg1, void * jarg2) {
  void * jresult ;
  ArActionKeydrive *arg1 = (ArActionKeydrive *) 0 ;
  ArActionDesired arg2 ;
  ArActionDesired *argp2 ;
  ArActionDesired *result = 0 ;
  
  arg1 = (ArActionKeydrive *)jarg1; 
  argp2 = (ArActionDesired *)jarg2; 
  if (!argp2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Attempt to dereference null ArActionDesired", 0);
    return 0;
  }
  arg2 = *argp2; 
  result = (ArActionDesired *)(arg1)->fire(arg2);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_ArActionKeydrive_setSpeeds(void * jarg1, double jarg2, double jarg3) {
  ArActionKeydrive *arg1 = (ArActionKeydrive *) 0 ;
  double arg2 ;
  double arg3 ;
  
  arg1 = (ArActionKeydrive *)jarg1; 
  arg2 = (double)jarg2; 
  arg3 = (double)jarg3; 
  (arg1)->setSpeeds(arg2,arg3);
}


SWIGEXPORT void SWIGSTDCALL CSharp_ArActionKeydrive_setIncrements(void * jarg1, double jarg2, double jarg3) {
  ArActionKeydrive *arg1 = (ArActionKeydrive *) 0 ;
  double arg2 ;
  double arg3 ;
  
  arg1 = (ArActionKeydrive *)jarg1; 
  arg2 = (double)jarg2; 
  arg3 = (double)jarg3; 
  (arg1)->setIncrements(arg2,arg3);
}


SWIGEXPORT void * SWIGSTDCALL CSharp_ArActionKeydrive_getDesired(void * jarg1) {
  void * jresult ;
  ArActionKeydrive *arg1 = (ArActionKeydrive *) 0 ;
  ArActionDesired *result = 0 ;
  
  arg1 = (ArActionKeydrive *)jarg1; 
  result = (ArActionDesired *)(arg1)->getDesired();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_ArActionKeydrive_setRobot(void * jarg1, void * jarg2) {
  ArActionKeydrive *arg1 = (ArActionKeydrive *) 0 ;
  ArRobot *arg2 = (ArRobot *) 0 ;
  
  arg1 = (ArActionKeydrive *)jarg1; 
  arg2 = (ArRobot *)jarg2; 
  (arg1)->setRobot(arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_ArActionKeydrive_activate(void * jarg1) {
  ArActionKeydrive *arg1 = (ArActionKeydrive *) 0 ;
  
  arg1 = (ArActionKeydrive *)jarg1; 
  (arg1)->activate();
}


SWIGEXPORT void SWIGSTDCALL CSharp_ArActionKeydrive_deactivate(void * jarg1) {
  ArActionKeydrive *arg1 = (ArActionKeydrive *) 0 ;
  
  arg1 = (ArActionKeydrive *)jarg1; 
  (arg1)->deactivate();
}


SWIGEXPORT void SWIGSTDCALL CSharp_ArActionKeydrive_takeKeys(void * jarg1) {
  ArActionKeydrive *arg1 = (ArActionKeydrive *) 0 ;
  
  arg1 = (ArActionKeydrive *)jarg1; 
  (arg1)->takeKeys();
}


SWIGEXPORT void SWIGSTDCALL CSharp_ArActionKeydrive_giveUpKeys(void * jarg1) {
  ArActionKeydrive *arg1 = (ArActionKeydrive *) 0 ;
  
  arg1 = (ArActionKeydrive *)jarg1; 
  (arg1)->giveUpKeys();
}


SWIGEXPORT void SWIGSTDCALL CSharp_ArActionKeydrive_up(void * jarg1) {
  ArActionKeydrive *arg1 = (ArActionKeydrive *) 0 ;
  
  arg1 = (ArActionKeydrive *)jarg1; 
  (arg1)->up();
}


SWIGEXPORT void SWIGSTDCALL CSharp_ArActionKeydrive_down(void * jarg1) {
  ArActionKeydrive *arg1 = (ArActionKeydrive *) 0 ;
  
  arg1 = (ArActionKeydrive *)jarg1; 
  (arg1)->down();
}


SWIGEXPORT void SWIGSTDCALL CSharp_ArActionKeydrive_left(void * jarg1) {
  ArActionKeydrive *arg1 = (ArActionKeydrive *) 0 ;
  
  arg1 = (ArActionKeydrive *)jarg1; 
  (arg1)->left();
}


SWIGEXPORT void SWIGSTDCALL CSharp_ArActionKeydrive_right(void * jarg1) {
  ArActionKeydrive *arg1 = (ArActionKeydrive *) 0 ;
  
  arg1 = (ArActionKeydrive *)jarg1; 
  (arg1)->right();
}


SWIGEXPORT void SWIGSTDCALL CSharp_ArActionKeydrive_space(void * jarg1) {
  ArActionKeydrive *arg1 = (ArActionKeydrive *) 0 ;
  
  arg1 = (ArActionKeydrive *)jarg1; 
  (arg1)->space();
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_ArActionLimiterBackwards__SWIG_0(char * jarg1, double jarg2, double jarg3, double jarg4, double jarg5, unsigned int jarg6) {
  void * jresult ;
  char *arg1 = (char *) 0 ;
  double arg2 ;
  double arg3 ;
  double arg4 ;
  double arg5 ;
  bool arg6 ;
  ArActionLimiterBackwards *result = 0 ;
  
  arg1 = (char *)jarg1; 
  arg2 = (double)jarg2; 
  arg3 = (double)jarg3; 
  arg4 = (double)jarg4; 
  arg5 = (double)jarg5; 
  arg6 = jarg6 ? true : false; 
  result = (ArActionLimiterBackwards *)new ArActionLimiterBackwards((char const *)arg1,arg2,arg3,arg4,arg5,arg6);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_ArActionLimiterBackwards__SWIG_1(char * jarg1, double jarg2, double jarg3, double jarg4, double jarg5) {
  void * jresult ;
  char *arg1 = (char *) 0 ;
  double arg2 ;
  double arg3 ;
  double arg4 ;
  double arg5 ;
  ArActionLimiterBackwards *result = 0 ;
  
  arg1 = (char *)jarg1; 
  arg2 = (double)jarg2; 
  arg3 = (double)jarg3; 
  arg4 = (double)jarg4; 
  arg5 = (double)jarg5; 
  result = (ArActionLimiterBackwards *)new ArActionLimiterBackwards((char const *)arg1,arg2,arg3,arg4,arg5);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_ArActionLimiterBackwards__SWIG_2(char * jarg1, double jarg2, double jarg3, double jarg4) {
  void * jresult ;
  char *arg1 = (char *) 0 ;
  double arg2 ;
  double arg3 ;
  double arg4 ;
  ArActionLimiterBackwards *result = 0 ;
  
  arg1 = (char *)jarg1; 
  arg2 = (double)jarg2; 
  arg3 = (double)jarg3; 
  arg4 = (double)jarg4; 
  result = (ArActionLimiterBackwards *)new ArActionLimiterBackwards((char const *)arg1,arg2,arg3,arg4);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_ArActionLimiterBackwards__SWIG_3(char * jarg1, double jarg2, double jarg3) {
  void * jresult ;
  char *arg1 = (char *) 0 ;
  double arg2 ;
  double arg3 ;
  ArActionLimiterBackwards *result = 0 ;
  
  arg1 = (char *)jarg1; 
  arg2 = (double)jarg2; 
  arg3 = (double)jarg3; 
  result = (ArActionLimiterBackwards *)new ArActionLimiterBackwards((char const *)arg1,arg2,arg3);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_ArActionLimiterBackwards__SWIG_4(char * jarg1, double jarg2) {
  void * jresult ;
  char *arg1 = (char *) 0 ;
  double arg2 ;
  ArActionLimiterBackwards *result = 0 ;
  
  arg1 = (char *)jarg1; 
  arg2 = (double)jarg2; 
  result = (ArActionLimiterBackwards *)new ArActionLimiterBackwards((char const *)arg1,arg2);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_ArActionLimiterBackwards__SWIG_5(char * jarg1) {
  void * jresult ;
  char *arg1 = (char *) 0 ;
  ArActionLimiterBackwards *result = 0 ;
  
  arg1 = (char *)jarg1; 
  result = (ArActionLimiterBackwards *)new ArActionLimiterBackwards((char const *)arg1);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_ArActionLimiterBackwards__SWIG_6() {
  void * jresult ;
  ArActionLimiterBackwards *result = 0 ;
  
  result = (ArActionLimiterBackwards *)new ArActionLimiterBackwards();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_ArActionLimiterBackwards(void * jarg1) {
  ArActionLimiterBackwards *arg1 = (ArActionLimiterBackwards *) 0 ;
  
  arg1 = (ArActionLimiterBackwards *)jarg1; 
  delete arg1;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_ArActionLimiterBackwards_fire(void * jarg1, void * jarg2) {
  void * jresult ;
  ArActionLimiterBackwards *arg1 = (ArActionLimiterBackwards *) 0 ;
  ArActionDesired arg2 ;
  ArActionDesired *argp2 ;
  ArActionDesired *result = 0 ;
  
  arg1 = (ArActionLimiterBackwards *)jarg1; 
  argp2 = (ArActionDesired *)jarg2; 
  if (!argp2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Attempt to dereference null ArActionDesired", 0);
    return 0;
  }
  arg2 = *argp2; 
  result = (ArActionDesired *)(arg1)->fire(arg2);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_ArActionLimiterBackwards_getDesired(void * jarg1) {
  void * jresult ;
  ArActionLimiterBackwards *arg1 = (ArActionLimiterBackwards *) 0 ;
  ArActionDesired *result = 0 ;
  
  arg1 = (ArActionLimiterBackwards *)jarg1; 
  result = (ArActionDesired *)(arg1)->getDesired();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_ArActionLimiterForwards__SWIG_0(char * jarg1, double jarg2, double jarg3, double jarg4, double jarg5) {
  void * jresult ;
  char *arg1 = (char *) 0 ;
  double arg2 ;
  double arg3 ;
  double arg4 ;
  double arg5 ;
  ArActionLimiterForwards *result = 0 ;
  
  arg1 = (char *)jarg1; 
  arg2 = (double)jarg2; 
  arg3 = (double)jarg3; 
  arg4 = (double)jarg4; 
  arg5 = (double)jarg5; 
  result = (ArActionLimiterForwards *)new ArActionLimiterForwards((char const *)arg1,arg2,arg3,arg4,arg5);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_ArActionLimiterForwards__SWIG_1(char * jarg1, double jarg2, double jarg3, double jarg4) {
  void * jresult ;
  char *arg1 = (char *) 0 ;
  double arg2 ;
  double arg3 ;
  double arg4 ;
  ArActionLimiterForwards *result = 0 ;
  
  arg1 = (char *)jarg1; 
  arg2 = (double)jarg2; 
  arg3 = (double)jarg3; 
  arg4 = (double)jarg4; 
  result = (ArActionLimiterForwards *)new ArActionLimiterForwards((char const *)arg1,arg2,arg3,arg4);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_ArActionLimiterForwards__SWIG_2(char * jarg1, double jarg2, double jarg3) {
  void * jresult ;
  char *arg1 = (char *) 0 ;
  double arg2 ;
  double arg3 ;
  ArActionLimiterForwards *result = 0 ;
  
  arg1 = (char *)jarg1; 
  arg2 = (double)jarg2; 
  arg3 = (double)jarg3; 
  result = (ArActionLimiterForwards *)new ArActionLimiterForwards((char const *)arg1,arg2,arg3);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_ArActionLimiterForwards__SWIG_3(char * jarg1, double jarg2) {
  void * jresult ;
  char *arg1 = (char *) 0 ;
  double arg2 ;
  ArActionLimiterForwards *result = 0 ;
  
  arg1 = (char *)jarg1; 
  arg2 = (double)jarg2; 
  result = (ArActionLimiterForwards *)new ArActionLimiterForwards((char const *)arg1,arg2);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_ArActionLimiterForwards__SWIG_4(char * jarg1) {
  void * jresult ;
  char *arg1 = (char *) 0 ;
  ArActionLimiterForwards *result = 0 ;
  
  arg1 = (char *)jarg1; 
  result = (ArActionLimiterForwards *)new ArActionLimiterForwards((char const *)arg1);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_ArActionLimiterForwards__SWIG_5() {
  void * jresult ;
  ArActionLimiterForwards *result = 0 ;
  
  result = (ArActionLimiterForwards *)new ArActionLimiterForwards();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_ArActionLimiterForwards(void * jarg1) {
  ArActionLimiterForwards *arg1 = (ArActionLimiterForwards *) 0 ;
  
  arg1 = (ArActionLimiterForwards *)jarg1; 
  delete arg1;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_ArActionLimiterForwards_fire(void * jarg1, void * jarg2) {
  void * jresult ;
  ArActionLimiterForwards *arg1 = (ArActionLimiterForwards *) 0 ;
  ArActionDesired arg2 ;
  ArActionDesired *argp2 ;
  ArActionDesired *result = 0 ;
  
  arg1 = (ArActionLimiterForwards *)jarg1; 
  argp2 = (ArActionDesired *)jarg2; 
  if (!argp2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Attempt to dereference null ArActionDesired", 0);
    return 0;
  }
  arg2 = *argp2; 
  result = (ArActionDesired *)(arg1)->fire(arg2);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_ArActionLimiterForwards_getDesired(void * jarg1) {
  void * jresult ;
  ArActionLimiterForwards *arg1 = (ArActionLimiterForwards *) 0 ;
  ArActionDesired *result = 0 ;
  
  arg1 = (ArActionLimiterForwards *)jarg1; 
  result = (ArActionDesired *)(arg1)->getDesired();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_ArActionLimiterForwards_setParameters__SWIG_0(void * jarg1, double jarg2, double jarg3, double jarg4, double jarg5) {
  ArActionLimiterForwards *arg1 = (ArActionLimiterForwards *) 0 ;
  double arg2 ;
  double arg3 ;
  double arg4 ;
  double arg5 ;
  
  arg1 = (ArActionLimiterForwards *)jarg1; 
  arg2 = (double)jarg2; 
  arg3 = (double)jarg3; 
  arg4 = (double)jarg4; 
  arg5 = (double)jarg5; 
  (arg1)->setParameters(arg2,arg3,arg4,arg5);
}


SWIGEXPORT void SWIGSTDCALL CSharp_ArActionLimiterForwards_setParameters__SWIG_1(void * jarg1, double jarg2, double jarg3, double jarg4) {
  ArActionLimiterForwards *arg1 = (ArActionLimiterForwards *) 0 ;
  double arg2 ;
  double arg3 ;
  double arg4 ;
  
  arg1 = (ArActionLimiterForwards *)jarg1; 
  arg2 = (double)jarg2; 
  arg3 = (double)jarg3; 
  arg4 = (double)jarg4; 
  (arg1)->setParameters(arg2,arg3,arg4);
}


SWIGEXPORT void SWIGSTDCALL CSharp_ArActionLimiterForwards_setParameters__SWIG_2(void * jarg1, double jarg2, double jarg3) {
  ArActionLimiterForwards *arg1 = (ArActionLimiterForwards *) 0 ;
  double arg2 ;
  double arg3 ;
  
  arg1 = (ArActionLimiterForwards *)jarg1; 
  arg2 = (double)jarg2; 
  arg3 = (double)jarg3; 
  (arg1)->setParameters(arg2,arg3);
}


SWIGEXPORT void SWIGSTDCALL CSharp_ArActionLimiterForwards_setParameters__SWIG_3(void * jarg1, double jarg2) {
  ArActionLimiterForwards *arg1 = (ArActionLimiterForwards *) 0 ;
  double arg2 ;
  
  arg1 = (ArActionLimiterForwards *)jarg1; 
  arg2 = (double)jarg2; 
  (arg1)->setParameters(arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_ArActionLimiterForwards_setParameters__SWIG_4(void * jarg1) {
  ArActionLimiterForwards *arg1 = (ArActionLimiterForwards *) 0 ;
  
  arg1 = (ArActionLimiterForwards *)jarg1; 
  (arg1)->setParameters();
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_ArActionLimiterForwards_getStopped(void * jarg1) {
  unsigned int jresult ;
  ArActionLimiterForwards *arg1 = (ArActionLimiterForwards *) 0 ;
  bool result;
  
  arg1 = (ArActionLimiterForwards *)jarg1; 
  result = (bool)((ArActionLimiterForwards const *)arg1)->getStopped();
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_ArActionLimiterForwards_getLastSensorReadingPos(void * jarg1) {
  void * jresult ;
  ArActionLimiterForwards *arg1 = (ArActionLimiterForwards *) 0 ;
  ArPose result;
  
  arg1 = (ArActionLimiterForwards *)jarg1; 
  result = ((ArActionLimiterForwards const *)arg1)->getLastSensorReadingPos();
  jresult = new ArPose((const ArPose &)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_ArActionLimiterForwards_getLastSensorReadingDevice(void * jarg1) {
  void * jresult ;
  ArActionLimiterForwards *arg1 = (ArActionLimiterForwards *) 0 ;
  ArRangeDevice *result = 0 ;
  
  arg1 = (ArActionLimiterForwards *)jarg1; 
  result = (ArRangeDevice *)((ArActionLimiterForwards const *)arg1)->getLastSensorReadingDevice();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_ArActionLimiterTableSensor__SWIG_0(char * jarg1) {
  void * jresult ;
  char *arg1 = (char *) 0 ;
  ArActionLimiterTableSensor *result = 0 ;
  
  arg1 = (char *)jarg1; 
  result = (ArActionLimiterTableSensor *)new ArActionLimiterTableSensor((char const *)arg1);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_ArActionLimiterTableSensor__SWIG_1() {
  void * jresult ;
  ArActionLimiterTableSensor *result = 0 ;
  
  result = (ArActionLimiterTableSensor *)new ArActionLimiterTableSensor();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_ArActionLimiterTableSensor(void * jarg1) {
  ArActionLimiterTableSensor *arg1 = (ArActionLimiterTableSensor *) 0 ;
  
  arg1 = (ArActionLimiterTableSensor *)jarg1; 
  delete arg1;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_ArActionLimiterTableSensor_fire(void * jarg1, void * jarg2) {
  void * jresult ;
  ArActionLimiterTableSensor *arg1 = (ArActionLimiterTableSensor *) 0 ;
  ArActionDesired arg2 ;
  ArActionDesired *argp2 ;
  ArActionDesired *result = 0 ;
  
  arg1 = (ArActionLimiterTableSensor *)jarg1; 
  argp2 = (ArActionDesired *)jarg2; 
  if (!argp2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Attempt to dereference null ArActionDesired", 0);
    return 0;
  }
  arg2 = *argp2; 
  result = (ArActionDesired *)(arg1)->fire(arg2);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_ArActionLimiterTableSensor_getDesired(void * jarg1) {
  void * jresult ;
  ArActionLimiterTableSensor *arg1 = (ArActionLimiterTableSensor *) 0 ;
  ArActionDesired *result = 0 ;
  
  arg1 = (ArActionLimiterTableSensor *)jarg1; 
  result = (ArActionDesired *)(arg1)->getDesired();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_ArActionMovementParameters__SWIG_0(char * jarg1, unsigned int jarg2, unsigned int jarg3) {
  void * jresult ;
  char *arg1 = (char *) 0 ;
  bool arg2 ;
  bool arg3 ;
  ArActionMovementParameters *result = 0 ;
  
  arg1 = (char *)jarg1; 
  arg2 = jarg2 ? true : false; 
  arg3 = jarg3 ? true : false; 
  result = (ArActionMovementParameters *)new ArActionMovementParameters((char const *)arg1,arg2,arg3);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_ArActionMovementParameters__SWIG_1(char * jarg1, unsigned int jarg2) {
  void * jresult ;
  char *arg1 = (char *) 0 ;
  bool arg2 ;
  ArActionMovementParameters *result = 0 ;
  
  arg1 = (char *)jarg1; 
  arg2 = jarg2 ? true : false; 
  result = (ArActionMovementParameters *)new ArActionMovementParameters((char const *)arg1,arg2);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_ArActionMovementParameters__SWIG_2(char * jarg1) {
  void * jresult ;
  char *arg1 = (char *) 0 ;
  ArActionMovementParameters *result = 0 ;
  
  arg1 = (char *)jarg1; 
  result = (ArActionMovementParameters *)new ArActionMovementParameters((char const *)arg1);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_ArActionMovementParameters__SWIG_3() {
  void * jresult ;
  ArActionMovementParameters *result = 0 ;
  
  result = (ArActionMovementParameters *)new ArActionMovementParameters();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_ArActionMovementParameters(void * jarg1) {
  ArActionMovementParameters *arg1 = (ArActionMovementParameters *) 0 ;
  
  arg1 = (ArActionMovementParameters *)jarg1; 
  delete arg1;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_ArActionMovementParameters_fire(void * jarg1, void * jarg2) {
  void * jresult ;
  ArActionMovementParameters *arg1 = (ArActionMovementParameters *) 0 ;
  ArActionDesired arg2 ;
  ArActionDesired *argp2 ;
  ArActionDesired *result = 0 ;
  
  arg1 = (ArActionMovementParameters *)jarg1; 
  argp2 = (ArActionDesired *)jarg2; 
  if (!argp2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Attempt to dereference null ArActionDesired", 0);
    return 0;
  }
  arg2 = *argp2; 
  result = (ArActionDesired *)(arg1)->fire(arg2);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_ArActionMovementParameters_getDesired(void * jarg1) {
  void * jresult ;
  ArActionMovementParameters *arg1 = (ArActionMovementParameters *) 0 ;
  ArActionDesired *result = 0 ;
  
  arg1 = (ArActionMovementParameters *)jarg1; 
  result = (ArActionDesired *)(arg1)->getDesired();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_ArActionMovementParameters_isEnabled(void * jarg1) {
  unsigned int jresult ;
  ArActionMovementParameters *arg1 = (ArActionMovementParameters *) 0 ;
  bool result;
  
  arg1 = (ArActionMovementParameters *)jarg1; 
  result = (bool)(arg1)->isEnabled();
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_ArActionMovementParameters_enable(void * jarg1) {
  ArActionMovementParameters *arg1 = (ArActionMovementParameters *) 0 ;
  
  arg1 = (ArActionMovementParameters *)jarg1; 
  (arg1)->enable();
}


SWIGEXPORT void SWIGSTDCALL CSharp_ArActionMovementParameters_enableOnceFromSector(void * jarg1, void * jarg2) {
  ArActionMovementParameters *arg1 = (ArActionMovementParameters *) 0 ;
  ArMapObject *arg2 = (ArMapObject *) 0 ;
  
  arg1 = (ArActionMovementParameters *)jarg1; 
  arg2 = (ArMapObject *)jarg2; 
  (arg1)->enableOnceFromSector(arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_ArActionMovementParameters_disable(void * jarg1) {
  ArActionMovementParameters *arg1 = (ArActionMovementParameters *) 0 ;
  
  arg1 = (ArActionMovementParameters *)jarg1; 
  (arg1)->disable();
}


SWIGEXPORT void SWIGSTDCALL CSharp_ArActionMovementParameters_setParameters__SWIG_0(void * jarg1, double jarg2, double jarg3, double jarg4, double jarg5, double jarg6, double jarg7, double jarg8, double jarg9, double jarg10, double jarg11) {
  ArActionMovementParameters *arg1 = (ArActionMovementParameters *) 0 ;
  double arg2 ;
  double arg3 ;
  double arg4 ;
  double arg5 ;
  double arg6 ;
  double arg7 ;
  double arg8 ;
  double arg9 ;
  double arg10 ;
  double arg11 ;
  
  arg1 = (ArActionMovementParameters *)jarg1; 
  arg2 = (double)jarg2; 
  arg3 = (double)jarg3; 
  arg4 = (double)jarg4; 
  arg5 = (double)jarg5; 
  arg6 = (double)jarg6; 
  arg7 = (double)jarg7; 
  arg8 = (double)jarg8; 
  arg9 = (double)jarg9; 
  arg10 = (double)jarg10; 
  arg11 = (double)jarg11; 
  (arg1)->setParameters(arg2,arg3,arg4,arg5,arg6,arg7,arg8,arg9,arg10,arg11);
}


SWIGEXPORT void SWIGSTDCALL CSharp_ArActionMovementParameters_setParameters__SWIG_1(void * jarg1, double jarg2, double jarg3, double jarg4, double jarg5, double jarg6, double jarg7, double jarg8, double jarg9, double jarg10) {
  ArActionMovementParameters *arg1 = (ArActionMovementParameters *) 0 ;
  double arg2 ;
  double arg3 ;
  double arg4 ;
  double arg5 ;
  double arg6 ;
  double arg7 ;
  double arg8 ;
  double arg9 ;
  double arg10 ;
  
  arg1 = (ArActionMovementParameters *)jarg1; 
  arg2 = (double)jarg2; 
  arg3 = (double)jarg3; 
  arg4 = (double)jarg4; 
  arg5 = (double)jarg5; 
  arg6 = (double)jarg6; 
  arg7 = (double)jarg7; 
  arg8 = (double)jarg8; 
  arg9 = (double)jarg9; 
  arg10 = (double)jarg10; 
  (arg1)->setParameters(arg2,arg3,arg4,arg5,arg6,arg7,arg8,arg9,arg10);
}


SWIGEXPORT void SWIGSTDCALL CSharp_ArActionMovementParameters_setParameters__SWIG_2(void * jarg1, double jarg2, double jarg3, double jarg4, double jarg5, double jarg6, double jarg7, double jarg8, double jarg9) {
  ArActionMovementParameters *arg1 = (ArActionMovementParameters *) 0 ;
  double arg2 ;
  double arg3 ;
  double arg4 ;
  double arg5 ;
  double arg6 ;
  double arg7 ;
  double arg8 ;
  double arg9 ;
  
  arg1 = (ArActionMovementParameters *)jarg1; 
  arg2 = (double)jarg2; 
  arg3 = (double)jarg3; 
  arg4 = (double)jarg4; 
  arg5 = (double)jarg5; 
  arg6 = (double)jarg6; 
  arg7 = (double)jarg7; 
  arg8 = (double)jarg8; 
  arg9 = (double)jarg9; 
  (arg1)->setParameters(arg2,arg3,arg4,arg5,arg6,arg7,arg8,arg9);
}


SWIGEXPORT void SWIGSTDCALL CSharp_ArActionMovementParameters_setParameters__SWIG_3(void * jarg1, double jarg2, double jarg3, double jarg4, double jarg5, double jarg6, double jarg7, double jarg8) {
  ArActionMovementParameters *arg1 = (ArActionMovementParameters *) 0 ;
  double arg2 ;
  double arg3 ;
  double arg4 ;
  double arg5 ;
  double arg6 ;
  double arg7 ;
  double arg8 ;
  
  arg1 = (ArActionMovementParameters *)jarg1; 
  arg2 = (double)jarg2; 
  arg3 = (double)jarg3; 
  arg4 = (double)jarg4; 
  arg5 = (double)jarg5; 
  arg6 = (double)jarg6; 
  arg7 = (double)jarg7; 
  arg8 = (double)jarg8; 
  (arg1)->setParameters(arg2,arg3,arg4,arg5,arg6,arg7,arg8);
}


SWIGEXPORT void SWIGSTDCALL CSharp_ArActionMovementParameters_setParameters__SWIG_4(void * jarg1, double jarg2, double jarg3, double jarg4, double jarg5, double jarg6, double jarg7) {
  ArActionMovementParameters *arg1 = (ArActionMovementParameters *) 0 ;
  double arg2 ;
  double arg3 ;
  double arg4 ;
  double arg5 ;
  double arg6 ;
  double arg7 ;
  
  arg1 = (ArActionMovementParameters *)jarg1; 
  arg2 = (double)jarg2; 
  arg3 = (double)jarg3; 
  arg4 = (double)jarg4; 
  arg5 = (double)jarg5; 
  arg6 = (double)jarg6; 
  arg7 = (double)jarg7; 
  (arg1)->setParameters(arg2,arg3,arg4,arg5,arg6,arg7);
}


SWIGEXPORT void SWIGSTDCALL CSharp_ArActionMovementParameters_setParameters__SWIG_5(void * jarg1, double jarg2, double jarg3, double jarg4, double jarg5, double jarg6) {
  ArActionMovementParameters *arg1 = (ArActionMovementParameters *) 0 ;
  double arg2 ;
  double arg3 ;
  double arg4 ;
  double arg5 ;
  double arg6 ;
  
  arg1 = (ArActionMovementParameters *)jarg1; 
  arg2 = (double)jarg2; 
  arg3 = (double)jarg3; 
  arg4 = (double)jarg4; 
  arg5 = (double)jarg5; 
  arg6 = (double)jarg6; 
  (arg1)->setParameters(arg2,arg3,arg4,arg5,arg6);
}


SWIGEXPORT void SWIGSTDCALL CSharp_ArActionMovementParameters_setParameters__SWIG_6(void * jarg1, double jarg2, double jarg3, double jarg4, double jarg5) {
  ArActionMovementParameters *arg1 = (ArActionMovementParameters *) 0 ;
  double arg2 ;
  double arg3 ;
  double arg4 ;
  double arg5 ;
  
  arg1 = (ArActionMovementParameters *)jarg1; 
  arg2 = (double)jarg2; 
  arg3 = (double)jarg3; 
  arg4 = (double)jarg4; 
  arg5 = (double)jarg5; 
  (arg1)->setParameters(arg2,arg3,arg4,arg5);
}


SWIGEXPORT void SWIGSTDCALL CSharp_ArActionMovementParameters_setParameters__SWIG_7(void * jarg1, double jarg2, double jarg3, double jarg4) {
  ArActionMovementParameters *arg1 = (ArActionMovementParameters *) 0 ;
  double arg2 ;
  double arg3 ;
  double arg4 ;
  
  arg1 = (ArActionMovementParameters *)jarg1; 
  arg2 = (double)jarg2; 
  arg3 = (double)jarg3; 
  arg4 = (double)jarg4; 
  (arg1)->setParameters(arg2,arg3,arg4);
}


SWIGEXPORT void SWIGSTDCALL CSharp_ArActionMovementParameters_setParameters__SWIG_8(void * jarg1, double jarg2, double jarg3) {
  ArActionMovementParameters *arg1 = (ArActionMovementParameters *) 0 ;
  double arg2 ;
  double arg3 ;
  
  arg1 = (ArActionMovementParameters *)jarg1; 
  arg2 = (double)jarg2; 
  arg3 = (double)jarg3; 
  (arg1)->setParameters(arg2,arg3);
}


SWIGEXPORT void SWIGSTDCALL CSharp_ArActionMovementParameters_setParameters__SWIG_9(void * jarg1, double jarg2) {
  ArActionMovementParameters *arg1 = (ArActionMovementParameters *) 0 ;
  double arg2 ;
  
  arg1 = (ArActionMovementParameters *)jarg1; 
  arg2 = (double)jarg2; 
  (arg1)->setParameters(arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_ArActionMovementParameters_setParameters__SWIG_10(void * jarg1) {
  ArActionMovementParameters *arg1 = (ArActionMovementParameters *) 0 ;
  
  arg1 = (ArActionMovementParameters *)jarg1; 
  (arg1)->setParameters();
}


SWIGEXPORT void SWIGSTDCALL CSharp_ArActionMovementParameters_addToConfig__SWIG_0(void * jarg1, void * jarg2, char * jarg3, char * jarg4) {
  ArActionMovementParameters *arg1 = (ArActionMovementParameters *) 0 ;
  ArConfig *arg2 = (ArConfig *) 0 ;
  char *arg3 = (char *) 0 ;
  char *arg4 = (char *) 0 ;
  
  arg1 = (ArActionMovementParameters *)jarg1; 
  arg2 = (ArConfig *)jarg2; 
  arg3 = (char *)jarg3; 
  arg4 = (char *)jarg4; 
  (arg1)->addToConfig(arg2,(char const *)arg3,(char const *)arg4);
}


SWIGEXPORT void SWIGSTDCALL CSharp_ArActionMovementParameters_addToConfig__SWIG_1(void * jarg1, void * jarg2, char * jarg3) {
  ArActionMovementParameters *arg1 = (ArActionMovementParameters *) 0 ;
  ArConfig *arg2 = (ArConfig *) 0 ;
  char *arg3 = (char *) 0 ;
  
  arg1 = (ArActionMovementParameters *)jarg1; 
  arg2 = (ArConfig *)jarg2; 
  arg3 = (char *)jarg3; 
  (arg1)->addToConfig(arg2,(char const *)arg3);
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_ArActionRatioInput__SWIG_0(char * jarg1) {
  void * jresult ;
  char *arg1 = (char *) 0 ;
  ArActionRatioInput *result = 0 ;
  
  arg1 = (char *)jarg1; 
  result = (ArActionRatioInput *)new ArActionRatioInput((char const *)arg1);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_ArActionRatioInput__SWIG_1() {
  void * jresult ;
  ArActionRatioInput *result = 0 ;
  
  result = (ArActionRatioInput *)new ArActionRatioInput();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_ArActionRatioInput(void * jarg1) {
  ArActionRatioInput *arg1 = (ArActionRatioInput *) 0 ;
  
  arg1 = (ArActionRatioInput *)jarg1; 
  delete arg1;
}


SWIGEXPORT void SWIGSTDCALL CSharp_ArActionRatioInput_setRatios__SWIG_0(void * jarg1, double jarg2, double jarg3, double jarg4, double jarg5) {
  ArActionRatioInput *arg1 = (ArActionRatioInput *) 0 ;
  double arg2 ;
  double arg3 ;
  double arg4 ;
  double arg5 ;
  
  arg1 = (ArActionRatioInput *)jarg1; 
  arg2 = (double)jarg2; 
  arg3 = (double)jarg3; 
  arg4 = (double)jarg4; 
  arg5 = (double)jarg5; 
  (arg1)->setRatios(arg2,arg3,arg4,arg5);
}


SWIGEXPORT void SWIGSTDCALL CSharp_ArActionRatioInput_setRatios__SWIG_1(void * jarg1, double jarg2, double jarg3, double jarg4) {
  ArActionRatioInput *arg1 = (ArActionRatioInput *) 0 ;
  double arg2 ;
  double arg3 ;
  double arg4 ;
  
  arg1 = (ArActionRatioInput *)jarg1; 
  arg2 = (double)jarg2; 
  arg3 = (double)jarg3; 
  arg4 = (double)jarg4; 
  (arg1)->setRatios(arg2,arg3,arg4);
}


SWIGEXPORT void SWIGSTDCALL CSharp_ArActionRatioInput_setTransRatio(void * jarg1, double jarg2) {
  ArActionRatioInput *arg1 = (ArActionRatioInput *) 0 ;
  double arg2 ;
  
  arg1 = (ArActionRatioInput *)jarg1; 
  arg2 = (double)jarg2; 
  (arg1)->setTransRatio(arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_ArActionRatioInput_setRotRatio(void * jarg1, double jarg2) {
  ArActionRatioInput *arg1 = (ArActionRatioInput *) 0 ;
  double arg2 ;
  
  arg1 = (ArActionRatioInput *)jarg1; 
  arg2 = (double)jarg2; 
  (arg1)->setRotRatio(arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_ArActionRatioInput_setLatRatio(void * jarg1, double jarg2) {
  ArActionRatioInput *arg1 = (ArActionRatioInput *) 0 ;
  double arg2 ;
  
  arg1 = (ArActionRatioInput *)jarg1; 
  arg2 = (double)jarg2; 
  (arg1)->setLatRatio(arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_ArActionRatioInput_setThrottleRatio(void * jarg1, double jarg2) {
  ArActionRatioInput *arg1 = (ArActionRatioInput *) 0 ;
  double arg2 ;
  
  arg1 = (ArActionRatioInput *)jarg1; 
  arg2 = (double)jarg2; 
  (arg1)->setThrottleRatio(arg2);
}


SWIGEXPORT double SWIGSTDCALL CSharp_ArActionRatioInput_getTransRatio(void * jarg1) {
  double jresult ;
  ArActionRatioInput *arg1 = (ArActionRatioInput *) 0 ;
  double result;
  
  arg1 = (ArActionRatioInput *)jarg1; 
  result = (double)(arg1)->getTransRatio();
  jresult = result; 
  return jresult;
}


SWIGEXPORT double SWIGSTDCALL CSharp_ArActionRatioInput_getRotRatio(void * jarg1) {
  double jresult ;
  ArActionRatioInput *arg1 = (ArActionRatioInput *) 0 ;
  double result;
  
  arg1 = (ArActionRatioInput *)jarg1; 
  result = (double)(arg1)->getRotRatio();
  jresult = result; 
  return jresult;
}


SWIGEXPORT double SWIGSTDCALL CSharp_ArActionRatioInput_getThrottleRatio(void * jarg1) {
  double jresult ;
  ArActionRatioInput *arg1 = (ArActionRatioInput *) 0 ;
  double result;
  
  arg1 = (ArActionRatioInput *)jarg1; 
  result = (double)(arg1)->getThrottleRatio();
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_ArActionRatioInput_addFireCallback(void * jarg1, int jarg2, void * jarg3) {
  ArActionRatioInput *arg1 = (ArActionRatioInput *) 0 ;
  int arg2 ;
  ArFunctor *arg3 = (ArFunctor *) 0 ;
  
  arg1 = (ArActionRatioInput *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (ArFunctor *)jarg3; 
  (arg1)->addFireCallback(arg2,arg3);
}


SWIGEXPORT void SWIGSTDCALL CSharp_ArActionRatioInput_remFireCallback(void * jarg1, void * jarg2) {
  ArActionRatioInput *arg1 = (ArActionRatioInput *) 0 ;
  ArFunctor *arg2 = (ArFunctor *) 0 ;
  
  arg1 = (ArActionRatioInput *)jarg1; 
  arg2 = (ArFunctor *)jarg2; 
  (arg1)->remFireCallback(arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_ArActionRatioInput_addActivateCallback__SWIG_0(void * jarg1, void * jarg2, int jarg3) {
  ArActionRatioInput *arg1 = (ArActionRatioInput *) 0 ;
  ArFunctor *arg2 = (ArFunctor *) 0 ;
  ArListPos::Pos arg3 ;
  
  arg1 = (ArActionRatioInput *)jarg1; 
  arg2 = (ArFunctor *)jarg2; 
  arg3 = (ArListPos::Pos)jarg3; 
  (arg1)->addActivateCallback(arg2,arg3);
}


SWIGEXPORT void SWIGSTDCALL CSharp_ArActionRatioInput_addActivateCallback__SWIG_1(void * jarg1, void * jarg2) {
  ArActionRatioInput *arg1 = (ArActionRatioInput *) 0 ;
  ArFunctor *arg2 = (ArFunctor *) 0 ;
  
  arg1 = (ArActionRatioInput *)jarg1; 
  arg2 = (ArFunctor *)jarg2; 
  (arg1)->addActivateCallback(arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_ArActionRatioInput_remActivateCallback(void * jarg1, void * jarg2) {
  ArActionRatioInput *arg1 = (ArActionRatioInput *) 0 ;
  ArFunctor *arg2 = (ArFunctor *) 0 ;
  
  arg1 = (ArActionRatioInput *)jarg1; 
  arg2 = (ArFunctor *)jarg2; 
  (arg1)->remActivateCallback(arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_ArActionRatioInput_addDeactivateCallback__SWIG_0(void * jarg1, void * jarg2, int jarg3) {
  ArActionRatioInput *arg1 = (ArActionRatioInput *) 0 ;
  ArFunctor *arg2 = (ArFunctor *) 0 ;
  ArListPos::Pos arg3 ;
  
  arg1 = (ArActionRatioInput *)jarg1; 
  arg2 = (ArFunctor *)jarg2; 
  arg3 = (ArListPos::Pos)jarg3; 
  (arg1)->addDeactivateCallback(arg2,arg3);
}


SWIGEXPORT void SWIGSTDCALL CSharp_ArActionRatioInput_addDeactivateCallback__SWIG_1(void * jarg1, void * jarg2) {
  ArActionRatioInput *arg1 = (ArActionRatioInput *) 0 ;
  ArFunctor *arg2 = (ArFunctor *) 0 ;
  
  arg1 = (ArActionRatioInput *)jarg1; 
  arg2 = (ArFunctor *)jarg2; 
  (arg1)->addDeactivateCallback(arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_ArActionRatioInput_remDeactivateCallback(void * jarg1, void * jarg2) {
  ArActionRatioInput *arg1 = (ArActionRatioInput *) 0 ;
  ArFunctor *arg2 = (ArFunctor *) 0 ;
  
  arg1 = (ArActionRatioInput *)jarg1; 
  arg2 = (ArFunctor *)jarg2; 
  (arg1)->remDeactivateCallback(arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_ArActionRatioInput_setParameters__SWIG_0(void * jarg1, double jarg2, double jarg3, double jarg4, double jarg5, double jarg6, double jarg7, double jarg8, double jarg9) {
  ArActionRatioInput *arg1 = (ArActionRatioInput *) 0 ;
  double arg2 ;
  double arg3 ;
  double arg4 ;
  double arg5 ;
  double arg6 ;
  double arg7 ;
  double arg8 ;
  double arg9 ;
  
  arg1 = (ArActionRatioInput *)jarg1; 
  arg2 = (double)jarg2; 
  arg3 = (double)jarg3; 
  arg4 = (double)jarg4; 
  arg5 = (double)jarg5; 
  arg6 = (double)jarg6; 
  arg7 = (double)jarg7; 
  arg8 = (double)jarg8; 
  arg9 = (double)jarg9; 
  (arg1)->setParameters(arg2,arg3,arg4,arg5,arg6,arg7,arg8,arg9);
}


SWIGEXPORT void SWIGSTDCALL CSharp_ArActionRatioInput_setParameters__SWIG_1(void * jarg1, double jarg2, double jarg3, double jarg4, double jarg5, double jarg6, double jarg7, double jarg8) {
  ArActionRatioInput *arg1 = (ArActionRatioInput *) 0 ;
  double arg2 ;
  double arg3 ;
  double arg4 ;
  double arg5 ;
  double arg6 ;
  double arg7 ;
  double arg8 ;
  
  arg1 = (ArActionRatioInput *)jarg1; 
  arg2 = (double)jarg2; 
  arg3 = (double)jarg3; 
  arg4 = (double)jarg4; 
  arg5 = (double)jarg5; 
  arg6 = (double)jarg6; 
  arg7 = (double)jarg7; 
  arg8 = (double)jarg8; 
  (arg1)->setParameters(arg2,arg3,arg4,arg5,arg6,arg7,arg8);
}


SWIGEXPORT void SWIGSTDCALL CSharp_ArActionRatioInput_setParameters__SWIG_2(void * jarg1, double jarg2, double jarg3, double jarg4, double jarg5, double jarg6, double jarg7) {
  ArActionRatioInput *arg1 = (ArActionRatioInput *) 0 ;
  double arg2 ;
  double arg3 ;
  double arg4 ;
  double arg5 ;
  double arg6 ;
  double arg7 ;
  
  arg1 = (ArActionRatioInput *)jarg1; 
  arg2 = (double)jarg2; 
  arg3 = (double)jarg3; 
  arg4 = (double)jarg4; 
  arg5 = (double)jarg5; 
  arg6 = (double)jarg6; 
  arg7 = (double)jarg7; 
  (arg1)->setParameters(arg2,arg3,arg4,arg5,arg6,arg7);
}


SWIGEXPORT void SWIGSTDCALL CSharp_ArActionRatioInput_setParameters__SWIG_3(void * jarg1, double jarg2, double jarg3, double jarg4, double jarg5, double jarg6) {
  ArActionRatioInput *arg1 = (ArActionRatioInput *) 0 ;
  double arg2 ;
  double arg3 ;
  double arg4 ;
  double arg5 ;
  double arg6 ;
  
  arg1 = (ArActionRatioInput *)jarg1; 
  arg2 = (double)jarg2; 
  arg3 = (double)jarg3; 
  arg4 = (double)jarg4; 
  arg5 = (double)jarg5; 
  arg6 = (double)jarg6; 
  (arg1)->setParameters(arg2,arg3,arg4,arg5,arg6);
}


SWIGEXPORT void SWIGSTDCALL CSharp_ArActionRatioInput_addToConfig(void * jarg1, void * jarg2, char * jarg3) {
  ArActionRatioInput *arg1 = (ArActionRatioInput *) 0 ;
  ArConfig *arg2 = (ArConfig *) 0 ;
  char *arg3 = (char *) 0 ;
  
  arg1 = (ArActionRatioInput *)jarg1; 
  arg2 = (ArConfig *)jarg2; 
  arg3 = (char *)jarg3; 
  (arg1)->addToConfig(arg2,(char const *)arg3);
}


SWIGEXPORT void * SWIGSTDCALL CSharp_ArActionRatioInput_fire(void * jarg1, void * jarg2) {
  void * jresult ;
  ArActionRatioInput *arg1 = (ArActionRatioInput *) 0 ;
  ArActionDesired arg2 ;
  ArActionDesired *argp2 ;
  ArActionDesired *result = 0 ;
  
  arg1 = (ArActionRatioInput *)jarg1; 
  argp2 = (ArActionDesired *)jarg2; 
  if (!argp2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Attempt to dereference null ArActionDesired", 0);
    return 0;
  }
  arg2 = *argp2; 
  result = (ArActionDesired *)(arg1)->fire(arg2);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_ArActionRatioInput_getDesired(void * jarg1) {
  void * jresult ;
  ArActionRatioInput *arg1 = (ArActionRatioInput *) 0 ;
  ArActionDesired *result = 0 ;
  
  arg1 = (ArActionRatioInput *)jarg1; 
  result = (ArActionDesired *)(arg1)->getDesired();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_ArActionRatioInput_activate(void * jarg1) {
  ArActionRatioInput *arg1 = (ArActionRatioInput *) 0 ;
  
  arg1 = (ArActionRatioInput *)jarg1; 
  (arg1)->activate();
}


SWIGEXPORT void SWIGSTDCALL CSharp_ArActionRatioInput_deactivate(void * jarg1) {
  ArActionRatioInput *arg1 = (ArActionRatioInput *) 0 ;
  
  arg1 = (ArActionRatioInput *)jarg1; 
  (arg1)->deactivate();
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_ArActionRobotJoydrive__SWIG_0(char * jarg1, unsigned int jarg2) {
  void * jresult ;
  char *arg1 = (char *) 0 ;
  bool arg2 ;
  ArActionRobotJoydrive *result = 0 ;
  
  arg1 = (char *)jarg1; 
  arg2 = jarg2 ? true : false; 
  result = (ArActionRobotJoydrive *)new ArActionRobotJoydrive((char const *)arg1,arg2);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_ArActionRobotJoydrive__SWIG_1(char * jarg1) {
  void * jresult ;
  char *arg1 = (char *) 0 ;
  ArActionRobotJoydrive *result = 0 ;
  
  arg1 = (char *)jarg1; 
  result = (ArActionRobotJoydrive *)new ArActionRobotJoydrive((char const *)arg1);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_ArActionRobotJoydrive__SWIG_2() {
  void * jresult ;
  ArActionRobotJoydrive *result = 0 ;
  
  result = (ArActionRobotJoydrive *)new ArActionRobotJoydrive();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_ArActionRobotJoydrive(void * jarg1) {
  ArActionRobotJoydrive *arg1 = (ArActionRobotJoydrive *) 0 ;
  
  arg1 = (ArActionRobotJoydrive *)jarg1; 
  delete arg1;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_ArActionRobotJoydrive_fire(void * jarg1, void * jarg2) {
  void * jresult ;
  ArActionRobotJoydrive *arg1 = (ArActionRobotJoydrive *) 0 ;
  ArActionDesired arg2 ;
  ArActionDesired *argp2 ;
  ArActionDesired *result = 0 ;
  
  arg1 = (ArActionRobotJoydrive *)jarg1; 
  argp2 = (ArActionDesired *)jarg2; 
  if (!argp2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Attempt to dereference null ArActionDesired", 0);
    return 0;
  }
  arg2 = *argp2; 
  result = (ArActionDesired *)(arg1)->fire(arg2);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_ArActionRobotJoydrive_getDesired(void * jarg1) {
  void * jresult ;
  ArActionRobotJoydrive *arg1 = (ArActionRobotJoydrive *) 0 ;
  ArActionDesired *result = 0 ;
  
  arg1 = (ArActionRobotJoydrive *)jarg1; 
  result = (ArActionDesired *)(arg1)->getDesired();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_ArActionRobotJoydrive_setRobot(void * jarg1, void * jarg2) {
  ArActionRobotJoydrive *arg1 = (ArActionRobotJoydrive *) 0 ;
  ArRobot *arg2 = (ArRobot *) 0 ;
  
  arg1 = (ArActionRobotJoydrive *)jarg1; 
  arg2 = (ArRobot *)jarg2; 
  (arg1)->setRobot(arg2);
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_ArActionStallRecover__SWIG_0(char * jarg1, double jarg2, int jarg3, double jarg4, double jarg5, unsigned int jarg6) {
  void * jresult ;
  char *arg1 = (char *) 0 ;
  double arg2 ;
  int arg3 ;
  double arg4 ;
  double arg5 ;
  bool arg6 ;
  ArActionStallRecover *result = 0 ;
  
  arg1 = (char *)jarg1; 
  arg2 = (double)jarg2; 
  arg3 = (int)jarg3; 
  arg4 = (double)jarg4; 
  arg5 = (double)jarg5; 
  arg6 = jarg6 ? true : false; 
  result = (ArActionStallRecover *)new ArActionStallRecover((char const *)arg1,arg2,arg3,arg4,arg5,arg6);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_ArActionStallRecover__SWIG_1(char * jarg1, double jarg2, int jarg3, double jarg4, double jarg5) {
  void * jresult ;
  char *arg1 = (char *) 0 ;
  double arg2 ;
  int arg3 ;
  double arg4 ;
  double arg5 ;
  ArActionStallRecover *result = 0 ;
  
  arg1 = (char *)jarg1; 
  arg2 = (double)jarg2; 
  arg3 = (int)jarg3; 
  arg4 = (double)jarg4; 
  arg5 = (double)jarg5; 
  result = (ArActionStallRecover *)new ArActionStallRecover((char const *)arg1,arg2,arg3,arg4,arg5);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_ArActionStallRecover__SWIG_2(char * jarg1, double jarg2, int jarg3, double jarg4) {
  void * jresult ;
  char *arg1 = (char *) 0 ;
  double arg2 ;
  int arg3 ;
  double arg4 ;
  ArActionStallRecover *result = 0 ;
  
  arg1 = (char *)jarg1; 
  arg2 = (double)jarg2; 
  arg3 = (int)jarg3; 
  arg4 = (double)jarg4; 
  result = (ArActionStallRecover *)new ArActionStallRecover((char const *)arg1,arg2,arg3,arg4);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_ArActionStallRecover__SWIG_3(char * jarg1, double jarg2, int jarg3) {
  void * jresult ;
  char *arg1 = (char *) 0 ;
  double arg2 ;
  int arg3 ;
  ArActionStallRecover *result = 0 ;
  
  arg1 = (char *)jarg1; 
  arg2 = (double)jarg2; 
  arg3 = (int)jarg3; 
  result = (ArActionStallRecover *)new ArActionStallRecover((char const *)arg1,arg2,arg3);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_ArActionStallRecover__SWIG_4(char * jarg1, double jarg2) {
  void * jresult ;
  char *arg1 = (char *) 0 ;
  double arg2 ;
  ArActionStallRecover *result = 0 ;
  
  arg1 = (char *)jarg1; 
  arg2 = (double)jarg2; 
  result = (ArActionStallRecover *)new ArActionStallRecover((char const *)arg1,arg2);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_ArActionStallRecover__SWIG_5(char * jarg1) {
  void * jresult ;
  char *arg1 = (char *) 0 ;
  ArActionStallRecover *result = 0 ;
  
  arg1 = (char *)jarg1; 
  result = (ArActionStallRecover *)new ArActionStallRecover((char const *)arg1);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_ArActionStallRecover__SWIG_6() {
  void * jresult ;
  ArActionStallRecover *result = 0 ;
  
  result = (ArActionStallRecover *)new ArActionStallRecover();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_ArActionStallRecover(void * jarg1) {
  ArActionStallRecover *arg1 = (ArActionStallRecover *) 0 ;
  
  arg1 = (ArActionStallRecover *)jarg1; 
  delete arg1;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_ArActionStallRecover_fire(void * jarg1, void * jarg2) {
  void * jresult ;
  ArActionStallRecover *arg1 = (ArActionStallRecover *) 0 ;
  ArActionDesired arg2 ;
  ArActionDesired *argp2 ;
  ArActionDesired *result = 0 ;
  
  arg1 = (ArActionStallRecover *)jarg1; 
  argp2 = (ArActionDesired *)jarg2; 
  if (!argp2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Attempt to dereference null ArActionDesired", 0);
    return 0;
  }
  arg2 = *argp2; 
  result = (ArActionDesired *)(arg1)->fire(arg2);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_ArActionStallRecover_getDesired(void * jarg1) {
  void * jresult ;
  ArActionStallRecover *arg1 = (ArActionStallRecover *) 0 ;
  ArActionDesired *result = 0 ;
  
  arg1 = (ArActionStallRecover *)jarg1; 
  result = (ArActionDesired *)(arg1)->getDesired();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_ArActionStallRecover_addToConfig__SWIG_0(void * jarg1, void * jarg2, char * jarg3, int jarg4) {
  ArActionStallRecover *arg1 = (ArActionStallRecover *) 0 ;
  ArConfig *arg2 = (ArConfig *) 0 ;
  char *arg3 = (char *) 0 ;
  ArPriority::Priority arg4 ;
  
  arg1 = (ArActionStallRecover *)jarg1; 
  arg2 = (ArConfig *)jarg2; 
  arg3 = (char *)jarg3; 
  arg4 = (ArPriority::Priority)jarg4; 
  (arg1)->addToConfig(arg2,(char const *)arg3,arg4);
}


SWIGEXPORT void SWIGSTDCALL CSharp_ArActionStallRecover_addToConfig__SWIG_1(void * jarg1, void * jarg2, char * jarg3) {
  ArActionStallRecover *arg1 = (ArActionStallRecover *) 0 ;
  ArConfig *arg2 = (ArConfig *) 0 ;
  char *arg3 = (char *) 0 ;
  
  arg1 = (ArActionStallRecover *)jarg1; 
  arg2 = (ArConfig *)jarg2; 
  arg3 = (char *)jarg3; 
  (arg1)->addToConfig(arg2,(char const *)arg3);
}


SWIGEXPORT void SWIGSTDCALL CSharp_ArActionStallRecover_activate(void * jarg1) {
  ArActionStallRecover *arg1 = (ArActionStallRecover *) 0 ;
  
  arg1 = (ArActionStallRecover *)jarg1; 
  (arg1)->activate();
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_ArActionStop__SWIG_0(char * jarg1) {
  void * jresult ;
  char *arg1 = (char *) 0 ;
  ArActionStop *result = 0 ;
  
  arg1 = (char *)jarg1; 
  result = (ArActionStop *)new ArActionStop((char const *)arg1);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_ArActionStop__SWIG_1() {
  void * jresult ;
  ArActionStop *result = 0 ;
  
  result = (ArActionStop *)new ArActionStop();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_ArActionStop(void * jarg1) {
  ArActionStop *arg1 = (ArActionStop *) 0 ;
  
  arg1 = (ArActionStop *)jarg1; 
  delete arg1;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_ArActionStop_fire(void * jarg1, void * jarg2) {
  void * jresult ;
  ArActionStop *arg1 = (ArActionStop *) 0 ;
  ArActionDesired arg2 ;
  ArActionDesired *argp2 ;
  ArActionDesired *result = 0 ;
  
  arg1 = (ArActionStop *)jarg1; 
  argp2 = (ArActionDesired *)jarg2; 
  if (!argp2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Attempt to dereference null ArActionDesired", 0);
    return 0;
  }
  arg2 = *argp2; 
  result = (ArActionDesired *)(arg1)->fire(arg2);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_ArActionStop_getDesired(void * jarg1) {
  void * jresult ;
  ArActionStop *arg1 = (ArActionStop *) 0 ;
  ArActionDesired *result = 0 ;
  
  arg1 = (ArActionStop *)jarg1; 
  result = (ArActionDesired *)(arg1)->getDesired();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_ArActionTriangleDriveTo__SWIG_0(char * jarg1, double jarg2, double jarg3, double jarg4, double jarg5, double jarg6) {
  void * jresult ;
  char *arg1 = (char *) 0 ;
  double arg2 ;
  double arg3 ;
  double arg4 ;
  double arg5 ;
  double arg6 ;
  ArActionTriangleDriveTo *result = 0 ;
  
  arg1 = (char *)jarg1; 
  arg2 = (double)jarg2; 
  arg3 = (double)jarg3; 
  arg4 = (double)jarg4; 
  arg5 = (double)jarg5; 
  arg6 = (double)jarg6; 
  result = (ArActionTriangleDriveTo *)new ArActionTriangleDriveTo((char const *)arg1,arg2,arg3,arg4,arg5,arg6);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_ArActionTriangleDriveTo__SWIG_1(char * jarg1, double jarg2, double jarg3, double jarg4, double jarg5) {
  void * jresult ;
  char *arg1 = (char *) 0 ;
  double arg2 ;
  double arg3 ;
  double arg4 ;
  double arg5 ;
  ArActionTriangleDriveTo *result = 0 ;
  
  arg1 = (char *)jarg1; 
  arg2 = (double)jarg2; 
  arg3 = (double)jarg3; 
  arg4 = (double)jarg4; 
  arg5 = (double)jarg5; 
  result = (ArActionTriangleDriveTo *)new ArActionTriangleDriveTo((char const *)arg1,arg2,arg3,arg4,arg5);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_ArActionTriangleDriveTo__SWIG_2(char * jarg1, double jarg2, double jarg3, double jarg4) {
  void * jresult ;
  char *arg1 = (char *) 0 ;
  double arg2 ;
  double arg3 ;
  double arg4 ;
  ArActionTriangleDriveTo *result = 0 ;
  
  arg1 = (char *)jarg1; 
  arg2 = (double)jarg2; 
  arg3 = (double)jarg3; 
  arg4 = (double)jarg4; 
  result = (ArActionTriangleDriveTo *)new ArActionTriangleDriveTo((char const *)arg1,arg2,arg3,arg4);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_ArActionTriangleDriveTo__SWIG_3(char * jarg1, double jarg2, double jarg3) {
  void * jresult ;
  char *arg1 = (char *) 0 ;
  double arg2 ;
  double arg3 ;
  ArActionTriangleDriveTo *result = 0 ;
  
  arg1 = (char *)jarg1; 
  arg2 = (double)jarg2; 
  arg3 = (double)jarg3; 
  result = (ArActionTriangleDriveTo *)new ArActionTriangleDriveTo((char const *)arg1,arg2,arg3);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_ArActionTriangleDriveTo__SWIG_4(char * jarg1, double jarg2) {
  void * jresult ;
  char *arg1 = (char *) 0 ;
  double arg2 ;
  ArActionTriangleDriveTo *result = 0 ;
  
  arg1 = (char *)jarg1; 
  arg2 = (double)jarg2; 
  result = (ArActionTriangleDriveTo *)new ArActionTriangleDriveTo((char const *)arg1,arg2);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_ArActionTriangleDriveTo__SWIG_5(char * jarg1) {
  void * jresult ;
  char *arg1 = (char *) 0 ;
  ArActionTriangleDriveTo *result = 0 ;
  
  arg1 = (char *)jarg1; 
  result = (ArActionTriangleDriveTo *)new ArActionTriangleDriveTo((char const *)arg1);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_ArActionTriangleDriveTo__SWIG_6() {
  void * jresult ;
  ArActionTriangleDriveTo *result = 0 ;
  
  result = (ArActionTriangleDriveTo *)new ArActionTriangleDriveTo();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_ArActionTriangleDriveTo(void * jarg1) {
  ArActionTriangleDriveTo *arg1 = (ArActionTriangleDriveTo *) 0 ;
  
  arg1 = (ArActionTriangleDriveTo *)jarg1; 
  delete arg1;
}


SWIGEXPORT void SWIGSTDCALL CSharp_ArActionTriangleDriveTo_setAcquire__SWIG_0(void * jarg1, unsigned int jarg2) {
  ArActionTriangleDriveTo *arg1 = (ArActionTriangleDriveTo *) 0 ;
  bool arg2 ;
  
  arg1 = (ArActionTriangleDriveTo *)jarg1; 
  arg2 = jarg2 ? true : false; 
  (arg1)->setAcquire(arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_ArActionTriangleDriveTo_setAcquire__SWIG_1(void * jarg1) {
  ArActionTriangleDriveTo *arg1 = (ArActionTriangleDriveTo *) 0 ;
  
  arg1 = (ArActionTriangleDriveTo *)jarg1; 
  (arg1)->setAcquire();
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_ArActionTriangleDriveTo_getAcquire(void * jarg1) {
  unsigned int jresult ;
  ArActionTriangleDriveTo *arg1 = (ArActionTriangleDriveTo *) 0 ;
  bool result;
  
  arg1 = (ArActionTriangleDriveTo *)jarg1; 
  result = (bool)(arg1)->getAcquire();
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_ArActionTriangleDriveTo_setFinalDistFromVertex(void * jarg1, double jarg2) {
  ArActionTriangleDriveTo *arg1 = (ArActionTriangleDriveTo *) 0 ;
  double arg2 ;
  
  arg1 = (ArActionTriangleDriveTo *)jarg1; 
  arg2 = (double)jarg2; 
  (arg1)->setFinalDistFromVertex(arg2);
}


SWIGEXPORT double SWIGSTDCALL CSharp_ArActionTriangleDriveTo_getFinalDistFromVertex(void * jarg1) {
  double jresult ;
  ArActionTriangleDriveTo *arg1 = (ArActionTriangleDriveTo *) 0 ;
  double result;
  
  arg1 = (ArActionTriangleDriveTo *)jarg1; 
  result = (double)(arg1)->getFinalDistFromVertex();
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_ArActionTriangleDriveTo_setTriangleParams__SWIG_0(void * jarg1, double jarg2, double jarg3, double jarg4) {
  ArActionTriangleDriveTo *arg1 = (ArActionTriangleDriveTo *) 0 ;
  double arg2 ;
  double arg3 ;
  double arg4 ;
  
  arg1 = (ArActionTriangleDriveTo *)jarg1; 
  arg2 = (double)jarg2; 
  arg3 = (double)jarg3; 
  arg4 = (double)jarg4; 
  (arg1)->setTriangleParams(arg2,arg3,arg4);
}


SWIGEXPORT void SWIGSTDCALL CSharp_ArActionTriangleDriveTo_setTriangleParams__SWIG_1(void * jarg1, double jarg2, double jarg3) {
  ArActionTriangleDriveTo *arg1 = (ArActionTriangleDriveTo *) 0 ;
  double arg2 ;
  double arg3 ;
  
  arg1 = (ArActionTriangleDriveTo *)jarg1; 
  arg2 = (double)jarg2; 
  arg3 = (double)jarg3; 
  (arg1)->setTriangleParams(arg2,arg3);
}


SWIGEXPORT void SWIGSTDCALL CSharp_ArActionTriangleDriveTo_setTriangleParams__SWIG_2(void * jarg1, double jarg2) {
  ArActionTriangleDriveTo *arg1 = (ArActionTriangleDriveTo *) 0 ;
  double arg2 ;
  
  arg1 = (ArActionTriangleDriveTo *)jarg1; 
  arg2 = (double)jarg2; 
  (arg1)->setTriangleParams(arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_ArActionTriangleDriveTo_setTriangleParams__SWIG_3(void * jarg1) {
  ArActionTriangleDriveTo *arg1 = (ArActionTriangleDriveTo *) 0 ;
  
  arg1 = (ArActionTriangleDriveTo *)jarg1; 
  (arg1)->setTriangleParams();
}


SWIGEXPORT void SWIGSTDCALL CSharp_ArActionTriangleDriveTo_setParameters__SWIG_0(void * jarg1, double jarg2, double jarg3, double jarg4, double jarg5, double jarg6) {
  ArActionTriangleDriveTo *arg1 = (ArActionTriangleDriveTo *) 0 ;
  double arg2 ;
  double arg3 ;
  double arg4 ;
  double arg5 ;
  double arg6 ;
  
  arg1 = (ArActionTriangleDriveTo *)jarg1; 
  arg2 = (double)jarg2; 
  arg3 = (double)jarg3; 
  arg4 = (double)jarg4; 
  arg5 = (double)jarg5; 
  arg6 = (double)jarg6; 
  (arg1)->setParameters(arg2,arg3,arg4,arg5,arg6);
}


SWIGEXPORT void SWIGSTDCALL CSharp_ArActionTriangleDriveTo_setParameters__SWIG_1(void * jarg1, double jarg2, double jarg3, double jarg4, double jarg5) {
  ArActionTriangleDriveTo *arg1 = (ArActionTriangleDriveTo *) 0 ;
  double arg2 ;
  double arg3 ;
  double arg4 ;
  double arg5 ;
  
  arg1 = (ArActionTriangleDriveTo *)jarg1; 
  arg2 = (double)jarg2; 
  arg3 = (double)jarg3; 
  arg4 = (double)jarg4; 
  arg5 = (double)jarg5; 
  (arg1)->setParameters(arg2,arg3,arg4,arg5);
}


SWIGEXPORT void SWIGSTDCALL CSharp_ArActionTriangleDriveTo_setParameters__SWIG_2(void * jarg1, double jarg2, double jarg3, double jarg4) {
  ArActionTriangleDriveTo *arg1 = (ArActionTriangleDriveTo *) 0 ;
  double arg2 ;
  double arg3 ;
  double arg4 ;
  
  arg1 = (ArActionTriangleDriveTo *)jarg1; 
  arg2 = (double)jarg2; 
  arg3 = (double)jarg3; 
  arg4 = (double)jarg4; 
  (arg1)->setParameters(arg2,arg3,arg4);
}


SWIGEXPORT void SWIGSTDCALL CSharp_ArActionTriangleDriveTo_setParameters__SWIG_3(void * jarg1, double jarg2, double jarg3) {
  ArActionTriangleDriveTo *arg1 = (ArActionTriangleDriveTo *) 0 ;
  double arg2 ;
  double arg3 ;
  
  arg1 = (ArActionTriangleDriveTo *)jarg1; 
  arg2 = (double)jarg2; 
  arg3 = (double)jarg3; 
  (arg1)->setParameters(arg2,arg3);
}


SWIGEXPORT void SWIGSTDCALL CSharp_ArActionTriangleDriveTo_setParameters__SWIG_4(void * jarg1, double jarg2) {
  ArActionTriangleDriveTo *arg1 = (ArActionTriangleDriveTo *) 0 ;
  double arg2 ;
  
  arg1 = (ArActionTriangleDriveTo *)jarg1; 
  arg2 = (double)jarg2; 
  (arg1)->setParameters(arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_ArActionTriangleDriveTo_setParameters__SWIG_5(void * jarg1) {
  ArActionTriangleDriveTo *arg1 = (ArActionTriangleDriveTo *) 0 ;
  
  arg1 = (ArActionTriangleDriveTo *)jarg1; 
  (arg1)->setParameters();
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_ArActionTriangleDriveTo_getAdjustVertex(void * jarg1) {
  unsigned int jresult ;
  ArActionTriangleDriveTo *arg1 = (ArActionTriangleDriveTo *) 0 ;
  bool result;
  
  arg1 = (ArActionTriangleDriveTo *)jarg1; 
  result = (bool)(arg1)->getAdjustVertex();
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_ArActionTriangleDriveTo_setAdjustVertex(void * jarg1, unsigned int jarg2) {
  ArActionTriangleDriveTo *arg1 = (ArActionTriangleDriveTo *) 0 ;
  bool arg2 ;
  
  arg1 = (ArActionTriangleDriveTo *)jarg1; 
  arg2 = jarg2 ? true : false; 
  (arg1)->setAdjustVertex(arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_ArActionTriangleDriveTo_setVertexOffset(void * jarg1, int jarg2, int jarg3, double jarg4) {
  ArActionTriangleDriveTo *arg1 = (ArActionTriangleDriveTo *) 0 ;
  int arg2 ;
  int arg3 ;
  double arg4 ;
  
  arg1 = (ArActionTriangleDriveTo *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (int)jarg3; 
  arg4 = (double)jarg4; 
  (arg1)->setVertexOffset(arg2,arg3,arg4);
}


SWIGEXPORT void SWIGSTDCALL CSharp_ArActionTriangleDriveTo_setUseLegacyVertexOffset(void * jarg1, unsigned int jarg2) {
  ArActionTriangleDriveTo *arg1 = (ArActionTriangleDriveTo *) 0 ;
  bool arg2 ;
  
  arg1 = (ArActionTriangleDriveTo *)jarg1; 
  arg2 = jarg2 ? true : false; 
  (arg1)->setUseLegacyVertexOffset(arg2);
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_ArActionTriangleDriveTo_getUseLegacyVertexOffset(void * jarg1) {
  unsigned int jresult ;
  ArActionTriangleDriveTo *arg1 = (ArActionTriangleDriveTo *) 0 ;
  bool result;
  
  arg1 = (ArActionTriangleDriveTo *)jarg1; 
  result = (bool)(arg1)->getUseLegacyVertexOffset();
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_ArActionTriangleDriveTo_getGotoVertex(void * jarg1) {
  unsigned int jresult ;
  ArActionTriangleDriveTo *arg1 = (ArActionTriangleDriveTo *) 0 ;
  bool result;
  
  arg1 = (ArActionTriangleDriveTo *)jarg1; 
  result = (bool)(arg1)->getGotoVertex();
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_ArActionTriangleDriveTo_setGotoVertex(void * jarg1, unsigned int jarg2) {
  ArActionTriangleDriveTo *arg1 = (ArActionTriangleDriveTo *) 0 ;
  bool arg2 ;
  
  arg1 = (ArActionTriangleDriveTo *)jarg1; 
  arg2 = jarg2 ? true : false; 
  (arg1)->setGotoVertex(arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_ArActionTriangleDriveTo_setIgnoreTriangleDist__SWIG_0(void * jarg1, double jarg2, unsigned int jarg3) {
  ArActionTriangleDriveTo *arg1 = (ArActionTriangleDriveTo *) 0 ;
  double arg2 ;
  bool arg3 ;
  
  arg1 = (ArActionTriangleDriveTo *)jarg1; 
  arg2 = (double)jarg2; 
  arg3 = jarg3 ? true : false; 
  (arg1)->setIgnoreTriangleDist(arg2,arg3);
}


SWIGEXPORT void SWIGSTDCALL CSharp_ArActionTriangleDriveTo_setIgnoreTriangleDist__SWIG_1(void * jarg1, double jarg2) {
  ArActionTriangleDriveTo *arg1 = (ArActionTriangleDriveTo *) 0 ;
  double arg2 ;
  
  arg1 = (ArActionTriangleDriveTo *)jarg1; 
  arg2 = (double)jarg2; 
  (arg1)->setIgnoreTriangleDist(arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_ArActionTriangleDriveTo_setIgnoreTriangleDist__SWIG_2(void * jarg1) {
  ArActionTriangleDriveTo *arg1 = (ArActionTriangleDriveTo *) 0 ;
  
  arg1 = (ArActionTriangleDriveTo *)jarg1; 
  (arg1)->setIgnoreTriangleDist();
}


SWIGEXPORT double SWIGSTDCALL CSharp_ArActionTriangleDriveTo_getIgnoreTriangleDist(void * jarg1) {
  double jresult ;
  ArActionTriangleDriveTo *arg1 = (ArActionTriangleDriveTo *) 0 ;
  double result;
  
  arg1 = (ArActionTriangleDriveTo *)jarg1; 
  result = (double)(arg1)->getIgnoreTriangleDist();
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_ArActionTriangleDriveTo_getUseIgnoreInGotoVertexMode(void * jarg1) {
  unsigned int jresult ;
  ArActionTriangleDriveTo *arg1 = (ArActionTriangleDriveTo *) 0 ;
  bool result;
  
  arg1 = (ArActionTriangleDriveTo *)jarg1; 
  result = (bool)(arg1)->getUseIgnoreInGotoVertexMode();
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_ArActionTriangleDriveTo_setVertexUnseenStopMSecs__SWIG_0(void * jarg1, int jarg2) {
  ArActionTriangleDriveTo *arg1 = (ArActionTriangleDriveTo *) 0 ;
  int arg2 ;
  
  arg1 = (ArActionTriangleDriveTo *)jarg1; 
  arg2 = (int)jarg2; 
  (arg1)->setVertexUnseenStopMSecs(arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_ArActionTriangleDriveTo_setVertexUnseenStopMSecs__SWIG_1(void * jarg1) {
  ArActionTriangleDriveTo *arg1 = (ArActionTriangleDriveTo *) 0 ;
  
  arg1 = (ArActionTriangleDriveTo *)jarg1; 
  (arg1)->setVertexUnseenStopMSecs();
}


SWIGEXPORT int SWIGSTDCALL CSharp_ArActionTriangleDriveTo_getVertexUnseenStopMSecs(void * jarg1) {
  int jresult ;
  ArActionTriangleDriveTo *arg1 = (ArActionTriangleDriveTo *) 0 ;
  int result;
  
  arg1 = (ArActionTriangleDriveTo *)jarg1; 
  result = (int)(arg1)->getVertexUnseenStopMSecs();
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_ArActionTriangleDriveTo_setMaxDistBetweenLinePoints__SWIG_0(void * jarg1, int jarg2) {
  ArActionTriangleDriveTo *arg1 = (ArActionTriangleDriveTo *) 0 ;
  int arg2 ;
  
  arg1 = (ArActionTriangleDriveTo *)jarg1; 
  arg2 = (int)jarg2; 
  (arg1)->setMaxDistBetweenLinePoints(arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_ArActionTriangleDriveTo_setMaxDistBetweenLinePoints__SWIG_1(void * jarg1) {
  ArActionTriangleDriveTo *arg1 = (ArActionTriangleDriveTo *) 0 ;
  
  arg1 = (ArActionTriangleDriveTo *)jarg1; 
  (arg1)->setMaxDistBetweenLinePoints();
}


SWIGEXPORT void SWIGSTDCALL CSharp_ArActionTriangleDriveTo_setMaxLateralDist__SWIG_0(void * jarg1, int jarg2) {
  ArActionTriangleDriveTo *arg1 = (ArActionTriangleDriveTo *) 0 ;
  int arg2 ;
  
  arg1 = (ArActionTriangleDriveTo *)jarg1; 
  arg2 = (int)jarg2; 
  (arg1)->setMaxLateralDist(arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_ArActionTriangleDriveTo_setMaxLateralDist__SWIG_1(void * jarg1) {
  ArActionTriangleDriveTo *arg1 = (ArActionTriangleDriveTo *) 0 ;
  
  arg1 = (ArActionTriangleDriveTo *)jarg1; 
  (arg1)->setMaxLateralDist();
}


SWIGEXPORT void SWIGSTDCALL CSharp_ArActionTriangleDriveTo_setMaxAngleMisalignment__SWIG_0(void * jarg1, int jarg2) {
  ArActionTriangleDriveTo *arg1 = (ArActionTriangleDriveTo *) 0 ;
  int arg2 ;
  
  arg1 = (ArActionTriangleDriveTo *)jarg1; 
  arg2 = (int)jarg2; 
  (arg1)->setMaxAngleMisalignment(arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_ArActionTriangleDriveTo_setMaxAngleMisalignment__SWIG_1(void * jarg1) {
  ArActionTriangleDriveTo *arg1 = (ArActionTriangleDriveTo *) 0 ;
  
  arg1 = (ArActionTriangleDriveTo *)jarg1; 
  (arg1)->setMaxAngleMisalignment();
}


SWIGEXPORT int SWIGSTDCALL CSharp_ArActionTriangleDriveTo_getState(void * jarg1) {
  int jresult ;
  ArActionTriangleDriveTo *arg1 = (ArActionTriangleDriveTo *) 0 ;
  ArActionTriangleDriveTo::State result;
  
  arg1 = (ArActionTriangleDriveTo *)jarg1; 
  result = (ArActionTriangleDriveTo::State)(arg1)->getState();
  jresult = (int)result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_ArActionTriangleDriveTo_getVertexSeen(void * jarg1) {
  unsigned int jresult ;
  ArActionTriangleDriveTo *arg1 = (ArActionTriangleDriveTo *) 0 ;
  bool result;
  
  arg1 = (ArActionTriangleDriveTo *)jarg1; 
  result = (bool)(arg1)->getVertexSeen();
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_ArActionTriangleDriveTo_setLineFinder(void * jarg1, void * jarg2) {
  ArActionTriangleDriveTo *arg1 = (ArActionTriangleDriveTo *) 0 ;
  ArLineFinder *arg2 = (ArLineFinder *) 0 ;
  
  arg1 = (ArActionTriangleDriveTo *)jarg1; 
  arg2 = (ArLineFinder *)jarg2; 
  (arg1)->setLineFinder(arg2);
}


SWIGEXPORT void * SWIGSTDCALL CSharp_ArActionTriangleDriveTo_getLineFinder(void * jarg1) {
  void * jresult ;
  ArActionTriangleDriveTo *arg1 = (ArActionTriangleDriveTo *) 0 ;
  ArLineFinder *result = 0 ;
  
  arg1 = (ArActionTriangleDriveTo *)jarg1; 
  result = (ArLineFinder *)(arg1)->getLineFinder();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_ArActionTriangleDriveTo_setLogging__SWIG_0(void * jarg1, unsigned int jarg2) {
  ArActionTriangleDriveTo *arg1 = (ArActionTriangleDriveTo *) 0 ;
  bool arg2 ;
  
  arg1 = (ArActionTriangleDriveTo *)jarg1; 
  arg2 = jarg2 ? true : false; 
  (arg1)->setLogging(arg2);
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_ArActionTriangleDriveTo_setLogging__SWIG_1(void * jarg1) {
  unsigned int jresult ;
  ArActionTriangleDriveTo *arg1 = (ArActionTriangleDriveTo *) 0 ;
  bool result;
  
  arg1 = (ArActionTriangleDriveTo *)jarg1; 
  result = (bool)(arg1)->setLogging();
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_ArActionTriangleDriveTo_activate(void * jarg1) {
  ArActionTriangleDriveTo *arg1 = (ArActionTriangleDriveTo *) 0 ;
  
  arg1 = (ArActionTriangleDriveTo *)jarg1; 
  (arg1)->activate();
}


SWIGEXPORT void SWIGSTDCALL CSharp_ArActionTriangleDriveTo_deactivate(void * jarg1) {
  ArActionTriangleDriveTo *arg1 = (ArActionTriangleDriveTo *) 0 ;
  
  arg1 = (ArActionTriangleDriveTo *)jarg1; 
  (arg1)->deactivate();
}


SWIGEXPORT void SWIGSTDCALL CSharp_ArActionTriangleDriveTo_setRobot(void * jarg1, void * jarg2) {
  ArActionTriangleDriveTo *arg1 = (ArActionTriangleDriveTo *) 0 ;
  ArRobot *arg2 = (ArRobot *) 0 ;
  
  arg1 = (ArActionTriangleDriveTo *)jarg1; 
  arg2 = (ArRobot *)jarg2; 
  (arg1)->setRobot(arg2);
}


SWIGEXPORT void * SWIGSTDCALL CSharp_ArActionTriangleDriveTo_fire(void * jarg1, void * jarg2) {
  void * jresult ;
  ArActionTriangleDriveTo *arg1 = (ArActionTriangleDriveTo *) 0 ;
  ArActionDesired arg2 ;
  ArActionDesired *argp2 ;
  ArActionDesired *result = 0 ;
  
  arg1 = (ArActionTriangleDriveTo *)jarg1; 
  argp2 = (ArActionDesired *)jarg2; 
  if (!argp2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Attempt to dereference null ArActionDesired", 0);
    return 0;
  }
  arg2 = *argp2; 
  result = (ArActionDesired *)(arg1)->fire(arg2);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_ArActionTriangleDriveTo_getDesired(void * jarg1) {
  void * jresult ;
  ArActionTriangleDriveTo *arg1 = (ArActionTriangleDriveTo *) 0 ;
  ArActionDesired *result = 0 ;
  
  arg1 = (ArActionTriangleDriveTo *)jarg1; 
  result = (ArActionDesired *)(arg1)->getDesired();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_ArActionTurn__SWIG_0(char * jarg1, double jarg2, double jarg3, double jarg4) {
  void * jresult ;
  char *arg1 = (char *) 0 ;
  double arg2 ;
  double arg3 ;
  double arg4 ;
  ArActionTurn *result = 0 ;
  
  arg1 = (char *)jarg1; 
  arg2 = (double)jarg2; 
  arg3 = (double)jarg3; 
  arg4 = (double)jarg4; 
  result = (ArActionTurn *)new ArActionTurn((char const *)arg1,arg2,arg3,arg4);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_ArActionTurn__SWIG_1(char * jarg1, double jarg2, double jarg3) {
  void * jresult ;
  char *arg1 = (char *) 0 ;
  double arg2 ;
  double arg3 ;
  ArActionTurn *result = 0 ;
  
  arg1 = (char *)jarg1; 
  arg2 = (double)jarg2; 
  arg3 = (double)jarg3; 
  result = (ArActionTurn *)new ArActionTurn((char const *)arg1,arg2,arg3);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_ArActionTurn__SWIG_2(char * jarg1, double jarg2) {
  void * jresult ;
  char *arg1 = (char *) 0 ;
  double arg2 ;
  ArActionTurn *result = 0 ;
  
  arg1 = (char *)jarg1; 
  arg2 = (double)jarg2; 
  result = (ArActionTurn *)new ArActionTurn((char const *)arg1,arg2);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_ArActionTurn__SWIG_3(char * jarg1) {
  void * jresult ;
  char *arg1 = (char *) 0 ;
  ArActionTurn *result = 0 ;
  
  arg1 = (char *)jarg1; 
  result = (ArActionTurn *)new ArActionTurn((char const *)arg1);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_ArActionTurn__SWIG_4() {
  void * jresult ;
  ArActionTurn *result = 0 ;
  
  result = (ArActionTurn *)new ArActionTurn();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_ArActionTurn(void * jarg1) {
  ArActionTurn *arg1 = (ArActionTurn *) 0 ;
  
  arg1 = (ArActionTurn *)jarg1; 
  delete arg1;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_ArActionTurn_fire(void * jarg1, void * jarg2) {
  void * jresult ;
  ArActionTurn *arg1 = (ArActionTurn *) 0 ;
  ArActionDesired arg2 ;
  ArActionDesired *argp2 ;
  ArActionDesired *result = 0 ;
  
  arg1 = (ArActionTurn *)jarg1; 
  argp2 = (ArActionDesired *)jarg2; 
  if (!argp2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Attempt to dereference null ArActionDesired", 0);
    return 0;
  }
  arg2 = *argp2; 
  result = (ArActionDesired *)(arg1)->fire(arg2);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_ArActionTurn_getDesired(void * jarg1) {
  void * jresult ;
  ArActionTurn *arg1 = (ArActionTurn *) 0 ;
  ArActionDesired *result = 0 ;
  
  arg1 = (ArActionTurn *)jarg1; 
  result = (ArActionDesired *)(arg1)->getDesired();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_ArAnalogGyro(void * jarg1) {
  void * jresult ;
  ArRobot *arg1 = (ArRobot *) 0 ;
  ArAnalogGyro *result = 0 ;
  
  arg1 = (ArRobot *)jarg1; 
  result = (ArAnalogGyro *)new ArAnalogGyro(arg1);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_ArAnalogGyro(void * jarg1) {
  ArAnalogGyro *arg1 = (ArAnalogGyro *) 0 ;
  
  arg1 = (ArAnalogGyro *)jarg1; 
  delete arg1;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_ArAnalogGyro_isActive(void * jarg1) {
  unsigned int jresult ;
  ArAnalogGyro *arg1 = (ArAnalogGyro *) 0 ;
  bool result;
  
  arg1 = (ArAnalogGyro *)jarg1; 
  result = (bool)(arg1)->isActive();
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_ArAnalogGyro_activate(void * jarg1) {
  ArAnalogGyro *arg1 = (ArAnalogGyro *) 0 ;
  
  arg1 = (ArAnalogGyro *)jarg1; 
  (arg1)->activate();
}


SWIGEXPORT void SWIGSTDCALL CSharp_ArAnalogGyro_deactivate(void * jarg1) {
  ArAnalogGyro *arg1 = (ArAnalogGyro *) 0 ;
  
  arg1 = (ArAnalogGyro *)jarg1; 
  (arg1)->deactivate();
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_ArAnalogGyro_hasGyroOnlyMode(void * jarg1) {
  unsigned int jresult ;
  ArAnalogGyro *arg1 = (ArAnalogGyro *) 0 ;
  bool result;
  
  arg1 = (ArAnalogGyro *)jarg1; 
  result = (bool)(arg1)->hasGyroOnlyMode();
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_ArAnalogGyro_isGyroOnlyActive(void * jarg1) {
  unsigned int jresult ;
  ArAnalogGyro *arg1 = (ArAnalogGyro *) 0 ;
  bool result;
  
  arg1 = (ArAnalogGyro *)jarg1; 
  result = (bool)(arg1)->isGyroOnlyActive();
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_ArAnalogGyro_activateGyroOnly(void * jarg1) {
  ArAnalogGyro *arg1 = (ArAnalogGyro *) 0 ;
  
  arg1 = (ArAnalogGyro *)jarg1; 
  (arg1)->activateGyroOnly();
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_ArAnalogGyro_hasNoInternalData(void * jarg1) {
  unsigned int jresult ;
  ArAnalogGyro *arg1 = (ArAnalogGyro *) 0 ;
  bool result;
  
  arg1 = (ArAnalogGyro *)jarg1; 
  result = (bool)(arg1)->hasNoInternalData();
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_ArAnalogGyro_haveGottenData(void * jarg1) {
  unsigned int jresult ;
  ArAnalogGyro *arg1 = (ArAnalogGyro *) 0 ;
  bool result;
  
  arg1 = (ArAnalogGyro *)jarg1; 
  result = (bool)(arg1)->haveGottenData();
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_ArAnalogGyro_haveData(void * jarg1) {
  unsigned int jresult ;
  ArAnalogGyro *arg1 = (ArAnalogGyro *) 0 ;
  bool result;
  
  arg1 = (ArAnalogGyro *)jarg1; 
  result = (bool)(arg1)->haveData();
  jresult = result; 
  return jresult;
}


SWIGEXPORT double SWIGSTDCALL CSharp_ArAnalogGyro_getHeading(void * jarg1) {
  double jresult ;
  ArAnalogGyro *arg1 = (ArAnalogGyro *) 0 ;
  double result;
  
  arg1 = (ArAnalogGyro *)jarg1; 
  result = (double)((ArAnalogGyro const *)arg1)->getHeading();
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_ArAnalogGyro_getTemperature(void * jarg1) {
  int jresult ;
  ArAnalogGyro *arg1 = (ArAnalogGyro *) 0 ;
  int result;
  
  arg1 = (ArAnalogGyro *)jarg1; 
  result = (int)((ArAnalogGyro const *)arg1)->getTemperature();
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_ArAnalogGyro_setFilterModel(void * jarg1, double jarg2, double jarg3, double jarg4, double jarg5) {
  ArAnalogGyro *arg1 = (ArAnalogGyro *) 0 ;
  double arg2 ;
  double arg3 ;
  double arg4 ;
  double arg5 ;
  
  arg1 = (ArAnalogGyro *)jarg1; 
  arg2 = (double)jarg2; 
  arg3 = (double)jarg3; 
  arg4 = (double)jarg4; 
  arg5 = (double)jarg5; 
  (arg1)->setFilterModel(arg2,arg3,arg4,arg5);
}


SWIGEXPORT int SWIGSTDCALL CSharp_ArAnalogGyro_getPacCount(void * jarg1) {
  int jresult ;
  ArAnalogGyro *arg1 = (ArAnalogGyro *) 0 ;
  int result;
  
  arg1 = (ArAnalogGyro *)jarg1; 
  result = (int)(arg1)->getPacCount();
  jresult = result; 
  return jresult;
}


SWIGEXPORT double SWIGSTDCALL CSharp_ArAnalogGyro_getAverage(void * jarg1) {
  double jresult ;
  ArAnalogGyro *arg1 = (ArAnalogGyro *) 0 ;
  double result;
  
  arg1 = (ArAnalogGyro *)jarg1; 
  result = (double)((ArAnalogGyro const *)arg1)->getAverage();
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_ArAnalogGyro_getAverageTaken(void * jarg1) {
  void * jresult ;
  ArAnalogGyro *arg1 = (ArAnalogGyro *) 0 ;
  ArTime result;
  
  arg1 = (ArAnalogGyro *)jarg1; 
  result = ((ArAnalogGyro const *)arg1)->getAverageTaken();
  jresult = new ArTime((const ArTime &)result); 
  return jresult;
}


SWIGEXPORT double SWIGSTDCALL CSharp_ArAnalogGyro_getScalingFactor(void * jarg1) {
  double jresult ;
  ArAnalogGyro *arg1 = (ArAnalogGyro *) 0 ;
  double result;
  
  arg1 = (ArAnalogGyro *)jarg1; 
  result = (double)((ArAnalogGyro const *)arg1)->getScalingFactor();
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_ArAnalogGyro_setScalingFactor(void * jarg1, double jarg2) {
  ArAnalogGyro *arg1 = (ArAnalogGyro *) 0 ;
  double arg2 ;
  
  arg1 = (ArAnalogGyro *)jarg1; 
  arg2 = (double)jarg2; 
  (arg1)->setScalingFactor(arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_ArAnalogGyro_setLogAnomalies(void * jarg1, unsigned int jarg2) {
  ArAnalogGyro *arg1 = (ArAnalogGyro *) 0 ;
  bool arg2 ;
  
  arg1 = (ArAnalogGyro *)jarg1; 
  arg2 = jarg2 ? true : false; 
  (arg1)->setLogAnomalies(arg2);
}


SWIGEXPORT int SWIGSTDCALL CSharp_ArArg_TYPE_COUNT_get() {
  int jresult ;
  int result;
  
  result = (int)ArArg::TYPE_COUNT;
  jresult = (int)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_ArArg__SWIG_0() {
  void * jresult ;
  ArArg *result = 0 ;
  
  result = (ArArg *)new ArArg();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_ArArg__SWIG_1(char * jarg1, void * jarg2, char * jarg3, int jarg4, int jarg5) {
  void * jresult ;
  char *arg1 = (char *) 0 ;
  int *arg2 = (int *) 0 ;
  char *arg3 = (char *) 0 ;
  int arg4 ;
  int arg5 ;
  ArArg *result = 0 ;
  
  arg1 = (char *)jarg1; 
  arg2 = (int *)jarg2; 
  arg3 = (char *)jarg3; 
  arg4 = (int)jarg4; 
  arg5 = (int)jarg5; 
  result = (ArArg *)new ArArg((char const *)arg1,arg2,(char const *)arg3,arg4,arg5);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_ArArg__SWIG_2(char * jarg1, void * jarg2, char * jarg3, int jarg4) {
  void * jresult ;
  char *arg1 = (char *) 0 ;
  int *arg2 = (int *) 0 ;
  char *arg3 = (char *) 0 ;
  int arg4 ;
  ArArg *result = 0 ;
  
  arg1 = (char *)jarg1; 
  arg2 = (int *)jarg2; 
  arg3 = (char *)jarg3; 
  arg4 = (int)jarg4; 
  result = (ArArg *)new ArArg((char const *)arg1,arg2,(char const *)arg3,arg4);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_ArArg__SWIG_3(char * jarg1, void * jarg2, char * jarg3) {
  void * jresult ;
  char *arg1 = (char *) 0 ;
  int *arg2 = (int *) 0 ;
  char *arg3 = (char *) 0 ;
  ArArg *result = 0 ;
  
  arg1 = (char *)jarg1; 
  arg2 = (int *)jarg2; 
  arg3 = (char *)jarg3; 
  result = (ArArg *)new ArArg((char const *)arg1,arg2,(char const *)arg3);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_ArArg__SWIG_4(char * jarg1, void * jarg2) {
  void * jresult ;
  char *arg1 = (char *) 0 ;
  int *arg2 = (int *) 0 ;
  ArArg *result = 0 ;
  
  arg1 = (char *)jarg1; 
  arg2 = (int *)jarg2; 
  result = (ArArg *)new ArArg((char const *)arg1,arg2);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_ArArg__SWIG_5(char * jarg1, void * jarg2, char * jarg3, double jarg4, double jarg5) {
  void * jresult ;
  char *arg1 = (char *) 0 ;
  double *arg2 = (double *) 0 ;
  char *arg3 = (char *) 0 ;
  double arg4 ;
  double arg5 ;
  ArArg *result = 0 ;
  
  arg1 = (char *)jarg1; 
  arg2 = (double *)jarg2; 
  arg3 = (char *)jarg3; 
  arg4 = (double)jarg4; 
  arg5 = (double)jarg5; 
  result = (ArArg *)new ArArg((char const *)arg1,arg2,(char const *)arg3,arg4,arg5);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_ArArg__SWIG_6(char * jarg1, void * jarg2, char * jarg3, double jarg4) {
  void * jresult ;
  char *arg1 = (char *) 0 ;
  double *arg2 = (double *) 0 ;
  char *arg3 = (char *) 0 ;
  double arg4 ;
  ArArg *result = 0 ;
  
  arg1 = (char *)jarg1; 
  arg2 = (double *)jarg2; 
  arg3 = (char *)jarg3; 
  arg4 = (double)jarg4; 
  result = (ArArg *)new ArArg((char const *)arg1,arg2,(char const *)arg3,arg4);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_ArArg__SWIG_7(char * jarg1, void * jarg2, char * jarg3) {
  void * jresult ;
  char *arg1 = (char *) 0 ;
  double *arg2 = (double *) 0 ;
  char *arg3 = (char *) 0 ;
  ArArg *result = 0 ;
  
  arg1 = (char *)jarg1; 
  arg2 = (double *)jarg2; 
  arg3 = (char *)jarg3; 
  result = (ArArg *)new ArArg((char const *)arg1,arg2,(char const *)arg3);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_ArArg__SWIG_8(char * jarg1, void * jarg2) {
  void * jresult ;
  char *arg1 = (char *) 0 ;
  double *arg2 = (double *) 0 ;
  ArArg *result = 0 ;
  
  arg1 = (char *)jarg1; 
  arg2 = (double *)jarg2; 
  result = (ArArg *)new ArArg((char const *)arg1,arg2);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_ArArg__SWIG_9(char * jarg1, void * jarg2, char * jarg3) {
  void * jresult ;
  char *arg1 = (char *) 0 ;
  bool *arg2 = (bool *) 0 ;
  char *arg3 = (char *) 0 ;
  ArArg *result = 0 ;
  
  arg1 = (char *)jarg1; 
  arg2 = (bool *)jarg2; 
  arg3 = (char *)jarg3; 
  result = (ArArg *)new ArArg((char const *)arg1,arg2,(char const *)arg3);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_ArArg__SWIG_10(char * jarg1, void * jarg2) {
  void * jresult ;
  char *arg1 = (char *) 0 ;
  bool *arg2 = (bool *) 0 ;
  ArArg *result = 0 ;
  
  arg1 = (char *)jarg1; 
  arg2 = (bool *)jarg2; 
  result = (ArArg *)new ArArg((char const *)arg1,arg2);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_ArArg__SWIG_11(char * jarg1, void * jarg2, char * jarg3) {
  void * jresult ;
  char *arg1 = (char *) 0 ;
  ArPose *arg2 = (ArPose *) 0 ;
  char *arg3 = (char *) 0 ;
  ArArg *result = 0 ;
  
  arg1 = (char *)jarg1; 
  arg2 = (ArPose *)jarg2; 
  arg3 = (char *)jarg3; 
  result = (ArArg *)new ArArg((char const *)arg1,arg2,(char const *)arg3);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_ArArg__SWIG_12(char * jarg1, void * jarg2) {
  void * jresult ;
  char *arg1 = (char *) 0 ;
  ArPose *arg2 = (ArPose *) 0 ;
  ArArg *result = 0 ;
  
  arg1 = (char *)jarg1; 
  arg2 = (ArPose *)jarg2; 
  result = (ArArg *)new ArArg((char const *)arg1,arg2);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_ArArg__SWIG_13(char * jarg1, char * jarg2, char * jarg3, unsigned long jarg4) {
  void * jresult ;
  char *arg1 = (char *) 0 ;
  char *arg2 = (char *) 0 ;
  char *arg3 = (char *) 0 ;
  size_t arg4 ;
  ArArg *result = 0 ;
  
  arg1 = (char *)jarg1; 
  arg2 = (char *)jarg2; 
  arg3 = (char *)jarg3; 
  arg4 = (size_t)jarg4; 
  result = (ArArg *)new ArArg((char const *)arg1,arg2,(char const *)arg3,arg4);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_ArArg__SWIG_14(char * jarg1, void * jarg2, void * jarg3, char * jarg4) {
  void * jresult ;
  char *arg1 = (char *) 0 ;
  ArRetFunctor1< bool,ArArgumentBuilder * > *arg2 = (ArRetFunctor1< bool,ArArgumentBuilder * > *) 0 ;
  ArRetFunctor< std::list< ArArgumentBuilder * > const * > *arg3 = (ArRetFunctor< std::list< ArArgumentBuilder * > const * > *) 0 ;
  char *arg4 = (char *) 0 ;
  ArArg *result = 0 ;
  
  arg1 = (char *)jarg1; 
  arg2 = (ArRetFunctor1< bool,ArArgumentBuilder * > *)jarg2; 
  arg3 = (ArRetFunctor< std::list< ArArgumentBuilder * > const * > *)jarg3; 
  arg4 = (char *)jarg4; 
  result = (ArArg *)new ArArg((char const *)arg1,arg2,arg3,(char const *)arg4);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_ArArg__SWIG_15(char * jarg1) {
  void * jresult ;
  char *arg1 = (char *) 0 ;
  ArArg *result = 0 ;
  
  arg1 = (char *)jarg1; 
  result = (ArArg *)new ArArg((char const *)arg1);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_ArArg__SWIG_16(void * jarg1) {
  void * jresult ;
  ArArg *arg1 = 0 ;
  ArArg *result = 0 ;
  
  arg1 = (ArArg *)jarg1;
  if (!arg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "ArArg const & type is null", 0);
    return 0;
  } 
  result = (ArArg *)new ArArg((ArArg const &)*arg1);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_ArArg(void * jarg1) {
  ArArg *arg1 = (ArArg *) 0 ;
  
  arg1 = (ArArg *)jarg1; 
  delete arg1;
}


SWIGEXPORT int SWIGSTDCALL CSharp_ArArg_getType(void * jarg1) {
  int jresult ;
  ArArg *arg1 = (ArArg *) 0 ;
  ArArg::Type result;
  
  arg1 = (ArArg *)jarg1; 
  result = (ArArg::Type)((ArArg const *)arg1)->getType();
  jresult = (int)result; 
  return jresult;
}


SWIGEXPORT char * SWIGSTDCALL CSharp_ArArg_getName(void * jarg1) {
  char * jresult ;
  ArArg *arg1 = (ArArg *) 0 ;
  char *result = 0 ;
  
  arg1 = (ArArg *)jarg1; 
  result = (char *)((ArArg const *)arg1)->getName();
  jresult = SWIG_csharp_string_callback((const char *)result); 
  return jresult;
}


SWIGEXPORT char * SWIGSTDCALL CSharp_ArArg_getDescription(void * jarg1) {
  char * jresult ;
  ArArg *arg1 = (ArArg *) 0 ;
  char *result = 0 ;
  
  arg1 = (ArArg *)jarg1; 
  result = (char *)((ArArg const *)arg1)->getDescription();
  jresult = SWIG_csharp_string_callback((const char *)result); 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_ArArg_setInt(void * jarg1, int jarg2) {
  unsigned int jresult ;
  ArArg *arg1 = (ArArg *) 0 ;
  int arg2 ;
  bool result;
  
  arg1 = (ArArg *)jarg1; 
  arg2 = (int)jarg2; 
  result = (bool)(arg1)->setInt(arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_ArArg_setDouble(void * jarg1, double jarg2) {
  unsigned int jresult ;
  ArArg *arg1 = (ArArg *) 0 ;
  double arg2 ;
  bool result;
  
  arg1 = (ArArg *)jarg1; 
  arg2 = (double)jarg2; 
  result = (bool)(arg1)->setDouble(arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_ArArg_setBool(void * jarg1, unsigned int jarg2) {
  unsigned int jresult ;
  ArArg *arg1 = (ArArg *) 0 ;
  bool arg2 ;
  bool result;
  
  arg1 = (ArArg *)jarg1; 
  arg2 = jarg2 ? true : false; 
  result = (bool)(arg1)->setBool(arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_ArArg_setPose(void * jarg1, void * jarg2) {
  unsigned int jresult ;
  ArArg *arg1 = (ArArg *) 0 ;
  ArPose arg2 ;
  ArPose *argp2 ;
  bool result;
  
  arg1 = (ArArg *)jarg1; 
  argp2 = (ArPose *)jarg2; 
  if (!argp2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Attempt to dereference null ArPose", 0);
    return 0;
  }
  arg2 = *argp2; 
  result = (bool)(arg1)->setPose(arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_ArArg_setString(void * jarg1, char * jarg2) {
  unsigned int jresult ;
  ArArg *arg1 = (ArArg *) 0 ;
  char *arg2 = (char *) 0 ;
  bool result;
  
  arg1 = (ArArg *)jarg1; 
  arg2 = (char *)jarg2; 
  result = (bool)(arg1)->setString((char const *)arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_ArArg_setArgWithFunctor(void * jarg1, void * jarg2) {
  unsigned int jresult ;
  ArArg *arg1 = (ArArg *) 0 ;
  ArArgumentBuilder *arg2 = (ArArgumentBuilder *) 0 ;
  bool result;
  
  arg1 = (ArArg *)jarg1; 
  arg2 = (ArArgumentBuilder *)jarg2; 
  result = (bool)(arg1)->setArgWithFunctor(arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_ArArg_getInt(void * jarg1) {
  int jresult ;
  ArArg *arg1 = (ArArg *) 0 ;
  int result;
  
  arg1 = (ArArg *)jarg1; 
  result = (int)((ArArg const *)arg1)->getInt();
  jresult = result; 
  return jresult;
}


SWIGEXPORT double SWIGSTDCALL CSharp_ArArg_getDouble(void * jarg1) {
  double jresult ;
  ArArg *arg1 = (ArArg *) 0 ;
  double result;
  
  arg1 = (ArArg *)jarg1; 
  result = (double)((ArArg const *)arg1)->getDouble();
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_ArArg_getBool(void * jarg1) {
  unsigned int jresult ;
  ArArg *arg1 = (ArArg *) 0 ;
  bool result;
  
  arg1 = (ArArg *)jarg1; 
  result = (bool)((ArArg const *)arg1)->getBool();
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_ArArg_getPose(void * jarg1) {
  void * jresult ;
  ArArg *arg1 = (ArArg *) 0 ;
  ArPose result;
  
  arg1 = (ArArg *)jarg1; 
  result = ((ArArg const *)arg1)->getPose();
  jresult = new ArPose((const ArPose &)result); 
  return jresult;
}


SWIGEXPORT char * SWIGSTDCALL CSharp_ArArg_getString(void * jarg1) {
  char * jresult ;
  ArArg *arg1 = (ArArg *) 0 ;
  char *result = 0 ;
  
  arg1 = (ArArg *)jarg1; 
  result = (char *)((ArArg const *)arg1)->getString();
  jresult = SWIG_csharp_string_callback((const char *)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_ArArg_getArgsWithFunctor(void * jarg1) {
  void * jresult ;
  ArArg *arg1 = (ArArg *) 0 ;
  std::list< ArArgumentBuilder * > *result = 0 ;
  
  arg1 = (ArArg *)jarg1; 
  result = (std::list< ArArgumentBuilder * > *)((ArArg const *)arg1)->getArgsWithFunctor();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_ArArg_log(void * jarg1) {
  ArArg *arg1 = (ArArg *) 0 ;
  
  arg1 = (ArArg *)jarg1; 
  ((ArArg const *)arg1)->log();
}


SWIGEXPORT int SWIGSTDCALL CSharp_ArArg_getMinInt(void * jarg1) {
  int jresult ;
  ArArg *arg1 = (ArArg *) 0 ;
  int result;
  
  arg1 = (ArArg *)jarg1; 
  result = (int)((ArArg const *)arg1)->getMinInt();
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_ArArg_getMaxInt(void * jarg1) {
  int jresult ;
  ArArg *arg1 = (ArArg *) 0 ;
  int result;
  
  arg1 = (ArArg *)jarg1; 
  result = (int)((ArArg const *)arg1)->getMaxInt();
  jresult = result; 
  return jresult;
}


SWIGEXPORT double SWIGSTDCALL CSharp_ArArg_getMinDouble(void * jarg1) {
  double jresult ;
  ArArg *arg1 = (ArArg *) 0 ;
  double result;
  
  arg1 = (ArArg *)jarg1; 
  result = (double)((ArArg const *)arg1)->getMinDouble();
  jresult = result; 
  return jresult;
}


SWIGEXPORT double SWIGSTDCALL CSharp_ArArg_getMaxDouble(void * jarg1) {
  double jresult ;
  ArArg *arg1 = (ArArg *) 0 ;
  double result;
  
  arg1 = (ArArg *)jarg1; 
  result = (double)((ArArg const *)arg1)->getMaxDouble();
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_ArArg_getConfigPrioritySet(void * jarg1) {
  unsigned int jresult ;
  ArArg *arg1 = (ArArg *) 0 ;
  bool result;
  
  arg1 = (ArArg *)jarg1; 
  result = (bool)((ArArg const *)arg1)->getConfigPrioritySet();
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_ArArg_getConfigPriority(void * jarg1) {
  int jresult ;
  ArArg *arg1 = (ArArg *) 0 ;
  ArPriority::Priority result;
  
  arg1 = (ArArg *)jarg1; 
  result = (ArPriority::Priority)((ArArg const *)arg1)->getConfigPriority();
  jresult = (int)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_ArArg_setConfigPriority(void * jarg1, int jarg2) {
  ArArg *arg1 = (ArArg *) 0 ;
  ArPriority::Priority arg2 ;
  
  arg1 = (ArArg *)jarg1; 
  arg2 = (ArPriority::Priority)jarg2; 
  (arg1)->setConfigPriority(arg2);
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_ArArgumentBuilder__SWIG_0(unsigned long jarg1, char jarg2, unsigned int jarg3, unsigned int jarg4) {
  void * jresult ;
  size_t arg1 ;
  char arg2 ;
  bool arg3 ;
  bool arg4 ;
  ArArgumentBuilder *result = 0 ;
  
  arg1 = (size_t)jarg1; 
  arg2 = (char)jarg2; 
  arg3 = jarg3 ? true : false; 
  arg4 = jarg4 ? true : false; 
  result = (ArArgumentBuilder *)new ArArgumentBuilder(arg1,arg2,arg3,arg4);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_ArArgumentBuilder__SWIG_1(unsigned long jarg1, char jarg2, unsigned int jarg3) {
  void * jresult ;
  size_t arg1 ;
  char arg2 ;
  bool arg3 ;
  ArArgumentBuilder *result = 0 ;
  
  arg1 = (size_t)jarg1; 
  arg2 = (char)jarg2; 
  arg3 = jarg3 ? true : false; 
  result = (ArArgumentBuilder *)new ArArgumentBuilder(arg1,arg2,arg3);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_ArArgumentBuilder__SWIG_2(unsigned long jarg1, char jarg2) {
  void * jresult ;
  size_t arg1 ;
  char arg2 ;
  ArArgumentBuilder *result = 0 ;
  
  arg1 = (size_t)jarg1; 
  arg2 = (char)jarg2; 
  result = (ArArgumentBuilder *)new ArArgumentBuilder(arg1,arg2);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_ArArgumentBuilder__SWIG_3(unsigned long jarg1) {
  void * jresult ;
  size_t arg1 ;
  ArArgumentBuilder *result = 0 ;
  
  arg1 = (size_t)jarg1; 
  result = (ArArgumentBuilder *)new ArArgumentBuilder(arg1);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_ArArgumentBuilder__SWIG_4() {
  void * jresult ;
  ArArgumentBuilder *result = 0 ;
  
  result = (ArArgumentBuilder *)new ArArgumentBuilder();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_ArArgumentBuilder__SWIG_5(void * jarg1) {
  void * jresult ;
  ArArgumentBuilder *arg1 = 0 ;
  ArArgumentBuilder *result = 0 ;
  
  arg1 = (ArArgumentBuilder *)jarg1;
  if (!arg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "ArArgumentBuilder const & type is null", 0);
    return 0;
  } 
  result = (ArArgumentBuilder *)new ArArgumentBuilder((ArArgumentBuilder const &)*arg1);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_ArArgumentBuilder(void * jarg1) {
  ArArgumentBuilder *arg1 = (ArArgumentBuilder *) 0 ;
  
  arg1 = (ArArgumentBuilder *)jarg1; 
  delete arg1;
}


SWIGEXPORT void SWIGSTDCALL CSharp_ArArgumentBuilder_addPlain__SWIG_0(void * jarg1, char * jarg2, int jarg3) {
  ArArgumentBuilder *arg1 = (ArArgumentBuilder *) 0 ;
  char *arg2 = (char *) 0 ;
  int arg3 ;
  
  arg1 = (ArArgumentBuilder *)jarg1; 
  arg2 = (char *)jarg2; 
  arg3 = (int)jarg3; 
  (arg1)->addPlain((char const *)arg2,arg3);
}


SWIGEXPORT void SWIGSTDCALL CSharp_ArArgumentBuilder_addPlain__SWIG_1(void * jarg1, char * jarg2) {
  ArArgumentBuilder *arg1 = (ArArgumentBuilder *) 0 ;
  char *arg2 = (char *) 0 ;
  
  arg1 = (ArArgumentBuilder *)jarg1; 
  arg2 = (char *)jarg2; 
  (arg1)->addPlain((char const *)arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_ArArgumentBuilder_addPlainAsIs__SWIG_0(void * jarg1, char * jarg2, int jarg3) {
  ArArgumentBuilder *arg1 = (ArArgumentBuilder *) 0 ;
  char *arg2 = (char *) 0 ;
  int arg3 ;
  
  arg1 = (ArArgumentBuilder *)jarg1; 
  arg2 = (char *)jarg2; 
  arg3 = (int)jarg3; 
  (arg1)->addPlainAsIs((char const *)arg2,arg3);
}


SWIGEXPORT void SWIGSTDCALL CSharp_ArArgumentBuilder_addPlainAsIs__SWIG_1(void * jarg1, char * jarg2) {
  ArArgumentBuilder *arg1 = (ArArgumentBuilder *) 0 ;
  char *arg2 = (char *) 0 ;
  
  arg1 = (ArArgumentBuilder *)jarg1; 
  arg2 = (char *)jarg2; 
  (arg1)->addPlainAsIs((char const *)arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_ArArgumentBuilder_addStrings__SWIG_0(void * jarg1, void * jarg2, int jarg3, int jarg4) {
  ArArgumentBuilder *arg1 = (ArArgumentBuilder *) 0 ;
  char **arg2 = (char **) 0 ;
  int arg3 ;
  int arg4 ;
  
  arg1 = (ArArgumentBuilder *)jarg1; 
  arg2 = (char **)jarg2; 
  arg3 = (int)jarg3; 
  arg4 = (int)jarg4; 
  (arg1)->addStrings(arg2,arg3,arg4);
}


SWIGEXPORT void SWIGSTDCALL CSharp_ArArgumentBuilder_addStrings__SWIG_1(void * jarg1, void * jarg2, int jarg3) {
  ArArgumentBuilder *arg1 = (ArArgumentBuilder *) 0 ;
  char **arg2 = (char **) 0 ;
  int arg3 ;
  
  arg1 = (ArArgumentBuilder *)jarg1; 
  arg2 = (char **)jarg2; 
  arg3 = (int)jarg3; 
  (arg1)->addStrings(arg2,arg3);
}


SWIGEXPORT void SWIGSTDCALL CSharp_ArArgumentBuilder_addStrings__SWIG_2(void * jarg1, int jarg2, void * jarg3, int jarg4) {
  ArArgumentBuilder *arg1 = (ArArgumentBuilder *) 0 ;
  int arg2 ;
  char **arg3 = (char **) 0 ;
  int arg4 ;
  
  arg1 = (ArArgumentBuilder *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (char **)jarg3; 
  arg4 = (int)jarg4; 
  (arg1)->addStrings(arg2,arg3,arg4);
}


SWIGEXPORT void SWIGSTDCALL CSharp_ArArgumentBuilder_addStrings__SWIG_3(void * jarg1, int jarg2, void * jarg3) {
  ArArgumentBuilder *arg1 = (ArArgumentBuilder *) 0 ;
  int arg2 ;
  char **arg3 = (char **) 0 ;
  
  arg1 = (ArArgumentBuilder *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (char **)jarg3; 
  (arg1)->addStrings(arg2,arg3);
}


SWIGEXPORT void SWIGSTDCALL CSharp_ArArgumentBuilder_addStringsAsIs__SWIG_0(void * jarg1, int jarg2, void * jarg3, int jarg4) {
  ArArgumentBuilder *arg1 = (ArArgumentBuilder *) 0 ;
  int arg2 ;
  char **arg3 = (char **) 0 ;
  int arg4 ;
  
  arg1 = (ArArgumentBuilder *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (char **)jarg3; 
  arg4 = (int)jarg4; 
  (arg1)->addStringsAsIs(arg2,arg3,arg4);
}


SWIGEXPORT void SWIGSTDCALL CSharp_ArArgumentBuilder_addStringsAsIs__SWIG_1(void * jarg1, int jarg2, void * jarg3) {
  ArArgumentBuilder *arg1 = (ArArgumentBuilder *) 0 ;
  int arg2 ;
  char **arg3 = (char **) 0 ;
  
  arg1 = (ArArgumentBuilder *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (char **)jarg3; 
  (arg1)->addStringsAsIs(arg2,arg3);
}


SWIGEXPORT char * SWIGSTDCALL CSharp_ArArgumentBuilder_getFullString(void * jarg1) {
  char * jresult ;
  ArArgumentBuilder *arg1 = (ArArgumentBuilder *) 0 ;
  char *result = 0 ;
  
  arg1 = (ArArgumentBuilder *)jarg1; 
  result = (char *)((ArArgumentBuilder const *)arg1)->getFullString();
  jresult = SWIG_csharp_string_callback((const char *)result); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_ArArgumentBuilder_setFullString(void * jarg1, char * jarg2) {
  ArArgumentBuilder *arg1 = (ArArgumentBuilder *) 0 ;
  char *arg2 = (char *) 0 ;
  
  arg1 = (ArArgumentBuilder *)jarg1; 
  arg2 = (char *)jarg2; 
  (arg1)->setFullString((char const *)arg2);
}


SWIGEXPORT char * SWIGSTDCALL CSharp_ArArgumentBuilder_getExtraString(void * jarg1) {
  char * jresult ;
  ArArgumentBuilder *arg1 = (ArArgumentBuilder *) 0 ;
  char *result = 0 ;
  
  arg1 = (ArArgumentBuilder *)jarg1; 
  result = (char *)((ArArgumentBuilder const *)arg1)->getExtraString();
  jresult = SWIG_csharp_string_callback((const char *)result); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_ArArgumentBuilder_setExtraString(void * jarg1, char * jarg2) {
  ArArgumentBuilder *arg1 = (ArArgumentBuilder *) 0 ;
  char *arg2 = (char *) 0 ;
  
  arg1 = (ArArgumentBuilder *)jarg1; 
  arg2 = (char *)jarg2; 
  (arg1)->setExtraString((char const *)arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_ArArgumentBuilder_log(void * jarg1) {
  ArArgumentBuilder *arg1 = (ArArgumentBuilder *) 0 ;
  
  arg1 = (ArArgumentBuilder *)jarg1; 
  ((ArArgumentBuilder const *)arg1)->log();
}


SWIGEXPORT unsigned long SWIGSTDCALL CSharp_ArArgumentBuilder_getArgc(void * jarg1) {
  unsigned long jresult ;
  ArArgumentBuilder *arg1 = (ArArgumentBuilder *) 0 ;
  size_t result;
  
  arg1 = (ArArgumentBuilder *)jarg1; 
  result = ((ArArgumentBuilder const *)arg1)->getArgc();
  jresult = (unsigned long)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_ArArgumentBuilder_getArgv(void * jarg1) {
  void * jresult ;
  ArArgumentBuilder *arg1 = (ArArgumentBuilder *) 0 ;
  char **result = 0 ;
  
  arg1 = (ArArgumentBuilder *)jarg1; 
  result = (char **)((ArArgumentBuilder const *)arg1)->getArgv();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT char * SWIGSTDCALL CSharp_ArArgumentBuilder_getArg(void * jarg1, unsigned long jarg2) {
  char * jresult ;
  ArArgumentBuilder *arg1 = (ArArgumentBuilder *) 0 ;
  size_t arg2 ;
  char *result = 0 ;
  
  arg1 = (ArArgumentBuilder *)jarg1; 
  arg2 = (size_t)jarg2; 
  result = (char *)((ArArgumentBuilder const *)arg1)->getArg(arg2);
  jresult = SWIG_csharp_string_callback((const char *)result); 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_ArArgumentBuilder_isArgBool(void * jarg1, unsigned long jarg2) {
  unsigned int jresult ;
  ArArgumentBuilder *arg1 = (ArArgumentBuilder *) 0 ;
  size_t arg2 ;
  bool result;
  
  arg1 = (ArArgumentBuilder *)jarg1; 
  arg2 = (size_t)jarg2; 
  result = (bool)((ArArgumentBuilder const *)arg1)->isArgBool(arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_ArArgumentBuilder_getArgBool__SWIG_0(void * jarg1, unsigned long jarg2, void * jarg3) {
  unsigned int jresult ;
  ArArgumentBuilder *arg1 = (ArArgumentBuilder *) 0 ;
  size_t arg2 ;
  bool *arg3 = (bool *) 0 ;
  bool result;
  
  arg1 = (ArArgumentBuilder *)jarg1; 
  arg2 = (size_t)jarg2; 
  arg3 = (bool *)jarg3; 
  result = (bool)((ArArgumentBuilder const *)arg1)->getArgBool(arg2,arg3);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_ArArgumentBuilder_getArgBool__SWIG_1(void * jarg1, unsigned long jarg2) {
  unsigned int jresult ;
  ArArgumentBuilder *arg1 = (ArArgumentBuilder *) 0 ;
  size_t arg2 ;
  bool result;
  
  arg1 = (ArArgumentBuilder *)jarg1; 
  arg2 = (size_t)jarg2; 
  result = (bool)((ArArgumentBuilder const *)arg1)->getArgBool(arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_ArArgumentBuilder_isArgInt__SWIG_0(void * jarg1, unsigned long jarg2, unsigned int jarg3) {
  unsigned int jresult ;
  ArArgumentBuilder *arg1 = (ArArgumentBuilder *) 0 ;
  size_t arg2 ;
  bool arg3 ;
  bool result;
  
  arg1 = (ArArgumentBuilder *)jarg1; 
  arg2 = (size_t)jarg2; 
  arg3 = jarg3 ? true : false; 
  result = (bool)((ArArgumentBuilder const *)arg1)->isArgInt(arg2,arg3);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_ArArgumentBuilder_isArgInt__SWIG_1(void * jarg1, unsigned long jarg2) {
  unsigned int jresult ;
  ArArgumentBuilder *arg1 = (ArArgumentBuilder *) 0 ;
  size_t arg2 ;
  bool result;
  
  arg1 = (ArArgumentBuilder *)jarg1; 
  arg2 = (size_t)jarg2; 
  result = (bool)((ArArgumentBuilder const *)arg1)->isArgInt(arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_ArArgumentBuilder_getArgInt__SWIG_0(void * jarg1, unsigned long jarg2, void * jarg3, unsigned int jarg4) {
  int jresult ;
  ArArgumentBuilder *arg1 = (ArArgumentBuilder *) 0 ;
  size_t arg2 ;
  bool *arg3 = (bool *) 0 ;
  bool arg4 ;
  int result;
  
  arg1 = (ArArgumentBuilder *)jarg1; 
  arg2 = (size_t)jarg2; 
  arg3 = (bool *)jarg3; 
  arg4 = jarg4 ? true : false; 
  result = (int)((ArArgumentBuilder const *)arg1)->getArgInt(arg2,arg3,arg4);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_ArArgumentBuilder_getArgInt__SWIG_1(void * jarg1, unsigned long jarg2, void * jarg3) {
  int jresult ;
  ArArgumentBuilder *arg1 = (ArArgumentBuilder *) 0 ;
  size_t arg2 ;
  bool *arg3 = (bool *) 0 ;
  int result;
  
  arg1 = (ArArgumentBuilder *)jarg1; 
  arg2 = (size_t)jarg2; 
  arg3 = (bool *)jarg3; 
  result = (int)((ArArgumentBuilder const *)arg1)->getArgInt(arg2,arg3);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_ArArgumentBuilder_getArgInt__SWIG_2(void * jarg1, unsigned long jarg2) {
  int jresult ;
  ArArgumentBuilder *arg1 = (ArArgumentBuilder *) 0 ;
  size_t arg2 ;
  int result;
  
  arg1 = (ArArgumentBuilder *)jarg1; 
  arg2 = (size_t)jarg2; 
  result = (int)((ArArgumentBuilder const *)arg1)->getArgInt(arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_ArArgumentBuilder_isArgLongLongInt(void * jarg1, unsigned long jarg2) {
  unsigned int jresult ;
  ArArgumentBuilder *arg1 = (ArArgumentBuilder *) 0 ;
  size_t arg2 ;
  bool result;
  
  arg1 = (ArArgumentBuilder *)jarg1; 
  arg2 = (size_t)jarg2; 
  result = (bool)((ArArgumentBuilder const *)arg1)->isArgLongLongInt(arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_ArArgumentBuilder_getArgLongLongInt__SWIG_0(void * jarg1, unsigned long jarg2, void * jarg3) {
  int jresult ;
  ArArgumentBuilder *arg1 = (ArArgumentBuilder *) 0 ;
  size_t arg2 ;
  bool *arg3 = (bool *) 0 ;
  int result;
  
  arg1 = (ArArgumentBuilder *)jarg1; 
  arg2 = (size_t)jarg2; 
  arg3 = (bool *)jarg3; 
  result = (int)((ArArgumentBuilder const *)arg1)->getArgLongLongInt(arg2,arg3);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_ArArgumentBuilder_getArgLongLongInt__SWIG_1(void * jarg1, unsigned long jarg2) {
  int jresult ;
  ArArgumentBuilder *arg1 = (ArArgumentBuilder *) 0 ;
  size_t arg2 ;
  int result;
  
  arg1 = (ArArgumentBuilder *)jarg1; 
  arg2 = (size_t)jarg2; 
  result = (int)((ArArgumentBuilder const *)arg1)->getArgLongLongInt(arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_ArArgumentBuilder_isArgDouble(void * jarg1, unsigned long jarg2) {
  unsigned int jresult ;
  ArArgumentBuilder *arg1 = (ArArgumentBuilder *) 0 ;
  size_t arg2 ;
  bool result;
  
  arg1 = (ArArgumentBuilder *)jarg1; 
  arg2 = (size_t)jarg2; 
  result = (bool)((ArArgumentBuilder const *)arg1)->isArgDouble(arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT double SWIGSTDCALL CSharp_ArArgumentBuilder_getArgDouble__SWIG_0(void * jarg1, unsigned long jarg2, void * jarg3) {
  double jresult ;
  ArArgumentBuilder *arg1 = (ArArgumentBuilder *) 0 ;
  size_t arg2 ;
  bool *arg3 = (bool *) 0 ;
  double result;
  
  arg1 = (ArArgumentBuilder *)jarg1; 
  arg2 = (size_t)jarg2; 
  arg3 = (bool *)jarg3; 
  result = (double)((ArArgumentBuilder const *)arg1)->getArgDouble(arg2,arg3);
  jresult = result; 
  return jresult;
}


SWIGEXPORT double SWIGSTDCALL CSharp_ArArgumentBuilder_getArgDouble__SWIG_1(void * jarg1, unsigned long jarg2) {
  double jresult ;
  ArArgumentBuilder *arg1 = (ArArgumentBuilder *) 0 ;
  size_t arg2 ;
  double result;
  
  arg1 = (ArArgumentBuilder *)jarg1; 
  arg2 = (size_t)jarg2; 
  result = (double)((ArArgumentBuilder const *)arg1)->getArgDouble(arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_ArArgumentBuilder_removeArg__SWIG_0(void * jarg1, unsigned long jarg2, unsigned int jarg3) {
  ArArgumentBuilder *arg1 = (ArArgumentBuilder *) 0 ;
  size_t arg2 ;
  bool arg3 ;
  
  arg1 = (ArArgumentBuilder *)jarg1; 
  arg2 = (size_t)jarg2; 
  arg3 = jarg3 ? true : false; 
  (arg1)->removeArg(arg2,arg3);
}


SWIGEXPORT void SWIGSTDCALL CSharp_ArArgumentBuilder_removeArg__SWIG_1(void * jarg1, unsigned long jarg2) {
  ArArgumentBuilder *arg1 = (ArArgumentBuilder *) 0 ;
  size_t arg2 ;
  
  arg1 = (ArArgumentBuilder *)jarg1; 
  arg2 = (size_t)jarg2; 
  (arg1)->removeArg(arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_ArArgumentBuilder_compressQuoted__SWIG_0(void * jarg1, unsigned int jarg2) {
  ArArgumentBuilder *arg1 = (ArArgumentBuilder *) 0 ;
  bool arg2 ;
  
  arg1 = (ArArgumentBuilder *)jarg1; 
  arg2 = jarg2 ? true : false; 
  (arg1)->compressQuoted(arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_ArArgumentBuilder_compressQuoted__SWIG_1(void * jarg1) {
  ArArgumentBuilder *arg1 = (ArArgumentBuilder *) 0 ;
  
  arg1 = (ArArgumentBuilder *)jarg1; 
  (arg1)->compressQuoted();
}


SWIGEXPORT void SWIGSTDCALL CSharp_ArArgumentBuilder_setQuiet(void * jarg1, unsigned int jarg2) {
  ArArgumentBuilder *arg1 = (ArArgumentBuilder *) 0 ;
  bool arg2 ;
  
  arg1 = (ArArgumentBuilder *)jarg1; 
  arg2 = jarg2 ? true : false; 
  (arg1)->setQuiet(arg2);
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_ArArgumentBuilderCompareOp() {
  void * jresult ;
  ArArgumentBuilderCompareOp *result = 0 ;
  
  result = (ArArgumentBuilderCompareOp *)new ArArgumentBuilderCompareOp();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_ArArgumentBuilderCompareOp(void * jarg1) {
  ArArgumentBuilderCompareOp *arg1 = (ArArgumentBuilderCompareOp *) 0 ;
  
  arg1 = (ArArgumentBuilderCompareOp *)jarg1; 
  delete arg1;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_ArArgumentParser__SWIG_0(void * jarg1, void * jarg2) {
  void * jresult ;
  int *arg1 = (int *) 0 ;
  char **arg2 = (char **) 0 ;
  ArArgumentParser *result = 0 ;
  
  arg1 = (int *)jarg1; 
  arg2 = (char **)jarg2; 
  result = (ArArgumentParser *)new ArArgumentParser(arg1,arg2);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_ArArgumentParser__SWIG_1(void * jarg1) {
  void * jresult ;
  ArArgumentBuilder *arg1 = (ArArgumentBuilder *) 0 ;
  ArArgumentParser *result = 0 ;
  
  arg1 = (ArArgumentBuilder *)jarg1; 
  result = (ArArgumentParser *)new ArArgumentParser(arg1);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_ArArgumentParser(void * jarg1) {
  ArArgumentParser *arg1 = (ArArgumentParser *) 0 ;
  
  arg1 = (ArArgumentParser *)jarg1; 
  delete arg1;
}


SWIGEXPORT void SWIGSTDCALL CSharp_ArArgumentParser_setWasReallySetOnlyTrue(void * jarg1, unsigned int jarg2) {
  ArArgumentParser *arg1 = (ArArgumentParser *) 0 ;
  bool arg2 ;
  
  arg1 = (ArArgumentParser *)jarg1; 
  arg2 = jarg2 ? true : false; 
  (arg1)->setWasReallySetOnlyTrue(arg2);
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_ArArgumentParser_getWasReallySetOnlyTrue(void * jarg1) {
  unsigned int jresult ;
  ArArgumentParser *arg1 = (ArArgumentParser *) 0 ;
  bool result;
  
  arg1 = (ArArgumentParser *)jarg1; 
  result = (bool)(arg1)->getWasReallySetOnlyTrue();
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_ArArgumentParser_checkArgument(void * jarg1, char * jarg2) {
  unsigned int jresult ;
  ArArgumentParser *arg1 = (ArArgumentParser *) 0 ;
  char *arg2 = (char *) 0 ;
  bool result;
  
  arg1 = (ArArgumentParser *)jarg1; 
  arg2 = (char *)jarg2; 
  result = (bool)(arg1)->checkArgument((char const *)arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT char * SWIGSTDCALL CSharp_ArArgumentParser_checkParameterArgument__SWIG_0(void * jarg1, char * jarg2, unsigned int jarg3) {
  char * jresult ;
  ArArgumentParser *arg1 = (ArArgumentParser *) 0 ;
  char *arg2 = (char *) 0 ;
  bool arg3 ;
  char *result = 0 ;
  
  arg1 = (ArArgumentParser *)jarg1; 
  arg2 = (char *)jarg2; 
  arg3 = jarg3 ? true : false; 
  result = (char *)(arg1)->checkParameterArgument((char const *)arg2,arg3);
  jresult = SWIG_csharp_string_callback((const char *)result); 
  return jresult;
}


SWIGEXPORT char * SWIGSTDCALL CSharp_ArArgumentParser_checkParameterArgument__SWIG_1(void * jarg1, char * jarg2) {
  char * jresult ;
  ArArgumentParser *arg1 = (ArArgumentParser *) 0 ;
  char *arg2 = (char *) 0 ;
  char *result = 0 ;
  
  arg1 = (ArArgumentParser *)jarg1; 
  arg2 = (char *)jarg2; 
  result = (char *)(arg1)->checkParameterArgument((char const *)arg2);
  jresult = SWIG_csharp_string_callback((const char *)result); 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_ArArgumentParser_checkParameterArgumentString__SWIG_0(void * jarg1, char * jarg2, void * jarg3, void * jarg4, unsigned int jarg5) {
  unsigned int jresult ;
  ArArgumentParser *arg1 = (ArArgumentParser *) 0 ;
  char *arg2 = (char *) 0 ;
  char **arg3 = (char **) 0 ;
  bool *arg4 = (bool *) 0 ;
  bool arg5 ;
  bool result;
  
  arg1 = (ArArgumentParser *)jarg1; 
  arg2 = (char *)jarg2; 
  arg3 = (char **)jarg3; 
  arg4 = (bool *)jarg4; 
  arg5 = jarg5 ? true : false; 
  result = (bool)(arg1)->checkParameterArgumentString((char const *)arg2,(char const **)arg3,arg4,arg5);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_ArArgumentParser_checkParameterArgumentString__SWIG_1(void * jarg1, char * jarg2, void * jarg3, void * jarg4) {
  unsigned int jresult ;
  ArArgumentParser *arg1 = (ArArgumentParser *) 0 ;
  char *arg2 = (char *) 0 ;
  char **arg3 = (char **) 0 ;
  bool *arg4 = (bool *) 0 ;
  bool result;
  
  arg1 = (ArArgumentParser *)jarg1; 
  arg2 = (char *)jarg2; 
  arg3 = (char **)jarg3; 
  arg4 = (bool *)jarg4; 
  result = (bool)(arg1)->checkParameterArgumentString((char const *)arg2,(char const **)arg3,arg4);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_ArArgumentParser_checkParameterArgumentString__SWIG_2(void * jarg1, char * jarg2, void * jarg3) {
  unsigned int jresult ;
  ArArgumentParser *arg1 = (ArArgumentParser *) 0 ;
  char *arg2 = (char *) 0 ;
  char **arg3 = (char **) 0 ;
  bool result;
  
  arg1 = (ArArgumentParser *)jarg1; 
  arg2 = (char *)jarg2; 
  arg3 = (char **)jarg3; 
  result = (bool)(arg1)->checkParameterArgumentString((char const *)arg2,(char const **)arg3);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_ArArgumentParser_checkParameterArgumentInteger__SWIG_0(void * jarg1, char * jarg2, void * jarg3, void * jarg4, unsigned int jarg5) {
  unsigned int jresult ;
  ArArgumentParser *arg1 = (ArArgumentParser *) 0 ;
  char *arg2 = (char *) 0 ;
  int *arg3 = (int *) 0 ;
  bool *arg4 = (bool *) 0 ;
  bool arg5 ;
  bool result;
  
  arg1 = (ArArgumentParser *)jarg1; 
  arg2 = (char *)jarg2; 
  arg3 = (int *)jarg3; 
  arg4 = (bool *)jarg4; 
  arg5 = jarg5 ? true : false; 
  result = (bool)(arg1)->checkParameterArgumentInteger((char const *)arg2,arg3,arg4,arg5);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_ArArgumentParser_checkParameterArgumentInteger__SWIG_1(void * jarg1, char * jarg2, void * jarg3, void * jarg4) {
  unsigned int jresult ;
  ArArgumentParser *arg1 = (ArArgumentParser *) 0 ;
  char *arg2 = (char *) 0 ;
  int *arg3 = (int *) 0 ;
  bool *arg4 = (bool *) 0 ;
  bool result;
  
  arg1 = (ArArgumentParser *)jarg1; 
  arg2 = (char *)jarg2; 
  arg3 = (int *)jarg3; 
  arg4 = (bool *)jarg4; 
  result = (bool)(arg1)->checkParameterArgumentInteger((char const *)arg2,arg3,arg4);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_ArArgumentParser_checkParameterArgumentInteger__SWIG_2(void * jarg1, char * jarg2, void * jarg3) {
  unsigned int jresult ;
  ArArgumentParser *arg1 = (ArArgumentParser *) 0 ;
  char *arg2 = (char *) 0 ;
  int *arg3 = (int *) 0 ;
  bool result;
  
  arg1 = (ArArgumentParser *)jarg1; 
  arg2 = (char *)jarg2; 
  arg3 = (int *)jarg3; 
  result = (bool)(arg1)->checkParameterArgumentInteger((char const *)arg2,arg3);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_ArArgumentParser_checkParameterArgumentBool__SWIG_0(void * jarg1, char * jarg2, void * jarg3, void * jarg4, unsigned int jarg5) {
  unsigned int jresult ;
  ArArgumentParser *arg1 = (ArArgumentParser *) 0 ;
  char *arg2 = (char *) 0 ;
  bool *arg3 = (bool *) 0 ;
  bool *arg4 = (bool *) 0 ;
  bool arg5 ;
  bool result;
  
  arg1 = (ArArgumentParser *)jarg1; 
  arg2 = (char *)jarg2; 
  arg3 = (bool *)jarg3; 
  arg4 = (bool *)jarg4; 
  arg5 = jarg5 ? true : false; 
  result = (bool)(arg1)->checkParameterArgumentBool((char const *)arg2,arg3,arg4,arg5);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_ArArgumentParser_checkParameterArgumentBool__SWIG_1(void * jarg1, char * jarg2, void * jarg3, void * jarg4) {
  unsigned int jresult ;
  ArArgumentParser *arg1 = (ArArgumentParser *) 0 ;
  char *arg2 = (char *) 0 ;
  bool *arg3 = (bool *) 0 ;
  bool *arg4 = (bool *) 0 ;
  bool result;
  
  arg1 = (ArArgumentParser *)jarg1; 
  arg2 = (char *)jarg2; 
  arg3 = (bool *)jarg3; 
  arg4 = (bool *)jarg4; 
  result = (bool)(arg1)->checkParameterArgumentBool((char const *)arg2,arg3,arg4);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_ArArgumentParser_checkParameterArgumentBool__SWIG_2(void * jarg1, char * jarg2, void * jarg3) {
  unsigned int jresult ;
  ArArgumentParser *arg1 = (ArArgumentParser *) 0 ;
  char *arg2 = (char *) 0 ;
  bool *arg3 = (bool *) 0 ;
  bool result;
  
  arg1 = (ArArgumentParser *)jarg1; 
  arg2 = (char *)jarg2; 
  arg3 = (bool *)jarg3; 
  result = (bool)(arg1)->checkParameterArgumentBool((char const *)arg2,arg3);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_ArArgumentParser_checkParameterArgumentFloat__SWIG_0(void * jarg1, char * jarg2, void * jarg3, void * jarg4, unsigned int jarg5) {
  unsigned int jresult ;
  ArArgumentParser *arg1 = (ArArgumentParser *) 0 ;
  char *arg2 = (char *) 0 ;
  float *arg3 = (float *) 0 ;
  bool *arg4 = (bool *) 0 ;
  bool arg5 ;
  bool result;
  
  arg1 = (ArArgumentParser *)jarg1; 
  arg2 = (char *)jarg2; 
  arg3 = (float *)jarg3; 
  arg4 = (bool *)jarg4; 
  arg5 = jarg5 ? true : false; 
  result = (bool)(arg1)->checkParameterArgumentFloat((char const *)arg2,arg3,arg4,arg5);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_ArArgumentParser_checkParameterArgumentFloat__SWIG_1(void * jarg1, char * jarg2, void * jarg3, void * jarg4) {
  unsigned int jresult ;
  ArArgumentParser *arg1 = (ArArgumentParser *) 0 ;
  char *arg2 = (char *) 0 ;
  float *arg3 = (float *) 0 ;
  bool *arg4 = (bool *) 0 ;
  bool result;
  
  arg1 = (ArArgumentParser *)jarg1; 
  arg2 = (char *)jarg2; 
  arg3 = (float *)jarg3; 
  arg4 = (bool *)jarg4; 
  result = (bool)(arg1)->checkParameterArgumentFloat((char const *)arg2,arg3,arg4);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_ArArgumentParser_checkParameterArgumentFloat__SWIG_2(void * jarg1, char * jarg2, void * jarg3) {
  unsigned int jresult ;
  ArArgumentParser *arg1 = (ArArgumentParser *) 0 ;
  char *arg2 = (char *) 0 ;
  float *arg3 = (float *) 0 ;
  bool result;
  
  arg1 = (ArArgumentParser *)jarg1; 
  arg2 = (char *)jarg2; 
  arg3 = (float *)jarg3; 
  result = (bool)(arg1)->checkParameterArgumentFloat((char const *)arg2,arg3);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_ArArgumentParser_checkParameterArgumentDouble__SWIG_0(void * jarg1, char * jarg2, void * jarg3, void * jarg4, unsigned int jarg5) {
  unsigned int jresult ;
  ArArgumentParser *arg1 = (ArArgumentParser *) 0 ;
  char *arg2 = (char *) 0 ;
  double *arg3 = (double *) 0 ;
  bool *arg4 = (bool *) 0 ;
  bool arg5 ;
  bool result;
  
  arg1 = (ArArgumentParser *)jarg1; 
  arg2 = (char *)jarg2; 
  arg3 = (double *)jarg3; 
  arg4 = (bool *)jarg4; 
  arg5 = jarg5 ? true : false; 
  result = (bool)(arg1)->checkParameterArgumentDouble((char const *)arg2,arg3,arg4,arg5);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_ArArgumentParser_checkParameterArgumentDouble__SWIG_1(void * jarg1, char * jarg2, void * jarg3, void * jarg4) {
  unsigned int jresult ;
  ArArgumentParser *arg1 = (ArArgumentParser *) 0 ;
  char *arg2 = (char *) 0 ;
  double *arg3 = (double *) 0 ;
  bool *arg4 = (bool *) 0 ;
  bool result;
  
  arg1 = (ArArgumentParser *)jarg1; 
  arg2 = (char *)jarg2; 
  arg3 = (double *)jarg3; 
  arg4 = (bool *)jarg4; 
  result = (bool)(arg1)->checkParameterArgumentDouble((char const *)arg2,arg3,arg4);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_ArArgumentParser_checkParameterArgumentDouble__SWIG_2(void * jarg1, char * jarg2, void * jarg3) {
  unsigned int jresult ;
  ArArgumentParser *arg1 = (ArArgumentParser *) 0 ;
  char *arg2 = (char *) 0 ;
  double *arg3 = (double *) 0 ;
  bool result;
  
  arg1 = (ArArgumentParser *)jarg1; 
  arg2 = (char *)jarg2; 
  arg3 = (double *)jarg3; 
  result = (bool)(arg1)->checkParameterArgumentDouble((char const *)arg2,arg3);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_ArArgumentParser_addDefaultArgument__SWIG_0(void * jarg1, char * jarg2, int jarg3) {
  ArArgumentParser *arg1 = (ArArgumentParser *) 0 ;
  char *arg2 = (char *) 0 ;
  int arg3 ;
  
  arg1 = (ArArgumentParser *)jarg1; 
  arg2 = (char *)jarg2; 
  arg3 = (int)jarg3; 
  (arg1)->addDefaultArgument((char const *)arg2,arg3);
}


SWIGEXPORT void SWIGSTDCALL CSharp_ArArgumentParser_addDefaultArgument__SWIG_1(void * jarg1, char * jarg2) {
  ArArgumentParser *arg1 = (ArArgumentParser *) 0 ;
  char *arg2 = (char *) 0 ;
  
  arg1 = (ArArgumentParser *)jarg1; 
  arg2 = (char *)jarg2; 
  (arg1)->addDefaultArgument((char const *)arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_ArArgumentParser_addDefaultArgumentAsIs__SWIG_0(void * jarg1, char * jarg2, int jarg3) {
  ArArgumentParser *arg1 = (ArArgumentParser *) 0 ;
  char *arg2 = (char *) 0 ;
  int arg3 ;
  
  arg1 = (ArArgumentParser *)jarg1; 
  arg2 = (char *)jarg2; 
  arg3 = (int)jarg3; 
  (arg1)->addDefaultArgumentAsIs((char const *)arg2,arg3);
}


SWIGEXPORT void SWIGSTDCALL CSharp_ArArgumentParser_addDefaultArgumentAsIs__SWIG_1(void * jarg1, char * jarg2) {
  ArArgumentParser *arg1 = (ArArgumentParser *) 0 ;
  char *arg2 = (char *) 0 ;
  
  arg1 = (ArArgumentParser *)jarg1; 
  arg2 = (char *)jarg2; 
  (arg1)->addDefaultArgumentAsIs((char const *)arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_ArArgumentParser_loadDefaultArguments__SWIG_0(void * jarg1, int jarg2) {
  ArArgumentParser *arg1 = (ArArgumentParser *) 0 ;
  int arg2 ;
  
  arg1 = (ArArgumentParser *)jarg1; 
  arg2 = (int)jarg2; 
  (arg1)->loadDefaultArguments(arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_ArArgumentParser_loadDefaultArguments__SWIG_1(void * jarg1) {
  ArArgumentParser *arg1 = (ArArgumentParser *) 0 ;
  
  arg1 = (ArArgumentParser *)jarg1; 
  (arg1)->loadDefaultArguments();
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_ArArgumentParser_checkHelpAndWarnUnparsed__SWIG_0(void * jarg1, unsigned int jarg2) {
  unsigned int jresult ;
  ArArgumentParser *arg1 = (ArArgumentParser *) 0 ;
  unsigned int arg2 ;
  bool result;
  
  arg1 = (ArArgumentParser *)jarg1; 
  arg2 = (unsigned int)jarg2; 
  result = (bool)(arg1)->checkHelpAndWarnUnparsed(arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_ArArgumentParser_checkHelpAndWarnUnparsed__SWIG_1(void * jarg1) {
  unsigned int jresult ;
  ArArgumentParser *arg1 = (ArArgumentParser *) 0 ;
  bool result;
  
  arg1 = (ArArgumentParser *)jarg1; 
  result = (bool)(arg1)->checkHelpAndWarnUnparsed();
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_ArArgumentParser_checkHelp(void * jarg1) {
  unsigned int jresult ;
  ArArgumentParser *arg1 = (ArArgumentParser *) 0 ;
  bool result;
  
  arg1 = (ArArgumentParser *)jarg1; 
  result = (bool)(arg1)->checkHelp();
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned long SWIGSTDCALL CSharp_ArArgumentParser_getArgc(void * jarg1) {
  unsigned long jresult ;
  ArArgumentParser *arg1 = (ArArgumentParser *) 0 ;
  size_t result;
  
  arg1 = (ArArgumentParser *)jarg1; 
  result = ((ArArgumentParser const *)arg1)->getArgc();
  jresult = (unsigned long)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_ArArgumentParser_getArgv(void * jarg1) {
  void * jresult ;
  ArArgumentParser *arg1 = (ArArgumentParser *) 0 ;
  char **result = 0 ;
  
  arg1 = (ArArgumentParser *)jarg1; 
  result = (char **)((ArArgumentParser const *)arg1)->getArgv();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_ArArgumentParser_getArgumentBuilder(void * jarg1) {
  void * jresult ;
  ArArgumentParser *arg1 = (ArArgumentParser *) 0 ;
  ArArgumentBuilder *result = 0 ;
  
  arg1 = (ArArgumentParser *)jarg1; 
  result = (ArArgumentBuilder *)((ArArgumentParser const *)arg1)->getArgumentBuilder();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT char * SWIGSTDCALL CSharp_ArArgumentParser_getArg(void * jarg1, unsigned long jarg2) {
  char * jresult ;
  ArArgumentParser *arg1 = (ArArgumentParser *) 0 ;
  size_t arg2 ;
  char *result = 0 ;
  
  arg1 = (ArArgumentParser *)jarg1; 
  arg2 = (size_t)jarg2; 
  result = (char *)((ArArgumentParser const *)arg1)->getArg(arg2);
  jresult = SWIG_csharp_string_callback((const char *)result); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_ArArgumentParser_log(void * jarg1) {
  ArArgumentParser *arg1 = (ArArgumentParser *) 0 ;
  
  arg1 = (ArArgumentParser *)jarg1; 
  ((ArArgumentParser const *)arg1)->log();
}


SWIGEXPORT char * SWIGSTDCALL CSharp_ArArgumentParser_getStartingArguments(void * jarg1) {
  char * jresult ;
  ArArgumentParser *arg1 = (ArArgumentParser *) 0 ;
  char *result = 0 ;
  
  arg1 = (ArArgumentParser *)jarg1; 
  result = (char *)((ArArgumentParser const *)arg1)->getStartingArguments();
  jresult = SWIG_csharp_string_callback((const char *)result); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_ArArgumentParser_removeArg(void * jarg1, unsigned long jarg2) {
  ArArgumentParser *arg1 = (ArArgumentParser *) 0 ;
  size_t arg2 ;
  
  arg1 = (ArArgumentParser *)jarg1; 
  arg2 = (size_t)jarg2; 
  (arg1)->removeArg(arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_ArArgumentParser_addDefaultArgumentFile(char * jarg1) {
  char *arg1 = (char *) 0 ;
  
  arg1 = (char *)jarg1; 
  ArArgumentParser::addDefaultArgumentFile((char const *)arg1);
}


SWIGEXPORT void SWIGSTDCALL CSharp_ArArgumentParser_addDefaultArgumentEnv(char * jarg1) {
  char *arg1 = (char *) 0 ;
  
  arg1 = (char *)jarg1; 
  ArArgumentParser::addDefaultArgumentEnv((char const *)arg1);
}


SWIGEXPORT void SWIGSTDCALL CSharp_ArArgumentParser_logDefaultArgumentLocations() {
  ArArgumentParser::logDefaultArgumentLocations();
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_ArBumpers__SWIG_0(unsigned long jarg1, unsigned long jarg2, char * jarg3, int jarg4, double jarg5) {
  void * jresult ;
  size_t arg1 ;
  size_t arg2 ;
  char *arg3 = (char *) 0 ;
  int arg4 ;
  double arg5 ;
  ArBumpers *result = 0 ;
  
  arg1 = (size_t)jarg1; 
  arg2 = (size_t)jarg2; 
  arg3 = (char *)jarg3; 
  arg4 = (int)jarg4; 
  arg5 = (double)jarg5; 
  result = (ArBumpers *)new ArBumpers(arg1,arg2,(char const *)arg3,arg4,arg5);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_ArBumpers__SWIG_1(unsigned long jarg1, unsigned long jarg2, char * jarg3, int jarg4) {
  void * jresult ;
  size_t arg1 ;
  size_t arg2 ;
  char *arg3 = (char *) 0 ;
  int arg4 ;
  ArBumpers *result = 0 ;
  
  arg1 = (size_t)jarg1; 
  arg2 = (size_t)jarg2; 
  arg3 = (char *)jarg3; 
  arg4 = (int)jarg4; 
  result = (ArBumpers *)new ArBumpers(arg1,arg2,(char const *)arg3,arg4);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_ArBumpers__SWIG_2(unsigned long jarg1, unsigned long jarg2, char * jarg3) {
  void * jresult ;
  size_t arg1 ;
  size_t arg2 ;
  char *arg3 = (char *) 0 ;
  ArBumpers *result = 0 ;
  
  arg1 = (size_t)jarg1; 
  arg2 = (size_t)jarg2; 
  arg3 = (char *)jarg3; 
  result = (ArBumpers *)new ArBumpers(arg1,arg2,(char const *)arg3);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_ArBumpers__SWIG_3(unsigned long jarg1, unsigned long jarg2) {
  void * jresult ;
  size_t arg1 ;
  size_t arg2 ;
  ArBumpers *result = 0 ;
  
  arg1 = (size_t)jarg1; 
  arg2 = (size_t)jarg2; 
  result = (ArBumpers *)new ArBumpers(arg1,arg2);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_ArBumpers__SWIG_4(unsigned long jarg1) {
  void * jresult ;
  size_t arg1 ;
  ArBumpers *result = 0 ;
  
  arg1 = (size_t)jarg1; 
  result = (ArBumpers *)new ArBumpers(arg1);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_ArBumpers__SWIG_5() {
  void * jresult ;
  ArBumpers *result = 0 ;
  
  result = (ArBumpers *)new ArBumpers();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_ArBumpers(void * jarg1) {
  ArBumpers *arg1 = (ArBumpers *) 0 ;
  
  arg1 = (ArBumpers *)jarg1; 
  delete arg1;
}


SWIGEXPORT void SWIGSTDCALL CSharp_ArBumpers_setRobot(void * jarg1, void * jarg2) {
  ArBumpers *arg1 = (ArBumpers *) 0 ;
  ArRobot *arg2 = (ArRobot *) 0 ;
  
  arg1 = (ArBumpers *)jarg1; 
  arg2 = (ArRobot *)jarg2; 
  (arg1)->setRobot(arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_ArBumpers_processReadings(void * jarg1) {
  ArBumpers *arg1 = (ArBumpers *) 0 ;
  
  arg1 = (ArBumpers *)jarg1; 
  (arg1)->processReadings();
}


SWIGEXPORT void SWIGSTDCALL CSharp_ArBumpers_addBumpToBuffer(void * jarg1, int jarg2, int jarg3) {
  ArBumpers *arg1 = (ArBumpers *) 0 ;
  int arg2 ;
  int arg3 ;
  
  arg1 = (ArBumpers *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (int)jarg3; 
  (arg1)->addBumpToBuffer(arg2,arg3);
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_ArCameraCollection() {
  void * jresult ;
  ArCameraCollection *result = 0 ;
  
  result = (ArCameraCollection *)new ArCameraCollection();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_ArCameraCollection(void * jarg1) {
  ArCameraCollection *arg1 = (ArCameraCollection *) 0 ;
  
  arg1 = (ArCameraCollection *)jarg1; 
  delete arg1;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_ArCameraCollection_addCamera(void * jarg1, char * jarg2, char * jarg3, char * jarg4, char * jarg5) {
  unsigned int jresult ;
  ArCameraCollection *arg1 = (ArCameraCollection *) 0 ;
  char *arg2 = (char *) 0 ;
  char *arg3 = (char *) 0 ;
  char *arg4 = (char *) 0 ;
  char *arg5 = (char *) 0 ;
  bool result;
  
  arg1 = (ArCameraCollection *)jarg1; 
  arg2 = (char *)jarg2; 
  arg3 = (char *)jarg3; 
  arg4 = (char *)jarg4; 
  arg5 = (char *)jarg5; 
  result = (bool)(arg1)->addCamera((char const *)arg2,(char const *)arg3,(char const *)arg4,(char const *)arg5);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_ArCameraCollection_removeCamera(void * jarg1, char * jarg2) {
  unsigned int jresult ;
  ArCameraCollection *arg1 = (ArCameraCollection *) 0 ;
  char *arg2 = (char *) 0 ;
  bool result;
  
  arg1 = (ArCameraCollection *)jarg1; 
  arg2 = (char *)jarg2; 
  result = (bool)(arg1)->removeCamera((char const *)arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_ArCameraCollection_addCameraCommand__SWIG_0(void * jarg1, char * jarg2, char * jarg3, char * jarg4, int jarg5) {
  unsigned int jresult ;
  ArCameraCollection *arg1 = (ArCameraCollection *) 0 ;
  char *arg2 = (char *) 0 ;
  char *arg3 = (char *) 0 ;
  char *arg4 = (char *) 0 ;
  int arg5 ;
  bool result;
  
  arg1 = (ArCameraCollection *)jarg1; 
  arg2 = (char *)jarg2; 
  arg3 = (char *)jarg3; 
  arg4 = (char *)jarg4; 
  arg5 = (int)jarg5; 
  result = (bool)(arg1)->addCameraCommand((char const *)arg2,(char const *)arg3,(char const *)arg4,arg5);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_ArCameraCollection_addCameraCommand__SWIG_1(void * jarg1, char * jarg2, char * jarg3, char * jarg4) {
  unsigned int jresult ;
  ArCameraCollection *arg1 = (ArCameraCollection *) 0 ;
  char *arg2 = (char *) 0 ;
  char *arg3 = (char *) 0 ;
  char *arg4 = (char *) 0 ;
  bool result;
  
  arg1 = (ArCameraCollection *)jarg1; 
  arg2 = (char *)jarg2; 
  arg3 = (char *)jarg3; 
  arg4 = (char *)jarg4; 
  result = (bool)(arg1)->addCameraCommand((char const *)arg2,(char const *)arg3,(char const *)arg4);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_ArCameraCollection_removeCameraCommand(void * jarg1, char * jarg2, char * jarg3) {
  unsigned int jresult ;
  ArCameraCollection *arg1 = (ArCameraCollection *) 0 ;
  char *arg2 = (char *) 0 ;
  char *arg3 = (char *) 0 ;
  bool result;
  
  arg1 = (ArCameraCollection *)jarg1; 
  arg2 = (char *)jarg2; 
  arg3 = (char *)jarg3; 
  result = (bool)(arg1)->removeCameraCommand((char const *)arg2,(char const *)arg3);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_ArCameraCollection_addParameter(void * jarg1, char * jarg2, void * jarg3, void * jarg4) {
  unsigned int jresult ;
  ArCameraCollection *arg1 = (ArCameraCollection *) 0 ;
  char *arg2 = (char *) 0 ;
  ArCameraParameterSource *arg3 = (ArCameraParameterSource *) 0 ;
  ArConfigArg *arg4 = 0 ;
  bool result;
  
  arg1 = (ArCameraCollection *)jarg1; 
  arg2 = (char *)jarg2; 
  arg3 = (ArCameraParameterSource *)jarg3; 
  arg4 = (ArConfigArg *)jarg4;
  if (!arg4) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "ArConfigArg const & type is null", 0);
    return 0;
  } 
  result = (bool)(arg1)->addParameter((char const *)arg2,arg3,(ArConfigArg const &)*arg4);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_ArCameraCollection_removeParameter(void * jarg1, char * jarg2, char * jarg3) {
  unsigned int jresult ;
  ArCameraCollection *arg1 = (ArCameraCollection *) 0 ;
  char *arg2 = (char *) 0 ;
  char *arg3 = (char *) 0 ;
  bool result;
  
  arg1 = (ArCameraCollection *)jarg1; 
  arg2 = (char *)jarg2; 
  arg3 = (char *)jarg3; 
  result = (bool)(arg1)->removeParameter((char const *)arg2,(char const *)arg3);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_ArCameraCollection_getCameraNames(void * jarg1, void * jarg2) {
  ArCameraCollection *arg1 = (ArCameraCollection *) 0 ;
  std::list< std::string > *arg2 = 0 ;
  
  arg1 = (ArCameraCollection *)jarg1; 
  arg2 = (std::list< std::string > *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "std::list< std::string > & type is null", 0);
    return ;
  } 
  (arg1)->getCameraNames(*arg2);
}


SWIGEXPORT char * SWIGSTDCALL CSharp_ArCameraCollection_getCameraType(void * jarg1, char * jarg2) {
  char * jresult ;
  ArCameraCollection *arg1 = (ArCameraCollection *) 0 ;
  char *arg2 = (char *) 0 ;
  char *result = 0 ;
  
  arg1 = (ArCameraCollection *)jarg1; 
  arg2 = (char *)jarg2; 
  result = (char *)(arg1)->getCameraType((char const *)arg2);
  jresult = SWIG_csharp_string_callback((const char *)result); 
  return jresult;
}


SWIGEXPORT char * SWIGSTDCALL CSharp_ArCameraCollection_getDisplayName(void * jarg1, char * jarg2) {
  char * jresult ;
  ArCameraCollection *arg1 = (ArCameraCollection *) 0 ;
  char *arg2 = (char *) 0 ;
  char *result = 0 ;
  
  arg1 = (ArCameraCollection *)jarg1; 
  arg2 = (char *)jarg2; 
  result = (char *)(arg1)->getDisplayName((char const *)arg2);
  jresult = SWIG_csharp_string_callback((const char *)result); 
  return jresult;
}


SWIGEXPORT char * SWIGSTDCALL CSharp_ArCameraCollection_getDisplayType(void * jarg1, char * jarg2) {
  char * jresult ;
  ArCameraCollection *arg1 = (ArCameraCollection *) 0 ;
  char *arg2 = (char *) 0 ;
  char *result = 0 ;
  
  arg1 = (ArCameraCollection *)jarg1; 
  arg2 = (char *)jarg2; 
  result = (char *)(arg1)->getDisplayType((char const *)arg2);
  jresult = SWIG_csharp_string_callback((const char *)result); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_ArCameraCollection_getCameraCommands(void * jarg1, char * jarg2, void * jarg3) {
  ArCameraCollection *arg1 = (ArCameraCollection *) 0 ;
  char *arg2 = (char *) 0 ;
  std::list< std::string > *arg3 = 0 ;
  
  arg1 = (ArCameraCollection *)jarg1; 
  arg2 = (char *)jarg2; 
  arg3 = (std::list< std::string > *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "std::list< std::string > & type is null", 0);
    return ;
  } 
  (arg1)->getCameraCommands((char const *)arg2,*arg3);
}


SWIGEXPORT char * SWIGSTDCALL CSharp_ArCameraCollection_getCommandName(void * jarg1, char * jarg2, char * jarg3) {
  char * jresult ;
  ArCameraCollection *arg1 = (ArCameraCollection *) 0 ;
  char *arg2 = (char *) 0 ;
  char *arg3 = (char *) 0 ;
  char *result = 0 ;
  
  arg1 = (ArCameraCollection *)jarg1; 
  arg2 = (char *)jarg2; 
  arg3 = (char *)jarg3; 
  result = (char *)(arg1)->getCommandName((char const *)arg2,(char const *)arg3);
  jresult = SWIG_csharp_string_callback((const char *)result); 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_ArCameraCollection_getRequestInterval(void * jarg1, char * jarg2, char * jarg3) {
  int jresult ;
  ArCameraCollection *arg1 = (ArCameraCollection *) 0 ;
  char *arg2 = (char *) 0 ;
  char *arg3 = (char *) 0 ;
  int result;
  
  arg1 = (ArCameraCollection *)jarg1; 
  arg2 = (char *)jarg2; 
  arg3 = (char *)jarg3; 
  result = (int)(arg1)->getRequestInterval((char const *)arg2,(char const *)arg3);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_ArCameraCollection_getParameterNames(void * jarg1, char * jarg2, void * jarg3) {
  ArCameraCollection *arg1 = (ArCameraCollection *) 0 ;
  char *arg2 = (char *) 0 ;
  std::list< std::string > *arg3 = 0 ;
  
  arg1 = (ArCameraCollection *)jarg1; 
  arg2 = (char *)jarg2; 
  arg3 = (std::list< std::string > *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "std::list< std::string > & type is null", 0);
    return ;
  } 
  (arg1)->getParameterNames((char const *)arg2,*arg3);
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_ArCameraCollection_getParameter(void * jarg1, char * jarg2, char * jarg3, void * jarg4) {
  unsigned int jresult ;
  ArCameraCollection *arg1 = (ArCameraCollection *) 0 ;
  char *arg2 = (char *) 0 ;
  char *arg3 = (char *) 0 ;
  ArConfigArg *arg4 = 0 ;
  bool result;
  
  arg1 = (ArCameraCollection *)jarg1; 
  arg2 = (char *)jarg2; 
  arg3 = (char *)jarg3; 
  arg4 = (ArConfigArg *)jarg4;
  if (!arg4) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "ArConfigArg & type is null", 0);
    return 0;
  } 
  result = (bool)(arg1)->getParameter((char const *)arg2,(char const *)arg3,*arg4);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_ArCameraCollection_setParameter(void * jarg1, char * jarg2, void * jarg3) {
  unsigned int jresult ;
  ArCameraCollection *arg1 = (ArCameraCollection *) 0 ;
  char *arg2 = (char *) 0 ;
  ArConfigArg *arg3 = 0 ;
  bool result;
  
  arg1 = (ArCameraCollection *)jarg1; 
  arg2 = (char *)jarg2; 
  arg3 = (ArConfigArg *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "ArConfigArg const & type is null", 0);
    return 0;
  } 
  result = (bool)(arg1)->setParameter((char const *)arg2,(ArConfigArg const &)*arg3);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_ArCameraCollection_exists__SWIG_0(void * jarg1, char * jarg2) {
  unsigned int jresult ;
  ArCameraCollection *arg1 = (ArCameraCollection *) 0 ;
  char *arg2 = (char *) 0 ;
  bool result;
  
  arg1 = (ArCameraCollection *)jarg1; 
  arg2 = (char *)jarg2; 
  result = (bool)(arg1)->exists((char const *)arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_ArCameraCollection_exists__SWIG_1(void * jarg1, char * jarg2, char * jarg3) {
  unsigned int jresult ;
  ArCameraCollection *arg1 = (ArCameraCollection *) 0 ;
  char *arg2 = (char *) 0 ;
  char *arg3 = (char *) 0 ;
  bool result;
  
  arg1 = (ArCameraCollection *)jarg1; 
  arg2 = (char *)jarg2; 
  arg3 = (char *)jarg3; 
  result = (bool)(arg1)->exists((char const *)arg2,(char const *)arg3);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_ArCameraCollection_parameterExists(void * jarg1, char * jarg2, char * jarg3) {
  unsigned int jresult ;
  ArCameraCollection *arg1 = (ArCameraCollection *) 0 ;
  char *arg2 = (char *) 0 ;
  char *arg3 = (char *) 0 ;
  bool result;
  
  arg1 = (ArCameraCollection *)jarg1; 
  arg2 = (char *)jarg2; 
  arg3 = (char *)jarg3; 
  result = (bool)(arg1)->parameterExists((char const *)arg2,(char const *)arg3);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_ArCameraCollection_addModifiedCB__SWIG_0(void * jarg1, void * jarg2, int jarg3) {
  unsigned int jresult ;
  ArCameraCollection *arg1 = (ArCameraCollection *) 0 ;
  ArFunctor *arg2 = (ArFunctor *) 0 ;
  ArListPos::Pos arg3 ;
  bool result;
  
  arg1 = (ArCameraCollection *)jarg1; 
  arg2 = (ArFunctor *)jarg2; 
  arg3 = (ArListPos::Pos)jarg3; 
  result = (bool)(arg1)->addModifiedCB(arg2,arg3);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_ArCameraCollection_addModifiedCB__SWIG_1(void * jarg1, void * jarg2) {
  unsigned int jresult ;
  ArCameraCollection *arg1 = (ArCameraCollection *) 0 ;
  ArFunctor *arg2 = (ArFunctor *) 0 ;
  bool result;
  
  arg1 = (ArCameraCollection *)jarg1; 
  arg2 = (ArFunctor *)jarg2; 
  result = (bool)(arg1)->addModifiedCB(arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_ArCameraCollection_removeModifiedCB(void * jarg1, void * jarg2) {
  unsigned int jresult ;
  ArCameraCollection *arg1 = (ArCameraCollection *) 0 ;
  ArFunctor *arg2 = (ArFunctor *) 0 ;
  bool result;
  
  arg1 = (ArCameraCollection *)jarg1; 
  arg2 = (ArFunctor *)jarg2; 
  result = (bool)(arg1)->removeModifiedCB(arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_ArCameraCollection_startUpdate(void * jarg1) {
  ArCameraCollection *arg1 = (ArCameraCollection *) 0 ;
  
  arg1 = (ArCameraCollection *)jarg1; 
  (arg1)->startUpdate();
}


SWIGEXPORT void SWIGSTDCALL CSharp_ArCameraCollection_endUpdate(void * jarg1) {
  ArCameraCollection *arg1 = (ArCameraCollection *) 0 ;
  
  arg1 = (ArCameraCollection *)jarg1; 
  (arg1)->endUpdate();
}


SWIGEXPORT int SWIGSTDCALL CSharp_ArCameraCollection_lockObj(void * jarg1) {
  int jresult ;
  ArCameraCollection *arg1 = (ArCameraCollection *) 0 ;
  int result;
  
  arg1 = (ArCameraCollection *)jarg1; 
  result = (int)(arg1)->lock();
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_ArCameraCollection_tryLock(void * jarg1) {
  int jresult ;
  ArCameraCollection *arg1 = (ArCameraCollection *) 0 ;
  int result;
  
  arg1 = (ArCameraCollection *)jarg1; 
  result = (int)(arg1)->tryLock();
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_ArCameraCollection_unlockObj(void * jarg1) {
  int jresult ;
  ArCameraCollection *arg1 = (ArCameraCollection *) 0 ;
  int result;
  
  arg1 = (ArCameraCollection *)jarg1; 
  result = (int)(arg1)->unlock();
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_ArCameraCollectionItem(void * jarg1) {
  ArCameraCollectionItem *arg1 = (ArCameraCollectionItem *) 0 ;
  
  arg1 = (ArCameraCollectionItem *)jarg1; 
  delete arg1;
}


SWIGEXPORT char * SWIGSTDCALL CSharp_ArCameraCollectionItem_getCameraName(void * jarg1) {
  char * jresult ;
  ArCameraCollectionItem *arg1 = (ArCameraCollectionItem *) 0 ;
  char *result = 0 ;
  
  arg1 = (ArCameraCollectionItem *)jarg1; 
  result = (char *)(arg1)->getCameraName();
  jresult = SWIG_csharp_string_callback((const char *)result); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_ArCameraCollectionItem_addToCameraCollection(void * jarg1, void * jarg2) {
  ArCameraCollectionItem *arg1 = (ArCameraCollectionItem *) 0 ;
  ArCameraCollection *arg2 = 0 ;
  
  arg1 = (ArCameraCollectionItem *)jarg1; 
  arg2 = (ArCameraCollection *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "ArCameraCollection & type is null", 0);
    return ;
  } 
  (arg1)->addToCameraCollection(*arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_ArCameraParameterSource(void * jarg1) {
  ArCameraParameterSource *arg1 = (ArCameraParameterSource *) 0 ;
  
  arg1 = (ArCameraParameterSource *)jarg1; 
  delete arg1;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_ArCameraParameterSource_getParameter(void * jarg1, char * jarg2, void * jarg3) {
  unsigned int jresult ;
  ArCameraParameterSource *arg1 = (ArCameraParameterSource *) 0 ;
  char *arg2 = (char *) 0 ;
  ArConfigArg *arg3 = 0 ;
  bool result;
  
  arg1 = (ArCameraParameterSource *)jarg1; 
  arg2 = (char *)jarg2; 
  arg3 = (ArConfigArg *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "ArConfigArg & type is null", 0);
    return 0;
  } 
  result = (bool)(arg1)->getParameter((char const *)arg2,*arg3);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_ArCameraParameterSource_setParameter(void * jarg1, void * jarg2) {
  unsigned int jresult ;
  ArCameraParameterSource *arg1 = (ArCameraParameterSource *) 0 ;
  ArConfigArg *arg2 = 0 ;
  bool result;
  
  arg1 = (ArCameraParameterSource *)jarg1; 
  arg2 = (ArConfigArg *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "ArConfigArg const & type is null", 0);
    return 0;
  } 
  result = (bool)(arg1)->setParameter((ArConfigArg const &)*arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_ArCameraCommands_GET_CAMERA_DATA_set(char * jarg1) {
  char *arg1 = (char *) 0 ;
  
  arg1 = (char *)jarg1; 
  {
    if (arg1) {
      ArCameraCommands::GET_CAMERA_DATA = (char const *) (new char[strlen((const char *)arg1)+1]);
      strcpy((char *)ArCameraCommands::GET_CAMERA_DATA, (const char *)arg1);
    } else {
      ArCameraCommands::GET_CAMERA_DATA = 0;
    }
  }
}


SWIGEXPORT char * SWIGSTDCALL CSharp_ArCameraCommands_GET_CAMERA_DATA_get() {
  char * jresult ;
  char *result = 0 ;
  
  result = (char *)ArCameraCommands::GET_CAMERA_DATA;
  jresult = SWIG_csharp_string_callback((const char *)result); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_ArCameraCommands_GET_CAMERA_INFO_set(char * jarg1) {
  char *arg1 = (char *) 0 ;
  
  arg1 = (char *)jarg1; 
  {
    if (arg1) {
      ArCameraCommands::GET_CAMERA_INFO = (char const *) (new char[strlen((const char *)arg1)+1]);
      strcpy((char *)ArCameraCommands::GET_CAMERA_INFO, (const char *)arg1);
    } else {
      ArCameraCommands::GET_CAMERA_INFO = 0;
    }
  }
}


SWIGEXPORT char * SWIGSTDCALL CSharp_ArCameraCommands_GET_CAMERA_INFO_get() {
  char * jresult ;
  char *result = 0 ;
  
  result = (char *)ArCameraCommands::GET_CAMERA_INFO;
  jresult = SWIG_csharp_string_callback((const char *)result); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_ArCameraCommands_GET_PICTURE_set(char * jarg1) {
  char *arg1 = (char *) 0 ;
  
  arg1 = (char *)jarg1; 
  {
    if (arg1) {
      ArCameraCommands::GET_PICTURE = (char const *) (new char[strlen((const char *)arg1)+1]);
      strcpy((char *)ArCameraCommands::GET_PICTURE, (const char *)arg1);
    } else {
      ArCameraCommands::GET_PICTURE = 0;
    }
  }
}


SWIGEXPORT char * SWIGSTDCALL CSharp_ArCameraCommands_GET_PICTURE_get() {
  char * jresult ;
  char *result = 0 ;
  
  result = (char *)ArCameraCommands::GET_PICTURE;
  jresult = SWIG_csharp_string_callback((const char *)result); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_ArCameraCommands_GET_PICTURE_OPTIM_set(char * jarg1) {
  char *arg1 = (char *) 0 ;
  
  arg1 = (char *)jarg1; 
  {
    if (arg1) {
      ArCameraCommands::GET_PICTURE_OPTIM = (char const *) (new char[strlen((const char *)arg1)+1]);
      strcpy((char *)ArCameraCommands::GET_PICTURE_OPTIM, (const char *)arg1);
    } else {
      ArCameraCommands::GET_PICTURE_OPTIM = 0;
    }
  }
}


SWIGEXPORT char * SWIGSTDCALL CSharp_ArCameraCommands_GET_PICTURE_OPTIM_get() {
  char * jresult ;
  char *result = 0 ;
  
  result = (char *)ArCameraCommands::GET_PICTURE_OPTIM;
  jresult = SWIG_csharp_string_callback((const char *)result); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_ArCameraCommands_GET_SNAPSHOT_set(char * jarg1) {
  char *arg1 = (char *) 0 ;
  
  arg1 = (char *)jarg1; 
  {
    if (arg1) {
      ArCameraCommands::GET_SNAPSHOT = (char const *) (new char[strlen((const char *)arg1)+1]);
      strcpy((char *)ArCameraCommands::GET_SNAPSHOT, (const char *)arg1);
    } else {
      ArCameraCommands::GET_SNAPSHOT = 0;
    }
  }
}


SWIGEXPORT char * SWIGSTDCALL CSharp_ArCameraCommands_GET_SNAPSHOT_get() {
  char * jresult ;
  char *result = 0 ;
  
  result = (char *)ArCameraCommands::GET_SNAPSHOT;
  jresult = SWIG_csharp_string_callback((const char *)result); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_ArCameraCommands_GET_DISPLAY_set(char * jarg1) {
  char *arg1 = (char *) 0 ;
  
  arg1 = (char *)jarg1; 
  {
    if (arg1) {
      ArCameraCommands::GET_DISPLAY = (char const *) (new char[strlen((const char *)arg1)+1]);
      strcpy((char *)ArCameraCommands::GET_DISPLAY, (const char *)arg1);
    } else {
      ArCameraCommands::GET_DISPLAY = 0;
    }
  }
}


SWIGEXPORT char * SWIGSTDCALL CSharp_ArCameraCommands_GET_DISPLAY_get() {
  char * jresult ;
  char *result = 0 ;
  
  result = (char *)ArCameraCommands::GET_DISPLAY;
  jresult = SWIG_csharp_string_callback((const char *)result); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_ArCameraCommands_SET_CAMERA_ABS_set(char * jarg1) {
  char *arg1 = (char *) 0 ;
  
  arg1 = (char *)jarg1; 
  {
    if (arg1) {
      ArCameraCommands::SET_CAMERA_ABS = (char const *) (new char[strlen((const char *)arg1)+1]);
      strcpy((char *)ArCameraCommands::SET_CAMERA_ABS, (const char *)arg1);
    } else {
      ArCameraCommands::SET_CAMERA_ABS = 0;
    }
  }
}


SWIGEXPORT char * SWIGSTDCALL CSharp_ArCameraCommands_SET_CAMERA_ABS_get() {
  char * jresult ;
  char *result = 0 ;
  
  result = (char *)ArCameraCommands::SET_CAMERA_ABS;
  jresult = SWIG_csharp_string_callback((const char *)result); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_ArCameraCommands_SET_CAMERA_PCT_set(char * jarg1) {
  char *arg1 = (char *) 0 ;
  
  arg1 = (char *)jarg1; 
  {
    if (arg1) {
      ArCameraCommands::SET_CAMERA_PCT = (char const *) (new char[strlen((const char *)arg1)+1]);
      strcpy((char *)ArCameraCommands::SET_CAMERA_PCT, (const char *)arg1);
    } else {
      ArCameraCommands::SET_CAMERA_PCT = 0;
    }
  }
}


SWIGEXPORT char * SWIGSTDCALL CSharp_ArCameraCommands_SET_CAMERA_PCT_get() {
  char * jresult ;
  char *result = 0 ;
  
  result = (char *)ArCameraCommands::SET_CAMERA_PCT;
  jresult = SWIG_csharp_string_callback((const char *)result); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_ArCameraCommands_SET_CAMERA_REL_set(char * jarg1) {
  char *arg1 = (char *) 0 ;
  
  arg1 = (char *)jarg1; 
  {
    if (arg1) {
      ArCameraCommands::SET_CAMERA_REL = (char const *) (new char[strlen((const char *)arg1)+1]);
      strcpy((char *)ArCameraCommands::SET_CAMERA_REL, (const char *)arg1);
    } else {
      ArCameraCommands::SET_CAMERA_REL = 0;
    }
  }
}


SWIGEXPORT char * SWIGSTDCALL CSharp_ArCameraCommands_SET_CAMERA_REL_get() {
  char * jresult ;
  char *result = 0 ;
  
  result = (char *)ArCameraCommands::SET_CAMERA_REL;
  jresult = SWIG_csharp_string_callback((const char *)result); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_ArCameraCommands_GET_CAMERA_MODE_LIST_set(char * jarg1) {
  char *arg1 = (char *) 0 ;
  
  arg1 = (char *)jarg1; 
  {
    if (arg1) {
      ArCameraCommands::GET_CAMERA_MODE_LIST = (char const *) (new char[strlen((const char *)arg1)+1]);
      strcpy((char *)ArCameraCommands::GET_CAMERA_MODE_LIST, (const char *)arg1);
    } else {
      ArCameraCommands::GET_CAMERA_MODE_LIST = 0;
    }
  }
}


SWIGEXPORT char * SWIGSTDCALL CSharp_ArCameraCommands_GET_CAMERA_MODE_LIST_get() {
  char * jresult ;
  char *result = 0 ;
  
  result = (char *)ArCameraCommands::GET_CAMERA_MODE_LIST;
  jresult = SWIG_csharp_string_callback((const char *)result); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_ArCameraCommands_CAMERA_MODE_UPDATED_set(char * jarg1) {
  char *arg1 = (char *) 0 ;
  
  arg1 = (char *)jarg1; 
  {
    if (arg1) {
      ArCameraCommands::CAMERA_MODE_UPDATED = (char const *) (new char[strlen((const char *)arg1)+1]);
      strcpy((char *)ArCameraCommands::CAMERA_MODE_UPDATED, (const char *)arg1);
    } else {
      ArCameraCommands::CAMERA_MODE_UPDATED = 0;
    }
  }
}


SWIGEXPORT char * SWIGSTDCALL CSharp_ArCameraCommands_CAMERA_MODE_UPDATED_get() {
  char * jresult ;
  char *result = 0 ;
  
  result = (char *)ArCameraCommands::CAMERA_MODE_UPDATED;
  jresult = SWIG_csharp_string_callback((const char *)result); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_ArCameraCommands_SET_CAMERA_MODE_set(char * jarg1) {
  char *arg1 = (char *) 0 ;
  
  arg1 = (char *)jarg1; 
  {
    if (arg1) {
      ArCameraCommands::SET_CAMERA_MODE = (char const *) (new char[strlen((const char *)arg1)+1]);
      strcpy((char *)ArCameraCommands::SET_CAMERA_MODE, (const char *)arg1);
    } else {
      ArCameraCommands::SET_CAMERA_MODE = 0;
    }
  }
}


SWIGEXPORT char * SWIGSTDCALL CSharp_ArCameraCommands_SET_CAMERA_MODE_get() {
  char * jresult ;
  char *result = 0 ;
  
  result = (char *)ArCameraCommands::SET_CAMERA_MODE;
  jresult = SWIG_csharp_string_callback((const char *)result); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_ArCameraCommands_RESET_CAMERA_set(char * jarg1) {
  char *arg1 = (char *) 0 ;
  
  arg1 = (char *)jarg1; 
  {
    if (arg1) {
      ArCameraCommands::RESET_CAMERA = (char const *) (new char[strlen((const char *)arg1)+1]);
      strcpy((char *)ArCameraCommands::RESET_CAMERA, (const char *)arg1);
    } else {
      ArCameraCommands::RESET_CAMERA = 0;
    }
  }
}


SWIGEXPORT char * SWIGSTDCALL CSharp_ArCameraCommands_RESET_CAMERA_get() {
  char * jresult ;
  char *result = 0 ;
  
  result = (char *)ArCameraCommands::RESET_CAMERA;
  jresult = SWIG_csharp_string_callback((const char *)result); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_ArCameraCommands_GET_CAMERA_DATA_INT_set(char * jarg1) {
  char *arg1 = (char *) 0 ;
  
  arg1 = (char *)jarg1; 
  {
    if (arg1) {
      ArCameraCommands::GET_CAMERA_DATA_INT = (char const *) (new char[strlen((const char *)arg1)+1]);
      strcpy((char *)ArCameraCommands::GET_CAMERA_DATA_INT, (const char *)arg1);
    } else {
      ArCameraCommands::GET_CAMERA_DATA_INT = 0;
    }
  }
}


SWIGEXPORT char * SWIGSTDCALL CSharp_ArCameraCommands_GET_CAMERA_DATA_INT_get() {
  char * jresult ;
  char *result = 0 ;
  
  result = (char *)ArCameraCommands::GET_CAMERA_DATA_INT;
  jresult = SWIG_csharp_string_callback((const char *)result); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_ArCameraCommands_GET_CAMERA_INFO_INT_set(char * jarg1) {
  char *arg1 = (char *) 0 ;
  
  arg1 = (char *)jarg1; 
  {
    if (arg1) {
      ArCameraCommands::GET_CAMERA_INFO_INT = (char const *) (new char[strlen((const char *)arg1)+1]);
      strcpy((char *)ArCameraCommands::GET_CAMERA_INFO_INT, (const char *)arg1);
    } else {
      ArCameraCommands::GET_CAMERA_INFO_INT = 0;
    }
  }
}


SWIGEXPORT char * SWIGSTDCALL CSharp_ArCameraCommands_GET_CAMERA_INFO_INT_get() {
  char * jresult ;
  char *result = 0 ;
  
  result = (char *)ArCameraCommands::GET_CAMERA_INFO_INT;
  jresult = SWIG_csharp_string_callback((const char *)result); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_ArCameraCommands_SET_CAMERA_ABS_INT_set(char * jarg1) {
  char *arg1 = (char *) 0 ;
  
  arg1 = (char *)jarg1; 
  {
    if (arg1) {
      ArCameraCommands::SET_CAMERA_ABS_INT = (char const *) (new char[strlen((const char *)arg1)+1]);
      strcpy((char *)ArCameraCommands::SET_CAMERA_ABS_INT, (const char *)arg1);
    } else {
      ArCameraCommands::SET_CAMERA_ABS_INT = 0;
    }
  }
}


SWIGEXPORT char * SWIGSTDCALL CSharp_ArCameraCommands_SET_CAMERA_ABS_INT_get() {
  char * jresult ;
  char *result = 0 ;
  
  result = (char *)ArCameraCommands::SET_CAMERA_ABS_INT;
  jresult = SWIG_csharp_string_callback((const char *)result); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_ArCameraCommands_SET_CAMERA_REL_INT_set(char * jarg1) {
  char *arg1 = (char *) 0 ;
  
  arg1 = (char *)jarg1; 
  {
    if (arg1) {
      ArCameraCommands::SET_CAMERA_REL_INT = (char const *) (new char[strlen((const char *)arg1)+1]);
      strcpy((char *)ArCameraCommands::SET_CAMERA_REL_INT, (const char *)arg1);
    } else {
      ArCameraCommands::SET_CAMERA_REL_INT = 0;
    }
  }
}


SWIGEXPORT char * SWIGSTDCALL CSharp_ArCameraCommands_SET_CAMERA_REL_INT_get() {
  char * jresult ;
  char *result = 0 ;
  
  result = (char *)ArCameraCommands::SET_CAMERA_REL_INT;
  jresult = SWIG_csharp_string_callback((const char *)result); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_ArCameraCommands_SET_CAMERA_PCT_INT_set(char * jarg1) {
  char *arg1 = (char *) 0 ;
  
  arg1 = (char *)jarg1; 
  {
    if (arg1) {
      ArCameraCommands::SET_CAMERA_PCT_INT = (char const *) (new char[strlen((const char *)arg1)+1]);
      strcpy((char *)ArCameraCommands::SET_CAMERA_PCT_INT, (const char *)arg1);
    } else {
      ArCameraCommands::SET_CAMERA_PCT_INT = 0;
    }
  }
}


SWIGEXPORT char * SWIGSTDCALL CSharp_ArCameraCommands_SET_CAMERA_PCT_INT_get() {
  char * jresult ;
  char *result = 0 ;
  
  result = (char *)ArCameraCommands::SET_CAMERA_PCT_INT;
  jresult = SWIG_csharp_string_callback((const char *)result); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_ArCameraCommands_GET_VIDEO_set(char * jarg1) {
  char *arg1 = (char *) 0 ;
  
  arg1 = (char *)jarg1; 
  {
    if (arg1) {
      ArCameraCommands::GET_VIDEO = (char const *) (new char[strlen((const char *)arg1)+1]);
      strcpy((char *)ArCameraCommands::GET_VIDEO, (const char *)arg1);
    } else {
      ArCameraCommands::GET_VIDEO = 0;
    }
  }
}


SWIGEXPORT char * SWIGSTDCALL CSharp_ArCameraCommands_GET_VIDEO_get() {
  char * jresult ;
  char *result = 0 ;
  
  result = (char *)ArCameraCommands::GET_VIDEO;
  jresult = SWIG_csharp_string_callback((const char *)result); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_ArCameraCommands_GET_SNAPSHOT_PLAIN_set(char * jarg1) {
  char *arg1 = (char *) 0 ;
  
  arg1 = (char *)jarg1; 
  {
    if (arg1) {
      ArCameraCommands::GET_SNAPSHOT_PLAIN = (char const *) (new char[strlen((const char *)arg1)+1]);
      strcpy((char *)ArCameraCommands::GET_SNAPSHOT_PLAIN, (const char *)arg1);
    } else {
      ArCameraCommands::GET_SNAPSHOT_PLAIN = 0;
    }
  }
}


SWIGEXPORT char * SWIGSTDCALL CSharp_ArCameraCommands_GET_SNAPSHOT_PLAIN_get() {
  char * jresult ;
  char *result = 0 ;
  
  result = (char *)ArCameraCommands::GET_SNAPSHOT_PLAIN;
  jresult = SWIG_csharp_string_callback((const char *)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_ArCameraCommands() {
  void * jresult ;
  ArCameraCommands *result = 0 ;
  
  result = (ArCameraCommands *)new ArCameraCommands();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_ArCameraCommands(void * jarg1) {
  ArCameraCommands *arg1 = (ArCameraCommands *) 0 ;
  
  arg1 = (ArCameraCommands *)jarg1; 
  delete arg1;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_ArCommands() {
  void * jresult ;
  ArCommands *result = 0 ;
  
  result = (ArCommands *)new ArCommands();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_ArCommands(void * jarg1) {
  ArCommands *arg1 = (ArCommands *) 0 ;
  
  arg1 = (ArCommands *)jarg1; 
  delete arg1;
}


SWIGEXPORT int SWIGSTDCALL CSharp_ArCondition_STATUS_FAILED_get() {
  int jresult ;
  int result;
  
  result = (int)ArCondition::STATUS_FAILED;
  jresult = (int)result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_ArCondition_STATUS_FAILED_DESTROY_get() {
  int jresult ;
  int result;
  
  result = (int)ArCondition::STATUS_FAILED_DESTROY;
  jresult = (int)result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_ArCondition_STATUS_FAILED_INIT_get() {
  int jresult ;
  int result;
  
  result = (int)ArCondition::STATUS_FAILED_INIT;
  jresult = (int)result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_ArCondition_STATUS_WAIT_TIMEDOUT_get() {
  int jresult ;
  int result;
  
  result = (int)ArCondition::STATUS_WAIT_TIMEDOUT;
  jresult = (int)result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_ArCondition_STATUS_WAIT_INTR_get() {
  int jresult ;
  int result;
  
  result = (int)ArCondition::STATUS_WAIT_INTR;
  jresult = (int)result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_ArCondition_STATUS_MUTEX_FAILED_INIT_get() {
  int jresult ;
  int result;
  
  result = (int)ArCondition::STATUS_MUTEX_FAILED_INIT;
  jresult = (int)result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_ArCondition_STATUS_MUTEX_FAILED_get() {
  int jresult ;
  int result;
  
  result = (int)ArCondition::STATUS_MUTEX_FAILED;
  jresult = (int)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_ArCondition() {
  void * jresult ;
  ArCondition *result = 0 ;
  
  result = (ArCondition *)new ArCondition();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_ArCondition(void * jarg1) {
  ArCondition *arg1 = (ArCondition *) 0 ;
  
  arg1 = (ArCondition *)jarg1; 
  delete arg1;
}


SWIGEXPORT int SWIGSTDCALL CSharp_ArCondition_signal(void * jarg1) {
  int jresult ;
  ArCondition *arg1 = (ArCondition *) 0 ;
  int result;
  
  arg1 = (ArCondition *)jarg1; 
  result = (int)(arg1)->signal();
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_ArCondition_broadcast(void * jarg1) {
  int jresult ;
  ArCondition *arg1 = (ArCondition *) 0 ;
  int result;
  
  arg1 = (ArCondition *)jarg1; 
  result = (int)(arg1)->broadcast();
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_ArCondition_wait(void * jarg1) {
  int jresult ;
  ArCondition *arg1 = (ArCondition *) 0 ;
  int result;
  
  arg1 = (ArCondition *)jarg1; 
  result = (int)(arg1)->wait();
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_ArCondition_timedWait(void * jarg1, unsigned int jarg2) {
  int jresult ;
  ArCondition *arg1 = (ArCondition *) 0 ;
  unsigned int arg2 ;
  int result;
  
  arg1 = (ArCondition *)jarg1; 
  arg2 = (unsigned int)jarg2; 
  result = (int)(arg1)->timedWait(arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT char * SWIGSTDCALL CSharp_ArCondition_getError(void * jarg1, int jarg2) {
  char * jresult ;
  ArCondition *arg1 = (ArCondition *) 0 ;
  int arg2 ;
  char *result = 0 ;
  
  arg1 = (ArCondition *)jarg1; 
  arg2 = (int)jarg2; 
  result = (char *)((ArCondition const *)arg1)->getError(arg2);
  jresult = SWIG_csharp_string_callback((const char *)result); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_ArCondition_setLogName(void * jarg1, char * jarg2) {
  ArCondition *arg1 = (ArCondition *) 0 ;
  char *arg2 = (char *) 0 ;
  
  arg1 = (ArCondition *)jarg1; 
  arg2 = (char *)jarg2; 
  (arg1)->setLogName((char const *)arg2);
}


SWIGEXPORT char * SWIGSTDCALL CSharp_ArCondition_getLogName(void * jarg1) {
  char * jresult ;
  ArCondition *arg1 = (ArCondition *) 0 ;
  char *result = 0 ;
  
  arg1 = (ArCondition *)jarg1; 
  result = (char *)(arg1)->getLogName();
  jresult = SWIG_csharp_string_callback((const char *)result); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_ArConfig_CATEGORY_ROBOT_INTERFACE_set(char * jarg1) {
  char *arg1 = (char *) 0 ;
  
  arg1 = (char *)jarg1; 
  {
    if (arg1) {
      ArConfig::CATEGORY_ROBOT_INTERFACE = (char const *) (new char[strlen((const char *)arg1)+1]);
      strcpy((char *)ArConfig::CATEGORY_ROBOT_INTERFACE, (const char *)arg1);
    } else {
      ArConfig::CATEGORY_ROBOT_INTERFACE = 0;
    }
  }
}


SWIGEXPORT char * SWIGSTDCALL CSharp_ArConfig_CATEGORY_ROBOT_INTERFACE_get() {
  char * jresult ;
  char *result = 0 ;
  
  result = (char *)ArConfig::CATEGORY_ROBOT_INTERFACE;
  jresult = SWIG_csharp_string_callback((const char *)result); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_ArConfig_CATEGORY_ROBOT_OPERATION_set(char * jarg1) {
  char *arg1 = (char *) 0 ;
  
  arg1 = (char *)jarg1; 
  {
    if (arg1) {
      ArConfig::CATEGORY_ROBOT_OPERATION = (char const *) (new char[strlen((const char *)arg1)+1]);
      strcpy((char *)ArConfig::CATEGORY_ROBOT_OPERATION, (const char *)arg1);
    } else {
      ArConfig::CATEGORY_ROBOT_OPERATION = 0;
    }
  }
}


SWIGEXPORT char * SWIGSTDCALL CSharp_ArConfig_CATEGORY_ROBOT_OPERATION_get() {
  char * jresult ;
  char *result = 0 ;
  
  result = (char *)ArConfig::CATEGORY_ROBOT_OPERATION;
  jresult = SWIG_csharp_string_callback((const char *)result); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_ArConfig_CATEGORY_ROBOT_PHYSICAL_set(char * jarg1) {
  char *arg1 = (char *) 0 ;
  
  arg1 = (char *)jarg1; 
  {
    if (arg1) {
      ArConfig::CATEGORY_ROBOT_PHYSICAL = (char const *) (new char[strlen((const char *)arg1)+1]);
      strcpy((char *)ArConfig::CATEGORY_ROBOT_PHYSICAL, (const char *)arg1);
    } else {
      ArConfig::CATEGORY_ROBOT_PHYSICAL = 0;
    }
  }
}


SWIGEXPORT char * SWIGSTDCALL CSharp_ArConfig_CATEGORY_ROBOT_PHYSICAL_get() {
  char * jresult ;
  char *result = 0 ;
  
  result = (char *)ArConfig::CATEGORY_ROBOT_PHYSICAL;
  jresult = SWIG_csharp_string_callback((const char *)result); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_ArConfig_CATEGORY_FLEET_set(char * jarg1) {
  char *arg1 = (char *) 0 ;
  
  arg1 = (char *)jarg1; 
  {
    if (arg1) {
      ArConfig::CATEGORY_FLEET = (char const *) (new char[strlen((const char *)arg1)+1]);
      strcpy((char *)ArConfig::CATEGORY_FLEET, (const char *)arg1);
    } else {
      ArConfig::CATEGORY_FLEET = 0;
    }
  }
}


SWIGEXPORT char * SWIGSTDCALL CSharp_ArConfig_CATEGORY_FLEET_get() {
  char * jresult ;
  char *result = 0 ;
  
  result = (char *)ArConfig::CATEGORY_FLEET;
  jresult = SWIG_csharp_string_callback((const char *)result); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_ArConfig_CATEGORY_SECURITY_set(char * jarg1) {
  char *arg1 = (char *) 0 ;
  
  arg1 = (char *)jarg1; 
  {
    if (arg1) {
      ArConfig::CATEGORY_SECURITY = (char const *) (new char[strlen((const char *)arg1)+1]);
      strcpy((char *)ArConfig::CATEGORY_SECURITY, (const char *)arg1);
    } else {
      ArConfig::CATEGORY_SECURITY = 0;
    }
  }
}


SWIGEXPORT char * SWIGSTDCALL CSharp_ArConfig_CATEGORY_SECURITY_get() {
  char * jresult ;
  char *result = 0 ;
  
  result = (char *)ArConfig::CATEGORY_SECURITY;
  jresult = SWIG_csharp_string_callback((const char *)result); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_ArConfig_CATEGORY_DEBUG_set(char * jarg1) {
  char *arg1 = (char *) 0 ;
  
  arg1 = (char *)jarg1; 
  {
    if (arg1) {
      ArConfig::CATEGORY_DEBUG = (char const *) (new char[strlen((const char *)arg1)+1]);
      strcpy((char *)ArConfig::CATEGORY_DEBUG, (const char *)arg1);
    } else {
      ArConfig::CATEGORY_DEBUG = 0;
    }
  }
}


SWIGEXPORT char * SWIGSTDCALL CSharp_ArConfig_CATEGORY_DEBUG_get() {
  char * jresult ;
  char *result = 0 ;
  
  result = (char *)ArConfig::CATEGORY_DEBUG;
  jresult = SWIG_csharp_string_callback((const char *)result); 
  return jresult;
}


SWIGEXPORT char * SWIGSTDCALL CSharp_ArConfig_toCategoryName(char * jarg1) {
  char * jresult ;
  char *arg1 = (char *) 0 ;
  char *result = 0 ;
  
  arg1 = (char *)jarg1; 
  result = (char *)ArConfig::toCategoryName((char const *)arg1);
  jresult = SWIG_csharp_string_callback((const char *)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_ArConfig__SWIG_0(char * jarg1, unsigned int jarg2, unsigned int jarg3, unsigned int jarg4, unsigned int jarg5) {
  void * jresult ;
  char *arg1 = (char *) 0 ;
  bool arg2 ;
  bool arg3 ;
  bool arg4 ;
  bool arg5 ;
  ArConfig *result = 0 ;
  
  arg1 = (char *)jarg1; 
  arg2 = jarg2 ? true : false; 
  arg3 = jarg3 ? true : false; 
  arg4 = jarg4 ? true : false; 
  arg5 = jarg5 ? true : false; 
  result = (ArConfig *)new ArConfig((char const *)arg1,arg2,arg3,arg4,arg5);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_ArConfig__SWIG_1(char * jarg1, unsigned int jarg2, unsigned int jarg3, unsigned int jarg4) {
  void * jresult ;
  char *arg1 = (char *) 0 ;
  bool arg2 ;
  bool arg3 ;
  bool arg4 ;
  ArConfig *result = 0 ;
  
  arg1 = (char *)jarg1; 
  arg2 = jarg2 ? true : false; 
  arg3 = jarg3 ? true : false; 
  arg4 = jarg4 ? true : false; 
  result = (ArConfig *)new ArConfig((char const *)arg1,arg2,arg3,arg4);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_ArConfig__SWIG_2(char * jarg1, unsigned int jarg2, unsigned int jarg3) {
  void * jresult ;
  char *arg1 = (char *) 0 ;
  bool arg2 ;
  bool arg3 ;
  ArConfig *result = 0 ;
  
  arg1 = (char *)jarg1; 
  arg2 = jarg2 ? true : false; 
  arg3 = jarg3 ? true : false; 
  result = (ArConfig *)new ArConfig((char const *)arg1,arg2,arg3);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_ArConfig__SWIG_3(char * jarg1, unsigned int jarg2) {
  void * jresult ;
  char *arg1 = (char *) 0 ;
  bool arg2 ;
  ArConfig *result = 0 ;
  
  arg1 = (char *)jarg1; 
  arg2 = jarg2 ? true : false; 
  result = (ArConfig *)new ArConfig((char const *)arg1,arg2);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_ArConfig__SWIG_4(char * jarg1) {
  void * jresult ;
  char *arg1 = (char *) 0 ;
  ArConfig *result = 0 ;
  
  arg1 = (char *)jarg1; 
  result = (ArConfig *)new ArConfig((char const *)arg1);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_ArConfig__SWIG_5() {
  void * jresult ;
  ArConfig *result = 0 ;
  
  result = (ArConfig *)new ArConfig();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_ArConfig(void * jarg1) {
  ArConfig *arg1 = (ArConfig *) 0 ;
  
  arg1 = (ArConfig *)jarg1; 
  delete arg1;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_ArConfig__SWIG_6(void * jarg1) {
  void * jresult ;
  ArConfig *arg1 = 0 ;
  ArConfig *result = 0 ;
  
  arg1 = (ArConfig *)jarg1;
  if (!arg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "ArConfig const & type is null", 0);
    return 0;
  } 
  result = (ArConfig *)new ArConfig((ArConfig const &)*arg1);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_ArConfig_copyAndDetach(void * jarg1, void * jarg2) {
  ArConfig *arg1 = (ArConfig *) 0 ;
  ArConfig *arg2 = 0 ;
  
  arg1 = (ArConfig *)jarg1; 
  arg2 = (ArConfig *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "ArConfig const & type is null", 0);
    return ;
  } 
  (arg1)->copyAndDetach((ArConfig const &)*arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_ArConfig_setConfigName__SWIG_0(void * jarg1, char * jarg2, char * jarg3) {
  ArConfig *arg1 = (ArConfig *) 0 ;
  char *arg2 = (char *) 0 ;
  char *arg3 = (char *) 0 ;
  
  arg1 = (ArConfig *)jarg1; 
  arg2 = (char *)jarg2; 
  arg3 = (char *)jarg3; 
  (arg1)->setConfigName((char const *)arg2,(char const *)arg3);
}


SWIGEXPORT void SWIGSTDCALL CSharp_ArConfig_setConfigName__SWIG_1(void * jarg1, char * jarg2) {
  ArConfig *arg1 = (ArConfig *) 0 ;
  char *arg2 = (char *) 0 ;
  
  arg1 = (ArConfig *)jarg1; 
  arg2 = (char *)jarg2; 
  (arg1)->setConfigName((char const *)arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_ArConfig_setQuiet(void * jarg1, unsigned int jarg2) {
  ArConfig *arg1 = (ArConfig *) 0 ;
  bool arg2 ;
  
  arg1 = (ArConfig *)jarg1; 
  arg2 = jarg2 ? true : false; 
  (arg1)->setQuiet(arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_ArConfig_setTranslator(void * jarg1, void * jarg2) {
  ArConfig *arg1 = (ArConfig *) 0 ;
  ArConfig *arg2 = (ArConfig *) 0 ;
  
  arg1 = (ArConfig *)jarg1; 
  arg2 = (ArConfig *)jarg2; 
  (arg1)->setTranslator(arg2);
}


SWIGEXPORT void * SWIGSTDCALL CSharp_ArConfig_getTranslator(void * jarg1) {
  void * jresult ;
  ArConfig *arg1 = (ArConfig *) 0 ;
  ArConfig *result = 0 ;
  
  arg1 = (ArConfig *)jarg1; 
  result = (ArConfig *)((ArConfig const *)arg1)->getTranslator();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_ArConfig_parseFile__SWIG_0(void * jarg1, char * jarg2, unsigned int jarg3, unsigned int jarg4, char * jarg5, unsigned long jarg6, void * jarg7, int jarg8, int jarg9, void * jarg10) {
  unsigned int jresult ;
  ArConfig *arg1 = (ArConfig *) 0 ;
  char *arg2 = (char *) 0 ;
  bool arg3 ;
  bool arg4 ;
  char *arg5 = (char *) 0 ;
  size_t arg6 ;
  std::list< std::string > *arg7 = (std::list< std::string > *) 0 ;
  ArPriority::Priority arg8 ;
  ArPriority::Priority arg9 ;
  ArConfigArg::RestartLevel *arg10 = (ArConfigArg::RestartLevel *) 0 ;
  bool result;
  
  arg1 = (ArConfig *)jarg1; 
  arg2 = (char *)jarg2; 
  arg3 = jarg3 ? true : false; 
  arg4 = jarg4 ? true : false; 
  arg5 = (char *)jarg5; 
  arg6 = (size_t)jarg6; 
  arg7 = (std::list< std::string > *)jarg7; 
  arg8 = (ArPriority::Priority)jarg8; 
  arg9 = (ArPriority::Priority)jarg9; 
  arg10 = (ArConfigArg::RestartLevel *)jarg10; 
  result = (bool)(arg1)->parseFile((char const *)arg2,arg3,arg4,arg5,arg6,arg7,arg8,arg9,arg10);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_ArConfig_parseFile__SWIG_1(void * jarg1, char * jarg2, unsigned int jarg3, unsigned int jarg4, char * jarg5, unsigned long jarg6, void * jarg7, int jarg8, int jarg9) {
  unsigned int jresult ;
  ArConfig *arg1 = (ArConfig *) 0 ;
  char *arg2 = (char *) 0 ;
  bool arg3 ;
  bool arg4 ;
  char *arg5 = (char *) 0 ;
  size_t arg6 ;
  std::list< std::string > *arg7 = (std::list< std::string > *) 0 ;
  ArPriority::Priority arg8 ;
  ArPriority::Priority arg9 ;
  bool result;
  
  arg1 = (ArConfig *)jarg1; 
  arg2 = (char *)jarg2; 
  arg3 = jarg3 ? true : false; 
  arg4 = jarg4 ? true : false; 
  arg5 = (char *)jarg5; 
  arg6 = (size_t)jarg6; 
  arg7 = (std::list< std::string > *)jarg7; 
  arg8 = (ArPriority::Priority)jarg8; 
  arg9 = (ArPriority::Priority)jarg9; 
  result = (bool)(arg1)->parseFile((char const *)arg2,arg3,arg4,arg5,arg6,arg7,arg8,arg9);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_ArConfig_parseFile__SWIG_2(void * jarg1, char * jarg2, unsigned int jarg3, unsigned int jarg4, char * jarg5, unsigned long jarg6, void * jarg7, int jarg8) {
  unsigned int jresult ;
  ArConfig *arg1 = (ArConfig *) 0 ;
  char *arg2 = (char *) 0 ;
  bool arg3 ;
  bool arg4 ;
  char *arg5 = (char *) 0 ;
  size_t arg6 ;
  std::list< std::string > *arg7 = (std::list< std::string > *) 0 ;
  ArPriority::Priority arg8 ;
  bool result;
  
  arg1 = (ArConfig *)jarg1; 
  arg2 = (char *)jarg2; 
  arg3 = jarg3 ? true : false; 
  arg4 = jarg4 ? true : false; 
  arg5 = (char *)jarg5; 
  arg6 = (size_t)jarg6; 
  arg7 = (std::list< std::string > *)jarg7; 
  arg8 = (ArPriority::Priority)jarg8; 
  result = (bool)(arg1)->parseFile((char const *)arg2,arg3,arg4,arg5,arg6,arg7,arg8);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_ArConfig_parseFile__SWIG_3(void * jarg1, char * jarg2, unsigned int jarg3, unsigned int jarg4, char * jarg5, unsigned long jarg6, void * jarg7) {
  unsigned int jresult ;
  ArConfig *arg1 = (ArConfig *) 0 ;
  char *arg2 = (char *) 0 ;
  bool arg3 ;
  bool arg4 ;
  char *arg5 = (char *) 0 ;
  size_t arg6 ;
  std::list< std::string > *arg7 = (std::list< std::string > *) 0 ;
  bool result;
  
  arg1 = (ArConfig *)jarg1; 
  arg2 = (char *)jarg2; 
  arg3 = jarg3 ? true : false; 
  arg4 = jarg4 ? true : false; 
  arg5 = (char *)jarg5; 
  arg6 = (size_t)jarg6; 
  arg7 = (std::list< std::string > *)jarg7; 
  result = (bool)(arg1)->parseFile((char const *)arg2,arg3,arg4,arg5,arg6,arg7);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_ArConfig_parseFile__SWIG_4(void * jarg1, char * jarg2, unsigned int jarg3, unsigned int jarg4, char * jarg5, unsigned long jarg6) {
  unsigned int jresult ;
  ArConfig *arg1 = (ArConfig *) 0 ;
  char *arg2 = (char *) 0 ;
  bool arg3 ;
  bool arg4 ;
  char *arg5 = (char *) 0 ;
  size_t arg6 ;
  bool result;
  
  arg1 = (ArConfig *)jarg1; 
  arg2 = (char *)jarg2; 
  arg3 = jarg3 ? true : false; 
  arg4 = jarg4 ? true : false; 
  arg5 = (char *)jarg5; 
  arg6 = (size_t)jarg6; 
  result = (bool)(arg1)->parseFile((char const *)arg2,arg3,arg4,arg5,arg6);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_ArConfig_parseFile__SWIG_5(void * jarg1, char * jarg2, unsigned int jarg3, unsigned int jarg4, char * jarg5) {
  unsigned int jresult ;
  ArConfig *arg1 = (ArConfig *) 0 ;
  char *arg2 = (char *) 0 ;
  bool arg3 ;
  bool arg4 ;
  char *arg5 = (char *) 0 ;
  bool result;
  
  arg1 = (ArConfig *)jarg1; 
  arg2 = (char *)jarg2; 
  arg3 = jarg3 ? true : false; 
  arg4 = jarg4 ? true : false; 
  arg5 = (char *)jarg5; 
  result = (bool)(arg1)->parseFile((char const *)arg2,arg3,arg4,arg5);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_ArConfig_parseFile__SWIG_6(void * jarg1, char * jarg2, unsigned int jarg3, unsigned int jarg4) {
  unsigned int jresult ;
  ArConfig *arg1 = (ArConfig *) 0 ;
  char *arg2 = (char *) 0 ;
  bool arg3 ;
  bool arg4 ;
  bool result;
  
  arg1 = (ArConfig *)jarg1; 
  arg2 = (char *)jarg2; 
  arg3 = jarg3 ? true : false; 
  arg4 = jarg4 ? true : false; 
  result = (bool)(arg1)->parseFile((char const *)arg2,arg3,arg4);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_ArConfig_parseFile__SWIG_7(void * jarg1, char * jarg2, unsigned int jarg3) {
  unsigned int jresult ;
  ArConfig *arg1 = (ArConfig *) 0 ;
  char *arg2 = (char *) 0 ;
  bool arg3 ;
  bool result;
  
  arg1 = (ArConfig *)jarg1; 
  arg2 = (char *)jarg2; 
  arg3 = jarg3 ? true : false; 
  result = (bool)(arg1)->parseFile((char const *)arg2,arg3);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_ArConfig_parseFile__SWIG_8(void * jarg1, char * jarg2) {
  unsigned int jresult ;
  ArConfig *arg1 = (ArConfig *) 0 ;
  char *arg2 = (char *) 0 ;
  bool result;
  
  arg1 = (ArConfig *)jarg1; 
  arg2 = (char *)jarg2; 
  result = (bool)(arg1)->parseFile((char const *)arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_ArConfig_writeFile__SWIG_0(void * jarg1, char * jarg2, unsigned int jarg3, void * jarg4, unsigned int jarg5, void * jarg6, int jarg7, int jarg8) {
  unsigned int jresult ;
  ArConfig *arg1 = (ArConfig *) 0 ;
  char *arg2 = (char *) 0 ;
  bool arg3 ;
  std::set< std::string > *arg4 = (std::set< std::string > *) 0 ;
  bool arg5 ;
  std::list< std::string > *arg6 = (std::list< std::string > *) 0 ;
  ArPriority::Priority arg7 ;
  ArPriority::Priority arg8 ;
  bool result;
  
  arg1 = (ArConfig *)jarg1; 
  arg2 = (char *)jarg2; 
  arg3 = jarg3 ? true : false; 
  arg4 = (std::set< std::string > *)jarg4; 
  arg5 = jarg5 ? true : false; 
  arg6 = (std::list< std::string > *)jarg6; 
  arg7 = (ArPriority::Priority)jarg7; 
  arg8 = (ArPriority::Priority)jarg8; 
  result = (bool)(arg1)->writeFile((char const *)arg2,arg3,arg4,arg5,arg6,arg7,arg8);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_ArConfig_writeFile__SWIG_1(void * jarg1, char * jarg2, unsigned int jarg3, void * jarg4, unsigned int jarg5, void * jarg6, int jarg7) {
  unsigned int jresult ;
  ArConfig *arg1 = (ArConfig *) 0 ;
  char *arg2 = (char *) 0 ;
  bool arg3 ;
  std::set< std::string > *arg4 = (std::set< std::string > *) 0 ;
  bool arg5 ;
  std::list< std::string > *arg6 = (std::list< std::string > *) 0 ;
  ArPriority::Priority arg7 ;
  bool result;
  
  arg1 = (ArConfig *)jarg1; 
  arg2 = (char *)jarg2; 
  arg3 = jarg3 ? true : false; 
  arg4 = (std::set< std::string > *)jarg4; 
  arg5 = jarg5 ? true : false; 
  arg6 = (std::list< std::string > *)jarg6; 
  arg7 = (ArPriority::Priority)jarg7; 
  result = (bool)(arg1)->writeFile((char const *)arg2,arg3,arg4,arg5,arg6,arg7);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_ArConfig_writeFile__SWIG_2(void * jarg1, char * jarg2, unsigned int jarg3, void * jarg4, unsigned int jarg5, void * jarg6) {
  unsigned int jresult ;
  ArConfig *arg1 = (ArConfig *) 0 ;
  char *arg2 = (char *) 0 ;
  bool arg3 ;
  std::set< std::string > *arg4 = (std::set< std::string > *) 0 ;
  bool arg5 ;
  std::list< std::string > *arg6 = (std::list< std::string > *) 0 ;
  bool result;
  
  arg1 = (ArConfig *)jarg1; 
  arg2 = (char *)jarg2; 
  arg3 = jarg3 ? true : false; 
  arg4 = (std::set< std::string > *)jarg4; 
  arg5 = jarg5 ? true : false; 
  arg6 = (std::list< std::string > *)jarg6; 
  result = (bool)(arg1)->writeFile((char const *)arg2,arg3,arg4,arg5,arg6);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_ArConfig_writeFile__SWIG_3(void * jarg1, char * jarg2, unsigned int jarg3, void * jarg4, unsigned int jarg5) {
  unsigned int jresult ;
  ArConfig *arg1 = (ArConfig *) 0 ;
  char *arg2 = (char *) 0 ;
  bool arg3 ;
  std::set< std::string > *arg4 = (std::set< std::string > *) 0 ;
  bool arg5 ;
  bool result;
  
  arg1 = (ArConfig *)jarg1; 
  arg2 = (char *)jarg2; 
  arg3 = jarg3 ? true : false; 
  arg4 = (std::set< std::string > *)jarg4; 
  arg5 = jarg5 ? true : false; 
  result = (bool)(arg1)->writeFile((char const *)arg2,arg3,arg4,arg5);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_ArConfig_writeFile__SWIG_4(void * jarg1, char * jarg2, unsigned int jarg3, void * jarg4) {
  unsigned int jresult ;
  ArConfig *arg1 = (ArConfig *) 0 ;
  char *arg2 = (char *) 0 ;
  bool arg3 ;
  std::set< std::string > *arg4 = (std::set< std::string > *) 0 ;
  bool result;
  
  arg1 = (ArConfig *)jarg1; 
  arg2 = (char *)jarg2; 
  arg3 = jarg3 ? true : false; 
  arg4 = (std::set< std::string > *)jarg4; 
  result = (bool)(arg1)->writeFile((char const *)arg2,arg3,arg4);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_ArConfig_writeFile__SWIG_5(void * jarg1, char * jarg2, unsigned int jarg3) {
  unsigned int jresult ;
  ArConfig *arg1 = (ArConfig *) 0 ;
  char *arg2 = (char *) 0 ;
  bool arg3 ;
  bool result;
  
  arg1 = (ArConfig *)jarg1; 
  arg2 = (char *)jarg2; 
  arg3 = jarg3 ? true : false; 
  result = (bool)(arg1)->writeFile((char const *)arg2,arg3);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_ArConfig_writeFile__SWIG_6(void * jarg1, char * jarg2) {
  unsigned int jresult ;
  ArConfig *arg1 = (ArConfig *) 0 ;
  char *arg2 = (char *) 0 ;
  bool result;
  
  arg1 = (ArConfig *)jarg1; 
  arg2 = (char *)jarg2; 
  result = (bool)(arg1)->writeFile((char const *)arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_ArConfig_parseText__SWIG_0(void * jarg1, void * jarg2, unsigned int jarg3, void * jarg4, void * jarg5, char * jarg6, unsigned long jarg7, void * jarg8, int jarg9, int jarg10, void * jarg11) {
  unsigned int jresult ;
  ArConfig *arg1 = (ArConfig *) 0 ;
  std::list< std::string > *arg2 = 0 ;
  bool arg3 ;
  bool *arg4 = (bool *) 0 ;
  bool *arg5 = (bool *) 0 ;
  char *arg6 = (char *) 0 ;
  size_t arg7 ;
  std::list< std::string > *arg8 = (std::list< std::string > *) 0 ;
  ArPriority::Priority arg9 ;
  ArPriority::Priority arg10 ;
  ArConfigArg::RestartLevel *arg11 = (ArConfigArg::RestartLevel *) 0 ;
  bool result;
  
  arg1 = (ArConfig *)jarg1; 
  arg2 = (std::list< std::string > *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "std::list< std::string > const & type is null", 0);
    return 0;
  } 
  arg3 = jarg3 ? true : false; 
  arg4 = (bool *)jarg4; 
  arg5 = (bool *)jarg5; 
  arg6 = (char *)jarg6; 
  arg7 = (size_t)jarg7; 
  arg8 = (std::list< std::string > *)jarg8; 
  arg9 = (ArPriority::Priority)jarg9; 
  arg10 = (ArPriority::Priority)jarg10; 
  arg11 = (ArConfigArg::RestartLevel *)jarg11; 
  result = (bool)(arg1)->parseText((std::list< std::string > const &)*arg2,arg3,arg4,arg5,arg6,arg7,arg8,arg9,arg10,arg11);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_ArConfig_parseText__SWIG_1(void * jarg1, void * jarg2, unsigned int jarg3, void * jarg4, void * jarg5, char * jarg6, unsigned long jarg7, void * jarg8, int jarg9, int jarg10) {
  unsigned int jresult ;
  ArConfig *arg1 = (ArConfig *) 0 ;
  std::list< std::string > *arg2 = 0 ;
  bool arg3 ;
  bool *arg4 = (bool *) 0 ;
  bool *arg5 = (bool *) 0 ;
  char *arg6 = (char *) 0 ;
  size_t arg7 ;
  std::list< std::string > *arg8 = (std::list< std::string > *) 0 ;
  ArPriority::Priority arg9 ;
  ArPriority::Priority arg10 ;
  bool result;
  
  arg1 = (ArConfig *)jarg1; 
  arg2 = (std::list< std::string > *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "std::list< std::string > const & type is null", 0);
    return 0;
  } 
  arg3 = jarg3 ? true : false; 
  arg4 = (bool *)jarg4; 
  arg5 = (bool *)jarg5; 
  arg6 = (char *)jarg6; 
  arg7 = (size_t)jarg7; 
  arg8 = (std::list< std::string > *)jarg8; 
  arg9 = (ArPriority::Priority)jarg9; 
  arg10 = (ArPriority::Priority)jarg10; 
  result = (bool)(arg1)->parseText((std::list< std::string > const &)*arg2,arg3,arg4,arg5,arg6,arg7,arg8,arg9,arg10);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_ArConfig_parseText__SWIG_2(void * jarg1, void * jarg2, unsigned int jarg3, void * jarg4, void * jarg5, char * jarg6, unsigned long jarg7, void * jarg8, int jarg9) {
  unsigned int jresult ;
  ArConfig *arg1 = (ArConfig *) 0 ;
  std::list< std::string > *arg2 = 0 ;
  bool arg3 ;
  bool *arg4 = (bool *) 0 ;
  bool *arg5 = (bool *) 0 ;
  char *arg6 = (char *) 0 ;
  size_t arg7 ;
  std::list< std::string > *arg8 = (std::list< std::string > *) 0 ;
  ArPriority::Priority arg9 ;
  bool result;
  
  arg1 = (ArConfig *)jarg1; 
  arg2 = (std::list< std::string > *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "std::list< std::string > const & type is null", 0);
    return 0;
  } 
  arg3 = jarg3 ? true : false; 
  arg4 = (bool *)jarg4; 
  arg5 = (bool *)jarg5; 
  arg6 = (char *)jarg6; 
  arg7 = (size_t)jarg7; 
  arg8 = (std::list< std::string > *)jarg8; 
  arg9 = (ArPriority::Priority)jarg9; 
  result = (bool)(arg1)->parseText((std::list< std::string > const &)*arg2,arg3,arg4,arg5,arg6,arg7,arg8,arg9);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_ArConfig_parseText__SWIG_3(void * jarg1, void * jarg2, unsigned int jarg3, void * jarg4, void * jarg5, char * jarg6, unsigned long jarg7, void * jarg8) {
  unsigned int jresult ;
  ArConfig *arg1 = (ArConfig *) 0 ;
  std::list< std::string > *arg2 = 0 ;
  bool arg3 ;
  bool *arg4 = (bool *) 0 ;
  bool *arg5 = (bool *) 0 ;
  char *arg6 = (char *) 0 ;
  size_t arg7 ;
  std::list< std::string > *arg8 = (std::list< std::string > *) 0 ;
  bool result;
  
  arg1 = (ArConfig *)jarg1; 
  arg2 = (std::list< std::string > *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "std::list< std::string > const & type is null", 0);
    return 0;
  } 
  arg3 = jarg3 ? true : false; 
  arg4 = (bool *)jarg4; 
  arg5 = (bool *)jarg5; 
  arg6 = (char *)jarg6; 
  arg7 = (size_t)jarg7; 
  arg8 = (std::list< std::string > *)jarg8; 
  result = (bool)(arg1)->parseText((std::list< std::string > const &)*arg2,arg3,arg4,arg5,arg6,arg7,arg8);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_ArConfig_parseText__SWIG_4(void * jarg1, void * jarg2, unsigned int jarg3, void * jarg4, void * jarg5, char * jarg6, unsigned long jarg7) {
  unsigned int jresult ;
  ArConfig *arg1 = (ArConfig *) 0 ;
  std::list< std::string > *arg2 = 0 ;
  bool arg3 ;
  bool *arg4 = (bool *) 0 ;
  bool *arg5 = (bool *) 0 ;
  char *arg6 = (char *) 0 ;
  size_t arg7 ;
  bool result;
  
  arg1 = (ArConfig *)jarg1; 
  arg2 = (std::list< std::string > *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "std::list< std::string > const & type is null", 0);
    return 0;
  } 
  arg3 = jarg3 ? true : false; 
  arg4 = (bool *)jarg4; 
  arg5 = (bool *)jarg5; 
  arg6 = (char *)jarg6; 
  arg7 = (size_t)jarg7; 
  result = (bool)(arg1)->parseText((std::list< std::string > const &)*arg2,arg3,arg4,arg5,arg6,arg7);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_ArConfig_parseText__SWIG_5(void * jarg1, void * jarg2, unsigned int jarg3, void * jarg4, void * jarg5, char * jarg6) {
  unsigned int jresult ;
  ArConfig *arg1 = (ArConfig *) 0 ;
  std::list< std::string > *arg2 = 0 ;
  bool arg3 ;
  bool *arg4 = (bool *) 0 ;
  bool *arg5 = (bool *) 0 ;
  char *arg6 = (char *) 0 ;
  bool result;
  
  arg1 = (ArConfig *)jarg1; 
  arg2 = (std::list< std::string > *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "std::list< std::string > const & type is null", 0);
    return 0;
  } 
  arg3 = jarg3 ? true : false; 
  arg4 = (bool *)jarg4; 
  arg5 = (bool *)jarg5; 
  arg6 = (char *)jarg6; 
  result = (bool)(arg1)->parseText((std::list< std::string > const &)*arg2,arg3,arg4,arg5,arg6);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_ArConfig_parseText__SWIG_6(void * jarg1, void * jarg2, unsigned int jarg3, void * jarg4, void * jarg5) {
  unsigned int jresult ;
  ArConfig *arg1 = (ArConfig *) 0 ;
  std::list< std::string > *arg2 = 0 ;
  bool arg3 ;
  bool *arg4 = (bool *) 0 ;
  bool *arg5 = (bool *) 0 ;
  bool result;
  
  arg1 = (ArConfig *)jarg1; 
  arg2 = (std::list< std::string > *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "std::list< std::string > const & type is null", 0);
    return 0;
  } 
  arg3 = jarg3 ? true : false; 
  arg4 = (bool *)jarg4; 
  arg5 = (bool *)jarg5; 
  result = (bool)(arg1)->parseText((std::list< std::string > const &)*arg2,arg3,arg4,arg5);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_ArConfig_parseText__SWIG_7(void * jarg1, void * jarg2, unsigned int jarg3, void * jarg4) {
  unsigned int jresult ;
  ArConfig *arg1 = (ArConfig *) 0 ;
  std::list< std::string > *arg2 = 0 ;
  bool arg3 ;
  bool *arg4 = (bool *) 0 ;
  bool result;
  
  arg1 = (ArConfig *)jarg1; 
  arg2 = (std::list< std::string > *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "std::list< std::string > const & type is null", 0);
    return 0;
  } 
  arg3 = jarg3 ? true : false; 
  arg4 = (bool *)jarg4; 
  result = (bool)(arg1)->parseText((std::list< std::string > const &)*arg2,arg3,arg4);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_ArConfig_parseText__SWIG_8(void * jarg1, void * jarg2, unsigned int jarg3) {
  unsigned int jresult ;
  ArConfig *arg1 = (ArConfig *) 0 ;
  std::list< std::string > *arg2 = 0 ;
  bool arg3 ;
  bool result;
  
  arg1 = (ArConfig *)jarg1; 
  arg2 = (std::list< std::string > *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "std::list< std::string > const & type is null", 0);
    return 0;
  } 
  arg3 = jarg3 ? true : false; 
  result = (bool)(arg1)->parseText((std::list< std::string > const &)*arg2,arg3);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_ArConfig_parseText__SWIG_9(void * jarg1, void * jarg2) {
  unsigned int jresult ;
  ArConfig *arg1 = (ArConfig *) 0 ;
  std::list< std::string > *arg2 = 0 ;
  bool result;
  
  arg1 = (ArConfig *)jarg1; 
  arg2 = (std::list< std::string > *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "std::list< std::string > const & type is null", 0);
    return 0;
  } 
  result = (bool)(arg1)->parseText((std::list< std::string > const &)*arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_ArConfig_parseResourceFile__SWIG_0(void * jarg1, char * jarg2, unsigned int jarg3, char * jarg4, unsigned long jarg5, void * jarg6) {
  unsigned int jresult ;
  ArConfig *arg1 = (ArConfig *) 0 ;
  char *arg2 = (char *) 0 ;
  bool arg3 ;
  char *arg4 = (char *) 0 ;
  size_t arg5 ;
  std::list< std::string > *arg6 = (std::list< std::string > *) 0 ;
  bool result;
  
  arg1 = (ArConfig *)jarg1; 
  arg2 = (char *)jarg2; 
  arg3 = jarg3 ? true : false; 
  arg4 = (char *)jarg4; 
  arg5 = (size_t)jarg5; 
  arg6 = (std::list< std::string > *)jarg6; 
  result = (bool)(arg1)->parseResourceFile((char const *)arg2,arg3,arg4,arg5,arg6);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_ArConfig_parseResourceFile__SWIG_1(void * jarg1, char * jarg2, unsigned int jarg3, char * jarg4, unsigned long jarg5) {
  unsigned int jresult ;
  ArConfig *arg1 = (ArConfig *) 0 ;
  char *arg2 = (char *) 0 ;
  bool arg3 ;
  char *arg4 = (char *) 0 ;
  size_t arg5 ;
  bool result;
  
  arg1 = (ArConfig *)jarg1; 
  arg2 = (char *)jarg2; 
  arg3 = jarg3 ? true : false; 
  arg4 = (char *)jarg4; 
  arg5 = (size_t)jarg5; 
  result = (bool)(arg1)->parseResourceFile((char const *)arg2,arg3,arg4,arg5);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_ArConfig_parseResourceFile__SWIG_2(void * jarg1, char * jarg2, unsigned int jarg3, char * jarg4) {
  unsigned int jresult ;
  ArConfig *arg1 = (ArConfig *) 0 ;
  char *arg2 = (char *) 0 ;
  bool arg3 ;
  char *arg4 = (char *) 0 ;
  bool result;
  
  arg1 = (ArConfig *)jarg1; 
  arg2 = (char *)jarg2; 
  arg3 = jarg3 ? true : false; 
  arg4 = (char *)jarg4; 
  result = (bool)(arg1)->parseResourceFile((char const *)arg2,arg3,arg4);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_ArConfig_parseResourceFile__SWIG_3(void * jarg1, char * jarg2, unsigned int jarg3) {
  unsigned int jresult ;
  ArConfig *arg1 = (ArConfig *) 0 ;
  char *arg2 = (char *) 0 ;
  bool arg3 ;
  bool result;
  
  arg1 = (ArConfig *)jarg1; 
  arg2 = (char *)jarg2; 
  arg3 = jarg3 ? true : false; 
  result = (bool)(arg1)->parseResourceFile((char const *)arg2,arg3);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_ArConfig_parseResourceFile__SWIG_4(void * jarg1, char * jarg2) {
  unsigned int jresult ;
  ArConfig *arg1 = (ArConfig *) 0 ;
  char *arg2 = (char *) 0 ;
  bool result;
  
  arg1 = (ArConfig *)jarg1; 
  arg2 = (char *)jarg2; 
  result = (bool)(arg1)->parseResourceFile((char const *)arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_ArConfig_parseResourceFile__SWIG_5(void * jarg1, void * jarg2) {
  ArConfig *arg1 = (ArConfig *) 0 ;
  ArArgumentBuilder *arg2 = (ArArgumentBuilder *) 0 ;
  
  arg1 = (ArConfig *)jarg1; 
  arg2 = (ArArgumentBuilder *)jarg2; 
  (arg1)->parseResourceFile(arg2);
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_ArConfig_writeResourceFile__SWIG_0(void * jarg1, char * jarg2, unsigned int jarg3, void * jarg4, void * jarg5) {
  unsigned int jresult ;
  ArConfig *arg1 = (ArConfig *) 0 ;
  char *arg2 = (char *) 0 ;
  bool arg3 ;
  std::set< std::string > *arg4 = (std::set< std::string > *) 0 ;
  std::list< std::string > *arg5 = (std::list< std::string > *) 0 ;
  bool result;
  
  arg1 = (ArConfig *)jarg1; 
  arg2 = (char *)jarg2; 
  arg3 = jarg3 ? true : false; 
  arg4 = (std::set< std::string > *)jarg4; 
  arg5 = (std::list< std::string > *)jarg5; 
  result = (bool)(arg1)->writeResourceFile((char const *)arg2,arg3,arg4,arg5);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_ArConfig_writeResourceFile__SWIG_1(void * jarg1, char * jarg2, unsigned int jarg3, void * jarg4) {
  unsigned int jresult ;
  ArConfig *arg1 = (ArConfig *) 0 ;
  char *arg2 = (char *) 0 ;
  bool arg3 ;
  std::set< std::string > *arg4 = (std::set< std::string > *) 0 ;
  bool result;
  
  arg1 = (ArConfig *)jarg1; 
  arg2 = (char *)jarg2; 
  arg3 = jarg3 ? true : false; 
  arg4 = (std::set< std::string > *)jarg4; 
  result = (bool)(arg1)->writeResourceFile((char const *)arg2,arg3,arg4);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_ArConfig_writeResourceFile__SWIG_2(void * jarg1, char * jarg2, unsigned int jarg3) {
  unsigned int jresult ;
  ArConfig *arg1 = (ArConfig *) 0 ;
  char *arg2 = (char *) 0 ;
  bool arg3 ;
  bool result;
  
  arg1 = (ArConfig *)jarg1; 
  arg2 = (char *)jarg2; 
  arg3 = jarg3 ? true : false; 
  result = (bool)(arg1)->writeResourceFile((char const *)arg2,arg3);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_ArConfig_writeResourceFile__SWIG_3(void * jarg1, char * jarg2) {
  unsigned int jresult ;
  ArConfig *arg1 = (ArConfig *) 0 ;
  char *arg2 = (char *) 0 ;
  bool result;
  
  arg1 = (ArConfig *)jarg1; 
  arg2 = (char *)jarg2; 
  result = (bool)(arg1)->writeResourceFile((char const *)arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_ArConfig_writeResourceFile__SWIG_4(void * jarg1, void * jarg2) {
  ArConfig *arg1 = (ArConfig *) 0 ;
  ArArgumentBuilder *arg2 = (ArArgumentBuilder *) 0 ;
  
  arg1 = (ArConfig *)jarg1; 
  arg2 = (ArArgumentBuilder *)jarg2; 
  (arg1)->writeResourceFile(arg2);
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_ArConfig_addSection(void * jarg1, char * jarg2, char * jarg3, char * jarg4) {
  unsigned int jresult ;
  ArConfig *arg1 = (ArConfig *) 0 ;
  char *arg2 = (char *) 0 ;
  char *arg3 = (char *) 0 ;
  char *arg4 = (char *) 0 ;
  bool result;
  
  arg1 = (ArConfig *)jarg1; 
  arg2 = (char *)jarg2; 
  arg3 = (char *)jarg3; 
  arg4 = (char *)jarg4; 
  result = (bool)(arg1)->addSection((char const *)arg2,(char const *)arg3,(char const *)arg4);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_ArConfig_addParam__SWIG_0(void * jarg1, void * jarg2, char * jarg3, int jarg4, char * jarg5, int jarg6) {
  unsigned int jresult ;
  ArConfig *arg1 = (ArConfig *) 0 ;
  ArConfigArg *arg2 = 0 ;
  char *arg3 = (char *) 0 ;
  ArPriority::Priority arg4 ;
  char *arg5 = (char *) 0 ;
  ArConfigArg::RestartLevel arg6 ;
  bool result;
  
  arg1 = (ArConfig *)jarg1; 
  arg2 = (ArConfigArg *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "ArConfigArg const & type is null", 0);
    return 0;
  } 
  arg3 = (char *)jarg3; 
  arg4 = (ArPriority::Priority)jarg4; 
  arg5 = (char *)jarg5; 
  arg6 = (ArConfigArg::RestartLevel)jarg6; 
  result = (bool)(arg1)->addParam((ArConfigArg const &)*arg2,(char const *)arg3,arg4,(char const *)arg5,arg6);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_ArConfig_addParam__SWIG_1(void * jarg1, void * jarg2, char * jarg3, int jarg4, char * jarg5) {
  unsigned int jresult ;
  ArConfig *arg1 = (ArConfig *) 0 ;
  ArConfigArg *arg2 = 0 ;
  char *arg3 = (char *) 0 ;
  ArPriority::Priority arg4 ;
  char *arg5 = (char *) 0 ;
  bool result;
  
  arg1 = (ArConfig *)jarg1; 
  arg2 = (ArConfigArg *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "ArConfigArg const & type is null", 0);
    return 0;
  } 
  arg3 = (char *)jarg3; 
  arg4 = (ArPriority::Priority)jarg4; 
  arg5 = (char *)jarg5; 
  result = (bool)(arg1)->addParam((ArConfigArg const &)*arg2,(char const *)arg3,arg4,(char const *)arg5);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_ArConfig_addParam__SWIG_2(void * jarg1, void * jarg2, char * jarg3, int jarg4) {
  unsigned int jresult ;
  ArConfig *arg1 = (ArConfig *) 0 ;
  ArConfigArg *arg2 = 0 ;
  char *arg3 = (char *) 0 ;
  ArPriority::Priority arg4 ;
  bool result;
  
  arg1 = (ArConfig *)jarg1; 
  arg2 = (ArConfigArg *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "ArConfigArg const & type is null", 0);
    return 0;
  } 
  arg3 = (char *)jarg3; 
  arg4 = (ArPriority::Priority)jarg4; 
  result = (bool)(arg1)->addParam((ArConfigArg const &)*arg2,(char const *)arg3,arg4);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_ArConfig_addParam__SWIG_3(void * jarg1, void * jarg2, char * jarg3) {
  unsigned int jresult ;
  ArConfig *arg1 = (ArConfig *) 0 ;
  ArConfigArg *arg2 = 0 ;
  char *arg3 = (char *) 0 ;
  bool result;
  
  arg1 = (ArConfig *)jarg1; 
  arg2 = (ArConfigArg *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "ArConfigArg const & type is null", 0);
    return 0;
  } 
  arg3 = (char *)jarg3; 
  result = (bool)(arg1)->addParam((ArConfigArg const &)*arg2,(char const *)arg3);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_ArConfig_addParam__SWIG_4(void * jarg1, void * jarg2) {
  unsigned int jresult ;
  ArConfig *arg1 = (ArConfig *) 0 ;
  ArConfigArg *arg2 = 0 ;
  bool result;
  
  arg1 = (ArConfig *)jarg1; 
  arg2 = (ArConfigArg *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "ArConfigArg const & type is null", 0);
    return 0;
  } 
  result = (bool)(arg1)->addParam((ArConfigArg const &)*arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_ArConfig_addComment__SWIG_0(void * jarg1, char * jarg2, char * jarg3, int jarg4) {
  unsigned int jresult ;
  ArConfig *arg1 = (ArConfig *) 0 ;
  char *arg2 = (char *) 0 ;
  char *arg3 = (char *) 0 ;
  ArPriority::Priority arg4 ;
  bool result;
  
  arg1 = (ArConfig *)jarg1; 
  arg2 = (char *)jarg2; 
  arg3 = (char *)jarg3; 
  arg4 = (ArPriority::Priority)jarg4; 
  result = (bool)(arg1)->addComment((char const *)arg2,(char const *)arg3,arg4);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_ArConfig_addComment__SWIG_1(void * jarg1, char * jarg2, char * jarg3) {
  unsigned int jresult ;
  ArConfig *arg1 = (ArConfig *) 0 ;
  char *arg2 = (char *) 0 ;
  char *arg3 = (char *) 0 ;
  bool result;
  
  arg1 = (ArConfig *)jarg1; 
  arg2 = (char *)jarg2; 
  arg3 = (char *)jarg3; 
  result = (bool)(arg1)->addComment((char const *)arg2,(char const *)arg3);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_ArConfig_addComment__SWIG_2(void * jarg1, char * jarg2) {
  unsigned int jresult ;
  ArConfig *arg1 = (ArConfig *) 0 ;
  char *arg2 = (char *) 0 ;
  bool result;
  
  arg1 = (ArConfig *)jarg1; 
  arg2 = (char *)jarg2; 
  result = (bool)(arg1)->addComment((char const *)arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_ArConfig_addParamAsIs__SWIG_0(void * jarg1, void * jarg2, char * jarg3) {
  unsigned int jresult ;
  ArConfig *arg1 = (ArConfig *) 0 ;
  ArConfigArg *arg2 = 0 ;
  char *arg3 = (char *) 0 ;
  bool result;
  
  arg1 = (ArConfig *)jarg1; 
  arg2 = (ArConfigArg *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "ArConfigArg const & type is null", 0);
    return 0;
  } 
  arg3 = (char *)jarg3; 
  result = (bool)(arg1)->addParamAsIs((ArConfigArg const &)*arg2,(char const *)arg3);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_ArConfig_addParamAsIs__SWIG_1(void * jarg1, void * jarg2) {
  unsigned int jresult ;
  ArConfig *arg1 = (ArConfig *) 0 ;
  ArConfigArg *arg2 = 0 ;
  bool result;
  
  arg1 = (ArConfig *)jarg1; 
  arg2 = (ArConfigArg *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "ArConfigArg const & type is null", 0);
    return 0;
  } 
  result = (bool)(arg1)->addParamAsIs((ArConfigArg const &)*arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_ArConfig_setSectionComment(void * jarg1, char * jarg2, char * jarg3) {
  ArConfig *arg1 = (ArConfig *) 0 ;
  char *arg2 = (char *) 0 ;
  char *arg3 = (char *) 0 ;
  
  arg1 = (ArConfig *)jarg1; 
  arg2 = (char *)jarg2; 
  arg3 = (char *)jarg3; 
  (arg1)->setSectionComment((char const *)arg2,(char const *)arg3);
}


SWIGEXPORT void SWIGSTDCALL CSharp_ArConfig_useArgumentParser(void * jarg1, void * jarg2) {
  ArConfig *arg1 = (ArConfig *) 0 ;
  ArArgumentParser *arg2 = (ArArgumentParser *) 0 ;
  
  arg1 = (ArConfig *)jarg1; 
  arg2 = (ArArgumentParser *)jarg2; 
  (arg1)->useArgumentParser(arg2);
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_ArConfig_processFile(void * jarg1) {
  unsigned int jresult ;
  ArConfig *arg1 = (ArConfig *) 0 ;
  bool result;
  
  arg1 = (ArConfig *)jarg1; 
  result = (bool)(arg1)->processFile();
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_ArConfig_addProcessFileCB__SWIG_0(void * jarg1, void * jarg2, int jarg3) {
  ArConfig *arg1 = (ArConfig *) 0 ;
  ArRetFunctor< bool > *arg2 = (ArRetFunctor< bool > *) 0 ;
  int arg3 ;
  
  arg1 = (ArConfig *)jarg1; 
  arg2 = (ArRetFunctor< bool > *)jarg2; 
  arg3 = (int)jarg3; 
  (arg1)->addProcessFileCB(arg2,arg3);
}


SWIGEXPORT void SWIGSTDCALL CSharp_ArConfig_addProcessFileCB__SWIG_1(void * jarg1, void * jarg2) {
  ArConfig *arg1 = (ArConfig *) 0 ;
  ArRetFunctor< bool > *arg2 = (ArRetFunctor< bool > *) 0 ;
  
  arg1 = (ArConfig *)jarg1; 
  arg2 = (ArRetFunctor< bool > *)jarg2; 
  (arg1)->addProcessFileCB(arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_ArConfig_addProcessFileCB__SWIG_2(void * jarg1, void * jarg2, int jarg3) {
  ArConfig *arg1 = (ArConfig *) 0 ;
  ArRetFunctor2< bool,char *,size_t > *arg2 = (ArRetFunctor2< bool,char *,size_t > *) 0 ;
  int arg3 ;
  
  arg1 = (ArConfig *)jarg1; 
  arg2 = (ArRetFunctor2< bool,char *,size_t > *)jarg2; 
  arg3 = (int)jarg3; 
  (arg1)->addProcessFileCB(arg2,arg3);
}


SWIGEXPORT void SWIGSTDCALL CSharp_ArConfig_addProcessFileCB__SWIG_3(void * jarg1, void * jarg2) {
  ArConfig *arg1 = (ArConfig *) 0 ;
  ArRetFunctor2< bool,char *,size_t > *arg2 = (ArRetFunctor2< bool,char *,size_t > *) 0 ;
  
  arg1 = (ArConfig *)jarg1; 
  arg2 = (ArRetFunctor2< bool,char *,size_t > *)jarg2; 
  (arg1)->addProcessFileCB(arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_ArConfig_addProcessFileWithErrorCB__SWIG_0(void * jarg1, void * jarg2, int jarg3) {
  ArConfig *arg1 = (ArConfig *) 0 ;
  ArRetFunctor2< bool,char *,size_t > *arg2 = (ArRetFunctor2< bool,char *,size_t > *) 0 ;
  int arg3 ;
  
  arg1 = (ArConfig *)jarg1; 
  arg2 = (ArRetFunctor2< bool,char *,size_t > *)jarg2; 
  arg3 = (int)jarg3; 
  (arg1)->addProcessFileWithErrorCB(arg2,arg3);
}


SWIGEXPORT void SWIGSTDCALL CSharp_ArConfig_addProcessFileWithErrorCB__SWIG_1(void * jarg1, void * jarg2) {
  ArConfig *arg1 = (ArConfig *) 0 ;
  ArRetFunctor2< bool,char *,size_t > *arg2 = (ArRetFunctor2< bool,char *,size_t > *) 0 ;
  
  arg1 = (ArConfig *)jarg1; 
  arg2 = (ArRetFunctor2< bool,char *,size_t > *)jarg2; 
  (arg1)->addProcessFileWithErrorCB(arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_ArConfig_remProcessFileCB__SWIG_0(void * jarg1, void * jarg2) {
  ArConfig *arg1 = (ArConfig *) 0 ;
  ArRetFunctor< bool > *arg2 = (ArRetFunctor< bool > *) 0 ;
  
  arg1 = (ArConfig *)jarg1; 
  arg2 = (ArRetFunctor< bool > *)jarg2; 
  (arg1)->remProcessFileCB(arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_ArConfig_remProcessFileCB__SWIG_1(void * jarg1, void * jarg2) {
  ArConfig *arg1 = (ArConfig *) 0 ;
  ArRetFunctor2< bool,char *,size_t > *arg2 = (ArRetFunctor2< bool,char *,size_t > *) 0 ;
  
  arg1 = (ArConfig *)jarg1; 
  arg2 = (ArRetFunctor2< bool,char *,size_t > *)jarg2; 
  (arg1)->remProcessFileCB(arg2);
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_ArConfig_callProcessFileCallBacks__SWIG_0(void * jarg1, unsigned int jarg2, char * jarg3, unsigned long jarg4) {
  unsigned int jresult ;
  ArConfig *arg1 = (ArConfig *) 0 ;
  bool arg2 ;
  char *arg3 = (char *) 0 ;
  size_t arg4 ;
  bool result;
  
  arg1 = (ArConfig *)jarg1; 
  arg2 = jarg2 ? true : false; 
  arg3 = (char *)jarg3; 
  arg4 = (size_t)jarg4; 
  result = (bool)(arg1)->callProcessFileCallBacks(arg2,arg3,arg4);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_ArConfig_callProcessFileCallBacks__SWIG_1(void * jarg1, unsigned int jarg2, char * jarg3) {
  unsigned int jresult ;
  ArConfig *arg1 = (ArConfig *) 0 ;
  bool arg2 ;
  char *arg3 = (char *) 0 ;
  bool result;
  
  arg1 = (ArConfig *)jarg1; 
  arg2 = jarg2 ? true : false; 
  arg3 = (char *)jarg3; 
  result = (bool)(arg1)->callProcessFileCallBacks(arg2,arg3);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_ArConfig_callProcessFileCallBacks__SWIG_2(void * jarg1, unsigned int jarg2) {
  unsigned int jresult ;
  ArConfig *arg1 = (ArConfig *) 0 ;
  bool arg2 ;
  bool result;
  
  arg1 = (ArConfig *)jarg1; 
  arg2 = jarg2 ? true : false; 
  result = (bool)(arg1)->callProcessFileCallBacks(arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_ArConfig_parseArgument__SWIG_0(void * jarg1, void * jarg2, char * jarg3, unsigned long jarg4) {
  unsigned int jresult ;
  ArConfig *arg1 = (ArConfig *) 0 ;
  ArArgumentBuilder *arg2 = (ArArgumentBuilder *) 0 ;
  char *arg3 = (char *) 0 ;
  size_t arg4 ;
  bool result;
  
  arg1 = (ArConfig *)jarg1; 
  arg2 = (ArArgumentBuilder *)jarg2; 
  arg3 = (char *)jarg3; 
  arg4 = (size_t)jarg4; 
  result = (bool)(arg1)->parseArgument(arg2,arg3,arg4);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_ArConfig_parseArgument__SWIG_1(void * jarg1, void * jarg2, char * jarg3) {
  unsigned int jresult ;
  ArConfig *arg1 = (ArConfig *) 0 ;
  ArArgumentBuilder *arg2 = (ArArgumentBuilder *) 0 ;
  char *arg3 = (char *) 0 ;
  bool result;
  
  arg1 = (ArConfig *)jarg1; 
  arg2 = (ArArgumentBuilder *)jarg2; 
  arg3 = (char *)jarg3; 
  result = (bool)(arg1)->parseArgument(arg2,arg3);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_ArConfig_parseArgument__SWIG_2(void * jarg1, void * jarg2) {
  unsigned int jresult ;
  ArConfig *arg1 = (ArConfig *) 0 ;
  ArArgumentBuilder *arg2 = (ArArgumentBuilder *) 0 ;
  bool result;
  
  arg1 = (ArConfig *)jarg1; 
  arg2 = (ArArgumentBuilder *)jarg2; 
  result = (bool)(arg1)->parseArgument(arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_ArConfig_parseVersion__SWIG_0(void * jarg1, void * jarg2, char * jarg3, unsigned long jarg4) {
  unsigned int jresult ;
  ArConfig *arg1 = (ArConfig *) 0 ;
  ArArgumentBuilder *arg2 = (ArArgumentBuilder *) 0 ;
  char *arg3 = (char *) 0 ;
  size_t arg4 ;
  bool result;
  
  arg1 = (ArConfig *)jarg1; 
  arg2 = (ArArgumentBuilder *)jarg2; 
  arg3 = (char *)jarg3; 
  arg4 = (size_t)jarg4; 
  result = (bool)(arg1)->parseVersion(arg2,arg3,arg4);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_ArConfig_parseVersion__SWIG_1(void * jarg1, void * jarg2, char * jarg3) {
  unsigned int jresult ;
  ArConfig *arg1 = (ArConfig *) 0 ;
  ArArgumentBuilder *arg2 = (ArArgumentBuilder *) 0 ;
  char *arg3 = (char *) 0 ;
  bool result;
  
  arg1 = (ArConfig *)jarg1; 
  arg2 = (ArArgumentBuilder *)jarg2; 
  arg3 = (char *)jarg3; 
  result = (bool)(arg1)->parseVersion(arg2,arg3);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_ArConfig_parseVersion__SWIG_2(void * jarg1, void * jarg2) {
  unsigned int jresult ;
  ArConfig *arg1 = (ArConfig *) 0 ;
  ArArgumentBuilder *arg2 = (ArArgumentBuilder *) 0 ;
  bool result;
  
  arg1 = (ArConfig *)jarg1; 
  arg2 = (ArArgumentBuilder *)jarg2; 
  result = (bool)(arg1)->parseVersion(arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_ArConfig_parseSection__SWIG_0(void * jarg1, void * jarg2, char * jarg3, unsigned long jarg4) {
  unsigned int jresult ;
  ArConfig *arg1 = (ArConfig *) 0 ;
  ArArgumentBuilder *arg2 = (ArArgumentBuilder *) 0 ;
  char *arg3 = (char *) 0 ;
  size_t arg4 ;
  bool result;
  
  arg1 = (ArConfig *)jarg1; 
  arg2 = (ArArgumentBuilder *)jarg2; 
  arg3 = (char *)jarg3; 
  arg4 = (size_t)jarg4; 
  result = (bool)(arg1)->parseSection(arg2,arg3,arg4);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_ArConfig_parseSection__SWIG_1(void * jarg1, void * jarg2, char * jarg3) {
  unsigned int jresult ;
  ArConfig *arg1 = (ArConfig *) 0 ;
  ArArgumentBuilder *arg2 = (ArArgumentBuilder *) 0 ;
  char *arg3 = (char *) 0 ;
  bool result;
  
  arg1 = (ArConfig *)jarg1; 
  arg2 = (ArArgumentBuilder *)jarg2; 
  arg3 = (char *)jarg3; 
  result = (bool)(arg1)->parseSection(arg2,arg3);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_ArConfig_parseSection__SWIG_2(void * jarg1, void * jarg2) {
  unsigned int jresult ;
  ArConfig *arg1 = (ArConfig *) 0 ;
  ArArgumentBuilder *arg2 = (ArArgumentBuilder *) 0 ;
  bool result;
  
  arg1 = (ArConfig *)jarg1; 
  arg2 = (ArArgumentBuilder *)jarg2; 
  result = (bool)(arg1)->parseSection(arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_ArConfig_parseListBegin(void * jarg1, void * jarg2, char * jarg3, unsigned long jarg4) {
  unsigned int jresult ;
  ArConfig *arg1 = (ArConfig *) 0 ;
  ArArgumentBuilder *arg2 = (ArArgumentBuilder *) 0 ;
  char *arg3 = (char *) 0 ;
  size_t arg4 ;
  bool result;
  
  arg1 = (ArConfig *)jarg1; 
  arg2 = (ArArgumentBuilder *)jarg2; 
  arg3 = (char *)jarg3; 
  arg4 = (size_t)jarg4; 
  result = (bool)(arg1)->parseListBegin(arg2,arg3,arg4);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_ArConfig_parseListEnd(void * jarg1, void * jarg2, char * jarg3, unsigned long jarg4) {
  unsigned int jresult ;
  ArConfig *arg1 = (ArConfig *) 0 ;
  ArArgumentBuilder *arg2 = (ArArgumentBuilder *) 0 ;
  char *arg3 = (char *) 0 ;
  size_t arg4 ;
  bool result;
  
  arg1 = (ArConfig *)jarg1; 
  arg2 = (ArArgumentBuilder *)jarg2; 
  arg3 = (char *)jarg3; 
  arg4 = (size_t)jarg4; 
  result = (bool)(arg1)->parseListEnd(arg2,arg3,arg4);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_ArConfig_parseUnknown__SWIG_0(void * jarg1, void * jarg2, char * jarg3, unsigned long jarg4) {
  unsigned int jresult ;
  ArConfig *arg1 = (ArConfig *) 0 ;
  ArArgumentBuilder *arg2 = (ArArgumentBuilder *) 0 ;
  char *arg3 = (char *) 0 ;
  size_t arg4 ;
  bool result;
  
  arg1 = (ArConfig *)jarg1; 
  arg2 = (ArArgumentBuilder *)jarg2; 
  arg3 = (char *)jarg3; 
  arg4 = (size_t)jarg4; 
  result = (bool)(arg1)->parseUnknown(arg2,arg3,arg4);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_ArConfig_parseUnknown__SWIG_1(void * jarg1, void * jarg2, char * jarg3) {
  unsigned int jresult ;
  ArConfig *arg1 = (ArConfig *) 0 ;
  ArArgumentBuilder *arg2 = (ArArgumentBuilder *) 0 ;
  char *arg3 = (char *) 0 ;
  bool result;
  
  arg1 = (ArConfig *)jarg1; 
  arg2 = (ArArgumentBuilder *)jarg2; 
  arg3 = (char *)jarg3; 
  result = (bool)(arg1)->parseUnknown(arg2,arg3);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_ArConfig_parseUnknown__SWIG_2(void * jarg1, void * jarg2) {
  unsigned int jresult ;
  ArConfig *arg1 = (ArConfig *) 0 ;
  ArArgumentBuilder *arg2 = (ArArgumentBuilder *) 0 ;
  bool result;
  
  arg1 = (ArConfig *)jarg1; 
  arg2 = (ArArgumentBuilder *)jarg2; 
  result = (bool)(arg1)->parseUnknown(arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_ArConfig_getRestartLevelNeeded(void * jarg1) {
  int jresult ;
  ArConfig *arg1 = (ArConfig *) 0 ;
  ArConfigArg::RestartLevel result;
  
  arg1 = (ArConfig *)jarg1; 
  result = (ArConfigArg::RestartLevel)((ArConfig const *)arg1)->getRestartLevelNeeded();
  jresult = (int)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_ArConfig_resetRestartLevelNeeded(void * jarg1) {
  ArConfig *arg1 = (ArConfig *) 0 ;
  
  arg1 = (ArConfig *)jarg1; 
  (arg1)->resetRestartLevelNeeded();
}


SWIGEXPORT char * SWIGSTDCALL CSharp_ArConfig_getBaseDirectory(void * jarg1) {
  char * jresult ;
  ArConfig *arg1 = (ArConfig *) 0 ;
  char *result = 0 ;
  
  arg1 = (ArConfig *)jarg1; 
  result = (char *)((ArConfig const *)arg1)->getBaseDirectory();
  jresult = SWIG_csharp_string_callback((const char *)result); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_ArConfig_setBaseDirectory(void * jarg1, char * jarg2) {
  ArConfig *arg1 = (ArConfig *) 0 ;
  char *arg2 = (char *) 0 ;
  
  arg1 = (ArConfig *)jarg1; 
  arg2 = (char *)jarg2; 
  (arg1)->setBaseDirectory((char const *)arg2);
}


SWIGEXPORT char * SWIGSTDCALL CSharp_ArConfig_getFileName(void * jarg1) {
  char * jresult ;
  ArConfig *arg1 = (ArConfig *) 0 ;
  char *result = 0 ;
  
  arg1 = (ArConfig *)jarg1; 
  result = (char *)((ArConfig const *)arg1)->getFileName();
  jresult = SWIG_csharp_string_callback((const char *)result); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_ArConfig_setNoBlanksBetweenParams(void * jarg1, unsigned int jarg2) {
  ArConfig *arg1 = (ArConfig *) 0 ;
  bool arg2 ;
  
  arg1 = (ArConfig *)jarg1; 
  arg2 = jarg2 ? true : false; 
  (arg1)->setNoBlanksBetweenParams(arg2);
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_ArConfig_getNoBlanksBetweenParams(void * jarg1) {
  unsigned int jresult ;
  ArConfig *arg1 = (ArConfig *) 0 ;
  bool result;
  
  arg1 = (ArConfig *)jarg1; 
  result = (bool)(arg1)->getNoBlanksBetweenParams();
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_ArConfig_parseArgumentParser__SWIG_0(void * jarg1, void * jarg2, unsigned int jarg3, char * jarg4, unsigned long jarg5) {
  unsigned int jresult ;
  ArConfig *arg1 = (ArConfig *) 0 ;
  ArArgumentParser *arg2 = (ArArgumentParser *) 0 ;
  bool arg3 ;
  char *arg4 = (char *) 0 ;
  size_t arg5 ;
  bool result;
  
  arg1 = (ArConfig *)jarg1; 
  arg2 = (ArArgumentParser *)jarg2; 
  arg3 = jarg3 ? true : false; 
  arg4 = (char *)jarg4; 
  arg5 = (size_t)jarg5; 
  result = (bool)(arg1)->parseArgumentParser(arg2,arg3,arg4,arg5);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_ArConfig_parseArgumentParser__SWIG_1(void * jarg1, void * jarg2, unsigned int jarg3, char * jarg4) {
  unsigned int jresult ;
  ArConfig *arg1 = (ArConfig *) 0 ;
  ArArgumentParser *arg2 = (ArArgumentParser *) 0 ;
  bool arg3 ;
  char *arg4 = (char *) 0 ;
  bool result;
  
  arg1 = (ArConfig *)jarg1; 
  arg2 = (ArArgumentParser *)jarg2; 
  arg3 = jarg3 ? true : false; 
  arg4 = (char *)jarg4; 
  result = (bool)(arg1)->parseArgumentParser(arg2,arg3,arg4);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_ArConfig_parseArgumentParser__SWIG_2(void * jarg1, void * jarg2, unsigned int jarg3) {
  unsigned int jresult ;
  ArConfig *arg1 = (ArConfig *) 0 ;
  ArArgumentParser *arg2 = (ArArgumentParser *) 0 ;
  bool arg3 ;
  bool result;
  
  arg1 = (ArConfig *)jarg1; 
  arg2 = (ArArgumentParser *)jarg2; 
  arg3 = jarg3 ? true : false; 
  result = (bool)(arg1)->parseArgumentParser(arg2,arg3);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_ArConfig_parseArgumentParser__SWIG_3(void * jarg1, void * jarg2) {
  unsigned int jresult ;
  ArConfig *arg1 = (ArConfig *) 0 ;
  ArArgumentParser *arg2 = (ArArgumentParser *) 0 ;
  bool result;
  
  arg1 = (ArConfig *)jarg1; 
  arg2 = (ArArgumentParser *)jarg2; 
  result = (bool)(arg1)->parseArgumentParser(arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_ArConfig_getCategoryNames(void * jarg1) {
  void * jresult ;
  ArConfig *arg1 = (ArConfig *) 0 ;
  SwigValueWrapper< std::list< std::string > > result;
  
  arg1 = (ArConfig *)jarg1; 
  result = ((ArConfig const *)arg1)->getCategoryNames();
  jresult = new std::list< std::string >((const std::list< std::string > &)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_ArConfig_getSectionNamesInCategory(void * jarg1, char * jarg2) {
  void * jresult ;
  ArConfig *arg1 = (ArConfig *) 0 ;
  char *arg2 = (char *) 0 ;
  SwigValueWrapper< std::list< std::string > > result;
  
  arg1 = (ArConfig *)jarg1; 
  arg2 = (char *)jarg2; 
  result = ((ArConfig const *)arg1)->getSectionNamesInCategory((char const *)arg2);
  jresult = new std::list< std::string >((const std::list< std::string > &)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_ArConfig_getSectionNames(void * jarg1) {
  void * jresult ;
  ArConfig *arg1 = (ArConfig *) 0 ;
  SwigValueWrapper< std::list< std::string > > result;
  
  arg1 = (ArConfig *)jarg1; 
  result = ((ArConfig const *)arg1)->getSectionNames();
  jresult = new std::list< std::string >((const std::list< std::string > &)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_ArConfig_getSections(void * jarg1) {
  void * jresult ;
  ArConfig *arg1 = (ArConfig *) 0 ;
  std::list< ArConfigSection * > *result = 0 ;
  
  arg1 = (ArConfig *)jarg1; 
  result = (std::list< ArConfigSection * > *)(arg1)->getSections();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_ArConfig_findSection(void * jarg1, char * jarg2) {
  void * jresult ;
  ArConfig *arg1 = (ArConfig *) 0 ;
  char *arg2 = (char *) 0 ;
  ArConfigSection *result = 0 ;
  
  arg1 = (ArConfig *)jarg1; 
  arg2 = (char *)jarg2; 
  result = (ArConfigSection *)((ArConfig const *)arg1)->findSection((char const *)arg2);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_ArConfig_setProcessFileCallbacksLogLevel(void * jarg1, int jarg2) {
  ArConfig *arg1 = (ArConfig *) 0 ;
  ArLog::LogLevel arg2 ;
  
  arg1 = (ArConfig *)jarg1; 
  arg2 = (ArLog::LogLevel)jarg2; 
  (arg1)->setProcessFileCallbacksLogLevel(arg2);
}


SWIGEXPORT int SWIGSTDCALL CSharp_ArConfig_getProcessFileCallbacksLogLevel(void * jarg1) {
  int jresult ;
  ArConfig *arg1 = (ArConfig *) 0 ;
  ArLog::LogLevel result;
  
  arg1 = (ArConfig *)jarg1; 
  result = (ArLog::LogLevel)(arg1)->getProcessFileCallbacksLogLevel();
  jresult = (int)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_ArConfig_setSaveUnknown(void * jarg1, unsigned int jarg2) {
  ArConfig *arg1 = (ArConfig *) 0 ;
  bool arg2 ;
  
  arg1 = (ArConfig *)jarg1; 
  arg2 = jarg2 ? true : false; 
  (arg1)->setSaveUnknown(arg2);
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_ArConfig_getSaveUnknown(void * jarg1) {
  unsigned int jresult ;
  ArConfig *arg1 = (ArConfig *) 0 ;
  bool result;
  
  arg1 = (ArConfig *)jarg1; 
  result = (bool)(arg1)->getSaveUnknown();
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_ArConfig_clearSections(void * jarg1) {
  ArConfig *arg1 = (ArConfig *) 0 ;
  
  arg1 = (ArConfig *)jarg1; 
  (arg1)->clearSections();
}


SWIGEXPORT void SWIGSTDCALL CSharp_ArConfig_clearAll(void * jarg1) {
  ArConfig *arg1 = (ArConfig *) 0 ;
  
  arg1 = (ArConfig *)jarg1; 
  (arg1)->clearAll();
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_ArConfig_addSectionFlags(void * jarg1, char * jarg2, char * jarg3) {
  unsigned int jresult ;
  ArConfig *arg1 = (ArConfig *) 0 ;
  char *arg2 = (char *) 0 ;
  char *arg3 = (char *) 0 ;
  bool result;
  
  arg1 = (ArConfig *)jarg1; 
  arg2 = (char *)jarg2; 
  arg3 = (char *)jarg3; 
  result = (bool)(arg1)->addSectionFlags((char const *)arg2,(char const *)arg3);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_ArConfig_remSectionFlag(void * jarg1, char * jarg2, char * jarg3) {
  unsigned int jresult ;
  ArConfig *arg1 = (ArConfig *) 0 ;
  char *arg2 = (char *) 0 ;
  char *arg3 = (char *) 0 ;
  bool result;
  
  arg1 = (ArConfig *)jarg1; 
  arg2 = (char *)jarg2; 
  arg3 = (char *)jarg3; 
  result = (bool)(arg1)->remSectionFlag((char const *)arg2,(char const *)arg3);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_ArConfig_clearAllValueSet(void * jarg1) {
  ArConfig *arg1 = (ArConfig *) 0 ;
  
  arg1 = (ArConfig *)jarg1; 
  (arg1)->clearAllValueSet();
}


SWIGEXPORT void SWIGSTDCALL CSharp_ArConfig_removeAllUnsetValues(void * jarg1) {
  ArConfig *arg1 = (ArConfig *) 0 ;
  
  arg1 = (ArConfig *)jarg1; 
  (arg1)->removeAllUnsetValues();
}


SWIGEXPORT void SWIGSTDCALL CSharp_ArConfig_removeAllUnsetSections(void * jarg1) {
  ArConfig *arg1 = (ArConfig *) 0 ;
  
  arg1 = (ArConfig *)jarg1; 
  (arg1)->removeAllUnsetSections();
}


SWIGEXPORT void SWIGSTDCALL CSharp_ArConfig_log__SWIG_0(void * jarg1, unsigned int jarg2, void * jarg3, char * jarg4) {
  ArConfig *arg1 = (ArConfig *) 0 ;
  bool arg2 ;
  std::list< std::string > *arg3 = (std::list< std::string > *) 0 ;
  char *arg4 = (char *) 0 ;
  
  arg1 = (ArConfig *)jarg1; 
  arg2 = jarg2 ? true : false; 
  arg3 = (std::list< std::string > *)jarg3; 
  arg4 = (char *)jarg4; 
  (arg1)->log(arg2,arg3,(char const *)arg4);
}


SWIGEXPORT void SWIGSTDCALL CSharp_ArConfig_log__SWIG_1(void * jarg1, unsigned int jarg2, void * jarg3) {
  ArConfig *arg1 = (ArConfig *) 0 ;
  bool arg2 ;
  std::list< std::string > *arg3 = (std::list< std::string > *) 0 ;
  
  arg1 = (ArConfig *)jarg1; 
  arg2 = jarg2 ? true : false; 
  arg3 = (std::list< std::string > *)jarg3; 
  (arg1)->log(arg2,arg3);
}


SWIGEXPORT void SWIGSTDCALL CSharp_ArConfig_log__SWIG_2(void * jarg1, unsigned int jarg2) {
  ArConfig *arg1 = (ArConfig *) 0 ;
  bool arg2 ;
  
  arg1 = (ArConfig *)jarg1; 
  arg2 = jarg2 ? true : false; 
  (arg1)->log(arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_ArConfig_log__SWIG_3(void * jarg1) {
  ArConfig *arg1 = (ArConfig *) 0 ;
  
  arg1 = (ArConfig *)jarg1; 
  (arg1)->log();
}


SWIGEXPORT void SWIGSTDCALL CSharp_ArConfig_setPermissions__SWIG_0(void * jarg1, unsigned int jarg2, unsigned int jarg3) {
  ArConfig *arg1 = (ArConfig *) 0 ;
  bool arg2 ;
  bool arg3 ;
  
  arg1 = (ArConfig *)jarg1; 
  arg2 = jarg2 ? true : false; 
  arg3 = jarg3 ? true : false; 
  (arg1)->setPermissions(arg2,arg3);
}


SWIGEXPORT void SWIGSTDCALL CSharp_ArConfig_setPermissions__SWIG_1(void * jarg1, unsigned int jarg2) {
  ArConfig *arg1 = (ArConfig *) 0 ;
  bool arg2 ;
  
  arg1 = (ArConfig *)jarg1; 
  arg2 = jarg2 ? true : false; 
  (arg1)->setPermissions(arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_ArConfig_setPermissions__SWIG_2(void * jarg1) {
  ArConfig *arg1 = (ArConfig *) 0 ;
  
  arg1 = (ArConfig *)jarg1; 
  (arg1)->setPermissions();
}


SWIGEXPORT void SWIGSTDCALL CSharp_ArConfig_addSectionNotToParse(void * jarg1, char * jarg2) {
  ArConfig *arg1 = (ArConfig *) 0 ;
  char *arg2 = (char *) 0 ;
  
  arg1 = (ArConfig *)jarg1; 
  arg2 = (char *)jarg2; 
  (arg1)->addSectionNotToParse((char const *)arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_ArConfig_remSectionNotToParse(void * jarg1, char * jarg2) {
  ArConfig *arg1 = (ArConfig *) 0 ;
  char *arg2 = (char *) 0 ;
  
  arg1 = (ArConfig *)jarg1; 
  arg2 = (char *)jarg2; 
  (arg1)->remSectionNotToParse((char const *)arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_ArConfig_addListNamesToParser(void * jarg1, void * jarg2) {
  ArConfig *arg1 = (ArConfig *) 0 ;
  ArConfigArg *arg2 = 0 ;
  
  arg1 = (ArConfig *)jarg1; 
  arg2 = (ArConfigArg *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "ArConfigArg const & type is null", 0);
    return ;
  } 
  (arg1)->addListNamesToParser((ArConfigArg const &)*arg2);
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_ArConfigSection__SWIG_0(char * jarg1, char * jarg2, unsigned int jarg3, char * jarg4) {
  void * jresult ;
  char *arg1 = (char *) 0 ;
  char *arg2 = (char *) 0 ;
  bool arg3 ;
  char *arg4 = (char *) 0 ;
  ArConfigSection *result = 0 ;
  
  arg1 = (char *)jarg1; 
  arg2 = (char *)jarg2; 
  arg3 = jarg3 ? true : false; 
  arg4 = (char *)jarg4; 
  result = (ArConfigSection *)new ArConfigSection((char const *)arg1,(char const *)arg2,arg3,(char const *)arg4);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_ArConfigSection__SWIG_1(char * jarg1, char * jarg2, unsigned int jarg3) {
  void * jresult ;
  char *arg1 = (char *) 0 ;
  char *arg2 = (char *) 0 ;
  bool arg3 ;
  ArConfigSection *result = 0 ;
  
  arg1 = (char *)jarg1; 
  arg2 = (char *)jarg2; 
  arg3 = jarg3 ? true : false; 
  result = (ArConfigSection *)new ArConfigSection((char const *)arg1,(char const *)arg2,arg3);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_ArConfigSection__SWIG_2(char * jarg1, char * jarg2) {
  void * jresult ;
  char *arg1 = (char *) 0 ;
  char *arg2 = (char *) 0 ;
  ArConfigSection *result = 0 ;
  
  arg1 = (char *)jarg1; 
  arg2 = (char *)jarg2; 
  result = (ArConfigSection *)new ArConfigSection((char const *)arg1,(char const *)arg2);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_ArConfigSection__SWIG_3(char * jarg1) {
  void * jresult ;
  char *arg1 = (char *) 0 ;
  ArConfigSection *result = 0 ;
  
  arg1 = (char *)jarg1; 
  result = (ArConfigSection *)new ArConfigSection((char const *)arg1);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_ArConfigSection__SWIG_4() {
  void * jresult ;
  ArConfigSection *result = 0 ;
  
  result = (ArConfigSection *)new ArConfigSection();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_ArConfigSection(void * jarg1) {
  ArConfigSection *arg1 = (ArConfigSection *) 0 ;
  
  arg1 = (ArConfigSection *)jarg1; 
  delete arg1;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_ArConfigSection__SWIG_5(void * jarg1) {
  void * jresult ;
  ArConfigSection *arg1 = 0 ;
  ArConfigSection *result = 0 ;
  
  arg1 = (ArConfigSection *)jarg1;
  if (!arg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "ArConfigSection const & type is null", 0);
    return 0;
  } 
  result = (ArConfigSection *)new ArConfigSection((ArConfigSection const &)*arg1);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_ArConfigSection_copyAndDetach(void * jarg1, void * jarg2) {
  ArConfigSection *arg1 = (ArConfigSection *) 0 ;
  ArConfigSection *arg2 = 0 ;
  
  arg1 = (ArConfigSection *)jarg1; 
  arg2 = (ArConfigSection *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "ArConfigSection const & type is null", 0);
    return ;
  } 
  (arg1)->copyAndDetach((ArConfigSection const &)*arg2);
}


SWIGEXPORT char * SWIGSTDCALL CSharp_ArConfigSection_getName(void * jarg1) {
  char * jresult ;
  ArConfigSection *arg1 = (ArConfigSection *) 0 ;
  char *result = 0 ;
  
  arg1 = (ArConfigSection *)jarg1; 
  result = (char *)((ArConfigSection const *)arg1)->getName();
  jresult = SWIG_csharp_string_callback((const char *)result); 
  return jresult;
}


SWIGEXPORT char * SWIGSTDCALL CSharp_ArConfigSection_getComment(void * jarg1) {
  char * jresult ;
  ArConfigSection *arg1 = (ArConfigSection *) 0 ;
  char *result = 0 ;
  
  arg1 = (ArConfigSection *)jarg1; 
  result = (char *)((ArConfigSection const *)arg1)->getComment();
  jresult = SWIG_csharp_string_callback((const char *)result); 
  return jresult;
}


SWIGEXPORT char * SWIGSTDCALL CSharp_ArConfigSection_getCategoryName(void * jarg1) {
  char * jresult ;
  ArConfigSection *arg1 = (ArConfigSection *) 0 ;
  char *result = 0 ;
  
  arg1 = (ArConfigSection *)jarg1; 
  result = (char *)((ArConfigSection const *)arg1)->getCategoryName();
  jresult = SWIG_csharp_string_callback((const char *)result); 
  return jresult;
}


SWIGEXPORT char * SWIGSTDCALL CSharp_ArConfigSection_getFlags(void * jarg1) {
  char * jresult ;
  ArConfigSection *arg1 = (ArConfigSection *) 0 ;
  char *result = 0 ;
  
  arg1 = (ArConfigSection *)jarg1; 
  result = (char *)((ArConfigSection const *)arg1)->getFlags();
  jresult = SWIG_csharp_string_callback((const char *)result); 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_ArConfigSection_hasFlag(void * jarg1, char * jarg2) {
  unsigned int jresult ;
  ArConfigSection *arg1 = (ArConfigSection *) 0 ;
  char *arg2 = (char *) 0 ;
  bool result;
  
  arg1 = (ArConfigSection *)jarg1; 
  arg2 = (char *)jarg2; 
  result = (bool)((ArConfigSection const *)arg1)->hasFlag((char const *)arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_ArConfigSection_getParams(void * jarg1) {
  void * jresult ;
  ArConfigSection *arg1 = (ArConfigSection *) 0 ;
  std::list< ArConfigArg > *result = 0 ;
  
  arg1 = (ArConfigSection *)jarg1; 
  result = (std::list< ArConfigArg > *)(arg1)->getParams();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_ArConfigSection_setName(void * jarg1, char * jarg2) {
  ArConfigSection *arg1 = (ArConfigSection *) 0 ;
  char *arg2 = (char *) 0 ;
  
  arg1 = (ArConfigSection *)jarg1; 
  arg2 = (char *)jarg2; 
  (arg1)->setName((char const *)arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_ArConfigSection_setComment(void * jarg1, char * jarg2) {
  ArConfigSection *arg1 = (ArConfigSection *) 0 ;
  char *arg2 = (char *) 0 ;
  
  arg1 = (ArConfigSection *)jarg1; 
  arg2 = (char *)jarg2; 
  (arg1)->setComment((char const *)arg2);
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_ArConfigSection_addFlags__SWIG_0(void * jarg1, char * jarg2, unsigned int jarg3) {
  unsigned int jresult ;
  ArConfigSection *arg1 = (ArConfigSection *) 0 ;
  char *arg2 = (char *) 0 ;
  bool arg3 ;
  bool result;
  
  arg1 = (ArConfigSection *)jarg1; 
  arg2 = (char *)jarg2; 
  arg3 = jarg3 ? true : false; 
  result = (bool)(arg1)->addFlags((char const *)arg2,arg3);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_ArConfigSection_addFlags__SWIG_1(void * jarg1, char * jarg2) {
  unsigned int jresult ;
  ArConfigSection *arg1 = (ArConfigSection *) 0 ;
  char *arg2 = (char *) 0 ;
  bool result;
  
  arg1 = (ArConfigSection *)jarg1; 
  arg2 = (char *)jarg2; 
  result = (bool)(arg1)->addFlags((char const *)arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_ArConfigSection_remFlag(void * jarg1, char * jarg2) {
  unsigned int jresult ;
  ArConfigSection *arg1 = (ArConfigSection *) 0 ;
  char *arg2 = (char *) 0 ;
  bool result;
  
  arg1 = (ArConfigSection *)jarg1; 
  arg2 = (char *)jarg2; 
  result = (bool)(arg1)->remFlag((char const *)arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_ArConfigSection_findParam__SWIG_0(void * jarg1, char * jarg2, unsigned int jarg3) {
  void * jresult ;
  ArConfigSection *arg1 = (ArConfigSection *) 0 ;
  char *arg2 = (char *) 0 ;
  bool arg3 ;
  ArConfigArg *result = 0 ;
  
  arg1 = (ArConfigSection *)jarg1; 
  arg2 = (char *)jarg2; 
  arg3 = jarg3 ? true : false; 
  result = (ArConfigArg *)(arg1)->findParam((char const *)arg2,arg3);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_ArConfigSection_findParam__SWIG_1(void * jarg1, char * jarg2) {
  void * jresult ;
  ArConfigSection *arg1 = (ArConfigSection *) 0 ;
  char *arg2 = (char *) 0 ;
  ArConfigArg *result = 0 ;
  
  arg1 = (ArConfigSection *)jarg1; 
  arg2 = (char *)jarg2; 
  result = (ArConfigArg *)(arg1)->findParam((char const *)arg2);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_ArConfigSection_findParam__SWIG_2(void * jarg1, void * jarg2, unsigned int jarg3) {
  void * jresult ;
  ArConfigSection *arg1 = (ArConfigSection *) 0 ;
  std::list< std::string > *arg2 = 0 ;
  bool arg3 ;
  ArConfigArg *result = 0 ;
  
  arg1 = (ArConfigSection *)jarg1; 
  arg2 = (std::list< std::string > *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "std::list< std::string > const & type is null", 0);
    return 0;
  } 
  arg3 = jarg3 ? true : false; 
  result = (ArConfigArg *)(arg1)->findParam((std::list< std::string > const &)*arg2,arg3);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_ArConfigSection_findParam__SWIG_3(void * jarg1, void * jarg2) {
  void * jresult ;
  ArConfigSection *arg1 = (ArConfigSection *) 0 ;
  std::list< std::string > *arg2 = 0 ;
  ArConfigArg *result = 0 ;
  
  arg1 = (ArConfigSection *)jarg1; 
  arg2 = (std::list< std::string > *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "std::list< std::string > const & type is null", 0);
    return 0;
  } 
  result = (ArConfigArg *)(arg1)->findParam((std::list< std::string > const &)*arg2);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_ArConfigSection_findParam__SWIG_4(void * jarg1, void * jarg2, int jarg3, unsigned int jarg4) {
  void * jresult ;
  ArConfigSection *arg1 = (ArConfigSection *) 0 ;
  char **arg2 = (char **) 0 ;
  int arg3 ;
  bool arg4 ;
  ArConfigArg *result = 0 ;
  
  arg1 = (ArConfigSection *)jarg1; 
  arg2 = (char **)jarg2; 
  arg3 = (int)jarg3; 
  arg4 = jarg4 ? true : false; 
  result = (ArConfigArg *)(arg1)->findParam((char const **)arg2,arg3,arg4);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_ArConfigSection_findParam__SWIG_5(void * jarg1, void * jarg2, int jarg3) {
  void * jresult ;
  ArConfigSection *arg1 = (ArConfigSection *) 0 ;
  char **arg2 = (char **) 0 ;
  int arg3 ;
  ArConfigArg *result = 0 ;
  
  arg1 = (ArConfigSection *)jarg1; 
  arg2 = (char **)jarg2; 
  arg3 = (int)jarg3; 
  result = (ArConfigArg *)(arg1)->findParam((char const **)arg2,arg3);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_ArConfigSection_containsParamsOfPriority(void * jarg1, int jarg2, int jarg3) {
  unsigned int jresult ;
  ArConfigSection *arg1 = (ArConfigSection *) 0 ;
  ArPriority::Priority arg2 ;
  ArPriority::Priority arg3 ;
  bool result;
  
  arg1 = (ArConfigSection *)jarg1; 
  arg2 = (ArPriority::Priority)jarg2; 
  arg3 = (ArPriority::Priority)jarg3; 
  result = (bool)(arg1)->containsParamsOfPriority(arg2,arg3);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_ArConfigSection_remStringHolder(void * jarg1, char * jarg2) {
  unsigned int jresult ;
  ArConfigSection *arg1 = (ArConfigSection *) 0 ;
  char *arg2 = (char *) 0 ;
  bool result;
  
  arg1 = (ArConfigSection *)jarg1; 
  arg2 = (char *)jarg2; 
  result = (bool)(arg1)->remStringHolder((char const *)arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_ArConfigSection_setQuiet(void * jarg1, unsigned int jarg2) {
  ArConfigSection *arg1 = (ArConfigSection *) 0 ;
  bool arg2 ;
  
  arg1 = (ArConfigSection *)jarg1; 
  arg2 = jarg2 ? true : false; 
  (arg1)->setQuiet(arg2);
}


SWIGEXPORT int SWIGSTDCALL CSharp_ArConfigArg_DEFAULT_DOUBLE_PRECISION_get() {
  int jresult ;
  int result;
  
  result = (int)ArConfigArg::DEFAULT_DOUBLE_PRECISION;
  jresult = (int)result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_ArConfigArg_TYPE_COUNT_get() {
  int jresult ;
  int result;
  
  result = (int)ArConfigArg::TYPE_COUNT;
  jresult = (int)result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_ArConfigArg_RESTART_LEVEL_COUNT_get() {
  int jresult ;
  int result;
  
  result = (int)ArConfigArg::RESTART_LEVEL_COUNT;
  jresult = (int)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_ArConfigArg_LIST_BEGIN_TAG_set(char * jarg1) {
  char *arg1 = (char *) 0 ;
  
  arg1 = (char *)jarg1; 
  {
    if (arg1) {
      ArConfigArg::LIST_BEGIN_TAG = (char const *) (new char[strlen((const char *)arg1)+1]);
      strcpy((char *)ArConfigArg::LIST_BEGIN_TAG, (const char *)arg1);
    } else {
      ArConfigArg::LIST_BEGIN_TAG = 0;
    }
  }
}


SWIGEXPORT char * SWIGSTDCALL CSharp_ArConfigArg_LIST_BEGIN_TAG_get() {
  char * jresult ;
  char *result = 0 ;
  
  result = (char *)ArConfigArg::LIST_BEGIN_TAG;
  jresult = SWIG_csharp_string_callback((const char *)result); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_ArConfigArg_LIST_END_TAG_set(char * jarg1) {
  char *arg1 = (char *) 0 ;
  
  arg1 = (char *)jarg1; 
  {
    if (arg1) {
      ArConfigArg::LIST_END_TAG = (char const *) (new char[strlen((const char *)arg1)+1]);
      strcpy((char *)ArConfigArg::LIST_END_TAG, (const char *)arg1);
    } else {
      ArConfigArg::LIST_END_TAG = 0;
    }
  }
}


SWIGEXPORT char * SWIGSTDCALL CSharp_ArConfigArg_LIST_END_TAG_get() {
  char * jresult ;
  char *result = 0 ;
  
  result = (char *)ArConfigArg::LIST_END_TAG;
  jresult = SWIG_csharp_string_callback((const char *)result); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_ArConfigArg_NULL_TAG_set(char * jarg1) {
  char *arg1 = (char *) 0 ;
  
  arg1 = (char *)jarg1; 
  {
    if (arg1) {
      ArConfigArg::NULL_TAG = (char const *) (new char[strlen((const char *)arg1)+1]);
      strcpy((char *)ArConfigArg::NULL_TAG, (const char *)arg1);
    } else {
      ArConfigArg::NULL_TAG = 0;
    }
  }
}


SWIGEXPORT char * SWIGSTDCALL CSharp_ArConfigArg_NULL_TAG_get() {
  char * jresult ;
  char *result = 0 ;
  
  result = (char *)ArConfigArg::NULL_TAG;
  jresult = SWIG_csharp_string_callback((const char *)result); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_ArConfigArg_NEW_RESOURCE_TAG_set(char * jarg1) {
  char *arg1 = (char *) 0 ;
  
  arg1 = (char *)jarg1; 
  {
    if (arg1) {
      ArConfigArg::NEW_RESOURCE_TAG = (char const *) (new char[strlen((const char *)arg1)+1]);
      strcpy((char *)ArConfigArg::NEW_RESOURCE_TAG, (const char *)arg1);
    } else {
      ArConfigArg::NEW_RESOURCE_TAG = 0;
    }
  }
}


SWIGEXPORT char * SWIGSTDCALL CSharp_ArConfigArg_NEW_RESOURCE_TAG_get() {
  char * jresult ;
  char *result = 0 ;
  
  result = (char *)ArConfigArg::NEW_RESOURCE_TAG;
  jresult = SWIG_csharp_string_callback((const char *)result); 
  return jresult;
}


SWIGEXPORT char * SWIGSTDCALL CSharp_ArConfigArg_toString__SWIG_0(int jarg1) {
  char * jresult ;
  ArConfigArg::Type arg1 ;
  char *result = 0 ;
  
  arg1 = (ArConfigArg::Type)jarg1; 
  result = (char *)ArConfigArg::toString(arg1);
  jresult = SWIG_csharp_string_callback((const char *)result); 
  return jresult;
}


SWIGEXPORT char * SWIGSTDCALL CSharp_ArConfigArg_toString__SWIG_1(int jarg1) {
  char * jresult ;
  ArConfigArg::RestartLevel arg1 ;
  char *result = 0 ;
  
  arg1 = (ArConfigArg::RestartLevel)jarg1; 
  result = (char *)ArConfigArg::toString(arg1);
  jresult = SWIG_csharp_string_callback((const char *)result); 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_ArConfigArg_typeFromString(char * jarg1) {
  int jresult ;
  char *arg1 = (char *) 0 ;
  ArConfigArg::Type result;
  
  arg1 = (char *)jarg1; 
  result = (ArConfigArg::Type)ArConfigArg::typeFromString((char const *)arg1);
  jresult = (int)result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_ArConfigArg_restartLevelFromString(char * jarg1) {
  int jresult ;
  char *arg1 = (char *) 0 ;
  ArConfigArg::RestartLevel result;
  
  arg1 = (char *)jarg1; 
  result = (ArConfigArg::RestartLevel)ArConfigArg::restartLevelFromString((char const *)arg1);
  jresult = (int)result; 
  return jresult;
}


SWIGEXPORT char * SWIGSTDCALL CSharp_ArConfigArg_parseResourceSectionName__SWIG_0(void * jarg1, char * jarg2) {
  char * jresult ;
  ArArgumentBuilder *arg1 = (ArArgumentBuilder *) 0 ;
  char *arg2 = (char *) 0 ;
  std::string result;
  
  arg1 = (ArArgumentBuilder *)jarg1; 
  arg2 = (char *)jarg2; 
  result = ArConfigArg::parseResourceSectionName(arg1,(char const *)arg2);
  jresult = SWIG_csharp_string_callback((&result)->c_str()); 
  return jresult;
}


SWIGEXPORT char * SWIGSTDCALL CSharp_ArConfigArg_parseResourceSectionName__SWIG_1(void * jarg1) {
  char * jresult ;
  ArArgumentBuilder *arg1 = (ArArgumentBuilder *) 0 ;
  std::string result;
  
  arg1 = (ArArgumentBuilder *)jarg1; 
  result = ArConfigArg::parseResourceSectionName(arg1);
  jresult = SWIG_csharp_string_callback((&result)->c_str()); 
  return jresult;
}


SWIGEXPORT char * SWIGSTDCALL CSharp_ArConfigArg_parseResourceArgName__SWIG_0(void * jarg1, char * jarg2) {
  char * jresult ;
  ArArgumentBuilder *arg1 = (ArArgumentBuilder *) 0 ;
  char *arg2 = (char *) 0 ;
  std::string result;
  
  arg1 = (ArArgumentBuilder *)jarg1; 
  arg2 = (char *)jarg2; 
  result = ArConfigArg::parseResourceArgName(arg1,(char const *)arg2);
  jresult = SWIG_csharp_string_callback((&result)->c_str()); 
  return jresult;
}


SWIGEXPORT char * SWIGSTDCALL CSharp_ArConfigArg_parseResourceArgName__SWIG_1(void * jarg1) {
  char * jresult ;
  ArArgumentBuilder *arg1 = (ArArgumentBuilder *) 0 ;
  std::string result;
  
  arg1 = (ArArgumentBuilder *)jarg1; 
  result = ArConfigArg::parseResourceArgName(arg1);
  jresult = SWIG_csharp_string_callback((&result)->c_str()); 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_ArConfigArg_parseResourceType__SWIG_0(void * jarg1, char * jarg2) {
  int jresult ;
  ArArgumentBuilder *arg1 = (ArArgumentBuilder *) 0 ;
  char *arg2 = (char *) 0 ;
  ArConfigArg::Type result;
  
  arg1 = (ArArgumentBuilder *)jarg1; 
  arg2 = (char *)jarg2; 
  result = (ArConfigArg::Type)ArConfigArg::parseResourceType(arg1,(char const *)arg2);
  jresult = (int)result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_ArConfigArg_parseResourceType__SWIG_1(void * jarg1) {
  int jresult ;
  ArArgumentBuilder *arg1 = (ArArgumentBuilder *) 0 ;
  ArConfigArg::Type result;
  
  arg1 = (ArArgumentBuilder *)jarg1; 
  result = (ArConfigArg::Type)ArConfigArg::parseResourceType(arg1);
  jresult = (int)result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_ArConfigArg_isResourceTopLevel__SWIG_0(void * jarg1, char * jarg2) {
  unsigned int jresult ;
  ArArgumentBuilder *arg1 = (ArArgumentBuilder *) 0 ;
  char *arg2 = (char *) 0 ;
  bool result;
  
  arg1 = (ArArgumentBuilder *)jarg1; 
  arg2 = (char *)jarg2; 
  result = (bool)ArConfigArg::isResourceTopLevel(arg1,(char const *)arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_ArConfigArg_isResourceTopLevel__SWIG_1(void * jarg1) {
  unsigned int jresult ;
  ArArgumentBuilder *arg1 = (ArArgumentBuilder *) 0 ;
  bool result;
  
  arg1 = (ArArgumentBuilder *)jarg1; 
  result = (bool)ArConfigArg::isResourceTopLevel(arg1);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_ArConfigArg_parseResourceParentPath__SWIG_0(void * jarg1, char jarg2, char * jarg3) {
  void * jresult ;
  ArArgumentBuilder *arg1 = (ArArgumentBuilder *) 0 ;
  char arg2 ;
  char *arg3 = (char *) 0 ;
  SwigValueWrapper< std::list< std::string > > result;
  
  arg1 = (ArArgumentBuilder *)jarg1; 
  arg2 = (char)jarg2; 
  arg3 = (char *)jarg3; 
  result = ArConfigArg::parseResourceParentPath(arg1,arg2,(char const *)arg3);
  jresult = new std::list< std::string >((const std::list< std::string > &)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_ArConfigArg_parseResourceParentPath__SWIG_1(void * jarg1, char jarg2) {
  void * jresult ;
  ArArgumentBuilder *arg1 = (ArArgumentBuilder *) 0 ;
  char arg2 ;
  SwigValueWrapper< std::list< std::string > > result;
  
  arg1 = (ArArgumentBuilder *)jarg1; 
  arg2 = (char)jarg2; 
  result = ArConfigArg::parseResourceParentPath(arg1,arg2);
  jresult = new std::list< std::string >((const std::list< std::string > &)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_ArConfigArg_parseResourceParentPath__SWIG_2(void * jarg1) {
  void * jresult ;
  ArArgumentBuilder *arg1 = (ArArgumentBuilder *) 0 ;
  SwigValueWrapper< std::list< std::string > > result;
  
  arg1 = (ArArgumentBuilder *)jarg1; 
  result = ArConfigArg::parseResourceParentPath(arg1);
  jresult = new std::list< std::string >((const std::list< std::string > &)result); 
  return jresult;
}


SWIGEXPORT char * SWIGSTDCALL CSharp_ArConfigArg_parseResourceDescription__SWIG_0(void * jarg1, char * jarg2) {
  char * jresult ;
  ArArgumentBuilder *arg1 = (ArArgumentBuilder *) 0 ;
  char *arg2 = (char *) 0 ;
  std::string result;
  
  arg1 = (ArArgumentBuilder *)jarg1; 
  arg2 = (char *)jarg2; 
  result = ArConfigArg::parseResourceDescription(arg1,(char const *)arg2);
  jresult = SWIG_csharp_string_callback((&result)->c_str()); 
  return jresult;
}


SWIGEXPORT char * SWIGSTDCALL CSharp_ArConfigArg_parseResourceDescription__SWIG_1(void * jarg1) {
  char * jresult ;
  ArArgumentBuilder *arg1 = (ArArgumentBuilder *) 0 ;
  std::string result;
  
  arg1 = (ArArgumentBuilder *)jarg1; 
  result = ArConfigArg::parseResourceDescription(arg1);
  jresult = SWIG_csharp_string_callback((&result)->c_str()); 
  return jresult;
}


SWIGEXPORT char * SWIGSTDCALL CSharp_ArConfigArg_parseResourceExtra__SWIG_0(void * jarg1, char * jarg2) {
  char * jresult ;
  ArArgumentBuilder *arg1 = (ArArgumentBuilder *) 0 ;
  char *arg2 = (char *) 0 ;
  std::string result;
  
  arg1 = (ArArgumentBuilder *)jarg1; 
  arg2 = (char *)jarg2; 
  result = ArConfigArg::parseResourceExtra(arg1,(char const *)arg2);
  jresult = SWIG_csharp_string_callback((&result)->c_str()); 
  return jresult;
}


SWIGEXPORT char * SWIGSTDCALL CSharp_ArConfigArg_parseResourceExtra__SWIG_1(void * jarg1) {
  char * jresult ;
  ArArgumentBuilder *arg1 = (ArArgumentBuilder *) 0 ;
  std::string result;
  
  arg1 = (ArArgumentBuilder *)jarg1; 
  result = ArConfigArg::parseResourceExtra(arg1);
  jresult = SWIG_csharp_string_callback((&result)->c_str()); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_ArConfigArg__SWIG_0() {
  void * jresult ;
  ArConfigArg *result = 0 ;
  
  result = (ArConfigArg *)new ArConfigArg();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_ArConfigArg__SWIG_1(char * jarg1, void * jarg2, char * jarg3, int jarg4) {
  void * jresult ;
  char *arg1 = (char *) 0 ;
  int *arg2 = (int *) 0 ;
  char *arg3 = (char *) 0 ;
  int arg4 ;
  ArConfigArg *result = 0 ;
  
  arg1 = (char *)jarg1; 
  arg2 = (int *)jarg2; 
  arg3 = (char *)jarg3; 
  arg4 = (int)jarg4; 
  result = (ArConfigArg *)new ArConfigArg((char const *)arg1,arg2,(char const *)arg3,arg4);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_ArConfigArg__SWIG_2(char * jarg1, void * jarg2, char * jarg3) {
  void * jresult ;
  char *arg1 = (char *) 0 ;
  int *arg2 = (int *) 0 ;
  char *arg3 = (char *) 0 ;
  ArConfigArg *result = 0 ;
  
  arg1 = (char *)jarg1; 
  arg2 = (int *)jarg2; 
  arg3 = (char *)jarg3; 
  result = (ArConfigArg *)new ArConfigArg((char const *)arg1,arg2,(char const *)arg3);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_ArConfigArg__SWIG_3(char * jarg1, void * jarg2) {
  void * jresult ;
  char *arg1 = (char *) 0 ;
  int *arg2 = (int *) 0 ;
  ArConfigArg *result = 0 ;
  
  arg1 = (char *)jarg1; 
  arg2 = (int *)jarg2; 
  result = (ArConfigArg *)new ArConfigArg((char const *)arg1,arg2);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_ArConfigArg__SWIG_4(char * jarg1, void * jarg2, char * jarg3, int jarg4) {
  void * jresult ;
  char *arg1 = (char *) 0 ;
  short *arg2 = (short *) 0 ;
  char *arg3 = (char *) 0 ;
  int arg4 ;
  ArConfigArg *result = 0 ;
  
  arg1 = (char *)jarg1; 
  arg2 = (short *)jarg2; 
  arg3 = (char *)jarg3; 
  arg4 = (int)jarg4; 
  result = (ArConfigArg *)new ArConfigArg((char const *)arg1,arg2,(char const *)arg3,arg4);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_ArConfigArg__SWIG_5(char * jarg1, void * jarg2, char * jarg3) {
  void * jresult ;
  char *arg1 = (char *) 0 ;
  short *arg2 = (short *) 0 ;
  char *arg3 = (char *) 0 ;
  ArConfigArg *result = 0 ;
  
  arg1 = (char *)jarg1; 
  arg2 = (short *)jarg2; 
  arg3 = (char *)jarg3; 
  result = (ArConfigArg *)new ArConfigArg((char const *)arg1,arg2,(char const *)arg3);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_ArConfigArg__SWIG_6(char * jarg1, void * jarg2) {
  void * jresult ;
  char *arg1 = (char *) 0 ;
  short *arg2 = (short *) 0 ;
  ArConfigArg *result = 0 ;
  
  arg1 = (char *)jarg1; 
  arg2 = (short *)jarg2; 
  result = (ArConfigArg *)new ArConfigArg((char const *)arg1,arg2);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_ArConfigArg__SWIG_7(char * jarg1, void * jarg2, char * jarg3, int jarg4) {
  void * jresult ;
  char *arg1 = (char *) 0 ;
  unsigned short *arg2 = (unsigned short *) 0 ;
  char *arg3 = (char *) 0 ;
  int arg4 ;
  ArConfigArg *result = 0 ;
  
  arg1 = (char *)jarg1; 
  arg2 = (unsigned short *)jarg2; 
  arg3 = (char *)jarg3; 
  arg4 = (int)jarg4; 
  result = (ArConfigArg *)new ArConfigArg((char const *)arg1,arg2,(char const *)arg3,arg4);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_ArConfigArg__SWIG_8(char * jarg1, void * jarg2, char * jarg3) {
  void * jresult ;
  char *arg1 = (char *) 0 ;
  unsigned short *arg2 = (unsigned short *) 0 ;
  char *arg3 = (char *) 0 ;
  ArConfigArg *result = 0 ;
  
  arg1 = (char *)jarg1; 
  arg2 = (unsigned short *)jarg2; 
  arg3 = (char *)jarg3; 
  result = (ArConfigArg *)new ArConfigArg((char const *)arg1,arg2,(char const *)arg3);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_ArConfigArg__SWIG_9(char * jarg1, void * jarg2) {
  void * jresult ;
  char *arg1 = (char *) 0 ;
  unsigned short *arg2 = (unsigned short *) 0 ;
  ArConfigArg *result = 0 ;
  
  arg1 = (char *)jarg1; 
  arg2 = (unsigned short *)jarg2; 
  result = (ArConfigArg *)new ArConfigArg((char const *)arg1,arg2);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_ArConfigArg__SWIG_10(char * jarg1, void * jarg2, char * jarg3, int jarg4) {
  void * jresult ;
  char *arg1 = (char *) 0 ;
  unsigned char *arg2 = (unsigned char *) 0 ;
  char *arg3 = (char *) 0 ;
  int arg4 ;
  ArConfigArg *result = 0 ;
  
  arg1 = (char *)jarg1; 
  arg2 = (unsigned char *)jarg2; 
  arg3 = (char *)jarg3; 
  arg4 = (int)jarg4; 
  result = (ArConfigArg *)new ArConfigArg((char const *)arg1,arg2,(char const *)arg3,arg4);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_ArConfigArg__SWIG_11(char * jarg1, void * jarg2, char * jarg3) {
  void * jresult ;
  char *arg1 = (char *) 0 ;
  unsigned char *arg2 = (unsigned char *) 0 ;
  char *arg3 = (char *) 0 ;
  ArConfigArg *result = 0 ;
  
  arg1 = (char *)jarg1; 
  arg2 = (unsigned char *)jarg2; 
  arg3 = (char *)jarg3; 
  result = (ArConfigArg *)new ArConfigArg((char const *)arg1,arg2,(char const *)arg3);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_ArConfigArg__SWIG_12(char * jarg1, void * jarg2) {
  void * jresult ;
  char *arg1 = (char *) 0 ;
  unsigned char *arg2 = (unsigned char *) 0 ;
  ArConfigArg *result = 0 ;
  
  arg1 = (char *)jarg1; 
  arg2 = (unsigned char *)jarg2; 
  result = (ArConfigArg *)new ArConfigArg((char const *)arg1,arg2);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_ArConfigArg__SWIG_13(char * jarg1, void * jarg2, char * jarg3, double jarg4, double jarg5, int jarg6) {
  void * jresult ;
  char *arg1 = (char *) 0 ;
  double *arg2 = (double *) 0 ;
  char *arg3 = (char *) 0 ;
  double arg4 ;
  double arg5 ;
  int arg6 ;
  ArConfigArg *result = 0 ;
  
  arg1 = (char *)jarg1; 
  arg2 = (double *)jarg2; 
  arg3 = (char *)jarg3; 
  arg4 = (double)jarg4; 
  arg5 = (double)jarg5; 
  arg6 = (int)jarg6; 
  result = (ArConfigArg *)new ArConfigArg((char const *)arg1,arg2,(char const *)arg3,arg4,arg5,arg6);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_ArConfigArg__SWIG_14(char * jarg1, void * jarg2, char * jarg3, double jarg4) {
  void * jresult ;
  char *arg1 = (char *) 0 ;
  double *arg2 = (double *) 0 ;
  char *arg3 = (char *) 0 ;
  double arg4 ;
  ArConfigArg *result = 0 ;
  
  arg1 = (char *)jarg1; 
  arg2 = (double *)jarg2; 
  arg3 = (char *)jarg3; 
  arg4 = (double)jarg4; 
  result = (ArConfigArg *)new ArConfigArg((char const *)arg1,arg2,(char const *)arg3,arg4);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_ArConfigArg__SWIG_15(char * jarg1, void * jarg2, char * jarg3) {
  void * jresult ;
  char *arg1 = (char *) 0 ;
  double *arg2 = (double *) 0 ;
  char *arg3 = (char *) 0 ;
  ArConfigArg *result = 0 ;
  
  arg1 = (char *)jarg1; 
  arg2 = (double *)jarg2; 
  arg3 = (char *)jarg3; 
  result = (ArConfigArg *)new ArConfigArg((char const *)arg1,arg2,(char const *)arg3);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_ArConfigArg__SWIG_16(char * jarg1, void * jarg2) {
  void * jresult ;
  char *arg1 = (char *) 0 ;
  double *arg2 = (double *) 0 ;
  ArConfigArg *result = 0 ;
  
  arg1 = (char *)jarg1; 
  arg2 = (double *)jarg2; 
  result = (ArConfigArg *)new ArConfigArg((char const *)arg1,arg2);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_ArConfigArg__SWIG_17(char * jarg1, void * jarg2) {
  void * jresult ;
  char *arg1 = (char *) 0 ;
  bool *arg2 = (bool *) 0 ;
  ArConfigArg *result = 0 ;
  
  arg1 = (char *)jarg1; 
  arg2 = (bool *)jarg2; 
  result = (ArConfigArg *)new ArConfigArg((char const *)arg1,arg2);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_ArConfigArg__SWIG_18(char * jarg1, char * jarg2, char * jarg3, unsigned long jarg4) {
  void * jresult ;
  char *arg1 = (char *) 0 ;
  char *arg2 = (char *) 0 ;
  char *arg3 = (char *) 0 ;
  size_t arg4 ;
  ArConfigArg *result = 0 ;
  
  arg1 = (char *)jarg1; 
  arg2 = (char *)jarg2; 
  arg3 = (char *)jarg3; 
  arg4 = (size_t)jarg4; 
  result = (ArConfigArg *)new ArConfigArg((char const *)arg1,arg2,(char const *)arg3,arg4);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_ArConfigArg__SWIG_19(char * jarg1, char * jarg2, char * jarg3) {
  void * jresult ;
  char *arg1 = (char *) 0 ;
  char *arg2 = (char *) 0 ;
  char *arg3 = (char *) 0 ;
  ArConfigArg *result = 0 ;
  
  arg1 = (char *)jarg1; 
  arg2 = (char *)jarg2; 
  arg3 = (char *)jarg3; 
  result = (ArConfigArg *)new ArConfigArg((char const *)arg1,(char const *)arg2,(char const *)arg3);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_ArConfigArg__SWIG_20(char * jarg1, void * jarg2, char * jarg3) {
  void * jresult ;
  char *arg1 = (char *) 0 ;
  std::string *arg2 = (std::string *) 0 ;
  char *arg3 = (char *) 0 ;
  ArConfigArg *result = 0 ;
  
  arg1 = (char *)jarg1; 
  arg2 = (std::string *)jarg2; 
  arg3 = (char *)jarg3; 
  result = (ArConfigArg *)new ArConfigArg((char const *)arg1,arg2,(char const *)arg3);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_ArConfigArg__SWIG_21(char * jarg1, int jarg2, char * jarg3, int jarg4, int jarg5) {
  void * jresult ;
  char *arg1 = (char *) 0 ;
  int arg2 ;
  char *arg3 = (char *) 0 ;
  int arg4 ;
  int arg5 ;
  ArConfigArg *result = 0 ;
  
  arg1 = (char *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (char *)jarg3; 
  arg4 = (int)jarg4; 
  arg5 = (int)jarg5; 
  result = (ArConfigArg *)new ArConfigArg((char const *)arg1,arg2,(char const *)arg3,arg4,arg5);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_ArConfigArg__SWIG_22(char * jarg1, int jarg2, char * jarg3, int jarg4) {
  void * jresult ;
  char *arg1 = (char *) 0 ;
  int arg2 ;
  char *arg3 = (char *) 0 ;
  int arg4 ;
  ArConfigArg *result = 0 ;
  
  arg1 = (char *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (char *)jarg3; 
  arg4 = (int)jarg4; 
  result = (ArConfigArg *)new ArConfigArg((char const *)arg1,arg2,(char const *)arg3,arg4);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_ArConfigArg__SWIG_23(char * jarg1, int jarg2, char * jarg3) {
  void * jresult ;
  char *arg1 = (char *) 0 ;
  int arg2 ;
  char *arg3 = (char *) 0 ;
  ArConfigArg *result = 0 ;
  
  arg1 = (char *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (char *)jarg3; 
  result = (ArConfigArg *)new ArConfigArg((char const *)arg1,arg2,(char const *)arg3);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_ArConfigArg__SWIG_24(char * jarg1, int jarg2) {
  void * jresult ;
  char *arg1 = (char *) 0 ;
  int arg2 ;
  ArConfigArg *result = 0 ;
  
  arg1 = (char *)jarg1; 
  arg2 = (int)jarg2; 
  result = (ArConfigArg *)new ArConfigArg((char const *)arg1,arg2);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_ArConfigArg__SWIG_25(char * jarg1, double jarg2, char * jarg3, double jarg4, double jarg5, int jarg6) {
  void * jresult ;
  char *arg1 = (char *) 0 ;
  double arg2 ;
  char *arg3 = (char *) 0 ;
  double arg4 ;
  double arg5 ;
  int arg6 ;
  ArConfigArg *result = 0 ;
  
  arg1 = (char *)jarg1; 
  arg2 = (double)jarg2; 
  arg3 = (char *)jarg3; 
  arg4 = (double)jarg4; 
  arg5 = (double)jarg5; 
  arg6 = (int)jarg6; 
  result = (ArConfigArg *)new ArConfigArg((char const *)arg1,arg2,(char const *)arg3,arg4,arg5,arg6);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_ArConfigArg__SWIG_26(char * jarg1, double jarg2, char * jarg3, double jarg4, double jarg5) {
  void * jresult ;
  char *arg1 = (char *) 0 ;
  double arg2 ;
  char *arg3 = (char *) 0 ;
  double arg4 ;
  double arg5 ;
  ArConfigArg *result = 0 ;
  
  arg1 = (char *)jarg1; 
  arg2 = (double)jarg2; 
  arg3 = (char *)jarg3; 
  arg4 = (double)jarg4; 
  arg5 = (double)jarg5; 
  result = (ArConfigArg *)new ArConfigArg((char const *)arg1,arg2,(char const *)arg3,arg4,arg5);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_ArConfigArg__SWIG_27(char * jarg1, double jarg2, char * jarg3, double jarg4) {
  void * jresult ;
  char *arg1 = (char *) 0 ;
  double arg2 ;
  char *arg3 = (char *) 0 ;
  double arg4 ;
  ArConfigArg *result = 0 ;
  
  arg1 = (char *)jarg1; 
  arg2 = (double)jarg2; 
  arg3 = (char *)jarg3; 
  arg4 = (double)jarg4; 
  result = (ArConfigArg *)new ArConfigArg((char const *)arg1,arg2,(char const *)arg3,arg4);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_ArConfigArg__SWIG_28(char * jarg1, double jarg2, char * jarg3) {
  void * jresult ;
  char *arg1 = (char *) 0 ;
  double arg2 ;
  char *arg3 = (char *) 0 ;
  ArConfigArg *result = 0 ;
  
  arg1 = (char *)jarg1; 
  arg2 = (double)jarg2; 
  arg3 = (char *)jarg3; 
  result = (ArConfigArg *)new ArConfigArg((char const *)arg1,arg2,(char const *)arg3);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_ArConfigArg__SWIG_29(char * jarg1, double jarg2) {
  void * jresult ;
  char *arg1 = (char *) 0 ;
  double arg2 ;
  ArConfigArg *result = 0 ;
  
  arg1 = (char *)jarg1; 
  arg2 = (double)jarg2; 
  result = (ArConfigArg *)new ArConfigArg((char const *)arg1,arg2);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_ArConfigArg__SWIG_30(char * jarg1, unsigned int jarg2, char * jarg3) {
  void * jresult ;
  char *arg1 = (char *) 0 ;
  bool arg2 ;
  char *arg3 = (char *) 0 ;
  ArConfigArg *result = 0 ;
  
  arg1 = (char *)jarg1; 
  arg2 = jarg2 ? true : false; 
  arg3 = (char *)jarg3; 
  result = (ArConfigArg *)new ArConfigArg((char const *)arg1,arg2,(char const *)arg3);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_ArConfigArg__SWIG_31(char * jarg1, unsigned int jarg2) {
  void * jresult ;
  char *arg1 = (char *) 0 ;
  bool arg2 ;
  ArConfigArg *result = 0 ;
  
  arg1 = (char *)jarg1; 
  arg2 = jarg2 ? true : false; 
  result = (ArConfigArg *)new ArConfigArg((char const *)arg1,arg2);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_ArConfigArg__SWIG_32(char * jarg1, void * jarg2, void * jarg3, char * jarg4) {
  void * jresult ;
  char *arg1 = (char *) 0 ;
  ArRetFunctor1< bool,ArArgumentBuilder * > *arg2 = (ArRetFunctor1< bool,ArArgumentBuilder * > *) 0 ;
  ArRetFunctor< std::list< ArArgumentBuilder * > const * > *arg3 = (ArRetFunctor< std::list< ArArgumentBuilder * > const * > *) 0 ;
  char *arg4 = (char *) 0 ;
  ArConfigArg *result = 0 ;
  
  arg1 = (char *)jarg1; 
  arg2 = (ArRetFunctor1< bool,ArArgumentBuilder * > *)jarg2; 
  arg3 = (ArRetFunctor< std::list< ArArgumentBuilder * > const * > *)jarg3; 
  arg4 = (char *)jarg4; 
  result = (ArConfigArg *)new ArConfigArg((char const *)arg1,arg2,arg3,(char const *)arg4);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_ArConfigArg__SWIG_33(char * jarg1, int jarg2) {
  void * jresult ;
  char *arg1 = (char *) 0 ;
  ArConfigArg::Type arg2 ;
  ArConfigArg *result = 0 ;
  
  arg1 = (char *)jarg1; 
  arg2 = (ArConfigArg::Type)jarg2; 
  result = (ArConfigArg *)new ArConfigArg((char const *)arg1,arg2);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_ArConfigArg__SWIG_34(char * jarg1) {
  void * jresult ;
  char *arg1 = (char *) 0 ;
  ArConfigArg *result = 0 ;
  
  arg1 = (char *)jarg1; 
  result = (ArConfigArg *)new ArConfigArg((char const *)arg1);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_ArConfigArg__SWIG_35(char * jarg1, char * jarg2) {
  void * jresult ;
  char *arg1 = (char *) 0 ;
  char *arg2 = (char *) 0 ;
  ArConfigArg *result = 0 ;
  
  arg1 = (char *)jarg1; 
  arg2 = (char *)jarg2; 
  result = (ArConfigArg *)new ArConfigArg((char const *)arg1,(char const *)arg2);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_ArConfigArg__SWIG_36(int jarg1, char * jarg2, char * jarg3) {
  void * jresult ;
  ArConfigArg::Type arg1 ;
  char *arg2 = (char *) 0 ;
  char *arg3 = (char *) 0 ;
  ArConfigArg *result = 0 ;
  
  arg1 = (ArConfigArg::Type)jarg1; 
  arg2 = (char *)jarg2; 
  arg3 = (char *)jarg3; 
  result = (ArConfigArg *)new ArConfigArg(arg1,(char const *)arg2,(char const *)arg3);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_ArConfigArg__SWIG_37(int jarg1) {
  void * jresult ;
  ArConfigArg::Type arg1 ;
  ArConfigArg *result = 0 ;
  
  arg1 = (ArConfigArg::Type)jarg1; 
  result = (ArConfigArg *)new ArConfigArg(arg1);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_ArConfigArg(void * jarg1) {
  ArConfigArg *arg1 = (ArConfigArg *) 0 ;
  
  arg1 = (ArConfigArg *)jarg1; 
  delete arg1;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_ArConfigArg__SWIG_38(char * jarg1, void * jarg2) {
  void * jresult ;
  char *arg1 = (char *) 0 ;
  ArConfigArg *arg2 = 0 ;
  ArConfigArg *result = 0 ;
  
  arg1 = (char *)jarg1; 
  arg2 = (ArConfigArg *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "ArConfigArg const & type is null", 0);
    return 0;
  } 
  result = (ArConfigArg *)new ArConfigArg((char const *)arg1,(ArConfigArg const &)*arg2);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_ArConfigArg__SWIG_39(void * jarg1) {
  void * jresult ;
  ArConfigArg *arg1 = 0 ;
  ArConfigArg *result = 0 ;
  
  arg1 = (ArConfigArg *)jarg1;
  if (!arg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "ArConfigArg const & type is null", 0);
    return 0;
  } 
  result = (ArConfigArg *)new ArConfigArg((ArConfigArg const &)*arg1);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_ArConfigArg_copyAndDetach(void * jarg1, void * jarg2) {
  ArConfigArg *arg1 = (ArConfigArg *) 0 ;
  ArConfigArg *arg2 = 0 ;
  
  arg1 = (ArConfigArg *)jarg1; 
  arg2 = (ArConfigArg *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "ArConfigArg const & type is null", 0);
    return ;
  } 
  (arg1)->copyAndDetach((ArConfigArg const &)*arg2);
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_ArConfigArg_copyTranslation(void * jarg1, void * jarg2) {
  unsigned int jresult ;
  ArConfigArg *arg1 = (ArConfigArg *) 0 ;
  ArConfigArg *arg2 = 0 ;
  bool result;
  
  arg1 = (ArConfigArg *)jarg1; 
  arg2 = (ArConfigArg *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "ArConfigArg const & type is null", 0);
    return 0;
  } 
  result = (bool)(arg1)->copyTranslation((ArConfigArg const &)*arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_ArConfigArg_promoteList(void * jarg1, void * jarg2) {
  unsigned int jresult ;
  ArConfigArg *arg1 = (ArConfigArg *) 0 ;
  ArConfigArg *arg2 = 0 ;
  bool result;
  
  arg1 = (ArConfigArg *)jarg1; 
  arg2 = (ArConfigArg *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "ArConfigArg const & type is null", 0);
    return 0;
  } 
  result = (bool)(arg1)->promoteList((ArConfigArg const &)*arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_ArConfigArg_isListType(void * jarg1) {
  unsigned int jresult ;
  ArConfigArg *arg1 = (ArConfigArg *) 0 ;
  bool result;
  
  arg1 = (ArConfigArg *)jarg1; 
  result = (bool)((ArConfigArg const *)arg1)->isListType();
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_ArConfigArg_getType(void * jarg1) {
  int jresult ;
  ArConfigArg *arg1 = (ArConfigArg *) 0 ;
  ArConfigArg::Type result;
  
  arg1 = (ArConfigArg *)jarg1; 
  result = (ArConfigArg::Type)((ArConfigArg const *)arg1)->getType();
  jresult = (int)result; 
  return jresult;
}


SWIGEXPORT char * SWIGSTDCALL CSharp_ArConfigArg_getName(void * jarg1) {
  char * jresult ;
  ArConfigArg *arg1 = (ArConfigArg *) 0 ;
  char *result = 0 ;
  
  arg1 = (ArConfigArg *)jarg1; 
  result = (char *)((ArConfigArg const *)arg1)->getName();
  jresult = SWIG_csharp_string_callback((const char *)result); 
  return jresult;
}


SWIGEXPORT char * SWIGSTDCALL CSharp_ArConfigArg_getDescription(void * jarg1) {
  char * jresult ;
  ArConfigArg *arg1 = (ArConfigArg *) 0 ;
  char *result = 0 ;
  
  arg1 = (ArConfigArg *)jarg1; 
  result = (char *)((ArConfigArg const *)arg1)->getDescription();
  jresult = SWIG_csharp_string_callback((const char *)result); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_ArConfigArg_setDescription(void * jarg1, char * jarg2) {
  ArConfigArg *arg1 = (ArConfigArg *) 0 ;
  char *arg2 = (char *) 0 ;
  
  arg1 = (ArConfigArg *)jarg1; 
  arg2 = (char *)jarg2; 
  (arg1)->setDescription((char const *)arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_ArConfigArg_setExtraExplanation(void * jarg1, char * jarg2) {
  ArConfigArg *arg1 = (ArConfigArg *) 0 ;
  char *arg2 = (char *) 0 ;
  
  arg1 = (ArConfigArg *)jarg1; 
  arg2 = (char *)jarg2; 
  (arg1)->setExtraExplanation((char const *)arg2);
}


SWIGEXPORT char * SWIGSTDCALL CSharp_ArConfigArg_getExtraExplanation(void * jarg1) {
  char * jresult ;
  ArConfigArg *arg1 = (ArConfigArg *) 0 ;
  char *result = 0 ;
  
  arg1 = (ArConfigArg *)jarg1; 
  result = (char *)((ArConfigArg const *)arg1)->getExtraExplanation();
  jresult = SWIG_csharp_string_callback((const char *)result); 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_ArConfigArg_setInt__SWIG_0(void * jarg1, int jarg2, char * jarg3, unsigned long jarg4, unsigned int jarg5) {
  unsigned int jresult ;
  ArConfigArg *arg1 = (ArConfigArg *) 0 ;
  int arg2 ;
  char *arg3 = (char *) 0 ;
  size_t arg4 ;
  bool arg5 ;
  bool result;
  
  arg1 = (ArConfigArg *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (char *)jarg3; 
  arg4 = (size_t)jarg4; 
  arg5 = jarg5 ? true : false; 
  result = (bool)(arg1)->setInt(arg2,arg3,arg4,arg5);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_ArConfigArg_setInt__SWIG_1(void * jarg1, int jarg2, char * jarg3, unsigned long jarg4) {
  unsigned int jresult ;
  ArConfigArg *arg1 = (ArConfigArg *) 0 ;
  int arg2 ;
  char *arg3 = (char *) 0 ;
  size_t arg4 ;
  bool result;
  
  arg1 = (ArConfigArg *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (char *)jarg3; 
  arg4 = (size_t)jarg4; 
  result = (bool)(arg1)->setInt(arg2,arg3,arg4);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_ArConfigArg_setInt__SWIG_2(void * jarg1, int jarg2, char * jarg3) {
  unsigned int jresult ;
  ArConfigArg *arg1 = (ArConfigArg *) 0 ;
  int arg2 ;
  char *arg3 = (char *) 0 ;
  bool result;
  
  arg1 = (ArConfigArg *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (char *)jarg3; 
  result = (bool)(arg1)->setInt(arg2,arg3);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_ArConfigArg_setInt__SWIG_3(void * jarg1, int jarg2) {
  unsigned int jresult ;
  ArConfigArg *arg1 = (ArConfigArg *) 0 ;
  int arg2 ;
  bool result;
  
  arg1 = (ArConfigArg *)jarg1; 
  arg2 = (int)jarg2; 
  result = (bool)(arg1)->setInt(arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_ArConfigArg_setDouble__SWIG_0(void * jarg1, double jarg2, char * jarg3, unsigned long jarg4, unsigned int jarg5) {
  unsigned int jresult ;
  ArConfigArg *arg1 = (ArConfigArg *) 0 ;
  double arg2 ;
  char *arg3 = (char *) 0 ;
  size_t arg4 ;
  bool arg5 ;
  bool result;
  
  arg1 = (ArConfigArg *)jarg1; 
  arg2 = (double)jarg2; 
  arg3 = (char *)jarg3; 
  arg4 = (size_t)jarg4; 
  arg5 = jarg5 ? true : false; 
  result = (bool)(arg1)->setDouble(arg2,arg3,arg4,arg5);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_ArConfigArg_setDouble__SWIG_1(void * jarg1, double jarg2, char * jarg3, unsigned long jarg4) {
  unsigned int jresult ;
  ArConfigArg *arg1 = (ArConfigArg *) 0 ;
  double arg2 ;
  char *arg3 = (char *) 0 ;
  size_t arg4 ;
  bool result;
  
  arg1 = (ArConfigArg *)jarg1; 
  arg2 = (double)jarg2; 
  arg3 = (char *)jarg3; 
  arg4 = (size_t)jarg4; 
  result = (bool)(arg1)->setDouble(arg2,arg3,arg4);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_ArConfigArg_setDouble__SWIG_2(void * jarg1, double jarg2, char * jarg3) {
  unsigned int jresult ;
  ArConfigArg *arg1 = (ArConfigArg *) 0 ;
  double arg2 ;
  char *arg3 = (char *) 0 ;
  bool result;
  
  arg1 = (ArConfigArg *)jarg1; 
  arg2 = (double)jarg2; 
  arg3 = (char *)jarg3; 
  result = (bool)(arg1)->setDouble(arg2,arg3);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_ArConfigArg_setDouble__SWIG_3(void * jarg1, double jarg2) {
  unsigned int jresult ;
  ArConfigArg *arg1 = (ArConfigArg *) 0 ;
  double arg2 ;
  bool result;
  
  arg1 = (ArConfigArg *)jarg1; 
  arg2 = (double)jarg2; 
  result = (bool)(arg1)->setDouble(arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_ArConfigArg_setBool__SWIG_0(void * jarg1, unsigned int jarg2, char * jarg3, unsigned long jarg4, unsigned int jarg5) {
  unsigned int jresult ;
  ArConfigArg *arg1 = (ArConfigArg *) 0 ;
  bool arg2 ;
  char *arg3 = (char *) 0 ;
  size_t arg4 ;
  bool arg5 ;
  bool result;
  
  arg1 = (ArConfigArg *)jarg1; 
  arg2 = jarg2 ? true : false; 
  arg3 = (char *)jarg3; 
  arg4 = (size_t)jarg4; 
  arg5 = jarg5 ? true : false; 
  result = (bool)(arg1)->setBool(arg2,arg3,arg4,arg5);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_ArConfigArg_setBool__SWIG_1(void * jarg1, unsigned int jarg2, char * jarg3, unsigned long jarg4) {
  unsigned int jresult ;
  ArConfigArg *arg1 = (ArConfigArg *) 0 ;
  bool arg2 ;
  char *arg3 = (char *) 0 ;
  size_t arg4 ;
  bool result;
  
  arg1 = (ArConfigArg *)jarg1; 
  arg2 = jarg2 ? true : false; 
  arg3 = (char *)jarg3; 
  arg4 = (size_t)jarg4; 
  result = (bool)(arg1)->setBool(arg2,arg3,arg4);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_ArConfigArg_setBool__SWIG_2(void * jarg1, unsigned int jarg2, char * jarg3) {
  unsigned int jresult ;
  ArConfigArg *arg1 = (ArConfigArg *) 0 ;
  bool arg2 ;
  char *arg3 = (char *) 0 ;
  bool result;
  
  arg1 = (ArConfigArg *)jarg1; 
  arg2 = jarg2 ? true : false; 
  arg3 = (char *)jarg3; 
  result = (bool)(arg1)->setBool(arg2,arg3);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_ArConfigArg_setBool__SWIG_3(void * jarg1, unsigned int jarg2) {
  unsigned int jresult ;
  ArConfigArg *arg1 = (ArConfigArg *) 0 ;
  bool arg2 ;
  bool result;
  
  arg1 = (ArConfigArg *)jarg1; 
  arg2 = jarg2 ? true : false; 
  result = (bool)(arg1)->setBool(arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_ArConfigArg_setString__SWIG_0(void * jarg1, char * jarg2, char * jarg3, unsigned long jarg4, unsigned int jarg5) {
  unsigned int jresult ;
  ArConfigArg *arg1 = (ArConfigArg *) 0 ;
  char *arg2 = (char *) 0 ;
  char *arg3 = (char *) 0 ;
  size_t arg4 ;
  bool arg5 ;
  bool result;
  
  arg1 = (ArConfigArg *)jarg1; 
  arg2 = (char *)jarg2; 
  arg3 = (char *)jarg3; 
  arg4 = (size_t)jarg4; 
  arg5 = jarg5 ? true : false; 
  result = (bool)(arg1)->setString((char const *)arg2,arg3,arg4,arg5);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_ArConfigArg_setString__SWIG_1(void * jarg1, char * jarg2, char * jarg3, unsigned long jarg4) {
  unsigned int jresult ;
  ArConfigArg *arg1 = (ArConfigArg *) 0 ;
  char *arg2 = (char *) 0 ;
  char *arg3 = (char *) 0 ;
  size_t arg4 ;
  bool result;
  
  arg1 = (ArConfigArg *)jarg1; 
  arg2 = (char *)jarg2; 
  arg3 = (char *)jarg3; 
  arg4 = (size_t)jarg4; 
  result = (bool)(arg1)->setString((char const *)arg2,arg3,arg4);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_ArConfigArg_setString__SWIG_2(void * jarg1, char * jarg2, char * jarg3) {
  unsigned int jresult ;
  ArConfigArg *arg1 = (ArConfigArg *) 0 ;
  char *arg2 = (char *) 0 ;
  char *arg3 = (char *) 0 ;
  bool result;
  
  arg1 = (ArConfigArg *)jarg1; 
  arg2 = (char *)jarg2; 
  arg3 = (char *)jarg3; 
  result = (bool)(arg1)->setString((char const *)arg2,arg3);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_ArConfigArg_setString__SWIG_3(void * jarg1, char * jarg2) {
  unsigned int jresult ;
  ArConfigArg *arg1 = (ArConfigArg *) 0 ;
  char *arg2 = (char *) 0 ;
  bool result;
  
  arg1 = (ArConfigArg *)jarg1; 
  arg2 = (char *)jarg2; 
  result = (bool)(arg1)->setString((char const *)arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_ArConfigArg_setCppString__SWIG_0(void * jarg1, char * jarg2, char * jarg3, unsigned long jarg4, unsigned int jarg5) {
  unsigned int jresult ;
  ArConfigArg *arg1 = (ArConfigArg *) 0 ;
  std::string *arg2 = 0 ;
  char *arg3 = (char *) 0 ;
  size_t arg4 ;
  bool arg5 ;
  bool result;
  
  arg1 = (ArConfigArg *)jarg1; 
  if (!jarg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return 0;
  }
  std::string arg2_str(jarg2);
  arg2 = &arg2_str; 
  arg3 = (char *)jarg3; 
  arg4 = (size_t)jarg4; 
  arg5 = jarg5 ? true : false; 
  result = (bool)(arg1)->setCppString((std::string const &)*arg2,arg3,arg4,arg5);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_ArConfigArg_setCppString__SWIG_1(void * jarg1, char * jarg2, char * jarg3, unsigned long jarg4) {
  unsigned int jresult ;
  ArConfigArg *arg1 = (ArConfigArg *) 0 ;
  std::string *arg2 = 0 ;
  char *arg3 = (char *) 0 ;
  size_t arg4 ;
  bool result;
  
  arg1 = (ArConfigArg *)jarg1; 
  if (!jarg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return 0;
  }
  std::string arg2_str(jarg2);
  arg2 = &arg2_str; 
  arg3 = (char *)jarg3; 
  arg4 = (size_t)jarg4; 
  result = (bool)(arg1)->setCppString((std::string const &)*arg2,arg3,arg4);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_ArConfigArg_setCppString__SWIG_2(void * jarg1, char * jarg2, char * jarg3) {
  unsigned int jresult ;
  ArConfigArg *arg1 = (ArConfigArg *) 0 ;
  std::string *arg2 = 0 ;
  char *arg3 = (char *) 0 ;
  bool result;
  
  arg1 = (ArConfigArg *)jarg1; 
  if (!jarg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return 0;
  }
  std::string arg2_str(jarg2);
  arg2 = &arg2_str; 
  arg3 = (char *)jarg3; 
  result = (bool)(arg1)->setCppString((std::string const &)*arg2,arg3);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_ArConfigArg_setCppString__SWIG_3(void * jarg1, char * jarg2) {
  unsigned int jresult ;
  ArConfigArg *arg1 = (ArConfigArg *) 0 ;
  std::string *arg2 = 0 ;
  bool result;
  
  arg1 = (ArConfigArg *)jarg1; 
  if (!jarg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return 0;
  }
  std::string arg2_str(jarg2);
  arg2 = &arg2_str; 
  result = (bool)(arg1)->setCppString((std::string const &)*arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_ArConfigArg_setArgWithFunctor__SWIG_0(void * jarg1, void * jarg2, char * jarg3, unsigned long jarg4, unsigned int jarg5) {
  unsigned int jresult ;
  ArConfigArg *arg1 = (ArConfigArg *) 0 ;
  ArArgumentBuilder *arg2 = (ArArgumentBuilder *) 0 ;
  char *arg3 = (char *) 0 ;
  size_t arg4 ;
  bool arg5 ;
  bool result;
  
  arg1 = (ArConfigArg *)jarg1; 
  arg2 = (ArArgumentBuilder *)jarg2; 
  arg3 = (char *)jarg3; 
  arg4 = (size_t)jarg4; 
  arg5 = jarg5 ? true : false; 
  result = (bool)(arg1)->setArgWithFunctor(arg2,arg3,arg4,arg5);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_ArConfigArg_setArgWithFunctor__SWIG_1(void * jarg1, void * jarg2, char * jarg3, unsigned long jarg4) {
  unsigned int jresult ;
  ArConfigArg *arg1 = (ArConfigArg *) 0 ;
  ArArgumentBuilder *arg2 = (ArArgumentBuilder *) 0 ;
  char *arg3 = (char *) 0 ;
  size_t arg4 ;
  bool result;
  
  arg1 = (ArConfigArg *)jarg1; 
  arg2 = (ArArgumentBuilder *)jarg2; 
  arg3 = (char *)jarg3; 
  arg4 = (size_t)jarg4; 
  result = (bool)(arg1)->setArgWithFunctor(arg2,arg3,arg4);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_ArConfigArg_setArgWithFunctor__SWIG_2(void * jarg1, void * jarg2, char * jarg3) {
  unsigned int jresult ;
  ArConfigArg *arg1 = (ArConfigArg *) 0 ;
  ArArgumentBuilder *arg2 = (ArArgumentBuilder *) 0 ;
  char *arg3 = (char *) 0 ;
  bool result;
  
  arg1 = (ArConfigArg *)jarg1; 
  arg2 = (ArArgumentBuilder *)jarg2; 
  arg3 = (char *)jarg3; 
  result = (bool)(arg1)->setArgWithFunctor(arg2,arg3);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_ArConfigArg_setArgWithFunctor__SWIG_3(void * jarg1, void * jarg2) {
  unsigned int jresult ;
  ArConfigArg *arg1 = (ArConfigArg *) 0 ;
  ArArgumentBuilder *arg2 = (ArArgumentBuilder *) 0 ;
  bool result;
  
  arg1 = (ArConfigArg *)jarg1; 
  arg2 = (ArArgumentBuilder *)jarg2; 
  result = (bool)(arg1)->setArgWithFunctor(arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_ArConfigArg_getInt__SWIG_0(void * jarg1, void * jarg2) {
  int jresult ;
  ArConfigArg *arg1 = (ArConfigArg *) 0 ;
  bool *arg2 = (bool *) 0 ;
  int result;
  
  arg1 = (ArConfigArg *)jarg1; 
  arg2 = (bool *)jarg2; 
  result = (int)((ArConfigArg const *)arg1)->getInt(arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_ArConfigArg_getInt__SWIG_1(void * jarg1) {
  int jresult ;
  ArConfigArg *arg1 = (ArConfigArg *) 0 ;
  int result;
  
  arg1 = (ArConfigArg *)jarg1; 
  result = (int)((ArConfigArg const *)arg1)->getInt();
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_ArConfigArg_getMinInt__SWIG_0(void * jarg1, void * jarg2) {
  int jresult ;
  ArConfigArg *arg1 = (ArConfigArg *) 0 ;
  bool *arg2 = (bool *) 0 ;
  int result;
  
  arg1 = (ArConfigArg *)jarg1; 
  arg2 = (bool *)jarg2; 
  result = (int)((ArConfigArg const *)arg1)->getMinInt(arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_ArConfigArg_getMinInt__SWIG_1(void * jarg1) {
  int jresult ;
  ArConfigArg *arg1 = (ArConfigArg *) 0 ;
  int result;
  
  arg1 = (ArConfigArg *)jarg1; 
  result = (int)((ArConfigArg const *)arg1)->getMinInt();
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_ArConfigArg_getMaxInt__SWIG_0(void * jarg1, void * jarg2) {
  int jresult ;
  ArConfigArg *arg1 = (ArConfigArg *) 0 ;
  bool *arg2 = (bool *) 0 ;
  int result;
  
  arg1 = (ArConfigArg *)jarg1; 
  arg2 = (bool *)jarg2; 
  result = (int)((ArConfigArg const *)arg1)->getMaxInt(arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_ArConfigArg_getMaxInt__SWIG_1(void * jarg1) {
  int jresult ;
  ArConfigArg *arg1 = (ArConfigArg *) 0 ;
  int result;
  
  arg1 = (ArConfigArg *)jarg1; 
  result = (int)((ArConfigArg const *)arg1)->getMaxInt();
  jresult = result; 
  return jresult;
}


SWIGEXPORT double SWIGSTDCALL CSharp_ArConfigArg_getDouble__SWIG_0(void * jarg1, void * jarg2) {
  double jresult ;
  ArConfigArg *arg1 = (ArConfigArg *) 0 ;
  bool *arg2 = (bool *) 0 ;
  double result;
  
  arg1 = (ArConfigArg *)jarg1; 
  arg2 = (bool *)jarg2; 
  result = (double)((ArConfigArg const *)arg1)->getDouble(arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT double SWIGSTDCALL CSharp_ArConfigArg_getDouble__SWIG_1(void * jarg1) {
  double jresult ;
  ArConfigArg *arg1 = (ArConfigArg *) 0 ;
  double result;
  
  arg1 = (ArConfigArg *)jarg1; 
  result = (double)((ArConfigArg const *)arg1)->getDouble();
  jresult = result; 
  return jresult;
}


SWIGEXPORT double SWIGSTDCALL CSharp_ArConfigArg_getMinDouble__SWIG_0(void * jarg1, void * jarg2) {
  double jresult ;
  ArConfigArg *arg1 = (ArConfigArg *) 0 ;
  bool *arg2 = (bool *) 0 ;
  double result;
  
  arg1 = (ArConfigArg *)jarg1; 
  arg2 = (bool *)jarg2; 
  result = (double)((ArConfigArg const *)arg1)->getMinDouble(arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT double SWIGSTDCALL CSharp_ArConfigArg_getMinDouble__SWIG_1(void * jarg1) {
  double jresult ;
  ArConfigArg *arg1 = (ArConfigArg *) 0 ;
  double result;
  
  arg1 = (ArConfigArg *)jarg1; 
  result = (double)((ArConfigArg const *)arg1)->getMinDouble();
  jresult = result; 
  return jresult;
}


SWIGEXPORT double SWIGSTDCALL CSharp_ArConfigArg_getMaxDouble__SWIG_0(void * jarg1, void * jarg2) {
  double jresult ;
  ArConfigArg *arg1 = (ArConfigArg *) 0 ;
  bool *arg2 = (bool *) 0 ;
  double result;
  
  arg1 = (ArConfigArg *)jarg1; 
  arg2 = (bool *)jarg2; 
  result = (double)((ArConfigArg const *)arg1)->getMaxDouble(arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT double SWIGSTDCALL CSharp_ArConfigArg_getMaxDouble__SWIG_1(void * jarg1) {
  double jresult ;
  ArConfigArg *arg1 = (ArConfigArg *) 0 ;
  double result;
  
  arg1 = (ArConfigArg *)jarg1; 
  result = (double)((ArConfigArg const *)arg1)->getMaxDouble();
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_ArConfigArg_getDoublePrecision__SWIG_0(void * jarg1, void * jarg2) {
  int jresult ;
  ArConfigArg *arg1 = (ArConfigArg *) 0 ;
  bool *arg2 = (bool *) 0 ;
  int result;
  
  arg1 = (ArConfigArg *)jarg1; 
  arg2 = (bool *)jarg2; 
  result = (int)((ArConfigArg const *)arg1)->getDoublePrecision(arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_ArConfigArg_getDoublePrecision__SWIG_1(void * jarg1) {
  int jresult ;
  ArConfigArg *arg1 = (ArConfigArg *) 0 ;
  int result;
  
  arg1 = (ArConfigArg *)jarg1; 
  result = (int)((ArConfigArg const *)arg1)->getDoublePrecision();
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_ArConfigArg_getBool__SWIG_0(void * jarg1, void * jarg2) {
  unsigned int jresult ;
  ArConfigArg *arg1 = (ArConfigArg *) 0 ;
  bool *arg2 = (bool *) 0 ;
  bool result;
  
  arg1 = (ArConfigArg *)jarg1; 
  arg2 = (bool *)jarg2; 
  result = (bool)((ArConfigArg const *)arg1)->getBool(arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_ArConfigArg_getBool__SWIG_1(void * jarg1) {
  unsigned int jresult ;
  ArConfigArg *arg1 = (ArConfigArg *) 0 ;
  bool result;
  
  arg1 = (ArConfigArg *)jarg1; 
  result = (bool)((ArConfigArg const *)arg1)->getBool();
  jresult = result; 
  return jresult;
}


SWIGEXPORT char * SWIGSTDCALL CSharp_ArConfigArg_getString__SWIG_0(void * jarg1, void * jarg2) {
  char * jresult ;
  ArConfigArg *arg1 = (ArConfigArg *) 0 ;
  bool *arg2 = (bool *) 0 ;
  char *result = 0 ;
  
  arg1 = (ArConfigArg *)jarg1; 
  arg2 = (bool *)jarg2; 
  result = (char *)((ArConfigArg const *)arg1)->getString(arg2);
  jresult = SWIG_csharp_string_callback((const char *)result); 
  return jresult;
}


SWIGEXPORT char * SWIGSTDCALL CSharp_ArConfigArg_getString__SWIG_1(void * jarg1) {
  char * jresult ;
  ArConfigArg *arg1 = (ArConfigArg *) 0 ;
  char *result = 0 ;
  
  arg1 = (ArConfigArg *)jarg1; 
  result = (char *)((ArConfigArg const *)arg1)->getString();
  jresult = SWIG_csharp_string_callback((const char *)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_ArConfigArg_getArgsWithFunctor__SWIG_0(void * jarg1, void * jarg2) {
  void * jresult ;
  ArConfigArg *arg1 = (ArConfigArg *) 0 ;
  bool *arg2 = (bool *) 0 ;
  std::list< ArArgumentBuilder * > *result = 0 ;
  
  arg1 = (ArConfigArg *)jarg1; 
  arg2 = (bool *)jarg2; 
  result = (std::list< ArArgumentBuilder * > *)((ArConfigArg const *)arg1)->getArgsWithFunctor(arg2);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_ArConfigArg_getArgsWithFunctor__SWIG_1(void * jarg1) {
  void * jresult ;
  ArConfigArg *arg1 = (ArConfigArg *) 0 ;
  std::list< ArArgumentBuilder * > *result = 0 ;
  
  arg1 = (ArConfigArg *)jarg1; 
  result = (std::list< ArArgumentBuilder * > *)((ArConfigArg const *)arg1)->getArgsWithFunctor();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT char * SWIGSTDCALL CSharp_ArConfigArg_getCppString__SWIG_0(void * jarg1, void * jarg2) {
  char * jresult ;
  ArConfigArg *arg1 = (ArConfigArg *) 0 ;
  bool *arg2 = (bool *) 0 ;
  std::string result;
  
  arg1 = (ArConfigArg *)jarg1; 
  arg2 = (bool *)jarg2; 
  result = ((ArConfigArg const *)arg1)->getCppString(arg2);
  jresult = SWIG_csharp_string_callback((&result)->c_str()); 
  return jresult;
}


SWIGEXPORT char * SWIGSTDCALL CSharp_ArConfigArg_getCppString__SWIG_1(void * jarg1) {
  char * jresult ;
  ArConfigArg *arg1 = (ArConfigArg *) 0 ;
  std::string result;
  
  arg1 = (ArConfigArg *)jarg1; 
  result = ((ArConfigArg const *)arg1)->getCppString();
  jresult = SWIG_csharp_string_callback((&result)->c_str()); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_ArConfigArg_getCppStringPtr__SWIG_0(void * jarg1, void * jarg2) {
  void * jresult ;
  ArConfigArg *arg1 = (ArConfigArg *) 0 ;
  bool *arg2 = (bool *) 0 ;
  std::string *result = 0 ;
  
  arg1 = (ArConfigArg *)jarg1; 
  arg2 = (bool *)jarg2; 
  result = (std::string *)((ArConfigArg const *)arg1)->getCppStringPtr(arg2);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_ArConfigArg_getCppStringPtr__SWIG_1(void * jarg1) {
  void * jresult ;
  ArConfigArg *arg1 = (ArConfigArg *) 0 ;
  std::string *result = 0 ;
  
  arg1 = (ArConfigArg *)jarg1; 
  result = (std::string *)((ArConfigArg const *)arg1)->getCppStringPtr();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_ArConfigArg_addArg(void * jarg1, void * jarg2) {
  unsigned int jresult ;
  ArConfigArg *arg1 = (ArConfigArg *) 0 ;
  ArConfigArg *arg2 = 0 ;
  bool result;
  
  arg1 = (ArConfigArg *)jarg1; 
  arg2 = (ArConfigArg *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "ArConfigArg const & type is null", 0);
    return 0;
  } 
  result = (bool)(arg1)->addArg((ArConfigArg const &)*arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_ArConfigArg_removeArg(void * jarg1, void * jarg2) {
  unsigned int jresult ;
  ArConfigArg *arg1 = (ArConfigArg *) 0 ;
  ArConfigArg *arg2 = 0 ;
  bool result;
  
  arg1 = (ArConfigArg *)jarg1; 
  arg2 = (ArConfigArg *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "ArConfigArg const & type is null", 0);
    return 0;
  } 
  result = (bool)(arg1)->removeArg((ArConfigArg const &)*arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_ArConfigArg_hasArgs(void * jarg1) {
  unsigned int jresult ;
  ArConfigArg *arg1 = (ArConfigArg *) 0 ;
  bool result;
  
  arg1 = (ArConfigArg *)jarg1; 
  result = (bool)((ArConfigArg const *)arg1)->hasArgs();
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned long SWIGSTDCALL CSharp_ArConfigArg_getArgCount(void * jarg1) {
  unsigned long jresult ;
  ArConfigArg *arg1 = (ArConfigArg *) 0 ;
  size_t result;
  
  arg1 = (ArConfigArg *)jarg1; 
  result = ((ArConfigArg const *)arg1)->getArgCount();
  jresult = (unsigned long)result; 
  return jresult;
}


SWIGEXPORT unsigned long SWIGSTDCALL CSharp_ArConfigArg_getDescendantArgCount(void * jarg1) {
  unsigned long jresult ;
  ArConfigArg *arg1 = (ArConfigArg *) 0 ;
  size_t result;
  
  arg1 = (ArConfigArg *)jarg1; 
  result = ((ArConfigArg const *)arg1)->getDescendantArgCount();
  jresult = (unsigned long)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_ArConfigArg_getArgs__SWIG_0(void * jarg1, void * jarg2) {
  void * jresult ;
  ArConfigArg *arg1 = (ArConfigArg *) 0 ;
  bool *arg2 = (bool *) 0 ;
  SwigValueWrapper< std::list< ArConfigArg > > result;
  
  arg1 = (ArConfigArg *)jarg1; 
  arg2 = (bool *)jarg2; 
  result = ((ArConfigArg const *)arg1)->getArgs(arg2);
  jresult = new std::list< ArConfigArg >((const std::list< ArConfigArg > &)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_ArConfigArg_getArgs__SWIG_1(void * jarg1) {
  void * jresult ;
  ArConfigArg *arg1 = (ArConfigArg *) 0 ;
  SwigValueWrapper< std::list< ArConfigArg > > result;
  
  arg1 = (ArConfigArg *)jarg1; 
  result = ((ArConfigArg const *)arg1)->getArgs();
  jresult = new std::list< ArConfigArg >((const std::list< ArConfigArg > &)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_ArConfigArg_getArg__SWIG_0(void * jarg1, unsigned long jarg2) {
  void * jresult ;
  ArConfigArg *arg1 = (ArConfigArg *) 0 ;
  size_t arg2 ;
  ArConfigArg *result = 0 ;
  
  arg1 = (ArConfigArg *)jarg1; 
  arg2 = (size_t)jarg2; 
  result = (ArConfigArg *)((ArConfigArg const *)arg1)->getArg(arg2);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_ArConfigArg_findArg__SWIG_0(void * jarg1, char * jarg2) {
  void * jresult ;
  ArConfigArg *arg1 = (ArConfigArg *) 0 ;
  char *arg2 = (char *) 0 ;
  ArConfigArg *result = 0 ;
  
  arg1 = (ArConfigArg *)jarg1; 
  arg2 = (char *)jarg2; 
  result = (ArConfigArg *)((ArConfigArg const *)arg1)->findArg((char const *)arg2);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_ArConfigArg_getAncestorList(void * jarg1, void * jarg2) {
  unsigned int jresult ;
  ArConfigArg *arg1 = (ArConfigArg *) 0 ;
  std::list< ArConfigArg * > *arg2 = (std::list< ArConfigArg * > *) 0 ;
  bool result;
  
  arg1 = (ArConfigArg *)jarg1; 
  arg2 = (std::list< ArConfigArg * > *)jarg2; 
  result = (bool)(arg1)->getAncestorList(arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_ArConfigArg_getTopLevelArg(void * jarg1) {
  void * jresult ;
  ArConfigArg *arg1 = (ArConfigArg *) 0 ;
  ArConfigArg *result = 0 ;
  
  arg1 = (ArConfigArg *)jarg1; 
  result = (ArConfigArg *)((ArConfigArg const *)arg1)->getTopLevelArg();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_ArConfigArg_getConfigPriority(void * jarg1) {
  int jresult ;
  ArConfigArg *arg1 = (ArConfigArg *) 0 ;
  ArPriority::Priority result;
  
  arg1 = (ArConfigArg *)jarg1; 
  result = (ArPriority::Priority)((ArConfigArg const *)arg1)->getConfigPriority();
  jresult = (int)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_ArConfigArg_setConfigPriority(void * jarg1, int jarg2) {
  ArConfigArg *arg1 = (ArConfigArg *) 0 ;
  ArPriority::Priority arg2 ;
  
  arg1 = (ArConfigArg *)jarg1; 
  arg2 = (ArPriority::Priority)jarg2; 
  (arg1)->setConfigPriority(arg2);
}


SWIGEXPORT char * SWIGSTDCALL CSharp_ArConfigArg_getDisplayHint(void * jarg1) {
  char * jresult ;
  ArConfigArg *arg1 = (ArConfigArg *) 0 ;
  char *result = 0 ;
  
  arg1 = (ArConfigArg *)jarg1; 
  result = (char *)((ArConfigArg const *)arg1)->getDisplayHint();
  jresult = SWIG_csharp_string_callback((const char *)result); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_ArConfigArg_setDisplayHint(void * jarg1, char * jarg2) {
  ArConfigArg *arg1 = (ArConfigArg *) 0 ;
  char *arg2 = (char *) 0 ;
  
  arg1 = (ArConfigArg *)jarg1; 
  arg2 = (char *)jarg2; 
  (arg1)->setDisplayHint((char const *)arg2);
}


SWIGEXPORT int SWIGSTDCALL CSharp_ArConfigArg_getRestartLevel(void * jarg1) {
  int jresult ;
  ArConfigArg *arg1 = (ArConfigArg *) 0 ;
  ArConfigArg::RestartLevel result;
  
  arg1 = (ArConfigArg *)jarg1; 
  result = (ArConfigArg::RestartLevel)((ArConfigArg const *)arg1)->getRestartLevel();
  jresult = (int)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_ArConfigArg_setRestartLevel(void * jarg1, int jarg2) {
  ArConfigArg *arg1 = (ArConfigArg *) 0 ;
  ArConfigArg::RestartLevel arg2 ;
  
  arg1 = (ArConfigArg *)jarg1; 
  arg2 = (ArConfigArg::RestartLevel)jarg2; 
  (arg1)->setRestartLevel(arg2);
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_ArConfigArg_getSuppressChanges(void * jarg1) {
  unsigned int jresult ;
  ArConfigArg *arg1 = (ArConfigArg *) 0 ;
  bool result;
  
  arg1 = (ArConfigArg *)jarg1; 
  result = (bool)((ArConfigArg const *)arg1)->getSuppressChanges();
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_ArConfigArg_setSuppressChanges(void * jarg1, unsigned int jarg2) {
  ArConfigArg *arg1 = (ArConfigArg *) 0 ;
  bool arg2 ;
  
  arg1 = (ArConfigArg *)jarg1; 
  arg2 = jarg2 ? true : false; 
  (arg1)->setSuppressChanges(arg2);
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_ArConfigArg_isSerializable(void * jarg1) {
  unsigned int jresult ;
  ArConfigArg *arg1 = (ArConfigArg *) 0 ;
  bool result;
  
  arg1 = (ArConfigArg *)jarg1; 
  result = (bool)((ArConfigArg const *)arg1)->isSerializable();
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_ArConfigArg_setSerializable(void * jarg1, unsigned int jarg2) {
  ArConfigArg *arg1 = (ArConfigArg *) 0 ;
  bool arg2 ;
  
  arg1 = (ArConfigArg *)jarg1; 
  arg2 = jarg2 ? true : false; 
  (arg1)->setSerializable(arg2);
}


SWIGEXPORT void * SWIGSTDCALL CSharp_ArConfigArg_getParentArg(void * jarg1) {
  void * jresult ;
  ArConfigArg *arg1 = (ArConfigArg *) 0 ;
  ArConfigArg *result = 0 ;
  
  arg1 = (ArConfigArg *)jarg1; 
  result = (ArConfigArg *)((ArConfigArg const *)arg1)->getParentArg();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT char * SWIGSTDCALL CSharp_ArConfigArg_getParentPathName__SWIG_0(void * jarg1, char jarg2) {
  char * jresult ;
  ArConfigArg *arg1 = (ArConfigArg *) 0 ;
  char arg2 ;
  std::string result;
  
  arg1 = (ArConfigArg *)jarg1; 
  arg2 = (char)jarg2; 
  result = ((ArConfigArg const *)arg1)->getParentPathName(arg2);
  jresult = SWIG_csharp_string_callback((&result)->c_str()); 
  return jresult;
}


SWIGEXPORT char * SWIGSTDCALL CSharp_ArConfigArg_getParentPathName__SWIG_1(void * jarg1) {
  char * jresult ;
  ArConfigArg *arg1 = (ArConfigArg *) 0 ;
  std::string result;
  
  arg1 = (ArConfigArg *)jarg1; 
  result = ((ArConfigArg const *)arg1)->getParentPathName();
  jresult = SWIG_csharp_string_callback((&result)->c_str()); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_ArConfigArg_splitParentPathName__SWIG_0(char * jarg1, char jarg2) {
  void * jresult ;
  char *arg1 = (char *) 0 ;
  char arg2 ;
  SwigValueWrapper< std::list< std::string > > result;
  
  arg1 = (char *)jarg1; 
  arg2 = (char)jarg2; 
  result = ArConfigArg::splitParentPathName((char const *)arg1,arg2);
  jresult = new std::list< std::string >((const std::list< std::string > &)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_ArConfigArg_splitParentPathName__SWIG_1(char * jarg1) {
  void * jresult ;
  char *arg1 = (char *) 0 ;
  SwigValueWrapper< std::list< std::string > > result;
  
  arg1 = (char *)jarg1; 
  result = ArConfigArg::splitParentPathName((char const *)arg1);
  jresult = new std::list< std::string >((const std::list< std::string > &)result); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_ArConfigArg_replaceSpacesInName(void * jarg1) {
  ArConfigArg *arg1 = (ArConfigArg *) 0 ;
  
  arg1 = (ArConfigArg *)jarg1; 
  (arg1)->replaceSpacesInName();
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_ArConfigArg_hasMinBound(void * jarg1) {
  unsigned int jresult ;
  ArConfigArg *arg1 = (ArConfigArg *) 0 ;
  bool result;
  
  arg1 = (ArConfigArg *)jarg1; 
  result = (bool)((ArConfigArg const *)arg1)->hasMinBound();
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_ArConfigArg_hasMaxBound(void * jarg1) {
  unsigned int jresult ;
  ArConfigArg *arg1 = (ArConfigArg *) 0 ;
  bool result;
  
  arg1 = (ArConfigArg *)jarg1; 
  result = (bool)((ArConfigArg const *)arg1)->hasMaxBound();
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_ArConfigArg_setIgnoreBounds__SWIG_0(void * jarg1, unsigned int jarg2) {
  ArConfigArg *arg1 = (ArConfigArg *) 0 ;
  bool arg2 ;
  
  arg1 = (ArConfigArg *)jarg1; 
  arg2 = jarg2 ? true : false; 
  (arg1)->setIgnoreBounds(arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_ArConfigArg_setIgnoreBounds__SWIG_1(void * jarg1) {
  ArConfigArg *arg1 = (ArConfigArg *) 0 ;
  
  arg1 = (ArConfigArg *)jarg1; 
  (arg1)->setIgnoreBounds();
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_ArConfigArg_hasExternalDataReference(void * jarg1) {
  unsigned int jresult ;
  ArConfigArg *arg1 = (ArConfigArg *) 0 ;
  bool result;
  
  arg1 = (ArConfigArg *)jarg1; 
  result = (bool)((ArConfigArg const *)arg1)->hasExternalDataReference();
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_ArConfigArg_isPlaceholder(void * jarg1) {
  unsigned int jresult ;
  ArConfigArg *arg1 = (ArConfigArg *) 0 ;
  bool result;
  
  arg1 = (ArConfigArg *)jarg1; 
  result = (bool)((ArConfigArg const *)arg1)->isPlaceholder();
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_ArConfigArg_addToFileParser__SWIG_0(void * jarg1, void * jarg2, void * jarg3, char * jarg4, unsigned int jarg5) {
  unsigned int jresult ;
  ArConfigArg *arg1 = (ArConfigArg *) 0 ;
  ArFileParser *arg2 = (ArFileParser *) 0 ;
  ArRetFunctor3C< bool,ArConfig,ArArgumentBuilder *,char *,size_t > *arg3 = (ArRetFunctor3C< bool,ArConfig,ArArgumentBuilder *,char *,size_t > *) 0 ;
  char *arg4 = (char *) 0 ;
  bool arg5 ;
  bool result;
  
  arg1 = (ArConfigArg *)jarg1; 
  arg2 = (ArFileParser *)jarg2; 
  arg3 = (ArRetFunctor3C< bool,ArConfig,ArArgumentBuilder *,char *,size_t > *)jarg3; 
  arg4 = (char *)jarg4; 
  arg5 = jarg5 ? true : false; 
  result = (bool)((ArConfigArg const *)arg1)->addToFileParser(arg2,arg3,(char const *)arg4,arg5);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_ArConfigArg_addToFileParser__SWIG_1(void * jarg1, void * jarg2, void * jarg3, char * jarg4) {
  unsigned int jresult ;
  ArConfigArg *arg1 = (ArConfigArg *) 0 ;
  ArFileParser *arg2 = (ArFileParser *) 0 ;
  ArRetFunctor3C< bool,ArConfig,ArArgumentBuilder *,char *,size_t > *arg3 = (ArRetFunctor3C< bool,ArConfig,ArArgumentBuilder *,char *,size_t > *) 0 ;
  char *arg4 = (char *) 0 ;
  bool result;
  
  arg1 = (ArConfigArg *)jarg1; 
  arg2 = (ArFileParser *)jarg2; 
  arg3 = (ArRetFunctor3C< bool,ArConfig,ArArgumentBuilder *,char *,size_t > *)jarg3; 
  arg4 = (char *)jarg4; 
  result = (bool)((ArConfigArg const *)arg1)->addToFileParser(arg2,arg3,(char const *)arg4);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_ArConfigArg_addToFileParser__SWIG_2(void * jarg1, void * jarg2, void * jarg3) {
  unsigned int jresult ;
  ArConfigArg *arg1 = (ArConfigArg *) 0 ;
  ArFileParser *arg2 = (ArFileParser *) 0 ;
  ArRetFunctor3C< bool,ArConfig,ArArgumentBuilder *,char *,size_t > *arg3 = (ArRetFunctor3C< bool,ArConfig,ArArgumentBuilder *,char *,size_t > *) 0 ;
  bool result;
  
  arg1 = (ArConfigArg *)jarg1; 
  arg2 = (ArFileParser *)jarg2; 
  arg3 = (ArRetFunctor3C< bool,ArConfig,ArArgumentBuilder *,char *,size_t > *)jarg3; 
  result = (bool)((ArConfigArg const *)arg1)->addToFileParser(arg2,arg3);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_ArConfigArg_parseArgument__SWIG_0(void * jarg1, void * jarg2, char * jarg3, unsigned long jarg4, char * jarg5, unsigned int jarg6, void * jarg7) {
  unsigned int jresult ;
  ArConfigArg *arg1 = (ArConfigArg *) 0 ;
  ArArgumentBuilder *arg2 = (ArArgumentBuilder *) 0 ;
  char *arg3 = (char *) 0 ;
  size_t arg4 ;
  char *arg5 = (char *) 0 ;
  bool arg6 ;
  bool *arg7 = (bool *) 0 ;
  bool result;
  
  arg1 = (ArConfigArg *)jarg1; 
  arg2 = (ArArgumentBuilder *)jarg2; 
  arg3 = (char *)jarg3; 
  arg4 = (size_t)jarg4; 
  arg5 = (char *)jarg5; 
  arg6 = jarg6 ? true : false; 
  arg7 = (bool *)jarg7; 
  result = (bool)(arg1)->parseArgument(arg2,arg3,arg4,(char const *)arg5,arg6,arg7);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_ArConfigArg_parseArgument__SWIG_1(void * jarg1, void * jarg2, char * jarg3, unsigned long jarg4, char * jarg5, unsigned int jarg6) {
  unsigned int jresult ;
  ArConfigArg *arg1 = (ArConfigArg *) 0 ;
  ArArgumentBuilder *arg2 = (ArArgumentBuilder *) 0 ;
  char *arg3 = (char *) 0 ;
  size_t arg4 ;
  char *arg5 = (char *) 0 ;
  bool arg6 ;
  bool result;
  
  arg1 = (ArConfigArg *)jarg1; 
  arg2 = (ArArgumentBuilder *)jarg2; 
  arg3 = (char *)jarg3; 
  arg4 = (size_t)jarg4; 
  arg5 = (char *)jarg5; 
  arg6 = jarg6 ? true : false; 
  result = (bool)(arg1)->parseArgument(arg2,arg3,arg4,(char const *)arg5,arg6);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_ArConfigArg_parseArgument__SWIG_2(void * jarg1, void * jarg2, char * jarg3, unsigned long jarg4, char * jarg5) {
  unsigned int jresult ;
  ArConfigArg *arg1 = (ArConfigArg *) 0 ;
  ArArgumentBuilder *arg2 = (ArArgumentBuilder *) 0 ;
  char *arg3 = (char *) 0 ;
  size_t arg4 ;
  char *arg5 = (char *) 0 ;
  bool result;
  
  arg1 = (ArConfigArg *)jarg1; 
  arg2 = (ArArgumentBuilder *)jarg2; 
  arg3 = (char *)jarg3; 
  arg4 = (size_t)jarg4; 
  arg5 = (char *)jarg5; 
  result = (bool)(arg1)->parseArgument(arg2,arg3,arg4,(char const *)arg5);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_ArConfigArg_parseArgument__SWIG_3(void * jarg1, void * jarg2, char * jarg3, unsigned long jarg4) {
  unsigned int jresult ;
  ArConfigArg *arg1 = (ArConfigArg *) 0 ;
  ArArgumentBuilder *arg2 = (ArArgumentBuilder *) 0 ;
  char *arg3 = (char *) 0 ;
  size_t arg4 ;
  bool result;
  
  arg1 = (ArConfigArg *)jarg1; 
  arg2 = (ArArgumentBuilder *)jarg2; 
  arg3 = (char *)jarg3; 
  arg4 = (size_t)jarg4; 
  result = (bool)(arg1)->parseArgument(arg2,arg3,arg4);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_ArConfigArg_writeArguments__SWIG_0(void * jarg1, void * jarg2, char * jarg3, int jarg4, int jarg5, unsigned int jarg6, char * jarg7, int jarg8) {
  unsigned int jresult ;
  ArConfigArg *arg1 = (ArConfigArg *) 0 ;
  FILE *arg2 = (FILE *) 0 ;
  char *arg3 = (char *) 0 ;
  int arg4 ;
  int arg5 ;
  bool arg6 ;
  char *arg7 = (char *) 0 ;
  int arg8 ;
  bool result;
  
  arg1 = (ArConfigArg *)jarg1; 
  arg2 = (FILE *)jarg2; 
  arg3 = (char *)jarg3; 
  arg4 = (int)jarg4; 
  arg5 = (int)jarg5; 
  arg6 = jarg6 ? true : false; 
  arg7 = (char *)jarg7; 
  arg8 = (int)jarg8; 
  result = (bool)((ArConfigArg const *)arg1)->writeArguments(arg2,arg3,arg4,arg5,arg6,(char const *)arg7,arg8);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_ArConfigArg_writeArguments__SWIG_1(void * jarg1, void * jarg2, char * jarg3, int jarg4, int jarg5, unsigned int jarg6, char * jarg7) {
  unsigned int jresult ;
  ArConfigArg *arg1 = (ArConfigArg *) 0 ;
  FILE *arg2 = (FILE *) 0 ;
  char *arg3 = (char *) 0 ;
  int arg4 ;
  int arg5 ;
  bool arg6 ;
  char *arg7 = (char *) 0 ;
  bool result;
  
  arg1 = (ArConfigArg *)jarg1; 
  arg2 = (FILE *)jarg2; 
  arg3 = (char *)jarg3; 
  arg4 = (int)jarg4; 
  arg5 = (int)jarg5; 
  arg6 = jarg6 ? true : false; 
  arg7 = (char *)jarg7; 
  result = (bool)((ArConfigArg const *)arg1)->writeArguments(arg2,arg3,arg4,arg5,arg6,(char const *)arg7);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_ArConfigArg_writeArguments__SWIG_2(void * jarg1, void * jarg2, char * jarg3, int jarg4, int jarg5, unsigned int jarg6) {
  unsigned int jresult ;
  ArConfigArg *arg1 = (ArConfigArg *) 0 ;
  FILE *arg2 = (FILE *) 0 ;
  char *arg3 = (char *) 0 ;
  int arg4 ;
  int arg5 ;
  bool arg6 ;
  bool result;
  
  arg1 = (ArConfigArg *)jarg1; 
  arg2 = (FILE *)jarg2; 
  arg3 = (char *)jarg3; 
  arg4 = (int)jarg4; 
  arg5 = (int)jarg5; 
  arg6 = jarg6 ? true : false; 
  result = (bool)((ArConfigArg const *)arg1)->writeArguments(arg2,arg3,arg4,arg5,arg6);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_ArConfigArg_writeArguments__SWIG_3(void * jarg1, void * jarg2, char * jarg3, int jarg4, int jarg5) {
  unsigned int jresult ;
  ArConfigArg *arg1 = (ArConfigArg *) 0 ;
  FILE *arg2 = (FILE *) 0 ;
  char *arg3 = (char *) 0 ;
  int arg4 ;
  int arg5 ;
  bool result;
  
  arg1 = (ArConfigArg *)jarg1; 
  arg2 = (FILE *)jarg2; 
  arg3 = (char *)jarg3; 
  arg4 = (int)jarg4; 
  arg5 = (int)jarg5; 
  result = (bool)((ArConfigArg const *)arg1)->writeArguments(arg2,arg3,arg4,arg5);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_ArConfigArg_writeName(void * jarg1, char * jarg2, int jarg3, int jarg4) {
  unsigned int jresult ;
  ArConfigArg *arg1 = (ArConfigArg *) 0 ;
  char *arg2 = (char *) 0 ;
  int arg3 ;
  int arg4 ;
  bool result;
  
  arg1 = (ArConfigArg *)jarg1; 
  arg2 = (char *)jarg2; 
  arg3 = (int)jarg3; 
  arg4 = (int)jarg4; 
  result = (bool)((ArConfigArg const *)arg1)->writeName(arg2,arg3,arg4);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_ArConfigArg_writeBounds__SWIG_0(void * jarg1, char * jarg2, unsigned long jarg3, char * jarg4) {
  unsigned int jresult ;
  ArConfigArg *arg1 = (ArConfigArg *) 0 ;
  char *arg2 = (char *) 0 ;
  size_t arg3 ;
  char *arg4 = (char *) 0 ;
  bool result;
  
  arg1 = (ArConfigArg *)jarg1; 
  arg2 = (char *)jarg2; 
  arg3 = (size_t)jarg3; 
  arg4 = (char *)jarg4; 
  result = (bool)((ArConfigArg const *)arg1)->writeBounds(arg2,arg3,(char const *)arg4);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_ArConfigArg_writeBounds__SWIG_1(void * jarg1, char * jarg2, unsigned long jarg3) {
  unsigned int jresult ;
  ArConfigArg *arg1 = (ArConfigArg *) 0 ;
  char *arg2 = (char *) 0 ;
  size_t arg3 ;
  bool result;
  
  arg1 = (ArConfigArg *)jarg1; 
  arg2 = (char *)jarg2; 
  arg3 = (size_t)jarg3; 
  result = (bool)((ArConfigArg const *)arg1)->writeBounds(arg2,arg3);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_ArConfigArg_isNone(char * jarg1) {
  unsigned int jresult ;
  char *arg1 = (char *) 0 ;
  bool result;
  
  arg1 = (char *)jarg1; 
  result = (bool)ArConfigArg::isNone((char const *)arg1);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_ArConfigArg_parseSocket(void * jarg1, void * jarg2, char * jarg3, unsigned long jarg4) {
  unsigned int jresult ;
  ArConfigArg *arg1 = (ArConfigArg *) 0 ;
  ArArgumentBuilder *arg2 = 0 ;
  char *arg3 = (char *) 0 ;
  size_t arg4 ;
  bool result;
  
  arg1 = (ArConfigArg *)jarg1; 
  arg2 = (ArArgumentBuilder *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "ArArgumentBuilder const & type is null", 0);
    return 0;
  } 
  arg3 = (char *)jarg3; 
  arg4 = (size_t)jarg4; 
  result = (bool)(arg1)->parseSocket((ArArgumentBuilder const &)*arg2,arg3,arg4);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_ArConfigArg_writeValue(void * jarg1, void * jarg2, char * jarg3) {
  unsigned int jresult ;
  ArConfigArg *arg1 = (ArConfigArg *) 0 ;
  ArSocket *arg2 = (ArSocket *) 0 ;
  char *arg3 = (char *) 0 ;
  bool result;
  
  arg1 = (ArConfigArg *)jarg1; 
  arg2 = (ArSocket *)jarg2; 
  arg3 = (char *)jarg3; 
  result = (bool)((ArConfigArg const *)arg1)->writeValue(arg2,(char const *)arg3);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_ArConfigArg_writeInfo(void * jarg1, void * jarg2, char * jarg3) {
  unsigned int jresult ;
  ArConfigArg *arg1 = (ArConfigArg *) 0 ;
  ArSocket *arg2 = (ArSocket *) 0 ;
  char *arg3 = (char *) 0 ;
  bool result;
  
  arg1 = (ArConfigArg *)jarg1; 
  arg2 = (ArSocket *)jarg2; 
  arg3 = (char *)jarg3; 
  result = (bool)((ArConfigArg const *)arg1)->writeInfo(arg2,(char const *)arg3);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_ArConfigArg_log__SWIG_0(void * jarg1, unsigned int jarg2, int jarg3, char * jarg4) {
  ArConfigArg *arg1 = (ArConfigArg *) 0 ;
  bool arg2 ;
  int arg3 ;
  char *arg4 = (char *) 0 ;
  
  arg1 = (ArConfigArg *)jarg1; 
  arg2 = jarg2 ? true : false; 
  arg3 = (int)jarg3; 
  arg4 = (char *)jarg4; 
  ((ArConfigArg const *)arg1)->log(arg2,arg3,(char const *)arg4);
}


SWIGEXPORT void SWIGSTDCALL CSharp_ArConfigArg_log__SWIG_1(void * jarg1, unsigned int jarg2, int jarg3) {
  ArConfigArg *arg1 = (ArConfigArg *) 0 ;
  bool arg2 ;
  int arg3 ;
  
  arg1 = (ArConfigArg *)jarg1; 
  arg2 = jarg2 ? true : false; 
  arg3 = (int)jarg3; 
  ((ArConfigArg const *)arg1)->log(arg2,arg3);
}


SWIGEXPORT void SWIGSTDCALL CSharp_ArConfigArg_log__SWIG_2(void * jarg1, unsigned int jarg2) {
  ArConfigArg *arg1 = (ArConfigArg *) 0 ;
  bool arg2 ;
  
  arg1 = (ArConfigArg *)jarg1; 
  arg2 = jarg2 ? true : false; 
  ((ArConfigArg const *)arg1)->log(arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_ArConfigArg_log__SWIG_3(void * jarg1) {
  ArConfigArg *arg1 = (ArConfigArg *) 0 ;
  
  arg1 = (ArConfigArg *)jarg1; 
  ((ArConfigArg const *)arg1)->log();
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_ArConfigArg_isValueEqual(void * jarg1, void * jarg2) {
  unsigned int jresult ;
  ArConfigArg *arg1 = (ArConfigArg *) 0 ;
  ArConfigArg *arg2 = 0 ;
  bool result;
  
  arg1 = (ArConfigArg *)jarg1; 
  arg2 = (ArConfigArg *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "ArConfigArg const & type is null", 0);
    return 0;
  } 
  result = (bool)((ArConfigArg const *)arg1)->isValueEqual((ArConfigArg const &)*arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_ArConfigArg_setValue__SWIG_0(void * jarg1, void * jarg2, unsigned int jarg3) {
  unsigned int jresult ;
  ArConfigArg *arg1 = (ArConfigArg *) 0 ;
  ArConfigArg *arg2 = 0 ;
  bool arg3 ;
  bool result;
  
  arg1 = (ArConfigArg *)jarg1; 
  arg2 = (ArConfigArg *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "ArConfigArg const & type is null", 0);
    return 0;
  } 
  arg3 = jarg3 ? true : false; 
  result = (bool)(arg1)->setValue((ArConfigArg const &)*arg2,arg3);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_ArConfigArg_setValue__SWIG_1(void * jarg1, void * jarg2) {
  unsigned int jresult ;
  ArConfigArg *arg1 = (ArConfigArg *) 0 ;
  ArConfigArg *arg2 = 0 ;
  bool result;
  
  arg1 = (ArConfigArg *)jarg1; 
  arg2 = (ArConfigArg *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "ArConfigArg const & type is null", 0);
    return 0;
  } 
  result = (bool)(arg1)->setValue((ArConfigArg const &)*arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_ArConfigArg_isValueSet(void * jarg1) {
  unsigned int jresult ;
  ArConfigArg *arg1 = (ArConfigArg *) 0 ;
  bool result;
  
  arg1 = (ArConfigArg *)jarg1; 
  result = (bool)(arg1)->isValueSet();
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_ArConfigArg_clearValueSet(void * jarg1) {
  ArConfigArg *arg1 = (ArConfigArg *) 0 ;
  
  arg1 = (ArConfigArg *)jarg1; 
  (arg1)->clearValueSet();
}


SWIGEXPORT void SWIGSTDCALL CSharp_ArConfigArg_setValueSet(void * jarg1) {
  ArConfigArg *arg1 = (ArConfigArg *) 0 ;
  
  arg1 = (ArConfigArg *)jarg1; 
  (arg1)->setValueSet();
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_ArConfigArg_isTranslated(void * jarg1) {
  unsigned int jresult ;
  ArConfigArg *arg1 = (ArConfigArg *) 0 ;
  bool result;
  
  arg1 = (ArConfigArg *)jarg1; 
  result = (bool)((ArConfigArg const *)arg1)->isTranslated();
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_ArConfigArg_setTranslated(void * jarg1, unsigned int jarg2) {
  ArConfigArg *arg1 = (ArConfigArg *) 0 ;
  bool arg2 ;
  
  arg1 = (ArConfigArg *)jarg1; 
  arg2 = jarg2 ? true : false; 
  (arg1)->setTranslated(arg2);
}


SWIGEXPORT int SWIGSTDCALL CSharp_ArConfigArg_MAX_RESOURCE_ARG_TEXT_LENGTH_get() {
  int jresult ;
  int result;
  
  result = (int)ArConfigArg::MAX_RESOURCE_ARG_TEXT_LENGTH;
  jresult = (int)result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_ArConfigArg_parseResource__SWIG_0(void * jarg1, void * jarg2, char * jarg3, unsigned long jarg4, char * jarg5, unsigned int jarg6) {
  unsigned int jresult ;
  ArConfigArg *arg1 = (ArConfigArg *) 0 ;
  ArArgumentBuilder *arg2 = (ArArgumentBuilder *) 0 ;
  char *arg3 = (char *) 0 ;
  size_t arg4 ;
  char *arg5 = (char *) 0 ;
  bool arg6 ;
  bool result;
  
  arg1 = (ArConfigArg *)jarg1; 
  arg2 = (ArArgumentBuilder *)jarg2; 
  arg3 = (char *)jarg3; 
  arg4 = (size_t)jarg4; 
  arg5 = (char *)jarg5; 
  arg6 = jarg6 ? true : false; 
  result = (bool)(arg1)->parseResource(arg2,arg3,arg4,(char const *)arg5,arg6);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_ArConfigArg_parseResource__SWIG_1(void * jarg1, void * jarg2, char * jarg3, unsigned long jarg4, char * jarg5) {
  unsigned int jresult ;
  ArConfigArg *arg1 = (ArConfigArg *) 0 ;
  ArArgumentBuilder *arg2 = (ArArgumentBuilder *) 0 ;
  char *arg3 = (char *) 0 ;
  size_t arg4 ;
  char *arg5 = (char *) 0 ;
  bool result;
  
  arg1 = (ArConfigArg *)jarg1; 
  arg2 = (ArArgumentBuilder *)jarg2; 
  arg3 = (char *)jarg3; 
  arg4 = (size_t)jarg4; 
  arg5 = (char *)jarg5; 
  result = (bool)(arg1)->parseResource(arg2,arg3,arg4,(char const *)arg5);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_ArConfigArg_parseResource__SWIG_2(void * jarg1, void * jarg2, char * jarg3, unsigned long jarg4) {
  unsigned int jresult ;
  ArConfigArg *arg1 = (ArConfigArg *) 0 ;
  ArArgumentBuilder *arg2 = (ArArgumentBuilder *) 0 ;
  char *arg3 = (char *) 0 ;
  size_t arg4 ;
  bool result;
  
  arg1 = (ArConfigArg *)jarg1; 
  arg2 = (ArArgumentBuilder *)jarg2; 
  arg3 = (char *)jarg3; 
  arg4 = (size_t)jarg4; 
  result = (bool)(arg1)->parseResource(arg2,arg3,arg4);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_ArConfigArg_parseResourceArgText(char * jarg1, char * jarg2, unsigned long jarg3) {
  unsigned int jresult ;
  char *arg1 = (char *) 0 ;
  char *arg2 = (char *) 0 ;
  size_t arg3 ;
  bool result;
  
  arg1 = (char *)jarg1; 
  arg2 = (char *)jarg2; 
  arg3 = (size_t)jarg3; 
  result = (bool)ArConfigArg::parseResourceArgText((char const *)arg1,arg2,arg3);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_ArConfigArg_writeResource__SWIG_0(void * jarg1, void * jarg2, char * jarg3, int jarg4, char jarg5, char * jarg6, char * jarg7) {
  unsigned int jresult ;
  ArConfigArg *arg1 = (ArConfigArg *) 0 ;
  FILE *arg2 = (FILE *) 0 ;
  char *arg3 = (char *) 0 ;
  int arg4 ;
  char arg5 ;
  char *arg6 = (char *) 0 ;
  char *arg7 = (char *) 0 ;
  bool result;
  
  arg1 = (ArConfigArg *)jarg1; 
  arg2 = (FILE *)jarg2; 
  arg3 = (char *)jarg3; 
  arg4 = (int)jarg4; 
  arg5 = (char)jarg5; 
  arg6 = (char *)jarg6; 
  arg7 = (char *)jarg7; 
  result = (bool)((ArConfigArg const *)arg1)->writeResource(arg2,arg3,arg4,arg5,(char const *)arg6,(char const *)arg7);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_ArConfigArg_writeResource__SWIG_1(void * jarg1, void * jarg2, char * jarg3, int jarg4, char jarg5, char * jarg6) {
  unsigned int jresult ;
  ArConfigArg *arg1 = (ArConfigArg *) 0 ;
  FILE *arg2 = (FILE *) 0 ;
  char *arg3 = (char *) 0 ;
  int arg4 ;
  char arg5 ;
  char *arg6 = (char *) 0 ;
  bool result;
  
  arg1 = (ArConfigArg *)jarg1; 
  arg2 = (FILE *)jarg2; 
  arg3 = (char *)jarg3; 
  arg4 = (int)jarg4; 
  arg5 = (char)jarg5; 
  arg6 = (char *)jarg6; 
  result = (bool)((ArConfigArg const *)arg1)->writeResource(arg2,arg3,arg4,arg5,(char const *)arg6);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_ArConfigArg_writeResourceHeader__SWIG_0(void * jarg1, char * jarg2, int jarg3, char jarg4, char * jarg5, char * jarg6) {
  int jresult ;
  FILE *arg1 = (FILE *) 0 ;
  char *arg2 = (char *) 0 ;
  int arg3 ;
  char arg4 ;
  char *arg5 = (char *) 0 ;
  char *arg6 = (char *) 0 ;
  int result;
  
  arg1 = (FILE *)jarg1; 
  arg2 = (char *)jarg2; 
  arg3 = (int)jarg3; 
  arg4 = (char)jarg4; 
  arg5 = (char *)jarg5; 
  arg6 = (char *)jarg6; 
  result = (int)ArConfigArg::writeResourceHeader(arg1,arg2,arg3,arg4,(char const *)arg5,(char const *)arg6);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_ArConfigArg_writeResourceHeader__SWIG_1(void * jarg1, char * jarg2, int jarg3, char jarg4, char * jarg5) {
  int jresult ;
  FILE *arg1 = (FILE *) 0 ;
  char *arg2 = (char *) 0 ;
  int arg3 ;
  char arg4 ;
  char *arg5 = (char *) 0 ;
  int result;
  
  arg1 = (FILE *)jarg1; 
  arg2 = (char *)jarg2; 
  arg3 = (int)jarg3; 
  arg4 = (char)jarg4; 
  arg5 = (char *)jarg5; 
  result = (int)ArConfigArg::writeResourceHeader(arg1,arg2,arg3,arg4,(char const *)arg5);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_ArConfigArg_writeResourceSectionHeader__SWIG_0(void * jarg1, char * jarg2, int jarg3, char jarg4, char * jarg5, char * jarg6, char * jarg7, char * jarg8, unsigned int jarg9, char * jarg10) {
  int jresult ;
  FILE *arg1 = (FILE *) 0 ;
  char *arg2 = (char *) 0 ;
  int arg3 ;
  char arg4 ;
  char *arg5 = (char *) 0 ;
  char *arg6 = (char *) 0 ;
  char *arg7 = (char *) 0 ;
  char *arg8 = (char *) 0 ;
  bool arg9 ;
  char *arg10 = (char *) 0 ;
  int result;
  
  arg1 = (FILE *)jarg1; 
  arg2 = (char *)jarg2; 
  arg3 = (int)jarg3; 
  arg4 = (char)jarg4; 
  arg5 = (char *)jarg5; 
  arg6 = (char *)jarg6; 
  arg7 = (char *)jarg7; 
  arg8 = (char *)jarg8; 
  arg9 = jarg9 ? true : false; 
  arg10 = (char *)jarg10; 
  result = (int)ArConfigArg::writeResourceSectionHeader(arg1,arg2,arg3,arg4,(char const *)arg5,(char const *)arg6,(char const *)arg7,(char const *)arg8,arg9,(char const *)arg10);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_ArConfigArg_writeResourceSectionHeader__SWIG_1(void * jarg1, char * jarg2, int jarg3, char jarg4, char * jarg5, char * jarg6, char * jarg7, char * jarg8, unsigned int jarg9) {
  int jresult ;
  FILE *arg1 = (FILE *) 0 ;
  char *arg2 = (char *) 0 ;
  int arg3 ;
  char arg4 ;
  char *arg5 = (char *) 0 ;
  char *arg6 = (char *) 0 ;
  char *arg7 = (char *) 0 ;
  char *arg8 = (char *) 0 ;
  bool arg9 ;
  int result;
  
  arg1 = (FILE *)jarg1; 
  arg2 = (char *)jarg2; 
  arg3 = (int)jarg3; 
  arg4 = (char)jarg4; 
  arg5 = (char *)jarg5; 
  arg6 = (char *)jarg6; 
  arg7 = (char *)jarg7; 
  arg8 = (char *)jarg8; 
  arg9 = jarg9 ? true : false; 
  result = (int)ArConfigArg::writeResourceSectionHeader(arg1,arg2,arg3,arg4,(char const *)arg5,(char const *)arg6,(char const *)arg7,(char const *)arg8,arg9);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_ArConfigGroup__SWIG_0(char * jarg1) {
  void * jresult ;
  char *arg1 = (char *) 0 ;
  ArConfigGroup *result = 0 ;
  
  arg1 = (char *)jarg1; 
  result = (ArConfigGroup *)new ArConfigGroup((char const *)arg1);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_ArConfigGroup__SWIG_1() {
  void * jresult ;
  ArConfigGroup *result = 0 ;
  
  result = (ArConfigGroup *)new ArConfigGroup();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_ArConfigGroup(void * jarg1) {
  ArConfigGroup *arg1 = (ArConfigGroup *) 0 ;
  
  arg1 = (ArConfigGroup *)jarg1; 
  delete arg1;
}


SWIGEXPORT void SWIGSTDCALL CSharp_ArConfigGroup_addConfig(void * jarg1, void * jarg2) {
  ArConfigGroup *arg1 = (ArConfigGroup *) 0 ;
  ArConfig *arg2 = (ArConfig *) 0 ;
  
  arg1 = (ArConfigGroup *)jarg1; 
  arg2 = (ArConfig *)jarg2; 
  (arg1)->addConfig(arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_ArConfigGroup_remConfig(void * jarg1, void * jarg2) {
  ArConfigGroup *arg1 = (ArConfigGroup *) 0 ;
  ArConfig *arg2 = (ArConfig *) 0 ;
  
  arg1 = (ArConfigGroup *)jarg1; 
  arg2 = (ArConfig *)jarg2; 
  (arg1)->remConfig(arg2);
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_ArConfigGroup_parseFile__SWIG_0(void * jarg1, char * jarg2, unsigned int jarg3) {
  unsigned int jresult ;
  ArConfigGroup *arg1 = (ArConfigGroup *) 0 ;
  char *arg2 = (char *) 0 ;
  bool arg3 ;
  bool result;
  
  arg1 = (ArConfigGroup *)jarg1; 
  arg2 = (char *)jarg2; 
  arg3 = jarg3 ? true : false; 
  result = (bool)(arg1)->parseFile((char const *)arg2,arg3);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_ArConfigGroup_parseFile__SWIG_1(void * jarg1, char * jarg2) {
  unsigned int jresult ;
  ArConfigGroup *arg1 = (ArConfigGroup *) 0 ;
  char *arg2 = (char *) 0 ;
  bool result;
  
  arg1 = (ArConfigGroup *)jarg1; 
  arg2 = (char *)jarg2; 
  result = (bool)(arg1)->parseFile((char const *)arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_ArConfigGroup_reloadFile__SWIG_0(void * jarg1, unsigned int jarg2) {
  unsigned int jresult ;
  ArConfigGroup *arg1 = (ArConfigGroup *) 0 ;
  bool arg2 ;
  bool result;
  
  arg1 = (ArConfigGroup *)jarg1; 
  arg2 = jarg2 ? true : false; 
  result = (bool)(arg1)->reloadFile(arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_ArConfigGroup_reloadFile__SWIG_1(void * jarg1) {
  unsigned int jresult ;
  ArConfigGroup *arg1 = (ArConfigGroup *) 0 ;
  bool result;
  
  arg1 = (ArConfigGroup *)jarg1; 
  result = (bool)(arg1)->reloadFile();
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_ArConfigGroup_writeFile(void * jarg1, char * jarg2) {
  unsigned int jresult ;
  ArConfigGroup *arg1 = (ArConfigGroup *) 0 ;
  char *arg2 = (char *) 0 ;
  bool result;
  
  arg1 = (ArConfigGroup *)jarg1; 
  arg2 = (char *)jarg2; 
  result = (bool)(arg1)->writeFile((char const *)arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_ArConfigGroup_setBaseDirectory(void * jarg1, char * jarg2) {
  ArConfigGroup *arg1 = (ArConfigGroup *) 0 ;
  char *arg2 = (char *) 0 ;
  
  arg1 = (ArConfigGroup *)jarg1; 
  arg2 = (char *)jarg2; 
  (arg1)->setBaseDirectory((char const *)arg2);
}


SWIGEXPORT char * SWIGSTDCALL CSharp_ArConfigGroup_getBaseDirectory(void * jarg1) {
  char * jresult ;
  ArConfigGroup *arg1 = (ArConfigGroup *) 0 ;
  char *result = 0 ;
  
  arg1 = (ArConfigGroup *)jarg1; 
  result = (char *)((ArConfigGroup const *)arg1)->getBaseDirectory();
  jresult = SWIG_csharp_string_callback((const char *)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_ArDataLogger__SWIG_0(void * jarg1, char * jarg2) {
  void * jresult ;
  ArRobot *arg1 = (ArRobot *) 0 ;
  char *arg2 = (char *) 0 ;
  ArDataLogger *result = 0 ;
  
  arg1 = (ArRobot *)jarg1; 
  arg2 = (char *)jarg2; 
  result = (ArDataLogger *)new ArDataLogger(arg1,(char const *)arg2);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_ArDataLogger__SWIG_1(void * jarg1) {
  void * jresult ;
  ArRobot *arg1 = (ArRobot *) 0 ;
  ArDataLogger *result = 0 ;
  
  arg1 = (ArRobot *)jarg1; 
  result = (ArDataLogger *)new ArDataLogger(arg1);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_ArDataLogger(void * jarg1) {
  ArDataLogger *arg1 = (ArDataLogger *) 0 ;
  
  arg1 = (ArDataLogger *)jarg1; 
  delete arg1;
}


SWIGEXPORT void SWIGSTDCALL CSharp_ArDataLogger_addToConfig(void * jarg1, void * jarg2) {
  ArDataLogger *arg1 = (ArDataLogger *) 0 ;
  ArConfig *arg2 = (ArConfig *) 0 ;
  
  arg1 = (ArDataLogger *)jarg1; 
  arg2 = (ArConfig *)jarg2; 
  (arg1)->addToConfig(arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_ArDataLogger_addString(void * jarg1, char * jarg2, unsigned short jarg3, void * jarg4) {
  ArDataLogger *arg1 = (ArDataLogger *) 0 ;
  char *arg2 = (char *) 0 ;
  ArTypes::UByte2 arg3 ;
  ArFunctor2< char *,ArTypes::UByte2 > *arg4 = (ArFunctor2< char *,ArTypes::UByte2 > *) 0 ;
  
  arg1 = (ArDataLogger *)jarg1; 
  arg2 = (char *)jarg2; 
  arg3 = (ArTypes::UByte2)jarg3; 
  arg4 = (ArFunctor2< char *,ArTypes::UByte2 > *)jarg4; 
  (arg1)->addString((char const *)arg2,arg3,arg4);
}


SWIGEXPORT void * SWIGSTDCALL CSharp_ArDataLogger_getAddStringFunctor(void * jarg1) {
  void * jresult ;
  ArDataLogger *arg1 = (ArDataLogger *) 0 ;
  ArFunctor3< char const *,ArTypes::UByte2,ArFunctor2< char *,ArTypes::UByte2 > * > *result = 0 ;
  
  arg1 = (ArDataLogger *)jarg1; 
  result = (ArFunctor3< char const *,ArTypes::UByte2,ArFunctor2< char *,ArTypes::UByte2 > * > *)(arg1)->getAddStringFunctor();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_ArDataLogger_startLogging__SWIG_0(void * jarg1, int jarg2) {
  ArDataLogger *arg1 = (ArDataLogger *) 0 ;
  int arg2 ;
  
  arg1 = (ArDataLogger *)jarg1; 
  arg2 = (int)jarg2; 
  (arg1)->startLogging(arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_ArDataLogger_startLogging__SWIG_1(void * jarg1) {
  ArDataLogger *arg1 = (ArDataLogger *) 0 ;
  
  arg1 = (ArDataLogger *)jarg1; 
  (arg1)->startLogging();
}


SWIGEXPORT void SWIGSTDCALL CSharp_ArDataLogger_stopLogging(void * jarg1) {
  ArDataLogger *arg1 = (ArDataLogger *) 0 ;
  
  arg1 = (ArDataLogger *)jarg1; 
  (arg1)->stopLogging();
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_ArDataLogger_getLogging(void * jarg1) {
  unsigned int jresult ;
  ArDataLogger *arg1 = (ArDataLogger *) 0 ;
  bool result;
  
  arg1 = (ArDataLogger *)jarg1; 
  result = (bool)(arg1)->getLogging();
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_ArDataLogger_getLogInterval(void * jarg1) {
  int jresult ;
  ArDataLogger *arg1 = (ArDataLogger *) 0 ;
  int result;
  
  arg1 = (ArDataLogger *)jarg1; 
  result = (int)(arg1)->getLogInterval();
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_ArDataLogger_writeComment__SWIG_0(void * jarg1, char * jarg2) {
  ArDataLogger *arg1 = (ArDataLogger *) 0 ;
  char *arg2 = (char *) 0 ;
  
  arg1 = (ArDataLogger *)jarg1; 
  arg2 = (char *)jarg2; 
  (arg1)->writeComment((char const *)arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_ArDataLogger_writeComment__SWIG_1(void * jarg1, void * jarg2) {
  ArDataLogger *arg1 = (ArDataLogger *) 0 ;
  ArArgumentBuilder *arg2 = (ArArgumentBuilder *) 0 ;
  
  arg1 = (ArDataLogger *)jarg1; 
  arg2 = (ArArgumentBuilder *)jarg2; 
  (arg1)->writeComment(arg2);
}


SWIGEXPORT void * SWIGSTDCALL CSharp_ArDataLogger_getWriteCommentFunctor(void * jarg1) {
  void * jresult ;
  ArDataLogger *arg1 = (ArDataLogger *) 0 ;
  ArFunctor1< ArArgumentBuilder * > *result = 0 ;
  
  arg1 = (ArDataLogger *)jarg1; 
  result = (ArFunctor1< ArArgumentBuilder * > *)(arg1)->getWriteCommentFunctor();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_ArDataLogger_clearLog(void * jarg1) {
  ArDataLogger *arg1 = (ArDataLogger *) 0 ;
  
  arg1 = (ArDataLogger *)jarg1; 
  (arg1)->clearLog();
}


SWIGEXPORT void * SWIGSTDCALL CSharp_ArDataLogger_getClearLogFunctor(void * jarg1) {
  void * jresult ;
  ArDataLogger *arg1 = (ArDataLogger *) 0 ;
  ArFunctor *result = 0 ;
  
  arg1 = (ArDataLogger *)jarg1; 
  result = (ArFunctor *)(arg1)->getClearLogFunctor();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_ArDataLogger_getStartLogFunctor(void * jarg1) {
  void * jresult ;
  ArDataLogger *arg1 = (ArDataLogger *) 0 ;
  ArFunctor *result = 0 ;
  
  arg1 = (ArDataLogger *)jarg1; 
  result = (ArFunctor *)(arg1)->getStartLogFunctor();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_ArDataLogger_getStopLogFunctor(void * jarg1) {
  void * jresult ;
  ArDataLogger *arg1 = (ArDataLogger *) 0 ;
  ArFunctor *result = 0 ;
  
  arg1 = (ArDataLogger *)jarg1; 
  result = (ArFunctor *)(arg1)->getStopLogFunctor();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT char * SWIGSTDCALL CSharp_ArDataLogger_getStatus__SWIG_0(void * jarg1) {
  char * jresult ;
  ArDataLogger *arg1 = (ArDataLogger *) 0 ;
  std::string result;
  
  arg1 = (ArDataLogger *)jarg1; 
  result = (arg1)->getStatus();
  jresult = SWIG_csharp_string_callback((&result)->c_str()); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_ArDataLogger_getStatus__SWIG_1(void * jarg1, char * jarg2, unsigned short jarg3) {
  ArDataLogger *arg1 = (ArDataLogger *) 0 ;
  char *arg2 = (char *) 0 ;
  ArTypes::UByte2 arg3 ;
  
  arg1 = (ArDataLogger *)jarg1; 
  arg2 = (char *)jarg2; 
  arg3 = (ArTypes::UByte2)jarg3; 
  (arg1)->getStatus(arg2,arg3);
}


SWIGEXPORT void SWIGSTDCALL CSharp_ArDataLogger_saveCopyAs(void * jarg1, char * jarg2) {
  ArDataLogger *arg1 = (ArDataLogger *) 0 ;
  char *arg2 = (char *) 0 ;
  
  arg1 = (ArDataLogger *)jarg1; 
  arg2 = (char *)jarg2; 
  (arg1)->saveCopyAs((char const *)arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_ArDataLogger_saveCopy(void * jarg1) {
  ArDataLogger *arg1 = (ArDataLogger *) 0 ;
  
  arg1 = (ArDataLogger *)jarg1; 
  (arg1)->saveCopy();
}


SWIGEXPORT void SWIGSTDCALL CSharp_ArDataLogger_saveCopyArgs(void * jarg1, void * jarg2) {
  ArDataLogger *arg1 = (ArDataLogger *) 0 ;
  ArArgumentBuilder *arg2 = (ArArgumentBuilder *) 0 ;
  
  arg1 = (ArDataLogger *)jarg1; 
  arg2 = (ArArgumentBuilder *)jarg2; 
  (arg1)->saveCopyArgs(arg2);
}


SWIGEXPORT void * SWIGSTDCALL CSharp_ArDataLogger_getSaveCopyWithArgsFunctor(void * jarg1) {
  void * jresult ;
  ArDataLogger *arg1 = (ArDataLogger *) 0 ;
  ArFunctor1< ArArgumentBuilder * > *result = 0 ;
  
  arg1 = (ArDataLogger *)jarg1; 
  result = (ArFunctor1< ArArgumentBuilder * > *)(arg1)->getSaveCopyWithArgsFunctor();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_ArDataLogger_getSaveCopyFunctor(void * jarg1) {
  void * jresult ;
  ArDataLogger *arg1 = (ArDataLogger *) 0 ;
  ArFunctor *result = 0 ;
  
  arg1 = (ArDataLogger *)jarg1; 
  result = (ArFunctor *)(arg1)->getSaveCopyFunctor();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT char * SWIGSTDCALL CSharp_ArDataLogger_getOpenLogFileName(void * jarg1) {
  char * jresult ;
  ArDataLogger *arg1 = (ArDataLogger *) 0 ;
  char *result = 0 ;
  
  arg1 = (ArDataLogger *)jarg1; 
  result = (char *)(arg1)->getOpenLogFileName();
  jresult = SWIG_csharp_string_callback((const char *)result); 
  return jresult;
}


SWIGEXPORT char * SWIGSTDCALL CSharp_ArDataLogger_getLogFileName(void * jarg1) {
  char * jresult ;
  ArDataLogger *arg1 = (ArDataLogger *) 0 ;
  char *result = 0 ;
  
  arg1 = (ArDataLogger *)jarg1; 
  result = (char *)(arg1)->getLogFileName();
  jresult = SWIG_csharp_string_callback((const char *)result); 
  return jresult;
}


SWIGEXPORT unsigned long SWIGSTDCALL CSharp_ArDataLogger_getAvailableDiskSpaceMB(void * jarg1) {
  unsigned long jresult ;
  ArDataLogger *arg1 = (ArDataLogger *) 0 ;
  unsigned long result;
  
  arg1 = (ArDataLogger *)jarg1; 
  result = (unsigned long)(arg1)->getAvailableDiskSpaceMB();
  jresult = (unsigned long)result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_ArDPPTUCommands_DELIM_get() {
  int jresult ;
  int result;
  
  result = (int)ArDPPTUCommands::DELIM;
  jresult = (int)result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_ArDPPTUCommands_INIT_get() {
  int jresult ;
  int result;
  
  result = (int)ArDPPTUCommands::INIT;
  jresult = (int)result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_ArDPPTUCommands_ACCEL_get() {
  int jresult ;
  int result;
  
  result = (int)ArDPPTUCommands::ACCEL;
  jresult = (int)result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_ArDPPTUCommands_BASE_get() {
  int jresult ;
  int result;
  
  result = (int)ArDPPTUCommands::BASE;
  jresult = (int)result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_ArDPPTUCommands_CONTROL_get() {
  int jresult ;
  int result;
  
  result = (int)ArDPPTUCommands::CONTROL;
  jresult = (int)result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_ArDPPTUCommands_DISABLE_get() {
  int jresult ;
  int result;
  
  result = (int)ArDPPTUCommands::DISABLE;
  jresult = (int)result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_ArDPPTUCommands_ENABLE_get() {
  int jresult ;
  int result;
  
  result = (int)ArDPPTUCommands::ENABLE;
  jresult = (int)result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_ArDPPTUCommands_FACTORY_get() {
  int jresult ;
  int result;
  
  result = (int)ArDPPTUCommands::FACTORY;
  jresult = (int)result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_ArDPPTUCommands_HALT_get() {
  int jresult ;
  int result;
  
  result = (int)ArDPPTUCommands::HALT;
  jresult = (int)result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_ArDPPTUCommands_IMMED_get() {
  int jresult ;
  int result;
  
  result = (int)ArDPPTUCommands::IMMED;
  jresult = (int)result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_ArDPPTUCommands_LIMIT_get() {
  int jresult ;
  int result;
  
  result = (int)ArDPPTUCommands::LIMIT;
  jresult = (int)result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_ArDPPTUCommands_MONITOR_get() {
  int jresult ;
  int result;
  
  result = (int)ArDPPTUCommands::MONITOR;
  jresult = (int)result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_ArDPPTUCommands_OFFSET_get() {
  int jresult ;
  int result;
  
  result = (int)ArDPPTUCommands::OFFSET;
  jresult = (int)result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_ArDPPTUCommands_PAN_get() {
  int jresult ;
  int result;
  
  result = (int)ArDPPTUCommands::PAN;
  jresult = (int)result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_ArDPPTUCommands_RESET_get() {
  int jresult ;
  int result;
  
  result = (int)ArDPPTUCommands::RESET;
  jresult = (int)result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_ArDPPTUCommands_SPEED_get() {
  int jresult ;
  int result;
  
  result = (int)ArDPPTUCommands::SPEED;
  jresult = (int)result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_ArDPPTUCommands_TILT_get() {
  int jresult ;
  int result;
  
  result = (int)ArDPPTUCommands::TILT;
  jresult = (int)result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_ArDPPTUCommands_UPPER_get() {
  int jresult ;
  int result;
  
  result = (int)ArDPPTUCommands::UPPER;
  jresult = (int)result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_ArDPPTUCommands_VELOCITY_get() {
  int jresult ;
  int result;
  
  result = (int)ArDPPTUCommands::VELOCITY;
  jresult = (int)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_ArDPPTUCommands() {
  void * jresult ;
  ArDPPTUCommands *result = 0 ;
  
  result = (ArDPPTUCommands *)new ArDPPTUCommands();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_ArDPPTUCommands(void * jarg1) {
  ArDPPTUCommands *arg1 = (ArDPPTUCommands *) 0 ;
  
  arg1 = (ArDPPTUCommands *)jarg1; 
  delete arg1;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_ArDPPTUPacket__SWIG_0(unsigned short jarg1) {
  void * jresult ;
  ArTypes::UByte2 arg1 ;
  ArDPPTUPacket *result = 0 ;
  
  arg1 = (ArTypes::UByte2)jarg1; 
  result = (ArDPPTUPacket *)new ArDPPTUPacket(arg1);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_ArDPPTUPacket__SWIG_1() {
  void * jresult ;
  ArDPPTUPacket *result = 0 ;
  
  result = (ArDPPTUPacket *)new ArDPPTUPacket();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_ArDPPTUPacket(void * jarg1) {
  ArDPPTUPacket *arg1 = (ArDPPTUPacket *) 0 ;
  
  arg1 = (ArDPPTUPacket *)jarg1; 
  delete arg1;
}


SWIGEXPORT void SWIGSTDCALL CSharp_ArDPPTUPacket_byte2ToBuf(void * jarg1, int jarg2) {
  ArDPPTUPacket *arg1 = (ArDPPTUPacket *) 0 ;
  int arg2 ;
  
  arg1 = (ArDPPTUPacket *)jarg1; 
  arg2 = (int)jarg2; 
  (arg1)->byte2ToBuf(arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_ArDPPTUPacket_finalizePacket(void * jarg1) {
  ArDPPTUPacket *arg1 = (ArDPPTUPacket *) 0 ;
  
  arg1 = (ArDPPTUPacket *)jarg1; 
  (arg1)->finalizePacket();
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_ArDPPTU__SWIG_0(void * jarg1, int jarg2, int jarg3) {
  void * jresult ;
  ArRobot *arg1 = (ArRobot *) 0 ;
  ArDPPTU::DeviceType arg2 ;
  int arg3 ;
  ArDPPTU *result = 0 ;
  
  arg1 = (ArRobot *)jarg1; 
  arg2 = (ArDPPTU::DeviceType)jarg2; 
  arg3 = (int)jarg3; 
  result = (ArDPPTU *)new ArDPPTU(arg1,arg2,arg3);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_ArDPPTU__SWIG_1(void * jarg1, int jarg2) {
  void * jresult ;
  ArRobot *arg1 = (ArRobot *) 0 ;
  ArDPPTU::DeviceType arg2 ;
  ArDPPTU *result = 0 ;
  
  arg1 = (ArRobot *)jarg1; 
  arg2 = (ArDPPTU::DeviceType)jarg2; 
  result = (ArDPPTU *)new ArDPPTU(arg1,arg2);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_ArDPPTU__SWIG_2(void * jarg1) {
  void * jresult ;
  ArRobot *arg1 = (ArRobot *) 0 ;
  ArDPPTU *result = 0 ;
  
  arg1 = (ArRobot *)jarg1; 
  result = (ArDPPTU *)new ArDPPTU(arg1);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_ArDPPTU(void * jarg1) {
  ArDPPTU *arg1 = (ArDPPTU *) 0 ;
  
  arg1 = (ArDPPTU *)jarg1; 
  delete arg1;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_ArDPPTU_init(void * jarg1) {
  unsigned int jresult ;
  ArDPPTU *arg1 = (ArDPPTU *) 0 ;
  bool result;
  
  arg1 = (ArDPPTU *)jarg1; 
  result = (bool)(arg1)->init();
  jresult = result; 
  return jresult;
}


SWIGEXPORT char * SWIGSTDCALL CSharp_ArDPPTU_getTypeName(void * jarg1) {
  char * jresult ;
  ArDPPTU *arg1 = (ArDPPTU *) 0 ;
  char *result = 0 ;
  
  arg1 = (ArDPPTU *)jarg1; 
  result = (char *)(arg1)->getTypeName();
  jresult = SWIG_csharp_string_callback((const char *)result); 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_ArDPPTU_canZoom(void * jarg1) {
  unsigned int jresult ;
  ArDPPTU *arg1 = (ArDPPTU *) 0 ;
  bool result;
  
  arg1 = (ArDPPTU *)jarg1; 
  result = (bool)((ArDPPTU const *)arg1)->canZoom();
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_ArDPPTU_canGetRealPanTilt(void * jarg1) {
  unsigned int jresult ;
  ArDPPTU *arg1 = (ArDPPTU *) 0 ;
  bool result;
  
  arg1 = (ArDPPTU *)jarg1; 
  result = (bool)((ArDPPTU const *)arg1)->canGetRealPanTilt();
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_ArDPPTU_blank(void * jarg1) {
  unsigned int jresult ;
  ArDPPTU *arg1 = (ArDPPTU *) 0 ;
  bool result;
  
  arg1 = (ArDPPTU *)jarg1; 
  result = (bool)(arg1)->blank();
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_ArDPPTU_resetCalib(void * jarg1) {
  unsigned int jresult ;
  ArDPPTU *arg1 = (ArDPPTU *) 0 ;
  bool result;
  
  arg1 = (ArDPPTU *)jarg1; 
  result = (bool)(arg1)->resetCalib();
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_ArDPPTU_disableReset(void * jarg1) {
  unsigned int jresult ;
  ArDPPTU *arg1 = (ArDPPTU *) 0 ;
  bool result;
  
  arg1 = (ArDPPTU *)jarg1; 
  result = (bool)(arg1)->disableReset();
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_ArDPPTU_resetTilt(void * jarg1) {
  unsigned int jresult ;
  ArDPPTU *arg1 = (ArDPPTU *) 0 ;
  bool result;
  
  arg1 = (ArDPPTU *)jarg1; 
  result = (bool)(arg1)->resetTilt();
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_ArDPPTU_resetPan(void * jarg1) {
  unsigned int jresult ;
  ArDPPTU *arg1 = (ArDPPTU *) 0 ;
  bool result;
  
  arg1 = (ArDPPTU *)jarg1; 
  result = (bool)(arg1)->resetPan();
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_ArDPPTU_resetAll(void * jarg1) {
  unsigned int jresult ;
  ArDPPTU *arg1 = (ArDPPTU *) 0 ;
  bool result;
  
  arg1 = (ArDPPTU *)jarg1; 
  result = (bool)(arg1)->resetAll();
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_ArDPPTU_enMon(void * jarg1) {
  unsigned int jresult ;
  ArDPPTU *arg1 = (ArDPPTU *) 0 ;
  bool result;
  
  arg1 = (ArDPPTU *)jarg1; 
  result = (bool)(arg1)->enMon();
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_ArDPPTU_disMon(void * jarg1) {
  unsigned int jresult ;
  ArDPPTU *arg1 = (ArDPPTU *) 0 ;
  bool result;
  
  arg1 = (ArDPPTU *)jarg1; 
  result = (bool)(arg1)->disMon();
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_ArDPPTU_saveSet(void * jarg1) {
  unsigned int jresult ;
  ArDPPTU *arg1 = (ArDPPTU *) 0 ;
  bool result;
  
  arg1 = (ArDPPTU *)jarg1; 
  result = (bool)(arg1)->saveSet();
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_ArDPPTU_restoreSet(void * jarg1) {
  unsigned int jresult ;
  ArDPPTU *arg1 = (ArDPPTU *) 0 ;
  bool result;
  
  arg1 = (ArDPPTU *)jarg1; 
  result = (bool)(arg1)->restoreSet();
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_ArDPPTU_factorySet(void * jarg1) {
  unsigned int jresult ;
  ArDPPTU *arg1 = (ArDPPTU *) 0 ;
  bool result;
  
  arg1 = (ArDPPTU *)jarg1; 
  result = (bool)(arg1)->factorySet();
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_ArDPPTU_awaitExec(void * jarg1) {
  unsigned int jresult ;
  ArDPPTU *arg1 = (ArDPPTU *) 0 ;
  bool result;
  
  arg1 = (ArDPPTU *)jarg1; 
  result = (bool)(arg1)->awaitExec();
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_ArDPPTU_haltAll(void * jarg1) {
  unsigned int jresult ;
  ArDPPTU *arg1 = (ArDPPTU *) 0 ;
  bool result;
  
  arg1 = (ArDPPTU *)jarg1; 
  result = (bool)(arg1)->haltAll();
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_ArDPPTU_haltPan(void * jarg1) {
  unsigned int jresult ;
  ArDPPTU *arg1 = (ArDPPTU *) 0 ;
  bool result;
  
  arg1 = (ArDPPTU *)jarg1; 
  result = (bool)(arg1)->haltPan();
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_ArDPPTU_haltTilt(void * jarg1) {
  unsigned int jresult ;
  ArDPPTU *arg1 = (ArDPPTU *) 0 ;
  bool result;
  
  arg1 = (ArDPPTU *)jarg1; 
  result = (bool)(arg1)->haltTilt();
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_ArDPPTU_initMon(void * jarg1, double jarg2, double jarg3, double jarg4, double jarg5) {
  unsigned int jresult ;
  ArDPPTU *arg1 = (ArDPPTU *) 0 ;
  double arg2 ;
  double arg3 ;
  double arg4 ;
  double arg5 ;
  bool result;
  
  arg1 = (ArDPPTU *)jarg1; 
  arg2 = (double)jarg2; 
  arg3 = (double)jarg3; 
  arg4 = (double)jarg4; 
  arg5 = (double)jarg5; 
  result = (bool)(arg1)->initMon(arg2,arg3,arg4,arg5);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_ArDPPTU_limitEnforce(void * jarg1, unsigned int jarg2) {
  unsigned int jresult ;
  ArDPPTU *arg1 = (ArDPPTU *) 0 ;
  bool arg2 ;
  bool result;
  
  arg1 = (ArDPPTU *)jarg1; 
  arg2 = jarg2 ? true : false; 
  result = (bool)(arg1)->limitEnforce(arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_ArDPPTU_immedExec(void * jarg1) {
  unsigned int jresult ;
  ArDPPTU *arg1 = (ArDPPTU *) 0 ;
  bool result;
  
  arg1 = (ArDPPTU *)jarg1; 
  result = (bool)(arg1)->immedExec();
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_ArDPPTU_slaveExec(void * jarg1) {
  unsigned int jresult ;
  ArDPPTU *arg1 = (ArDPPTU *) 0 ;
  bool result;
  
  arg1 = (ArDPPTU *)jarg1; 
  result = (bool)(arg1)->slaveExec();
  jresult = result; 
  return jresult;
}


SWIGEXPORT double SWIGSTDCALL CSharp_ArDPPTU_getMaxPanSlew(void * jarg1) {
  double jresult ;
  ArDPPTU *arg1 = (ArDPPTU *) 0 ;
  double result;
  
  arg1 = (ArDPPTU *)jarg1; 
  result = (double)(arg1)->getMaxPanSlew();
  jresult = result; 
  return jresult;
}


SWIGEXPORT double SWIGSTDCALL CSharp_ArDPPTU_getMaxPanSpeed(void * jarg1) {
  double jresult ;
  ArDPPTU *arg1 = (ArDPPTU *) 0 ;
  double result;
  
  arg1 = (ArDPPTU *)jarg1; 
  result = (double)(arg1)->getMaxPanSpeed();
  jresult = result; 
  return jresult;
}


SWIGEXPORT double SWIGSTDCALL CSharp_ArDPPTU_getMinPanSlew(void * jarg1) {
  double jresult ;
  ArDPPTU *arg1 = (ArDPPTU *) 0 ;
  double result;
  
  arg1 = (ArDPPTU *)jarg1; 
  result = (double)(arg1)->getMinPanSlew();
  jresult = result; 
  return jresult;
}


SWIGEXPORT double SWIGSTDCALL CSharp_ArDPPTU_getMaxTiltSlew(void * jarg1) {
  double jresult ;
  ArDPPTU *arg1 = (ArDPPTU *) 0 ;
  double result;
  
  arg1 = (ArDPPTU *)jarg1; 
  result = (double)(arg1)->getMaxTiltSlew();
  jresult = result; 
  return jresult;
}


SWIGEXPORT double SWIGSTDCALL CSharp_ArDPPTU_getMaxTiltSpeed(void * jarg1) {
  double jresult ;
  ArDPPTU *arg1 = (ArDPPTU *) 0 ;
  double result;
  
  arg1 = (ArDPPTU *)jarg1; 
  result = (double)(arg1)->getMaxTiltSpeed();
  jresult = result; 
  return jresult;
}


SWIGEXPORT double SWIGSTDCALL CSharp_ArDPPTU_getMinTiltSlew(void * jarg1) {
  double jresult ;
  ArDPPTU *arg1 = (ArDPPTU *) 0 ;
  double result;
  
  arg1 = (ArDPPTU *)jarg1; 
  result = (double)(arg1)->getMinTiltSlew();
  jresult = result; 
  return jresult;
}


SWIGEXPORT double SWIGSTDCALL CSharp_ArDPPTU_getMaxPanAccel(void * jarg1) {
  double jresult ;
  ArDPPTU *arg1 = (ArDPPTU *) 0 ;
  double result;
  
  arg1 = (ArDPPTU *)jarg1; 
  result = (double)(arg1)->getMaxPanAccel();
  jresult = result; 
  return jresult;
}


SWIGEXPORT double SWIGSTDCALL CSharp_ArDPPTU_getMinPanAccel(void * jarg1) {
  double jresult ;
  ArDPPTU *arg1 = (ArDPPTU *) 0 ;
  double result;
  
  arg1 = (ArDPPTU *)jarg1; 
  result = (double)(arg1)->getMinPanAccel();
  jresult = result; 
  return jresult;
}


SWIGEXPORT double SWIGSTDCALL CSharp_ArDPPTU_getMaxTiltAccel(void * jarg1) {
  double jresult ;
  ArDPPTU *arg1 = (ArDPPTU *) 0 ;
  double result;
  
  arg1 = (ArDPPTU *)jarg1; 
  result = (double)(arg1)->getMaxTiltAccel();
  jresult = result; 
  return jresult;
}


SWIGEXPORT double SWIGSTDCALL CSharp_ArDPPTU_getMinTiltAccel(void * jarg1) {
  double jresult ;
  ArDPPTU *arg1 = (ArDPPTU *) 0 ;
  double result;
  
  arg1 = (ArDPPTU *)jarg1; 
  result = (double)(arg1)->getMinTiltAccel();
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_ArDPPTU_setMovePower(void * jarg1, int jarg2, int jarg3) {
  unsigned int jresult ;
  ArDPPTU *arg1 = (ArDPPTU *) 0 ;
  ArDPPTU::Axis arg2 ;
  ArDPPTU::PowerMode arg3 ;
  bool result;
  
  arg1 = (ArDPPTU *)jarg1; 
  arg2 = (ArDPPTU::Axis)jarg2; 
  arg3 = (ArDPPTU::PowerMode)jarg3; 
  result = (bool)(arg1)->setMovePower(arg2,arg3);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_ArDPPTU_setHoldPower(void * jarg1, int jarg2, int jarg3) {
  unsigned int jresult ;
  ArDPPTU *arg1 = (ArDPPTU *) 0 ;
  ArDPPTU::Axis arg2 ;
  ArDPPTU::PowerMode arg3 ;
  bool result;
  
  arg1 = (ArDPPTU *)jarg1; 
  arg2 = (ArDPPTU::Axis)jarg2; 
  arg3 = (ArDPPTU::PowerMode)jarg3; 
  result = (bool)(arg1)->setHoldPower(arg2,arg3);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_ArDPPTU_offStatPower(void * jarg1) {
  unsigned int jresult ;
  ArDPPTU *arg1 = (ArDPPTU *) 0 ;
  bool result;
  
  arg1 = (ArDPPTU *)jarg1; 
  result = (bool)(arg1)->offStatPower();
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_ArDPPTU_regStatPower(void * jarg1) {
  unsigned int jresult ;
  ArDPPTU *arg1 = (ArDPPTU *) 0 ;
  bool result;
  
  arg1 = (ArDPPTU *)jarg1; 
  result = (bool)(arg1)->regStatPower();
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_ArDPPTU_lowStatPower(void * jarg1) {
  unsigned int jresult ;
  ArDPPTU *arg1 = (ArDPPTU *) 0 ;
  bool result;
  
  arg1 = (ArDPPTU *)jarg1; 
  result = (bool)(arg1)->lowStatPower();
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_ArDPPTU_highMotPower(void * jarg1) {
  unsigned int jresult ;
  ArDPPTU *arg1 = (ArDPPTU *) 0 ;
  bool result;
  
  arg1 = (ArDPPTU *)jarg1; 
  result = (bool)(arg1)->highMotPower();
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_ArDPPTU_regMotPower(void * jarg1) {
  unsigned int jresult ;
  ArDPPTU *arg1 = (ArDPPTU *) 0 ;
  bool result;
  
  arg1 = (ArDPPTU *)jarg1; 
  result = (bool)(arg1)->regMotPower();
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_ArDPPTU_lowMotPower(void * jarg1) {
  unsigned int jresult ;
  ArDPPTU *arg1 = (ArDPPTU *) 0 ;
  bool result;
  
  arg1 = (ArDPPTU *)jarg1; 
  result = (bool)(arg1)->lowMotPower();
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_ArDPPTU_panAccel(void * jarg1, double jarg2) {
  unsigned int jresult ;
  ArDPPTU *arg1 = (ArDPPTU *) 0 ;
  double arg2 ;
  bool result;
  
  arg1 = (ArDPPTU *)jarg1; 
  arg2 = (double)jarg2; 
  result = (bool)(arg1)->panAccel(arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_ArDPPTU_tiltAccel(void * jarg1, double jarg2) {
  unsigned int jresult ;
  ArDPPTU *arg1 = (ArDPPTU *) 0 ;
  double arg2 ;
  bool result;
  
  arg1 = (ArDPPTU *)jarg1; 
  arg2 = (double)jarg2; 
  result = (bool)(arg1)->tiltAccel(arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_ArDPPTU_basePanSlew(void * jarg1, double jarg2) {
  unsigned int jresult ;
  ArDPPTU *arg1 = (ArDPPTU *) 0 ;
  double arg2 ;
  bool result;
  
  arg1 = (ArDPPTU *)jarg1; 
  arg2 = (double)jarg2; 
  result = (bool)(arg1)->basePanSlew(arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_ArDPPTU_baseTiltSlew(void * jarg1, double jarg2) {
  unsigned int jresult ;
  ArDPPTU *arg1 = (ArDPPTU *) 0 ;
  double arg2 ;
  bool result;
  
  arg1 = (ArDPPTU *)jarg1; 
  arg2 = (double)jarg2; 
  result = (bool)(arg1)->baseTiltSlew(arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_ArDPPTU_upperPanSlew(void * jarg1, double jarg2) {
  unsigned int jresult ;
  ArDPPTU *arg1 = (ArDPPTU *) 0 ;
  double arg2 ;
  bool result;
  
  arg1 = (ArDPPTU *)jarg1; 
  arg2 = (double)jarg2; 
  result = (bool)(arg1)->upperPanSlew(arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_ArDPPTU_lowerPanSlew(void * jarg1, double jarg2) {
  unsigned int jresult ;
  ArDPPTU *arg1 = (ArDPPTU *) 0 ;
  double arg2 ;
  bool result;
  
  arg1 = (ArDPPTU *)jarg1; 
  arg2 = (double)jarg2; 
  result = (bool)(arg1)->lowerPanSlew(arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_ArDPPTU_upperTiltSlew(void * jarg1, double jarg2) {
  unsigned int jresult ;
  ArDPPTU *arg1 = (ArDPPTU *) 0 ;
  double arg2 ;
  bool result;
  
  arg1 = (ArDPPTU *)jarg1; 
  arg2 = (double)jarg2; 
  result = (bool)(arg1)->upperTiltSlew(arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_ArDPPTU_lowerTiltSlew(void * jarg1, double jarg2) {
  unsigned int jresult ;
  ArDPPTU *arg1 = (ArDPPTU *) 0 ;
  double arg2 ;
  bool result;
  
  arg1 = (ArDPPTU *)jarg1; 
  arg2 = (double)jarg2; 
  result = (bool)(arg1)->lowerTiltSlew(arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_ArDPPTU_indepMove(void * jarg1) {
  unsigned int jresult ;
  ArDPPTU *arg1 = (ArDPPTU *) 0 ;
  bool result;
  
  arg1 = (ArDPPTU *)jarg1; 
  result = (bool)(arg1)->indepMove();
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_ArDPPTU_velMove(void * jarg1) {
  unsigned int jresult ;
  ArDPPTU *arg1 = (ArDPPTU *) 0 ;
  bool result;
  
  arg1 = (ArDPPTU *)jarg1; 
  result = (bool)(arg1)->velMove();
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_ArDPPTU_panSlew(void * jarg1, double jarg2) {
  unsigned int jresult ;
  ArDPPTU *arg1 = (ArDPPTU *) 0 ;
  double arg2 ;
  bool result;
  
  arg1 = (ArDPPTU *)jarg1; 
  arg2 = (double)jarg2; 
  result = (bool)(arg1)->panSlew(arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_ArDPPTU_tiltSlew(void * jarg1, double jarg2) {
  unsigned int jresult ;
  ArDPPTU *arg1 = (ArDPPTU *) 0 ;
  double arg2 ;
  bool result;
  
  arg1 = (ArDPPTU *)jarg1; 
  arg2 = (double)jarg2; 
  result = (bool)(arg1)->tiltSlew(arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_ArDPPTU_canPanTiltSlew(void * jarg1) {
  unsigned int jresult ;
  ArDPPTU *arg1 = (ArDPPTU *) 0 ;
  bool result;
  
  arg1 = (ArDPPTU *)jarg1; 
  result = (bool)(arg1)->canPanTiltSlew();
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_ArDPPTU_panSlewRel(void * jarg1, double jarg2) {
  unsigned int jresult ;
  ArDPPTU *arg1 = (ArDPPTU *) 0 ;
  double arg2 ;
  bool result;
  
  arg1 = (ArDPPTU *)jarg1; 
  arg2 = (double)jarg2; 
  result = (bool)(arg1)->panSlewRel(arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_ArDPPTU_tiltSlewRel(void * jarg1, double jarg2) {
  unsigned int jresult ;
  ArDPPTU *arg1 = (ArDPPTU *) 0 ;
  double arg2 ;
  bool result;
  
  arg1 = (ArDPPTU *)jarg1; 
  arg2 = (double)jarg2; 
  result = (bool)(arg1)->tiltSlewRel(arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT double SWIGSTDCALL CSharp_ArDPPTU_getLastPanRequest(void * jarg1) {
  double jresult ;
  ArDPPTU *arg1 = (ArDPPTU *) 0 ;
  double result;
  
  arg1 = (ArDPPTU *)jarg1; 
  result = (double)((ArDPPTU const *)arg1)->getLastPanRequest();
  jresult = result; 
  return jresult;
}


SWIGEXPORT double SWIGSTDCALL CSharp_ArDPPTU_getLastTiltRequest(void * jarg1) {
  double jresult ;
  ArDPPTU *arg1 = (ArDPPTU *) 0 ;
  double result;
  
  arg1 = (ArDPPTU *)jarg1; 
  result = (double)((ArDPPTU const *)arg1)->getLastTiltRequest();
  jresult = result; 
  return jresult;
}


SWIGEXPORT double SWIGSTDCALL CSharp_ArDPPTU_getPanSlew(void * jarg1) {
  double jresult ;
  ArDPPTU *arg1 = (ArDPPTU *) 0 ;
  double result;
  
  arg1 = (ArDPPTU *)jarg1; 
  result = (double)(arg1)->getPanSlew();
  jresult = result; 
  return jresult;
}


SWIGEXPORT double SWIGSTDCALL CSharp_ArDPPTU_getTiltSlew(void * jarg1) {
  double jresult ;
  ArDPPTU *arg1 = (ArDPPTU *) 0 ;
  double result;
  
  arg1 = (ArDPPTU *)jarg1; 
  result = (double)(arg1)->getTiltSlew();
  jresult = result; 
  return jresult;
}


SWIGEXPORT double SWIGSTDCALL CSharp_ArDPPTU_getBasePanSlew(void * jarg1) {
  double jresult ;
  ArDPPTU *arg1 = (ArDPPTU *) 0 ;
  double result;
  
  arg1 = (ArDPPTU *)jarg1; 
  result = (double)(arg1)->getBasePanSlew();
  jresult = result; 
  return jresult;
}


SWIGEXPORT double SWIGSTDCALL CSharp_ArDPPTU_getBaseTiltSlew(void * jarg1) {
  double jresult ;
  ArDPPTU *arg1 = (ArDPPTU *) 0 ;
  double result;
  
  arg1 = (ArDPPTU *)jarg1; 
  result = (double)(arg1)->getBaseTiltSlew();
  jresult = result; 
  return jresult;
}


SWIGEXPORT double SWIGSTDCALL CSharp_ArDPPTU_getPanAccel(void * jarg1) {
  double jresult ;
  ArDPPTU *arg1 = (ArDPPTU *) 0 ;
  double result;
  
  arg1 = (ArDPPTU *)jarg1; 
  result = (double)(arg1)->getPanAccel();
  jresult = result; 
  return jresult;
}


SWIGEXPORT double SWIGSTDCALL CSharp_ArDPPTU_getTiltAccel(void * jarg1) {
  double jresult ;
  ArDPPTU *arg1 = (ArDPPTU *) 0 ;
  double result;
  
  arg1 = (ArDPPTU *)jarg1; 
  result = (double)(arg1)->getTiltAccel();
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_ArDPPTU_query(void * jarg1) {
  ArDPPTU *arg1 = (ArDPPTU *) 0 ;
  
  arg1 = (ArDPPTU *)jarg1; 
  (arg1)->query();
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_ArDeviceConnection(void * jarg1) {
  ArDeviceConnection *arg1 = (ArDeviceConnection *) 0 ;
  
  arg1 = (ArDeviceConnection *)jarg1; 
  delete arg1;
}


SWIGEXPORT int SWIGSTDCALL CSharp_ArDeviceConnection_read__SWIG_0(void * jarg1, char * jarg2, unsigned int jarg3, unsigned int jarg4) {
  int jresult ;
  ArDeviceConnection *arg1 = (ArDeviceConnection *) 0 ;
  char *arg2 = (char *) 0 ;
  unsigned int arg3 ;
  unsigned int arg4 ;
  int result;
  
  arg1 = (ArDeviceConnection *)jarg1; 
  arg2 = (char *)jarg2; 
  arg3 = (unsigned int)jarg3; 
  arg4 = (unsigned int)jarg4; 
  result = (int)(arg1)->read((char const *)arg2,arg3,arg4);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_ArDeviceConnection_read__SWIG_1(void * jarg1, char * jarg2, unsigned int jarg3) {
  int jresult ;
  ArDeviceConnection *arg1 = (ArDeviceConnection *) 0 ;
  char *arg2 = (char *) 0 ;
  unsigned int arg3 ;
  int result;
  
  arg1 = (ArDeviceConnection *)jarg1; 
  arg2 = (char *)jarg2; 
  arg3 = (unsigned int)jarg3; 
  result = (int)(arg1)->read((char const *)arg2,arg3);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_ArDeviceConnection_writePacket(void * jarg1, void * jarg2) {
  int jresult ;
  ArDeviceConnection *arg1 = (ArDeviceConnection *) 0 ;
  ArBasePacket *arg2 = (ArBasePacket *) 0 ;
  int result;
  
  arg1 = (ArDeviceConnection *)jarg1; 
  arg2 = (ArBasePacket *)jarg2; 
  result = (int)(arg1)->writePacket(arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_ArDeviceConnection_write(void * jarg1, char * jarg2, unsigned int jarg3) {
  int jresult ;
  ArDeviceConnection *arg1 = (ArDeviceConnection *) 0 ;
  char *arg2 = (char *) 0 ;
  unsigned int arg3 ;
  int result;
  
  arg1 = (ArDeviceConnection *)jarg1; 
  arg2 = (char *)jarg2; 
  arg3 = (unsigned int)jarg3; 
  result = (int)(arg1)->write((char const *)arg2,arg3);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_ArDeviceConnection_getStatus(void * jarg1) {
  int jresult ;
  ArDeviceConnection *arg1 = (ArDeviceConnection *) 0 ;
  int result;
  
  arg1 = (ArDeviceConnection *)jarg1; 
  result = (int)(arg1)->getStatus();
  jresult = result; 
  return jresult;
}


SWIGEXPORT char * SWIGSTDCALL CSharp_ArDeviceConnection_getStatusMessage(void * jarg1, int jarg2) {
  char * jresult ;
  ArDeviceConnection *arg1 = (ArDeviceConnection *) 0 ;
  int arg2 ;
  char *result = 0 ;
  
  arg1 = (ArDeviceConnection *)jarg1; 
  arg2 = (int)jarg2; 
  result = (char *)((ArDeviceConnection const *)arg1)->getStatusMessage(arg2);
  jresult = SWIG_csharp_string_callback((const char *)result); 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_ArDeviceConnection_openSimple(void * jarg1) {
  unsigned int jresult ;
  ArDeviceConnection *arg1 = (ArDeviceConnection *) 0 ;
  bool result;
  
  arg1 = (ArDeviceConnection *)jarg1; 
  result = (bool)(arg1)->openSimple();
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_ArDeviceConnection_close(void * jarg1) {
  unsigned int jresult ;
  ArDeviceConnection *arg1 = (ArDeviceConnection *) 0 ;
  bool result;
  
  arg1 = (ArDeviceConnection *)jarg1; 
  result = (bool)(arg1)->close();
  jresult = result; 
  return jresult;
}


SWIGEXPORT char * SWIGSTDCALL CSharp_ArDeviceConnection_getOpenMessage(void * jarg1, int jarg2) {
  char * jresult ;
  ArDeviceConnection *arg1 = (ArDeviceConnection *) 0 ;
  int arg2 ;
  char *result = 0 ;
  
  arg1 = (ArDeviceConnection *)jarg1; 
  arg2 = (int)jarg2; 
  result = (char *)(arg1)->getOpenMessage(arg2);
  jresult = SWIG_csharp_string_callback((const char *)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_ArDeviceConnection_getTimeRead(void * jarg1, int jarg2) {
  void * jresult ;
  ArDeviceConnection *arg1 = (ArDeviceConnection *) 0 ;
  int arg2 ;
  ArTime result;
  
  arg1 = (ArDeviceConnection *)jarg1; 
  arg2 = (int)jarg2; 
  result = (arg1)->getTimeRead(arg2);
  jresult = new ArTime((const ArTime &)result); 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_ArDeviceConnection_isTimeStamping(void * jarg1) {
  unsigned int jresult ;
  ArDeviceConnection *arg1 = (ArDeviceConnection *) 0 ;
  bool result;
  
  arg1 = (ArDeviceConnection *)jarg1; 
  result = (bool)(arg1)->isTimeStamping();
  jresult = result; 
  return jresult;
}


SWIGEXPORT char * SWIGSTDCALL CSharp_ArDeviceConnection_getPortName(void * jarg1) {
  char * jresult ;
  ArDeviceConnection *arg1 = (ArDeviceConnection *) 0 ;
  char *result = 0 ;
  
  arg1 = (ArDeviceConnection *)jarg1; 
  result = (char *)((ArDeviceConnection const *)arg1)->getPortName();
  jresult = SWIG_csharp_string_callback((const char *)result); 
  return jresult;
}


SWIGEXPORT char * SWIGSTDCALL CSharp_ArDeviceConnection_getPortType(void * jarg1) {
  char * jresult ;
  ArDeviceConnection *arg1 = (ArDeviceConnection *) 0 ;
  char *result = 0 ;
  
  arg1 = (ArDeviceConnection *)jarg1; 
  result = (char *)((ArDeviceConnection const *)arg1)->getPortType();
  jresult = SWIG_csharp_string_callback((const char *)result); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_ArDeviceConnection_setDeviceName(void * jarg1, char * jarg2) {
  ArDeviceConnection *arg1 = (ArDeviceConnection *) 0 ;
  char *arg2 = (char *) 0 ;
  
  arg1 = (ArDeviceConnection *)jarg1; 
  arg2 = (char *)jarg2; 
  (arg1)->setDeviceName((char const *)arg2);
}


SWIGEXPORT char * SWIGSTDCALL CSharp_ArDeviceConnection_getDeviceName(void * jarg1) {
  char * jresult ;
  ArDeviceConnection *arg1 = (ArDeviceConnection *) 0 ;
  char *result = 0 ;
  
  arg1 = (ArDeviceConnection *)jarg1; 
  result = (char *)((ArDeviceConnection const *)arg1)->getDeviceName();
  jresult = SWIG_csharp_string_callback((const char *)result); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_ArDeviceConnection_debugStartPacket(void * jarg1) {
  ArDeviceConnection *arg1 = (ArDeviceConnection *) 0 ;
  
  arg1 = (ArDeviceConnection *)jarg1; 
  (arg1)->debugStartPacket();
}


SWIGEXPORT void SWIGSTDCALL CSharp_ArDeviceConnection_debugBytesRead(void * jarg1, int jarg2) {
  ArDeviceConnection *arg1 = (ArDeviceConnection *) 0 ;
  int arg2 ;
  
  arg1 = (ArDeviceConnection *)jarg1; 
  arg2 = (int)jarg2; 
  (arg1)->debugBytesRead(arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_ArDeviceConnection_debugEndPacket__SWIG_0(void * jarg1, unsigned int jarg2, int jarg3) {
  ArDeviceConnection *arg1 = (ArDeviceConnection *) 0 ;
  bool arg2 ;
  int arg3 ;
  
  arg1 = (ArDeviceConnection *)jarg1; 
  arg2 = jarg2 ? true : false; 
  arg3 = (int)jarg3; 
  (arg1)->debugEndPacket(arg2,arg3);
}


SWIGEXPORT void SWIGSTDCALL CSharp_ArDeviceConnection_debugEndPacket__SWIG_1(void * jarg1, unsigned int jarg2) {
  ArDeviceConnection *arg1 = (ArDeviceConnection *) 0 ;
  bool arg2 ;
  
  arg1 = (ArDeviceConnection *)jarg1; 
  arg2 = jarg2 ? true : false; 
  (arg1)->debugEndPacket(arg2);
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_ArDeviceConnection_debugShouldLog(unsigned int jarg1) {
  unsigned int jresult ;
  bool arg1 ;
  bool result;
  
  arg1 = jarg1 ? true : false; 
  result = (bool)ArDeviceConnection::debugShouldLog(arg1);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_ArColor__SWIG_0(unsigned char jarg1, unsigned char jarg2, unsigned char jarg3) {
  void * jresult ;
  unsigned char arg1 ;
  unsigned char arg2 ;
  unsigned char arg3 ;
  ArColor *result = 0 ;
  
  arg1 = (unsigned char)jarg1; 
  arg2 = (unsigned char)jarg2; 
  arg3 = (unsigned char)jarg3; 
  result = (ArColor *)new ArColor(arg1,arg2,arg3);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_ArColor__SWIG_1() {
  void * jresult ;
  ArColor *result = 0 ;
  
  result = (ArColor *)new ArColor();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_ArColor__SWIG_2(int jarg1) {
  void * jresult ;
  ArTypes::Byte4 arg1 ;
  ArColor *result = 0 ;
  
  arg1 = (ArTypes::Byte4)jarg1; 
  result = (ArColor *)new ArColor(arg1);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_ArColor(void * jarg1) {
  ArColor *arg1 = (ArColor *) 0 ;
  
  arg1 = (ArColor *)jarg1; 
  delete arg1;
}


SWIGEXPORT unsigned char SWIGSTDCALL CSharp_ArColor_getRed(void * jarg1) {
  unsigned char jresult ;
  ArColor *arg1 = (ArColor *) 0 ;
  unsigned char result;
  
  arg1 = (ArColor *)jarg1; 
  result = (unsigned char)(arg1)->getRed();
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned char SWIGSTDCALL CSharp_ArColor_getGreen(void * jarg1) {
  unsigned char jresult ;
  ArColor *arg1 = (ArColor *) 0 ;
  unsigned char result;
  
  arg1 = (ArColor *)jarg1; 
  result = (unsigned char)(arg1)->getGreen();
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned char SWIGSTDCALL CSharp_ArColor_getBlue(void * jarg1) {
  unsigned char jresult ;
  ArColor *arg1 = (ArColor *) 0 ;
  unsigned char result;
  
  arg1 = (ArColor *)jarg1; 
  result = (unsigned char)(arg1)->getBlue();
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_ArColor_colorToByte4(void * jarg1) {
  int jresult ;
  ArColor *arg1 = (ArColor *) 0 ;
  ArTypes::Byte4 result;
  
  arg1 = (ArColor *)jarg1; 
  result = (ArTypes::Byte4)(arg1)->colorToByte4();
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_ArDrawingData_DEFAULT_REFRESH_TIME_get() {
  int jresult ;
  int result;
  
  result = (int)ArDrawingData::DEFAULT_REFRESH_TIME;
  jresult = (int)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_ArDrawingData__SWIG_0(char * jarg1, void * jarg2, int jarg3, int jarg4, unsigned int jarg5, char * jarg6) {
  void * jresult ;
  char *arg1 = (char *) 0 ;
  ArColor arg2 ;
  int arg3 ;
  int arg4 ;
  unsigned int arg5 ;
  char *arg6 = (char *) 0 ;
  ArColor *argp2 ;
  ArDrawingData *result = 0 ;
  
  arg1 = (char *)jarg1; 
  argp2 = (ArColor *)jarg2; 
  if (!argp2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Attempt to dereference null ArColor", 0);
    return 0;
  }
  arg2 = *argp2; 
  arg3 = (int)jarg3; 
  arg4 = (int)jarg4; 
  arg5 = (unsigned int)jarg5; 
  arg6 = (char *)jarg6; 
  result = (ArDrawingData *)new ArDrawingData((char const *)arg1,arg2,arg3,arg4,arg5,(char const *)arg6);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_ArDrawingData__SWIG_1(char * jarg1, void * jarg2, int jarg3, int jarg4, unsigned int jarg5) {
  void * jresult ;
  char *arg1 = (char *) 0 ;
  ArColor arg2 ;
  int arg3 ;
  int arg4 ;
  unsigned int arg5 ;
  ArColor *argp2 ;
  ArDrawingData *result = 0 ;
  
  arg1 = (char *)jarg1; 
  argp2 = (ArColor *)jarg2; 
  if (!argp2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Attempt to dereference null ArColor", 0);
    return 0;
  }
  arg2 = *argp2; 
  arg3 = (int)jarg3; 
  arg4 = (int)jarg4; 
  arg5 = (unsigned int)jarg5; 
  result = (ArDrawingData *)new ArDrawingData((char const *)arg1,arg2,arg3,arg4,arg5);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_ArDrawingData__SWIG_2(char * jarg1, void * jarg2, int jarg3, int jarg4) {
  void * jresult ;
  char *arg1 = (char *) 0 ;
  ArColor arg2 ;
  int arg3 ;
  int arg4 ;
  ArColor *argp2 ;
  ArDrawingData *result = 0 ;
  
  arg1 = (char *)jarg1; 
  argp2 = (ArColor *)jarg2; 
  if (!argp2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Attempt to dereference null ArColor", 0);
    return 0;
  }
  arg2 = *argp2; 
  arg3 = (int)jarg3; 
  arg4 = (int)jarg4; 
  result = (ArDrawingData *)new ArDrawingData((char const *)arg1,arg2,arg3,arg4);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_ArDrawingData__SWIG_3(char * jarg1, void * jarg2, int jarg3, int jarg4, unsigned int jarg5, void * jarg6, char * jarg7) {
  void * jresult ;
  char *arg1 = (char *) 0 ;
  ArColor arg2 ;
  int arg3 ;
  int arg4 ;
  unsigned int arg5 ;
  ArColor arg6 ;
  char *arg7 = (char *) 0 ;
  ArColor *argp2 ;
  ArColor *argp6 ;
  ArDrawingData *result = 0 ;
  
  arg1 = (char *)jarg1; 
  argp2 = (ArColor *)jarg2; 
  if (!argp2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Attempt to dereference null ArColor", 0);
    return 0;
  }
  arg2 = *argp2; 
  arg3 = (int)jarg3; 
  arg4 = (int)jarg4; 
  arg5 = (unsigned int)jarg5; 
  argp6 = (ArColor *)jarg6; 
  if (!argp6) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Attempt to dereference null ArColor", 0);
    return 0;
  }
  arg6 = *argp6; 
  arg7 = (char *)jarg7; 
  result = (ArDrawingData *)new ArDrawingData((char const *)arg1,arg2,arg3,arg4,arg5,arg6,(char const *)arg7);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_ArDrawingData__SWIG_4(char * jarg1, void * jarg2, int jarg3, int jarg4, unsigned int jarg5, void * jarg6) {
  void * jresult ;
  char *arg1 = (char *) 0 ;
  ArColor arg2 ;
  int arg3 ;
  int arg4 ;
  unsigned int arg5 ;
  ArColor arg6 ;
  ArColor *argp2 ;
  ArColor *argp6 ;
  ArDrawingData *result = 0 ;
  
  arg1 = (char *)jarg1; 
  argp2 = (ArColor *)jarg2; 
  if (!argp2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Attempt to dereference null ArColor", 0);
    return 0;
  }
  arg2 = *argp2; 
  arg3 = (int)jarg3; 
  arg4 = (int)jarg4; 
  arg5 = (unsigned int)jarg5; 
  argp6 = (ArColor *)jarg6; 
  if (!argp6) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Attempt to dereference null ArColor", 0);
    return 0;
  }
  arg6 = *argp6; 
  result = (ArDrawingData *)new ArDrawingData((char const *)arg1,arg2,arg3,arg4,arg5,arg6);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_ArDrawingData(void * jarg1) {
  ArDrawingData *arg1 = (ArDrawingData *) 0 ;
  
  arg1 = (ArDrawingData *)jarg1; 
  delete arg1;
}


SWIGEXPORT char * SWIGSTDCALL CSharp_ArDrawingData_getShape(void * jarg1) {
  char * jresult ;
  ArDrawingData *arg1 = (ArDrawingData *) 0 ;
  char *result = 0 ;
  
  arg1 = (ArDrawingData *)jarg1; 
  result = (char *)(arg1)->getShape();
  jresult = SWIG_csharp_string_callback((const char *)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_ArDrawingData_getPrimaryColor(void * jarg1) {
  void * jresult ;
  ArDrawingData *arg1 = (ArDrawingData *) 0 ;
  ArColor result;
  
  arg1 = (ArDrawingData *)jarg1; 
  result = (arg1)->getPrimaryColor();
  jresult = new ArColor((const ArColor &)result); 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_ArDrawingData_getSize(void * jarg1) {
  int jresult ;
  ArDrawingData *arg1 = (ArDrawingData *) 0 ;
  int result;
  
  arg1 = (ArDrawingData *)jarg1; 
  result = (int)(arg1)->getSize();
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_ArDrawingData_getLayer(void * jarg1) {
  int jresult ;
  ArDrawingData *arg1 = (ArDrawingData *) 0 ;
  int result;
  
  arg1 = (ArDrawingData *)jarg1; 
  result = (int)(arg1)->getLayer();
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_ArDrawingData_getDefaultRefreshTime(void * jarg1) {
  unsigned int jresult ;
  ArDrawingData *arg1 = (ArDrawingData *) 0 ;
  unsigned int result;
  
  arg1 = (ArDrawingData *)jarg1; 
  result = (unsigned int)(arg1)->getDefaultRefreshTime();
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_ArDrawingData_getSecondaryColor(void * jarg1) {
  void * jresult ;
  ArDrawingData *arg1 = (ArDrawingData *) 0 ;
  ArColor result;
  
  arg1 = (ArDrawingData *)jarg1; 
  result = (arg1)->getSecondaryColor();
  jresult = new ArColor((const ArColor &)result); 
  return jresult;
}


SWIGEXPORT char * SWIGSTDCALL CSharp_ArDrawingData_getVisibility(void * jarg1) {
  char * jresult ;
  ArDrawingData *arg1 = (ArDrawingData *) 0 ;
  char *result = 0 ;
  
  arg1 = (ArDrawingData *)jarg1; 
  result = (char *)(arg1)->getVisibility();
  jresult = SWIG_csharp_string_callback((const char *)result); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_ArDrawingData_setShape(void * jarg1, char * jarg2) {
  ArDrawingData *arg1 = (ArDrawingData *) 0 ;
  char *arg2 = (char *) 0 ;
  
  arg1 = (ArDrawingData *)jarg1; 
  arg2 = (char *)jarg2; 
  (arg1)->setShape((char const *)arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_ArDrawingData_setPrimaryColor(void * jarg1, void * jarg2) {
  ArDrawingData *arg1 = (ArDrawingData *) 0 ;
  ArColor arg2 ;
  ArColor *argp2 ;
  
  arg1 = (ArDrawingData *)jarg1; 
  argp2 = (ArColor *)jarg2; 
  if (!argp2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Attempt to dereference null ArColor", 0);
    return ;
  }
  arg2 = *argp2; 
  (arg1)->setPrimaryColor(arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_ArDrawingData_setSize(void * jarg1, int jarg2) {
  ArDrawingData *arg1 = (ArDrawingData *) 0 ;
  int arg2 ;
  
  arg1 = (ArDrawingData *)jarg1; 
  arg2 = (int)jarg2; 
  (arg1)->setSize(arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_ArDrawingData_setLayer(void * jarg1, int jarg2) {
  ArDrawingData *arg1 = (ArDrawingData *) 0 ;
  int arg2 ;
  
  arg1 = (ArDrawingData *)jarg1; 
  arg2 = (int)jarg2; 
  (arg1)->setLayer(arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_ArDrawingData_setDefaultRefreshTime(void * jarg1, unsigned int jarg2) {
  ArDrawingData *arg1 = (ArDrawingData *) 0 ;
  unsigned int arg2 ;
  
  arg1 = (ArDrawingData *)jarg1; 
  arg2 = (unsigned int)jarg2; 
  (arg1)->setDefaultRefreshTime(arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_ArDrawingData_setSecondaryColor(void * jarg1, void * jarg2) {
  ArDrawingData *arg1 = (ArDrawingData *) 0 ;
  ArColor arg2 ;
  ArColor *argp2 ;
  
  arg1 = (ArDrawingData *)jarg1; 
  argp2 = (ArColor *)jarg2; 
  if (!argp2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Attempt to dereference null ArColor", 0);
    return ;
  }
  arg2 = *argp2; 
  (arg1)->setSecondaryColor(arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_ArDrawingData_setVisibility(void * jarg1, char * jarg2) {
  ArDrawingData *arg1 = (ArDrawingData *) 0 ;
  char *arg2 = (char *) 0 ;
  
  arg1 = (ArDrawingData *)jarg1; 
  arg2 = (char *)jarg2; 
  (arg1)->setVisibility((char const *)arg2);
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_ArFileParser__SWIG_0(char * jarg1, unsigned int jarg2) {
  void * jresult ;
  char *arg1 = (char *) 0 ;
  bool arg2 ;
  ArFileParser *result = 0 ;
  
  arg1 = (char *)jarg1; 
  arg2 = jarg2 ? true : false; 
  result = (ArFileParser *)new ArFileParser((char const *)arg1,arg2);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_ArFileParser__SWIG_1(char * jarg1) {
  void * jresult ;
  char *arg1 = (char *) 0 ;
  ArFileParser *result = 0 ;
  
  arg1 = (char *)jarg1; 
  result = (ArFileParser *)new ArFileParser((char const *)arg1);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_ArFileParser__SWIG_2() {
  void * jresult ;
  ArFileParser *result = 0 ;
  
  result = (ArFileParser *)new ArFileParser();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_ArFileParser(void * jarg1) {
  ArFileParser *arg1 = (ArFileParser *) 0 ;
  
  arg1 = (ArFileParser *)jarg1; 
  delete arg1;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_ArFileParser_addHandler(void * jarg1, char * jarg2, void * jarg3) {
  unsigned int jresult ;
  ArFileParser *arg1 = (ArFileParser *) 0 ;
  char *arg2 = (char *) 0 ;
  ArRetFunctor1< bool,ArArgumentBuilder * > *arg3 = (ArRetFunctor1< bool,ArArgumentBuilder * > *) 0 ;
  bool result;
  
  arg1 = (ArFileParser *)jarg1; 
  arg2 = (char *)jarg2; 
  arg3 = (ArRetFunctor1< bool,ArArgumentBuilder * > *)jarg3; 
  result = (bool)(arg1)->addHandler((char const *)arg2,arg3);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_ArFileParser_addHandlerWithError(void * jarg1, char * jarg2, void * jarg3) {
  unsigned int jresult ;
  ArFileParser *arg1 = (ArFileParser *) 0 ;
  char *arg2 = (char *) 0 ;
  ArRetFunctor3< bool,ArArgumentBuilder *,char *,size_t > *arg3 = (ArRetFunctor3< bool,ArArgumentBuilder *,char *,size_t > *) 0 ;
  bool result;
  
  arg1 = (ArFileParser *)jarg1; 
  arg2 = (char *)jarg2; 
  arg3 = (ArRetFunctor3< bool,ArArgumentBuilder *,char *,size_t > *)jarg3; 
  result = (bool)(arg1)->addHandlerWithError((char const *)arg2,arg3);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_ArFileParser_remHandler__SWIG_0(void * jarg1, char * jarg2, unsigned int jarg3) {
  unsigned int jresult ;
  ArFileParser *arg1 = (ArFileParser *) 0 ;
  char *arg2 = (char *) 0 ;
  bool arg3 ;
  bool result;
  
  arg1 = (ArFileParser *)jarg1; 
  arg2 = (char *)jarg2; 
  arg3 = jarg3 ? true : false; 
  result = (bool)(arg1)->remHandler((char const *)arg2,arg3);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_ArFileParser_remHandler__SWIG_1(void * jarg1, char * jarg2) {
  unsigned int jresult ;
  ArFileParser *arg1 = (ArFileParser *) 0 ;
  char *arg2 = (char *) 0 ;
  bool result;
  
  arg1 = (ArFileParser *)jarg1; 
  arg2 = (char *)jarg2; 
  result = (bool)(arg1)->remHandler((char const *)arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_ArFileParser_remHandler__SWIG_2(void * jarg1, void * jarg2) {
  unsigned int jresult ;
  ArFileParser *arg1 = (ArFileParser *) 0 ;
  ArRetFunctor1< bool,ArArgumentBuilder * > *arg2 = (ArRetFunctor1< bool,ArArgumentBuilder * > *) 0 ;
  bool result;
  
  arg1 = (ArFileParser *)jarg1; 
  arg2 = (ArRetFunctor1< bool,ArArgumentBuilder * > *)jarg2; 
  result = (bool)(arg1)->remHandler(arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_ArFileParser_remHandler__SWIG_3(void * jarg1, void * jarg2) {
  unsigned int jresult ;
  ArFileParser *arg1 = (ArFileParser *) 0 ;
  ArRetFunctor3< bool,ArArgumentBuilder *,char *,size_t > *arg2 = (ArRetFunctor3< bool,ArArgumentBuilder *,char *,size_t > *) 0 ;
  bool result;
  
  arg1 = (ArFileParser *)jarg1; 
  arg2 = (ArRetFunctor3< bool,ArArgumentBuilder *,char *,size_t > *)jarg2; 
  result = (bool)(arg1)->remHandler(arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_ArFileParser_setPreParseFunctor(void * jarg1, void * jarg2) {
  ArFileParser *arg1 = (ArFileParser *) 0 ;
  ArFunctor1< char const * > *arg2 = (ArFunctor1< char const * > *) 0 ;
  
  arg1 = (ArFileParser *)jarg1; 
  arg2 = (ArFunctor1< char const * > *)jarg2; 
  (arg1)->setPreParseFunctor(arg2);
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_ArFileParser_parseFile__SWIG_0(void * jarg1, char * jarg2, unsigned int jarg3, unsigned int jarg4, char * jarg5, unsigned long jarg6) {
  unsigned int jresult ;
  ArFileParser *arg1 = (ArFileParser *) 0 ;
  char *arg2 = (char *) 0 ;
  bool arg3 ;
  bool arg4 ;
  char *arg5 = (char *) 0 ;
  size_t arg6 ;
  bool result;
  
  arg1 = (ArFileParser *)jarg1; 
  arg2 = (char *)jarg2; 
  arg3 = jarg3 ? true : false; 
  arg4 = jarg4 ? true : false; 
  arg5 = (char *)jarg5; 
  arg6 = (size_t)jarg6; 
  result = (bool)(arg1)->parseFile((char const *)arg2,arg3,arg4,arg5,arg6);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_ArFileParser_parseFile__SWIG_1(void * jarg1, char * jarg2, unsigned int jarg3, unsigned int jarg4, char * jarg5) {
  unsigned int jresult ;
  ArFileParser *arg1 = (ArFileParser *) 0 ;
  char *arg2 = (char *) 0 ;
  bool arg3 ;
  bool arg4 ;
  char *arg5 = (char *) 0 ;
  bool result;
  
  arg1 = (ArFileParser *)jarg1; 
  arg2 = (char *)jarg2; 
  arg3 = jarg3 ? true : false; 
  arg4 = jarg4 ? true : false; 
  arg5 = (char *)jarg5; 
  result = (bool)(arg1)->parseFile((char const *)arg2,arg3,arg4,arg5);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_ArFileParser_parseFile__SWIG_2(void * jarg1, char * jarg2, unsigned int jarg3, unsigned int jarg4) {
  unsigned int jresult ;
  ArFileParser *arg1 = (ArFileParser *) 0 ;
  char *arg2 = (char *) 0 ;
  bool arg3 ;
  bool arg4 ;
  bool result;
  
  arg1 = (ArFileParser *)jarg1; 
  arg2 = (char *)jarg2; 
  arg3 = jarg3 ? true : false; 
  arg4 = jarg4 ? true : false; 
  result = (bool)(arg1)->parseFile((char const *)arg2,arg3,arg4);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_ArFileParser_parseFile__SWIG_3(void * jarg1, char * jarg2, unsigned int jarg3) {
  unsigned int jresult ;
  ArFileParser *arg1 = (ArFileParser *) 0 ;
  char *arg2 = (char *) 0 ;
  bool arg3 ;
  bool result;
  
  arg1 = (ArFileParser *)jarg1; 
  arg2 = (char *)jarg2; 
  arg3 = jarg3 ? true : false; 
  result = (bool)(arg1)->parseFile((char const *)arg2,arg3);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_ArFileParser_parseFile__SWIG_4(void * jarg1, char * jarg2) {
  unsigned int jresult ;
  ArFileParser *arg1 = (ArFileParser *) 0 ;
  char *arg2 = (char *) 0 ;
  bool result;
  
  arg1 = (ArFileParser *)jarg1; 
  arg2 = (char *)jarg2; 
  result = (bool)(arg1)->parseFile((char const *)arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_ArFileParser_parseFile__SWIG_5(void * jarg1, void * jarg2, char * jarg3, int jarg4, unsigned int jarg5, char * jarg6, unsigned long jarg7) {
  unsigned int jresult ;
  ArFileParser *arg1 = (ArFileParser *) 0 ;
  FILE *arg2 = (FILE *) 0 ;
  char *arg3 = (char *) 0 ;
  int arg4 ;
  bool arg5 ;
  char *arg6 = (char *) 0 ;
  size_t arg7 ;
  bool result;
  
  arg1 = (ArFileParser *)jarg1; 
  arg2 = (FILE *)jarg2; 
  arg3 = (char *)jarg3; 
  arg4 = (int)jarg4; 
  arg5 = jarg5 ? true : false; 
  arg6 = (char *)jarg6; 
  arg7 = (size_t)jarg7; 
  result = (bool)(arg1)->parseFile(arg2,arg3,arg4,arg5,arg6,arg7);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_ArFileParser_parseFile__SWIG_6(void * jarg1, void * jarg2, char * jarg3, int jarg4, unsigned int jarg5, char * jarg6) {
  unsigned int jresult ;
  ArFileParser *arg1 = (ArFileParser *) 0 ;
  FILE *arg2 = (FILE *) 0 ;
  char *arg3 = (char *) 0 ;
  int arg4 ;
  bool arg5 ;
  char *arg6 = (char *) 0 ;
  bool result;
  
  arg1 = (ArFileParser *)jarg1; 
  arg2 = (FILE *)jarg2; 
  arg3 = (char *)jarg3; 
  arg4 = (int)jarg4; 
  arg5 = jarg5 ? true : false; 
  arg6 = (char *)jarg6; 
  result = (bool)(arg1)->parseFile(arg2,arg3,arg4,arg5,arg6);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_ArFileParser_parseFile__SWIG_7(void * jarg1, void * jarg2, char * jarg3, int jarg4, unsigned int jarg5) {
  unsigned int jresult ;
  ArFileParser *arg1 = (ArFileParser *) 0 ;
  FILE *arg2 = (FILE *) 0 ;
  char *arg3 = (char *) 0 ;
  int arg4 ;
  bool arg5 ;
  bool result;
  
  arg1 = (ArFileParser *)jarg1; 
  arg2 = (FILE *)jarg2; 
  arg3 = (char *)jarg3; 
  arg4 = (int)jarg4; 
  arg5 = jarg5 ? true : false; 
  result = (bool)(arg1)->parseFile(arg2,arg3,arg4,arg5);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_ArFileParser_parseFile__SWIG_8(void * jarg1, void * jarg2, char * jarg3, int jarg4) {
  unsigned int jresult ;
  ArFileParser *arg1 = (ArFileParser *) 0 ;
  FILE *arg2 = (FILE *) 0 ;
  char *arg3 = (char *) 0 ;
  int arg4 ;
  bool result;
  
  arg1 = (ArFileParser *)jarg1; 
  arg2 = (FILE *)jarg2; 
  arg3 = (char *)jarg3; 
  arg4 = (int)jarg4; 
  result = (bool)(arg1)->parseFile(arg2,arg3,arg4);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_ArFileParser_cancelParsing(void * jarg1) {
  ArFileParser *arg1 = (ArFileParser *) 0 ;
  
  arg1 = (ArFileParser *)jarg1; 
  (arg1)->cancelParsing();
}


SWIGEXPORT char * SWIGSTDCALL CSharp_ArFileParser_getBaseDirectory(void * jarg1) {
  char * jresult ;
  ArFileParser *arg1 = (ArFileParser *) 0 ;
  char *result = 0 ;
  
  arg1 = (ArFileParser *)jarg1; 
  result = (char *)((ArFileParser const *)arg1)->getBaseDirectory();
  jresult = SWIG_csharp_string_callback((const char *)result); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_ArFileParser_setBaseDirectory(void * jarg1, char * jarg2) {
  ArFileParser *arg1 = (ArFileParser *) 0 ;
  char *arg2 = (char *) 0 ;
  
  arg1 = (ArFileParser *)jarg1; 
  arg2 = (char *)jarg2; 
  (arg1)->setBaseDirectory((char const *)arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_ArFileParser_setCommentDelimiters(void * jarg1, void * jarg2) {
  ArFileParser *arg1 = (ArFileParser *) 0 ;
  std::list< std::string > *arg2 = 0 ;
  
  arg1 = (ArFileParser *)jarg1; 
  arg2 = (std::list< std::string > *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "std::list< std::string > const & type is null", 0);
    return ;
  } 
  (arg1)->setCommentDelimiters((std::list< std::string > const &)*arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_ArFileParser_clearCommentDelimiters(void * jarg1) {
  ArFileParser *arg1 = (ArFileParser *) 0 ;
  
  arg1 = (ArFileParser *)jarg1; 
  (arg1)->clearCommentDelimiters();
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_ArFileParser_parseLine__SWIG_0(void * jarg1, char * jarg2, char * jarg3, unsigned long jarg4) {
  unsigned int jresult ;
  ArFileParser *arg1 = (ArFileParser *) 0 ;
  char *arg2 = (char *) 0 ;
  char *arg3 = (char *) 0 ;
  size_t arg4 ;
  bool result;
  
  arg1 = (ArFileParser *)jarg1; 
  arg2 = (char *)jarg2; 
  arg3 = (char *)jarg3; 
  arg4 = (size_t)jarg4; 
  result = (bool)(arg1)->parseLine(arg2,arg3,arg4);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_ArFileParser_parseLine__SWIG_1(void * jarg1, char * jarg2, char * jarg3) {
  unsigned int jresult ;
  ArFileParser *arg1 = (ArFileParser *) 0 ;
  char *arg2 = (char *) 0 ;
  char *arg3 = (char *) 0 ;
  bool result;
  
  arg1 = (ArFileParser *)jarg1; 
  arg2 = (char *)jarg2; 
  arg3 = (char *)jarg3; 
  result = (bool)(arg1)->parseLine(arg2,arg3);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_ArFileParser_parseLine__SWIG_2(void * jarg1, char * jarg2) {
  unsigned int jresult ;
  ArFileParser *arg1 = (ArFileParser *) 0 ;
  char *arg2 = (char *) 0 ;
  bool result;
  
  arg1 = (ArFileParser *)jarg1; 
  arg2 = (char *)jarg2; 
  result = (bool)(arg1)->parseLine(arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_ArFileParser_resetCounters(void * jarg1) {
  ArFileParser *arg1 = (ArFileParser *) 0 ;
  
  arg1 = (ArFileParser *)jarg1; 
  (arg1)->resetCounters();
}


SWIGEXPORT void SWIGSTDCALL CSharp_ArFileParser_setMaxNumArguments__SWIG_0(void * jarg1, unsigned long jarg2) {
  ArFileParser *arg1 = (ArFileParser *) 0 ;
  size_t arg2 ;
  
  arg1 = (ArFileParser *)jarg1; 
  arg2 = (size_t)jarg2; 
  (arg1)->setMaxNumArguments(arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_ArFileParser_setMaxNumArguments__SWIG_1(void * jarg1) {
  ArFileParser *arg1 = (ArFileParser *) 0 ;
  
  arg1 = (ArFileParser *)jarg1; 
  (arg1)->setMaxNumArguments();
}


SWIGEXPORT void SWIGSTDCALL CSharp_ArFileParser_setQuiet(void * jarg1, unsigned int jarg2) {
  ArFileParser *arg1 = (ArFileParser *) 0 ;
  bool arg2 ;
  
  arg1 = (ArFileParser *)jarg1; 
  arg2 = jarg2 ? true : false; 
  (arg1)->setQuiet(arg2);
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_ArForbiddenRangeDevice__SWIG_0(void * jarg1, double jarg2, unsigned int jarg3, char * jarg4) {
  void * jresult ;
  ArMapInterface *arg1 = (ArMapInterface *) 0 ;
  double arg2 ;
  unsigned int arg3 ;
  char *arg4 = (char *) 0 ;
  ArForbiddenRangeDevice *result = 0 ;
  
  arg1 = (ArMapInterface *)jarg1; 
  arg2 = (double)jarg2; 
  arg3 = (unsigned int)jarg3; 
  arg4 = (char *)jarg4; 
  result = (ArForbiddenRangeDevice *)new ArForbiddenRangeDevice(arg1,arg2,arg3,(char const *)arg4);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_ArForbiddenRangeDevice__SWIG_1(void * jarg1, double jarg2, unsigned int jarg3) {
  void * jresult ;
  ArMapInterface *arg1 = (ArMapInterface *) 0 ;
  double arg2 ;
  unsigned int arg3 ;
  ArForbiddenRangeDevice *result = 0 ;
  
  arg1 = (ArMapInterface *)jarg1; 
  arg2 = (double)jarg2; 
  arg3 = (unsigned int)jarg3; 
  result = (ArForbiddenRangeDevice *)new ArForbiddenRangeDevice(arg1,arg2,arg3);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_ArForbiddenRangeDevice__SWIG_2(void * jarg1, double jarg2) {
  void * jresult ;
  ArMapInterface *arg1 = (ArMapInterface *) 0 ;
  double arg2 ;
  ArForbiddenRangeDevice *result = 0 ;
  
  arg1 = (ArMapInterface *)jarg1; 
  arg2 = (double)jarg2; 
  result = (ArForbiddenRangeDevice *)new ArForbiddenRangeDevice(arg1,arg2);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_ArForbiddenRangeDevice__SWIG_3(void * jarg1) {
  void * jresult ;
  ArMapInterface *arg1 = (ArMapInterface *) 0 ;
  ArForbiddenRangeDevice *result = 0 ;
  
  arg1 = (ArMapInterface *)jarg1; 
  result = (ArForbiddenRangeDevice *)new ArForbiddenRangeDevice(arg1);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_ArForbiddenRangeDevice(void * jarg1) {
  ArForbiddenRangeDevice *arg1 = (ArForbiddenRangeDevice *) 0 ;
  
  arg1 = (ArForbiddenRangeDevice *)jarg1; 
  delete arg1;
}


SWIGEXPORT void SWIGSTDCALL CSharp_ArForbiddenRangeDevice_processMap(void * jarg1) {
  ArForbiddenRangeDevice *arg1 = (ArForbiddenRangeDevice *) 0 ;
  
  arg1 = (ArForbiddenRangeDevice *)jarg1; 
  (arg1)->processMap();
}


SWIGEXPORT void SWIGSTDCALL CSharp_ArForbiddenRangeDevice_processReadings(void * jarg1) {
  ArForbiddenRangeDevice *arg1 = (ArForbiddenRangeDevice *) 0 ;
  
  arg1 = (ArForbiddenRangeDevice *)jarg1; 
  (arg1)->processReadings();
}


SWIGEXPORT void SWIGSTDCALL CSharp_ArForbiddenRangeDevice_setRobot(void * jarg1, void * jarg2) {
  ArForbiddenRangeDevice *arg1 = (ArForbiddenRangeDevice *) 0 ;
  ArRobot *arg2 = (ArRobot *) 0 ;
  
  arg1 = (ArForbiddenRangeDevice *)jarg1; 
  arg2 = (ArRobot *)jarg2; 
  (arg1)->setRobot(arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_ArForbiddenRangeDevice_enable(void * jarg1) {
  ArForbiddenRangeDevice *arg1 = (ArForbiddenRangeDevice *) 0 ;
  
  arg1 = (ArForbiddenRangeDevice *)jarg1; 
  (arg1)->enable();
}


SWIGEXPORT void SWIGSTDCALL CSharp_ArForbiddenRangeDevice_disable(void * jarg1) {
  ArForbiddenRangeDevice *arg1 = (ArForbiddenRangeDevice *) 0 ;
  
  arg1 = (ArForbiddenRangeDevice *)jarg1; 
  (arg1)->disable();
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_ArForbiddenRangeDevice_isEnabled(void * jarg1) {
  unsigned int jresult ;
  ArForbiddenRangeDevice *arg1 = (ArForbiddenRangeDevice *) 0 ;
  bool result;
  
  arg1 = (ArForbiddenRangeDevice *)jarg1; 
  result = (bool)((ArForbiddenRangeDevice const *)arg1)->isEnabled();
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_ArForbiddenRangeDevice_getEnableCB(void * jarg1) {
  void * jresult ;
  ArForbiddenRangeDevice *arg1 = (ArForbiddenRangeDevice *) 0 ;
  ArFunctor *result = 0 ;
  
  arg1 = (ArForbiddenRangeDevice *)jarg1; 
  result = (ArFunctor *)(arg1)->getEnableCB();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_ArForbiddenRangeDevice_getDisableCB(void * jarg1) {
  void * jresult ;
  ArForbiddenRangeDevice *arg1 = (ArForbiddenRangeDevice *) 0 ;
  ArFunctor *result = 0 ;
  
  arg1 = (ArForbiddenRangeDevice *)jarg1; 
  result = (ArFunctor *)(arg1)->getDisableCB();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_ArFunctorASyncTask(void * jarg1) {
  void * jresult ;
  ArRetFunctor1< void *,void * > *arg1 = (ArRetFunctor1< void *,void * > *) 0 ;
  ArFunctorASyncTask *result = 0 ;
  
  arg1 = (ArRetFunctor1< void *,void * > *)jarg1; 
  result = (ArFunctorASyncTask *)new ArFunctorASyncTask(arg1);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_ArFunctorASyncTask(void * jarg1) {
  ArFunctorASyncTask *arg1 = (ArFunctorASyncTask *) 0 ;
  
  arg1 = (ArFunctorASyncTask *)jarg1; 
  delete arg1;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_ArFunctorASyncTask_runThread(void * jarg1, void * jarg2) {
  void * jresult ;
  ArFunctorASyncTask *arg1 = (ArFunctorASyncTask *) 0 ;
  void *arg2 = (void *) 0 ;
  void *result = 0 ;
  
  arg1 = (ArFunctorASyncTask *)jarg1; 
  arg2 = (void *)jarg2; 
  result = (void *)(arg1)->runThread(arg2);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_ArGPS() {
  void * jresult ;
  ArGPS *result = 0 ;
  
  result = (ArGPS *)new ArGPS();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_ArGPS(void * jarg1) {
  ArGPS *arg1 = (ArGPS *) 0 ;
  
  arg1 = (ArGPS *)jarg1; 
  delete arg1;
}


SWIGEXPORT void SWIGSTDCALL CSharp_ArGPS_setDeviceConnection(void * jarg1, void * jarg2) {
  ArGPS *arg1 = (ArGPS *) 0 ;
  ArDeviceConnection *arg2 = (ArDeviceConnection *) 0 ;
  
  arg1 = (ArGPS *)jarg1; 
  arg2 = (ArDeviceConnection *)jarg2; 
  (arg1)->setDeviceConnection(arg2);
}


SWIGEXPORT void * SWIGSTDCALL CSharp_ArGPS_getDeviceConnection(void * jarg1) {
  void * jresult ;
  ArGPS *arg1 = (ArGPS *) 0 ;
  ArDeviceConnection *result = 0 ;
  
  arg1 = (ArGPS *)jarg1; 
  result = (ArDeviceConnection *)((ArGPS const *)arg1)->getDeviceConnection();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_ArGPS_connect__SWIG_0(void * jarg1, unsigned long jarg2) {
  unsigned int jresult ;
  ArGPS *arg1 = (ArGPS *) 0 ;
  unsigned long arg2 ;
  bool result;
  
  arg1 = (ArGPS *)jarg1; 
  arg2 = (unsigned long)jarg2; 
  result = (bool)(arg1)->connect(arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_ArGPS_connect__SWIG_1(void * jarg1) {
  unsigned int jresult ;
  ArGPS *arg1 = (ArGPS *) 0 ;
  bool result;
  
  arg1 = (ArGPS *)jarg1; 
  result = (bool)(arg1)->connect();
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_ArGPS_blockingConnect__SWIG_0(void * jarg1, unsigned long jarg2) {
  unsigned int jresult ;
  ArGPS *arg1 = (ArGPS *) 0 ;
  unsigned long arg2 ;
  bool result;
  
  arg1 = (ArGPS *)jarg1; 
  arg2 = (unsigned long)jarg2; 
  result = (bool)(arg1)->blockingConnect(arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_ArGPS_blockingConnect__SWIG_1(void * jarg1) {
  unsigned int jresult ;
  ArGPS *arg1 = (ArGPS *) 0 ;
  bool result;
  
  arg1 = (ArGPS *)jarg1; 
  result = (bool)(arg1)->blockingConnect();
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_ArGPS_ReadFinished_get() {
  int jresult ;
  int result;
  
  result = (int)ArGPS::ReadFinished;
  jresult = (int)result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_ArGPS_ReadError_get() {
  int jresult ;
  int result;
  
  result = (int)ArGPS::ReadError;
  jresult = (int)result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_ArGPS_ReadData_get() {
  int jresult ;
  int result;
  
  result = (int)ArGPS::ReadData;
  jresult = (int)result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_ArGPS_ReadUpdated_get() {
  int jresult ;
  int result;
  
  result = (int)ArGPS::ReadUpdated;
  jresult = (int)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_ArGPS_ReadFlags_set(void * jarg1, int jarg2) {
  ArGPS *arg1 = (ArGPS *) 0 ;
  int arg2 ;
  
  arg1 = (ArGPS *)jarg1; 
  arg2 = (int)jarg2; 
  if (arg1 && sizeof(int) == sizeof((arg1)->ReadFlags)) *(int*)(void*)&((arg1)->ReadFlags) = arg2;
}


SWIGEXPORT int SWIGSTDCALL CSharp_ArGPS_ReadFlags_get(void * jarg1) {
  int jresult ;
  ArGPS *arg1 = (ArGPS *) 0 ;
  int result;
  
  arg1 = (ArGPS *)jarg1; 
  result = (int) ((arg1)->ReadFlags);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_ArGPS_read__SWIG_0(void * jarg1, unsigned long jarg2) {
  int jresult ;
  ArGPS *arg1 = (ArGPS *) 0 ;
  unsigned long arg2 ;
  int result;
  
  arg1 = (ArGPS *)jarg1; 
  arg2 = (unsigned long)jarg2; 
  result = (int)(arg1)->read(arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_ArGPS_read__SWIG_1(void * jarg1) {
  int jresult ;
  ArGPS *arg1 = (ArGPS *) 0 ;
  int result;
  
  arg1 = (ArGPS *)jarg1; 
  result = (int)(arg1)->read();
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_ArGPS_readWithLock(void * jarg1, unsigned int jarg2) {
  int jresult ;
  ArGPS *arg1 = (ArGPS *) 0 ;
  unsigned int arg2 ;
  int result;
  
  arg1 = (ArGPS *)jarg1; 
  arg2 = (unsigned int)jarg2; 
  result = (int)(arg1)->readWithLock(arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_ArGPS_lockObj(void * jarg1) {
  ArGPS *arg1 = (ArGPS *) 0 ;
  
  arg1 = (ArGPS *)jarg1; 
  (arg1)->lock();
}


SWIGEXPORT void SWIGSTDCALL CSharp_ArGPS_unlockObj(void * jarg1) {
  ArGPS *arg1 = (ArGPS *) 0 ;
  
  arg1 = (ArGPS *)jarg1; 
  (arg1)->unlock();
}


SWIGEXPORT void SWIGSTDCALL CSharp_ArGPS_setIgnoreChecksum(void * jarg1, unsigned int jarg2) {
  ArGPS *arg1 = (ArGPS *) 0 ;
  bool arg2 ;
  
  arg1 = (ArGPS *)jarg1; 
  arg2 = jarg2 ? true : false; 
  (arg1)->setIgnoreChecksum(arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_ArGPS_logData(void * jarg1) {
  ArGPS *arg1 = (ArGPS *) 0 ;
  
  arg1 = (ArGPS *)jarg1; 
  ((ArGPS const *)arg1)->logData();
}


SWIGEXPORT void SWIGSTDCALL CSharp_ArGPS_printData__SWIG_0(void * jarg1, unsigned int jarg2) {
  ArGPS *arg1 = (ArGPS *) 0 ;
  bool arg2 ;
  
  arg1 = (ArGPS *)jarg1; 
  arg2 = jarg2 ? true : false; 
  ((ArGPS const *)arg1)->printData(arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_ArGPS_printData__SWIG_1(void * jarg1) {
  ArGPS *arg1 = (ArGPS *) 0 ;
  
  arg1 = (ArGPS *)jarg1; 
  ((ArGPS const *)arg1)->printData();
}


SWIGEXPORT void SWIGSTDCALL CSharp_ArGPS_printDataLabelsHeader(void * jarg1) {
  ArGPS *arg1 = (ArGPS *) 0 ;
  
  arg1 = (ArGPS *)jarg1; 
  ((ArGPS const *)arg1)->printDataLabelsHeader();
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_ArGPS_Data() {
  void * jresult ;
  ArGPS::Data *result = 0 ;
  
  result = (ArGPS::Data *)new ArGPS::Data();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_ArGPS_Data_latitude_set(void * jarg1, double jarg2) {
  ArGPS::Data *arg1 = (ArGPS::Data *) 0 ;
  double arg2 ;
  
  arg1 = (ArGPS::Data *)jarg1; 
  arg2 = (double)jarg2; 
  if (arg1) (arg1)->latitude = arg2;
}


SWIGEXPORT double SWIGSTDCALL CSharp_ArGPS_Data_latitude_get(void * jarg1) {
  double jresult ;
  ArGPS::Data *arg1 = (ArGPS::Data *) 0 ;
  double result;
  
  arg1 = (ArGPS::Data *)jarg1; 
  result = (double) ((arg1)->latitude);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_ArGPS_Data_longitude_set(void * jarg1, double jarg2) {
  ArGPS::Data *arg1 = (ArGPS::Data *) 0 ;
  double arg2 ;
  
  arg1 = (ArGPS::Data *)jarg1; 
  arg2 = (double)jarg2; 
  if (arg1) (arg1)->longitude = arg2;
}


SWIGEXPORT double SWIGSTDCALL CSharp_ArGPS_Data_longitude_get(void * jarg1) {
  double jresult ;
  ArGPS::Data *arg1 = (ArGPS::Data *) 0 ;
  double result;
  
  arg1 = (ArGPS::Data *)jarg1; 
  result = (double) ((arg1)->longitude);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_ArGPS_Data_havePosition_set(void * jarg1, unsigned int jarg2) {
  ArGPS::Data *arg1 = (ArGPS::Data *) 0 ;
  bool arg2 ;
  
  arg1 = (ArGPS::Data *)jarg1; 
  arg2 = jarg2 ? true : false; 
  if (arg1) (arg1)->havePosition = arg2;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_ArGPS_Data_havePosition_get(void * jarg1) {
  unsigned int jresult ;
  ArGPS::Data *arg1 = (ArGPS::Data *) 0 ;
  bool result;
  
  arg1 = (ArGPS::Data *)jarg1; 
  result = (bool) ((arg1)->havePosition);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_ArGPS_Data_timeGotPosition_set(void * jarg1, void * jarg2) {
  ArGPS::Data *arg1 = (ArGPS::Data *) 0 ;
  ArTime *arg2 = (ArTime *) 0 ;
  
  arg1 = (ArGPS::Data *)jarg1; 
  arg2 = (ArTime *)jarg2; 
  if (arg1) (arg1)->timeGotPosition = *arg2;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_ArGPS_Data_timeGotPosition_get(void * jarg1) {
  void * jresult ;
  ArGPS::Data *arg1 = (ArGPS::Data *) 0 ;
  ArTime *result = 0 ;
  
  arg1 = (ArGPS::Data *)jarg1; 
  result = (ArTime *)& ((arg1)->timeGotPosition);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_ArGPS_Data_speed_set(void * jarg1, double jarg2) {
  ArGPS::Data *arg1 = (ArGPS::Data *) 0 ;
  double arg2 ;
  
  arg1 = (ArGPS::Data *)jarg1; 
  arg2 = (double)jarg2; 
  if (arg1) (arg1)->speed = arg2;
}


SWIGEXPORT double SWIGSTDCALL CSharp_ArGPS_Data_speed_get(void * jarg1) {
  double jresult ;
  ArGPS::Data *arg1 = (ArGPS::Data *) 0 ;
  double result;
  
  arg1 = (ArGPS::Data *)jarg1; 
  result = (double) ((arg1)->speed);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_ArGPS_Data_haveSpeed_set(void * jarg1, unsigned int jarg2) {
  ArGPS::Data *arg1 = (ArGPS::Data *) 0 ;
  bool arg2 ;
  
  arg1 = (ArGPS::Data *)jarg1; 
  arg2 = jarg2 ? true : false; 
  if (arg1) (arg1)->haveSpeed = arg2;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_ArGPS_Data_haveSpeed_get(void * jarg1) {
  unsigned int jresult ;
  ArGPS::Data *arg1 = (ArGPS::Data *) 0 ;
  bool result;
  
  arg1 = (ArGPS::Data *)jarg1; 
  result = (bool) ((arg1)->haveSpeed);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_ArGPS_Data_GPSPositionTimestamp_set(void * jarg1, void * jarg2) {
  ArGPS::Data *arg1 = (ArGPS::Data *) 0 ;
  ArTime *arg2 = (ArTime *) 0 ;
  
  arg1 = (ArGPS::Data *)jarg1; 
  arg2 = (ArTime *)jarg2; 
  if (arg1) (arg1)->GPSPositionTimestamp = *arg2;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_ArGPS_Data_GPSPositionTimestamp_get(void * jarg1) {
  void * jresult ;
  ArGPS::Data *arg1 = (ArGPS::Data *) 0 ;
  ArTime *result = 0 ;
  
  arg1 = (ArGPS::Data *)jarg1; 
  result = (ArTime *)& ((arg1)->GPSPositionTimestamp);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_ArGPS_Data_fixType_set(void * jarg1, int jarg2) {
  ArGPS::Data *arg1 = (ArGPS::Data *) 0 ;
  ArGPS::FixType arg2 ;
  
  arg1 = (ArGPS::Data *)jarg1; 
  arg2 = (ArGPS::FixType)jarg2; 
  if (arg1) (arg1)->fixType = arg2;
}


SWIGEXPORT int SWIGSTDCALL CSharp_ArGPS_Data_fixType_get(void * jarg1) {
  int jresult ;
  ArGPS::Data *arg1 = (ArGPS::Data *) 0 ;
  ArGPS::FixType result;
  
  arg1 = (ArGPS::Data *)jarg1; 
  result = (ArGPS::FixType) ((arg1)->fixType);
  jresult = (int)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_ArGPS_Data_numSatellitesTracked_set(void * jarg1, unsigned short jarg2) {
  ArGPS::Data *arg1 = (ArGPS::Data *) 0 ;
  unsigned short arg2 ;
  
  arg1 = (ArGPS::Data *)jarg1; 
  arg2 = (unsigned short)jarg2; 
  if (arg1) (arg1)->numSatellitesTracked = arg2;
}


SWIGEXPORT unsigned short SWIGSTDCALL CSharp_ArGPS_Data_numSatellitesTracked_get(void * jarg1) {
  unsigned short jresult ;
  ArGPS::Data *arg1 = (ArGPS::Data *) 0 ;
  unsigned short result;
  
  arg1 = (ArGPS::Data *)jarg1; 
  result = (unsigned short) ((arg1)->numSatellitesTracked);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_ArGPS_Data_altitude_set(void * jarg1, double jarg2) {
  ArGPS::Data *arg1 = (ArGPS::Data *) 0 ;
  double arg2 ;
  
  arg1 = (ArGPS::Data *)jarg1; 
  arg2 = (double)jarg2; 
  if (arg1) (arg1)->altitude = arg2;
}


SWIGEXPORT double SWIGSTDCALL CSharp_ArGPS_Data_altitude_get(void * jarg1) {
  double jresult ;
  ArGPS::Data *arg1 = (ArGPS::Data *) 0 ;
  double result;
  
  arg1 = (ArGPS::Data *)jarg1; 
  result = (double) ((arg1)->altitude);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_ArGPS_Data_haveAltitude_set(void * jarg1, unsigned int jarg2) {
  ArGPS::Data *arg1 = (ArGPS::Data *) 0 ;
  bool arg2 ;
  
  arg1 = (ArGPS::Data *)jarg1; 
  arg2 = jarg2 ? true : false; 
  if (arg1) (arg1)->haveAltitude = arg2;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_ArGPS_Data_haveAltitude_get(void * jarg1) {
  unsigned int jresult ;
  ArGPS::Data *arg1 = (ArGPS::Data *) 0 ;
  bool result;
  
  arg1 = (ArGPS::Data *)jarg1; 
  result = (bool) ((arg1)->haveAltitude);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_ArGPS_Data_altimeter_set(void * jarg1, double jarg2) {
  ArGPS::Data *arg1 = (ArGPS::Data *) 0 ;
  double arg2 ;
  
  arg1 = (ArGPS::Data *)jarg1; 
  arg2 = (double)jarg2; 
  if (arg1) (arg1)->altimeter = arg2;
}


SWIGEXPORT double SWIGSTDCALL CSharp_ArGPS_Data_altimeter_get(void * jarg1) {
  double jresult ;
  ArGPS::Data *arg1 = (ArGPS::Data *) 0 ;
  double result;
  
  arg1 = (ArGPS::Data *)jarg1; 
  result = (double) ((arg1)->altimeter);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_ArGPS_Data_haveAltimeter_set(void * jarg1, unsigned int jarg2) {
  ArGPS::Data *arg1 = (ArGPS::Data *) 0 ;
  bool arg2 ;
  
  arg1 = (ArGPS::Data *)jarg1; 
  arg2 = jarg2 ? true : false; 
  if (arg1) (arg1)->haveAltimeter = arg2;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_ArGPS_Data_haveAltimeter_get(void * jarg1) {
  unsigned int jresult ;
  ArGPS::Data *arg1 = (ArGPS::Data *) 0 ;
  bool result;
  
  arg1 = (ArGPS::Data *)jarg1; 
  result = (bool) ((arg1)->haveAltimeter);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_ArGPS_Data_DGPSStationID_set(void * jarg1, unsigned short jarg2) {
  ArGPS::Data *arg1 = (ArGPS::Data *) 0 ;
  unsigned short arg2 ;
  
  arg1 = (ArGPS::Data *)jarg1; 
  arg2 = (unsigned short)jarg2; 
  if (arg1) (arg1)->DGPSStationID = arg2;
}


SWIGEXPORT unsigned short SWIGSTDCALL CSharp_ArGPS_Data_DGPSStationID_get(void * jarg1) {
  unsigned short jresult ;
  ArGPS::Data *arg1 = (ArGPS::Data *) 0 ;
  unsigned short result;
  
  arg1 = (ArGPS::Data *)jarg1; 
  result = (unsigned short) ((arg1)->DGPSStationID);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_ArGPS_Data_haveDGPSStation_set(void * jarg1, unsigned int jarg2) {
  ArGPS::Data *arg1 = (ArGPS::Data *) 0 ;
  bool arg2 ;
  
  arg1 = (ArGPS::Data *)jarg1; 
  arg2 = jarg2 ? true : false; 
  if (arg1) (arg1)->haveDGPSStation = arg2;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_ArGPS_Data_haveDGPSStation_get(void * jarg1) {
  unsigned int jresult ;
  ArGPS::Data *arg1 = (ArGPS::Data *) 0 ;
  bool result;
  
  arg1 = (ArGPS::Data *)jarg1; 
  result = (bool) ((arg1)->haveDGPSStation);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_ArGPS_Data_garminPositionError_set(void * jarg1, double jarg2) {
  ArGPS::Data *arg1 = (ArGPS::Data *) 0 ;
  double arg2 ;
  
  arg1 = (ArGPS::Data *)jarg1; 
  arg2 = (double)jarg2; 
  if (arg1) (arg1)->garminPositionError = arg2;
}


SWIGEXPORT double SWIGSTDCALL CSharp_ArGPS_Data_garminPositionError_get(void * jarg1) {
  double jresult ;
  ArGPS::Data *arg1 = (ArGPS::Data *) 0 ;
  double result;
  
  arg1 = (ArGPS::Data *)jarg1; 
  result = (double) ((arg1)->garminPositionError);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_ArGPS_Data_haveGarminPositionError_set(void * jarg1, unsigned int jarg2) {
  ArGPS::Data *arg1 = (ArGPS::Data *) 0 ;
  bool arg2 ;
  
  arg1 = (ArGPS::Data *)jarg1; 
  arg2 = jarg2 ? true : false; 
  if (arg1) (arg1)->haveGarminPositionError = arg2;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_ArGPS_Data_haveGarminPositionError_get(void * jarg1) {
  unsigned int jresult ;
  ArGPS::Data *arg1 = (ArGPS::Data *) 0 ;
  bool result;
  
  arg1 = (ArGPS::Data *)jarg1; 
  result = (bool) ((arg1)->haveGarminPositionError);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_ArGPS_Data_garminVerticalPositionError_set(void * jarg1, double jarg2) {
  ArGPS::Data *arg1 = (ArGPS::Data *) 0 ;
  double arg2 ;
  
  arg1 = (ArGPS::Data *)jarg1; 
  arg2 = (double)jarg2; 
  if (arg1) (arg1)->garminVerticalPositionError = arg2;
}


SWIGEXPORT double SWIGSTDCALL CSharp_ArGPS_Data_garminVerticalPositionError_get(void * jarg1) {
  double jresult ;
  ArGPS::Data *arg1 = (ArGPS::Data *) 0 ;
  double result;
  
  arg1 = (ArGPS::Data *)jarg1; 
  result = (double) ((arg1)->garminVerticalPositionError);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_ArGPS_Data_haveGarminVerticalPositionError_set(void * jarg1, unsigned int jarg2) {
  ArGPS::Data *arg1 = (ArGPS::Data *) 0 ;
  bool arg2 ;
  
  arg1 = (ArGPS::Data *)jarg1; 
  arg2 = jarg2 ? true : false; 
  if (arg1) (arg1)->haveGarminVerticalPositionError = arg2;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_ArGPS_Data_haveGarminVerticalPositionError_get(void * jarg1) {
  unsigned int jresult ;
  ArGPS::Data *arg1 = (ArGPS::Data *) 0 ;
  bool result;
  
  arg1 = (ArGPS::Data *)jarg1; 
  result = (bool) ((arg1)->haveGarminVerticalPositionError);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_ArGPS_Data_compassHeadingMag_set(void * jarg1, double jarg2) {
  ArGPS::Data *arg1 = (ArGPS::Data *) 0 ;
  double arg2 ;
  
  arg1 = (ArGPS::Data *)jarg1; 
  arg2 = (double)jarg2; 
  if (arg1) (arg1)->compassHeadingMag = arg2;
}


SWIGEXPORT double SWIGSTDCALL CSharp_ArGPS_Data_compassHeadingMag_get(void * jarg1) {
  double jresult ;
  ArGPS::Data *arg1 = (ArGPS::Data *) 0 ;
  double result;
  
  arg1 = (ArGPS::Data *)jarg1; 
  result = (double) ((arg1)->compassHeadingMag);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_ArGPS_Data_compassHeadingTrue_set(void * jarg1, double jarg2) {
  ArGPS::Data *arg1 = (ArGPS::Data *) 0 ;
  double arg2 ;
  
  arg1 = (ArGPS::Data *)jarg1; 
  arg2 = (double)jarg2; 
  if (arg1) (arg1)->compassHeadingTrue = arg2;
}


SWIGEXPORT double SWIGSTDCALL CSharp_ArGPS_Data_compassHeadingTrue_get(void * jarg1) {
  double jresult ;
  ArGPS::Data *arg1 = (ArGPS::Data *) 0 ;
  double result;
  
  arg1 = (ArGPS::Data *)jarg1; 
  result = (double) ((arg1)->compassHeadingTrue);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_ArGPS_Data_haveCompassHeadingMag_set(void * jarg1, unsigned int jarg2) {
  ArGPS::Data *arg1 = (ArGPS::Data *) 0 ;
  bool arg2 ;
  
  arg1 = (ArGPS::Data *)jarg1; 
  arg2 = jarg2 ? true : false; 
  if (arg1) (arg1)->haveCompassHeadingMag = arg2;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_ArGPS_Data_haveCompassHeadingMag_get(void * jarg1) {
  unsigned int jresult ;
  ArGPS::Data *arg1 = (ArGPS::Data *) 0 ;
  bool result;
  
  arg1 = (ArGPS::Data *)jarg1; 
  result = (bool) ((arg1)->haveCompassHeadingMag);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_ArGPS_Data_haveCompassHeadingTrue_set(void * jarg1, unsigned int jarg2) {
  ArGPS::Data *arg1 = (ArGPS::Data *) 0 ;
  bool arg2 ;
  
  arg1 = (ArGPS::Data *)jarg1; 
  arg2 = jarg2 ? true : false; 
  if (arg1) (arg1)->haveCompassHeadingTrue = arg2;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_ArGPS_Data_haveCompassHeadingTrue_get(void * jarg1) {
  unsigned int jresult ;
  ArGPS::Data *arg1 = (ArGPS::Data *) 0 ;
  bool result;
  
  arg1 = (ArGPS::Data *)jarg1; 
  result = (bool) ((arg1)->haveCompassHeadingTrue);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_ArGPS_Data_compassMagCounter_set(void * jarg1, unsigned long jarg2) {
  ArGPS::Data *arg1 = (ArGPS::Data *) 0 ;
  unsigned long arg2 ;
  
  arg1 = (ArGPS::Data *)jarg1; 
  arg2 = (unsigned long)jarg2; 
  if (arg1) (arg1)->compassMagCounter = arg2;
}


SWIGEXPORT unsigned long SWIGSTDCALL CSharp_ArGPS_Data_compassMagCounter_get(void * jarg1) {
  unsigned long jresult ;
  ArGPS::Data *arg1 = (ArGPS::Data *) 0 ;
  unsigned long result;
  
  arg1 = (ArGPS::Data *)jarg1; 
  result = (unsigned long) ((arg1)->compassMagCounter);
  jresult = (unsigned long)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_ArGPS_Data_compassTrueCounter_set(void * jarg1, unsigned long jarg2) {
  ArGPS::Data *arg1 = (ArGPS::Data *) 0 ;
  unsigned long arg2 ;
  
  arg1 = (ArGPS::Data *)jarg1; 
  arg2 = (unsigned long)jarg2; 
  if (arg1) (arg1)->compassTrueCounter = arg2;
}


SWIGEXPORT unsigned long SWIGSTDCALL CSharp_ArGPS_Data_compassTrueCounter_get(void * jarg1) {
  unsigned long jresult ;
  ArGPS::Data *arg1 = (ArGPS::Data *) 0 ;
  unsigned long result;
  
  arg1 = (ArGPS::Data *)jarg1; 
  result = (unsigned long) ((arg1)->compassTrueCounter);
  jresult = (unsigned long)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_ArGPS_Data_haveHDOP_set(void * jarg1, unsigned int jarg2) {
  ArGPS::Data *arg1 = (ArGPS::Data *) 0 ;
  bool arg2 ;
  
  arg1 = (ArGPS::Data *)jarg1; 
  arg2 = jarg2 ? true : false; 
  if (arg1) (arg1)->haveHDOP = arg2;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_ArGPS_Data_haveHDOP_get(void * jarg1) {
  unsigned int jresult ;
  ArGPS::Data *arg1 = (ArGPS::Data *) 0 ;
  bool result;
  
  arg1 = (ArGPS::Data *)jarg1; 
  result = (bool) ((arg1)->haveHDOP);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_ArGPS_Data_HDOP_set(void * jarg1, double jarg2) {
  ArGPS::Data *arg1 = (ArGPS::Data *) 0 ;
  double arg2 ;
  
  arg1 = (ArGPS::Data *)jarg1; 
  arg2 = (double)jarg2; 
  if (arg1) (arg1)->HDOP = arg2;
}


SWIGEXPORT double SWIGSTDCALL CSharp_ArGPS_Data_HDOP_get(void * jarg1) {
  double jresult ;
  ArGPS::Data *arg1 = (ArGPS::Data *) 0 ;
  double result;
  
  arg1 = (ArGPS::Data *)jarg1; 
  result = (double) ((arg1)->HDOP);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_ArGPS_Data_haveVDOP_set(void * jarg1, unsigned int jarg2) {
  ArGPS::Data *arg1 = (ArGPS::Data *) 0 ;
  bool arg2 ;
  
  arg1 = (ArGPS::Data *)jarg1; 
  arg2 = jarg2 ? true : false; 
  if (arg1) (arg1)->haveVDOP = arg2;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_ArGPS_Data_haveVDOP_get(void * jarg1) {
  unsigned int jresult ;
  ArGPS::Data *arg1 = (ArGPS::Data *) 0 ;
  bool result;
  
  arg1 = (ArGPS::Data *)jarg1; 
  result = (bool) ((arg1)->haveVDOP);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_ArGPS_Data_VDOP_set(void * jarg1, double jarg2) {
  ArGPS::Data *arg1 = (ArGPS::Data *) 0 ;
  double arg2 ;
  
  arg1 = (ArGPS::Data *)jarg1; 
  arg2 = (double)jarg2; 
  if (arg1) (arg1)->VDOP = arg2;
}


SWIGEXPORT double SWIGSTDCALL CSharp_ArGPS_Data_VDOP_get(void * jarg1) {
  double jresult ;
  ArGPS::Data *arg1 = (ArGPS::Data *) 0 ;
  double result;
  
  arg1 = (ArGPS::Data *)jarg1; 
  result = (double) ((arg1)->VDOP);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_ArGPS_Data_havePDOP_set(void * jarg1, unsigned int jarg2) {
  ArGPS::Data *arg1 = (ArGPS::Data *) 0 ;
  bool arg2 ;
  
  arg1 = (ArGPS::Data *)jarg1; 
  arg2 = jarg2 ? true : false; 
  if (arg1) (arg1)->havePDOP = arg2;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_ArGPS_Data_havePDOP_get(void * jarg1) {
  unsigned int jresult ;
  ArGPS::Data *arg1 = (ArGPS::Data *) 0 ;
  bool result;
  
  arg1 = (ArGPS::Data *)jarg1; 
  result = (bool) ((arg1)->havePDOP);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_ArGPS_Data_PDOP_set(void * jarg1, double jarg2) {
  ArGPS::Data *arg1 = (ArGPS::Data *) 0 ;
  double arg2 ;
  
  arg1 = (ArGPS::Data *)jarg1; 
  arg2 = (double)jarg2; 
  if (arg1) (arg1)->PDOP = arg2;
}


SWIGEXPORT double SWIGSTDCALL CSharp_ArGPS_Data_PDOP_get(void * jarg1) {
  double jresult ;
  ArGPS::Data *arg1 = (ArGPS::Data *) 0 ;
  double result;
  
  arg1 = (ArGPS::Data *)jarg1; 
  result = (double) ((arg1)->PDOP);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_ArGPS_Data_qualityFlag_set(void * jarg1, unsigned int jarg2) {
  ArGPS::Data *arg1 = (ArGPS::Data *) 0 ;
  bool arg2 ;
  
  arg1 = (ArGPS::Data *)jarg1; 
  arg2 = jarg2 ? true : false; 
  if (arg1) (arg1)->qualityFlag = arg2;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_ArGPS_Data_qualityFlag_get(void * jarg1) {
  unsigned int jresult ;
  ArGPS::Data *arg1 = (ArGPS::Data *) 0 ;
  bool result;
  
  arg1 = (ArGPS::Data *)jarg1; 
  result = (bool) ((arg1)->qualityFlag);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_ArGPS_Data_meanSNR_set(void * jarg1, double jarg2) {
  ArGPS::Data *arg1 = (ArGPS::Data *) 0 ;
  double arg2 ;
  
  arg1 = (ArGPS::Data *)jarg1; 
  arg2 = (double)jarg2; 
  if (arg1) (arg1)->meanSNR = arg2;
}


SWIGEXPORT double SWIGSTDCALL CSharp_ArGPS_Data_meanSNR_get(void * jarg1) {
  double jresult ;
  ArGPS::Data *arg1 = (ArGPS::Data *) 0 ;
  double result;
  
  arg1 = (ArGPS::Data *)jarg1; 
  result = (double) ((arg1)->meanSNR);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_ArGPS_Data_haveSNR_set(void * jarg1, unsigned int jarg2) {
  ArGPS::Data *arg1 = (ArGPS::Data *) 0 ;
  bool arg2 ;
  
  arg1 = (ArGPS::Data *)jarg1; 
  arg2 = jarg2 ? true : false; 
  if (arg1) (arg1)->haveSNR = arg2;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_ArGPS_Data_haveSNR_get(void * jarg1) {
  unsigned int jresult ;
  ArGPS::Data *arg1 = (ArGPS::Data *) 0 ;
  bool result;
  
  arg1 = (ArGPS::Data *)jarg1; 
  result = (bool) ((arg1)->haveSNR);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_ArGPS_Data_beaconSignalStrength_set(void * jarg1, double jarg2) {
  ArGPS::Data *arg1 = (ArGPS::Data *) 0 ;
  double arg2 ;
  
  arg1 = (ArGPS::Data *)jarg1; 
  arg2 = (double)jarg2; 
  if (arg1) (arg1)->beaconSignalStrength = arg2;
}


SWIGEXPORT double SWIGSTDCALL CSharp_ArGPS_Data_beaconSignalStrength_get(void * jarg1) {
  double jresult ;
  ArGPS::Data *arg1 = (ArGPS::Data *) 0 ;
  double result;
  
  arg1 = (ArGPS::Data *)jarg1; 
  result = (double) ((arg1)->beaconSignalStrength);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_ArGPS_Data_beaconSNR_set(void * jarg1, double jarg2) {
  ArGPS::Data *arg1 = (ArGPS::Data *) 0 ;
  double arg2 ;
  
  arg1 = (ArGPS::Data *)jarg1; 
  arg2 = (double)jarg2; 
  if (arg1) (arg1)->beaconSNR = arg2;
}


SWIGEXPORT double SWIGSTDCALL CSharp_ArGPS_Data_beaconSNR_get(void * jarg1) {
  double jresult ;
  ArGPS::Data *arg1 = (ArGPS::Data *) 0 ;
  double result;
  
  arg1 = (ArGPS::Data *)jarg1; 
  result = (double) ((arg1)->beaconSNR);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_ArGPS_Data_beaconFreq_set(void * jarg1, double jarg2) {
  ArGPS::Data *arg1 = (ArGPS::Data *) 0 ;
  double arg2 ;
  
  arg1 = (ArGPS::Data *)jarg1; 
  arg2 = (double)jarg2; 
  if (arg1) (arg1)->beaconFreq = arg2;
}


SWIGEXPORT double SWIGSTDCALL CSharp_ArGPS_Data_beaconFreq_get(void * jarg1) {
  double jresult ;
  ArGPS::Data *arg1 = (ArGPS::Data *) 0 ;
  double result;
  
  arg1 = (ArGPS::Data *)jarg1; 
  result = (double) ((arg1)->beaconFreq);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_ArGPS_Data_beaconBPS_set(void * jarg1, unsigned short jarg2) {
  ArGPS::Data *arg1 = (ArGPS::Data *) 0 ;
  unsigned short arg2 ;
  
  arg1 = (ArGPS::Data *)jarg1; 
  arg2 = (unsigned short)jarg2; 
  if (arg1) (arg1)->beaconBPS = arg2;
}


SWIGEXPORT unsigned short SWIGSTDCALL CSharp_ArGPS_Data_beaconBPS_get(void * jarg1) {
  unsigned short jresult ;
  ArGPS::Data *arg1 = (ArGPS::Data *) 0 ;
  unsigned short result;
  
  arg1 = (ArGPS::Data *)jarg1; 
  result = (unsigned short) ((arg1)->beaconBPS);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_ArGPS_Data_beaconChannel_set(void * jarg1, unsigned short jarg2) {
  ArGPS::Data *arg1 = (ArGPS::Data *) 0 ;
  unsigned short arg2 ;
  
  arg1 = (ArGPS::Data *)jarg1; 
  arg2 = (unsigned short)jarg2; 
  if (arg1) (arg1)->beaconChannel = arg2;
}


SWIGEXPORT unsigned short SWIGSTDCALL CSharp_ArGPS_Data_beaconChannel_get(void * jarg1) {
  unsigned short jresult ;
  ArGPS::Data *arg1 = (ArGPS::Data *) 0 ;
  unsigned short result;
  
  arg1 = (ArGPS::Data *)jarg1; 
  result = (unsigned short) ((arg1)->beaconChannel);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_ArGPS_Data_haveBeaconInfo_set(void * jarg1, unsigned int jarg2) {
  ArGPS::Data *arg1 = (ArGPS::Data *) 0 ;
  bool arg2 ;
  
  arg1 = (ArGPS::Data *)jarg1; 
  arg2 = jarg2 ? true : false; 
  if (arg1) (arg1)->haveBeaconInfo = arg2;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_ArGPS_Data_haveBeaconInfo_get(void * jarg1) {
  unsigned int jresult ;
  ArGPS::Data *arg1 = (ArGPS::Data *) 0 ;
  bool result;
  
  arg1 = (ArGPS::Data *)jarg1; 
  result = (bool) ((arg1)->haveBeaconInfo);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_ArGPS_Data_inputsRMS_set(void * jarg1, double jarg2) {
  ArGPS::Data *arg1 = (ArGPS::Data *) 0 ;
  double arg2 ;
  
  arg1 = (ArGPS::Data *)jarg1; 
  arg2 = (double)jarg2; 
  if (arg1) (arg1)->inputsRMS = arg2;
}


SWIGEXPORT double SWIGSTDCALL CSharp_ArGPS_Data_inputsRMS_get(void * jarg1) {
  double jresult ;
  ArGPS::Data *arg1 = (ArGPS::Data *) 0 ;
  double result;
  
  arg1 = (ArGPS::Data *)jarg1; 
  result = (double) ((arg1)->inputsRMS);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_ArGPS_Data_haveInputsRMS_set(void * jarg1, unsigned int jarg2) {
  ArGPS::Data *arg1 = (ArGPS::Data *) 0 ;
  bool arg2 ;
  
  arg1 = (ArGPS::Data *)jarg1; 
  arg2 = jarg2 ? true : false; 
  if (arg1) (arg1)->haveInputsRMS = arg2;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_ArGPS_Data_haveInputsRMS_get(void * jarg1) {
  unsigned int jresult ;
  ArGPS::Data *arg1 = (ArGPS::Data *) 0 ;
  bool result;
  
  arg1 = (ArGPS::Data *)jarg1; 
  result = (bool) ((arg1)->haveInputsRMS);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_ArGPS_Data_errorEllipse_set(void * jarg1, void * jarg2) {
  ArGPS::Data *arg1 = (ArGPS::Data *) 0 ;
  ArPose *arg2 = (ArPose *) 0 ;
  
  arg1 = (ArGPS::Data *)jarg1; 
  arg2 = (ArPose *)jarg2; 
  if (arg1) (arg1)->errorEllipse = *arg2;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_ArGPS_Data_errorEllipse_get(void * jarg1) {
  void * jresult ;
  ArGPS::Data *arg1 = (ArGPS::Data *) 0 ;
  ArPose *result = 0 ;
  
  arg1 = (ArGPS::Data *)jarg1; 
  result = (ArPose *)& ((arg1)->errorEllipse);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_ArGPS_Data_haveErrorEllipse_set(void * jarg1, unsigned int jarg2) {
  ArGPS::Data *arg1 = (ArGPS::Data *) 0 ;
  bool arg2 ;
  
  arg1 = (ArGPS::Data *)jarg1; 
  arg2 = jarg2 ? true : false; 
  if (arg1) (arg1)->haveErrorEllipse = arg2;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_ArGPS_Data_haveErrorEllipse_get(void * jarg1) {
  unsigned int jresult ;
  ArGPS::Data *arg1 = (ArGPS::Data *) 0 ;
  bool result;
  
  arg1 = (ArGPS::Data *)jarg1; 
  result = (bool) ((arg1)->haveErrorEllipse);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_ArGPS_Data_latLonError_set(void * jarg1, void * jarg2) {
  ArGPS::Data *arg1 = (ArGPS::Data *) 0 ;
  ArPose *arg2 = (ArPose *) 0 ;
  
  arg1 = (ArGPS::Data *)jarg1; 
  arg2 = (ArPose *)jarg2; 
  if (arg1) (arg1)->latLonError = *arg2;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_ArGPS_Data_latLonError_get(void * jarg1) {
  void * jresult ;
  ArGPS::Data *arg1 = (ArGPS::Data *) 0 ;
  ArPose *result = 0 ;
  
  arg1 = (ArGPS::Data *)jarg1; 
  result = (ArPose *)& ((arg1)->latLonError);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_ArGPS_Data_haveLatLonError_set(void * jarg1, unsigned int jarg2) {
  ArGPS::Data *arg1 = (ArGPS::Data *) 0 ;
  bool arg2 ;
  
  arg1 = (ArGPS::Data *)jarg1; 
  arg2 = jarg2 ? true : false; 
  if (arg1) (arg1)->haveLatLonError = arg2;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_ArGPS_Data_haveLatLonError_get(void * jarg1) {
  unsigned int jresult ;
  ArGPS::Data *arg1 = (ArGPS::Data *) 0 ;
  bool result;
  
  arg1 = (ArGPS::Data *)jarg1; 
  result = (bool) ((arg1)->haveLatLonError);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_ArGPS_Data_altitudeError_set(void * jarg1, double jarg2) {
  ArGPS::Data *arg1 = (ArGPS::Data *) 0 ;
  double arg2 ;
  
  arg1 = (ArGPS::Data *)jarg1; 
  arg2 = (double)jarg2; 
  if (arg1) (arg1)->altitudeError = arg2;
}


SWIGEXPORT double SWIGSTDCALL CSharp_ArGPS_Data_altitudeError_get(void * jarg1) {
  double jresult ;
  ArGPS::Data *arg1 = (ArGPS::Data *) 0 ;
  double result;
  
  arg1 = (ArGPS::Data *)jarg1; 
  result = (double) ((arg1)->altitudeError);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_ArGPS_Data_haveAltitudeError_set(void * jarg1, unsigned int jarg2) {
  ArGPS::Data *arg1 = (ArGPS::Data *) 0 ;
  bool arg2 ;
  
  arg1 = (ArGPS::Data *)jarg1; 
  arg2 = jarg2 ? true : false; 
  if (arg1) (arg1)->haveAltitudeError = arg2;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_ArGPS_Data_haveAltitudeError_get(void * jarg1) {
  unsigned int jresult ;
  ArGPS::Data *arg1 = (ArGPS::Data *) 0 ;
  bool result;
  
  arg1 = (ArGPS::Data *)jarg1; 
  result = (bool) ((arg1)->haveAltitudeError);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_ArGPS_Data(void * jarg1) {
  ArGPS::Data *arg1 = (ArGPS::Data *) 0 ;
  
  arg1 = (ArGPS::Data *)jarg1; 
  delete arg1;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_ArGPS_getCurrentDataRef(void * jarg1) {
  void * jresult ;
  ArGPS *arg1 = (ArGPS *) 0 ;
  ArGPS::Data *result = 0 ;
  
  arg1 = (ArGPS *)jarg1; 
  result = (ArGPS::Data *) &((ArGPS const *)arg1)->getCurrentDataRef();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_ArGPS_getFixType(void * jarg1) {
  int jresult ;
  ArGPS *arg1 = (ArGPS *) 0 ;
  ArGPS::FixType result;
  
  arg1 = (ArGPS *)jarg1; 
  result = (ArGPS::FixType)((ArGPS const *)arg1)->getFixType();
  jresult = (int)result; 
  return jresult;
}


SWIGEXPORT char * SWIGSTDCALL CSharp_ArGPS_getFixTypeName__SWIG_0(void * jarg1) {
  char * jresult ;
  ArGPS *arg1 = (ArGPS *) 0 ;
  char *result = 0 ;
  
  arg1 = (ArGPS *)jarg1; 
  result = (char *)((ArGPS const *)arg1)->getFixTypeName();
  jresult = SWIG_csharp_string_callback((const char *)result); 
  return jresult;
}


SWIGEXPORT char * SWIGSTDCALL CSharp_ArGPS_getFixTypeName__SWIG_1(int jarg1) {
  char * jresult ;
  ArGPS::FixType arg1 ;
  char *result = 0 ;
  
  arg1 = (ArGPS::FixType)jarg1; 
  result = (char *)ArGPS::getFixTypeName(arg1);
  jresult = SWIG_csharp_string_callback((const char *)result); 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_ArGPS_havePosition(void * jarg1) {
  unsigned int jresult ;
  ArGPS *arg1 = (ArGPS *) 0 ;
  bool result;
  
  arg1 = (ArGPS *)jarg1; 
  result = (bool)((ArGPS const *)arg1)->havePosition();
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_ArGPS_haveLatitude(void * jarg1) {
  unsigned int jresult ;
  ArGPS *arg1 = (ArGPS *) 0 ;
  bool result;
  
  arg1 = (ArGPS *)jarg1; 
  result = (bool)((ArGPS const *)arg1)->haveLatitude();
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_ArGPS_haveLongitude(void * jarg1) {
  unsigned int jresult ;
  ArGPS *arg1 = (ArGPS *) 0 ;
  bool result;
  
  arg1 = (ArGPS *)jarg1; 
  result = (bool)((ArGPS const *)arg1)->haveLongitude();
  jresult = result; 
  return jresult;
}


SWIGEXPORT double SWIGSTDCALL CSharp_ArGPS_getLatitude(void * jarg1) {
  double jresult ;
  ArGPS *arg1 = (ArGPS *) 0 ;
  double result;
  
  arg1 = (ArGPS *)jarg1; 
  result = (double)((ArGPS const *)arg1)->getLatitude();
  jresult = result; 
  return jresult;
}


SWIGEXPORT double SWIGSTDCALL CSharp_ArGPS_getLongitude(void * jarg1) {
  double jresult ;
  ArGPS *arg1 = (ArGPS *) 0 ;
  double result;
  
  arg1 = (ArGPS *)jarg1; 
  result = (double)((ArGPS const *)arg1)->getLongitude();
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_ArGPS_getLLA(void * jarg1) {
  void * jresult ;
  ArGPS *arg1 = (ArGPS *) 0 ;
  ArLLACoords result;
  
  arg1 = (ArGPS *)jarg1; 
  result = ((ArGPS const *)arg1)->getLLA();
  jresult = new ArLLACoords((const ArLLACoords &)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_ArGPS_getAsPose(void * jarg1) {
  void * jresult ;
  ArGPS *arg1 = (ArGPS *) 0 ;
  ArPose result;
  
  arg1 = (ArGPS *)jarg1; 
  result = ((ArGPS const *)arg1)->getAsPose();
  jresult = new ArPose((const ArPose &)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_ArGPS_getTimeReceivedPosition(void * jarg1) {
  void * jresult ;
  ArGPS *arg1 = (ArGPS *) 0 ;
  ArTime result;
  
  arg1 = (ArGPS *)jarg1; 
  result = ((ArGPS const *)arg1)->getTimeReceivedPosition();
  jresult = new ArTime((const ArTime &)result); 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_ArGPS_haveSpeed(void * jarg1) {
  unsigned int jresult ;
  ArGPS *arg1 = (ArGPS *) 0 ;
  bool result;
  
  arg1 = (ArGPS *)jarg1; 
  result = (bool)((ArGPS const *)arg1)->haveSpeed();
  jresult = result; 
  return jresult;
}


SWIGEXPORT double SWIGSTDCALL CSharp_ArGPS_getSpeed(void * jarg1) {
  double jresult ;
  ArGPS *arg1 = (ArGPS *) 0 ;
  double result;
  
  arg1 = (ArGPS *)jarg1; 
  result = (double)((ArGPS const *)arg1)->getSpeed();
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_ArGPS_getGPSPositionTimestamp(void * jarg1) {
  void * jresult ;
  ArGPS *arg1 = (ArGPS *) 0 ;
  ArTime result;
  
  arg1 = (ArGPS *)jarg1; 
  result = ((ArGPS const *)arg1)->getGPSPositionTimestamp();
  jresult = new ArTime((const ArTime &)result); 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_ArGPS_getNumSatellitesTracked(void * jarg1) {
  int jresult ;
  ArGPS *arg1 = (ArGPS *) 0 ;
  int result;
  
  arg1 = (ArGPS *)jarg1; 
  result = (int)((ArGPS const *)arg1)->getNumSatellitesTracked();
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_ArGPS_haveDGPSStation(void * jarg1) {
  unsigned int jresult ;
  ArGPS *arg1 = (ArGPS *) 0 ;
  bool result;
  
  arg1 = (ArGPS *)jarg1; 
  result = (bool)((ArGPS const *)arg1)->haveDGPSStation();
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned short SWIGSTDCALL CSharp_ArGPS_getDGPSStationID(void * jarg1) {
  unsigned short jresult ;
  ArGPS *arg1 = (ArGPS *) 0 ;
  unsigned short result;
  
  arg1 = (ArGPS *)jarg1; 
  result = (unsigned short)((ArGPS const *)arg1)->getDGPSStationID();
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_ArGPS_haveGarminPositionError(void * jarg1) {
  unsigned int jresult ;
  ArGPS *arg1 = (ArGPS *) 0 ;
  bool result;
  
  arg1 = (ArGPS *)jarg1; 
  result = (bool)((ArGPS const *)arg1)->haveGarminPositionError();
  jresult = result; 
  return jresult;
}


SWIGEXPORT double SWIGSTDCALL CSharp_ArGPS_getGarminPositionError(void * jarg1) {
  double jresult ;
  ArGPS *arg1 = (ArGPS *) 0 ;
  double result;
  
  arg1 = (ArGPS *)jarg1; 
  result = (double)((ArGPS const *)arg1)->getGarminPositionError();
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_ArGPS_haveGarminVerticalPositionError(void * jarg1) {
  unsigned int jresult ;
  ArGPS *arg1 = (ArGPS *) 0 ;
  bool result;
  
  arg1 = (ArGPS *)jarg1; 
  result = (bool)((ArGPS const *)arg1)->haveGarminVerticalPositionError();
  jresult = result; 
  return jresult;
}


SWIGEXPORT double SWIGSTDCALL CSharp_ArGPS_getGarminVerticalPositionError(void * jarg1) {
  double jresult ;
  ArGPS *arg1 = (ArGPS *) 0 ;
  double result;
  
  arg1 = (ArGPS *)jarg1; 
  result = (double)((ArGPS const *)arg1)->getGarminVerticalPositionError();
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_ArGPS_haveCompassHeadingMag(void * jarg1) {
  unsigned int jresult ;
  ArGPS *arg1 = (ArGPS *) 0 ;
  bool result;
  
  arg1 = (ArGPS *)jarg1; 
  result = (bool)((ArGPS const *)arg1)->haveCompassHeadingMag();
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_ArGPS_haveCompassHeadingTrue(void * jarg1) {
  unsigned int jresult ;
  ArGPS *arg1 = (ArGPS *) 0 ;
  bool result;
  
  arg1 = (ArGPS *)jarg1; 
  result = (bool)((ArGPS const *)arg1)->haveCompassHeadingTrue();
  jresult = result; 
  return jresult;
}


SWIGEXPORT double SWIGSTDCALL CSharp_ArGPS_getCompassHeadingMag(void * jarg1) {
  double jresult ;
  ArGPS *arg1 = (ArGPS *) 0 ;
  double result;
  
  arg1 = (ArGPS *)jarg1; 
  result = (double)((ArGPS const *)arg1)->getCompassHeadingMag();
  jresult = result; 
  return jresult;
}


SWIGEXPORT double SWIGSTDCALL CSharp_ArGPS_getCompassHeadingTrue(void * jarg1) {
  double jresult ;
  ArGPS *arg1 = (ArGPS *) 0 ;
  double result;
  
  arg1 = (ArGPS *)jarg1; 
  result = (double)((ArGPS const *)arg1)->getCompassHeadingTrue();
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_ArGPS_setCompassHeadingMag(void * jarg1, double jarg2) {
  ArGPS *arg1 = (ArGPS *) 0 ;
  double arg2 ;
  
  arg1 = (ArGPS *)jarg1; 
  arg2 = (double)jarg2; 
  (arg1)->setCompassHeadingMag(arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_ArGPS_setCompassHeadingTrue(void * jarg1, double jarg2) {
  ArGPS *arg1 = (ArGPS *) 0 ;
  double arg2 ;
  
  arg1 = (ArGPS *)jarg1; 
  arg2 = (double)jarg2; 
  (arg1)->setCompassHeadingTrue(arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_ArGPS_setCompassHeadingMagWithLock(void * jarg1, double jarg2) {
  ArGPS *arg1 = (ArGPS *) 0 ;
  double arg2 ;
  
  arg1 = (ArGPS *)jarg1; 
  arg2 = (double)jarg2; 
  (arg1)->setCompassHeadingMagWithLock(arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_ArGPS_setCompassHeadingTrueWithLock(void * jarg1, double jarg2) {
  ArGPS *arg1 = (ArGPS *) 0 ;
  double arg2 ;
  
  arg1 = (ArGPS *)jarg1; 
  arg2 = (double)jarg2; 
  (arg1)->setCompassHeadingTrueWithLock(arg2);
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_ArGPS_haveAltitude(void * jarg1) {
  unsigned int jresult ;
  ArGPS *arg1 = (ArGPS *) 0 ;
  bool result;
  
  arg1 = (ArGPS *)jarg1; 
  result = (bool)((ArGPS const *)arg1)->haveAltitude();
  jresult = result; 
  return jresult;
}


SWIGEXPORT double SWIGSTDCALL CSharp_ArGPS_getAltitude(void * jarg1) {
  double jresult ;
  ArGPS *arg1 = (ArGPS *) 0 ;
  double result;
  
  arg1 = (ArGPS *)jarg1; 
  result = (double)((ArGPS const *)arg1)->getAltitude();
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_ArGPS_haveAltimeter(void * jarg1) {
  unsigned int jresult ;
  ArGPS *arg1 = (ArGPS *) 0 ;
  bool result;
  
  arg1 = (ArGPS *)jarg1; 
  result = (bool)((ArGPS const *)arg1)->haveAltimeter();
  jresult = result; 
  return jresult;
}


SWIGEXPORT double SWIGSTDCALL CSharp_ArGPS_getAltimeter(void * jarg1) {
  double jresult ;
  ArGPS *arg1 = (ArGPS *) 0 ;
  double result;
  
  arg1 = (ArGPS *)jarg1; 
  result = (double)((ArGPS const *)arg1)->getAltimeter();
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_ArGPS_haveHDOP(void * jarg1) {
  unsigned int jresult ;
  ArGPS *arg1 = (ArGPS *) 0 ;
  bool result;
  
  arg1 = (ArGPS *)jarg1; 
  result = (bool)((ArGPS const *)arg1)->haveHDOP();
  jresult = result; 
  return jresult;
}


SWIGEXPORT double SWIGSTDCALL CSharp_ArGPS_getHDOP(void * jarg1) {
  double jresult ;
  ArGPS *arg1 = (ArGPS *) 0 ;
  double result;
  
  arg1 = (ArGPS *)jarg1; 
  result = (double)((ArGPS const *)arg1)->getHDOP();
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_ArGPS_haveVDOP(void * jarg1) {
  unsigned int jresult ;
  ArGPS *arg1 = (ArGPS *) 0 ;
  bool result;
  
  arg1 = (ArGPS *)jarg1; 
  result = (bool)((ArGPS const *)arg1)->haveVDOP();
  jresult = result; 
  return jresult;
}


SWIGEXPORT double SWIGSTDCALL CSharp_ArGPS_getVDOP(void * jarg1) {
  double jresult ;
  ArGPS *arg1 = (ArGPS *) 0 ;
  double result;
  
  arg1 = (ArGPS *)jarg1; 
  result = (double)((ArGPS const *)arg1)->getVDOP();
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_ArGPS_havePDOP(void * jarg1) {
  unsigned int jresult ;
  ArGPS *arg1 = (ArGPS *) 0 ;
  bool result;
  
  arg1 = (ArGPS *)jarg1; 
  result = (bool)((ArGPS const *)arg1)->havePDOP();
  jresult = result; 
  return jresult;
}


SWIGEXPORT double SWIGSTDCALL CSharp_ArGPS_getPDOP(void * jarg1) {
  double jresult ;
  ArGPS *arg1 = (ArGPS *) 0 ;
  double result;
  
  arg1 = (ArGPS *)jarg1; 
  result = (double)((ArGPS const *)arg1)->getPDOP();
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_ArGPS_haveSNR(void * jarg1) {
  unsigned int jresult ;
  ArGPS *arg1 = (ArGPS *) 0 ;
  bool result;
  
  arg1 = (ArGPS *)jarg1; 
  result = (bool)((ArGPS const *)arg1)->haveSNR();
  jresult = result; 
  return jresult;
}


SWIGEXPORT double SWIGSTDCALL CSharp_ArGPS_getMeanSNR(void * jarg1) {
  double jresult ;
  ArGPS *arg1 = (ArGPS *) 0 ;
  double result;
  
  arg1 = (ArGPS *)jarg1; 
  result = (double)((ArGPS const *)arg1)->getMeanSNR();
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_ArGPS_haveBeaconInfo(void * jarg1) {
  unsigned int jresult ;
  ArGPS *arg1 = (ArGPS *) 0 ;
  bool result;
  
  arg1 = (ArGPS *)jarg1; 
  result = (bool)((ArGPS const *)arg1)->haveBeaconInfo();
  jresult = result; 
  return jresult;
}


SWIGEXPORT double SWIGSTDCALL CSharp_ArGPS_getBeaconSignalStrength(void * jarg1) {
  double jresult ;
  ArGPS *arg1 = (ArGPS *) 0 ;
  double result;
  
  arg1 = (ArGPS *)jarg1; 
  result = (double)((ArGPS const *)arg1)->getBeaconSignalStrength();
  jresult = result; 
  return jresult;
}


SWIGEXPORT double SWIGSTDCALL CSharp_ArGPS_getBeaconSNR(void * jarg1) {
  double jresult ;
  ArGPS *arg1 = (ArGPS *) 0 ;
  double result;
  
  arg1 = (ArGPS *)jarg1; 
  result = (double)((ArGPS const *)arg1)->getBeaconSNR();
  jresult = result; 
  return jresult;
}


SWIGEXPORT double SWIGSTDCALL CSharp_ArGPS_getBeaconFreq(void * jarg1) {
  double jresult ;
  ArGPS *arg1 = (ArGPS *) 0 ;
  double result;
  
  arg1 = (ArGPS *)jarg1; 
  result = (double)((ArGPS const *)arg1)->getBeaconFreq();
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned short SWIGSTDCALL CSharp_ArGPS_getBecaonBPS(void * jarg1) {
  unsigned short jresult ;
  ArGPS *arg1 = (ArGPS *) 0 ;
  unsigned short result;
  
  arg1 = (ArGPS *)jarg1; 
  result = (unsigned short)((ArGPS const *)arg1)->getBecaonBPS();
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned short SWIGSTDCALL CSharp_ArGPS_getBeaconChannel(void * jarg1) {
  unsigned short jresult ;
  ArGPS *arg1 = (ArGPS *) 0 ;
  unsigned short result;
  
  arg1 = (ArGPS *)jarg1; 
  result = (unsigned short)((ArGPS const *)arg1)->getBeaconChannel();
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_ArGPS_haveErrorEllipse(void * jarg1) {
  unsigned int jresult ;
  ArGPS *arg1 = (ArGPS *) 0 ;
  bool result;
  
  arg1 = (ArGPS *)jarg1; 
  result = (bool)((ArGPS const *)arg1)->haveErrorEllipse();
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_ArGPS_getErrorEllipse(void * jarg1) {
  void * jresult ;
  ArGPS *arg1 = (ArGPS *) 0 ;
  ArPose result;
  
  arg1 = (ArGPS *)jarg1; 
  result = ((ArGPS const *)arg1)->getErrorEllipse();
  jresult = new ArPose((const ArPose &)result); 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_ArGPS_haveLatLonError(void * jarg1) {
  unsigned int jresult ;
  ArGPS *arg1 = (ArGPS *) 0 ;
  bool result;
  
  arg1 = (ArGPS *)jarg1; 
  result = (bool)((ArGPS const *)arg1)->haveLatLonError();
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_ArGPS_getLatLonError(void * jarg1) {
  void * jresult ;
  ArGPS *arg1 = (ArGPS *) 0 ;
  ArPose result;
  
  arg1 = (ArGPS *)jarg1; 
  result = ((ArGPS const *)arg1)->getLatLonError();
  jresult = new ArPose((const ArPose &)result); 
  return jresult;
}


SWIGEXPORT double SWIGSTDCALL CSharp_ArGPS_getLatitudeError(void * jarg1) {
  double jresult ;
  ArGPS *arg1 = (ArGPS *) 0 ;
  double result;
  
  arg1 = (ArGPS *)jarg1; 
  result = (double)((ArGPS const *)arg1)->getLatitudeError();
  jresult = result; 
  return jresult;
}


SWIGEXPORT double SWIGSTDCALL CSharp_ArGPS_getLongitudeError(void * jarg1) {
  double jresult ;
  ArGPS *arg1 = (ArGPS *) 0 ;
  double result;
  
  arg1 = (ArGPS *)jarg1; 
  result = (double)((ArGPS const *)arg1)->getLongitudeError();
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_ArGPS_haveAltitudeError(void * jarg1) {
  unsigned int jresult ;
  ArGPS *arg1 = (ArGPS *) 0 ;
  bool result;
  
  arg1 = (ArGPS *)jarg1; 
  result = (bool)((ArGPS const *)arg1)->haveAltitudeError();
  jresult = result; 
  return jresult;
}


SWIGEXPORT double SWIGSTDCALL CSharp_ArGPS_getAltitudeError(void * jarg1) {
  double jresult ;
  ArGPS *arg1 = (ArGPS *) 0 ;
  double result;
  
  arg1 = (ArGPS *)jarg1; 
  result = (double)((ArGPS const *)arg1)->getAltitudeError();
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_ArGPS_haveInputsRMS(void * jarg1) {
  unsigned int jresult ;
  ArGPS *arg1 = (ArGPS *) 0 ;
  bool result;
  
  arg1 = (ArGPS *)jarg1; 
  result = (bool)((ArGPS const *)arg1)->haveInputsRMS();
  jresult = result; 
  return jresult;
}


SWIGEXPORT double SWIGSTDCALL CSharp_ArGPS_getInputsRMS(void * jarg1) {
  double jresult ;
  ArGPS *arg1 = (ArGPS *) 0 ;
  double result;
  
  arg1 = (ArGPS *)jarg1; 
  result = (double)((ArGPS const *)arg1)->getInputsRMS();
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_ArGPS_addNMEAHandler(void * jarg1, char * jarg2, void * jarg3) {
  ArGPS *arg1 = (ArGPS *) 0 ;
  char *arg2 = (char *) 0 ;
  ArNMEAParser::Handler *arg3 = (ArNMEAParser::Handler *) 0 ;
  
  arg1 = (ArGPS *)jarg1; 
  arg2 = (char *)jarg2; 
  arg3 = (ArNMEAParser::Handler *)jarg3; 
  (arg1)->addNMEAHandler((char const *)arg2,arg3);
}


SWIGEXPORT void SWIGSTDCALL CSharp_ArGPS_removeNMEAHandler(void * jarg1, char * jarg2) {
  ArGPS *arg1 = (ArGPS *) 0 ;
  char *arg2 = (char *) 0 ;
  
  arg1 = (ArGPS *)jarg1; 
  arg2 = (char *)jarg2; 
  (arg1)->removeNMEAHandler((char const *)arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_ArGPS_replaceNMEAHandler(void * jarg1, char * jarg2, void * jarg3) {
  ArGPS *arg1 = (ArGPS *) 0 ;
  char *arg2 = (char *) 0 ;
  ArNMEAParser::Handler *arg3 = (ArNMEAParser::Handler *) 0 ;
  
  arg1 = (ArGPS *)jarg1; 
  arg2 = (char *)jarg2; 
  arg3 = (ArNMEAParser::Handler *)jarg3; 
  (arg1)->replaceNMEAHandler((char const *)arg2,arg3);
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_ArSimulatedGPS__SWIG_0(void * jarg1) {
  void * jresult ;
  ArRobot *arg1 = (ArRobot *) 0 ;
  ArSimulatedGPS *result = 0 ;
  
  arg1 = (ArRobot *)jarg1; 
  result = (ArSimulatedGPS *)new ArSimulatedGPS(arg1);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_ArSimulatedGPS__SWIG_1() {
  void * jresult ;
  ArSimulatedGPS *result = 0 ;
  
  result = (ArSimulatedGPS *)new ArSimulatedGPS();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_ArSimulatedGPS(void * jarg1) {
  ArSimulatedGPS *arg1 = (ArSimulatedGPS *) 0 ;
  
  arg1 = (ArSimulatedGPS *)jarg1; 
  delete arg1;
}


SWIGEXPORT void SWIGSTDCALL CSharp_ArSimulatedGPS_setDummyPosition__SWIG_0(void * jarg1, double jarg2, double jarg3) {
  ArSimulatedGPS *arg1 = (ArSimulatedGPS *) 0 ;
  double arg2 ;
  double arg3 ;
  
  arg1 = (ArSimulatedGPS *)jarg1; 
  arg2 = (double)jarg2; 
  arg3 = (double)jarg3; 
  (arg1)->setDummyPosition(arg2,arg3);
}


SWIGEXPORT void SWIGSTDCALL CSharp_ArSimulatedGPS_clearDummyPosition(void * jarg1) {
  ArSimulatedGPS *arg1 = (ArSimulatedGPS *) 0 ;
  
  arg1 = (ArSimulatedGPS *)jarg1; 
  (arg1)->clearDummyPosition();
}


SWIGEXPORT void SWIGSTDCALL CSharp_ArSimulatedGPS_clearPosition(void * jarg1) {
  ArSimulatedGPS *arg1 = (ArSimulatedGPS *) 0 ;
  
  arg1 = (ArSimulatedGPS *)jarg1; 
  (arg1)->clearPosition();
}


SWIGEXPORT void SWIGSTDCALL CSharp_ArSimulatedGPS_setDummyPosition__SWIG_1(void * jarg1, double jarg2, double jarg3, double jarg4) {
  ArSimulatedGPS *arg1 = (ArSimulatedGPS *) 0 ;
  double arg2 ;
  double arg3 ;
  double arg4 ;
  
  arg1 = (ArSimulatedGPS *)jarg1; 
  arg2 = (double)jarg2; 
  arg3 = (double)jarg3; 
  arg4 = (double)jarg4; 
  (arg1)->setDummyPosition(arg2,arg3,arg4);
}


SWIGEXPORT void SWIGSTDCALL CSharp_ArSimulatedGPS_setDummyPosition__SWIG_2(void * jarg1, void * jarg2) {
  ArSimulatedGPS *arg1 = (ArSimulatedGPS *) 0 ;
  ArArgumentBuilder *arg2 = (ArArgumentBuilder *) 0 ;
  
  arg1 = (ArSimulatedGPS *)jarg1; 
  arg2 = (ArArgumentBuilder *)jarg2; 
  (arg1)->setDummyPosition(arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_ArSimulatedGPS_setDummyPositionFromArgs(void * jarg1, void * jarg2) {
  ArSimulatedGPS *arg1 = (ArSimulatedGPS *) 0 ;
  ArArgumentBuilder *arg2 = (ArArgumentBuilder *) 0 ;
  
  arg1 = (ArSimulatedGPS *)jarg1; 
  arg2 = (ArArgumentBuilder *)jarg2; 
  (arg1)->setDummyPositionFromArgs(arg2);
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_ArSimulatedGPS_connect__SWIG_0(void * jarg1, unsigned long jarg2) {
  unsigned int jresult ;
  ArSimulatedGPS *arg1 = (ArSimulatedGPS *) 0 ;
  unsigned long arg2 ;
  bool result;
  
  arg1 = (ArSimulatedGPS *)jarg1; 
  arg2 = (unsigned long)jarg2; 
  result = (bool)(arg1)->connect(arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_ArSimulatedGPS_connect__SWIG_1(void * jarg1) {
  unsigned int jresult ;
  ArSimulatedGPS *arg1 = (ArSimulatedGPS *) 0 ;
  bool result;
  
  arg1 = (ArSimulatedGPS *)jarg1; 
  result = (bool)(arg1)->connect();
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_ArSimulatedGPS_initDevice(void * jarg1) {
  unsigned int jresult ;
  ArSimulatedGPS *arg1 = (ArSimulatedGPS *) 0 ;
  bool result;
  
  arg1 = (ArSimulatedGPS *)jarg1; 
  result = (bool)(arg1)->initDevice();
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_ArSimulatedGPS_read__SWIG_0(void * jarg1, unsigned long jarg2) {
  int jresult ;
  ArSimulatedGPS *arg1 = (ArSimulatedGPS *) 0 ;
  unsigned long arg2 ;
  int result;
  
  arg1 = (ArSimulatedGPS *)jarg1; 
  arg2 = (unsigned long)jarg2; 
  result = (int)(arg1)->read(arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_ArSimulatedGPS_read__SWIG_1(void * jarg1) {
  int jresult ;
  ArSimulatedGPS *arg1 = (ArSimulatedGPS *) 0 ;
  int result;
  
  arg1 = (ArSimulatedGPS *)jarg1; 
  result = (int)(arg1)->read();
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_ArGPSCoordConverter__SWIG_0(void * jarg1) {
  void * jresult ;
  ArGPS *arg1 = (ArGPS *) 0 ;
  ArGPSCoordConverter *result = 0 ;
  
  arg1 = (ArGPS *)jarg1; 
  result = (ArGPSCoordConverter *)new ArGPSCoordConverter(arg1);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_ArGPSCoordConverter__SWIG_1() {
  void * jresult ;
  ArGPSCoordConverter *result = 0 ;
  
  result = (ArGPSCoordConverter *)new ArGPSCoordConverter();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_ArGPSCoordConverter__SWIG_2(void * jarg1, void * jarg2, void * jarg3, void * jarg4) {
  void * jresult ;
  double *arg1 = 0 ;
  double *arg2 = 0 ;
  double *arg3 = 0 ;
  ArGPS *arg4 = (ArGPS *) 0 ;
  ArGPSCoordConverter *result = 0 ;
  
  arg1 = (double *)jarg1;
  if (!arg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "double & type is null", 0);
    return 0;
  } 
  arg2 = (double *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "double & type is null", 0);
    return 0;
  } 
  arg3 = (double *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "double & type is null", 0);
    return 0;
  } 
  arg4 = (ArGPS *)jarg4; 
  result = (ArGPSCoordConverter *)new ArGPSCoordConverter(*arg1,*arg2,*arg3,arg4);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_ArGPSCoordConverter__SWIG_3(void * jarg1, void * jarg2, void * jarg3) {
  void * jresult ;
  double *arg1 = 0 ;
  double *arg2 = 0 ;
  double *arg3 = 0 ;
  ArGPSCoordConverter *result = 0 ;
  
  arg1 = (double *)jarg1;
  if (!arg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "double & type is null", 0);
    return 0;
  } 
  arg2 = (double *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "double & type is null", 0);
    return 0;
  } 
  arg3 = (double *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "double & type is null", 0);
    return 0;
  } 
  result = (ArGPSCoordConverter *)new ArGPSCoordConverter(*arg1,*arg2,*arg3);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_ArGPSCoordConverter__SWIG_4(void * jarg1, void * jarg2) {
  void * jresult ;
  ArLLACoords *arg1 = 0 ;
  ArGPS *arg2 = (ArGPS *) 0 ;
  ArGPSCoordConverter *result = 0 ;
  
  arg1 = (ArLLACoords *)jarg1;
  if (!arg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "ArLLACoords & type is null", 0);
    return 0;
  } 
  arg2 = (ArGPS *)jarg2; 
  result = (ArGPSCoordConverter *)new ArGPSCoordConverter(*arg1,arg2);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_ArGPSCoordConverter_convert__SWIG_0(void * jarg1, void * jarg2) {
  void * jresult ;
  ArGPSCoordConverter *arg1 = (ArGPSCoordConverter *) 0 ;
  ArLLACoords *arg2 = 0 ;
  Ar3DPoint result;
  
  arg1 = (ArGPSCoordConverter *)jarg1; 
  arg2 = (ArLLACoords *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "ArLLACoords const & type is null", 0);
    return 0;
  } 
  result = (arg1)->convert((ArLLACoords const &)*arg2);
  jresult = new Ar3DPoint((const Ar3DPoint &)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_ArGPSCoordConverter_convert__SWIG_1(void * jarg1, void * jarg2, void * jarg3, void * jarg4) {
  void * jresult ;
  ArGPSCoordConverter *arg1 = (ArGPSCoordConverter *) 0 ;
  double *arg2 = 0 ;
  double *arg3 = 0 ;
  double *arg4 = 0 ;
  Ar3DPoint result;
  
  arg1 = (ArGPSCoordConverter *)jarg1; 
  arg2 = (double *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "double & type is null", 0);
    return 0;
  } 
  arg3 = (double *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "double & type is null", 0);
    return 0;
  } 
  arg4 = (double *)jarg4;
  if (!arg4) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "double & type is null", 0);
    return 0;
  } 
  result = (arg1)->convert(*arg2,*arg3,*arg4);
  jresult = new Ar3DPoint((const Ar3DPoint &)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_ArGPSCoordConverter_getCurrent(void * jarg1) {
  void * jresult ;
  ArGPSCoordConverter *arg1 = (ArGPSCoordConverter *) 0 ;
  Ar3DPoint result;
  
  arg1 = (ArGPSCoordConverter *)jarg1; 
  result = (arg1)->getCurrent();
  jresult = new Ar3DPoint((const Ar3DPoint &)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_ArGPSCoordConverter_getCurrentFunc(void * jarg1) {
  void * jresult ;
  ArGPSCoordConverter *arg1 = (ArGPSCoordConverter *) 0 ;
  ArRetFunctor< Ar3DPoint > *result = 0 ;
  
  arg1 = (ArGPSCoordConverter *)jarg1; 
  result = (ArRetFunctor< Ar3DPoint > *)(arg1)->getCurrentFunc();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_ArGPSCoordConverter_getCurrent2DPose(void * jarg1) {
  void * jresult ;
  ArGPSCoordConverter *arg1 = (ArGPSCoordConverter *) 0 ;
  ArPose result;
  
  arg1 = (ArGPSCoordConverter *)jarg1; 
  result = (arg1)->getCurrent2DPose();
  jresult = new ArPose((const ArPose &)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_ArGPSCoordConverter_getCurrent2DPoseFunc(void * jarg1) {
  void * jresult ;
  ArGPSCoordConverter *arg1 = (ArGPSCoordConverter *) 0 ;
  ArRetFunctor< ArPose > *result = 0 ;
  
  arg1 = (ArGPSCoordConverter *)jarg1; 
  result = (ArRetFunctor< ArPose > *)(arg1)->getCurrent2DPoseFunc();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_ArGPSCoordConverter(void * jarg1) {
  ArGPSCoordConverter *arg1 = (ArGPSCoordConverter *) 0 ;
  
  arg1 = (ArGPSCoordConverter *)jarg1; 
  delete arg1;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_ArGPSConnector(void * jarg1) {
  void * jresult ;
  ArArgumentParser *arg1 = (ArArgumentParser *) 0 ;
  ArGPSConnector *result = 0 ;
  
  arg1 = (ArArgumentParser *)jarg1; 
  result = (ArGPSConnector *)new ArGPSConnector(arg1);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_ArGPSConnector(void * jarg1) {
  ArGPSConnector *arg1 = (ArGPSConnector *) 0 ;
  
  arg1 = (ArGPSConnector *)jarg1; 
  delete arg1;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_ArGPSConnector_parseArgs(void * jarg1) {
  unsigned int jresult ;
  ArGPSConnector *arg1 = (ArGPSConnector *) 0 ;
  bool result;
  
  arg1 = (ArGPSConnector *)jarg1; 
  result = (bool)(arg1)->parseArgs();
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_ArGPSConnector_createGPS__SWIG_0(void * jarg1, void * jarg2) {
  void * jresult ;
  ArGPSConnector *arg1 = (ArGPSConnector *) 0 ;
  ArRobot *arg2 = (ArRobot *) 0 ;
  ArGPS *result = 0 ;
  
  arg1 = (ArGPSConnector *)jarg1; 
  arg2 = (ArRobot *)jarg2; 
  result = (ArGPS *)(arg1)->createGPS(arg2);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_ArGPSConnector_createGPS__SWIG_1(void * jarg1) {
  void * jresult ;
  ArGPSConnector *arg1 = (ArGPSConnector *) 0 ;
  ArGPS *result = 0 ;
  
  arg1 = (ArGPSConnector *)jarg1; 
  result = (ArGPS *)(arg1)->createGPS();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_ArGPSConnector_create__SWIG_0(void * jarg1, void * jarg2) {
  void * jresult ;
  ArGPSConnector *arg1 = (ArGPSConnector *) 0 ;
  ArRobot *arg2 = (ArRobot *) 0 ;
  ArGPS *result = 0 ;
  
  arg1 = (ArGPSConnector *)jarg1; 
  arg2 = (ArRobot *)jarg2; 
  result = (ArGPS *)(arg1)->create(arg2);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_ArGPSConnector_create__SWIG_1(void * jarg1) {
  void * jresult ;
  ArGPSConnector *arg1 = (ArGPSConnector *) 0 ;
  ArGPS *result = 0 ;
  
  arg1 = (ArGPSConnector *)jarg1; 
  result = (ArGPS *)(arg1)->create();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_ArGPSConnector_getGPSType(void * jarg1) {
  int jresult ;
  ArGPSConnector *arg1 = (ArGPSConnector *) 0 ;
  ArGPSConnector::GPSType result;
  
  arg1 = (ArGPSConnector *)jarg1; 
  result = (ArGPSConnector::GPSType)((ArGPSConnector const *)arg1)->getGPSType();
  jresult = (int)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_Ar3DPoint__SWIG_0() {
  void * jresult ;
  Ar3DPoint *result = 0 ;
  
  result = (Ar3DPoint *)new Ar3DPoint();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_Ar3DPoint__SWIG_1(double jarg1, double jarg2, double jarg3) {
  void * jresult ;
  double arg1 ;
  double arg2 ;
  double arg3 ;
  Ar3DPoint *result = 0 ;
  
  arg1 = (double)jarg1; 
  arg2 = (double)jarg2; 
  arg3 = (double)jarg3; 
  result = (Ar3DPoint *)new Ar3DPoint(arg1,arg2,arg3);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_Ar3DPoint(void * jarg1) {
  Ar3DPoint *arg1 = (Ar3DPoint *) 0 ;
  
  arg1 = (Ar3DPoint *)jarg1; 
  delete arg1;
}


SWIGEXPORT double SWIGSTDCALL CSharp_Ar3DPoint_dot(void * jarg1, void * jarg2) {
  double jresult ;
  Ar3DPoint *arg1 = (Ar3DPoint *) 0 ;
  Ar3DPoint arg2 ;
  Ar3DPoint *argp2 ;
  double result;
  
  arg1 = (Ar3DPoint *)jarg1; 
  argp2 = (Ar3DPoint *)jarg2; 
  if (!argp2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Attempt to dereference null Ar3DPoint", 0);
    return 0;
  }
  arg2 = *argp2; 
  result = (double)(arg1)->dot(arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Ar3DPoint_cross(void * jarg1, void * jarg2) {
  void * jresult ;
  Ar3DPoint *arg1 = (Ar3DPoint *) 0 ;
  Ar3DPoint arg2 ;
  Ar3DPoint *argp2 ;
  Ar3DPoint result;
  
  arg1 = (Ar3DPoint *)jarg1; 
  argp2 = (Ar3DPoint *)jarg2; 
  if (!argp2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Attempt to dereference null Ar3DPoint", 0);
    return 0;
  }
  arg2 = *argp2; 
  result = (arg1)->cross(arg2);
  jresult = new Ar3DPoint((const Ar3DPoint &)result); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_Ar3DPoint_print__SWIG_0(void * jarg1, char * jarg2) {
  Ar3DPoint *arg1 = (Ar3DPoint *) 0 ;
  char *arg2 = (char *) 0 ;
  
  arg1 = (Ar3DPoint *)jarg1; 
  arg2 = (char *)jarg2; 
  (arg1)->print((char const *)arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_Ar3DPoint_print__SWIG_1(void * jarg1) {
  Ar3DPoint *arg1 = (Ar3DPoint *) 0 ;
  
  arg1 = (Ar3DPoint *)jarg1; 
  (arg1)->print();
}


SWIGEXPORT double SWIGSTDCALL CSharp_Ar3DPoint_getX(void * jarg1) {
  double jresult ;
  Ar3DPoint *arg1 = (Ar3DPoint *) 0 ;
  double result;
  
  arg1 = (Ar3DPoint *)jarg1; 
  result = (double)((Ar3DPoint const *)arg1)->getX();
  jresult = result; 
  return jresult;
}


SWIGEXPORT double SWIGSTDCALL CSharp_Ar3DPoint_getY(void * jarg1) {
  double jresult ;
  Ar3DPoint *arg1 = (Ar3DPoint *) 0 ;
  double result;
  
  arg1 = (Ar3DPoint *)jarg1; 
  result = (double)((Ar3DPoint const *)arg1)->getY();
  jresult = result; 
  return jresult;
}


SWIGEXPORT double SWIGSTDCALL CSharp_Ar3DPoint_getZ(void * jarg1) {
  double jresult ;
  Ar3DPoint *arg1 = (Ar3DPoint *) 0 ;
  double result;
  
  arg1 = (Ar3DPoint *)jarg1; 
  result = (double)((Ar3DPoint const *)arg1)->getZ();
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_Ar3DPoint_setX(void * jarg1, double jarg2) {
  Ar3DPoint *arg1 = (Ar3DPoint *) 0 ;
  double arg2 ;
  
  arg1 = (Ar3DPoint *)jarg1; 
  arg2 = (double)jarg2; 
  (arg1)->setX(arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_Ar3DPoint_setY(void * jarg1, double jarg2) {
  Ar3DPoint *arg1 = (Ar3DPoint *) 0 ;
  double arg2 ;
  
  arg1 = (Ar3DPoint *)jarg1; 
  arg2 = (double)jarg2; 
  (arg1)->setY(arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_Ar3DPoint_setZ(void * jarg1, double jarg2) {
  Ar3DPoint *arg1 = (Ar3DPoint *) 0 ;
  double arg2 ;
  
  arg1 = (Ar3DPoint *)jarg1; 
  arg2 = (double)jarg2; 
  (arg1)->setZ(arg2);
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_ArWGS84() {
  void * jresult ;
  ArWGS84 *result = 0 ;
  
  result = (ArWGS84 *)new ArWGS84();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT double SWIGSTDCALL CSharp_ArWGS84_getE() {
  double jresult ;
  double result;
  
  result = (double)ArWGS84::getE();
  jresult = result; 
  return jresult;
}


SWIGEXPORT double SWIGSTDCALL CSharp_ArWGS84_getA() {
  double jresult ;
  double result;
  
  result = (double)ArWGS84::getA();
  jresult = result; 
  return jresult;
}


SWIGEXPORT double SWIGSTDCALL CSharp_ArWGS84_getB() {
  double jresult ;
  double result;
  
  result = (double)ArWGS84::getB();
  jresult = result; 
  return jresult;
}


SWIGEXPORT double SWIGSTDCALL CSharp_ArWGS84_getEP() {
  double jresult ;
  double result;
  
  result = (double)ArWGS84::getEP();
  jresult = result; 
  return jresult;
}


SWIGEXPORT double SWIGSTDCALL CSharp_ArWGS84_get1byf() {
  double jresult ;
  double result;
  
  result = (double)ArWGS84::get1byf();
  jresult = result; 
  return jresult;
}


SWIGEXPORT double SWIGSTDCALL CSharp_ArWGS84_getOmega() {
  double jresult ;
  double result;
  
  result = (double)ArWGS84::getOmega();
  jresult = result; 
  return jresult;
}


SWIGEXPORT double SWIGSTDCALL CSharp_ArWGS84_getGM() {
  double jresult ;
  double result;
  
  result = (double)ArWGS84::getGM();
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_ArWGS84(void * jarg1) {
  ArWGS84 *arg1 = (ArWGS84 *) 0 ;
  
  arg1 = (ArWGS84 *)jarg1; 
  delete arg1;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_ArECEFCoords(double jarg1, double jarg2, double jarg3) {
  void * jresult ;
  double arg1 ;
  double arg2 ;
  double arg3 ;
  ArECEFCoords *result = 0 ;
  
  arg1 = (double)jarg1; 
  arg2 = (double)jarg2; 
  arg3 = (double)jarg3; 
  result = (ArECEFCoords *)new ArECEFCoords(arg1,arg2,arg3);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_ArECEFCoords_ECEF2LLA(void * jarg1) {
  void * jresult ;
  ArECEFCoords *arg1 = (ArECEFCoords *) 0 ;
  ArLLACoords result;
  
  arg1 = (ArECEFCoords *)jarg1; 
  result = (arg1)->ECEF2LLA();
  jresult = new ArLLACoords((const ArLLACoords &)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_ArECEFCoords_ECEF2ENU(void * jarg1, void * jarg2) {
  void * jresult ;
  ArECEFCoords *arg1 = (ArECEFCoords *) 0 ;
  SwigValueWrapper< ArECEFCoords > arg2 ;
  ArECEFCoords *argp2 ;
  SwigValueWrapper< ArENUCoords > result;
  
  arg1 = (ArECEFCoords *)jarg1; 
  argp2 = (ArECEFCoords *)jarg2; 
  if (!argp2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Attempt to dereference null ArECEFCoords", 0);
    return 0;
  }
  arg2 = *argp2; 
  result = (arg1)->ECEF2ENU(arg2);
  jresult = new ArENUCoords((const ArENUCoords &)result); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_ArECEFCoords(void * jarg1) {
  ArECEFCoords *arg1 = (ArECEFCoords *) 0 ;
  
  arg1 = (ArECEFCoords *)jarg1; 
  delete arg1;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_ArLLACoords__SWIG_0() {
  void * jresult ;
  ArLLACoords *result = 0 ;
  
  result = (ArLLACoords *)new ArLLACoords();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_ArLLACoords__SWIG_1(double jarg1, double jarg2, double jarg3) {
  void * jresult ;
  double arg1 ;
  double arg2 ;
  double arg3 ;
  ArLLACoords *result = 0 ;
  
  arg1 = (double)jarg1; 
  arg2 = (double)jarg2; 
  arg3 = (double)jarg3; 
  result = (ArLLACoords *)new ArLLACoords(arg1,arg2,arg3);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_ArLLACoords__SWIG_2(void * jarg1, double jarg2) {
  void * jresult ;
  ArPose arg1 ;
  double arg2 ;
  ArPose *argp1 ;
  ArLLACoords *result = 0 ;
  
  argp1 = (ArPose *)jarg1; 
  if (!argp1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Attempt to dereference null ArPose", 0);
    return 0;
  }
  arg1 = *argp1; 
  arg2 = (double)jarg2; 
  result = (ArLLACoords *)new ArLLACoords(arg1,arg2);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_ArLLACoords_LLA2ECEF(void * jarg1) {
  void * jresult ;
  ArLLACoords *arg1 = (ArLLACoords *) 0 ;
  SwigValueWrapper< ArECEFCoords > result;
  
  arg1 = (ArLLACoords *)jarg1; 
  result = (arg1)->LLA2ECEF();
  jresult = new ArECEFCoords((const ArECEFCoords &)result); 
  return jresult;
}


SWIGEXPORT double SWIGSTDCALL CSharp_ArLLACoords_getLatitude(void * jarg1) {
  double jresult ;
  ArLLACoords *arg1 = (ArLLACoords *) 0 ;
  double result;
  
  arg1 = (ArLLACoords *)jarg1; 
  result = (double)((ArLLACoords const *)arg1)->getLatitude();
  jresult = result; 
  return jresult;
}


SWIGEXPORT double SWIGSTDCALL CSharp_ArLLACoords_getLongitude(void * jarg1) {
  double jresult ;
  ArLLACoords *arg1 = (ArLLACoords *) 0 ;
  double result;
  
  arg1 = (ArLLACoords *)jarg1; 
  result = (double)((ArLLACoords const *)arg1)->getLongitude();
  jresult = result; 
  return jresult;
}


SWIGEXPORT double SWIGSTDCALL CSharp_ArLLACoords_getAltitude(void * jarg1) {
  double jresult ;
  ArLLACoords *arg1 = (ArLLACoords *) 0 ;
  double result;
  
  arg1 = (ArLLACoords *)jarg1; 
  result = (double)((ArLLACoords const *)arg1)->getAltitude();
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_ArLLACoords_setLatitude(void * jarg1, double jarg2) {
  ArLLACoords *arg1 = (ArLLACoords *) 0 ;
  double arg2 ;
  
  arg1 = (ArLLACoords *)jarg1; 
  arg2 = (double)jarg2; 
  (arg1)->setLatitude(arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_ArLLACoords_setLongitude(void * jarg1, double jarg2) {
  ArLLACoords *arg1 = (ArLLACoords *) 0 ;
  double arg2 ;
  
  arg1 = (ArLLACoords *)jarg1; 
  arg2 = (double)jarg2; 
  (arg1)->setLongitude(arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_ArLLACoords_setAltitude(void * jarg1, double jarg2) {
  ArLLACoords *arg1 = (ArLLACoords *) 0 ;
  double arg2 ;
  
  arg1 = (ArLLACoords *)jarg1; 
  arg2 = (double)jarg2; 
  (arg1)->setAltitude(arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_ArLLACoords(void * jarg1) {
  ArLLACoords *arg1 = (ArLLACoords *) 0 ;
  
  arg1 = (ArLLACoords *)jarg1; 
  delete arg1;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_ArENUCoords(double jarg1, double jarg2, double jarg3) {
  void * jresult ;
  double arg1 ;
  double arg2 ;
  double arg3 ;
  ArENUCoords *result = 0 ;
  
  arg1 = (double)jarg1; 
  arg2 = (double)jarg2; 
  arg3 = (double)jarg3; 
  result = (ArENUCoords *)new ArENUCoords(arg1,arg2,arg3);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_ArENUCoords_ENU2ECEF(void * jarg1, void * jarg2) {
  void * jresult ;
  ArENUCoords *arg1 = (ArENUCoords *) 0 ;
  ArLLACoords arg2 ;
  ArLLACoords *argp2 ;
  SwigValueWrapper< ArECEFCoords > result;
  
  arg1 = (ArENUCoords *)jarg1; 
  argp2 = (ArLLACoords *)jarg2; 
  if (!argp2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Attempt to dereference null ArLLACoords", 0);
    return 0;
  }
  arg2 = *argp2; 
  result = (arg1)->ENU2ECEF(arg2);
  jresult = new ArECEFCoords((const ArECEFCoords &)result); 
  return jresult;
}


SWIGEXPORT double SWIGSTDCALL CSharp_ArENUCoords_getEast(void * jarg1) {
  double jresult ;
  ArENUCoords *arg1 = (ArENUCoords *) 0 ;
  double result;
  
  arg1 = (ArENUCoords *)jarg1; 
  result = (double)((ArENUCoords const *)arg1)->getEast();
  jresult = result; 
  return jresult;
}


SWIGEXPORT double SWIGSTDCALL CSharp_ArENUCoords_getNorth(void * jarg1) {
  double jresult ;
  ArENUCoords *arg1 = (ArENUCoords *) 0 ;
  double result;
  
  arg1 = (ArENUCoords *)jarg1; 
  result = (double)((ArENUCoords const *)arg1)->getNorth();
  jresult = result; 
  return jresult;
}


SWIGEXPORT double SWIGSTDCALL CSharp_ArENUCoords_getUp(void * jarg1) {
  double jresult ;
  ArENUCoords *arg1 = (ArENUCoords *) 0 ;
  double result;
  
  arg1 = (ArENUCoords *)jarg1; 
  result = (double)((ArENUCoords const *)arg1)->getUp();
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_ArENUCoords_setEast(void * jarg1, double jarg2) {
  ArENUCoords *arg1 = (ArENUCoords *) 0 ;
  double arg2 ;
  
  arg1 = (ArENUCoords *)jarg1; 
  arg2 = (double)jarg2; 
  (arg1)->setEast(arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_ArENUCoords_setNorth(void * jarg1, double jarg2) {
  ArENUCoords *arg1 = (ArENUCoords *) 0 ;
  double arg2 ;
  
  arg1 = (ArENUCoords *)jarg1; 
  arg2 = (double)jarg2; 
  (arg1)->setNorth(arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_ArENUCoords_setUp(void * jarg1, double jarg2) {
  ArENUCoords *arg1 = (ArENUCoords *) 0 ;
  double arg2 ;
  
  arg1 = (ArENUCoords *)jarg1; 
  arg2 = (double)jarg2; 
  (arg1)->setUp(arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_ArENUCoords(void * jarg1) {
  ArENUCoords *arg1 = (ArENUCoords *) 0 ;
  
  arg1 = (ArENUCoords *)jarg1; 
  delete arg1;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_ArMapGPSCoords__SWIG_0(void * jarg1) {
  void * jresult ;
  ArLLACoords arg1 ;
  ArLLACoords *argp1 ;
  ArMapGPSCoords *result = 0 ;
  
  argp1 = (ArLLACoords *)jarg1; 
  if (!argp1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Attempt to dereference null ArLLACoords", 0);
    return 0;
  }
  arg1 = *argp1; 
  result = (ArMapGPSCoords *)new ArMapGPSCoords(arg1);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_ArMapGPSCoords__SWIG_1() {
  void * jresult ;
  ArMapGPSCoords *result = 0 ;
  
  result = (ArMapGPSCoords *)new ArMapGPSCoords();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_ArMapGPSCoords_convertMap2LLACoords(void * jarg1, double jarg2, double jarg3, double jarg4, void * jarg5, void * jarg6, void * jarg7) {
  unsigned int jresult ;
  ArMapGPSCoords *arg1 = (ArMapGPSCoords *) 0 ;
  double arg2 ;
  double arg3 ;
  double arg4 ;
  double *arg5 = 0 ;
  double *arg6 = 0 ;
  double *arg7 = 0 ;
  bool result;
  
  arg1 = (ArMapGPSCoords *)jarg1; 
  arg2 = (double)jarg2; 
  arg3 = (double)jarg3; 
  arg4 = (double)jarg4; 
  arg5 = (double *)jarg5;
  if (!arg5) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "double & type is null", 0);
    return 0;
  } 
  arg6 = (double *)jarg6;
  if (!arg6) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "double & type is null", 0);
    return 0;
  } 
  arg7 = (double *)jarg7;
  if (!arg7) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "double & type is null", 0);
    return 0;
  } 
  result = (bool)((ArMapGPSCoords const *)arg1)->convertMap2LLACoords(arg2,arg3,arg4,*arg5,*arg6,*arg7);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_ArMapGPSCoords_convertLLA2MapCoords__SWIG_0(void * jarg1, double jarg2, double jarg3, double jarg4, void * jarg5, void * jarg6, void * jarg7) {
  unsigned int jresult ;
  ArMapGPSCoords *arg1 = (ArMapGPSCoords *) 0 ;
  double arg2 ;
  double arg3 ;
  double arg4 ;
  double *arg5 = 0 ;
  double *arg6 = 0 ;
  double *arg7 = 0 ;
  bool result;
  
  arg1 = (ArMapGPSCoords *)jarg1; 
  arg2 = (double)jarg2; 
  arg3 = (double)jarg3; 
  arg4 = (double)jarg4; 
  arg5 = (double *)jarg5;
  if (!arg5) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "double & type is null", 0);
    return 0;
  } 
  arg6 = (double *)jarg6;
  if (!arg6) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "double & type is null", 0);
    return 0;
  } 
  arg7 = (double *)jarg7;
  if (!arg7) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "double & type is null", 0);
    return 0;
  } 
  result = (bool)((ArMapGPSCoords const *)arg1)->convertLLA2MapCoords(arg2,arg3,arg4,*arg5,*arg6,*arg7);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_ArMapGPSCoords_convertLLA2MapCoords__SWIG_1(void * jarg1, void * jarg2, void * jarg3, void * jarg4, void * jarg5) {
  unsigned int jresult ;
  ArMapGPSCoords *arg1 = (ArMapGPSCoords *) 0 ;
  ArLLACoords *arg2 = 0 ;
  double *arg3 = 0 ;
  double *arg4 = 0 ;
  double *arg5 = 0 ;
  bool result;
  
  arg1 = (ArMapGPSCoords *)jarg1; 
  arg2 = (ArLLACoords *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "ArLLACoords const & type is null", 0);
    return 0;
  } 
  arg3 = (double *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "double & type is null", 0);
    return 0;
  } 
  arg4 = (double *)jarg4;
  if (!arg4) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "double & type is null", 0);
    return 0;
  } 
  arg5 = (double *)jarg5;
  if (!arg5) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "double & type is null", 0);
    return 0;
  } 
  result = (bool)(arg1)->convertLLA2MapCoords((ArLLACoords const &)*arg2,*arg3,*arg4,*arg5);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_ArMapGPSCoords_setOrigin(void * jarg1, void * jarg2) {
  ArMapGPSCoords *arg1 = (ArMapGPSCoords *) 0 ;
  ArLLACoords arg2 ;
  ArLLACoords *argp2 ;
  
  arg1 = (ArMapGPSCoords *)jarg1; 
  argp2 = (ArLLACoords *)jarg2; 
  if (!argp2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Attempt to dereference null ArLLACoords", 0);
    return ;
  }
  arg2 = *argp2; 
  (arg1)->setOrigin(arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_ArMapGPSCoords_myOriginECEF_set(void * jarg1, void * jarg2) {
  ArMapGPSCoords *arg1 = (ArMapGPSCoords *) 0 ;
  ArECEFCoords *arg2 = (ArECEFCoords *) 0 ;
  
  arg1 = (ArMapGPSCoords *)jarg1; 
  arg2 = (ArECEFCoords *)jarg2; 
  if (arg1) (arg1)->myOriginECEF = arg2;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_ArMapGPSCoords_myOriginECEF_get(void * jarg1) {
  void * jresult ;
  ArMapGPSCoords *arg1 = (ArMapGPSCoords *) 0 ;
  ArECEFCoords *result = 0 ;
  
  arg1 = (ArMapGPSCoords *)jarg1; 
  result = (ArECEFCoords *) ((arg1)->myOriginECEF);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_ArMapGPSCoords_myOriginLLA_set(void * jarg1, void * jarg2) {
  ArMapGPSCoords *arg1 = (ArMapGPSCoords *) 0 ;
  ArLLACoords *arg2 = (ArLLACoords *) 0 ;
  
  arg1 = (ArMapGPSCoords *)jarg1; 
  arg2 = (ArLLACoords *)jarg2; 
  if (arg1) (arg1)->myOriginLLA = arg2;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_ArMapGPSCoords_myOriginLLA_get(void * jarg1) {
  void * jresult ;
  ArMapGPSCoords *arg1 = (ArMapGPSCoords *) 0 ;
  ArLLACoords *result = 0 ;
  
  arg1 = (ArMapGPSCoords *)jarg1; 
  result = (ArLLACoords *) ((arg1)->myOriginLLA);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_ArMapGPSCoords_myOriginSet_set(void * jarg1, unsigned int jarg2) {
  ArMapGPSCoords *arg1 = (ArMapGPSCoords *) 0 ;
  bool arg2 ;
  
  arg1 = (ArMapGPSCoords *)jarg1; 
  arg2 = jarg2 ? true : false; 
  if (arg1) (arg1)->myOriginSet = arg2;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_ArMapGPSCoords_myOriginSet_get(void * jarg1) {
  unsigned int jresult ;
  ArMapGPSCoords *arg1 = (ArMapGPSCoords *) 0 ;
  bool result;
  
  arg1 = (ArMapGPSCoords *)jarg1; 
  result = (bool) ((arg1)->myOriginSet);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_ArMapGPSCoords(void * jarg1) {
  ArMapGPSCoords *arg1 = (ArMapGPSCoords *) 0 ;
  
  arg1 = (ArMapGPSCoords *)jarg1; 
  delete arg1;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_ArGripperCommands() {
  void * jresult ;
  ArGripperCommands *result = 0 ;
  
  result = (ArGripperCommands *)new ArGripperCommands();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_ArGripperCommands(void * jarg1) {
  ArGripperCommands *arg1 = (ArGripperCommands *) 0 ;
  
  arg1 = (ArGripperCommands *)jarg1; 
  delete arg1;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_ArGripper__SWIG_0(void * jarg1, int jarg2) {
  void * jresult ;
  ArRobot *arg1 = (ArRobot *) 0 ;
  int arg2 ;
  ArGripper *result = 0 ;
  
  arg1 = (ArRobot *)jarg1; 
  arg2 = (int)jarg2; 
  result = (ArGripper *)new ArGripper(arg1,arg2);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_ArGripper__SWIG_1(void * jarg1) {
  void * jresult ;
  ArRobot *arg1 = (ArRobot *) 0 ;
  ArGripper *result = 0 ;
  
  arg1 = (ArRobot *)jarg1; 
  result = (ArGripper *)new ArGripper(arg1);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_ArGripper(void * jarg1) {
  ArGripper *arg1 = (ArGripper *) 0 ;
  
  arg1 = (ArGripper *)jarg1; 
  delete arg1;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_ArGripper_gripOpen(void * jarg1) {
  unsigned int jresult ;
  ArGripper *arg1 = (ArGripper *) 0 ;
  bool result;
  
  arg1 = (ArGripper *)jarg1; 
  result = (bool)(arg1)->gripOpen();
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_ArGripper_gripClose(void * jarg1) {
  unsigned int jresult ;
  ArGripper *arg1 = (ArGripper *) 0 ;
  bool result;
  
  arg1 = (ArGripper *)jarg1; 
  result = (bool)(arg1)->gripClose();
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_ArGripper_gripStop(void * jarg1) {
  unsigned int jresult ;
  ArGripper *arg1 = (ArGripper *) 0 ;
  bool result;
  
  arg1 = (ArGripper *)jarg1; 
  result = (bool)(arg1)->gripStop();
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_ArGripper_liftUp(void * jarg1) {
  unsigned int jresult ;
  ArGripper *arg1 = (ArGripper *) 0 ;
  bool result;
  
  arg1 = (ArGripper *)jarg1; 
  result = (bool)(arg1)->liftUp();
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_ArGripper_liftDown(void * jarg1) {
  unsigned int jresult ;
  ArGripper *arg1 = (ArGripper *) 0 ;
  bool result;
  
  arg1 = (ArGripper *)jarg1; 
  result = (bool)(arg1)->liftDown();
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_ArGripper_liftStop(void * jarg1) {
  unsigned int jresult ;
  ArGripper *arg1 = (ArGripper *) 0 ;
  bool result;
  
  arg1 = (ArGripper *)jarg1; 
  result = (bool)(arg1)->liftStop();
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_ArGripper_gripperStore(void * jarg1) {
  unsigned int jresult ;
  ArGripper *arg1 = (ArGripper *) 0 ;
  bool result;
  
  arg1 = (ArGripper *)jarg1; 
  result = (bool)(arg1)->gripperStore();
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_ArGripper_gripperDeploy(void * jarg1) {
  unsigned int jresult ;
  ArGripper *arg1 = (ArGripper *) 0 ;
  bool result;
  
  arg1 = (ArGripper *)jarg1; 
  result = (bool)(arg1)->gripperDeploy();
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_ArGripper_gripperHalt(void * jarg1) {
  unsigned int jresult ;
  ArGripper *arg1 = (ArGripper *) 0 ;
  bool result;
  
  arg1 = (ArGripper *)jarg1; 
  result = (bool)(arg1)->gripperHalt();
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_ArGripper_gripPressure(void * jarg1, int jarg2) {
  unsigned int jresult ;
  ArGripper *arg1 = (ArGripper *) 0 ;
  int arg2 ;
  bool result;
  
  arg1 = (ArGripper *)jarg1; 
  arg2 = (int)jarg2; 
  result = (bool)(arg1)->gripPressure(arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_ArGripper_liftCarry(void * jarg1, int jarg2) {
  unsigned int jresult ;
  ArGripper *arg1 = (ArGripper *) 0 ;
  int arg2 ;
  bool result;
  
  arg1 = (ArGripper *)jarg1; 
  arg2 = (int)jarg2; 
  result = (bool)(arg1)->liftCarry(arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_ArGripper_isGripMoving(void * jarg1) {
  unsigned int jresult ;
  ArGripper *arg1 = (ArGripper *) 0 ;
  bool result;
  
  arg1 = (ArGripper *)jarg1; 
  result = (bool)((ArGripper const *)arg1)->isGripMoving();
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_ArGripper_isLiftMoving(void * jarg1) {
  unsigned int jresult ;
  ArGripper *arg1 = (ArGripper *) 0 ;
  bool result;
  
  arg1 = (ArGripper *)jarg1; 
  result = (bool)((ArGripper const *)arg1)->isLiftMoving();
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_ArGripper_getGripState(void * jarg1) {
  int jresult ;
  ArGripper *arg1 = (ArGripper *) 0 ;
  int result;
  
  arg1 = (ArGripper *)jarg1; 
  result = (int)((ArGripper const *)arg1)->getGripState();
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_ArGripper_getPaddleState(void * jarg1) {
  int jresult ;
  ArGripper *arg1 = (ArGripper *) 0 ;
  int result;
  
  arg1 = (ArGripper *)jarg1; 
  result = (int)((ArGripper const *)arg1)->getPaddleState();
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_ArGripper_getBreakBeamState(void * jarg1) {
  int jresult ;
  ArGripper *arg1 = (ArGripper *) 0 ;
  int result;
  
  arg1 = (ArGripper *)jarg1; 
  result = (int)((ArGripper const *)arg1)->getBreakBeamState();
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_ArGripper_isLiftMaxed(void * jarg1) {
  unsigned int jresult ;
  ArGripper *arg1 = (ArGripper *) 0 ;
  bool result;
  
  arg1 = (ArGripper *)jarg1; 
  result = (bool)((ArGripper const *)arg1)->isLiftMaxed();
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_ArGripper_getType(void * jarg1) {
  int jresult ;
  ArGripper *arg1 = (ArGripper *) 0 ;
  int result;
  
  arg1 = (ArGripper *)jarg1; 
  result = (int)((ArGripper const *)arg1)->getType();
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_ArGripper_setType(void * jarg1, int jarg2) {
  ArGripper *arg1 = (ArGripper *) 0 ;
  int arg2 ;
  
  arg1 = (ArGripper *)jarg1; 
  arg2 = (int)jarg2; 
  (arg1)->setType(arg2);
}


SWIGEXPORT long SWIGSTDCALL CSharp_ArGripper_getMSecSinceLastPacket(void * jarg1) {
  long jresult ;
  ArGripper *arg1 = (ArGripper *) 0 ;
  long result;
  
  arg1 = (ArGripper *)jarg1; 
  result = (long)((ArGripper const *)arg1)->getMSecSinceLastPacket();
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_ArGripper_getGraspTime(void * jarg1) {
  int jresult ;
  ArGripper *arg1 = (ArGripper *) 0 ;
  int result;
  
  arg1 = (ArGripper *)jarg1; 
  result = (int)((ArGripper const *)arg1)->getGraspTime();
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_ArGripper_logState(void * jarg1) {
  ArGripper *arg1 = (ArGripper *) 0 ;
  
  arg1 = (ArGripper *)jarg1; 
  ((ArGripper const *)arg1)->logState();
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_ArGripper_packetHandler(void * jarg1, void * jarg2) {
  unsigned int jresult ;
  ArGripper *arg1 = (ArGripper *) 0 ;
  ArRobotPacket *arg2 = (ArRobotPacket *) 0 ;
  bool result;
  
  arg1 = (ArGripper *)jarg1; 
  arg2 = (ArRobotPacket *)jarg2; 
  result = (bool)(arg1)->packetHandler(arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_ArGripper_connectHandler(void * jarg1) {
  ArGripper *arg1 = (ArGripper *) 0 ;
  
  arg1 = (ArGripper *)jarg1; 
  (arg1)->connectHandler();
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_ArHasFileName(void * jarg1) {
  ArHasFileName *arg1 = (ArHasFileName *) 0 ;
  
  arg1 = (ArHasFileName *)jarg1; 
  delete arg1;
}


SWIGEXPORT char * SWIGSTDCALL CSharp_ArHasFileName_getFileName(void * jarg1) {
  char * jresult ;
  ArHasFileName *arg1 = (ArHasFileName *) 0 ;
  char *result = 0 ;
  
  arg1 = (ArHasFileName *)jarg1; 
  result = (char *)((ArHasFileName const *)arg1)->getFileName();
  jresult = SWIG_csharp_string_callback((const char *)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_ArIRs__SWIG_0(unsigned long jarg1, unsigned long jarg2, char * jarg3, int jarg4) {
  void * jresult ;
  size_t arg1 ;
  size_t arg2 ;
  char *arg3 = (char *) 0 ;
  int arg4 ;
  ArIRs *result = 0 ;
  
  arg1 = (size_t)jarg1; 
  arg2 = (size_t)jarg2; 
  arg3 = (char *)jarg3; 
  arg4 = (int)jarg4; 
  result = (ArIRs *)new ArIRs(arg1,arg2,(char const *)arg3,arg4);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_ArIRs__SWIG_1(unsigned long jarg1, unsigned long jarg2, char * jarg3) {
  void * jresult ;
  size_t arg1 ;
  size_t arg2 ;
  char *arg3 = (char *) 0 ;
  ArIRs *result = 0 ;
  
  arg1 = (size_t)jarg1; 
  arg2 = (size_t)jarg2; 
  arg3 = (char *)jarg3; 
  result = (ArIRs *)new ArIRs(arg1,arg2,(char const *)arg3);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_ArIRs__SWIG_2(unsigned long jarg1, unsigned long jarg2) {
  void * jresult ;
  size_t arg1 ;
  size_t arg2 ;
  ArIRs *result = 0 ;
  
  arg1 = (size_t)jarg1; 
  arg2 = (size_t)jarg2; 
  result = (ArIRs *)new ArIRs(arg1,arg2);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_ArIRs__SWIG_3(unsigned long jarg1) {
  void * jresult ;
  size_t arg1 ;
  ArIRs *result = 0 ;
  
  arg1 = (size_t)jarg1; 
  result = (ArIRs *)new ArIRs(arg1);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_ArIRs__SWIG_4() {
  void * jresult ;
  ArIRs *result = 0 ;
  
  result = (ArIRs *)new ArIRs();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_ArIRs(void * jarg1) {
  ArIRs *arg1 = (ArIRs *) 0 ;
  
  arg1 = (ArIRs *)jarg1; 
  delete arg1;
}


SWIGEXPORT void SWIGSTDCALL CSharp_ArIRs_setRobot(void * jarg1, void * jarg2) {
  ArIRs *arg1 = (ArIRs *) 0 ;
  ArRobot *arg2 = (ArRobot *) 0 ;
  
  arg1 = (ArIRs *)jarg1; 
  arg2 = (ArRobot *)jarg2; 
  (arg1)->setRobot(arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_ArIRs_processReadings(void * jarg1) {
  ArIRs *arg1 = (ArIRs *) 0 ;
  
  arg1 = (ArIRs *)jarg1; 
  (arg1)->processReadings();
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_ArInterpolation__SWIG_0(unsigned long jarg1) {
  void * jresult ;
  size_t arg1 ;
  ArInterpolation *result = 0 ;
  
  arg1 = (size_t)jarg1; 
  result = (ArInterpolation *)new ArInterpolation(arg1);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_ArInterpolation__SWIG_1() {
  void * jresult ;
  ArInterpolation *result = 0 ;
  
  result = (ArInterpolation *)new ArInterpolation();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_ArInterpolation(void * jarg1) {
  ArInterpolation *arg1 = (ArInterpolation *) 0 ;
  
  arg1 = (ArInterpolation *)jarg1; 
  delete arg1;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_ArInterpolation_addReading(void * jarg1, void * jarg2, void * jarg3) {
  unsigned int jresult ;
  ArInterpolation *arg1 = (ArInterpolation *) 0 ;
  ArTime arg2 ;
  ArPose arg3 ;
  ArTime *argp2 ;
  ArPose *argp3 ;
  bool result;
  
  arg1 = (ArInterpolation *)jarg1; 
  argp2 = (ArTime *)jarg2; 
  if (!argp2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Attempt to dereference null ArTime", 0);
    return 0;
  }
  arg2 = *argp2; 
  argp3 = (ArPose *)jarg3; 
  if (!argp3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Attempt to dereference null ArPose", 0);
    return 0;
  }
  arg3 = *argp3; 
  result = (bool)(arg1)->addReading(arg2,arg3);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_ArInterpolation_getPose__SWIG_0(void * jarg1, void * jarg2, void * jarg3, void * jarg4) {
  int jresult ;
  ArInterpolation *arg1 = (ArInterpolation *) 0 ;
  ArTime arg2 ;
  ArPose *arg3 = (ArPose *) 0 ;
  ArPoseWithTime *arg4 = (ArPoseWithTime *) 0 ;
  ArTime *argp2 ;
  int result;
  
  arg1 = (ArInterpolation *)jarg1; 
  argp2 = (ArTime *)jarg2; 
  if (!argp2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Attempt to dereference null ArTime", 0);
    return 0;
  }
  arg2 = *argp2; 
  arg3 = (ArPose *)jarg3; 
  arg4 = (ArPoseWithTime *)jarg4; 
  result = (int)(arg1)->getPose(arg2,arg3,arg4);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_ArInterpolation_getPose__SWIG_1(void * jarg1, void * jarg2, void * jarg3) {
  int jresult ;
  ArInterpolation *arg1 = (ArInterpolation *) 0 ;
  ArTime arg2 ;
  ArPose *arg3 = (ArPose *) 0 ;
  ArTime *argp2 ;
  int result;
  
  arg1 = (ArInterpolation *)jarg1; 
  argp2 = (ArTime *)jarg2; 
  if (!argp2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Attempt to dereference null ArTime", 0);
    return 0;
  }
  arg2 = *argp2; 
  arg3 = (ArPose *)jarg3; 
  result = (int)(arg1)->getPose(arg2,arg3);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_ArInterpolation_setName(void * jarg1, char * jarg2) {
  ArInterpolation *arg1 = (ArInterpolation *) 0 ;
  char *arg2 = (char *) 0 ;
  
  arg1 = (ArInterpolation *)jarg1; 
  arg2 = (char *)jarg2; 
  (arg1)->setName((char const *)arg2);
}


SWIGEXPORT char * SWIGSTDCALL CSharp_ArInterpolation_getName(void * jarg1) {
  char * jresult ;
  ArInterpolation *arg1 = (ArInterpolation *) 0 ;
  char *result = 0 ;
  
  arg1 = (ArInterpolation *)jarg1; 
  result = (char *)(arg1)->getName();
  jresult = SWIG_csharp_string_callback((const char *)result); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_ArInterpolation_setAllowedMSForPrediction__SWIG_0(void * jarg1, int jarg2) {
  ArInterpolation *arg1 = (ArInterpolation *) 0 ;
  int arg2 ;
  
  arg1 = (ArInterpolation *)jarg1; 
  arg2 = (int)jarg2; 
  (arg1)->setAllowedMSForPrediction(arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_ArInterpolation_setAllowedMSForPrediction__SWIG_1(void * jarg1) {
  ArInterpolation *arg1 = (ArInterpolation *) 0 ;
  
  arg1 = (ArInterpolation *)jarg1; 
  (arg1)->setAllowedMSForPrediction();
}


SWIGEXPORT int SWIGSTDCALL CSharp_ArInterpolation_getAllowedMSForPrediction(void * jarg1) {
  int jresult ;
  ArInterpolation *arg1 = (ArInterpolation *) 0 ;
  int result;
  
  arg1 = (ArInterpolation *)jarg1; 
  result = (int)(arg1)->getAllowedMSForPrediction();
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_ArInterpolation_setAllowedPercentageForPrediction__SWIG_0(void * jarg1, int jarg2) {
  ArInterpolation *arg1 = (ArInterpolation *) 0 ;
  int arg2 ;
  
  arg1 = (ArInterpolation *)jarg1; 
  arg2 = (int)jarg2; 
  (arg1)->setAllowedPercentageForPrediction(arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_ArInterpolation_setAllowedPercentageForPrediction__SWIG_1(void * jarg1) {
  ArInterpolation *arg1 = (ArInterpolation *) 0 ;
  
  arg1 = (ArInterpolation *)jarg1; 
  (arg1)->setAllowedPercentageForPrediction();
}


SWIGEXPORT int SWIGSTDCALL CSharp_ArInterpolation_getAllowedPercentageForPrediction(void * jarg1) {
  int jresult ;
  ArInterpolation *arg1 = (ArInterpolation *) 0 ;
  int result;
  
  arg1 = (ArInterpolation *)jarg1; 
  result = (int)(arg1)->getAllowedPercentageForPrediction();
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_ArInterpolation_setLogPrediction__SWIG_0(void * jarg1, unsigned int jarg2) {
  ArInterpolation *arg1 = (ArInterpolation *) 0 ;
  bool arg2 ;
  
  arg1 = (ArInterpolation *)jarg1; 
  arg2 = jarg2 ? true : false; 
  (arg1)->setLogPrediction(arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_ArInterpolation_setLogPrediction__SWIG_1(void * jarg1) {
  ArInterpolation *arg1 = (ArInterpolation *) 0 ;
  
  arg1 = (ArInterpolation *)jarg1; 
  (arg1)->setLogPrediction();
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_ArInterpolation_getLogPrediction(void * jarg1) {
  unsigned int jresult ;
  ArInterpolation *arg1 = (ArInterpolation *) 0 ;
  bool result;
  
  arg1 = (ArInterpolation *)jarg1; 
  result = (bool)(arg1)->getLogPrediction();
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_ArInterpolation_setNumberOfReadings(void * jarg1, unsigned long jarg2) {
  ArInterpolation *arg1 = (ArInterpolation *) 0 ;
  size_t arg2 ;
  
  arg1 = (ArInterpolation *)jarg1; 
  arg2 = (size_t)jarg2; 
  (arg1)->setNumberOfReadings(arg2);
}


SWIGEXPORT unsigned long SWIGSTDCALL CSharp_ArInterpolation_getNumberOfReadings(void * jarg1) {
  unsigned long jresult ;
  ArInterpolation *arg1 = (ArInterpolation *) 0 ;
  size_t result;
  
  arg1 = (ArInterpolation *)jarg1; 
  result = ((ArInterpolation const *)arg1)->getNumberOfReadings();
  jresult = (unsigned long)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_ArInterpolation_reset(void * jarg1) {
  ArInterpolation *arg1 = (ArInterpolation *) 0 ;
  
  arg1 = (ArInterpolation *)jarg1; 
  (arg1)->reset();
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_ArIrrfDevice__SWIG_0(unsigned long jarg1, unsigned long jarg2, char * jarg3) {
  void * jresult ;
  size_t arg1 ;
  size_t arg2 ;
  char *arg3 = (char *) 0 ;
  ArIrrfDevice *result = 0 ;
  
  arg1 = (size_t)jarg1; 
  arg2 = (size_t)jarg2; 
  arg3 = (char *)jarg3; 
  result = (ArIrrfDevice *)new ArIrrfDevice(arg1,arg2,(char const *)arg3);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_ArIrrfDevice__SWIG_1(unsigned long jarg1, unsigned long jarg2) {
  void * jresult ;
  size_t arg1 ;
  size_t arg2 ;
  ArIrrfDevice *result = 0 ;
  
  arg1 = (size_t)jarg1; 
  arg2 = (size_t)jarg2; 
  result = (ArIrrfDevice *)new ArIrrfDevice(arg1,arg2);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_ArIrrfDevice__SWIG_2(unsigned long jarg1) {
  void * jresult ;
  size_t arg1 ;
  ArIrrfDevice *result = 0 ;
  
  arg1 = (size_t)jarg1; 
  result = (ArIrrfDevice *)new ArIrrfDevice(arg1);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_ArIrrfDevice__SWIG_3() {
  void * jresult ;
  ArIrrfDevice *result = 0 ;
  
  result = (ArIrrfDevice *)new ArIrrfDevice();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_ArIrrfDevice(void * jarg1) {
  ArIrrfDevice *arg1 = (ArIrrfDevice *) 0 ;
  
  arg1 = (ArIrrfDevice *)jarg1; 
  delete arg1;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_ArIrrfDevice_packetHandler(void * jarg1, void * jarg2) {
  unsigned int jresult ;
  ArIrrfDevice *arg1 = (ArIrrfDevice *) 0 ;
  ArRobotPacket *arg2 = (ArRobotPacket *) 0 ;
  bool result;
  
  arg1 = (ArIrrfDevice *)jarg1; 
  arg2 = (ArRobotPacket *)jarg2; 
  result = (bool)(arg1)->packetHandler(arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_ArIrrfDevice_setCumulativeMaxRange(void * jarg1, double jarg2) {
  ArIrrfDevice *arg1 = (ArIrrfDevice *) 0 ;
  double arg2 ;
  
  arg1 = (ArIrrfDevice *)jarg1; 
  arg2 = (double)jarg2; 
  (arg1)->setCumulativeMaxRange(arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_ArIrrfDevice_setRobot(void * jarg1, void * jarg2) {
  ArIrrfDevice *arg1 = (ArIrrfDevice *) 0 ;
  ArRobot *arg2 = (ArRobot *) 0 ;
  
  arg1 = (ArIrrfDevice *)jarg1; 
  arg2 = (ArRobot *)jarg2; 
  (arg1)->setRobot(arg2);
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_ArJoyHandler__SWIG_0(unsigned int jarg1, unsigned int jarg2) {
  void * jresult ;
  bool arg1 ;
  bool arg2 ;
  ArJoyHandler *result = 0 ;
  
  arg1 = jarg1 ? true : false; 
  arg2 = jarg2 ? true : false; 
  result = (ArJoyHandler *)new ArJoyHandler(arg1,arg2);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_ArJoyHandler__SWIG_1(unsigned int jarg1) {
  void * jresult ;
  bool arg1 ;
  ArJoyHandler *result = 0 ;
  
  arg1 = jarg1 ? true : false; 
  result = (ArJoyHandler *)new ArJoyHandler(arg1);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_ArJoyHandler__SWIG_2() {
  void * jresult ;
  ArJoyHandler *result = 0 ;
  
  result = (ArJoyHandler *)new ArJoyHandler();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_ArJoyHandler(void * jarg1) {
  ArJoyHandler *arg1 = (ArJoyHandler *) 0 ;
  
  arg1 = (ArJoyHandler *)jarg1; 
  delete arg1;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_ArJoyHandler_init(void * jarg1) {
  unsigned int jresult ;
  ArJoyHandler *arg1 = (ArJoyHandler *) 0 ;
  bool result;
  
  arg1 = (ArJoyHandler *)jarg1; 
  result = (bool)(arg1)->init();
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_ArJoyHandler_haveJoystick(void * jarg1) {
  unsigned int jresult ;
  ArJoyHandler *arg1 = (ArJoyHandler *) 0 ;
  bool result;
  
  arg1 = (ArJoyHandler *)jarg1; 
  result = (bool)(arg1)->haveJoystick();
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_ArJoyHandler_getDoubles__SWIG_0(void * jarg1, double * jarg2, double * jarg3, double * jarg4) {
  ArJoyHandler *arg1 = (ArJoyHandler *) 0 ;
  double *arg2 = (double *) 0 ;
  double *arg3 = (double *) 0 ;
  double *arg4 = (double *) 0 ;
  
  arg1 = (ArJoyHandler *)jarg1; 
  arg2 = (double *)jarg2; 
  arg3 = (double *)jarg3; 
  arg4 = (double *)jarg4; 
  (arg1)->getDoubles(arg2,arg3,arg4);
}


SWIGEXPORT void SWIGSTDCALL CSharp_ArJoyHandler_getDoubles__SWIG_1(void * jarg1, double * jarg2, double * jarg3) {
  ArJoyHandler *arg1 = (ArJoyHandler *) 0 ;
  double *arg2 = (double *) 0 ;
  double *arg3 = (double *) 0 ;
  
  arg1 = (ArJoyHandler *)jarg1; 
  arg2 = (double *)jarg2; 
  arg3 = (double *)jarg3; 
  (arg1)->getDoubles(arg2,arg3);
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_ArJoyHandler_getButton(void * jarg1, unsigned int jarg2) {
  unsigned int jresult ;
  ArJoyHandler *arg1 = (ArJoyHandler *) 0 ;
  unsigned int arg2 ;
  bool result;
  
  arg1 = (ArJoyHandler *)jarg1; 
  arg2 = (unsigned int)jarg2; 
  result = (bool)(arg1)->getButton(arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_ArJoyHandler_haveZAxis(void * jarg1) {
  unsigned int jresult ;
  ArJoyHandler *arg1 = (ArJoyHandler *) 0 ;
  bool result;
  
  arg1 = (ArJoyHandler *)jarg1; 
  result = (bool)(arg1)->haveZAxis();
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_ArJoyHandler_setSpeeds__SWIG_0(void * jarg1, int jarg2, int jarg3, int jarg4) {
  ArJoyHandler *arg1 = (ArJoyHandler *) 0 ;
  int arg2 ;
  int arg3 ;
  int arg4 ;
  
  arg1 = (ArJoyHandler *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (int)jarg3; 
  arg4 = (int)jarg4; 
  (arg1)->setSpeeds(arg2,arg3,arg4);
}


SWIGEXPORT void SWIGSTDCALL CSharp_ArJoyHandler_setSpeeds__SWIG_1(void * jarg1, int jarg2, int jarg3) {
  ArJoyHandler *arg1 = (ArJoyHandler *) 0 ;
  int arg2 ;
  int arg3 ;
  
  arg1 = (ArJoyHandler *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (int)jarg3; 
  (arg1)->setSpeeds(arg2,arg3);
}


SWIGEXPORT void SWIGSTDCALL CSharp_ArJoyHandler_getAdjusted__SWIG_0(void * jarg1, int * jarg2, int * jarg3, int * jarg4) {
  ArJoyHandler *arg1 = (ArJoyHandler *) 0 ;
  int *arg2 = (int *) 0 ;
  int *arg3 = (int *) 0 ;
  int *arg4 = (int *) 0 ;
  
  arg1 = (ArJoyHandler *)jarg1; 
  arg2 = (int *)jarg2; 
  arg3 = (int *)jarg3; 
  arg4 = (int *)jarg4; 
  (arg1)->getAdjusted(arg2,arg3,arg4);
}


SWIGEXPORT void SWIGSTDCALL CSharp_ArJoyHandler_getAdjusted__SWIG_1(void * jarg1, int * jarg2, int * jarg3) {
  ArJoyHandler *arg1 = (ArJoyHandler *) 0 ;
  int *arg2 = (int *) 0 ;
  int *arg3 = (int *) 0 ;
  
  arg1 = (ArJoyHandler *)jarg1; 
  arg2 = (int *)jarg2; 
  arg3 = (int *)jarg3; 
  (arg1)->getAdjusted(arg2,arg3);
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_ArJoyHandler_getNumAxes(void * jarg1) {
  unsigned int jresult ;
  ArJoyHandler *arg1 = (ArJoyHandler *) 0 ;
  unsigned int result;
  
  arg1 = (ArJoyHandler *)jarg1; 
  result = (unsigned int)(arg1)->getNumAxes();
  jresult = result; 
  return jresult;
}


SWIGEXPORT double SWIGSTDCALL CSharp_ArJoyHandler_getAxis(void * jarg1, unsigned int jarg2) {
  double jresult ;
  ArJoyHandler *arg1 = (ArJoyHandler *) 0 ;
  unsigned int arg2 ;
  double result;
  
  arg1 = (ArJoyHandler *)jarg1; 
  arg2 = (unsigned int)jarg2; 
  result = (double)(arg1)->getAxis(arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_ArJoyHandler_getNumButtons(void * jarg1) {
  unsigned int jresult ;
  ArJoyHandler *arg1 = (ArJoyHandler *) 0 ;
  unsigned int result;
  
  arg1 = (ArJoyHandler *)jarg1; 
  result = (unsigned int)(arg1)->getNumButtons();
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_ArJoyHandler_setUseOSCal(void * jarg1, unsigned int jarg2) {
  ArJoyHandler *arg1 = (ArJoyHandler *) 0 ;
  bool arg2 ;
  
  arg1 = (ArJoyHandler *)jarg1; 
  arg2 = jarg2 ? true : false; 
  (arg1)->setUseOSCal(arg2);
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_ArJoyHandler_getUseOSCal(void * jarg1) {
  unsigned int jresult ;
  ArJoyHandler *arg1 = (ArJoyHandler *) 0 ;
  bool result;
  
  arg1 = (ArJoyHandler *)jarg1; 
  result = (bool)(arg1)->getUseOSCal();
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_ArJoyHandler_startCal(void * jarg1) {
  ArJoyHandler *arg1 = (ArJoyHandler *) 0 ;
  
  arg1 = (ArJoyHandler *)jarg1; 
  (arg1)->startCal();
}


SWIGEXPORT void SWIGSTDCALL CSharp_ArJoyHandler_endCal(void * jarg1) {
  ArJoyHandler *arg1 = (ArJoyHandler *) 0 ;
  
  arg1 = (ArJoyHandler *)jarg1; 
  (arg1)->endCal();
}


SWIGEXPORT void SWIGSTDCALL CSharp_ArJoyHandler_getUnfiltered__SWIG_0(void * jarg1, int * jarg2, int * jarg3, int * jarg4) {
  ArJoyHandler *arg1 = (ArJoyHandler *) 0 ;
  int *arg2 = (int *) 0 ;
  int *arg3 = (int *) 0 ;
  int *arg4 = (int *) 0 ;
  
  arg1 = (ArJoyHandler *)jarg1; 
  arg2 = (int *)jarg2; 
  arg3 = (int *)jarg3; 
  arg4 = (int *)jarg4; 
  (arg1)->getUnfiltered(arg2,arg3,arg4);
}


SWIGEXPORT void SWIGSTDCALL CSharp_ArJoyHandler_getUnfiltered__SWIG_1(void * jarg1, int * jarg2, int * jarg3) {
  ArJoyHandler *arg1 = (ArJoyHandler *) 0 ;
  int *arg2 = (int *) 0 ;
  int *arg3 = (int *) 0 ;
  
  arg1 = (ArJoyHandler *)jarg1; 
  arg2 = (int *)jarg2; 
  arg3 = (int *)jarg3; 
  (arg1)->getUnfiltered(arg2,arg3);
}


SWIGEXPORT void SWIGSTDCALL CSharp_ArJoyHandler_getStats(void * jarg1, void * jarg2, void * jarg3, void * jarg4, void * jarg5, void * jarg6, void * jarg7) {
  ArJoyHandler *arg1 = (ArJoyHandler *) 0 ;
  int *arg2 = (int *) 0 ;
  int *arg3 = (int *) 0 ;
  int *arg4 = (int *) 0 ;
  int *arg5 = (int *) 0 ;
  int *arg6 = (int *) 0 ;
  int *arg7 = (int *) 0 ;
  
  arg1 = (ArJoyHandler *)jarg1; 
  arg2 = (int *)jarg2; 
  arg3 = (int *)jarg3; 
  arg4 = (int *)jarg4; 
  arg5 = (int *)jarg5; 
  arg6 = (int *)jarg6; 
  arg7 = (int *)jarg7; 
  (arg1)->getStats(arg2,arg3,arg4,arg5,arg6,arg7);
}


SWIGEXPORT void SWIGSTDCALL CSharp_ArJoyHandler_setStats(void * jarg1, int jarg2, int jarg3, int jarg4, int jarg5, int jarg6, int jarg7) {
  ArJoyHandler *arg1 = (ArJoyHandler *) 0 ;
  int arg2 ;
  int arg3 ;
  int arg4 ;
  int arg5 ;
  int arg6 ;
  int arg7 ;
  
  arg1 = (ArJoyHandler *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (int)jarg3; 
  arg4 = (int)jarg4; 
  arg5 = (int)jarg5; 
  arg6 = (int)jarg6; 
  arg7 = (int)jarg7; 
  (arg1)->setStats(arg2,arg3,arg4,arg5,arg6,arg7);
}


SWIGEXPORT void SWIGSTDCALL CSharp_ArJoyHandler_getSpeeds__SWIG_0(void * jarg1, int * jarg2, int * jarg3, int * jarg4) {
  ArJoyHandler *arg1 = (ArJoyHandler *) 0 ;
  int *arg2 = (int *) 0 ;
  int *arg3 = (int *) 0 ;
  int *arg4 = (int *) 0 ;
  
  arg1 = (ArJoyHandler *)jarg1; 
  arg2 = (int *)jarg2; 
  arg3 = (int *)jarg3; 
  arg4 = (int *)jarg4; 
  (arg1)->getSpeeds(arg2,arg3,arg4);
}


SWIGEXPORT void * SWIGSTDCALL CSharp_ArJoyHandler_getDoubles__SWIG_2(void * jarg1) {
  void * jresult ;
  ArJoyHandler *arg1 = (ArJoyHandler *) 0 ;
  ArJoyVec3f result;
  
  arg1 = (ArJoyHandler *)jarg1; 
  result = ArJoyHandler_getDoubles__SWIG_2(arg1);
  jresult = new ArJoyVec3f((const ArJoyVec3f &)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_ArJoyHandler_getAdjusted__SWIG_2(void * jarg1) {
  void * jresult ;
  ArJoyHandler *arg1 = (ArJoyHandler *) 0 ;
  ArJoyVec3i result;
  
  arg1 = (ArJoyHandler *)jarg1; 
  result = ArJoyHandler_getAdjusted__SWIG_2(arg1);
  jresult = new ArJoyVec3i((const ArJoyVec3i &)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_ArJoyHandler_getUnfiltered__SWIG_2(void * jarg1) {
  void * jresult ;
  ArJoyHandler *arg1 = (ArJoyHandler *) 0 ;
  ArJoyVec3i result;
  
  arg1 = (ArJoyHandler *)jarg1; 
  result = ArJoyHandler_getUnfiltered__SWIG_2(arg1);
  jresult = new ArJoyVec3i((const ArJoyVec3i &)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_ArJoyHandler_getSpeeds__SWIG_1(void * jarg1) {
  void * jresult ;
  ArJoyHandler *arg1 = (ArJoyHandler *) 0 ;
  ArJoyVec3i result;
  
  arg1 = (ArJoyHandler *)jarg1; 
  result = ArJoyHandler_getSpeeds__SWIG_1(arg1);
  jresult = new ArJoyVec3i((const ArJoyVec3i &)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_ArKeyHandler__SWIG_0(unsigned int jarg1, unsigned int jarg2, void * jarg3, unsigned int jarg4) {
  void * jresult ;
  bool arg1 ;
  bool arg2 ;
  FILE *arg3 = (FILE *) 0 ;
  bool arg4 ;
  ArKeyHandler *result = 0 ;
  
  arg1 = jarg1 ? true : false; 
  arg2 = jarg2 ? true : false; 
  arg3 = (FILE *)jarg3; 
  arg4 = jarg4 ? true : false; 
  result = (ArKeyHandler *)new ArKeyHandler(arg1,arg2,arg3,arg4);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_ArKeyHandler__SWIG_1(unsigned int jarg1, unsigned int jarg2, void * jarg3) {
  void * jresult ;
  bool arg1 ;
  bool arg2 ;
  FILE *arg3 = (FILE *) 0 ;
  ArKeyHandler *result = 0 ;
  
  arg1 = jarg1 ? true : false; 
  arg2 = jarg2 ? true : false; 
  arg3 = (FILE *)jarg3; 
  result = (ArKeyHandler *)new ArKeyHandler(arg1,arg2,arg3);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_ArKeyHandler__SWIG_2(unsigned int jarg1, unsigned int jarg2) {
  void * jresult ;
  bool arg1 ;
  bool arg2 ;
  ArKeyHandler *result = 0 ;
  
  arg1 = jarg1 ? true : false; 
  arg2 = jarg2 ? true : false; 
  result = (ArKeyHandler *)new ArKeyHandler(arg1,arg2);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_ArKeyHandler__SWIG_3(unsigned int jarg1) {
  void * jresult ;
  bool arg1 ;
  ArKeyHandler *result = 0 ;
  
  arg1 = jarg1 ? true : false; 
  result = (ArKeyHandler *)new ArKeyHandler(arg1);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_ArKeyHandler__SWIG_4() {
  void * jresult ;
  ArKeyHandler *result = 0 ;
  
  result = (ArKeyHandler *)new ArKeyHandler();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_ArKeyHandler(void * jarg1) {
  ArKeyHandler *arg1 = (ArKeyHandler *) 0 ;
  
  arg1 = (ArKeyHandler *)jarg1; 
  delete arg1;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_ArKeyHandler_addKeyHandler(void * jarg1, int jarg2, void * jarg3) {
  unsigned int jresult ;
  ArKeyHandler *arg1 = (ArKeyHandler *) 0 ;
  int arg2 ;
  ArFunctor *arg3 = (ArFunctor *) 0 ;
  bool result;
  
  arg1 = (ArKeyHandler *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (ArFunctor *)jarg3; 
  result = (bool)(arg1)->addKeyHandler(arg2,arg3);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_ArKeyHandler_remKeyHandler__SWIG_0(void * jarg1, int jarg2) {
  unsigned int jresult ;
  ArKeyHandler *arg1 = (ArKeyHandler *) 0 ;
  int arg2 ;
  bool result;
  
  arg1 = (ArKeyHandler *)jarg1; 
  arg2 = (int)jarg2; 
  result = (bool)(arg1)->remKeyHandler(arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_ArKeyHandler_remKeyHandler__SWIG_1(void * jarg1, void * jarg2) {
  unsigned int jresult ;
  ArKeyHandler *arg1 = (ArKeyHandler *) 0 ;
  ArFunctor *arg2 = (ArFunctor *) 0 ;
  bool result;
  
  arg1 = (ArKeyHandler *)jarg1; 
  arg2 = (ArFunctor *)jarg2; 
  result = (bool)(arg1)->remKeyHandler(arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_ArKeyHandler_takeKeys__SWIG_0(void * jarg1, unsigned int jarg2) {
  ArKeyHandler *arg1 = (ArKeyHandler *) 0 ;
  bool arg2 ;
  
  arg1 = (ArKeyHandler *)jarg1; 
  arg2 = jarg2 ? true : false; 
  (arg1)->takeKeys(arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_ArKeyHandler_takeKeys__SWIG_1(void * jarg1) {
  ArKeyHandler *arg1 = (ArKeyHandler *) 0 ;
  
  arg1 = (ArKeyHandler *)jarg1; 
  (arg1)->takeKeys();
}


SWIGEXPORT void SWIGSTDCALL CSharp_ArKeyHandler_restore(void * jarg1) {
  ArKeyHandler *arg1 = (ArKeyHandler *) 0 ;
  
  arg1 = (ArKeyHandler *)jarg1; 
  (arg1)->restore();
}


SWIGEXPORT void SWIGSTDCALL CSharp_ArKeyHandler_checkKeys(void * jarg1) {
  ArKeyHandler *arg1 = (ArKeyHandler *) 0 ;
  
  arg1 = (ArKeyHandler *)jarg1; 
  (arg1)->checkKeys();
}


SWIGEXPORT int SWIGSTDCALL CSharp_ArKeyHandler_getKey(void * jarg1) {
  int jresult ;
  ArKeyHandler *arg1 = (ArKeyHandler *) 0 ;
  int result;
  
  arg1 = (ArKeyHandler *)jarg1; 
  result = (int)(arg1)->getKey();
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_ArLaserConnector__SWIG_0(void * jarg1, void * jarg2, void * jarg3, unsigned int jarg4, int jarg5, void * jarg6, void * jarg7) {
  void * jresult ;
  ArArgumentParser *arg1 = (ArArgumentParser *) 0 ;
  ArRobot *arg2 = (ArRobot *) 0 ;
  ArRobotConnector *arg3 = (ArRobotConnector *) 0 ;
  bool arg4 ;
  ArLog::LogLevel arg5 ;
  ArRetFunctor1< bool,char const * > *arg6 = (ArRetFunctor1< bool,char const * > *) 0 ;
  ArRetFunctor1< bool,char const * > *arg7 = (ArRetFunctor1< bool,char const * > *) 0 ;
  ArLaserConnector *result = 0 ;
  
  arg1 = (ArArgumentParser *)jarg1; 
  arg2 = (ArRobot *)jarg2; 
  arg3 = (ArRobotConnector *)jarg3; 
  arg4 = jarg4 ? true : false; 
  arg5 = (ArLog::LogLevel)jarg5; 
  arg6 = (ArRetFunctor1< bool,char const * > *)jarg6; 
  arg7 = (ArRetFunctor1< bool,char const * > *)jarg7; 
  result = (ArLaserConnector *)new ArLaserConnector(arg1,arg2,arg3,arg4,arg5,arg6,arg7);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_ArLaserConnector__SWIG_1(void * jarg1, void * jarg2, void * jarg3, unsigned int jarg4, int jarg5, void * jarg6) {
  void * jresult ;
  ArArgumentParser *arg1 = (ArArgumentParser *) 0 ;
  ArRobot *arg2 = (ArRobot *) 0 ;
  ArRobotConnector *arg3 = (ArRobotConnector *) 0 ;
  bool arg4 ;
  ArLog::LogLevel arg5 ;
  ArRetFunctor1< bool,char const * > *arg6 = (ArRetFunctor1< bool,char const * > *) 0 ;
  ArLaserConnector *result = 0 ;
  
  arg1 = (ArArgumentParser *)jarg1; 
  arg2 = (ArRobot *)jarg2; 
  arg3 = (ArRobotConnector *)jarg3; 
  arg4 = jarg4 ? true : false; 
  arg5 = (ArLog::LogLevel)jarg5; 
  arg6 = (ArRetFunctor1< bool,char const * > *)jarg6; 
  result = (ArLaserConnector *)new ArLaserConnector(arg1,arg2,arg3,arg4,arg5,arg6);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_ArLaserConnector__SWIG_2(void * jarg1, void * jarg2, void * jarg3, unsigned int jarg4, int jarg5) {
  void * jresult ;
  ArArgumentParser *arg1 = (ArArgumentParser *) 0 ;
  ArRobot *arg2 = (ArRobot *) 0 ;
  ArRobotConnector *arg3 = (ArRobotConnector *) 0 ;
  bool arg4 ;
  ArLog::LogLevel arg5 ;
  ArLaserConnector *result = 0 ;
  
  arg1 = (ArArgumentParser *)jarg1; 
  arg2 = (ArRobot *)jarg2; 
  arg3 = (ArRobotConnector *)jarg3; 
  arg4 = jarg4 ? true : false; 
  arg5 = (ArLog::LogLevel)jarg5; 
  result = (ArLaserConnector *)new ArLaserConnector(arg1,arg2,arg3,arg4,arg5);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_ArLaserConnector__SWIG_3(void * jarg1, void * jarg2, void * jarg3, unsigned int jarg4) {
  void * jresult ;
  ArArgumentParser *arg1 = (ArArgumentParser *) 0 ;
  ArRobot *arg2 = (ArRobot *) 0 ;
  ArRobotConnector *arg3 = (ArRobotConnector *) 0 ;
  bool arg4 ;
  ArLaserConnector *result = 0 ;
  
  arg1 = (ArArgumentParser *)jarg1; 
  arg2 = (ArRobot *)jarg2; 
  arg3 = (ArRobotConnector *)jarg3; 
  arg4 = jarg4 ? true : false; 
  result = (ArLaserConnector *)new ArLaserConnector(arg1,arg2,arg3,arg4);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_ArLaserConnector__SWIG_4(void * jarg1, void * jarg2, void * jarg3) {
  void * jresult ;
  ArArgumentParser *arg1 = (ArArgumentParser *) 0 ;
  ArRobot *arg2 = (ArRobot *) 0 ;
  ArRobotConnector *arg3 = (ArRobotConnector *) 0 ;
  ArLaserConnector *result = 0 ;
  
  arg1 = (ArArgumentParser *)jarg1; 
  arg2 = (ArRobot *)jarg2; 
  arg3 = (ArRobotConnector *)jarg3; 
  result = (ArLaserConnector *)new ArLaserConnector(arg1,arg2,arg3);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_ArLaserConnector(void * jarg1) {
  ArLaserConnector *arg1 = (ArLaserConnector *) 0 ;
  
  arg1 = (ArLaserConnector *)jarg1; 
  delete arg1;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_ArLaserConnector_connectLasers__SWIG_0(void * jarg1, unsigned int jarg2, unsigned int jarg3, unsigned int jarg4, unsigned int jarg5, unsigned int jarg6, void * jarg7) {
  unsigned int jresult ;
  ArLaserConnector *arg1 = (ArLaserConnector *) 0 ;
  bool arg2 ;
  bool arg3 ;
  bool arg4 ;
  bool arg5 ;
  bool arg6 ;
  int *arg7 = (int *) 0 ;
  bool result;
  
  arg1 = (ArLaserConnector *)jarg1; 
  arg2 = jarg2 ? true : false; 
  arg3 = jarg3 ? true : false; 
  arg4 = jarg4 ? true : false; 
  arg5 = jarg5 ? true : false; 
  arg6 = jarg6 ? true : false; 
  arg7 = (int *)jarg7; 
  result = (bool)(arg1)->connectLasers(arg2,arg3,arg4,arg5,arg6,arg7);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_ArLaserConnector_connectLasers__SWIG_1(void * jarg1, unsigned int jarg2, unsigned int jarg3, unsigned int jarg4, unsigned int jarg5, unsigned int jarg6) {
  unsigned int jresult ;
  ArLaserConnector *arg1 = (ArLaserConnector *) 0 ;
  bool arg2 ;
  bool arg3 ;
  bool arg4 ;
  bool arg5 ;
  bool arg6 ;
  bool result;
  
  arg1 = (ArLaserConnector *)jarg1; 
  arg2 = jarg2 ? true : false; 
  arg3 = jarg3 ? true : false; 
  arg4 = jarg4 ? true : false; 
  arg5 = jarg5 ? true : false; 
  arg6 = jarg6 ? true : false; 
  result = (bool)(arg1)->connectLasers(arg2,arg3,arg4,arg5,arg6);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_ArLaserConnector_connectLasers__SWIG_2(void * jarg1, unsigned int jarg2, unsigned int jarg3, unsigned int jarg4, unsigned int jarg5) {
  unsigned int jresult ;
  ArLaserConnector *arg1 = (ArLaserConnector *) 0 ;
  bool arg2 ;
  bool arg3 ;
  bool arg4 ;
  bool arg5 ;
  bool result;
  
  arg1 = (ArLaserConnector *)jarg1; 
  arg2 = jarg2 ? true : false; 
  arg3 = jarg3 ? true : false; 
  arg4 = jarg4 ? true : false; 
  arg5 = jarg5 ? true : false; 
  result = (bool)(arg1)->connectLasers(arg2,arg3,arg4,arg5);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_ArLaserConnector_connectLasers__SWIG_3(void * jarg1, unsigned int jarg2, unsigned int jarg3, unsigned int jarg4) {
  unsigned int jresult ;
  ArLaserConnector *arg1 = (ArLaserConnector *) 0 ;
  bool arg2 ;
  bool arg3 ;
  bool arg4 ;
  bool result;
  
  arg1 = (ArLaserConnector *)jarg1; 
  arg2 = jarg2 ? true : false; 
  arg3 = jarg3 ? true : false; 
  arg4 = jarg4 ? true : false; 
  result = (bool)(arg1)->connectLasers(arg2,arg3,arg4);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_ArLaserConnector_connectLasers__SWIG_4(void * jarg1, unsigned int jarg2, unsigned int jarg3) {
  unsigned int jresult ;
  ArLaserConnector *arg1 = (ArLaserConnector *) 0 ;
  bool arg2 ;
  bool arg3 ;
  bool result;
  
  arg1 = (ArLaserConnector *)jarg1; 
  arg2 = jarg2 ? true : false; 
  arg3 = jarg3 ? true : false; 
  result = (bool)(arg1)->connectLasers(arg2,arg3);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_ArLaserConnector_connectLasers__SWIG_5(void * jarg1, unsigned int jarg2) {
  unsigned int jresult ;
  ArLaserConnector *arg1 = (ArLaserConnector *) 0 ;
  bool arg2 ;
  bool result;
  
  arg1 = (ArLaserConnector *)jarg1; 
  arg2 = jarg2 ? true : false; 
  result = (bool)(arg1)->connectLasers(arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_ArLaserConnector_connectLasers__SWIG_6(void * jarg1) {
  unsigned int jresult ;
  ArLaserConnector *arg1 = (ArLaserConnector *) 0 ;
  bool result;
  
  arg1 = (ArLaserConnector *)jarg1; 
  result = (bool)(arg1)->connectLasers();
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_ArLaserConnector_setupLaser__SWIG_0(void * jarg1, void * jarg2, int jarg3) {
  unsigned int jresult ;
  ArLaserConnector *arg1 = (ArLaserConnector *) 0 ;
  ArLaser *arg2 = (ArLaser *) 0 ;
  int arg3 ;
  bool result;
  
  arg1 = (ArLaserConnector *)jarg1; 
  arg2 = (ArLaser *)jarg2; 
  arg3 = (int)jarg3; 
  result = (bool)(arg1)->setupLaser(arg2,arg3);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_ArLaserConnector_setupLaser__SWIG_1(void * jarg1, void * jarg2) {
  unsigned int jresult ;
  ArLaserConnector *arg1 = (ArLaserConnector *) 0 ;
  ArLaser *arg2 = (ArLaser *) 0 ;
  bool result;
  
  arg1 = (ArLaserConnector *)jarg1; 
  arg2 = (ArLaser *)jarg2; 
  result = (bool)(arg1)->setupLaser(arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_ArLaserConnector_connectLaser__SWIG_0(void * jarg1, void * jarg2, int jarg3, unsigned int jarg4) {
  unsigned int jresult ;
  ArLaserConnector *arg1 = (ArLaserConnector *) 0 ;
  ArLaser *arg2 = (ArLaser *) 0 ;
  int arg3 ;
  bool arg4 ;
  bool result;
  
  arg1 = (ArLaserConnector *)jarg1; 
  arg2 = (ArLaser *)jarg2; 
  arg3 = (int)jarg3; 
  arg4 = jarg4 ? true : false; 
  result = (bool)(arg1)->connectLaser(arg2,arg3,arg4);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_ArLaserConnector_connectLaser__SWIG_1(void * jarg1, void * jarg2, int jarg3) {
  unsigned int jresult ;
  ArLaserConnector *arg1 = (ArLaserConnector *) 0 ;
  ArLaser *arg2 = (ArLaser *) 0 ;
  int arg3 ;
  bool result;
  
  arg1 = (ArLaserConnector *)jarg1; 
  arg2 = (ArLaser *)jarg2; 
  arg3 = (int)jarg3; 
  result = (bool)(arg1)->connectLaser(arg2,arg3);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_ArLaserConnector_connectLaser__SWIG_2(void * jarg1, void * jarg2) {
  unsigned int jresult ;
  ArLaserConnector *arg1 = (ArLaserConnector *) 0 ;
  ArLaser *arg2 = (ArLaser *) 0 ;
  bool result;
  
  arg1 = (ArLaserConnector *)jarg1; 
  arg2 = (ArLaser *)jarg2; 
  result = (bool)(arg1)->connectLaser(arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_ArLaserConnector_addLaser__SWIG_0(void * jarg1, void * jarg2, int jarg3) {
  unsigned int jresult ;
  ArLaserConnector *arg1 = (ArLaserConnector *) 0 ;
  ArLaser *arg2 = (ArLaser *) 0 ;
  int arg3 ;
  bool result;
  
  arg1 = (ArLaserConnector *)jarg1; 
  arg2 = (ArLaser *)jarg2; 
  arg3 = (int)jarg3; 
  result = (bool)(arg1)->addLaser(arg2,arg3);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_ArLaserConnector_addLaser__SWIG_1(void * jarg1, void * jarg2) {
  unsigned int jresult ;
  ArLaserConnector *arg1 = (ArLaserConnector *) 0 ;
  ArLaser *arg2 = (ArLaser *) 0 ;
  bool result;
  
  arg1 = (ArLaserConnector *)jarg1; 
  arg2 = (ArLaser *)jarg2; 
  result = (bool)(arg1)->addLaser(arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_ArLaserConnector_addPlaceholderLaser__SWIG_0(void * jarg1, void * jarg2, int jarg3, unsigned int jarg4) {
  unsigned int jresult ;
  ArLaserConnector *arg1 = (ArLaserConnector *) 0 ;
  ArLaser *arg2 = (ArLaser *) 0 ;
  int arg3 ;
  bool arg4 ;
  bool result;
  
  arg1 = (ArLaserConnector *)jarg1; 
  arg2 = (ArLaser *)jarg2; 
  arg3 = (int)jarg3; 
  arg4 = jarg4 ? true : false; 
  result = (bool)(arg1)->addPlaceholderLaser(arg2,arg3,arg4);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_ArLaserConnector_addPlaceholderLaser__SWIG_1(void * jarg1, void * jarg2, int jarg3) {
  unsigned int jresult ;
  ArLaserConnector *arg1 = (ArLaserConnector *) 0 ;
  ArLaser *arg2 = (ArLaser *) 0 ;
  int arg3 ;
  bool result;
  
  arg1 = (ArLaserConnector *)jarg1; 
  arg2 = (ArLaser *)jarg2; 
  arg3 = (int)jarg3; 
  result = (bool)(arg1)->addPlaceholderLaser(arg2,arg3);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_ArLaserConnector_addPlaceholderLaser__SWIG_2(void * jarg1, void * jarg2) {
  unsigned int jresult ;
  ArLaserConnector *arg1 = (ArLaserConnector *) 0 ;
  ArLaser *arg2 = (ArLaser *) 0 ;
  bool result;
  
  arg1 = (ArLaserConnector *)jarg1; 
  arg2 = (ArLaser *)jarg2; 
  result = (bool)(arg1)->addPlaceholderLaser(arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_ArLaserConnector_parseArgs__SWIG_0(void * jarg1) {
  unsigned int jresult ;
  ArLaserConnector *arg1 = (ArLaserConnector *) 0 ;
  bool result;
  
  arg1 = (ArLaserConnector *)jarg1; 
  result = (bool)(arg1)->parseArgs();
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_ArLaserConnector_parseArgs__SWIG_1(void * jarg1, void * jarg2) {
  unsigned int jresult ;
  ArLaserConnector *arg1 = (ArLaserConnector *) 0 ;
  ArArgumentParser *arg2 = (ArArgumentParser *) 0 ;
  bool result;
  
  arg1 = (ArLaserConnector *)jarg1; 
  arg2 = (ArArgumentParser *)jarg2; 
  result = (bool)(arg1)->parseArgs(arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_ArLaserConnector_logOptions(void * jarg1) {
  ArLaserConnector *arg1 = (ArLaserConnector *) 0 ;
  
  arg1 = (ArLaserConnector *)jarg1; 
  ((ArLaserConnector const *)arg1)->logOptions();
}


SWIGEXPORT void * SWIGSTDCALL CSharp_ArLaserConnector_getLaser(void * jarg1, int jarg2) {
  void * jresult ;
  ArLaserConnector *arg1 = (ArLaserConnector *) 0 ;
  int arg2 ;
  ArLaser *result = 0 ;
  
  arg1 = (ArLaserConnector *)jarg1; 
  arg2 = (int)jarg2; 
  result = (ArLaser *)(arg1)->getLaser(arg2);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_ArLaserConnector_replaceLaser(void * jarg1, void * jarg2, int jarg3) {
  unsigned int jresult ;
  ArLaserConnector *arg1 = (ArLaserConnector *) 0 ;
  ArLaser *arg2 = (ArLaser *) 0 ;
  int arg3 ;
  bool result;
  
  arg1 = (ArLaserConnector *)jarg1; 
  arg2 = (ArLaser *)jarg2; 
  arg3 = (int)jarg3; 
  result = (bool)(arg1)->replaceLaser(arg2,arg3);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_ArLaserConnector_logLaserData(void * jarg1) {
  ArLaserConnector *arg1 = (ArLaserConnector *) 0 ;
  
  arg1 = (ArLaserConnector *)jarg1; 
  (arg1)->logLaserData();
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_ArLaserFilter__SWIG_0(void * jarg1, char * jarg2) {
  void * jresult ;
  ArLaser *arg1 = (ArLaser *) 0 ;
  char *arg2 = (char *) 0 ;
  ArLaserFilter *result = 0 ;
  
  arg1 = (ArLaser *)jarg1; 
  arg2 = (char *)jarg2; 
  result = (ArLaserFilter *)new ArLaserFilter(arg1,(char const *)arg2);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_ArLaserFilter__SWIG_1(void * jarg1) {
  void * jresult ;
  ArLaser *arg1 = (ArLaser *) 0 ;
  ArLaserFilter *result = 0 ;
  
  arg1 = (ArLaser *)jarg1; 
  result = (ArLaserFilter *)new ArLaserFilter(arg1);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_ArLaserFilter(void * jarg1) {
  ArLaserFilter *arg1 = (ArLaserFilter *) 0 ;
  
  arg1 = (ArLaserFilter *)jarg1; 
  delete arg1;
}


SWIGEXPORT void SWIGSTDCALL CSharp_ArLaserFilter_setRobot(void * jarg1, void * jarg2) {
  ArLaserFilter *arg1 = (ArLaserFilter *) 0 ;
  ArRobot *arg2 = (ArRobot *) 0 ;
  
  arg1 = (ArLaserFilter *)jarg1; 
  arg2 = (ArRobot *)jarg2; 
  (arg1)->setRobot(arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_ArLaserFilter_addToConfig__SWIG_0(void * jarg1, void * jarg2, char * jarg3, char * jarg4) {
  ArLaserFilter *arg1 = (ArLaserFilter *) 0 ;
  ArConfig *arg2 = (ArConfig *) 0 ;
  char *arg3 = (char *) 0 ;
  char *arg4 = (char *) 0 ;
  
  arg1 = (ArLaserFilter *)jarg1; 
  arg2 = (ArConfig *)jarg2; 
  arg3 = (char *)jarg3; 
  arg4 = (char *)jarg4; 
  (arg1)->addToConfig(arg2,(char const *)arg3,(char const *)arg4);
}


SWIGEXPORT void SWIGSTDCALL CSharp_ArLaserFilter_addToConfig__SWIG_1(void * jarg1, void * jarg2, char * jarg3) {
  ArLaserFilter *arg1 = (ArLaserFilter *) 0 ;
  ArConfig *arg2 = (ArConfig *) 0 ;
  char *arg3 = (char *) 0 ;
  
  arg1 = (ArLaserFilter *)jarg1; 
  arg2 = (ArConfig *)jarg2; 
  arg3 = (char *)jarg3; 
  (arg1)->addToConfig(arg2,(char const *)arg3);
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_ArLaserFilter_blockingConnect(void * jarg1) {
  unsigned int jresult ;
  ArLaserFilter *arg1 = (ArLaserFilter *) 0 ;
  bool result;
  
  arg1 = (ArLaserFilter *)jarg1; 
  result = (bool)(arg1)->blockingConnect();
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_ArLaserFilter_asyncConnect(void * jarg1) {
  unsigned int jresult ;
  ArLaserFilter *arg1 = (ArLaserFilter *) 0 ;
  bool result;
  
  arg1 = (ArLaserFilter *)jarg1; 
  result = (bool)(arg1)->asyncConnect();
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_ArLaserFilter_disconnect(void * jarg1) {
  unsigned int jresult ;
  ArLaserFilter *arg1 = (ArLaserFilter *) 0 ;
  bool result;
  
  arg1 = (ArLaserFilter *)jarg1; 
  result = (bool)(arg1)->disconnect();
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_ArLaserFilter_isConnected(void * jarg1) {
  unsigned int jresult ;
  ArLaserFilter *arg1 = (ArLaserFilter *) 0 ;
  bool result;
  
  arg1 = (ArLaserFilter *)jarg1; 
  result = (bool)(arg1)->isConnected();
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_ArLaserFilter_isTryingToConnect(void * jarg1) {
  unsigned int jresult ;
  ArLaserFilter *arg1 = (ArLaserFilter *) 0 ;
  bool result;
  
  arg1 = (ArLaserFilter *)jarg1; 
  result = (bool)(arg1)->isTryingToConnect();
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_ArLaserFilter_runThread(void * jarg1, void * jarg2) {
  void * jresult ;
  ArLaserFilter *arg1 = (ArLaserFilter *) 0 ;
  void *arg2 = (void *) 0 ;
  void *result = 0 ;
  
  arg1 = (ArLaserFilter *)jarg1; 
  arg2 = (void *)jarg2; 
  result = (void *)(arg1)->runThread(arg2);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_ArLaserFilter_laserCheckParams(void * jarg1) {
  unsigned int jresult ;
  ArLaserFilter *arg1 = (ArLaserFilter *) 0 ;
  bool result;
  
  arg1 = (ArLaserFilter *)jarg1; 
  result = (bool)(arg1)->laserCheckParams();
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_ArLaserFilter_getBaseLaser(void * jarg1) {
  void * jresult ;
  ArLaserFilter *arg1 = (ArLaserFilter *) 0 ;
  ArLaser *result = 0 ;
  
  arg1 = (ArLaserFilter *)jarg1; 
  result = (ArLaser *)(arg1)->getBaseLaser();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_ArLaserLogger__SWIG_0(void * jarg1, void * jarg2, double jarg3, double jarg4, char * jarg5, unsigned int jarg6, void * jarg7, char * jarg8, unsigned int jarg9, void * jarg10, void * jarg11, void * jarg12) {
  void * jresult ;
  ArRobot *arg1 = (ArRobot *) 0 ;
  ArLaser *arg2 = (ArLaser *) 0 ;
  double arg3 ;
  double arg4 ;
  char *arg5 = (char *) 0 ;
  bool arg6 ;
  ArJoyHandler *arg7 = (ArJoyHandler *) 0 ;
  char *arg8 = (char *) 0 ;
  bool arg9 ;
  ArRobotJoyHandler *arg10 = (ArRobotJoyHandler *) 0 ;
  std::map< std::string,ArRetFunctor3< int,ArTime,ArPose *,ArPoseWithTime * > *,ArStrCaseCmpOp > *arg11 = (std::map< std::string,ArRetFunctor3< int,ArTime,ArPose *,ArPoseWithTime * > *,ArStrCaseCmpOp > *) 0 ;
  std::list< ArLaser * > *arg12 = (std::list< ArLaser * > *) 0 ;
  ArLaserLogger *result = 0 ;
  
  arg1 = (ArRobot *)jarg1; 
  arg2 = (ArLaser *)jarg2; 
  arg3 = (double)jarg3; 
  arg4 = (double)jarg4; 
  arg5 = (char *)jarg5; 
  arg6 = jarg6 ? true : false; 
  arg7 = (ArJoyHandler *)jarg7; 
  arg8 = (char *)jarg8; 
  arg9 = jarg9 ? true : false; 
  arg10 = (ArRobotJoyHandler *)jarg10; 
  arg11 = (std::map< std::string,ArRetFunctor3< int,ArTime,ArPose *,ArPoseWithTime * > *,ArStrCaseCmpOp > *)jarg11; 
  arg12 = (std::list< ArLaser * > *)jarg12; 
  result = (ArLaserLogger *)new ArLaserLogger(arg1,arg2,arg3,arg4,(char const *)arg5,arg6,arg7,(char const *)arg8,arg9,arg10,(std::map< std::string,ArRetFunctor3< int,ArTime,ArPose *,ArPoseWithTime * > *,ArStrCaseCmpOp > const *)arg11,arg12);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_ArLaserLogger__SWIG_1(void * jarg1, void * jarg2, double jarg3, double jarg4, char * jarg5, unsigned int jarg6, void * jarg7, char * jarg8, unsigned int jarg9, void * jarg10, void * jarg11) {
  void * jresult ;
  ArRobot *arg1 = (ArRobot *) 0 ;
  ArLaser *arg2 = (ArLaser *) 0 ;
  double arg3 ;
  double arg4 ;
  char *arg5 = (char *) 0 ;
  bool arg6 ;
  ArJoyHandler *arg7 = (ArJoyHandler *) 0 ;
  char *arg8 = (char *) 0 ;
  bool arg9 ;
  ArRobotJoyHandler *arg10 = (ArRobotJoyHandler *) 0 ;
  std::map< std::string,ArRetFunctor3< int,ArTime,ArPose *,ArPoseWithTime * > *,ArStrCaseCmpOp > *arg11 = (std::map< std::string,ArRetFunctor3< int,ArTime,ArPose *,ArPoseWithTime * > *,ArStrCaseCmpOp > *) 0 ;
  ArLaserLogger *result = 0 ;
  
  arg1 = (ArRobot *)jarg1; 
  arg2 = (ArLaser *)jarg2; 
  arg3 = (double)jarg3; 
  arg4 = (double)jarg4; 
  arg5 = (char *)jarg5; 
  arg6 = jarg6 ? true : false; 
  arg7 = (ArJoyHandler *)jarg7; 
  arg8 = (char *)jarg8; 
  arg9 = jarg9 ? true : false; 
  arg10 = (ArRobotJoyHandler *)jarg10; 
  arg11 = (std::map< std::string,ArRetFunctor3< int,ArTime,ArPose *,ArPoseWithTime * > *,ArStrCaseCmpOp > *)jarg11; 
  result = (ArLaserLogger *)new ArLaserLogger(arg1,arg2,arg3,arg4,(char const *)arg5,arg6,arg7,(char const *)arg8,arg9,arg10,(std::map< std::string,ArRetFunctor3< int,ArTime,ArPose *,ArPoseWithTime * > *,ArStrCaseCmpOp > const *)arg11);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_ArLaserLogger__SWIG_2(void * jarg1, void * jarg2, double jarg3, double jarg4, char * jarg5, unsigned int jarg6, void * jarg7, char * jarg8, unsigned int jarg9, void * jarg10) {
  void * jresult ;
  ArRobot *arg1 = (ArRobot *) 0 ;
  ArLaser *arg2 = (ArLaser *) 0 ;
  double arg3 ;
  double arg4 ;
  char *arg5 = (char *) 0 ;
  bool arg6 ;
  ArJoyHandler *arg7 = (ArJoyHandler *) 0 ;
  char *arg8 = (char *) 0 ;
  bool arg9 ;
  ArRobotJoyHandler *arg10 = (ArRobotJoyHandler *) 0 ;
  ArLaserLogger *result = 0 ;
  
  arg1 = (ArRobot *)jarg1; 
  arg2 = (ArLaser *)jarg2; 
  arg3 = (double)jarg3; 
  arg4 = (double)jarg4; 
  arg5 = (char *)jarg5; 
  arg6 = jarg6 ? true : false; 
  arg7 = (ArJoyHandler *)jarg7; 
  arg8 = (char *)jarg8; 
  arg9 = jarg9 ? true : false; 
  arg10 = (ArRobotJoyHandler *)jarg10; 
  result = (ArLaserLogger *)new ArLaserLogger(arg1,arg2,arg3,arg4,(char const *)arg5,arg6,arg7,(char const *)arg8,arg9,arg10);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_ArLaserLogger__SWIG_3(void * jarg1, void * jarg2, double jarg3, double jarg4, char * jarg5, unsigned int jarg6, void * jarg7, char * jarg8, unsigned int jarg9) {
  void * jresult ;
  ArRobot *arg1 = (ArRobot *) 0 ;
  ArLaser *arg2 = (ArLaser *) 0 ;
  double arg3 ;
  double arg4 ;
  char *arg5 = (char *) 0 ;
  bool arg6 ;
  ArJoyHandler *arg7 = (ArJoyHandler *) 0 ;
  char *arg8 = (char *) 0 ;
  bool arg9 ;
  ArLaserLogger *result = 0 ;
  
  arg1 = (ArRobot *)jarg1; 
  arg2 = (ArLaser *)jarg2; 
  arg3 = (double)jarg3; 
  arg4 = (double)jarg4; 
  arg5 = (char *)jarg5; 
  arg6 = jarg6 ? true : false; 
  arg7 = (ArJoyHandler *)jarg7; 
  arg8 = (char *)jarg8; 
  arg9 = jarg9 ? true : false; 
  result = (ArLaserLogger *)new ArLaserLogger(arg1,arg2,arg3,arg4,(char const *)arg5,arg6,arg7,(char const *)arg8,arg9);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_ArLaserLogger__SWIG_4(void * jarg1, void * jarg2, double jarg3, double jarg4, char * jarg5, unsigned int jarg6, void * jarg7, char * jarg8) {
  void * jresult ;
  ArRobot *arg1 = (ArRobot *) 0 ;
  ArLaser *arg2 = (ArLaser *) 0 ;
  double arg3 ;
  double arg4 ;
  char *arg5 = (char *) 0 ;
  bool arg6 ;
  ArJoyHandler *arg7 = (ArJoyHandler *) 0 ;
  char *arg8 = (char *) 0 ;
  ArLaserLogger *result = 0 ;
  
  arg1 = (ArRobot *)jarg1; 
  arg2 = (ArLaser *)jarg2; 
  arg3 = (double)jarg3; 
  arg4 = (double)jarg4; 
  arg5 = (char *)jarg5; 
  arg6 = jarg6 ? true : false; 
  arg7 = (ArJoyHandler *)jarg7; 
  arg8 = (char *)jarg8; 
  result = (ArLaserLogger *)new ArLaserLogger(arg1,arg2,arg3,arg4,(char const *)arg5,arg6,arg7,(char const *)arg8);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_ArLaserLogger__SWIG_5(void * jarg1, void * jarg2, double jarg3, double jarg4, char * jarg5, unsigned int jarg6, void * jarg7) {
  void * jresult ;
  ArRobot *arg1 = (ArRobot *) 0 ;
  ArLaser *arg2 = (ArLaser *) 0 ;
  double arg3 ;
  double arg4 ;
  char *arg5 = (char *) 0 ;
  bool arg6 ;
  ArJoyHandler *arg7 = (ArJoyHandler *) 0 ;
  ArLaserLogger *result = 0 ;
  
  arg1 = (ArRobot *)jarg1; 
  arg2 = (ArLaser *)jarg2; 
  arg3 = (double)jarg3; 
  arg4 = (double)jarg4; 
  arg5 = (char *)jarg5; 
  arg6 = jarg6 ? true : false; 
  arg7 = (ArJoyHandler *)jarg7; 
  result = (ArLaserLogger *)new ArLaserLogger(arg1,arg2,arg3,arg4,(char const *)arg5,arg6,arg7);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_ArLaserLogger__SWIG_6(void * jarg1, void * jarg2, double jarg3, double jarg4, char * jarg5, unsigned int jarg6) {
  void * jresult ;
  ArRobot *arg1 = (ArRobot *) 0 ;
  ArLaser *arg2 = (ArLaser *) 0 ;
  double arg3 ;
  double arg4 ;
  char *arg5 = (char *) 0 ;
  bool arg6 ;
  ArLaserLogger *result = 0 ;
  
  arg1 = (ArRobot *)jarg1; 
  arg2 = (ArLaser *)jarg2; 
  arg3 = (double)jarg3; 
  arg4 = (double)jarg4; 
  arg5 = (char *)jarg5; 
  arg6 = jarg6 ? true : false; 
  result = (ArLaserLogger *)new ArLaserLogger(arg1,arg2,arg3,arg4,(char const *)arg5,arg6);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_ArLaserLogger__SWIG_7(void * jarg1, void * jarg2, double jarg3, double jarg4, char * jarg5) {
  void * jresult ;
  ArRobot *arg1 = (ArRobot *) 0 ;
  ArLaser *arg2 = (ArLaser *) 0 ;
  double arg3 ;
  double arg4 ;
  char *arg5 = (char *) 0 ;
  ArLaserLogger *result = 0 ;
  
  arg1 = (ArRobot *)jarg1; 
  arg2 = (ArLaser *)jarg2; 
  arg3 = (double)jarg3; 
  arg4 = (double)jarg4; 
  arg5 = (char *)jarg5; 
  result = (ArLaserLogger *)new ArLaserLogger(arg1,arg2,arg3,arg4,(char const *)arg5);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_ArLaserLogger(void * jarg1) {
  ArLaserLogger *arg1 = (ArLaserLogger *) 0 ;
  
  arg1 = (ArLaserLogger *)jarg1; 
  delete arg1;
}


SWIGEXPORT void SWIGSTDCALL CSharp_ArLaserLogger_addTagToLogPlain(void * jarg1, char * jarg2) {
  ArLaserLogger *arg1 = (ArLaserLogger *) 0 ;
  char *arg2 = (char *) 0 ;
  
  arg1 = (ArLaserLogger *)jarg1; 
  arg2 = (char *)jarg2; 
  (arg1)->addTagToLogPlain((char const *)arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_ArLaserLogger_addInfoToLogPlain(void * jarg1, char * jarg2) {
  ArLaserLogger *arg1 = (ArLaserLogger *) 0 ;
  char *arg2 = (char *) 0 ;
  
  arg1 = (ArLaserLogger *)jarg1; 
  arg2 = (char *)jarg2; 
  (arg1)->addInfoToLogPlain((char const *)arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_ArLaserLogger_setDistDiff(void * jarg1, double jarg2) {
  ArLaserLogger *arg1 = (ArLaserLogger *) 0 ;
  double arg2 ;
  
  arg1 = (ArLaserLogger *)jarg1; 
  arg2 = (double)jarg2; 
  (arg1)->setDistDiff(arg2);
}


SWIGEXPORT double SWIGSTDCALL CSharp_ArLaserLogger_getDistDiff(void * jarg1) {
  double jresult ;
  ArLaserLogger *arg1 = (ArLaserLogger *) 0 ;
  double result;
  
  arg1 = (ArLaserLogger *)jarg1; 
  result = (double)(arg1)->getDistDiff();
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_ArLaserLogger_setDegDiff(void * jarg1, double jarg2) {
  ArLaserLogger *arg1 = (ArLaserLogger *) 0 ;
  double arg2 ;
  
  arg1 = (ArLaserLogger *)jarg1; 
  arg2 = (double)jarg2; 
  (arg1)->setDegDiff(arg2);
}


SWIGEXPORT double SWIGSTDCALL CSharp_ArLaserLogger_getDegDiff(void * jarg1) {
  double jresult ;
  ArLaserLogger *arg1 = (ArLaserLogger *) 0 ;
  double result;
  
  arg1 = (ArLaserLogger *)jarg1; 
  result = (double)(arg1)->getDegDiff();
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_ArLaserLogger_takeReading(void * jarg1) {
  ArLaserLogger *arg1 = (ArLaserLogger *) 0 ;
  
  arg1 = (ArLaserLogger *)jarg1; 
  (arg1)->takeReading();
}


SWIGEXPORT void SWIGSTDCALL CSharp_ArLaserLogger_addGoal(void * jarg1) {
  ArLaserLogger *arg1 = (ArLaserLogger *) 0 ;
  
  arg1 = (ArLaserLogger *)jarg1; 
  (arg1)->addGoal();
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_ArLaserLogger_wasFileOpenedSuccessfully(void * jarg1) {
  unsigned int jresult ;
  ArLaserLogger *arg1 = (ArLaserLogger *) 0 ;
  bool result;
  
  arg1 = (ArLaserLogger *)jarg1; 
  result = (bool)(arg1)->wasFileOpenedSuccessfully();
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_ArLaserLogger_takingOldReadings(void * jarg1) {
  unsigned int jresult ;
  ArLaserLogger *arg1 = (ArLaserLogger *) 0 ;
  bool result;
  
  arg1 = (ArLaserLogger *)jarg1; 
  result = (bool)(arg1)->takingOldReadings();
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_ArLaserLogger_takeOldReadings(void * jarg1, unsigned int jarg2) {
  ArLaserLogger *arg1 = (ArLaserLogger *) 0 ;
  bool arg2 ;
  
  arg1 = (ArLaserLogger *)jarg1; 
  arg2 = jarg2 ? true : false; 
  (arg1)->takeOldReadings(arg2);
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_ArLaserLogger_takingNewReadings(void * jarg1) {
  unsigned int jresult ;
  ArLaserLogger *arg1 = (ArLaserLogger *) 0 ;
  bool result;
  
  arg1 = (ArLaserLogger *)jarg1; 
  result = (bool)(arg1)->takingNewReadings();
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_ArLaserLogger_takeNewReadings(void * jarg1, unsigned int jarg2) {
  ArLaserLogger *arg1 = (ArLaserLogger *) 0 ;
  bool arg2 ;
  
  arg1 = (ArLaserLogger *)jarg1; 
  arg2 = jarg2 ? true : false; 
  (arg1)->takeNewReadings(arg2);
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_ArLaserReflectorDevice__SWIG_0(void * jarg1, void * jarg2, char * jarg3) {
  void * jresult ;
  ArRangeDevice *arg1 = (ArRangeDevice *) 0 ;
  ArRobot *arg2 = (ArRobot *) 0 ;
  char *arg3 = (char *) 0 ;
  ArLaserReflectorDevice *result = 0 ;
  
  arg1 = (ArRangeDevice *)jarg1; 
  arg2 = (ArRobot *)jarg2; 
  arg3 = (char *)jarg3; 
  result = (ArLaserReflectorDevice *)new ArLaserReflectorDevice(arg1,arg2,(char const *)arg3);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_ArLaserReflectorDevice__SWIG_1(void * jarg1, void * jarg2) {
  void * jresult ;
  ArRangeDevice *arg1 = (ArRangeDevice *) 0 ;
  ArRobot *arg2 = (ArRobot *) 0 ;
  ArLaserReflectorDevice *result = 0 ;
  
  arg1 = (ArRangeDevice *)jarg1; 
  arg2 = (ArRobot *)jarg2; 
  result = (ArLaserReflectorDevice *)new ArLaserReflectorDevice(arg1,arg2);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_ArLaserReflectorDevice(void * jarg1) {
  ArLaserReflectorDevice *arg1 = (ArLaserReflectorDevice *) 0 ;
  
  arg1 = (ArLaserReflectorDevice *)jarg1; 
  delete arg1;
}


SWIGEXPORT void SWIGSTDCALL CSharp_ArLaserReflectorDevice_processReadings(void * jarg1) {
  ArLaserReflectorDevice *arg1 = (ArLaserReflectorDevice *) 0 ;
  
  arg1 = (ArLaserReflectorDevice *)jarg1; 
  (arg1)->processReadings();
}


SWIGEXPORT void SWIGSTDCALL CSharp_ArLaserReflectorDevice_setRobot(void * jarg1, void * jarg2) {
  ArLaserReflectorDevice *arg1 = (ArLaserReflectorDevice *) 0 ;
  ArRobot *arg2 = (ArRobot *) 0 ;
  
  arg1 = (ArLaserReflectorDevice *)jarg1; 
  arg2 = (ArRobot *)jarg2; 
  (arg1)->setRobot(arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_ArLaserReflectorDevice_addToConfig(void * jarg1, void * jarg2, char * jarg3) {
  ArLaserReflectorDevice *arg1 = (ArLaserReflectorDevice *) 0 ;
  ArConfig *arg2 = (ArConfig *) 0 ;
  char *arg3 = (char *) 0 ;
  
  arg1 = (ArLaserReflectorDevice *)jarg1; 
  arg2 = (ArConfig *)jarg2; 
  arg3 = (char *)jarg3; 
  (arg1)->addToConfig(arg2,(char const *)arg3);
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_ArLineFinder(void * jarg1) {
  void * jresult ;
  ArRangeDevice *arg1 = (ArRangeDevice *) 0 ;
  ArLineFinder *result = 0 ;
  
  arg1 = (ArRangeDevice *)jarg1; 
  result = (ArLineFinder *)new ArLineFinder(arg1);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_ArLineFinder(void * jarg1) {
  ArLineFinder *arg1 = (ArLineFinder *) 0 ;
  
  arg1 = (ArLineFinder *)jarg1; 
  delete arg1;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_ArLineFinder_getLinesAsSet(void * jarg1) {
  void * jresult ;
  ArLineFinder *arg1 = (ArLineFinder *) 0 ;
  SwigValueWrapper< std::set< ArLineFinderSegment * > > result;
  
  arg1 = (ArLineFinder *)jarg1; 
  result = (arg1)->getLinesAsSet();
  jresult = new std::set< ArLineFinderSegment * >((const std::set< ArLineFinderSegment * > &)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_ArLineFinder_getNonLinePointsAsSet(void * jarg1) {
  void * jresult ;
  ArLineFinder *arg1 = (ArLineFinder *) 0 ;
  SwigValueWrapper< std::set< ArPose > > result;
  
  arg1 = (ArLineFinder *)jarg1; 
  result = (arg1)->getNonLinePointsAsSet();
  jresult = new std::set< ArPose >((const std::set< ArPose > &)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_ArLineFinder_getLinesTakenPose(void * jarg1) {
  void * jresult ;
  ArLineFinder *arg1 = (ArLineFinder *) 0 ;
  ArPose result;
  
  arg1 = (ArLineFinder *)jarg1; 
  result = (arg1)->getLinesTakenPose();
  jresult = new ArPose((const ArPose &)result); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_ArLineFinder_saveLast(void * jarg1) {
  ArLineFinder *arg1 = (ArLineFinder *) 0 ;
  
  arg1 = (ArLineFinder *)jarg1; 
  (arg1)->saveLast();
}


SWIGEXPORT void SWIGSTDCALL CSharp_ArLineFinder_getLinesAndSaveThem(void * jarg1) {
  ArLineFinder *arg1 = (ArLineFinder *) 0 ;
  
  arg1 = (ArLineFinder *)jarg1; 
  (arg1)->getLinesAndSaveThem();
}


SWIGEXPORT void SWIGSTDCALL CSharp_ArLineFinder_setVerbose(void * jarg1, unsigned int jarg2) {
  ArLineFinder *arg1 = (ArLineFinder *) 0 ;
  bool arg2 ;
  
  arg1 = (ArLineFinder *)jarg1; 
  arg2 = jarg2 ? true : false; 
  (arg1)->setVerbose(arg2);
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_ArLineFinder_getVerbose(void * jarg1) {
  unsigned int jresult ;
  ArLineFinder *arg1 = (ArLineFinder *) 0 ;
  bool result;
  
  arg1 = (ArLineFinder *)jarg1; 
  result = (bool)(arg1)->getVerbose();
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_ArLineFinder_setLineCreationParams__SWIG_0(void * jarg1, int jarg2, int jarg3) {
  ArLineFinder *arg1 = (ArLineFinder *) 0 ;
  int arg2 ;
  int arg3 ;
  
  arg1 = (ArLineFinder *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (int)jarg3; 
  (arg1)->setLineCreationParams(arg2,arg3);
}


SWIGEXPORT void SWIGSTDCALL CSharp_ArLineFinder_setLineCreationParams__SWIG_1(void * jarg1, int jarg2) {
  ArLineFinder *arg1 = (ArLineFinder *) 0 ;
  int arg2 ;
  
  arg1 = (ArLineFinder *)jarg1; 
  arg2 = (int)jarg2; 
  (arg1)->setLineCreationParams(arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_ArLineFinder_setLineCreationParams__SWIG_2(void * jarg1) {
  ArLineFinder *arg1 = (ArLineFinder *) 0 ;
  
  arg1 = (ArLineFinder *)jarg1; 
  (arg1)->setLineCreationParams();
}


SWIGEXPORT void SWIGSTDCALL CSharp_ArLineFinder_setLineCombiningParams__SWIG_0(void * jarg1, int jarg2, int jarg3) {
  ArLineFinder *arg1 = (ArLineFinder *) 0 ;
  int arg2 ;
  int arg3 ;
  
  arg1 = (ArLineFinder *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (int)jarg3; 
  (arg1)->setLineCombiningParams(arg2,arg3);
}


SWIGEXPORT void SWIGSTDCALL CSharp_ArLineFinder_setLineCombiningParams__SWIG_1(void * jarg1, int jarg2) {
  ArLineFinder *arg1 = (ArLineFinder *) 0 ;
  int arg2 ;
  
  arg1 = (ArLineFinder *)jarg1; 
  arg2 = (int)jarg2; 
  (arg1)->setLineCombiningParams(arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_ArLineFinder_setLineCombiningParams__SWIG_2(void * jarg1) {
  ArLineFinder *arg1 = (ArLineFinder *) 0 ;
  
  arg1 = (ArLineFinder *)jarg1; 
  (arg1)->setLineCombiningParams();
}


SWIGEXPORT void SWIGSTDCALL CSharp_ArLineFinder_setLineFilteringParams__SWIG_0(void * jarg1, int jarg2, int jarg3) {
  ArLineFinder *arg1 = (ArLineFinder *) 0 ;
  int arg2 ;
  int arg3 ;
  
  arg1 = (ArLineFinder *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (int)jarg3; 
  (arg1)->setLineFilteringParams(arg2,arg3);
}


SWIGEXPORT void SWIGSTDCALL CSharp_ArLineFinder_setLineFilteringParams__SWIG_1(void * jarg1, int jarg2) {
  ArLineFinder *arg1 = (ArLineFinder *) 0 ;
  int arg2 ;
  
  arg1 = (ArLineFinder *)jarg1; 
  arg2 = (int)jarg2; 
  (arg1)->setLineFilteringParams(arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_ArLineFinder_setLineFilteringParams__SWIG_2(void * jarg1) {
  ArLineFinder *arg1 = (ArLineFinder *) 0 ;
  
  arg1 = (ArLineFinder *)jarg1; 
  (arg1)->setLineFilteringParams();
}


SWIGEXPORT void SWIGSTDCALL CSharp_ArLineFinder_setLineValidParams__SWIG_0(void * jarg1, int jarg2, int jarg3) {
  ArLineFinder *arg1 = (ArLineFinder *) 0 ;
  int arg2 ;
  int arg3 ;
  
  arg1 = (ArLineFinder *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (int)jarg3; 
  (arg1)->setLineValidParams(arg2,arg3);
}


SWIGEXPORT void SWIGSTDCALL CSharp_ArLineFinder_setLineValidParams__SWIG_1(void * jarg1, int jarg2) {
  ArLineFinder *arg1 = (ArLineFinder *) 0 ;
  int arg2 ;
  
  arg1 = (ArLineFinder *)jarg1; 
  arg2 = (int)jarg2; 
  (arg1)->setLineValidParams(arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_ArLineFinder_setLineValidParams__SWIG_2(void * jarg1) {
  ArLineFinder *arg1 = (ArLineFinder *) 0 ;
  
  arg1 = (ArLineFinder *)jarg1; 
  (arg1)->setLineValidParams();
}


SWIGEXPORT void SWIGSTDCALL CSharp_ArLineFinder_setMaxDistBetweenPoints__SWIG_0(void * jarg1, int jarg2) {
  ArLineFinder *arg1 = (ArLineFinder *) 0 ;
  int arg2 ;
  
  arg1 = (ArLineFinder *)jarg1; 
  arg2 = (int)jarg2; 
  (arg1)->setMaxDistBetweenPoints(arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_ArLineFinder_setMaxDistBetweenPoints__SWIG_1(void * jarg1) {
  ArLineFinder *arg1 = (ArLineFinder *) 0 ;
  
  arg1 = (ArLineFinder *)jarg1; 
  (arg1)->setMaxDistBetweenPoints();
}


SWIGEXPORT void SWIGSTDCALL CSharp_ArLineFinder_addToConfig(void * jarg1, void * jarg2, char * jarg3) {
  ArLineFinder *arg1 = (ArLineFinder *) 0 ;
  ArConfig *arg2 = (ArConfig *) 0 ;
  char *arg3 = (char *) 0 ;
  
  arg1 = (ArLineFinder *)jarg1; 
  arg2 = (ArConfig *)jarg2; 
  arg3 = (char *)jarg3; 
  (arg1)->addToConfig(arg2,(char const *)arg3);
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_ArLineFinderSegment__SWIG_0() {
  void * jresult ;
  ArLineFinderSegment *result = 0 ;
  
  result = (ArLineFinderSegment *)new ArLineFinderSegment();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_ArLineFinderSegment__SWIG_1(double jarg1, double jarg2, double jarg3, double jarg4, int jarg5, int jarg6, int jarg7) {
  void * jresult ;
  double arg1 ;
  double arg2 ;
  double arg3 ;
  double arg4 ;
  int arg5 ;
  int arg6 ;
  int arg7 ;
  ArLineFinderSegment *result = 0 ;
  
  arg1 = (double)jarg1; 
  arg2 = (double)jarg2; 
  arg3 = (double)jarg3; 
  arg4 = (double)jarg4; 
  arg5 = (int)jarg5; 
  arg6 = (int)jarg6; 
  arg7 = (int)jarg7; 
  result = (ArLineFinderSegment *)new ArLineFinderSegment(arg1,arg2,arg3,arg4,arg5,arg6,arg7);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_ArLineFinderSegment__SWIG_2(double jarg1, double jarg2, double jarg3, double jarg4, int jarg5, int jarg6) {
  void * jresult ;
  double arg1 ;
  double arg2 ;
  double arg3 ;
  double arg4 ;
  int arg5 ;
  int arg6 ;
  ArLineFinderSegment *result = 0 ;
  
  arg1 = (double)jarg1; 
  arg2 = (double)jarg2; 
  arg3 = (double)jarg3; 
  arg4 = (double)jarg4; 
  arg5 = (int)jarg5; 
  arg6 = (int)jarg6; 
  result = (ArLineFinderSegment *)new ArLineFinderSegment(arg1,arg2,arg3,arg4,arg5,arg6);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_ArLineFinderSegment__SWIG_3(double jarg1, double jarg2, double jarg3, double jarg4, int jarg5) {
  void * jresult ;
  double arg1 ;
  double arg2 ;
  double arg3 ;
  double arg4 ;
  int arg5 ;
  ArLineFinderSegment *result = 0 ;
  
  arg1 = (double)jarg1; 
  arg2 = (double)jarg2; 
  arg3 = (double)jarg3; 
  arg4 = (double)jarg4; 
  arg5 = (int)jarg5; 
  result = (ArLineFinderSegment *)new ArLineFinderSegment(arg1,arg2,arg3,arg4,arg5);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_ArLineFinderSegment__SWIG_4(double jarg1, double jarg2, double jarg3, double jarg4) {
  void * jresult ;
  double arg1 ;
  double arg2 ;
  double arg3 ;
  double arg4 ;
  ArLineFinderSegment *result = 0 ;
  
  arg1 = (double)jarg1; 
  arg2 = (double)jarg2; 
  arg3 = (double)jarg3; 
  arg4 = (double)jarg4; 
  result = (ArLineFinderSegment *)new ArLineFinderSegment(arg1,arg2,arg3,arg4);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_ArLineFinderSegment(void * jarg1) {
  ArLineFinderSegment *arg1 = (ArLineFinderSegment *) 0 ;
  
  arg1 = (ArLineFinderSegment *)jarg1; 
  delete arg1;
}


SWIGEXPORT void SWIGSTDCALL CSharp_ArLineFinderSegment_newEndPoints__SWIG_0(void * jarg1, double jarg2, double jarg3, double jarg4, double jarg5, int jarg6, int jarg7, int jarg8) {
  ArLineFinderSegment *arg1 = (ArLineFinderSegment *) 0 ;
  double arg2 ;
  double arg3 ;
  double arg4 ;
  double arg5 ;
  int arg6 ;
  int arg7 ;
  int arg8 ;
  
  arg1 = (ArLineFinderSegment *)jarg1; 
  arg2 = (double)jarg2; 
  arg3 = (double)jarg3; 
  arg4 = (double)jarg4; 
  arg5 = (double)jarg5; 
  arg6 = (int)jarg6; 
  arg7 = (int)jarg7; 
  arg8 = (int)jarg8; 
  (arg1)->newEndPoints(arg2,arg3,arg4,arg5,arg6,arg7,arg8);
}


SWIGEXPORT void SWIGSTDCALL CSharp_ArLineFinderSegment_newEndPoints__SWIG_1(void * jarg1, double jarg2, double jarg3, double jarg4, double jarg5, int jarg6, int jarg7) {
  ArLineFinderSegment *arg1 = (ArLineFinderSegment *) 0 ;
  double arg2 ;
  double arg3 ;
  double arg4 ;
  double arg5 ;
  int arg6 ;
  int arg7 ;
  
  arg1 = (ArLineFinderSegment *)jarg1; 
  arg2 = (double)jarg2; 
  arg3 = (double)jarg3; 
  arg4 = (double)jarg4; 
  arg5 = (double)jarg5; 
  arg6 = (int)jarg6; 
  arg7 = (int)jarg7; 
  (arg1)->newEndPoints(arg2,arg3,arg4,arg5,arg6,arg7);
}


SWIGEXPORT void SWIGSTDCALL CSharp_ArLineFinderSegment_newEndPoints__SWIG_2(void * jarg1, double jarg2, double jarg3, double jarg4, double jarg5, int jarg6) {
  ArLineFinderSegment *arg1 = (ArLineFinderSegment *) 0 ;
  double arg2 ;
  double arg3 ;
  double arg4 ;
  double arg5 ;
  int arg6 ;
  
  arg1 = (ArLineFinderSegment *)jarg1; 
  arg2 = (double)jarg2; 
  arg3 = (double)jarg3; 
  arg4 = (double)jarg4; 
  arg5 = (double)jarg5; 
  arg6 = (int)jarg6; 
  (arg1)->newEndPoints(arg2,arg3,arg4,arg5,arg6);
}


SWIGEXPORT void SWIGSTDCALL CSharp_ArLineFinderSegment_newEndPoints__SWIG_3(void * jarg1, double jarg2, double jarg3, double jarg4, double jarg5) {
  ArLineFinderSegment *arg1 = (ArLineFinderSegment *) 0 ;
  double arg2 ;
  double arg3 ;
  double arg4 ;
  double arg5 ;
  
  arg1 = (ArLineFinderSegment *)jarg1; 
  arg2 = (double)jarg2; 
  arg3 = (double)jarg3; 
  arg4 = (double)jarg4; 
  arg5 = (double)jarg5; 
  (arg1)->newEndPoints(arg2,arg3,arg4,arg5);
}


SWIGEXPORT double SWIGSTDCALL CSharp_ArLineFinderSegment_getLineAngle(void * jarg1) {
  double jresult ;
  ArLineFinderSegment *arg1 = (ArLineFinderSegment *) 0 ;
  double result;
  
  arg1 = (ArLineFinderSegment *)jarg1; 
  result = (double)(arg1)->getLineAngle();
  jresult = result; 
  return jresult;
}


SWIGEXPORT double SWIGSTDCALL CSharp_ArLineFinderSegment_getLength(void * jarg1) {
  double jresult ;
  ArLineFinderSegment *arg1 = (ArLineFinderSegment *) 0 ;
  double result;
  
  arg1 = (ArLineFinderSegment *)jarg1; 
  result = (double)(arg1)->getLength();
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_ArLineFinderSegment_getNumPoints(void * jarg1) {
  int jresult ;
  ArLineFinderSegment *arg1 = (ArLineFinderSegment *) 0 ;
  int result;
  
  arg1 = (ArLineFinderSegment *)jarg1; 
  result = (int)(arg1)->getNumPoints();
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_ArLineFinderSegment_getStartPoint(void * jarg1) {
  int jresult ;
  ArLineFinderSegment *arg1 = (ArLineFinderSegment *) 0 ;
  int result;
  
  arg1 = (ArLineFinderSegment *)jarg1; 
  result = (int)(arg1)->getStartPoint();
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_ArLineFinderSegment_getEndPoint(void * jarg1) {
  int jresult ;
  ArLineFinderSegment *arg1 = (ArLineFinderSegment *) 0 ;
  int result;
  
  arg1 = (ArLineFinderSegment *)jarg1; 
  result = (int)(arg1)->getEndPoint();
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_ArLineFinderSegment_setAveDistFromLine(void * jarg1, double jarg2) {
  ArLineFinderSegment *arg1 = (ArLineFinderSegment *) 0 ;
  double arg2 ;
  
  arg1 = (ArLineFinderSegment *)jarg1; 
  arg2 = (double)jarg2; 
  (arg1)->setAveDistFromLine(arg2);
}


SWIGEXPORT double SWIGSTDCALL CSharp_ArLineFinderSegment_getAveDistFromLine(void * jarg1) {
  double jresult ;
  ArLineFinderSegment *arg1 = (ArLineFinderSegment *) 0 ;
  double result;
  
  arg1 = (ArLineFinderSegment *)jarg1; 
  result = (double)(arg1)->getAveDistFromLine();
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_ArLog_log(int jarg1, char * jarg2) {
  ArLog::LogLevel arg1 ;
  char *arg2 = (char *) 0 ;
  
  arg1 = (ArLog::LogLevel)jarg1; 
  arg2 = (char *)jarg2; 
  ArLog::logPlain(arg1,(char const *)arg2);
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_ArLog_init__SWIG_0(int jarg1, int jarg2, char * jarg3, unsigned int jarg4, unsigned int jarg5, unsigned int jarg6) {
  unsigned int jresult ;
  ArLog::LogType arg1 ;
  ArLog::LogLevel arg2 ;
  char *arg3 = (char *) 0 ;
  bool arg4 ;
  bool arg5 ;
  bool arg6 ;
  bool result;
  
  arg1 = (ArLog::LogType)jarg1; 
  arg2 = (ArLog::LogLevel)jarg2; 
  arg3 = (char *)jarg3; 
  arg4 = jarg4 ? true : false; 
  arg5 = jarg5 ? true : false; 
  arg6 = jarg6 ? true : false; 
  result = (bool)ArLog::init(arg1,arg2,(char const *)arg3,arg4,arg5,arg6);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_ArLog_init__SWIG_1(int jarg1, int jarg2, char * jarg3, unsigned int jarg4, unsigned int jarg5) {
  unsigned int jresult ;
  ArLog::LogType arg1 ;
  ArLog::LogLevel arg2 ;
  char *arg3 = (char *) 0 ;
  bool arg4 ;
  bool arg5 ;
  bool result;
  
  arg1 = (ArLog::LogType)jarg1; 
  arg2 = (ArLog::LogLevel)jarg2; 
  arg3 = (char *)jarg3; 
  arg4 = jarg4 ? true : false; 
  arg5 = jarg5 ? true : false; 
  result = (bool)ArLog::init(arg1,arg2,(char const *)arg3,arg4,arg5);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_ArLog_init__SWIG_2(int jarg1, int jarg2, char * jarg3, unsigned int jarg4) {
  unsigned int jresult ;
  ArLog::LogType arg1 ;
  ArLog::LogLevel arg2 ;
  char *arg3 = (char *) 0 ;
  bool arg4 ;
  bool result;
  
  arg1 = (ArLog::LogType)jarg1; 
  arg2 = (ArLog::LogLevel)jarg2; 
  arg3 = (char *)jarg3; 
  arg4 = jarg4 ? true : false; 
  result = (bool)ArLog::init(arg1,arg2,(char const *)arg3,arg4);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_ArLog_init__SWIG_3(int jarg1, int jarg2, char * jarg3) {
  unsigned int jresult ;
  ArLog::LogType arg1 ;
  ArLog::LogLevel arg2 ;
  char *arg3 = (char *) 0 ;
  bool result;
  
  arg1 = (ArLog::LogType)jarg1; 
  arg2 = (ArLog::LogLevel)jarg2; 
  arg3 = (char *)jarg3; 
  result = (bool)ArLog::init(arg1,arg2,(char const *)arg3);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_ArLog_init__SWIG_4(int jarg1, int jarg2) {
  unsigned int jresult ;
  ArLog::LogType arg1 ;
  ArLog::LogLevel arg2 ;
  bool result;
  
  arg1 = (ArLog::LogType)jarg1; 
  arg2 = (ArLog::LogLevel)jarg2; 
  result = (bool)ArLog::init(arg1,arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_ArLog_close() {
  ArLog::close();
}


SWIGEXPORT void SWIGSTDCALL CSharp_ArLog_logErrorFromOS(int jarg1, char * jarg2) {
  ArLog::LogLevel arg1 ;
  char *arg2 = (char *) 0 ;
  void *arg3 = 0 ;
  
  arg1 = (ArLog::LogLevel)jarg1; 
  arg2 = (char *)jarg2; 
  ArLog::logErrorFromOS(arg1,(char const *)arg2,arg3);
}


SWIGEXPORT void SWIGSTDCALL CSharp_ArLog_logErrorFromOSPlain(int jarg1, char * jarg2) {
  ArLog::LogLevel arg1 ;
  char *arg2 = (char *) 0 ;
  
  arg1 = (ArLog::LogLevel)jarg1; 
  arg2 = (char *)jarg2; 
  ArLog::logErrorFromOSPlain(arg1,(char const *)arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_ArLog_logBacktrace(int jarg1) {
  ArLog::LogLevel arg1 ;
  
  arg1 = (ArLog::LogLevel)jarg1; 
  ArLog::logBacktrace(arg1);
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_ArLog_logFileContents(int jarg1, char * jarg2) {
  unsigned int jresult ;
  ArLog::LogLevel arg1 ;
  char *arg2 = (char *) 0 ;
  bool result;
  
  arg1 = (ArLog::LogLevel)jarg1; 
  arg2 = (char *)jarg2; 
  result = (bool)ArLog::logFileContents(arg1,(char const *)arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_ArLog_colbertPrint_set(void * jarg1) {
  void (*arg1)(int,char const *) = (void (*)(int,char const *)) 0 ;
  
  arg1 = (void (*)(int,char const *))jarg1; 
  ArLog::colbertPrint = arg1;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_ArLog_colbertPrint_get() {
  void * jresult ;
  void (*result)(int,char const *) = 0 ;
  
  result = (void (*)(int,char const *))ArLog::colbertPrint;
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_ArLog_addToConfig(void * jarg1) {
  ArConfig *arg1 = (ArConfig *) 0 ;
  
  arg1 = (ArConfig *)jarg1; 
  ArLog::addToConfig(arg1);
}


SWIGEXPORT void SWIGSTDCALL CSharp_ArLog_setLogLevel(int jarg1) {
  ArLog::LogLevel arg1 ;
  
  arg1 = (ArLog::LogLevel)jarg1; 
  ArLog::setLogLevel(arg1);
}


SWIGEXPORT void SWIGSTDCALL CSharp_ArLog_aramInit__SWIG_0(char * jarg1, int jarg2, double jarg3, unsigned int jarg4) {
  char *arg1 = (char *) 0 ;
  ArLog::LogLevel arg2 ;
  double arg3 ;
  bool arg4 ;
  
  arg1 = (char *)jarg1; 
  arg2 = (ArLog::LogLevel)jarg2; 
  arg3 = (double)jarg3; 
  arg4 = jarg4 ? true : false; 
  ArLog::aramInit((char const *)arg1,arg2,arg3,arg4);
}


SWIGEXPORT void SWIGSTDCALL CSharp_ArLog_aramInit__SWIG_1(char * jarg1, int jarg2, double jarg3) {
  char *arg1 = (char *) 0 ;
  ArLog::LogLevel arg2 ;
  double arg3 ;
  
  arg1 = (char *)jarg1; 
  arg2 = (ArLog::LogLevel)jarg2; 
  arg3 = (double)jarg3; 
  ArLog::aramInit((char const *)arg1,arg2,arg3);
}


SWIGEXPORT void SWIGSTDCALL CSharp_ArLog_aramInit__SWIG_2(char * jarg1, int jarg2) {
  char *arg1 = (char *) 0 ;
  ArLog::LogLevel arg2 ;
  
  arg1 = (char *)jarg1; 
  arg2 = (ArLog::LogLevel)jarg2; 
  ArLog::aramInit((char const *)arg1,arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_ArLog_aramInit__SWIG_3(char * jarg1) {
  char *arg1 = (char *) 0 ;
  
  arg1 = (char *)jarg1; 
  ArLog::aramInit((char const *)arg1);
}


SWIGEXPORT void SWIGSTDCALL CSharp_ArLog_setFunctor(void * jarg1) {
  ArFunctor1< char const * > *arg1 = (ArFunctor1< char const * > *) 0 ;
  
  arg1 = (ArFunctor1< char const * > *)jarg1; 
  ArLog::setFunctor(arg1);
}


SWIGEXPORT void SWIGSTDCALL CSharp_ArLog_clearFunctor() {
  ArLog::clearFunctor();
}


SWIGEXPORT void SWIGSTDCALL CSharp_ArLog_warning(char * jarg1) {
  char *arg1 = (char *) 0 ;
  void *arg2 = 0 ;
  
  arg1 = (char *)jarg1; 
  ArLog::warning((char const *)arg1,arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_ArLog_error(char * jarg1) {
  char *arg1 = (char *) 0 ;
  void *arg2 = 0 ;
  
  arg1 = (char *)jarg1; 
  ArLog::error((char const *)arg1,arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_ArLog_info(char * jarg1) {
  char *arg1 = (char *) 0 ;
  void *arg2 = 0 ;
  
  arg1 = (char *)jarg1; 
  ArLog::info((char const *)arg1,arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_ArLog_debug(char * jarg1) {
  char *arg1 = (char *) 0 ;
  void *arg2 = 0 ;
  
  arg1 = (char *)jarg1; 
  ArLog::debug((char const *)arg1,arg2);
}


SWIGEXPORT unsigned long SWIGSTDCALL CSharp_ArLog_getAvailableDiskSpaceMB() {
  unsigned long jresult ;
  unsigned long result;
  
  result = (unsigned long)ArLog::getAvailableDiskSpaceMB();
  jresult = (unsigned long)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_ArLog() {
  void * jresult ;
  ArLog *result = 0 ;
  
  result = (ArLog *)new ArLog();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_ArLog(void * jarg1) {
  ArLog *arg1 = (ArLog *) 0 ;
  
  arg1 = (ArLog *)jarg1; 
  delete arg1;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_ArLogFileConnection() {
  void * jresult ;
  ArLogFileConnection *result = 0 ;
  
  result = (ArLogFileConnection *)new ArLogFileConnection();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_ArLogFileConnection(void * jarg1) {
  ArLogFileConnection *arg1 = (ArLogFileConnection *) 0 ;
  
  arg1 = (ArLogFileConnection *)jarg1; 
  delete arg1;
}


SWIGEXPORT int SWIGSTDCALL CSharp_ArLogFileConnection_open__SWIG_0(void * jarg1, char * jarg2) {
  int jresult ;
  ArLogFileConnection *arg1 = (ArLogFileConnection *) 0 ;
  char *arg2 = (char *) 0 ;
  int result;
  
  arg1 = (ArLogFileConnection *)jarg1; 
  arg2 = (char *)jarg2; 
  result = (int)(arg1)->open((char const *)arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_ArLogFileConnection_open__SWIG_1(void * jarg1) {
  int jresult ;
  ArLogFileConnection *arg1 = (ArLogFileConnection *) 0 ;
  int result;
  
  arg1 = (ArLogFileConnection *)jarg1; 
  result = (int)(arg1)->open();
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_ArLogFileConnection_setLogFile__SWIG_0(void * jarg1, char * jarg2) {
  ArLogFileConnection *arg1 = (ArLogFileConnection *) 0 ;
  char *arg2 = (char *) 0 ;
  
  arg1 = (ArLogFileConnection *)jarg1; 
  arg2 = (char *)jarg2; 
  (arg1)->setLogFile((char const *)arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_ArLogFileConnection_setLogFile__SWIG_1(void * jarg1) {
  ArLogFileConnection *arg1 = (ArLogFileConnection *) 0 ;
  
  arg1 = (ArLogFileConnection *)jarg1; 
  (arg1)->setLogFile();
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_ArLogFileConnection_openSimple(void * jarg1) {
  unsigned int jresult ;
  ArLogFileConnection *arg1 = (ArLogFileConnection *) 0 ;
  bool result;
  
  arg1 = (ArLogFileConnection *)jarg1; 
  result = (bool)(arg1)->openSimple();
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_ArLogFileConnection_getStatus(void * jarg1) {
  int jresult ;
  ArLogFileConnection *arg1 = (ArLogFileConnection *) 0 ;
  int result;
  
  arg1 = (ArLogFileConnection *)jarg1; 
  result = (int)(arg1)->getStatus();
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_ArLogFileConnection_close(void * jarg1) {
  unsigned int jresult ;
  ArLogFileConnection *arg1 = (ArLogFileConnection *) 0 ;
  bool result;
  
  arg1 = (ArLogFileConnection *)jarg1; 
  result = (bool)(arg1)->close();
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_ArLogFileConnection_read__SWIG_0(void * jarg1, char * jarg2, unsigned int jarg3, unsigned int jarg4) {
  int jresult ;
  ArLogFileConnection *arg1 = (ArLogFileConnection *) 0 ;
  char *arg2 = (char *) 0 ;
  unsigned int arg3 ;
  unsigned int arg4 ;
  int result;
  
  arg1 = (ArLogFileConnection *)jarg1; 
  arg2 = (char *)jarg2; 
  arg3 = (unsigned int)jarg3; 
  arg4 = (unsigned int)jarg4; 
  result = (int)(arg1)->read((char const *)arg2,arg3,arg4);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_ArLogFileConnection_read__SWIG_1(void * jarg1, char * jarg2, unsigned int jarg3) {
  int jresult ;
  ArLogFileConnection *arg1 = (ArLogFileConnection *) 0 ;
  char *arg2 = (char *) 0 ;
  unsigned int arg3 ;
  int result;
  
  arg1 = (ArLogFileConnection *)jarg1; 
  arg2 = (char *)jarg2; 
  arg3 = (unsigned int)jarg3; 
  result = (int)(arg1)->read((char const *)arg2,arg3);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_ArLogFileConnection_write(void * jarg1, char * jarg2, unsigned int jarg3) {
  int jresult ;
  ArLogFileConnection *arg1 = (ArLogFileConnection *) 0 ;
  char *arg2 = (char *) 0 ;
  unsigned int arg3 ;
  int result;
  
  arg1 = (ArLogFileConnection *)jarg1; 
  arg2 = (char *)jarg2; 
  arg3 = (unsigned int)jarg3; 
  result = (int)(arg1)->write((char const *)arg2,arg3);
  jresult = result; 
  return jresult;
}


SWIGEXPORT char * SWIGSTDCALL CSharp_ArLogFileConnection_getOpenMessage(void * jarg1, int jarg2) {
  char * jresult ;
  ArLogFileConnection *arg1 = (ArLogFileConnection *) 0 ;
  int arg2 ;
  char *result = 0 ;
  
  arg1 = (ArLogFileConnection *)jarg1; 
  arg2 = (int)jarg2; 
  result = (char *)(arg1)->getOpenMessage(arg2);
  jresult = SWIG_csharp_string_callback((const char *)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_ArLogFileConnection_getTimeRead(void * jarg1, int jarg2) {
  void * jresult ;
  ArLogFileConnection *arg1 = (ArLogFileConnection *) 0 ;
  int arg2 ;
  ArTime result;
  
  arg1 = (ArLogFileConnection *)jarg1; 
  arg2 = (int)jarg2; 
  result = (arg1)->getTimeRead(arg2);
  jresult = new ArTime((const ArTime &)result); 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_ArLogFileConnection_isTimeStamping(void * jarg1) {
  unsigned int jresult ;
  ArLogFileConnection *arg1 = (ArLogFileConnection *) 0 ;
  bool result;
  
  arg1 = (ArLogFileConnection *)jarg1; 
  result = (bool)(arg1)->isTimeStamping();
  jresult = result; 
  return jresult;
}


SWIGEXPORT char * SWIGSTDCALL CSharp_ArLogFileConnection_getLogFile(void * jarg1) {
  char * jresult ;
  ArLogFileConnection *arg1 = (ArLogFileConnection *) 0 ;
  char *result = 0 ;
  
  arg1 = (ArLogFileConnection *)jarg1; 
  result = (char *)(arg1)->getLogFile();
  jresult = SWIG_csharp_string_callback((const char *)result); 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_ArLogFileConnection_internalOpen(void * jarg1) {
  int jresult ;
  ArLogFileConnection *arg1 = (ArLogFileConnection *) 0 ;
  int result;
  
  arg1 = (ArLogFileConnection *)jarg1; 
  result = (int)(arg1)->internalOpen();
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_ArLogFileConnection_myPose_set(void * jarg1, void * jarg2) {
  ArLogFileConnection *arg1 = (ArLogFileConnection *) 0 ;
  ArPose *arg2 = (ArPose *) 0 ;
  
  arg1 = (ArLogFileConnection *)jarg1; 
  arg2 = (ArPose *)jarg2; 
  if (arg1) (arg1)->myPose = *arg2;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_ArLogFileConnection_myPose_get(void * jarg1) {
  void * jresult ;
  ArLogFileConnection *arg1 = (ArLogFileConnection *) 0 ;
  ArPose *result = 0 ;
  
  arg1 = (ArLogFileConnection *)jarg1; 
  result = (ArPose *)& ((arg1)->myPose);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_ArLogFileConnection_havePose_set(void * jarg1, unsigned int jarg2) {
  ArLogFileConnection *arg1 = (ArLogFileConnection *) 0 ;
  bool arg2 ;
  
  arg1 = (ArLogFileConnection *)jarg1; 
  arg2 = jarg2 ? true : false; 
  if (arg1) (arg1)->havePose = arg2;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_ArLogFileConnection_havePose_get(void * jarg1) {
  unsigned int jresult ;
  ArLogFileConnection *arg1 = (ArLogFileConnection *) 0 ;
  bool result;
  
  arg1 = (ArLogFileConnection *)jarg1; 
  result = (bool) ((arg1)->havePose);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_ArLogFileConnection_myName_set(void * jarg1, char * jarg2) {
  ArLogFileConnection *arg1 = (ArLogFileConnection *) 0 ;
  char *arg2 ;
  
  arg1 = (ArLogFileConnection *)jarg1; 
  arg2 = (char *)jarg2; 
  {
    if(arg2) {
      strncpy((char*)arg1->myName, (const char *)arg2, 100-1);
      arg1->myName[100-1] = 0;
    } else {
      arg1->myName[0] = 0;
    }
  }
}


SWIGEXPORT char * SWIGSTDCALL CSharp_ArLogFileConnection_myName_get(void * jarg1) {
  char * jresult ;
  ArLogFileConnection *arg1 = (ArLogFileConnection *) 0 ;
  char *result = 0 ;
  
  arg1 = (ArLogFileConnection *)jarg1; 
  result = (char *)(char *) ((arg1)->myName);
  jresult = SWIG_csharp_string_callback((const char *)result); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_ArLogFileConnection_myType_set(void * jarg1, char * jarg2) {
  ArLogFileConnection *arg1 = (ArLogFileConnection *) 0 ;
  char *arg2 ;
  
  arg1 = (ArLogFileConnection *)jarg1; 
  arg2 = (char *)jarg2; 
  {
    if(arg2) {
      strncpy((char*)arg1->myType, (const char *)arg2, 20-1);
      arg1->myType[20-1] = 0;
    } else {
      arg1->myType[0] = 0;
    }
  }
}


SWIGEXPORT char * SWIGSTDCALL CSharp_ArLogFileConnection_myType_get(void * jarg1) {
  char * jresult ;
  ArLogFileConnection *arg1 = (ArLogFileConnection *) 0 ;
  char *result = 0 ;
  
  arg1 = (ArLogFileConnection *)jarg1; 
  result = (char *)(char *) ((arg1)->myType);
  jresult = SWIG_csharp_string_callback((const char *)result); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_ArLogFileConnection_mySubtype_set(void * jarg1, char * jarg2) {
  ArLogFileConnection *arg1 = (ArLogFileConnection *) 0 ;
  char *arg2 ;
  
  arg1 = (ArLogFileConnection *)jarg1; 
  arg2 = (char *)jarg2; 
  {
    if(arg2) {
      strncpy((char*)arg1->mySubtype, (const char *)arg2, 20-1);
      arg1->mySubtype[20-1] = 0;
    } else {
      arg1->mySubtype[0] = 0;
    }
  }
}


SWIGEXPORT char * SWIGSTDCALL CSharp_ArLogFileConnection_mySubtype_get(void * jarg1) {
  char * jresult ;
  ArLogFileConnection *arg1 = (ArLogFileConnection *) 0 ;
  char *result = 0 ;
  
  arg1 = (ArLogFileConnection *)jarg1; 
  result = (char *)(char *) ((arg1)->mySubtype);
  jresult = SWIG_csharp_string_callback((const char *)result); 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_ArMD5Calculator_DIGEST_LENGTH_get() {
  int jresult ;
  int result;
  
  result = (int)ArMD5Calculator::DIGEST_LENGTH;
  jresult = (int)result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_ArMD5Calculator_DISPLAY_LENGTH_get() {
  int jresult ;
  int result;
  
  result = (int)ArMD5Calculator::DISPLAY_LENGTH;
  jresult = (int)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_ArMD5Calculator_toDisplay(void * jarg1, unsigned long jarg2, char * jarg3, unsigned long jarg4) {
  unsigned char *arg1 = (unsigned char *) 0 ;
  size_t arg2 ;
  char *arg3 = (char *) 0 ;
  size_t arg4 ;
  
  arg1 = (unsigned char *)jarg1; 
  arg2 = (size_t)jarg2; 
  arg3 = (char *)jarg3; 
  arg4 = (size_t)jarg4; 
  ArMD5Calculator::toDisplay((unsigned char const *)arg1,arg2,arg3,arg4);
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_ArMD5Calculator_calculateChecksum(char * jarg1, void * jarg2, unsigned long jarg3) {
  unsigned int jresult ;
  char *arg1 = (char *) 0 ;
  unsigned char *arg2 = (unsigned char *) 0 ;
  size_t arg3 ;
  bool result;
  
  arg1 = (char *)jarg1; 
  arg2 = (unsigned char *)jarg2; 
  arg3 = (size_t)jarg3; 
  result = (bool)ArMD5Calculator::calculateChecksum((char const *)arg1,arg2,arg3);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_ArMD5Calculator__SWIG_0(void * jarg1) {
  void * jresult ;
  ArFunctor1< char const * > *arg1 = (ArFunctor1< char const * > *) 0 ;
  ArMD5Calculator *result = 0 ;
  
  arg1 = (ArFunctor1< char const * > *)jarg1; 
  result = (ArMD5Calculator *)new ArMD5Calculator(arg1);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_ArMD5Calculator__SWIG_1() {
  void * jresult ;
  ArMD5Calculator *result = 0 ;
  
  result = (ArMD5Calculator *)new ArMD5Calculator();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_ArMD5Calculator(void * jarg1) {
  ArMD5Calculator *arg1 = (ArMD5Calculator *) 0 ;
  
  arg1 = (ArMD5Calculator *)jarg1; 
  delete arg1;
}


SWIGEXPORT void SWIGSTDCALL CSharp_ArMD5Calculator_reset(void * jarg1) {
  ArMD5Calculator *arg1 = (ArMD5Calculator *) 0 ;
  
  arg1 = (ArMD5Calculator *)jarg1; 
  (arg1)->reset();
}


SWIGEXPORT void SWIGSTDCALL CSharp_ArMD5Calculator_append(void * jarg1, char * jarg2) {
  ArMD5Calculator *arg1 = (ArMD5Calculator *) 0 ;
  char *arg2 = (char *) 0 ;
  
  arg1 = (ArMD5Calculator *)jarg1; 
  arg2 = (char *)jarg2; 
  (arg1)->append((char const *)arg2);
}


SWIGEXPORT void * SWIGSTDCALL CSharp_ArMD5Calculator_getDigest(void * jarg1) {
  void * jresult ;
  ArMD5Calculator *arg1 = (ArMD5Calculator *) 0 ;
  unsigned char *result = 0 ;
  
  arg1 = (ArMD5Calculator *)jarg1; 
  result = (unsigned char *)(arg1)->getDigest();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_ArMD5Calculator_getFunctor(void * jarg1) {
  void * jresult ;
  ArMD5Calculator *arg1 = (ArMD5Calculator *) 0 ;
  ArFunctor1< char const * > *result = 0 ;
  
  arg1 = (ArMD5Calculator *)jarg1; 
  result = (ArFunctor1< char const * > *)(arg1)->getFunctor();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_ArMD5Calculator_getSecondFunctor(void * jarg1) {
  void * jresult ;
  ArMD5Calculator *arg1 = (ArMD5Calculator *) 0 ;
  ArFunctor1< char const * > *result = 0 ;
  
  arg1 = (ArMD5Calculator *)jarg1; 
  result = (ArFunctor1< char const * > *)(arg1)->getSecondFunctor();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_ArMD5Calculator_setSecondFunctor(void * jarg1, void * jarg2) {
  ArMD5Calculator *arg1 = (ArMD5Calculator *) 0 ;
  ArFunctor1< char const * > *arg2 = (ArFunctor1< char const * > *) 0 ;
  
  arg1 = (ArMD5Calculator *)jarg1; 
  arg2 = (ArFunctor1< char const * > *)jarg2; 
  (arg1)->setSecondFunctor(arg2);
}


SWIGEXPORT char * SWIGSTDCALL CSharp_ARMAP_DEFAULT_SCAN_TYPE_get() {
  char * jresult ;
  char *result = 0 ;
  
  result = (char *)("");
  jresult = SWIG_csharp_string_callback((const char *)result); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_ArMapObjectsInterface(void * jarg1) {
  ArMapObjectsInterface *arg1 = (ArMapObjectsInterface *) 0 ;
  
  arg1 = (ArMapObjectsInterface *)jarg1; 
  delete arg1;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_ArMapObjectsInterface_findFirstMapObject__SWIG_0(void * jarg1, char * jarg2, char * jarg3, unsigned int jarg4) {
  void * jresult ;
  ArMapObjectsInterface *arg1 = (ArMapObjectsInterface *) 0 ;
  char *arg2 = (char *) 0 ;
  char *arg3 = (char *) 0 ;
  bool arg4 ;
  ArMapObject *result = 0 ;
  
  arg1 = (ArMapObjectsInterface *)jarg1; 
  arg2 = (char *)jarg2; 
  arg3 = (char *)jarg3; 
  arg4 = jarg4 ? true : false; 
  result = (ArMapObject *)(arg1)->findFirstMapObject((char const *)arg2,(char const *)arg3,arg4);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_ArMapObjectsInterface_findFirstMapObject__SWIG_1(void * jarg1, char * jarg2, char * jarg3) {
  void * jresult ;
  ArMapObjectsInterface *arg1 = (ArMapObjectsInterface *) 0 ;
  char *arg2 = (char *) 0 ;
  char *arg3 = (char *) 0 ;
  ArMapObject *result = 0 ;
  
  arg1 = (ArMapObjectsInterface *)jarg1; 
  arg2 = (char *)jarg2; 
  arg3 = (char *)jarg3; 
  result = (ArMapObject *)(arg1)->findFirstMapObject((char const *)arg2,(char const *)arg3);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_ArMapObjectsInterface_findMapObject__SWIG_0(void * jarg1, char * jarg2, char * jarg3, unsigned int jarg4) {
  void * jresult ;
  ArMapObjectsInterface *arg1 = (ArMapObjectsInterface *) 0 ;
  char *arg2 = (char *) 0 ;
  char *arg3 = (char *) 0 ;
  bool arg4 ;
  ArMapObject *result = 0 ;
  
  arg1 = (ArMapObjectsInterface *)jarg1; 
  arg2 = (char *)jarg2; 
  arg3 = (char *)jarg3; 
  arg4 = jarg4 ? true : false; 
  result = (ArMapObject *)(arg1)->findMapObject((char const *)arg2,(char const *)arg3,arg4);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_ArMapObjectsInterface_findMapObject__SWIG_1(void * jarg1, char * jarg2, char * jarg3) {
  void * jresult ;
  ArMapObjectsInterface *arg1 = (ArMapObjectsInterface *) 0 ;
  char *arg2 = (char *) 0 ;
  char *arg3 = (char *) 0 ;
  ArMapObject *result = 0 ;
  
  arg1 = (ArMapObjectsInterface *)jarg1; 
  arg2 = (char *)jarg2; 
  arg3 = (char *)jarg3; 
  result = (ArMapObject *)(arg1)->findMapObject((char const *)arg2,(char const *)arg3);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_ArMapObjectsInterface_findMapObject__SWIG_2(void * jarg1, char * jarg2) {
  void * jresult ;
  ArMapObjectsInterface *arg1 = (ArMapObjectsInterface *) 0 ;
  char *arg2 = (char *) 0 ;
  ArMapObject *result = 0 ;
  
  arg1 = (ArMapObjectsInterface *)jarg1; 
  arg2 = (char *)jarg2; 
  result = (ArMapObject *)(arg1)->findMapObject((char const *)arg2);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_ArMapObjectsInterface_findMapObjectsOfType__SWIG_0(void * jarg1, char * jarg2, unsigned int jarg3) {
  void * jresult ;
  ArMapObjectsInterface *arg1 = (ArMapObjectsInterface *) 0 ;
  char *arg2 = (char *) 0 ;
  bool arg3 ;
  SwigValueWrapper< std::list< ArMapObject * > > result;
  
  arg1 = (ArMapObjectsInterface *)jarg1; 
  arg2 = (char *)jarg2; 
  arg3 = jarg3 ? true : false; 
  result = (arg1)->findMapObjectsOfType((char const *)arg2,arg3);
  jresult = new std::list< ArMapObject * >((const std::list< ArMapObject * > &)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_ArMapObjectsInterface_findMapObjectsOfType__SWIG_1(void * jarg1, char * jarg2) {
  void * jresult ;
  ArMapObjectsInterface *arg1 = (ArMapObjectsInterface *) 0 ;
  char *arg2 = (char *) 0 ;
  SwigValueWrapper< std::list< ArMapObject * > > result;
  
  arg1 = (ArMapObjectsInterface *)jarg1; 
  arg2 = (char *)jarg2; 
  result = (arg1)->findMapObjectsOfType((char const *)arg2);
  jresult = new std::list< ArMapObject * >((const std::list< ArMapObject * > &)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_ArMapObjectsInterface_getMapObjects(void * jarg1) {
  void * jresult ;
  ArMapObjectsInterface *arg1 = (ArMapObjectsInterface *) 0 ;
  std::list< ArMapObject * > *result = 0 ;
  
  arg1 = (ArMapObjectsInterface *)jarg1; 
  result = (std::list< ArMapObject * > *)(arg1)->getMapObjects();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_ArMapObjectsInterface_setMapObjects__SWIG_0(void * jarg1, void * jarg2, unsigned int jarg3, void * jarg4) {
  ArMapObjectsInterface *arg1 = (ArMapObjectsInterface *) 0 ;
  std::list< ArMapObject * > *arg2 = (std::list< ArMapObject * > *) 0 ;
  bool arg3 ;
  ArMapChangeDetails *arg4 = (ArMapChangeDetails *) 0 ;
  
  arg1 = (ArMapObjectsInterface *)jarg1; 
  arg2 = (std::list< ArMapObject * > *)jarg2; 
  arg3 = jarg3 ? true : false; 
  arg4 = (ArMapChangeDetails *)jarg4; 
  (arg1)->setMapObjects((std::list< ArMapObject * > const *)arg2,arg3,arg4);
}


SWIGEXPORT void SWIGSTDCALL CSharp_ArMapObjectsInterface_setMapObjects__SWIG_1(void * jarg1, void * jarg2, unsigned int jarg3) {
  ArMapObjectsInterface *arg1 = (ArMapObjectsInterface *) 0 ;
  std::list< ArMapObject * > *arg2 = (std::list< ArMapObject * > *) 0 ;
  bool arg3 ;
  
  arg1 = (ArMapObjectsInterface *)jarg1; 
  arg2 = (std::list< ArMapObject * > *)jarg2; 
  arg3 = jarg3 ? true : false; 
  (arg1)->setMapObjects((std::list< ArMapObject * > const *)arg2,arg3);
}


SWIGEXPORT void SWIGSTDCALL CSharp_ArMapObjectsInterface_setMapObjects__SWIG_2(void * jarg1, void * jarg2) {
  ArMapObjectsInterface *arg1 = (ArMapObjectsInterface *) 0 ;
  std::list< ArMapObject * > *arg2 = (std::list< ArMapObject * > *) 0 ;
  
  arg1 = (ArMapObjectsInterface *)jarg1; 
  arg2 = (std::list< ArMapObject * > *)jarg2; 
  (arg1)->setMapObjects((std::list< ArMapObject * > const *)arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_ArMapObjectsInterface_writeObjectListToFunctor(void * jarg1, void * jarg2, char * jarg3) {
  ArMapObjectsInterface *arg1 = (ArMapObjectsInterface *) 0 ;
  ArFunctor1< char const * > *arg2 = (ArFunctor1< char const * > *) 0 ;
  char *arg3 = (char *) 0 ;
  
  arg1 = (ArMapObjectsInterface *)jarg1; 
  arg2 = (ArFunctor1< char const * > *)jarg2; 
  arg3 = (char *)jarg3; 
  (arg1)->writeObjectListToFunctor(arg2,(char const *)arg3);
}


SWIGEXPORT void SWIGSTDCALL CSharp_ArMapInfoInterface_MAP_INFO_NAME_set(char * jarg1) {
  char *arg1 = (char *) 0 ;
  
  arg1 = (char *)jarg1; 
  {
    if (arg1) {
      ArMapInfoInterface::MAP_INFO_NAME = (char const *) (new char[strlen((const char *)arg1)+1]);
      strcpy((char *)ArMapInfoInterface::MAP_INFO_NAME, (const char *)arg1);
    } else {
      ArMapInfoInterface::MAP_INFO_NAME = 0;
    }
  }
}


SWIGEXPORT char * SWIGSTDCALL CSharp_ArMapInfoInterface_MAP_INFO_NAME_get() {
  char * jresult ;
  char *result = 0 ;
  
  result = (char *)ArMapInfoInterface::MAP_INFO_NAME;
  jresult = SWIG_csharp_string_callback((const char *)result); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_ArMapInfoInterface_MACRO_INFO_NAME_set(char * jarg1) {
  char *arg1 = (char *) 0 ;
  
  arg1 = (char *)jarg1; 
  {
    if (arg1) {
      ArMapInfoInterface::MACRO_INFO_NAME = (char const *) (new char[strlen((const char *)arg1)+1]);
      strcpy((char *)ArMapInfoInterface::MACRO_INFO_NAME, (const char *)arg1);
    } else {
      ArMapInfoInterface::MACRO_INFO_NAME = 0;
    }
  }
}


SWIGEXPORT char * SWIGSTDCALL CSharp_ArMapInfoInterface_MACRO_INFO_NAME_get() {
  char * jresult ;
  char *result = 0 ;
  
  result = (char *)ArMapInfoInterface::MACRO_INFO_NAME;
  jresult = SWIG_csharp_string_callback((const char *)result); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_ArMapInfoInterface_META_INFO_NAME_set(char * jarg1) {
  char *arg1 = (char *) 0 ;
  
  arg1 = (char *)jarg1; 
  {
    if (arg1) {
      ArMapInfoInterface::META_INFO_NAME = (char const *) (new char[strlen((const char *)arg1)+1]);
      strcpy((char *)ArMapInfoInterface::META_INFO_NAME, (const char *)arg1);
    } else {
      ArMapInfoInterface::META_INFO_NAME = 0;
    }
  }
}


SWIGEXPORT char * SWIGSTDCALL CSharp_ArMapInfoInterface_META_INFO_NAME_get() {
  char * jresult ;
  char *result = 0 ;
  
  result = (char *)ArMapInfoInterface::META_INFO_NAME;
  jresult = SWIG_csharp_string_callback((const char *)result); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_ArMapInfoInterface_TASK_INFO_NAME_set(char * jarg1) {
  char *arg1 = (char *) 0 ;
  
  arg1 = (char *)jarg1; 
  {
    if (arg1) {
      ArMapInfoInterface::TASK_INFO_NAME = (char const *) (new char[strlen((const char *)arg1)+1]);
      strcpy((char *)ArMapInfoInterface::TASK_INFO_NAME, (const char *)arg1);
    } else {
      ArMapInfoInterface::TASK_INFO_NAME = 0;
    }
  }
}


SWIGEXPORT char * SWIGSTDCALL CSharp_ArMapInfoInterface_TASK_INFO_NAME_get() {
  char * jresult ;
  char *result = 0 ;
  
  result = (char *)ArMapInfoInterface::TASK_INFO_NAME;
  jresult = SWIG_csharp_string_callback((const char *)result); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_ArMapInfoInterface_ROUTE_INFO_NAME_set(char * jarg1) {
  char *arg1 = (char *) 0 ;
  
  arg1 = (char *)jarg1; 
  {
    if (arg1) {
      ArMapInfoInterface::ROUTE_INFO_NAME = (char const *) (new char[strlen((const char *)arg1)+1]);
      strcpy((char *)ArMapInfoInterface::ROUTE_INFO_NAME, (const char *)arg1);
    } else {
      ArMapInfoInterface::ROUTE_INFO_NAME = 0;
    }
  }
}


SWIGEXPORT char * SWIGSTDCALL CSharp_ArMapInfoInterface_ROUTE_INFO_NAME_get() {
  char * jresult ;
  char *result = 0 ;
  
  result = (char *)ArMapInfoInterface::ROUTE_INFO_NAME;
  jresult = SWIG_csharp_string_callback((const char *)result); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_ArMapInfoInterface_SCHED_TASK_INFO_NAME_set(char * jarg1) {
  char *arg1 = (char *) 0 ;
  
  arg1 = (char *)jarg1; 
  {
    if (arg1) {
      ArMapInfoInterface::SCHED_TASK_INFO_NAME = (char const *) (new char[strlen((const char *)arg1)+1]);
      strcpy((char *)ArMapInfoInterface::SCHED_TASK_INFO_NAME, (const char *)arg1);
    } else {
      ArMapInfoInterface::SCHED_TASK_INFO_NAME = 0;
    }
  }
}


SWIGEXPORT char * SWIGSTDCALL CSharp_ArMapInfoInterface_SCHED_TASK_INFO_NAME_get() {
  char * jresult ;
  char *result = 0 ;
  
  result = (char *)ArMapInfoInterface::SCHED_TASK_INFO_NAME;
  jresult = SWIG_csharp_string_callback((const char *)result); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_ArMapInfoInterface_SCHED_INFO_NAME_set(char * jarg1) {
  char *arg1 = (char *) 0 ;
  
  arg1 = (char *)jarg1; 
  {
    if (arg1) {
      ArMapInfoInterface::SCHED_INFO_NAME = (char const *) (new char[strlen((const char *)arg1)+1]);
      strcpy((char *)ArMapInfoInterface::SCHED_INFO_NAME, (const char *)arg1);
    } else {
      ArMapInfoInterface::SCHED_INFO_NAME = 0;
    }
  }
}


SWIGEXPORT char * SWIGSTDCALL CSharp_ArMapInfoInterface_SCHED_INFO_NAME_get() {
  char * jresult ;
  char *result = 0 ;
  
  result = (char *)ArMapInfoInterface::SCHED_INFO_NAME;
  jresult = SWIG_csharp_string_callback((const char *)result); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_ArMapInfoInterface_CAIRN_INFO_NAME_set(char * jarg1) {
  char *arg1 = (char *) 0 ;
  
  arg1 = (char *)jarg1; 
  {
    if (arg1) {
      ArMapInfoInterface::CAIRN_INFO_NAME = (char const *) (new char[strlen((const char *)arg1)+1]);
      strcpy((char *)ArMapInfoInterface::CAIRN_INFO_NAME, (const char *)arg1);
    } else {
      ArMapInfoInterface::CAIRN_INFO_NAME = 0;
    }
  }
}


SWIGEXPORT char * SWIGSTDCALL CSharp_ArMapInfoInterface_CAIRN_INFO_NAME_get() {
  char * jresult ;
  char *result = 0 ;
  
  result = (char *)ArMapInfoInterface::CAIRN_INFO_NAME;
  jresult = SWIG_csharp_string_callback((const char *)result); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_ArMapInfoInterface_CUSTOM_INFO_NAME_set(char * jarg1) {
  char *arg1 = (char *) 0 ;
  
  arg1 = (char *)jarg1; 
  {
    if (arg1) {
      ArMapInfoInterface::CUSTOM_INFO_NAME = (char const *) (new char[strlen((const char *)arg1)+1]);
      strcpy((char *)ArMapInfoInterface::CUSTOM_INFO_NAME, (const char *)arg1);
    } else {
      ArMapInfoInterface::CUSTOM_INFO_NAME = 0;
    }
  }
}


SWIGEXPORT char * SWIGSTDCALL CSharp_ArMapInfoInterface_CUSTOM_INFO_NAME_get() {
  char * jresult ;
  char *result = 0 ;
  
  result = (char *)ArMapInfoInterface::CUSTOM_INFO_NAME;
  jresult = SWIG_csharp_string_callback((const char *)result); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_ArMapInfoInterface(void * jarg1) {
  ArMapInfoInterface *arg1 = (ArMapInfoInterface *) 0 ;
  
  arg1 = (ArMapInfoInterface *)jarg1; 
  delete arg1;
}


SWIGEXPORT int SWIGSTDCALL CSharp_ArMapInfoInterface_getInfoCount(void * jarg1) {
  int jresult ;
  ArMapInfoInterface *arg1 = (ArMapInfoInterface *) 0 ;
  int result;
  
  arg1 = (ArMapInfoInterface *)jarg1; 
  result = (int)((ArMapInfoInterface const *)arg1)->getInfoCount();
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_ArMapInfoInterface_getInfoNames(void * jarg1) {
  void * jresult ;
  ArMapInfoInterface *arg1 = (ArMapInfoInterface *) 0 ;
  SwigValueWrapper< std::list< std::string > > result;
  
  arg1 = (ArMapInfoInterface *)jarg1; 
  result = ((ArMapInfoInterface const *)arg1)->getInfoNames();
  jresult = new std::list< std::string >((const std::list< std::string > &)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_ArMapInfoInterface_getInfo__SWIG_0(void * jarg1, char * jarg2) {
  void * jresult ;
  ArMapInfoInterface *arg1 = (ArMapInfoInterface *) 0 ;
  char *arg2 = (char *) 0 ;
  std::list< ArArgumentBuilder * > *result = 0 ;
  
  arg1 = (ArMapInfoInterface *)jarg1; 
  arg2 = (char *)jarg2; 
  result = (std::list< ArArgumentBuilder * > *)(arg1)->getInfo((char const *)arg2);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_ArMapInfoInterface_getInfo__SWIG_1(void * jarg1, int jarg2) {
  void * jresult ;
  ArMapInfoInterface *arg1 = (ArMapInfoInterface *) 0 ;
  int arg2 ;
  std::list< ArArgumentBuilder * > *result = 0 ;
  
  arg1 = (ArMapInfoInterface *)jarg1; 
  arg2 = (int)jarg2; 
  result = (std::list< ArArgumentBuilder * > *)(arg1)->getInfo(arg2);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_ArMapInfoInterface_getMapInfo(void * jarg1) {
  void * jresult ;
  ArMapInfoInterface *arg1 = (ArMapInfoInterface *) 0 ;
  std::list< ArArgumentBuilder * > *result = 0 ;
  
  arg1 = (ArMapInfoInterface *)jarg1; 
  result = (std::list< ArArgumentBuilder * > *)(arg1)->getMapInfo();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_ArMapInfoInterface_setInfo__SWIG_0(void * jarg1, char * jarg2, void * jarg3, void * jarg4) {
  unsigned int jresult ;
  ArMapInfoInterface *arg1 = (ArMapInfoInterface *) 0 ;
  char *arg2 = (char *) 0 ;
  std::list< ArArgumentBuilder * > *arg3 = (std::list< ArArgumentBuilder * > *) 0 ;
  ArMapChangeDetails *arg4 = (ArMapChangeDetails *) 0 ;
  bool result;
  
  arg1 = (ArMapInfoInterface *)jarg1; 
  arg2 = (char *)jarg2; 
  arg3 = (std::list< ArArgumentBuilder * > *)jarg3; 
  arg4 = (ArMapChangeDetails *)jarg4; 
  result = (bool)(arg1)->setInfo((char const *)arg2,(std::list< ArArgumentBuilder * > const *)arg3,arg4);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_ArMapInfoInterface_setInfo__SWIG_1(void * jarg1, char * jarg2, void * jarg3) {
  unsigned int jresult ;
  ArMapInfoInterface *arg1 = (ArMapInfoInterface *) 0 ;
  char *arg2 = (char *) 0 ;
  std::list< ArArgumentBuilder * > *arg3 = (std::list< ArArgumentBuilder * > *) 0 ;
  bool result;
  
  arg1 = (ArMapInfoInterface *)jarg1; 
  arg2 = (char *)jarg2; 
  arg3 = (std::list< ArArgumentBuilder * > *)jarg3; 
  result = (bool)(arg1)->setInfo((char const *)arg2,(std::list< ArArgumentBuilder * > const *)arg3);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_ArMapInfoInterface_setInfo__SWIG_2(void * jarg1, int jarg2, void * jarg3, void * jarg4) {
  unsigned int jresult ;
  ArMapInfoInterface *arg1 = (ArMapInfoInterface *) 0 ;
  int arg2 ;
  std::list< ArArgumentBuilder * > *arg3 = (std::list< ArArgumentBuilder * > *) 0 ;
  ArMapChangeDetails *arg4 = (ArMapChangeDetails *) 0 ;
  bool result;
  
  arg1 = (ArMapInfoInterface *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (std::list< ArArgumentBuilder * > *)jarg3; 
  arg4 = (ArMapChangeDetails *)jarg4; 
  result = (bool)(arg1)->setInfo(arg2,(std::list< ArArgumentBuilder * > const *)arg3,arg4);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_ArMapInfoInterface_setInfo__SWIG_3(void * jarg1, int jarg2, void * jarg3) {
  unsigned int jresult ;
  ArMapInfoInterface *arg1 = (ArMapInfoInterface *) 0 ;
  int arg2 ;
  std::list< ArArgumentBuilder * > *arg3 = (std::list< ArArgumentBuilder * > *) 0 ;
  bool result;
  
  arg1 = (ArMapInfoInterface *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (std::list< ArArgumentBuilder * > *)jarg3; 
  result = (bool)(arg1)->setInfo(arg2,(std::list< ArArgumentBuilder * > const *)arg3);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_ArMapInfoInterface_setMapInfo__SWIG_0(void * jarg1, void * jarg2, void * jarg3) {
  unsigned int jresult ;
  ArMapInfoInterface *arg1 = (ArMapInfoInterface *) 0 ;
  std::list< ArArgumentBuilder * > *arg2 = (std::list< ArArgumentBuilder * > *) 0 ;
  ArMapChangeDetails *arg3 = (ArMapChangeDetails *) 0 ;
  bool result;
  
  arg1 = (ArMapInfoInterface *)jarg1; 
  arg2 = (std::list< ArArgumentBuilder * > *)jarg2; 
  arg3 = (ArMapChangeDetails *)jarg3; 
  result = (bool)(arg1)->setMapInfo((std::list< ArArgumentBuilder * > const *)arg2,arg3);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_ArMapInfoInterface_setMapInfo__SWIG_1(void * jarg1, void * jarg2) {
  unsigned int jresult ;
  ArMapInfoInterface *arg1 = (ArMapInfoInterface *) 0 ;
  std::list< ArArgumentBuilder * > *arg2 = (std::list< ArArgumentBuilder * > *) 0 ;
  bool result;
  
  arg1 = (ArMapInfoInterface *)jarg1; 
  arg2 = (std::list< ArArgumentBuilder * > *)jarg2; 
  result = (bool)(arg1)->setMapInfo((std::list< ArArgumentBuilder * > const *)arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_ArMapInfoInterface_writeInfoToFunctor(void * jarg1, void * jarg2, char * jarg3) {
  ArMapInfoInterface *arg1 = (ArMapInfoInterface *) 0 ;
  ArFunctor1< char const * > *arg2 = (ArFunctor1< char const * > *) 0 ;
  char *arg3 = (char *) 0 ;
  
  arg1 = (ArMapInfoInterface *)jarg1; 
  arg2 = (ArFunctor1< char const * > *)jarg2; 
  arg3 = (char *)jarg3; 
  (arg1)->writeInfoToFunctor(arg2,(char const *)arg3);
}


SWIGEXPORT int SWIGSTDCALL CSharp_ArMapInfoInterface_INFO_COUNT_get() {
  int jresult ;
  int result;
  
  result = (int)ArMapInfoInterface::INFO_COUNT;
  jresult = (int)result; 
  return jresult;
}


SWIGEXPORT char * SWIGSTDCALL CSharp_ArMapInfoInterface_getInfoName(void * jarg1, int jarg2) {
  char * jresult ;
  ArMapInfoInterface *arg1 = (ArMapInfoInterface *) 0 ;
  int arg2 ;
  char *result = 0 ;
  
  arg1 = (ArMapInfoInterface *)jarg1; 
  arg2 = (int)jarg2; 
  result = (char *)(arg1)->getInfoName(arg2);
  jresult = SWIG_csharp_string_callback((const char *)result); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_ArMapSupplementInterface(void * jarg1) {
  ArMapSupplementInterface *arg1 = (ArMapSupplementInterface *) 0 ;
  
  arg1 = (ArMapSupplementInterface *)jarg1; 
  delete arg1;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_ArMapSupplementInterface_hasOriginLatLongAlt(void * jarg1) {
  unsigned int jresult ;
  ArMapSupplementInterface *arg1 = (ArMapSupplementInterface *) 0 ;
  bool result;
  
  arg1 = (ArMapSupplementInterface *)jarg1; 
  result = (bool)(arg1)->hasOriginLatLongAlt();
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_ArMapSupplementInterface_getOriginLatLong(void * jarg1) {
  void * jresult ;
  ArMapSupplementInterface *arg1 = (ArMapSupplementInterface *) 0 ;
  ArPose result;
  
  arg1 = (ArMapSupplementInterface *)jarg1; 
  result = (arg1)->getOriginLatLong();
  jresult = new ArPose((const ArPose &)result); 
  return jresult;
}


SWIGEXPORT double SWIGSTDCALL CSharp_ArMapSupplementInterface_getOriginAltitude(void * jarg1) {
  double jresult ;
  ArMapSupplementInterface *arg1 = (ArMapSupplementInterface *) 0 ;
  double result;
  
  arg1 = (ArMapSupplementInterface *)jarg1; 
  result = (double)(arg1)->getOriginAltitude();
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_ArMapSupplementInterface_setOriginLatLongAlt__SWIG_0(void * jarg1, unsigned int jarg2, void * jarg3, double jarg4, void * jarg5) {
  ArMapSupplementInterface *arg1 = (ArMapSupplementInterface *) 0 ;
  bool arg2 ;
  ArPose *arg3 = 0 ;
  double arg4 ;
  ArMapChangeDetails *arg5 = (ArMapChangeDetails *) 0 ;
  
  arg1 = (ArMapSupplementInterface *)jarg1; 
  arg2 = jarg2 ? true : false; 
  arg3 = (ArPose *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "ArPose const & type is null", 0);
    return ;
  } 
  arg4 = (double)jarg4; 
  arg5 = (ArMapChangeDetails *)jarg5; 
  (arg1)->setOriginLatLongAlt(arg2,(ArPose const &)*arg3,arg4,arg5);
}


SWIGEXPORT void SWIGSTDCALL CSharp_ArMapSupplementInterface_setOriginLatLongAlt__SWIG_1(void * jarg1, unsigned int jarg2, void * jarg3, double jarg4) {
  ArMapSupplementInterface *arg1 = (ArMapSupplementInterface *) 0 ;
  bool arg2 ;
  ArPose *arg3 = 0 ;
  double arg4 ;
  
  arg1 = (ArMapSupplementInterface *)jarg1; 
  arg2 = jarg2 ? true : false; 
  arg3 = (ArPose *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "ArPose const & type is null", 0);
    return ;
  } 
  arg4 = (double)jarg4; 
  (arg1)->setOriginLatLongAlt(arg2,(ArPose const &)*arg3,arg4);
}


SWIGEXPORT void SWIGSTDCALL CSharp_ArMapSupplementInterface_writeSupplementToFunctor(void * jarg1, void * jarg2, char * jarg3) {
  ArMapSupplementInterface *arg1 = (ArMapSupplementInterface *) 0 ;
  ArFunctor1< char const * > *arg2 = (ArFunctor1< char const * > *) 0 ;
  char *arg3 = (char *) 0 ;
  
  arg1 = (ArMapSupplementInterface *)jarg1; 
  arg2 = (ArFunctor1< char const * > *)jarg2; 
  arg3 = (char *)jarg3; 
  (arg1)->writeSupplementToFunctor(arg2,(char const *)arg3);
}


SWIGEXPORT int SWIGSTDCALL CSharp_ArMapInterface_MAX_MAP_NAME_LENGTH_get() {
  int jresult ;
  int result;
  
  result = (int)ArMapInterface::MAX_MAP_NAME_LENGTH;
  jresult = (int)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_ArMapInterface_MAP_CATEGORY_2D_set(char * jarg1) {
  char *arg1 = (char *) 0 ;
  
  arg1 = (char *)jarg1; 
  {
    if (arg1) {
      ArMapInterface::MAP_CATEGORY_2D = (char const *) (new char[strlen((const char *)arg1)+1]);
      strcpy((char *)ArMapInterface::MAP_CATEGORY_2D, (const char *)arg1);
    } else {
      ArMapInterface::MAP_CATEGORY_2D = 0;
    }
  }
}


SWIGEXPORT char * SWIGSTDCALL CSharp_ArMapInterface_MAP_CATEGORY_2D_get() {
  char * jresult ;
  char *result = 0 ;
  
  result = (char *)ArMapInterface::MAP_CATEGORY_2D;
  jresult = SWIG_csharp_string_callback((const char *)result); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_ArMapInterface_MAP_CATEGORY_2D_MULTI_SOURCES_set(char * jarg1) {
  char *arg1 = (char *) 0 ;
  
  arg1 = (char *)jarg1; 
  {
    if (arg1) {
      ArMapInterface::MAP_CATEGORY_2D_MULTI_SOURCES = (char const *) (new char[strlen((const char *)arg1)+1]);
      strcpy((char *)ArMapInterface::MAP_CATEGORY_2D_MULTI_SOURCES, (const char *)arg1);
    } else {
      ArMapInterface::MAP_CATEGORY_2D_MULTI_SOURCES = 0;
    }
  }
}


SWIGEXPORT char * SWIGSTDCALL CSharp_ArMapInterface_MAP_CATEGORY_2D_MULTI_SOURCES_get() {
  char * jresult ;
  char *result = 0 ;
  
  result = (char *)ArMapInterface::MAP_CATEGORY_2D_MULTI_SOURCES;
  jresult = SWIG_csharp_string_callback((const char *)result); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_ArMapInterface_MAP_CATEGORY_2D_EXTENDED_set(char * jarg1) {
  char *arg1 = (char *) 0 ;
  
  arg1 = (char *)jarg1; 
  {
    if (arg1) {
      ArMapInterface::MAP_CATEGORY_2D_EXTENDED = (char const *) (new char[strlen((const char *)arg1)+1]);
      strcpy((char *)ArMapInterface::MAP_CATEGORY_2D_EXTENDED, (const char *)arg1);
    } else {
      ArMapInterface::MAP_CATEGORY_2D_EXTENDED = 0;
    }
  }
}


SWIGEXPORT char * SWIGSTDCALL CSharp_ArMapInterface_MAP_CATEGORY_2D_EXTENDED_get() {
  char * jresult ;
  char *result = 0 ;
  
  result = (char *)ArMapInterface::MAP_CATEGORY_2D_EXTENDED;
  jresult = SWIG_csharp_string_callback((const char *)result); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_ArMapInterface_MAP_CATEGORY_2D_COMPOSITE_set(char * jarg1) {
  char *arg1 = (char *) 0 ;
  
  arg1 = (char *)jarg1; 
  {
    if (arg1) {
      ArMapInterface::MAP_CATEGORY_2D_COMPOSITE = (char const *) (new char[strlen((const char *)arg1)+1]);
      strcpy((char *)ArMapInterface::MAP_CATEGORY_2D_COMPOSITE, (const char *)arg1);
    } else {
      ArMapInterface::MAP_CATEGORY_2D_COMPOSITE = 0;
    }
  }
}


SWIGEXPORT char * SWIGSTDCALL CSharp_ArMapInterface_MAP_CATEGORY_2D_COMPOSITE_get() {
  char * jresult ;
  char *result = 0 ;
  
  result = (char *)ArMapInterface::MAP_CATEGORY_2D_COMPOSITE;
  jresult = SWIG_csharp_string_callback((const char *)result); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_ArMapInterface_MAP_CATEGORY_2D_TEMPLATE_set(char * jarg1) {
  char *arg1 = (char *) 0 ;
  
  arg1 = (char *)jarg1; 
  {
    if (arg1) {
      ArMapInterface::MAP_CATEGORY_2D_TEMPLATE = (char const *) (new char[strlen((const char *)arg1)+1]);
      strcpy((char *)ArMapInterface::MAP_CATEGORY_2D_TEMPLATE, (const char *)arg1);
    } else {
      ArMapInterface::MAP_CATEGORY_2D_TEMPLATE = 0;
    }
  }
}


SWIGEXPORT char * SWIGSTDCALL CSharp_ArMapInterface_MAP_CATEGORY_2D_TEMPLATE_get() {
  char * jresult ;
  char *result = 0 ;
  
  result = (char *)ArMapInterface::MAP_CATEGORY_2D_TEMPLATE;
  jresult = SWIG_csharp_string_callback((const char *)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_ArMapInterface_getMapCategoryList() {
  void * jresult ;
  SwigValueWrapper< std::list< std::string > > result;
  
  result = ArMapInterface::getMapCategoryList();
  jresult = new std::list< std::string >((const std::list< std::string > &)result); 
  return jresult;
}


SWIGEXPORT char * SWIGSTDCALL CSharp_ArMapInterface_createRealFileName__SWIG_0(char * jarg1, char * jarg2, unsigned int jarg3) {
  char * jresult ;
  char *arg1 = (char *) 0 ;
  char *arg2 = (char *) 0 ;
  bool arg3 ;
  std::string result;
  
  arg1 = (char *)jarg1; 
  arg2 = (char *)jarg2; 
  arg3 = jarg3 ? true : false; 
  result = ArMapInterface::createRealFileName((char const *)arg1,(char const *)arg2,arg3);
  jresult = SWIG_csharp_string_callback((&result)->c_str()); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_ArMapInterface(void * jarg1) {
  ArMapInterface *arg1 = (ArMapInterface *) 0 ;
  
  arg1 = (ArMapInterface *)jarg1; 
  delete arg1;
}


SWIGEXPORT void SWIGSTDCALL CSharp_ArMapInterface_clear(void * jarg1) {
  ArMapInterface *arg1 = (ArMapInterface *) 0 ;
  
  arg1 = (ArMapInterface *)jarg1; 
  (arg1)->clear();
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_ArMapInterface_set(void * jarg1, void * jarg2) {
  unsigned int jresult ;
  ArMapInterface *arg1 = (ArMapInterface *) 0 ;
  ArMapInterface *arg2 = (ArMapInterface *) 0 ;
  bool result;
  
  arg1 = (ArMapInterface *)jarg1; 
  arg2 = (ArMapInterface *)jarg2; 
  result = (bool)(arg1)->set(arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_ArMapInterface_clone(void * jarg1) {
  void * jresult ;
  ArMapInterface *arg1 = (ArMapInterface *) 0 ;
  ArMapInterface *result = 0 ;
  
  arg1 = (ArMapInterface *)jarg1; 
  result = (ArMapInterface *)(arg1)->clone();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_ArMapInterface_getScanTypes(void * jarg1) {
  void * jresult ;
  ArMapInterface *arg1 = (ArMapInterface *) 0 ;
  SwigValueWrapper< std::list< std::string > > result;
  
  arg1 = (ArMapInterface *)jarg1; 
  result = ((ArMapInterface const *)arg1)->getScanTypes();
  jresult = new std::list< std::string >((const std::list< std::string > &)result); 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_ArMapInterface_setScanTypes(void * jarg1, void * jarg2) {
  unsigned int jresult ;
  ArMapInterface *arg1 = (ArMapInterface *) 0 ;
  std::list< std::string > *arg2 = 0 ;
  bool result;
  
  arg1 = (ArMapInterface *)jarg1; 
  arg2 = (std::list< std::string > *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "std::list< std::string > const & type is null", 0);
    return 0;
  } 
  result = (bool)(arg1)->setScanTypes((std::list< std::string > const &)*arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_ArMapInterface_lockObj(void * jarg1) {
  int jresult ;
  ArMapInterface *arg1 = (ArMapInterface *) 0 ;
  int result;
  
  arg1 = (ArMapInterface *)jarg1; 
  result = (int)(arg1)->lock();
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_ArMapInterface_tryLock(void * jarg1) {
  int jresult ;
  ArMapInterface *arg1 = (ArMapInterface *) 0 ;
  int result;
  
  arg1 = (ArMapInterface *)jarg1; 
  result = (int)(arg1)->tryLock();
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_ArMapInterface_unlockObj(void * jarg1) {
  int jresult ;
  ArMapInterface *arg1 = (ArMapInterface *) 0 ;
  int result;
  
  arg1 = (ArMapInterface *)jarg1; 
  result = (int)(arg1)->unlock();
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_ArMapInterface_mapChanged__SWIG_0(void * jarg1) {
  ArMapInterface *arg1 = (ArMapInterface *) 0 ;
  
  arg1 = (ArMapInterface *)jarg1; 
  (arg1)->mapChanged();
}


SWIGEXPORT void SWIGSTDCALL CSharp_ArMapInterface_mapChanged__SWIG_1(void * jarg1, unsigned int jarg2, unsigned int jarg3) {
  ArMapInterface *arg1 = (ArMapInterface *) 0 ;
  bool arg2 ;
  bool arg3 ;
  
  arg1 = (ArMapInterface *)jarg1; 
  arg2 = jarg2 ? true : false; 
  arg3 = jarg3 ? true : false; 
  (arg1)->mapChanged(arg2,arg3);
}


SWIGEXPORT void SWIGSTDCALL CSharp_ArMapInterface_addMapChangedCBPos(void * jarg1, void * jarg2, int jarg3) {
  ArMapInterface *arg1 = (ArMapInterface *) 0 ;
  ArFunctor *arg2 = (ArFunctor *) 0 ;
  ArListPos::Pos arg3 ;
  
  arg1 = (ArMapInterface *)jarg1; 
  arg2 = (ArFunctor *)jarg2; 
  arg3 = (ArListPos::Pos)jarg3; 
  (arg1)->addMapChangedCB(arg2,arg3);
}


SWIGEXPORT void SWIGSTDCALL CSharp_ArMapInterface_addMapChangedCB__SWIG_0(void * jarg1, void * jarg2, int jarg3) {
  ArMapInterface *arg1 = (ArMapInterface *) 0 ;
  ArFunctor *arg2 = (ArFunctor *) 0 ;
  int arg3 ;
  
  arg1 = (ArMapInterface *)jarg1; 
  arg2 = (ArFunctor *)jarg2; 
  arg3 = (int)jarg3; 
  (arg1)->addMapChangedCB(arg2,arg3);
}


SWIGEXPORT void SWIGSTDCALL CSharp_ArMapInterface_addMapChangedCB__SWIG_1(void * jarg1, void * jarg2) {
  ArMapInterface *arg1 = (ArMapInterface *) 0 ;
  ArFunctor *arg2 = (ArFunctor *) 0 ;
  
  arg1 = (ArMapInterface *)jarg1; 
  arg2 = (ArFunctor *)jarg2; 
  (arg1)->addMapChangedCB(arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_ArMapInterface_remMapChangedCB(void * jarg1, void * jarg2) {
  ArMapInterface *arg1 = (ArMapInterface *) 0 ;
  ArFunctor *arg2 = (ArFunctor *) 0 ;
  
  arg1 = (ArMapInterface *)jarg1; 
  arg2 = (ArFunctor *)jarg2; 
  (arg1)->remMapChangedCB(arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_ArMapInterface_addMapChangedPathPlanningCB__SWIG_0(void * jarg1, void * jarg2, int jarg3) {
  ArMapInterface *arg1 = (ArMapInterface *) 0 ;
  ArFunctor *arg2 = (ArFunctor *) 0 ;
  int arg3 ;
  
  arg1 = (ArMapInterface *)jarg1; 
  arg2 = (ArFunctor *)jarg2; 
  arg3 = (int)jarg3; 
  (arg1)->addMapChangedPathPlanningCB(arg2,arg3);
}


SWIGEXPORT void SWIGSTDCALL CSharp_ArMapInterface_addMapChangedPathPlanningCB__SWIG_1(void * jarg1, void * jarg2) {
  ArMapInterface *arg1 = (ArMapInterface *) 0 ;
  ArFunctor *arg2 = (ArFunctor *) 0 ;
  
  arg1 = (ArMapInterface *)jarg1; 
  arg2 = (ArFunctor *)jarg2; 
  (arg1)->addMapChangedPathPlanningCB(arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_ArMapInterface_remMapChangedPathPlanningCB(void * jarg1, void * jarg2) {
  ArMapInterface *arg1 = (ArMapInterface *) 0 ;
  ArFunctor *arg2 = (ArFunctor *) 0 ;
  
  arg1 = (ArMapInterface *)jarg1; 
  arg2 = (ArFunctor *)jarg2; 
  (arg1)->remMapChangedPathPlanningCB(arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_ArMapInterface_addMapChangedLocalizationCB__SWIG_0(void * jarg1, void * jarg2, int jarg3) {
  ArMapInterface *arg1 = (ArMapInterface *) 0 ;
  ArFunctor *arg2 = (ArFunctor *) 0 ;
  int arg3 ;
  
  arg1 = (ArMapInterface *)jarg1; 
  arg2 = (ArFunctor *)jarg2; 
  arg3 = (int)jarg3; 
  (arg1)->addMapChangedLocalizationCB(arg2,arg3);
}


SWIGEXPORT void SWIGSTDCALL CSharp_ArMapInterface_addMapChangedLocalizationCB__SWIG_1(void * jarg1, void * jarg2) {
  ArMapInterface *arg1 = (ArMapInterface *) 0 ;
  ArFunctor *arg2 = (ArFunctor *) 0 ;
  
  arg1 = (ArMapInterface *)jarg1; 
  arg2 = (ArFunctor *)jarg2; 
  (arg1)->addMapChangedLocalizationCB(arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_ArMapInterface_remMapChangedLocalizationCB(void * jarg1, void * jarg2) {
  ArMapInterface *arg1 = (ArMapInterface *) 0 ;
  ArFunctor *arg2 = (ArFunctor *) 0 ;
  
  arg1 = (ArMapInterface *)jarg1; 
  arg2 = (ArFunctor *)jarg2; 
  (arg1)->remMapChangedLocalizationCB(arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_ArMapInterface_addPreMapChangedCBPos(void * jarg1, void * jarg2, int jarg3) {
  ArMapInterface *arg1 = (ArMapInterface *) 0 ;
  ArFunctor *arg2 = (ArFunctor *) 0 ;
  ArListPos::Pos arg3 ;
  
  arg1 = (ArMapInterface *)jarg1; 
  arg2 = (ArFunctor *)jarg2; 
  arg3 = (ArListPos::Pos)jarg3; 
  (arg1)->addPreMapChangedCB(arg2,arg3);
}


SWIGEXPORT void SWIGSTDCALL CSharp_ArMapInterface_addPreMapChangedCB__SWIG_0(void * jarg1, void * jarg2, int jarg3) {
  ArMapInterface *arg1 = (ArMapInterface *) 0 ;
  ArFunctor *arg2 = (ArFunctor *) 0 ;
  int arg3 ;
  
  arg1 = (ArMapInterface *)jarg1; 
  arg2 = (ArFunctor *)jarg2; 
  arg3 = (int)jarg3; 
  (arg1)->addPreMapChangedCB(arg2,arg3);
}


SWIGEXPORT void SWIGSTDCALL CSharp_ArMapInterface_addPreMapChangedCB__SWIG_1(void * jarg1, void * jarg2) {
  ArMapInterface *arg1 = (ArMapInterface *) 0 ;
  ArFunctor *arg2 = (ArFunctor *) 0 ;
  
  arg1 = (ArMapInterface *)jarg1; 
  arg2 = (ArFunctor *)jarg2; 
  (arg1)->addPreMapChangedCB(arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_ArMapInterface_remPreMapChangedCB(void * jarg1, void * jarg2) {
  ArMapInterface *arg1 = (ArMapInterface *) 0 ;
  ArFunctor *arg2 = (ArFunctor *) 0 ;
  
  arg1 = (ArMapInterface *)jarg1; 
  arg2 = (ArFunctor *)jarg2; 
  (arg1)->remPreMapChangedCB(arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_ArMapInterface_addPreParseFileCB(void * jarg1, void * jarg2) {
  ArMapInterface *arg1 = (ArMapInterface *) 0 ;
  ArFunctor1< std::string > *arg2 = (ArFunctor1< std::string > *) 0 ;
  
  arg1 = (ArMapInterface *)jarg1; 
  arg2 = (ArFunctor1< std::string > *)jarg2; 
  (arg1)->addPreParseFileCB(arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_ArMapInterface_remPreParseFileCB(void * jarg1, void * jarg2) {
  ArMapInterface *arg1 = (ArMapInterface *) 0 ;
  ArFunctor1< std::string > *arg2 = (ArFunctor1< std::string > *) 0 ;
  
  arg1 = (ArMapInterface *)jarg1; 
  arg2 = (ArFunctor1< std::string > *)jarg2; 
  (arg1)->remPreParseFileCB(arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_ArMapInterface_setMapChangedLogLevel(void * jarg1, int jarg2) {
  ArMapInterface *arg1 = (ArMapInterface *) 0 ;
  ArLog::LogLevel arg2 ;
  
  arg1 = (ArMapInterface *)jarg1; 
  arg2 = (ArLog::LogLevel)jarg2; 
  (arg1)->setMapChangedLogLevel(arg2);
}


SWIGEXPORT int SWIGSTDCALL CSharp_ArMapInterface_getMapChangedLogLevel(void * jarg1) {
  int jresult ;
  ArMapInterface *arg1 = (ArMapInterface *) 0 ;
  ArLog::LogLevel result;
  
  arg1 = (ArMapInterface *)jarg1; 
  result = (ArLog::LogLevel)(arg1)->getMapChangedLogLevel();
  jresult = (int)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_ArMapInterface_writeToFunctor(void * jarg1, void * jarg2, char * jarg3) {
  ArMapInterface *arg1 = (ArMapInterface *) 0 ;
  ArFunctor1< char const * > *arg2 = (ArFunctor1< char const * > *) 0 ;
  char *arg3 = (char *) 0 ;
  
  arg1 = (ArMapInterface *)jarg1; 
  arg2 = (ArFunctor1< char const * > *)jarg2; 
  arg3 = (char *)jarg3; 
  (arg1)->writeToFunctor(arg2,(char const *)arg3);
}


SWIGEXPORT void SWIGSTDCALL CSharp_ArMapInterface_writeObjectsToFunctor__SWIG_0(void * jarg1, void * jarg2, char * jarg3, unsigned int jarg4, char * jarg5) {
  ArMapInterface *arg1 = (ArMapInterface *) 0 ;
  ArFunctor1< char const * > *arg2 = (ArFunctor1< char const * > *) 0 ;
  char *arg3 = (char *) 0 ;
  bool arg4 ;
  char *arg5 = (char *) 0 ;
  
  arg1 = (ArMapInterface *)jarg1; 
  arg2 = (ArFunctor1< char const * > *)jarg2; 
  arg3 = (char *)jarg3; 
  arg4 = jarg4 ? true : false; 
  arg5 = (char *)jarg5; 
  (arg1)->writeObjectsToFunctor(arg2,(char const *)arg3,arg4,(char const *)arg5);
}


SWIGEXPORT void SWIGSTDCALL CSharp_ArMapInterface_writeObjectsToFunctor__SWIG_1(void * jarg1, void * jarg2, char * jarg3, unsigned int jarg4) {
  ArMapInterface *arg1 = (ArMapInterface *) 0 ;
  ArFunctor1< char const * > *arg2 = (ArFunctor1< char const * > *) 0 ;
  char *arg3 = (char *) 0 ;
  bool arg4 ;
  
  arg1 = (ArMapInterface *)jarg1; 
  arg2 = (ArFunctor1< char const * > *)jarg2; 
  arg3 = (char *)jarg3; 
  arg4 = jarg4 ? true : false; 
  (arg1)->writeObjectsToFunctor(arg2,(char const *)arg3,arg4);
}


SWIGEXPORT void SWIGSTDCALL CSharp_ArMapInterface_writeObjectsToFunctor__SWIG_2(void * jarg1, void * jarg2, char * jarg3) {
  ArMapInterface *arg1 = (ArMapInterface *) 0 ;
  ArFunctor1< char const * > *arg2 = (ArFunctor1< char const * > *) 0 ;
  char *arg3 = (char *) 0 ;
  
  arg1 = (ArMapInterface *)jarg1; 
  arg2 = (ArFunctor1< char const * > *)jarg2; 
  arg3 = (char *)jarg3; 
  (arg1)->writeObjectsToFunctor(arg2,(char const *)arg3);
}


SWIGEXPORT void SWIGSTDCALL CSharp_ArMapInterface_addPreWriteFileCB__SWIG_0(void * jarg1, void * jarg2, int jarg3) {
  ArMapInterface *arg1 = (ArMapInterface *) 0 ;
  ArFunctor *arg2 = (ArFunctor *) 0 ;
  ArListPos::Pos arg3 ;
  
  arg1 = (ArMapInterface *)jarg1; 
  arg2 = (ArFunctor *)jarg2; 
  arg3 = (ArListPos::Pos)jarg3; 
  (arg1)->addPreWriteFileCB(arg2,arg3);
}


SWIGEXPORT void SWIGSTDCALL CSharp_ArMapInterface_addPreWriteFileCB__SWIG_1(void * jarg1, void * jarg2) {
  ArMapInterface *arg1 = (ArMapInterface *) 0 ;
  ArFunctor *arg2 = (ArFunctor *) 0 ;
  
  arg1 = (ArMapInterface *)jarg1; 
  arg2 = (ArFunctor *)jarg2; 
  (arg1)->addPreWriteFileCB(arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_ArMapInterface_remPreWriteFileCB(void * jarg1, void * jarg2) {
  ArMapInterface *arg1 = (ArMapInterface *) 0 ;
  ArFunctor *arg2 = (ArFunctor *) 0 ;
  
  arg1 = (ArMapInterface *)jarg1; 
  arg2 = (ArFunctor *)jarg2; 
  (arg1)->remPreWriteFileCB(arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_ArMapInterface_addPostWriteFileCB__SWIG_0(void * jarg1, void * jarg2, int jarg3) {
  ArMapInterface *arg1 = (ArMapInterface *) 0 ;
  ArFunctor *arg2 = (ArFunctor *) 0 ;
  ArListPos::Pos arg3 ;
  
  arg1 = (ArMapInterface *)jarg1; 
  arg2 = (ArFunctor *)jarg2; 
  arg3 = (ArListPos::Pos)jarg3; 
  (arg1)->addPostWriteFileCB(arg2,arg3);
}


SWIGEXPORT void SWIGSTDCALL CSharp_ArMapInterface_addPostWriteFileCB__SWIG_1(void * jarg1, void * jarg2) {
  ArMapInterface *arg1 = (ArMapInterface *) 0 ;
  ArFunctor *arg2 = (ArFunctor *) 0 ;
  
  arg1 = (ArMapInterface *)jarg1; 
  arg2 = (ArFunctor *)jarg2; 
  (arg1)->addPostWriteFileCB(arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_ArMapInterface_remPostWriteFileCB(void * jarg1, void * jarg2) {
  ArMapInterface *arg1 = (ArMapInterface *) 0 ;
  ArFunctor *arg2 = (ArFunctor *) 0 ;
  
  arg1 = (ArMapInterface *)jarg1; 
  arg2 = (ArFunctor *)jarg2; 
  (arg1)->remPostWriteFileCB(arg2);
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_ArMapInterface_getMapId__SWIG_0(void * jarg1, void * jarg2, unsigned int jarg3) {
  unsigned int jresult ;
  ArMapInterface *arg1 = (ArMapInterface *) 0 ;
  ArMapId *arg2 = (ArMapId *) 0 ;
  bool arg3 ;
  bool result;
  
  arg1 = (ArMapInterface *)jarg1; 
  arg2 = (ArMapId *)jarg2; 
  arg3 = jarg3 ? true : false; 
  result = (bool)(arg1)->getMapId(arg2,arg3);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_ArMapInterface_getMapId__SWIG_1(void * jarg1, void * jarg2) {
  unsigned int jresult ;
  ArMapInterface *arg1 = (ArMapInterface *) 0 ;
  ArMapId *arg2 = (ArMapId *) 0 ;
  bool result;
  
  arg1 = (ArMapInterface *)jarg1; 
  arg2 = (ArMapId *)jarg2; 
  result = (bool)(arg1)->getMapId(arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_ArMapInterface_calculateChecksum(void * jarg1, void * jarg2, unsigned long jarg3) {
  unsigned int jresult ;
  ArMapInterface *arg1 = (ArMapInterface *) 0 ;
  unsigned char *arg2 = (unsigned char *) 0 ;
  size_t arg3 ;
  bool result;
  
  arg1 = (ArMapInterface *)jarg1; 
  arg2 = (unsigned char *)jarg2; 
  arg3 = (size_t)jarg3; 
  result = (bool)(arg1)->calculateChecksum(arg2,arg3);
  jresult = result; 
  return jresult;
}


SWIGEXPORT char * SWIGSTDCALL CSharp_ArMapInterface_getBaseDirectory(void * jarg1) {
  char * jresult ;
  ArMapInterface *arg1 = (ArMapInterface *) 0 ;
  char *result = 0 ;
  
  arg1 = (ArMapInterface *)jarg1; 
  result = (char *)((ArMapInterface const *)arg1)->getBaseDirectory();
  jresult = SWIG_csharp_string_callback((const char *)result); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_ArMapInterface_setBaseDirectory(void * jarg1, char * jarg2) {
  ArMapInterface *arg1 = (ArMapInterface *) 0 ;
  char *arg2 = (char *) 0 ;
  
  arg1 = (ArMapInterface *)jarg1; 
  arg2 = (char *)jarg2; 
  (arg1)->setBaseDirectory((char const *)arg2);
}


SWIGEXPORT char * SWIGSTDCALL CSharp_ArMapInterface_getTempDirectory(void * jarg1) {
  char * jresult ;
  ArMapInterface *arg1 = (ArMapInterface *) 0 ;
  char *result = 0 ;
  
  arg1 = (ArMapInterface *)jarg1; 
  result = (char *)((ArMapInterface const *)arg1)->getTempDirectory();
  jresult = SWIG_csharp_string_callback((const char *)result); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_ArMapInterface_setTempDirectory(void * jarg1, char * jarg2) {
  ArMapInterface *arg1 = (ArMapInterface *) 0 ;
  char *arg2 = (char *) 0 ;
  
  arg1 = (ArMapInterface *)jarg1; 
  arg2 = (char *)jarg2; 
  (arg1)->setTempDirectory((char const *)arg2);
}


SWIGEXPORT char * SWIGSTDCALL CSharp_ArMapInterface_createRealFileName__SWIG_1(void * jarg1, char * jarg2) {
  char * jresult ;
  ArMapInterface *arg1 = (ArMapInterface *) 0 ;
  char *arg2 = (char *) 0 ;
  std::string result;
  
  arg1 = (ArMapInterface *)jarg1; 
  arg2 = (char *)jarg2; 
  result = (arg1)->createRealFileName((char const *)arg2);
  jresult = SWIG_csharp_string_callback((&result)->c_str()); 
  return jresult;
}


SWIGEXPORT char * SWIGSTDCALL CSharp_ArMapInterface_getFileName(void * jarg1) {
  char * jresult ;
  ArMapInterface *arg1 = (ArMapInterface *) 0 ;
  char *result = 0 ;
  
  arg1 = (ArMapInterface *)jarg1; 
  result = (char *)((ArMapInterface const *)arg1)->getFileName();
  jresult = SWIG_csharp_string_callback((const char *)result); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_ArMapInterface_setSourceFileName__SWIG_0(void * jarg1, char * jarg2, char * jarg3, unsigned int jarg4) {
  ArMapInterface *arg1 = (ArMapInterface *) 0 ;
  char *arg2 = (char *) 0 ;
  char *arg3 = (char *) 0 ;
  bool arg4 ;
  
  arg1 = (ArMapInterface *)jarg1; 
  arg2 = (char *)jarg2; 
  arg3 = (char *)jarg3; 
  arg4 = jarg4 ? true : false; 
  (arg1)->setSourceFileName((char const *)arg2,(char const *)arg3,arg4);
}


SWIGEXPORT void SWIGSTDCALL CSharp_ArMapInterface_setSourceFileName__SWIG_1(void * jarg1, char * jarg2, char * jarg3) {
  ArMapInterface *arg1 = (ArMapInterface *) 0 ;
  char *arg2 = (char *) 0 ;
  char *arg3 = (char *) 0 ;
  
  arg1 = (ArMapInterface *)jarg1; 
  arg2 = (char *)jarg2; 
  arg3 = (char *)jarg3; 
  (arg1)->setSourceFileName((char const *)arg2,(char const *)arg3);
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_ArMapInterface_refresh(void * jarg1) {
  unsigned int jresult ;
  ArMapInterface *arg1 = (ArMapInterface *) 0 ;
  bool result;
  
  arg1 = (ArMapInterface *)jarg1; 
  result = (bool)(arg1)->refresh();
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_ArMapInterface_setIgnoreEmptyFileName(void * jarg1, unsigned int jarg2) {
  ArMapInterface *arg1 = (ArMapInterface *) 0 ;
  bool arg2 ;
  
  arg1 = (ArMapInterface *)jarg1; 
  arg2 = jarg2 ? true : false; 
  (arg1)->setIgnoreEmptyFileName(arg2);
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_ArMapInterface_getIgnoreEmptyFileName(void * jarg1) {
  unsigned int jresult ;
  ArMapInterface *arg1 = (ArMapInterface *) 0 ;
  bool result;
  
  arg1 = (ArMapInterface *)jarg1; 
  result = (bool)(arg1)->getIgnoreEmptyFileName();
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_ArMapInterface_setIgnoreCase__SWIG_0(void * jarg1, unsigned int jarg2) {
  ArMapInterface *arg1 = (ArMapInterface *) 0 ;
  bool arg2 ;
  
  arg1 = (ArMapInterface *)jarg1; 
  arg2 = jarg2 ? true : false; 
  (arg1)->setIgnoreCase(arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_ArMapInterface_setIgnoreCase__SWIG_1(void * jarg1) {
  ArMapInterface *arg1 = (ArMapInterface *) 0 ;
  
  arg1 = (ArMapInterface *)jarg1; 
  (arg1)->setIgnoreCase();
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_ArMapInterface_getIgnoreCase(void * jarg1) {
  unsigned int jresult ;
  ArMapInterface *arg1 = (ArMapInterface *) 0 ;
  bool result;
  
  arg1 = (ArMapInterface *)jarg1; 
  result = (bool)(arg1)->getIgnoreCase();
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_ArMapInterface_getInactiveInfo(void * jarg1) {
  void * jresult ;
  ArMapInterface *arg1 = (ArMapInterface *) 0 ;
  ArMapInfoInterface *result = 0 ;
  
  arg1 = (ArMapInterface *)jarg1; 
  result = (ArMapInfoInterface *)(arg1)->getInactiveInfo();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_ArMapInterface_getInactiveObjects(void * jarg1) {
  void * jresult ;
  ArMapInterface *arg1 = (ArMapInterface *) 0 ;
  ArMapObjectsInterface *result = 0 ;
  
  arg1 = (ArMapInterface *)jarg1; 
  result = (ArMapObjectsInterface *)(arg1)->getInactiveObjects();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_ArMapInterface_getChildObjects(void * jarg1) {
  void * jresult ;
  ArMapInterface *arg1 = (ArMapInterface *) 0 ;
  ArMapObjectsInterface *result = 0 ;
  
  arg1 = (ArMapInterface *)jarg1; 
  result = (ArMapObjectsInterface *)(arg1)->getChildObjects();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_ArMapInterface_findMapObjectParams(void * jarg1, char * jarg2) {
  void * jresult ;
  ArMapInterface *arg1 = (ArMapInterface *) 0 ;
  char *arg2 = (char *) 0 ;
  ArArgumentBuilder *result = 0 ;
  
  arg1 = (ArMapInterface *)jarg1; 
  arg2 = (char *)jarg2; 
  result = (ArArgumentBuilder *)(arg1)->findMapObjectParams((char const *)arg2);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_ArMapInterface_setMapObjectParams__SWIG_0(void * jarg1, char * jarg2, void * jarg3, void * jarg4) {
  unsigned int jresult ;
  ArMapInterface *arg1 = (ArMapInterface *) 0 ;
  char *arg2 = (char *) 0 ;
  ArArgumentBuilder *arg3 = (ArArgumentBuilder *) 0 ;
  ArMapChangeDetails *arg4 = (ArMapChangeDetails *) 0 ;
  bool result;
  
  arg1 = (ArMapInterface *)jarg1; 
  arg2 = (char *)jarg2; 
  arg3 = (ArArgumentBuilder *)jarg3; 
  arg4 = (ArMapChangeDetails *)jarg4; 
  result = (bool)(arg1)->setMapObjectParams((char const *)arg2,arg3,arg4);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_ArMapInterface_setMapObjectParams__SWIG_1(void * jarg1, char * jarg2, void * jarg3) {
  unsigned int jresult ;
  ArMapInterface *arg1 = (ArMapInterface *) 0 ;
  char *arg2 = (char *) 0 ;
  ArArgumentBuilder *arg3 = (ArArgumentBuilder *) 0 ;
  bool result;
  
  arg1 = (ArMapInterface *)jarg1; 
  arg2 = (char *)jarg2; 
  arg3 = (ArArgumentBuilder *)jarg3; 
  result = (bool)(arg1)->setMapObjectParams((char const *)arg2,arg3);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_ArMapInterface_getRemainder(void * jarg1) {
  void * jresult ;
  ArMapInterface *arg1 = (ArMapInterface *) 0 ;
  std::list< ArArgumentBuilder * > *result = 0 ;
  
  arg1 = (ArMapInterface *)jarg1; 
  result = (std::list< ArArgumentBuilder * > *)(arg1)->getRemainder();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_ArMapInterface_setQuiet(void * jarg1, unsigned int jarg2) {
  ArMapInterface *arg1 = (ArMapInterface *) 0 ;
  bool arg2 ;
  
  arg1 = (ArMapInterface *)jarg1; 
  arg2 = jarg2 ? true : false; 
  (arg1)->setQuiet(arg2);
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_ArMapInterface_parseLine(void * jarg1, char * jarg2) {
  unsigned int jresult ;
  ArMapInterface *arg1 = (ArMapInterface *) 0 ;
  char *arg2 = (char *) 0 ;
  bool result;
  
  arg1 = (ArMapInterface *)jarg1; 
  arg2 = (char *)jarg2; 
  result = (bool)(arg1)->parseLine(arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_ArMapInterface_parsingComplete(void * jarg1) {
  ArMapInterface *arg1 = (ArMapInterface *) 0 ;
  
  arg1 = (ArMapInterface *)jarg1; 
  (arg1)->parsingComplete();
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_ArMapInterface_isLoadingDataStarted(void * jarg1) {
  unsigned int jresult ;
  ArMapInterface *arg1 = (ArMapInterface *) 0 ;
  bool result;
  
  arg1 = (ArMapInterface *)jarg1; 
  result = (bool)(arg1)->isLoadingDataStarted();
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_ArMapInterface_isLoadingLinesAndDataStarted(void * jarg1) {
  unsigned int jresult ;
  ArMapInterface *arg1 = (ArMapInterface *) 0 ;
  bool result;
  
  arg1 = (ArMapInterface *)jarg1; 
  result = (bool)(arg1)->isLoadingLinesAndDataStarted();
  jresult = result; 
  return jresult;
}


SWIGEXPORT char * SWIGSTDCALL CSharp_ArMapInterface_getMapCategory(void * jarg1) {
  char * jresult ;
  ArMapInterface *arg1 = (ArMapInterface *) 0 ;
  char *result = 0 ;
  
  arg1 = (ArMapInterface *)jarg1; 
  result = (char *)(arg1)->getMapCategory();
  jresult = SWIG_csharp_string_callback((const char *)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_ArMap__SWIG_0(char * jarg1, unsigned int jarg2, char * jarg3, char * jarg4, char * jarg5, unsigned int jarg6, int jarg7, char * jarg8, int jarg9) {
  void * jresult ;
  char *arg1 = (char *) 0 ;
  bool arg2 ;
  char *arg3 = (char *) 0 ;
  char *arg4 = (char *) 0 ;
  char *arg5 = (char *) 0 ;
  bool arg6 ;
  ArPriority::Priority arg7 ;
  char *arg8 = (char *) 0 ;
  int arg9 ;
  ArMap *result = 0 ;
  
  arg1 = (char *)jarg1; 
  arg2 = jarg2 ? true : false; 
  arg3 = (char *)jarg3; 
  arg4 = (char *)jarg4; 
  arg5 = (char *)jarg5; 
  arg6 = jarg6 ? true : false; 
  arg7 = (ArPriority::Priority)jarg7; 
  arg8 = (char *)jarg8; 
  arg9 = (int)jarg9; 
  result = (ArMap *)new ArMap((char const *)arg1,arg2,(char const *)arg3,(char const *)arg4,(char const *)arg5,arg6,arg7,(char const *)arg8,arg9);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_ArMap__SWIG_1(char * jarg1, unsigned int jarg2, char * jarg3, char * jarg4, char * jarg5, unsigned int jarg6, int jarg7, char * jarg8) {
  void * jresult ;
  char *arg1 = (char *) 0 ;
  bool arg2 ;
  char *arg3 = (char *) 0 ;
  char *arg4 = (char *) 0 ;
  char *arg5 = (char *) 0 ;
  bool arg6 ;
  ArPriority::Priority arg7 ;
  char *arg8 = (char *) 0 ;
  ArMap *result = 0 ;
  
  arg1 = (char *)jarg1; 
  arg2 = jarg2 ? true : false; 
  arg3 = (char *)jarg3; 
  arg4 = (char *)jarg4; 
  arg5 = (char *)jarg5; 
  arg6 = jarg6 ? true : false; 
  arg7 = (ArPriority::Priority)jarg7; 
  arg8 = (char *)jarg8; 
  result = (ArMap *)new ArMap((char const *)arg1,arg2,(char const *)arg3,(char const *)arg4,(char const *)arg5,arg6,arg7,(char const *)arg8);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_ArMap__SWIG_2(char * jarg1, unsigned int jarg2, char * jarg3, char * jarg4, char * jarg5, unsigned int jarg6, int jarg7) {
  void * jresult ;
  char *arg1 = (char *) 0 ;
  bool arg2 ;
  char *arg3 = (char *) 0 ;
  char *arg4 = (char *) 0 ;
  char *arg5 = (char *) 0 ;
  bool arg6 ;
  ArPriority::Priority arg7 ;
  ArMap *result = 0 ;
  
  arg1 = (char *)jarg1; 
  arg2 = jarg2 ? true : false; 
  arg3 = (char *)jarg3; 
  arg4 = (char *)jarg4; 
  arg5 = (char *)jarg5; 
  arg6 = jarg6 ? true : false; 
  arg7 = (ArPriority::Priority)jarg7; 
  result = (ArMap *)new ArMap((char const *)arg1,arg2,(char const *)arg3,(char const *)arg4,(char const *)arg5,arg6,arg7);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_ArMap__SWIG_3(char * jarg1, unsigned int jarg2, char * jarg3, char * jarg4, char * jarg5, unsigned int jarg6) {
  void * jresult ;
  char *arg1 = (char *) 0 ;
  bool arg2 ;
  char *arg3 = (char *) 0 ;
  char *arg4 = (char *) 0 ;
  char *arg5 = (char *) 0 ;
  bool arg6 ;
  ArMap *result = 0 ;
  
  arg1 = (char *)jarg1; 
  arg2 = jarg2 ? true : false; 
  arg3 = (char *)jarg3; 
  arg4 = (char *)jarg4; 
  arg5 = (char *)jarg5; 
  arg6 = jarg6 ? true : false; 
  result = (ArMap *)new ArMap((char const *)arg1,arg2,(char const *)arg3,(char const *)arg4,(char const *)arg5,arg6);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_ArMap__SWIG_4(char * jarg1, unsigned int jarg2, char * jarg3, char * jarg4, char * jarg5) {
  void * jresult ;
  char *arg1 = (char *) 0 ;
  bool arg2 ;
  char *arg3 = (char *) 0 ;
  char *arg4 = (char *) 0 ;
  char *arg5 = (char *) 0 ;
  ArMap *result = 0 ;
  
  arg1 = (char *)jarg1; 
  arg2 = jarg2 ? true : false; 
  arg3 = (char *)jarg3; 
  arg4 = (char *)jarg4; 
  arg5 = (char *)jarg5; 
  result = (ArMap *)new ArMap((char const *)arg1,arg2,(char const *)arg3,(char const *)arg4,(char const *)arg5);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_ArMap__SWIG_5(char * jarg1, unsigned int jarg2, char * jarg3, char * jarg4) {
  void * jresult ;
  char *arg1 = (char *) 0 ;
  bool arg2 ;
  char *arg3 = (char *) 0 ;
  char *arg4 = (char *) 0 ;
  ArMap *result = 0 ;
  
  arg1 = (char *)jarg1; 
  arg2 = jarg2 ? true : false; 
  arg3 = (char *)jarg3; 
  arg4 = (char *)jarg4; 
  result = (ArMap *)new ArMap((char const *)arg1,arg2,(char const *)arg3,(char const *)arg4);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_ArMap__SWIG_6(char * jarg1, unsigned int jarg2, char * jarg3) {
  void * jresult ;
  char *arg1 = (char *) 0 ;
  bool arg2 ;
  char *arg3 = (char *) 0 ;
  ArMap *result = 0 ;
  
  arg1 = (char *)jarg1; 
  arg2 = jarg2 ? true : false; 
  arg3 = (char *)jarg3; 
  result = (ArMap *)new ArMap((char const *)arg1,arg2,(char const *)arg3);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_ArMap__SWIG_7(char * jarg1, unsigned int jarg2) {
  void * jresult ;
  char *arg1 = (char *) 0 ;
  bool arg2 ;
  ArMap *result = 0 ;
  
  arg1 = (char *)jarg1; 
  arg2 = jarg2 ? true : false; 
  result = (ArMap *)new ArMap((char const *)arg1,arg2);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_ArMap__SWIG_8(char * jarg1) {
  void * jresult ;
  char *arg1 = (char *) 0 ;
  ArMap *result = 0 ;
  
  arg1 = (char *)jarg1; 
  result = (ArMap *)new ArMap((char const *)arg1);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_ArMap__SWIG_9() {
  void * jresult ;
  ArMap *result = 0 ;
  
  result = (ArMap *)new ArMap();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_ArMap__SWIG_10(void * jarg1) {
  void * jresult ;
  ArMap *arg1 = 0 ;
  ArMap *result = 0 ;
  
  arg1 = (ArMap *)jarg1;
  if (!arg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "ArMap const & type is null", 0);
    return 0;
  } 
  result = (ArMap *)new ArMap((ArMap const &)*arg1);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_ArMap(void * jarg1) {
  ArMap *arg1 = (ArMap *) 0 ;
  
  arg1 = (ArMap *)jarg1; 
  delete arg1;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_ArMap_getScanTypes(void * jarg1) {
  void * jresult ;
  ArMap *arg1 = (ArMap *) 0 ;
  SwigValueWrapper< std::list< std::string > > result;
  
  arg1 = (ArMap *)jarg1; 
  result = ((ArMap const *)arg1)->getScanTypes();
  jresult = new std::list< std::string >((const std::list< std::string > &)result); 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_ArMap_setScanTypes(void * jarg1, void * jarg2) {
  unsigned int jresult ;
  ArMap *arg1 = (ArMap *) 0 ;
  std::list< std::string > *arg2 = 0 ;
  bool result;
  
  arg1 = (ArMap *)jarg1; 
  arg2 = (std::list< std::string > *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "std::list< std::string > const & type is null", 0);
    return 0;
  } 
  result = (bool)(arg1)->setScanTypes((std::list< std::string > const &)*arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_ArMap_lockObj(void * jarg1) {
  int jresult ;
  ArMap *arg1 = (ArMap *) 0 ;
  int result;
  
  arg1 = (ArMap *)jarg1; 
  result = (int)(arg1)->lock();
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_ArMap_tryLock(void * jarg1) {
  int jresult ;
  ArMap *arg1 = (ArMap *) 0 ;
  int result;
  
  arg1 = (ArMap *)jarg1; 
  result = (int)(arg1)->tryLock();
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_ArMap_unlockObj(void * jarg1) {
  int jresult ;
  ArMap *arg1 = (ArMap *) 0 ;
  int result;
  
  arg1 = (ArMap *)jarg1; 
  result = (int)(arg1)->unlock();
  jresult = result; 
  return jresult;
}


SWIGEXPORT char * SWIGSTDCALL CSharp_ArMap_getDisplayString__SWIG_0(void * jarg1, char * jarg2) {
  char * jresult ;
  ArMap *arg1 = (ArMap *) 0 ;
  char *arg2 = (char *) 0 ;
  char *result = 0 ;
  
  arg1 = (ArMap *)jarg1; 
  arg2 = (char *)jarg2; 
  result = (char *)(arg1)->getDisplayString((char const *)arg2);
  jresult = SWIG_csharp_string_callback((const char *)result); 
  return jresult;
}


SWIGEXPORT char * SWIGSTDCALL CSharp_ArMap_getDisplayString__SWIG_1(void * jarg1) {
  char * jresult ;
  ArMap *arg1 = (ArMap *) 0 ;
  char *result = 0 ;
  
  arg1 = (ArMap *)jarg1; 
  result = (char *)(arg1)->getDisplayString();
  jresult = SWIG_csharp_string_callback((const char *)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_ArMap_getPoints__SWIG_0(void * jarg1, char * jarg2) {
  void * jresult ;
  ArMap *arg1 = (ArMap *) 0 ;
  char *arg2 = (char *) 0 ;
  std::vector< ArPose > *result = 0 ;
  
  arg1 = (ArMap *)jarg1; 
  arg2 = (char *)jarg2; 
  result = (std::vector< ArPose > *)(arg1)->getPoints((char const *)arg2);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_ArMap_getPoints__SWIG_1(void * jarg1) {
  void * jresult ;
  ArMap *arg1 = (ArMap *) 0 ;
  std::vector< ArPose > *result = 0 ;
  
  arg1 = (ArMap *)jarg1; 
  result = (std::vector< ArPose > *)(arg1)->getPoints();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_ArMap_getMinPose__SWIG_0(void * jarg1, char * jarg2) {
  void * jresult ;
  ArMap *arg1 = (ArMap *) 0 ;
  char *arg2 = (char *) 0 ;
  ArPose result;
  
  arg1 = (ArMap *)jarg1; 
  arg2 = (char *)jarg2; 
  result = (arg1)->getMinPose((char const *)arg2);
  jresult = new ArPose((const ArPose &)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_ArMap_getMinPose__SWIG_1(void * jarg1) {
  void * jresult ;
  ArMap *arg1 = (ArMap *) 0 ;
  ArPose result;
  
  arg1 = (ArMap *)jarg1; 
  result = (arg1)->getMinPose();
  jresult = new ArPose((const ArPose &)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_ArMap_getMaxPose__SWIG_0(void * jarg1, char * jarg2) {
  void * jresult ;
  ArMap *arg1 = (ArMap *) 0 ;
  char *arg2 = (char *) 0 ;
  ArPose result;
  
  arg1 = (ArMap *)jarg1; 
  arg2 = (char *)jarg2; 
  result = (arg1)->getMaxPose((char const *)arg2);
  jresult = new ArPose((const ArPose &)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_ArMap_getMaxPose__SWIG_1(void * jarg1) {
  void * jresult ;
  ArMap *arg1 = (ArMap *) 0 ;
  ArPose result;
  
  arg1 = (ArMap *)jarg1; 
  result = (arg1)->getMaxPose();
  jresult = new ArPose((const ArPose &)result); 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_ArMap_getNumPoints__SWIG_0(void * jarg1, char * jarg2) {
  int jresult ;
  ArMap *arg1 = (ArMap *) 0 ;
  char *arg2 = (char *) 0 ;
  int result;
  
  arg1 = (ArMap *)jarg1; 
  arg2 = (char *)jarg2; 
  result = (int)(arg1)->getNumPoints((char const *)arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_ArMap_getNumPoints__SWIG_1(void * jarg1) {
  int jresult ;
  ArMap *arg1 = (ArMap *) 0 ;
  int result;
  
  arg1 = (ArMap *)jarg1; 
  result = (int)(arg1)->getNumPoints();
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_ArMap_isSortedPoints__SWIG_0(void * jarg1, char * jarg2) {
  unsigned int jresult ;
  ArMap *arg1 = (ArMap *) 0 ;
  char *arg2 = (char *) 0 ;
  bool result;
  
  arg1 = (ArMap *)jarg1; 
  arg2 = (char *)jarg2; 
  result = (bool)((ArMap const *)arg1)->isSortedPoints((char const *)arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_ArMap_isSortedPoints__SWIG_1(void * jarg1) {
  unsigned int jresult ;
  ArMap *arg1 = (ArMap *) 0 ;
  bool result;
  
  arg1 = (ArMap *)jarg1; 
  result = (bool)((ArMap const *)arg1)->isSortedPoints();
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_ArMap_setPoints__SWIG_0(void * jarg1, void * jarg2, char * jarg3, unsigned int jarg4, void * jarg5) {
  ArMap *arg1 = (ArMap *) 0 ;
  std::vector< ArPose > *arg2 = (std::vector< ArPose > *) 0 ;
  char *arg3 = (char *) 0 ;
  bool arg4 ;
  ArMapChangeDetails *arg5 = (ArMapChangeDetails *) 0 ;
  
  arg1 = (ArMap *)jarg1; 
  arg2 = (std::vector< ArPose > *)jarg2; 
  arg3 = (char *)jarg3; 
  arg4 = jarg4 ? true : false; 
  arg5 = (ArMapChangeDetails *)jarg5; 
  (arg1)->setPoints((std::vector< ArPose > const *)arg2,(char const *)arg3,arg4,arg5);
}


SWIGEXPORT void SWIGSTDCALL CSharp_ArMap_setPoints__SWIG_1(void * jarg1, void * jarg2, char * jarg3, unsigned int jarg4) {
  ArMap *arg1 = (ArMap *) 0 ;
  std::vector< ArPose > *arg2 = (std::vector< ArPose > *) 0 ;
  char *arg3 = (char *) 0 ;
  bool arg4 ;
  
  arg1 = (ArMap *)jarg1; 
  arg2 = (std::vector< ArPose > *)jarg2; 
  arg3 = (char *)jarg3; 
  arg4 = jarg4 ? true : false; 
  (arg1)->setPoints((std::vector< ArPose > const *)arg2,(char const *)arg3,arg4);
}


SWIGEXPORT void SWIGSTDCALL CSharp_ArMap_setPoints__SWIG_2(void * jarg1, void * jarg2, char * jarg3) {
  ArMap *arg1 = (ArMap *) 0 ;
  std::vector< ArPose > *arg2 = (std::vector< ArPose > *) 0 ;
  char *arg3 = (char *) 0 ;
  
  arg1 = (ArMap *)jarg1; 
  arg2 = (std::vector< ArPose > *)jarg2; 
  arg3 = (char *)jarg3; 
  (arg1)->setPoints((std::vector< ArPose > const *)arg2,(char const *)arg3);
}


SWIGEXPORT void SWIGSTDCALL CSharp_ArMap_setPoints__SWIG_3(void * jarg1, void * jarg2) {
  ArMap *arg1 = (ArMap *) 0 ;
  std::vector< ArPose > *arg2 = (std::vector< ArPose > *) 0 ;
  
  arg1 = (ArMap *)jarg1; 
  arg2 = (std::vector< ArPose > *)jarg2; 
  (arg1)->setPoints((std::vector< ArPose > const *)arg2);
}


SWIGEXPORT void * SWIGSTDCALL CSharp_ArMap_getLines__SWIG_0(void * jarg1, char * jarg2) {
  void * jresult ;
  ArMap *arg1 = (ArMap *) 0 ;
  char *arg2 = (char *) 0 ;
  std::vector< ArLineSegment > *result = 0 ;
  
  arg1 = (ArMap *)jarg1; 
  arg2 = (char *)jarg2; 
  result = (std::vector< ArLineSegment > *)(arg1)->getLines((char const *)arg2);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_ArMap_getLines__SWIG_1(void * jarg1) {
  void * jresult ;
  ArMap *arg1 = (ArMap *) 0 ;
  std::vector< ArLineSegment > *result = 0 ;
  
  arg1 = (ArMap *)jarg1; 
  result = (std::vector< ArLineSegment > *)(arg1)->getLines();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_ArMap_getLineMinPose__SWIG_0(void * jarg1, char * jarg2) {
  void * jresult ;
  ArMap *arg1 = (ArMap *) 0 ;
  char *arg2 = (char *) 0 ;
  ArPose result;
  
  arg1 = (ArMap *)jarg1; 
  arg2 = (char *)jarg2; 
  result = (arg1)->getLineMinPose((char const *)arg2);
  jresult = new ArPose((const ArPose &)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_ArMap_getLineMinPose__SWIG_1(void * jarg1) {
  void * jresult ;
  ArMap *arg1 = (ArMap *) 0 ;
  ArPose result;
  
  arg1 = (ArMap *)jarg1; 
  result = (arg1)->getLineMinPose();
  jresult = new ArPose((const ArPose &)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_ArMap_getLineMaxPose__SWIG_0(void * jarg1, char * jarg2) {
  void * jresult ;
  ArMap *arg1 = (ArMap *) 0 ;
  char *arg2 = (char *) 0 ;
  ArPose result;
  
  arg1 = (ArMap *)jarg1; 
  arg2 = (char *)jarg2; 
  result = (arg1)->getLineMaxPose((char const *)arg2);
  jresult = new ArPose((const ArPose &)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_ArMap_getLineMaxPose__SWIG_1(void * jarg1) {
  void * jresult ;
  ArMap *arg1 = (ArMap *) 0 ;
  ArPose result;
  
  arg1 = (ArMap *)jarg1; 
  result = (arg1)->getLineMaxPose();
  jresult = new ArPose((const ArPose &)result); 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_ArMap_getNumLines__SWIG_0(void * jarg1, char * jarg2) {
  int jresult ;
  ArMap *arg1 = (ArMap *) 0 ;
  char *arg2 = (char *) 0 ;
  int result;
  
  arg1 = (ArMap *)jarg1; 
  arg2 = (char *)jarg2; 
  result = (int)(arg1)->getNumLines((char const *)arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_ArMap_getNumLines__SWIG_1(void * jarg1) {
  int jresult ;
  ArMap *arg1 = (ArMap *) 0 ;
  int result;
  
  arg1 = (ArMap *)jarg1; 
  result = (int)(arg1)->getNumLines();
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_ArMap_isSortedLines__SWIG_0(void * jarg1, char * jarg2) {
  unsigned int jresult ;
  ArMap *arg1 = (ArMap *) 0 ;
  char *arg2 = (char *) 0 ;
  bool result;
  
  arg1 = (ArMap *)jarg1; 
  arg2 = (char *)jarg2; 
  result = (bool)((ArMap const *)arg1)->isSortedLines((char const *)arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_ArMap_isSortedLines__SWIG_1(void * jarg1) {
  unsigned int jresult ;
  ArMap *arg1 = (ArMap *) 0 ;
  bool result;
  
  arg1 = (ArMap *)jarg1; 
  result = (bool)((ArMap const *)arg1)->isSortedLines();
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_ArMap_setLines__SWIG_0(void * jarg1, void * jarg2, char * jarg3, unsigned int jarg4, void * jarg5) {
  ArMap *arg1 = (ArMap *) 0 ;
  std::vector< ArLineSegment > *arg2 = (std::vector< ArLineSegment > *) 0 ;
  char *arg3 = (char *) 0 ;
  bool arg4 ;
  ArMapChangeDetails *arg5 = (ArMapChangeDetails *) 0 ;
  
  arg1 = (ArMap *)jarg1; 
  arg2 = (std::vector< ArLineSegment > *)jarg2; 
  arg3 = (char *)jarg3; 
  arg4 = jarg4 ? true : false; 
  arg5 = (ArMapChangeDetails *)jarg5; 
  (arg1)->setLines((std::vector< ArLineSegment > const *)arg2,(char const *)arg3,arg4,arg5);
}


SWIGEXPORT void SWIGSTDCALL CSharp_ArMap_setLines__SWIG_1(void * jarg1, void * jarg2, char * jarg3, unsigned int jarg4) {
  ArMap *arg1 = (ArMap *) 0 ;
  std::vector< ArLineSegment > *arg2 = (std::vector< ArLineSegment > *) 0 ;
  char *arg3 = (char *) 0 ;
  bool arg4 ;
  
  arg1 = (ArMap *)jarg1; 
  arg2 = (std::vector< ArLineSegment > *)jarg2; 
  arg3 = (char *)jarg3; 
  arg4 = jarg4 ? true : false; 
  (arg1)->setLines((std::vector< ArLineSegment > const *)arg2,(char const *)arg3,arg4);
}


SWIGEXPORT void SWIGSTDCALL CSharp_ArMap_setLines__SWIG_2(void * jarg1, void * jarg2, char * jarg3) {
  ArMap *arg1 = (ArMap *) 0 ;
  std::vector< ArLineSegment > *arg2 = (std::vector< ArLineSegment > *) 0 ;
  char *arg3 = (char *) 0 ;
  
  arg1 = (ArMap *)jarg1; 
  arg2 = (std::vector< ArLineSegment > *)jarg2; 
  arg3 = (char *)jarg3; 
  (arg1)->setLines((std::vector< ArLineSegment > const *)arg2,(char const *)arg3);
}


SWIGEXPORT void SWIGSTDCALL CSharp_ArMap_setLines__SWIG_3(void * jarg1, void * jarg2) {
  ArMap *arg1 = (ArMap *) 0 ;
  std::vector< ArLineSegment > *arg2 = (std::vector< ArLineSegment > *) 0 ;
  
  arg1 = (ArMap *)jarg1; 
  arg2 = (std::vector< ArLineSegment > *)jarg2; 
  (arg1)->setLines((std::vector< ArLineSegment > const *)arg2);
}


SWIGEXPORT int SWIGSTDCALL CSharp_ArMap_getResolution__SWIG_0(void * jarg1, char * jarg2) {
  int jresult ;
  ArMap *arg1 = (ArMap *) 0 ;
  char *arg2 = (char *) 0 ;
  int result;
  
  arg1 = (ArMap *)jarg1; 
  arg2 = (char *)jarg2; 
  result = (int)(arg1)->getResolution((char const *)arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_ArMap_getResolution__SWIG_1(void * jarg1) {
  int jresult ;
  ArMap *arg1 = (ArMap *) 0 ;
  int result;
  
  arg1 = (ArMap *)jarg1; 
  result = (int)(arg1)->getResolution();
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_ArMap_setResolution__SWIG_0(void * jarg1, int jarg2, char * jarg3, void * jarg4) {
  ArMap *arg1 = (ArMap *) 0 ;
  int arg2 ;
  char *arg3 = (char *) 0 ;
  ArMapChangeDetails *arg4 = (ArMapChangeDetails *) 0 ;
  
  arg1 = (ArMap *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (char *)jarg3; 
  arg4 = (ArMapChangeDetails *)jarg4; 
  (arg1)->setResolution(arg2,(char const *)arg3,arg4);
}


SWIGEXPORT void SWIGSTDCALL CSharp_ArMap_setResolution__SWIG_1(void * jarg1, int jarg2, char * jarg3) {
  ArMap *arg1 = (ArMap *) 0 ;
  int arg2 ;
  char *arg3 = (char *) 0 ;
  
  arg1 = (ArMap *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (char *)jarg3; 
  (arg1)->setResolution(arg2,(char const *)arg3);
}


SWIGEXPORT void SWIGSTDCALL CSharp_ArMap_setResolution__SWIG_2(void * jarg1, int jarg2) {
  ArMap *arg1 = (ArMap *) 0 ;
  int arg2 ;
  
  arg1 = (ArMap *)jarg1; 
  arg2 = (int)jarg2; 
  (arg1)->setResolution(arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_ArMap_writeScanToFunctor__SWIG_0(void * jarg1, void * jarg2, char * jarg3, char * jarg4) {
  ArMap *arg1 = (ArMap *) 0 ;
  ArFunctor1< char const * > *arg2 = (ArFunctor1< char const * > *) 0 ;
  char *arg3 = (char *) 0 ;
  char *arg4 = (char *) 0 ;
  
  arg1 = (ArMap *)jarg1; 
  arg2 = (ArFunctor1< char const * > *)jarg2; 
  arg3 = (char *)jarg3; 
  arg4 = (char *)jarg4; 
  (arg1)->writeScanToFunctor(arg2,(char const *)arg3,(char const *)arg4);
}


SWIGEXPORT void SWIGSTDCALL CSharp_ArMap_writeScanToFunctor__SWIG_1(void * jarg1, void * jarg2, char * jarg3) {
  ArMap *arg1 = (ArMap *) 0 ;
  ArFunctor1< char const * > *arg2 = (ArFunctor1< char const * > *) 0 ;
  char *arg3 = (char *) 0 ;
  
  arg1 = (ArMap *)jarg1; 
  arg2 = (ArFunctor1< char const * > *)jarg2; 
  arg3 = (char *)jarg3; 
  (arg1)->writeScanToFunctor(arg2,(char const *)arg3);
}


SWIGEXPORT void SWIGSTDCALL CSharp_ArMap_writePointsToFunctor__SWIG_0(void * jarg1, void * jarg2, char * jarg3, void * jarg4) {
  ArMap *arg1 = (ArMap *) 0 ;
  ArFunctor2< int,std::vector< ArPose > * > *arg2 = (ArFunctor2< int,std::vector< ArPose > * > *) 0 ;
  char *arg3 = (char *) 0 ;
  ArFunctor1< char const * > *arg4 = (ArFunctor1< char const * > *) 0 ;
  
  arg1 = (ArMap *)jarg1; 
  arg2 = (ArFunctor2< int,std::vector< ArPose > * > *)jarg2; 
  arg3 = (char *)jarg3; 
  arg4 = (ArFunctor1< char const * > *)jarg4; 
  (arg1)->writePointsToFunctor(arg2,(char const *)arg3,arg4);
}


SWIGEXPORT void SWIGSTDCALL CSharp_ArMap_writePointsToFunctor__SWIG_1(void * jarg1, void * jarg2, char * jarg3) {
  ArMap *arg1 = (ArMap *) 0 ;
  ArFunctor2< int,std::vector< ArPose > * > *arg2 = (ArFunctor2< int,std::vector< ArPose > * > *) 0 ;
  char *arg3 = (char *) 0 ;
  
  arg1 = (ArMap *)jarg1; 
  arg2 = (ArFunctor2< int,std::vector< ArPose > * > *)jarg2; 
  arg3 = (char *)jarg3; 
  (arg1)->writePointsToFunctor(arg2,(char const *)arg3);
}


SWIGEXPORT void SWIGSTDCALL CSharp_ArMap_writePointsToFunctor__SWIG_2(void * jarg1, void * jarg2) {
  ArMap *arg1 = (ArMap *) 0 ;
  ArFunctor2< int,std::vector< ArPose > * > *arg2 = (ArFunctor2< int,std::vector< ArPose > * > *) 0 ;
  
  arg1 = (ArMap *)jarg1; 
  arg2 = (ArFunctor2< int,std::vector< ArPose > * > *)jarg2; 
  (arg1)->writePointsToFunctor(arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_ArMap_writeLinesToFunctor__SWIG_0(void * jarg1, void * jarg2, char * jarg3, void * jarg4) {
  ArMap *arg1 = (ArMap *) 0 ;
  ArFunctor2< int,std::vector< ArLineSegment > * > *arg2 = (ArFunctor2< int,std::vector< ArLineSegment > * > *) 0 ;
  char *arg3 = (char *) 0 ;
  ArFunctor1< char const * > *arg4 = (ArFunctor1< char const * > *) 0 ;
  
  arg1 = (ArMap *)jarg1; 
  arg2 = (ArFunctor2< int,std::vector< ArLineSegment > * > *)jarg2; 
  arg3 = (char *)jarg3; 
  arg4 = (ArFunctor1< char const * > *)jarg4; 
  (arg1)->writeLinesToFunctor(arg2,(char const *)arg3,arg4);
}


SWIGEXPORT void SWIGSTDCALL CSharp_ArMap_writeLinesToFunctor__SWIG_1(void * jarg1, void * jarg2, char * jarg3) {
  ArMap *arg1 = (ArMap *) 0 ;
  ArFunctor2< int,std::vector< ArLineSegment > * > *arg2 = (ArFunctor2< int,std::vector< ArLineSegment > * > *) 0 ;
  char *arg3 = (char *) 0 ;
  
  arg1 = (ArMap *)jarg1; 
  arg2 = (ArFunctor2< int,std::vector< ArLineSegment > * > *)jarg2; 
  arg3 = (char *)jarg3; 
  (arg1)->writeLinesToFunctor(arg2,(char const *)arg3);
}


SWIGEXPORT void SWIGSTDCALL CSharp_ArMap_writeLinesToFunctor__SWIG_2(void * jarg1, void * jarg2) {
  ArMap *arg1 = (ArMap *) 0 ;
  ArFunctor2< int,std::vector< ArLineSegment > * > *arg2 = (ArFunctor2< int,std::vector< ArLineSegment > * > *) 0 ;
  
  arg1 = (ArMap *)jarg1; 
  arg2 = (ArFunctor2< int,std::vector< ArLineSegment > * > *)jarg2; 
  (arg1)->writeLinesToFunctor(arg2);
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_ArMap_addToFileParser(void * jarg1, void * jarg2) {
  unsigned int jresult ;
  ArMap *arg1 = (ArMap *) 0 ;
  ArFileParser *arg2 = (ArFileParser *) 0 ;
  bool result;
  
  arg1 = (ArMap *)jarg1; 
  arg2 = (ArFileParser *)jarg2; 
  result = (bool)(arg1)->addToFileParser(arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_ArMap_remFromFileParser(void * jarg1, void * jarg2) {
  unsigned int jresult ;
  ArMap *arg1 = (ArMap *) 0 ;
  ArFileParser *arg2 = (ArFileParser *) 0 ;
  bool result;
  
  arg1 = (ArMap *)jarg1; 
  arg2 = (ArFileParser *)jarg2; 
  result = (bool)(arg1)->remFromFileParser(arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_ArMap_readDataPoint(void * jarg1, char * jarg2) {
  unsigned int jresult ;
  ArMap *arg1 = (ArMap *) 0 ;
  char *arg2 = (char *) 0 ;
  bool result;
  
  arg1 = (ArMap *)jarg1; 
  arg2 = (char *)jarg2; 
  result = (bool)(arg1)->readDataPoint(arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_ArMap_readLineSegment(void * jarg1, char * jarg2) {
  unsigned int jresult ;
  ArMap *arg1 = (ArMap *) 0 ;
  char *arg2 = (char *) 0 ;
  bool result;
  
  arg1 = (ArMap *)jarg1; 
  arg2 = (char *)jarg2; 
  result = (bool)(arg1)->readLineSegment(arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_ArMap_loadDataPoint(void * jarg1, double jarg2, double jarg3) {
  ArMap *arg1 = (ArMap *) 0 ;
  double arg2 ;
  double arg3 ;
  
  arg1 = (ArMap *)jarg1; 
  arg2 = (double)jarg2; 
  arg3 = (double)jarg3; 
  (arg1)->loadDataPoint(arg2,arg3);
}


SWIGEXPORT void SWIGSTDCALL CSharp_ArMap_loadLineSegment(void * jarg1, double jarg2, double jarg3, double jarg4, double jarg5) {
  ArMap *arg1 = (ArMap *) 0 ;
  double arg2 ;
  double arg3 ;
  double arg4 ;
  double arg5 ;
  
  arg1 = (ArMap *)jarg1; 
  arg2 = (double)jarg2; 
  arg3 = (double)jarg3; 
  arg4 = (double)jarg4; 
  arg5 = (double)jarg5; 
  (arg1)->loadLineSegment(arg2,arg3,arg4,arg5);
}


SWIGEXPORT void * SWIGSTDCALL CSharp_ArMap_findFirstMapObject__SWIG_0(void * jarg1, char * jarg2, char * jarg3, unsigned int jarg4) {
  void * jresult ;
  ArMap *arg1 = (ArMap *) 0 ;
  char *arg2 = (char *) 0 ;
  char *arg3 = (char *) 0 ;
  bool arg4 ;
  ArMapObject *result = 0 ;
  
  arg1 = (ArMap *)jarg1; 
  arg2 = (char *)jarg2; 
  arg3 = (char *)jarg3; 
  arg4 = jarg4 ? true : false; 
  result = (ArMapObject *)(arg1)->findFirstMapObject((char const *)arg2,(char const *)arg3,arg4);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_ArMap_findFirstMapObject__SWIG_1(void * jarg1, char * jarg2, char * jarg3) {
  void * jresult ;
  ArMap *arg1 = (ArMap *) 0 ;
  char *arg2 = (char *) 0 ;
  char *arg3 = (char *) 0 ;
  ArMapObject *result = 0 ;
  
  arg1 = (ArMap *)jarg1; 
  arg2 = (char *)jarg2; 
  arg3 = (char *)jarg3; 
  result = (ArMapObject *)(arg1)->findFirstMapObject((char const *)arg2,(char const *)arg3);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_ArMap_findMapObject__SWIG_0(void * jarg1, char * jarg2, char * jarg3, unsigned int jarg4) {
  void * jresult ;
  ArMap *arg1 = (ArMap *) 0 ;
  char *arg2 = (char *) 0 ;
  char *arg3 = (char *) 0 ;
  bool arg4 ;
  ArMapObject *result = 0 ;
  
  arg1 = (ArMap *)jarg1; 
  arg2 = (char *)jarg2; 
  arg3 = (char *)jarg3; 
  arg4 = jarg4 ? true : false; 
  result = (ArMapObject *)(arg1)->findMapObject((char const *)arg2,(char const *)arg3,arg4);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_ArMap_findMapObject__SWIG_1(void * jarg1, char * jarg2, char * jarg3) {
  void * jresult ;
  ArMap *arg1 = (ArMap *) 0 ;
  char *arg2 = (char *) 0 ;
  char *arg3 = (char *) 0 ;
  ArMapObject *result = 0 ;
  
  arg1 = (ArMap *)jarg1; 
  arg2 = (char *)jarg2; 
  arg3 = (char *)jarg3; 
  result = (ArMapObject *)(arg1)->findMapObject((char const *)arg2,(char const *)arg3);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_ArMap_findMapObject__SWIG_2(void * jarg1, char * jarg2) {
  void * jresult ;
  ArMap *arg1 = (ArMap *) 0 ;
  char *arg2 = (char *) 0 ;
  ArMapObject *result = 0 ;
  
  arg1 = (ArMap *)jarg1; 
  arg2 = (char *)jarg2; 
  result = (ArMapObject *)(arg1)->findMapObject((char const *)arg2);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_ArMap_findMapObjectsOfType__SWIG_0(void * jarg1, char * jarg2, unsigned int jarg3) {
  void * jresult ;
  ArMap *arg1 = (ArMap *) 0 ;
  char *arg2 = (char *) 0 ;
  bool arg3 ;
  SwigValueWrapper< std::list< ArMapObject * > > result;
  
  arg1 = (ArMap *)jarg1; 
  arg2 = (char *)jarg2; 
  arg3 = jarg3 ? true : false; 
  result = (arg1)->findMapObjectsOfType((char const *)arg2,arg3);
  jresult = new std::list< ArMapObject * >((const std::list< ArMapObject * > &)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_ArMap_findMapObjectsOfType__SWIG_1(void * jarg1, char * jarg2) {
  void * jresult ;
  ArMap *arg1 = (ArMap *) 0 ;
  char *arg2 = (char *) 0 ;
  SwigValueWrapper< std::list< ArMapObject * > > result;
  
  arg1 = (ArMap *)jarg1; 
  arg2 = (char *)jarg2; 
  result = (arg1)->findMapObjectsOfType((char const *)arg2);
  jresult = new std::list< ArMapObject * >((const std::list< ArMapObject * > &)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_ArMap_getMapObjects(void * jarg1) {
  void * jresult ;
  ArMap *arg1 = (ArMap *) 0 ;
  std::list< ArMapObject * > *result = 0 ;
  
  arg1 = (ArMap *)jarg1; 
  result = (std::list< ArMapObject * > *)(arg1)->getMapObjects();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_ArMap_setMapObjects__SWIG_0(void * jarg1, void * jarg2, unsigned int jarg3, void * jarg4) {
  ArMap *arg1 = (ArMap *) 0 ;
  std::list< ArMapObject * > *arg2 = (std::list< ArMapObject * > *) 0 ;
  bool arg3 ;
  ArMapChangeDetails *arg4 = (ArMapChangeDetails *) 0 ;
  
  arg1 = (ArMap *)jarg1; 
  arg2 = (std::list< ArMapObject * > *)jarg2; 
  arg3 = jarg3 ? true : false; 
  arg4 = (ArMapChangeDetails *)jarg4; 
  (arg1)->setMapObjects((std::list< ArMapObject * > const *)arg2,arg3,arg4);
}


SWIGEXPORT void SWIGSTDCALL CSharp_ArMap_setMapObjects__SWIG_1(void * jarg1, void * jarg2, unsigned int jarg3) {
  ArMap *arg1 = (ArMap *) 0 ;
  std::list< ArMapObject * > *arg2 = (std::list< ArMapObject * > *) 0 ;
  bool arg3 ;
  
  arg1 = (ArMap *)jarg1; 
  arg2 = (std::list< ArMapObject * > *)jarg2; 
  arg3 = jarg3 ? true : false; 
  (arg1)->setMapObjects((std::list< ArMapObject * > const *)arg2,arg3);
}


SWIGEXPORT void SWIGSTDCALL CSharp_ArMap_setMapObjects__SWIG_2(void * jarg1, void * jarg2) {
  ArMap *arg1 = (ArMap *) 0 ;
  std::list< ArMapObject * > *arg2 = (std::list< ArMapObject * > *) 0 ;
  
  arg1 = (ArMap *)jarg1; 
  arg2 = (std::list< ArMapObject * > *)jarg2; 
  (arg1)->setMapObjects((std::list< ArMapObject * > const *)arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_ArMap_writeObjectListToFunctor(void * jarg1, void * jarg2, char * jarg3) {
  ArMap *arg1 = (ArMap *) 0 ;
  ArFunctor1< char const * > *arg2 = (ArFunctor1< char const * > *) 0 ;
  char *arg3 = (char *) 0 ;
  
  arg1 = (ArMap *)jarg1; 
  arg2 = (ArFunctor1< char const * > *)jarg2; 
  arg3 = (char *)jarg3; 
  (arg1)->writeObjectListToFunctor(arg2,(char const *)arg3);
}


SWIGEXPORT void SWIGSTDCALL CSharp_ArMap_offsetMapContents(void * jarg1, void * jarg2) {
  ArMap *arg1 = (ArMap *) 0 ;
  ArPose *arg2 = 0 ;
  
  arg1 = (ArMap *)jarg1; 
  arg2 = (ArPose *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "ArPose const & type is null", 0);
    return ;
  } 
  (arg1)->offsetMapContents((ArPose const &)*arg2);
}


SWIGEXPORT void * SWIGSTDCALL CSharp_ArMap_getInfo__SWIG_0(void * jarg1, char * jarg2) {
  void * jresult ;
  ArMap *arg1 = (ArMap *) 0 ;
  char *arg2 = (char *) 0 ;
  std::list< ArArgumentBuilder * > *result = 0 ;
  
  arg1 = (ArMap *)jarg1; 
  arg2 = (char *)jarg2; 
  result = (std::list< ArArgumentBuilder * > *)(arg1)->getInfo((char const *)arg2);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_ArMap_getInfo__SWIG_1(void * jarg1, int jarg2) {
  void * jresult ;
  ArMap *arg1 = (ArMap *) 0 ;
  int arg2 ;
  std::list< ArArgumentBuilder * > *result = 0 ;
  
  arg1 = (ArMap *)jarg1; 
  arg2 = (int)jarg2; 
  result = (std::list< ArArgumentBuilder * > *)(arg1)->getInfo(arg2);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_ArMap_getMapInfo(void * jarg1) {
  void * jresult ;
  ArMap *arg1 = (ArMap *) 0 ;
  std::list< ArArgumentBuilder * > *result = 0 ;
  
  arg1 = (ArMap *)jarg1; 
  result = (std::list< ArArgumentBuilder * > *)(arg1)->getMapInfo();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_ArMap_getInfoCount(void * jarg1) {
  int jresult ;
  ArMap *arg1 = (ArMap *) 0 ;
  int result;
  
  arg1 = (ArMap *)jarg1; 
  result = (int)((ArMap const *)arg1)->getInfoCount();
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_ArMap_getInfoNames(void * jarg1) {
  void * jresult ;
  ArMap *arg1 = (ArMap *) 0 ;
  SwigValueWrapper< std::list< std::string > > result;
  
  arg1 = (ArMap *)jarg1; 
  result = ((ArMap const *)arg1)->getInfoNames();
  jresult = new std::list< std::string >((const std::list< std::string > &)result); 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_ArMap_setInfo__SWIG_0(void * jarg1, char * jarg2, void * jarg3, void * jarg4) {
  unsigned int jresult ;
  ArMap *arg1 = (ArMap *) 0 ;
  char *arg2 = (char *) 0 ;
  std::list< ArArgumentBuilder * > *arg3 = (std::list< ArArgumentBuilder * > *) 0 ;
  ArMapChangeDetails *arg4 = (ArMapChangeDetails *) 0 ;
  bool result;
  
  arg1 = (ArMap *)jarg1; 
  arg2 = (char *)jarg2; 
  arg3 = (std::list< ArArgumentBuilder * > *)jarg3; 
  arg4 = (ArMapChangeDetails *)jarg4; 
  result = (bool)(arg1)->setInfo((char const *)arg2,(std::list< ArArgumentBuilder * > const *)arg3,arg4);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_ArMap_setInfo__SWIG_1(void * jarg1, char * jarg2, void * jarg3) {
  unsigned int jresult ;
  ArMap *arg1 = (ArMap *) 0 ;
  char *arg2 = (char *) 0 ;
  std::list< ArArgumentBuilder * > *arg3 = (std::list< ArArgumentBuilder * > *) 0 ;
  bool result;
  
  arg1 = (ArMap *)jarg1; 
  arg2 = (char *)jarg2; 
  arg3 = (std::list< ArArgumentBuilder * > *)jarg3; 
  result = (bool)(arg1)->setInfo((char const *)arg2,(std::list< ArArgumentBuilder * > const *)arg3);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_ArMap_setInfo__SWIG_2(void * jarg1, int jarg2, void * jarg3, void * jarg4) {
  unsigned int jresult ;
  ArMap *arg1 = (ArMap *) 0 ;
  int arg2 ;
  std::list< ArArgumentBuilder * > *arg3 = (std::list< ArArgumentBuilder * > *) 0 ;
  ArMapChangeDetails *arg4 = (ArMapChangeDetails *) 0 ;
  bool result;
  
  arg1 = (ArMap *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (std::list< ArArgumentBuilder * > *)jarg3; 
  arg4 = (ArMapChangeDetails *)jarg4; 
  result = (bool)(arg1)->setInfo(arg2,(std::list< ArArgumentBuilder * > const *)arg3,arg4);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_ArMap_setInfo__SWIG_3(void * jarg1, int jarg2, void * jarg3) {
  unsigned int jresult ;
  ArMap *arg1 = (ArMap *) 0 ;
  int arg2 ;
  std::list< ArArgumentBuilder * > *arg3 = (std::list< ArArgumentBuilder * > *) 0 ;
  bool result;
  
  arg1 = (ArMap *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (std::list< ArArgumentBuilder * > *)jarg3; 
  result = (bool)(arg1)->setInfo(arg2,(std::list< ArArgumentBuilder * > const *)arg3);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_ArMap_setMapInfo__SWIG_0(void * jarg1, void * jarg2, void * jarg3) {
  unsigned int jresult ;
  ArMap *arg1 = (ArMap *) 0 ;
  std::list< ArArgumentBuilder * > *arg2 = (std::list< ArArgumentBuilder * > *) 0 ;
  ArMapChangeDetails *arg3 = (ArMapChangeDetails *) 0 ;
  bool result;
  
  arg1 = (ArMap *)jarg1; 
  arg2 = (std::list< ArArgumentBuilder * > *)jarg2; 
  arg3 = (ArMapChangeDetails *)jarg3; 
  result = (bool)(arg1)->setMapInfo((std::list< ArArgumentBuilder * > const *)arg2,arg3);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_ArMap_setMapInfo__SWIG_1(void * jarg1, void * jarg2) {
  unsigned int jresult ;
  ArMap *arg1 = (ArMap *) 0 ;
  std::list< ArArgumentBuilder * > *arg2 = (std::list< ArArgumentBuilder * > *) 0 ;
  bool result;
  
  arg1 = (ArMap *)jarg1; 
  arg2 = (std::list< ArArgumentBuilder * > *)jarg2; 
  result = (bool)(arg1)->setMapInfo((std::list< ArArgumentBuilder * > const *)arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT char * SWIGSTDCALL CSharp_ArMap_getInfoName(void * jarg1, int jarg2) {
  char * jresult ;
  ArMap *arg1 = (ArMap *) 0 ;
  int arg2 ;
  char *result = 0 ;
  
  arg1 = (ArMap *)jarg1; 
  arg2 = (int)jarg2; 
  result = (char *)(arg1)->getInfoName(arg2);
  jresult = SWIG_csharp_string_callback((const char *)result); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_ArMap_writeInfoToFunctor(void * jarg1, void * jarg2, char * jarg3) {
  ArMap *arg1 = (ArMap *) 0 ;
  ArFunctor1< char const * > *arg2 = (ArFunctor1< char const * > *) 0 ;
  char *arg3 = (char *) 0 ;
  
  arg1 = (ArMap *)jarg1; 
  arg2 = (ArFunctor1< char const * > *)jarg2; 
  arg3 = (char *)jarg3; 
  (arg1)->writeInfoToFunctor(arg2,(char const *)arg3);
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_ArMap_hasOriginLatLongAlt(void * jarg1) {
  unsigned int jresult ;
  ArMap *arg1 = (ArMap *) 0 ;
  bool result;
  
  arg1 = (ArMap *)jarg1; 
  result = (bool)(arg1)->hasOriginLatLongAlt();
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_ArMap_hasOriginLatLonAlt(void * jarg1) {
  unsigned int jresult ;
  ArMap *arg1 = (ArMap *) 0 ;
  bool result;
  
  arg1 = (ArMap *)jarg1; 
  result = (bool)(arg1)->hasOriginLatLonAlt();
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_ArMap_getOriginLatLong(void * jarg1) {
  void * jresult ;
  ArMap *arg1 = (ArMap *) 0 ;
  ArPose result;
  
  arg1 = (ArMap *)jarg1; 
  result = (arg1)->getOriginLatLong();
  jresult = new ArPose((const ArPose &)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_ArMap_getOriginLatLon(void * jarg1) {
  void * jresult ;
  ArMap *arg1 = (ArMap *) 0 ;
  ArPose result;
  
  arg1 = (ArMap *)jarg1; 
  result = (arg1)->getOriginLatLon();
  jresult = new ArPose((const ArPose &)result); 
  return jresult;
}


SWIGEXPORT double SWIGSTDCALL CSharp_ArMap_getOriginAltitude(void * jarg1) {
  double jresult ;
  ArMap *arg1 = (ArMap *) 0 ;
  double result;
  
  arg1 = (ArMap *)jarg1; 
  result = (double)(arg1)->getOriginAltitude();
  jresult = result; 
  return jresult;
}


SWIGEXPORT double SWIGSTDCALL CSharp_ArMap_getOriginLatitude(void * jarg1) {
  double jresult ;
  ArMap *arg1 = (ArMap *) 0 ;
  double result;
  
  arg1 = (ArMap *)jarg1; 
  result = (double)(arg1)->getOriginLatitude();
  jresult = result; 
  return jresult;
}


SWIGEXPORT double SWIGSTDCALL CSharp_ArMap_getOriginLongitude(void * jarg1) {
  double jresult ;
  ArMap *arg1 = (ArMap *) 0 ;
  double result;
  
  arg1 = (ArMap *)jarg1; 
  result = (double)(arg1)->getOriginLongitude();
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_ArMap_getOriginLLA(void * jarg1) {
  void * jresult ;
  ArMap *arg1 = (ArMap *) 0 ;
  ArLLACoords result;
  
  arg1 = (ArMap *)jarg1; 
  result = (arg1)->getOriginLLA();
  jresult = new ArLLACoords((const ArLLACoords &)result); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_ArMap_setOriginLatLongAlt__SWIG_0(void * jarg1, unsigned int jarg2, void * jarg3, double jarg4, void * jarg5) {
  ArMap *arg1 = (ArMap *) 0 ;
  bool arg2 ;
  ArPose *arg3 = 0 ;
  double arg4 ;
  ArMapChangeDetails *arg5 = (ArMapChangeDetails *) 0 ;
  
  arg1 = (ArMap *)jarg1; 
  arg2 = jarg2 ? true : false; 
  arg3 = (ArPose *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "ArPose const & type is null", 0);
    return ;
  } 
  arg4 = (double)jarg4; 
  arg5 = (ArMapChangeDetails *)jarg5; 
  (arg1)->setOriginLatLongAlt(arg2,(ArPose const &)*arg3,arg4,arg5);
}


SWIGEXPORT void SWIGSTDCALL CSharp_ArMap_setOriginLatLongAlt__SWIG_1(void * jarg1, unsigned int jarg2, void * jarg3, double jarg4) {
  ArMap *arg1 = (ArMap *) 0 ;
  bool arg2 ;
  ArPose *arg3 = 0 ;
  double arg4 ;
  
  arg1 = (ArMap *)jarg1; 
  arg2 = jarg2 ? true : false; 
  arg3 = (ArPose *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "ArPose const & type is null", 0);
    return ;
  } 
  arg4 = (double)jarg4; 
  (arg1)->setOriginLatLongAlt(arg2,(ArPose const &)*arg3,arg4);
}


SWIGEXPORT void SWIGSTDCALL CSharp_ArMap_setOriginLatLonAlt__SWIG_0(void * jarg1, unsigned int jarg2, void * jarg3, double jarg4, void * jarg5) {
  ArMap *arg1 = (ArMap *) 0 ;
  bool arg2 ;
  ArPose *arg3 = 0 ;
  double arg4 ;
  ArMapChangeDetails *arg5 = (ArMapChangeDetails *) 0 ;
  
  arg1 = (ArMap *)jarg1; 
  arg2 = jarg2 ? true : false; 
  arg3 = (ArPose *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "ArPose const & type is null", 0);
    return ;
  } 
  arg4 = (double)jarg4; 
  arg5 = (ArMapChangeDetails *)jarg5; 
  (arg1)->setOriginLatLonAlt(arg2,(ArPose const &)*arg3,arg4,arg5);
}


SWIGEXPORT void SWIGSTDCALL CSharp_ArMap_setOriginLatLonAlt__SWIG_1(void * jarg1, unsigned int jarg2, void * jarg3, double jarg4) {
  ArMap *arg1 = (ArMap *) 0 ;
  bool arg2 ;
  ArPose *arg3 = 0 ;
  double arg4 ;
  
  arg1 = (ArMap *)jarg1; 
  arg2 = jarg2 ? true : false; 
  arg3 = (ArPose *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "ArPose const & type is null", 0);
    return ;
  } 
  arg4 = (double)jarg4; 
  (arg1)->setOriginLatLonAlt(arg2,(ArPose const &)*arg3,arg4);
}


SWIGEXPORT void SWIGSTDCALL CSharp_ArMap_writeSupplementToFunctor(void * jarg1, void * jarg2, char * jarg3) {
  ArMap *arg1 = (ArMap *) 0 ;
  ArFunctor1< char const * > *arg2 = (ArFunctor1< char const * > *) 0 ;
  char *arg3 = (char *) 0 ;
  
  arg1 = (ArMap *)jarg1; 
  arg2 = (ArFunctor1< char const * > *)jarg2; 
  arg3 = (char *)jarg3; 
  (arg1)->writeSupplementToFunctor(arg2,(char const *)arg3);
}


SWIGEXPORT void SWIGSTDCALL CSharp_ArMap_clear(void * jarg1) {
  ArMap *arg1 = (ArMap *) 0 ;
  
  arg1 = (ArMap *)jarg1; 
  (arg1)->clear();
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_ArMap_set(void * jarg1, void * jarg2) {
  unsigned int jresult ;
  ArMap *arg1 = (ArMap *) 0 ;
  ArMapInterface *arg2 = (ArMapInterface *) 0 ;
  bool result;
  
  arg1 = (ArMap *)jarg1; 
  arg2 = (ArMapInterface *)jarg2; 
  result = (bool)(arg1)->set(arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_ArMap_clone(void * jarg1) {
  void * jresult ;
  ArMap *arg1 = (ArMap *) 0 ;
  ArMapInterface *result = 0 ;
  
  arg1 = (ArMap *)jarg1; 
  result = (ArMapInterface *)(arg1)->clone();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_ArMap_mapChanged__SWIG_0(void * jarg1) {
  ArMap *arg1 = (ArMap *) 0 ;
  
  arg1 = (ArMap *)jarg1; 
  (arg1)->mapChanged();
}


SWIGEXPORT void SWIGSTDCALL CSharp_ArMap_mapChanged__SWIG_1(void * jarg1, unsigned int jarg2, unsigned int jarg3) {
  ArMap *arg1 = (ArMap *) 0 ;
  bool arg2 ;
  bool arg3 ;
  
  arg1 = (ArMap *)jarg1; 
  arg2 = jarg2 ? true : false; 
  arg3 = jarg3 ? true : false; 
  (arg1)->mapChanged(arg2,arg3);
}


SWIGEXPORT void SWIGSTDCALL CSharp_ArMap_addMapChangedCB__SWIG_0(void * jarg1, void * jarg2, int jarg3) {
  ArMap *arg1 = (ArMap *) 0 ;
  ArFunctor *arg2 = (ArFunctor *) 0 ;
  int arg3 ;
  
  arg1 = (ArMap *)jarg1; 
  arg2 = (ArFunctor *)jarg2; 
  arg3 = (int)jarg3; 
  (arg1)->addMapChangedCB(arg2,arg3);
}


SWIGEXPORT void SWIGSTDCALL CSharp_ArMap_addMapChangedCB__SWIG_1(void * jarg1, void * jarg2) {
  ArMap *arg1 = (ArMap *) 0 ;
  ArFunctor *arg2 = (ArFunctor *) 0 ;
  
  arg1 = (ArMap *)jarg1; 
  arg2 = (ArFunctor *)jarg2; 
  (arg1)->addMapChangedCB(arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_ArMap_remMapChangedCB(void * jarg1, void * jarg2) {
  ArMap *arg1 = (ArMap *) 0 ;
  ArFunctor *arg2 = (ArFunctor *) 0 ;
  
  arg1 = (ArMap *)jarg1; 
  arg2 = (ArFunctor *)jarg2; 
  (arg1)->remMapChangedCB(arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_ArMap_addMapChangedPathPlanningCB__SWIG_0(void * jarg1, void * jarg2, int jarg3) {
  ArMap *arg1 = (ArMap *) 0 ;
  ArFunctor *arg2 = (ArFunctor *) 0 ;
  int arg3 ;
  
  arg1 = (ArMap *)jarg1; 
  arg2 = (ArFunctor *)jarg2; 
  arg3 = (int)jarg3; 
  (arg1)->addMapChangedPathPlanningCB(arg2,arg3);
}


SWIGEXPORT void SWIGSTDCALL CSharp_ArMap_addMapChangedPathPlanningCB__SWIG_1(void * jarg1, void * jarg2) {
  ArMap *arg1 = (ArMap *) 0 ;
  ArFunctor *arg2 = (ArFunctor *) 0 ;
  
  arg1 = (ArMap *)jarg1; 
  arg2 = (ArFunctor *)jarg2; 
  (arg1)->addMapChangedPathPlanningCB(arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_ArMap_remMapChangedPathPlanningCB(void * jarg1, void * jarg2) {
  ArMap *arg1 = (ArMap *) 0 ;
  ArFunctor *arg2 = (ArFunctor *) 0 ;
  
  arg1 = (ArMap *)jarg1; 
  arg2 = (ArFunctor *)jarg2; 
  (arg1)->remMapChangedPathPlanningCB(arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_ArMap_addMapChangedLocalizationCB__SWIG_0(void * jarg1, void * jarg2, int jarg3) {
  ArMap *arg1 = (ArMap *) 0 ;
  ArFunctor *arg2 = (ArFunctor *) 0 ;
  int arg3 ;
  
  arg1 = (ArMap *)jarg1; 
  arg2 = (ArFunctor *)jarg2; 
  arg3 = (int)jarg3; 
  (arg1)->addMapChangedLocalizationCB(arg2,arg3);
}


SWIGEXPORT void SWIGSTDCALL CSharp_ArMap_addMapChangedLocalizationCB__SWIG_1(void * jarg1, void * jarg2) {
  ArMap *arg1 = (ArMap *) 0 ;
  ArFunctor *arg2 = (ArFunctor *) 0 ;
  
  arg1 = (ArMap *)jarg1; 
  arg2 = (ArFunctor *)jarg2; 
  (arg1)->addMapChangedLocalizationCB(arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_ArMap_remMapChangedLocalizationCB(void * jarg1, void * jarg2) {
  ArMap *arg1 = (ArMap *) 0 ;
  ArFunctor *arg2 = (ArFunctor *) 0 ;
  
  arg1 = (ArMap *)jarg1; 
  arg2 = (ArFunctor *)jarg2; 
  (arg1)->remMapChangedLocalizationCB(arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_ArMap_addPreMapChangedCB__SWIG_0(void * jarg1, void * jarg2, int jarg3) {
  ArMap *arg1 = (ArMap *) 0 ;
  ArFunctor *arg2 = (ArFunctor *) 0 ;
  int arg3 ;
  
  arg1 = (ArMap *)jarg1; 
  arg2 = (ArFunctor *)jarg2; 
  arg3 = (int)jarg3; 
  (arg1)->addPreMapChangedCB(arg2,arg3);
}


SWIGEXPORT void SWIGSTDCALL CSharp_ArMap_addPreMapChangedCB__SWIG_1(void * jarg1, void * jarg2) {
  ArMap *arg1 = (ArMap *) 0 ;
  ArFunctor *arg2 = (ArFunctor *) 0 ;
  
  arg1 = (ArMap *)jarg1; 
  arg2 = (ArFunctor *)jarg2; 
  (arg1)->addPreMapChangedCB(arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_ArMap_remPreMapChangedCB(void * jarg1, void * jarg2) {
  ArMap *arg1 = (ArMap *) 0 ;
  ArFunctor *arg2 = (ArFunctor *) 0 ;
  
  arg1 = (ArMap *)jarg1; 
  arg2 = (ArFunctor *)jarg2; 
  (arg1)->remPreMapChangedCB(arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_ArMap_setMapChangedLogLevel(void * jarg1, int jarg2) {
  ArMap *arg1 = (ArMap *) 0 ;
  ArLog::LogLevel arg2 ;
  
  arg1 = (ArMap *)jarg1; 
  arg2 = (ArLog::LogLevel)jarg2; 
  (arg1)->setMapChangedLogLevel(arg2);
}


SWIGEXPORT int SWIGSTDCALL CSharp_ArMap_getMapChangedLogLevel(void * jarg1) {
  int jresult ;
  ArMap *arg1 = (ArMap *) 0 ;
  ArLog::LogLevel result;
  
  arg1 = (ArMap *)jarg1; 
  result = (ArLog::LogLevel)(arg1)->getMapChangedLogLevel();
  jresult = (int)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_ArMap_writeToFunctor(void * jarg1, void * jarg2, char * jarg3) {
  ArMap *arg1 = (ArMap *) 0 ;
  ArFunctor1< char const * > *arg2 = (ArFunctor1< char const * > *) 0 ;
  char *arg3 = (char *) 0 ;
  
  arg1 = (ArMap *)jarg1; 
  arg2 = (ArFunctor1< char const * > *)jarg2; 
  arg3 = (char *)jarg3; 
  (arg1)->writeToFunctor(arg2,(char const *)arg3);
}


SWIGEXPORT void SWIGSTDCALL CSharp_ArMap_writeObjectsToFunctor__SWIG_0(void * jarg1, void * jarg2, char * jarg3, unsigned int jarg4, char * jarg5) {
  ArMap *arg1 = (ArMap *) 0 ;
  ArFunctor1< char const * > *arg2 = (ArFunctor1< char const * > *) 0 ;
  char *arg3 = (char *) 0 ;
  bool arg4 ;
  char *arg5 = (char *) 0 ;
  
  arg1 = (ArMap *)jarg1; 
  arg2 = (ArFunctor1< char const * > *)jarg2; 
  arg3 = (char *)jarg3; 
  arg4 = jarg4 ? true : false; 
  arg5 = (char *)jarg5; 
  (arg1)->writeObjectsToFunctor(arg2,(char const *)arg3,arg4,(char const *)arg5);
}


SWIGEXPORT void SWIGSTDCALL CSharp_ArMap_writeObjectsToFunctor__SWIG_1(void * jarg1, void * jarg2, char * jarg3, unsigned int jarg4) {
  ArMap *arg1 = (ArMap *) 0 ;
  ArFunctor1< char const * > *arg2 = (ArFunctor1< char const * > *) 0 ;
  char *arg3 = (char *) 0 ;
  bool arg4 ;
  
  arg1 = (ArMap *)jarg1; 
  arg2 = (ArFunctor1< char const * > *)jarg2; 
  arg3 = (char *)jarg3; 
  arg4 = jarg4 ? true : false; 
  (arg1)->writeObjectsToFunctor(arg2,(char const *)arg3,arg4);
}


SWIGEXPORT void SWIGSTDCALL CSharp_ArMap_writeObjectsToFunctor__SWIG_2(void * jarg1, void * jarg2, char * jarg3) {
  ArMap *arg1 = (ArMap *) 0 ;
  ArFunctor1< char const * > *arg2 = (ArFunctor1< char const * > *) 0 ;
  char *arg3 = (char *) 0 ;
  
  arg1 = (ArMap *)jarg1; 
  arg2 = (ArFunctor1< char const * > *)jarg2; 
  arg3 = (char *)jarg3; 
  (arg1)->writeObjectsToFunctor(arg2,(char const *)arg3);
}


SWIGEXPORT void SWIGSTDCALL CSharp_ArMap_addPreWriteFileCB__SWIG_0(void * jarg1, void * jarg2, int jarg3) {
  ArMap *arg1 = (ArMap *) 0 ;
  ArFunctor *arg2 = (ArFunctor *) 0 ;
  ArListPos::Pos arg3 ;
  
  arg1 = (ArMap *)jarg1; 
  arg2 = (ArFunctor *)jarg2; 
  arg3 = (ArListPos::Pos)jarg3; 
  (arg1)->addPreWriteFileCB(arg2,arg3);
}


SWIGEXPORT void SWIGSTDCALL CSharp_ArMap_addPreWriteFileCB__SWIG_1(void * jarg1, void * jarg2) {
  ArMap *arg1 = (ArMap *) 0 ;
  ArFunctor *arg2 = (ArFunctor *) 0 ;
  
  arg1 = (ArMap *)jarg1; 
  arg2 = (ArFunctor *)jarg2; 
  (arg1)->addPreWriteFileCB(arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_ArMap_remPreWriteFileCB(void * jarg1, void * jarg2) {
  ArMap *arg1 = (ArMap *) 0 ;
  ArFunctor *arg2 = (ArFunctor *) 0 ;
  
  arg1 = (ArMap *)jarg1; 
  arg2 = (ArFunctor *)jarg2; 
  (arg1)->remPreWriteFileCB(arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_ArMap_addPostWriteFileCB__SWIG_0(void * jarg1, void * jarg2, int jarg3) {
  ArMap *arg1 = (ArMap *) 0 ;
  ArFunctor *arg2 = (ArFunctor *) 0 ;
  ArListPos::Pos arg3 ;
  
  arg1 = (ArMap *)jarg1; 
  arg2 = (ArFunctor *)jarg2; 
  arg3 = (ArListPos::Pos)jarg3; 
  (arg1)->addPostWriteFileCB(arg2,arg3);
}


SWIGEXPORT void SWIGSTDCALL CSharp_ArMap_addPostWriteFileCB__SWIG_1(void * jarg1, void * jarg2) {
  ArMap *arg1 = (ArMap *) 0 ;
  ArFunctor *arg2 = (ArFunctor *) 0 ;
  
  arg1 = (ArMap *)jarg1; 
  arg2 = (ArFunctor *)jarg2; 
  (arg1)->addPostWriteFileCB(arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_ArMap_remPostWriteFileCB(void * jarg1, void * jarg2) {
  ArMap *arg1 = (ArMap *) 0 ;
  ArFunctor *arg2 = (ArFunctor *) 0 ;
  
  arg1 = (ArMap *)jarg1; 
  arg2 = (ArFunctor *)jarg2; 
  (arg1)->remPostWriteFileCB(arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_ArMap_addPreParseFileCB(void * jarg1, void * jarg2) {
  ArMap *arg1 = (ArMap *) 0 ;
  ArFunctor1< std::string > *arg2 = (ArFunctor1< std::string > *) 0 ;
  
  arg1 = (ArMap *)jarg1; 
  arg2 = (ArFunctor1< std::string > *)jarg2; 
  (arg1)->addPreParseFileCB(arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_ArMap_remPreParseFileCB(void * jarg1, void * jarg2) {
  ArMap *arg1 = (ArMap *) 0 ;
  ArFunctor1< std::string > *arg2 = (ArFunctor1< std::string > *) 0 ;
  
  arg1 = (ArMap *)jarg1; 
  arg2 = (ArFunctor1< std::string > *)jarg2; 
  (arg1)->remPreParseFileCB(arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_ArMap_forceMapLoadOnConfigProcessFile(void * jarg1) {
  ArMap *arg1 = (ArMap *) 0 ;
  
  arg1 = (ArMap *)jarg1; 
  (arg1)->forceMapLoadOnConfigProcessFile();
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_ArMap_readFile(void * jarg1, char * jarg2) {
  unsigned int jresult ;
  ArMap *arg1 = (ArMap *) 0 ;
  char *arg2 = (char *) 0 ;
  bool result;
  
  arg1 = (ArMap *)jarg1; 
  arg2 = (char *)jarg2; 
  result = (bool)(arg1)->readFile((char const *)arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_ArMap_writeFile(void * jarg1, char * jarg2) {
  unsigned int jresult ;
  ArMap *arg1 = (ArMap *) 0 ;
  char *arg2 = (char *) 0 ;
  bool result;
  
  arg1 = (ArMap *)jarg1; 
  arg2 = (char *)jarg2; 
  result = (bool)(arg1)->writeFile((char const *)arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_ArMap_getMapId__SWIG_0(void * jarg1, void * jarg2, unsigned int jarg3) {
  unsigned int jresult ;
  ArMap *arg1 = (ArMap *) 0 ;
  ArMapId *arg2 = (ArMapId *) 0 ;
  bool arg3 ;
  bool result;
  
  arg1 = (ArMap *)jarg1; 
  arg2 = (ArMapId *)jarg2; 
  arg3 = jarg3 ? true : false; 
  result = (bool)(arg1)->getMapId(arg2,arg3);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_ArMap_getMapId__SWIG_1(void * jarg1, void * jarg2) {
  unsigned int jresult ;
  ArMap *arg1 = (ArMap *) 0 ;
  ArMapId *arg2 = (ArMapId *) 0 ;
  bool result;
  
  arg1 = (ArMap *)jarg1; 
  arg2 = (ArMapId *)jarg2; 
  result = (bool)(arg1)->getMapId(arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_ArMap_calculateChecksum(void * jarg1, void * jarg2, unsigned long jarg3) {
  unsigned int jresult ;
  ArMap *arg1 = (ArMap *) 0 ;
  unsigned char *arg2 = (unsigned char *) 0 ;
  size_t arg3 ;
  bool result;
  
  arg1 = (ArMap *)jarg1; 
  arg2 = (unsigned char *)jarg2; 
  arg3 = (size_t)jarg3; 
  result = (bool)(arg1)->calculateChecksum(arg2,arg3);
  jresult = result; 
  return jresult;
}


SWIGEXPORT char * SWIGSTDCALL CSharp_ArMap_getBaseDirectory(void * jarg1) {
  char * jresult ;
  ArMap *arg1 = (ArMap *) 0 ;
  char *result = 0 ;
  
  arg1 = (ArMap *)jarg1; 
  result = (char *)((ArMap const *)arg1)->getBaseDirectory();
  jresult = SWIG_csharp_string_callback((const char *)result); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_ArMap_setBaseDirectory(void * jarg1, char * jarg2) {
  ArMap *arg1 = (ArMap *) 0 ;
  char *arg2 = (char *) 0 ;
  
  arg1 = (ArMap *)jarg1; 
  arg2 = (char *)jarg2; 
  (arg1)->setBaseDirectory((char const *)arg2);
}


SWIGEXPORT char * SWIGSTDCALL CSharp_ArMap_getTempDirectory(void * jarg1) {
  char * jresult ;
  ArMap *arg1 = (ArMap *) 0 ;
  char *result = 0 ;
  
  arg1 = (ArMap *)jarg1; 
  result = (char *)((ArMap const *)arg1)->getTempDirectory();
  jresult = SWIG_csharp_string_callback((const char *)result); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_ArMap_setTempDirectory(void * jarg1, char * jarg2) {
  ArMap *arg1 = (ArMap *) 0 ;
  char *arg2 = (char *) 0 ;
  
  arg1 = (ArMap *)jarg1; 
  arg2 = (char *)jarg2; 
  (arg1)->setTempDirectory((char const *)arg2);
}


SWIGEXPORT char * SWIGSTDCALL CSharp_ArMap_createRealFileName(void * jarg1, char * jarg2) {
  char * jresult ;
  ArMap *arg1 = (ArMap *) 0 ;
  char *arg2 = (char *) 0 ;
  std::string result;
  
  arg1 = (ArMap *)jarg1; 
  arg2 = (char *)jarg2; 
  result = (arg1)->createRealFileName((char const *)arg2);
  jresult = SWIG_csharp_string_callback((&result)->c_str()); 
  return jresult;
}


SWIGEXPORT char * SWIGSTDCALL CSharp_ArMap_getFileName(void * jarg1) {
  char * jresult ;
  ArMap *arg1 = (ArMap *) 0 ;
  char *result = 0 ;
  
  arg1 = (ArMap *)jarg1; 
  result = (char *)((ArMap const *)arg1)->getFileName();
  jresult = SWIG_csharp_string_callback((const char *)result); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_ArMap_setSourceFileName__SWIG_0(void * jarg1, char * jarg2, char * jarg3, unsigned int jarg4) {
  ArMap *arg1 = (ArMap *) 0 ;
  char *arg2 = (char *) 0 ;
  char *arg3 = (char *) 0 ;
  bool arg4 ;
  
  arg1 = (ArMap *)jarg1; 
  arg2 = (char *)jarg2; 
  arg3 = (char *)jarg3; 
  arg4 = jarg4 ? true : false; 
  (arg1)->setSourceFileName((char const *)arg2,(char const *)arg3,arg4);
}


SWIGEXPORT void SWIGSTDCALL CSharp_ArMap_setSourceFileName__SWIG_1(void * jarg1, char * jarg2, char * jarg3) {
  ArMap *arg1 = (ArMap *) 0 ;
  char *arg2 = (char *) 0 ;
  char *arg3 = (char *) 0 ;
  
  arg1 = (ArMap *)jarg1; 
  arg2 = (char *)jarg2; 
  arg3 = (char *)jarg3; 
  (arg1)->setSourceFileName((char const *)arg2,(char const *)arg3);
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_ArMap_refresh(void * jarg1) {
  unsigned int jresult ;
  ArMap *arg1 = (ArMap *) 0 ;
  bool result;
  
  arg1 = (ArMap *)jarg1; 
  result = (bool)(arg1)->refresh();
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_ArMap_setIgnoreEmptyFileName(void * jarg1, unsigned int jarg2) {
  ArMap *arg1 = (ArMap *) 0 ;
  bool arg2 ;
  
  arg1 = (ArMap *)jarg1; 
  arg2 = jarg2 ? true : false; 
  (arg1)->setIgnoreEmptyFileName(arg2);
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_ArMap_getIgnoreEmptyFileName(void * jarg1) {
  unsigned int jresult ;
  ArMap *arg1 = (ArMap *) 0 ;
  bool result;
  
  arg1 = (ArMap *)jarg1; 
  result = (bool)(arg1)->getIgnoreEmptyFileName();
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_ArMap_setIgnoreCase__SWIG_0(void * jarg1, unsigned int jarg2) {
  ArMap *arg1 = (ArMap *) 0 ;
  bool arg2 ;
  
  arg1 = (ArMap *)jarg1; 
  arg2 = jarg2 ? true : false; 
  (arg1)->setIgnoreCase(arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_ArMap_setIgnoreCase__SWIG_1(void * jarg1) {
  ArMap *arg1 = (ArMap *) 0 ;
  
  arg1 = (ArMap *)jarg1; 
  (arg1)->setIgnoreCase();
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_ArMap_getIgnoreCase(void * jarg1) {
  unsigned int jresult ;
  ArMap *arg1 = (ArMap *) 0 ;
  bool result;
  
  arg1 = (ArMap *)jarg1; 
  result = (bool)(arg1)->getIgnoreCase();
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_ArMap_getInactiveInfo(void * jarg1) {
  void * jresult ;
  ArMap *arg1 = (ArMap *) 0 ;
  ArMapInfoInterface *result = 0 ;
  
  arg1 = (ArMap *)jarg1; 
  result = (ArMapInfoInterface *)(arg1)->getInactiveInfo();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_ArMap_getInactiveObjects(void * jarg1) {
  void * jresult ;
  ArMap *arg1 = (ArMap *) 0 ;
  ArMapObjectsInterface *result = 0 ;
  
  arg1 = (ArMap *)jarg1; 
  result = (ArMapObjectsInterface *)(arg1)->getInactiveObjects();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_ArMap_getChildObjects(void * jarg1) {
  void * jresult ;
  ArMap *arg1 = (ArMap *) 0 ;
  ArMapObjectsInterface *result = 0 ;
  
  arg1 = (ArMap *)jarg1; 
  result = (ArMapObjectsInterface *)(arg1)->getChildObjects();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_ArMap_findMapObjectParams(void * jarg1, char * jarg2) {
  void * jresult ;
  ArMap *arg1 = (ArMap *) 0 ;
  char *arg2 = (char *) 0 ;
  ArArgumentBuilder *result = 0 ;
  
  arg1 = (ArMap *)jarg1; 
  arg2 = (char *)jarg2; 
  result = (ArArgumentBuilder *)(arg1)->findMapObjectParams((char const *)arg2);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_ArMap_setMapObjectParams__SWIG_0(void * jarg1, char * jarg2, void * jarg3, void * jarg4) {
  unsigned int jresult ;
  ArMap *arg1 = (ArMap *) 0 ;
  char *arg2 = (char *) 0 ;
  ArArgumentBuilder *arg3 = (ArArgumentBuilder *) 0 ;
  ArMapChangeDetails *arg4 = (ArMapChangeDetails *) 0 ;
  bool result;
  
  arg1 = (ArMap *)jarg1; 
  arg2 = (char *)jarg2; 
  arg3 = (ArArgumentBuilder *)jarg3; 
  arg4 = (ArMapChangeDetails *)jarg4; 
  result = (bool)(arg1)->setMapObjectParams((char const *)arg2,arg3,arg4);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_ArMap_setMapObjectParams__SWIG_1(void * jarg1, char * jarg2, void * jarg3) {
  unsigned int jresult ;
  ArMap *arg1 = (ArMap *) 0 ;
  char *arg2 = (char *) 0 ;
  ArArgumentBuilder *arg3 = (ArArgumentBuilder *) 0 ;
  bool result;
  
  arg1 = (ArMap *)jarg1; 
  arg2 = (char *)jarg2; 
  arg3 = (ArArgumentBuilder *)jarg3; 
  result = (bool)(arg1)->setMapObjectParams((char const *)arg2,arg3);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_ArMap_getRemainder(void * jarg1) {
  void * jresult ;
  ArMap *arg1 = (ArMap *) 0 ;
  std::list< ArArgumentBuilder * > *result = 0 ;
  
  arg1 = (ArMap *)jarg1; 
  result = (std::list< ArArgumentBuilder * > *)(arg1)->getRemainder();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_ArMap_setQuiet(void * jarg1, unsigned int jarg2) {
  ArMap *arg1 = (ArMap *) 0 ;
  bool arg2 ;
  
  arg1 = (ArMap *)jarg1; 
  arg2 = jarg2 ? true : false; 
  (arg1)->setQuiet(arg2);
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_ArMap_parseLine(void * jarg1, char * jarg2) {
  unsigned int jresult ;
  ArMap *arg1 = (ArMap *) 0 ;
  char *arg2 = (char *) 0 ;
  bool result;
  
  arg1 = (ArMap *)jarg1; 
  arg2 = (char *)jarg2; 
  result = (bool)(arg1)->parseLine(arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_ArMap_parsingComplete(void * jarg1) {
  ArMap *arg1 = (ArMap *) 0 ;
  
  arg1 = (ArMap *)jarg1; 
  (arg1)->parsingComplete();
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_ArMap_isLoadingDataStarted(void * jarg1) {
  unsigned int jresult ;
  ArMap *arg1 = (ArMap *) 0 ;
  bool result;
  
  arg1 = (ArMap *)jarg1; 
  result = (bool)(arg1)->isLoadingDataStarted();
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_ArMap_isLoadingLinesAndDataStarted(void * jarg1) {
  unsigned int jresult ;
  ArMap *arg1 = (ArMap *) 0 ;
  bool result;
  
  arg1 = (ArMap *)jarg1; 
  result = (bool)(arg1)->isLoadingLinesAndDataStarted();
  jresult = result; 
  return jresult;
}


SWIGEXPORT char * SWIGSTDCALL CSharp_ArMap_getMapCategory(void * jarg1) {
  char * jresult ;
  ArMap *arg1 = (ArMap *) 0 ;
  char *result = 0 ;
  
  arg1 = (ArMap *)jarg1; 
  result = (char *)(arg1)->getMapCategory();
  jresult = SWIG_csharp_string_callback((const char *)result); 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_ArMap_readFileAndChangeConfig(void * jarg1, char * jarg2) {
  unsigned int jresult ;
  ArMap *arg1 = (ArMap *) 0 ;
  char *arg2 = (char *) 0 ;
  bool result;
  
  arg1 = (ArMap *)jarg1; 
  arg2 = (char *)jarg2; 
  result = (bool)(arg1)->readFileAndChangeConfig((char const *)arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_ArMap_changeConfigMapName(void * jarg1, char * jarg2) {
  ArMap *arg1 = (ArMap *) 0 ;
  char *arg2 = (char *) 0 ;
  
  arg1 = (ArMap *)jarg1; 
  arg2 = (char *)jarg2; 
  (arg1)->changeConfigMapName((char const *)arg2);
}


SWIGEXPORT void * SWIGSTDCALL CSharp_ArMapObject_createMapObject(void * jarg1) {
  void * jresult ;
  ArArgumentBuilder *arg1 = (ArArgumentBuilder *) 0 ;
  ArMapObject *result = 0 ;
  
  arg1 = (ArArgumentBuilder *)jarg1; 
  result = (ArMapObject *)ArMapObject::createMapObject(arg1);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_ArMapObject_ARG_INDEX_COUNT_get() {
  int jresult ;
  int result;
  
  result = (int)ArMapObject::ARG_INDEX_COUNT;
  jresult = (int)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_ArMapObject__SWIG_0(char * jarg1, void * jarg2, char * jarg3, char * jarg4, char * jarg5, unsigned int jarg6, void * jarg7, void * jarg8) {
  void * jresult ;
  char *arg1 = (char *) 0 ;
  ArPose arg2 ;
  char *arg3 = (char *) 0 ;
  char *arg4 = (char *) 0 ;
  char *arg5 = (char *) 0 ;
  bool arg6 ;
  ArPose arg7 ;
  ArPose arg8 ;
  ArPose *argp2 ;
  ArPose *argp7 ;
  ArPose *argp8 ;
  ArMapObject *result = 0 ;
  
  arg1 = (char *)jarg1; 
  argp2 = (ArPose *)jarg2; 
  if (!argp2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Attempt to dereference null ArPose", 0);
    return 0;
  }
  arg2 = *argp2; 
  arg3 = (char *)jarg3; 
  arg4 = (char *)jarg4; 
  arg5 = (char *)jarg5; 
  arg6 = jarg6 ? true : false; 
  argp7 = (ArPose *)jarg7; 
  if (!argp7) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Attempt to dereference null ArPose", 0);
    return 0;
  }
  arg7 = *argp7; 
  argp8 = (ArPose *)jarg8; 
  if (!argp8) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Attempt to dereference null ArPose", 0);
    return 0;
  }
  arg8 = *argp8; 
  result = (ArMapObject *)new ArMapObject((char const *)arg1,arg2,(char const *)arg3,(char const *)arg4,(char const *)arg5,arg6,arg7,arg8);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_ArMapObject__SWIG_1(void * jarg1) {
  void * jresult ;
  ArMapObject *arg1 = 0 ;
  ArMapObject *result = 0 ;
  
  arg1 = (ArMapObject *)jarg1;
  if (!arg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "ArMapObject const & type is null", 0);
    return 0;
  } 
  result = (ArMapObject *)new ArMapObject((ArMapObject const &)*arg1);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_ArMapObject(void * jarg1) {
  ArMapObject *arg1 = (ArMapObject *) 0 ;
  
  arg1 = (ArMapObject *)jarg1; 
  delete arg1;
}


SWIGEXPORT char * SWIGSTDCALL CSharp_ArMapObject_getType(void * jarg1) {
  char * jresult ;
  ArMapObject *arg1 = (ArMapObject *) 0 ;
  char *result = 0 ;
  
  arg1 = (ArMapObject *)jarg1; 
  result = (char *)((ArMapObject const *)arg1)->getType();
  jresult = SWIG_csharp_string_callback((const char *)result); 
  return jresult;
}


SWIGEXPORT char * SWIGSTDCALL CSharp_ArMapObject_getBaseType(void * jarg1) {
  char * jresult ;
  ArMapObject *arg1 = (ArMapObject *) 0 ;
  char *result = 0 ;
  
  arg1 = (ArMapObject *)jarg1; 
  result = (char *)((ArMapObject const *)arg1)->getBaseType();
  jresult = SWIG_csharp_string_callback((const char *)result); 
  return jresult;
}


SWIGEXPORT char * SWIGSTDCALL CSharp_ArMapObject_getName(void * jarg1) {
  char * jresult ;
  ArMapObject *arg1 = (ArMapObject *) 0 ;
  char *result = 0 ;
  
  arg1 = (ArMapObject *)jarg1; 
  result = (char *)((ArMapObject const *)arg1)->getName();
  jresult = SWIG_csharp_string_callback((const char *)result); 
  return jresult;
}


SWIGEXPORT char * SWIGSTDCALL CSharp_ArMapObject_getDescription(void * jarg1) {
  char * jresult ;
  ArMapObject *arg1 = (ArMapObject *) 0 ;
  char *result = 0 ;
  
  arg1 = (ArMapObject *)jarg1; 
  result = (char *)((ArMapObject const *)arg1)->getDescription();
  jresult = SWIG_csharp_string_callback((const char *)result); 
  return jresult;
}


SWIGEXPORT char * SWIGSTDCALL CSharp_ArMapObject_getIconName(void * jarg1) {
  char * jresult ;
  ArMapObject *arg1 = (ArMapObject *) 0 ;
  char *result = 0 ;
  
  arg1 = (ArMapObject *)jarg1; 
  result = (char *)((ArMapObject const *)arg1)->getIconName();
  jresult = SWIG_csharp_string_callback((const char *)result); 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_ArMapObject_getId(void * jarg1) {
  int jresult ;
  ArMapObject *arg1 = (ArMapObject *) 0 ;
  int result;
  
  arg1 = (ArMapObject *)jarg1; 
  result = (int)((ArMapObject const *)arg1)->getId();
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_ArMapObject_setDescription(void * jarg1, char * jarg2) {
  ArMapObject *arg1 = (ArMapObject *) 0 ;
  char *arg2 = (char *) 0 ;
  
  arg1 = (ArMapObject *)jarg1; 
  arg2 = (char *)jarg2; 
  (arg1)->setDescription((char const *)arg2);
}


SWIGEXPORT void * SWIGSTDCALL CSharp_ArMapObject_getPose(void * jarg1) {
  void * jresult ;
  ArMapObject *arg1 = (ArMapObject *) 0 ;
  ArPose result;
  
  arg1 = (ArMapObject *)jarg1; 
  result = ((ArMapObject const *)arg1)->getPose();
  jresult = new ArPose((const ArPose &)result); 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_ArMapObject_hasFromTo(void * jarg1) {
  unsigned int jresult ;
  ArMapObject *arg1 = (ArMapObject *) 0 ;
  bool result;
  
  arg1 = (ArMapObject *)jarg1; 
  result = (bool)((ArMapObject const *)arg1)->hasFromTo();
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_ArMapObject_getFromPose(void * jarg1) {
  void * jresult ;
  ArMapObject *arg1 = (ArMapObject *) 0 ;
  ArPose result;
  
  arg1 = (ArMapObject *)jarg1; 
  result = ((ArMapObject const *)arg1)->getFromPose();
  jresult = new ArPose((const ArPose &)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_ArMapObject_getToPose(void * jarg1) {
  void * jresult ;
  ArMapObject *arg1 = (ArMapObject *) 0 ;
  ArPose result;
  
  arg1 = (ArMapObject *)jarg1; 
  result = ((ArMapObject const *)arg1)->getToPose();
  jresult = new ArPose((const ArPose &)result); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_ArMapObject_setPose(void * jarg1, void * jarg2) {
  ArMapObject *arg1 = (ArMapObject *) 0 ;
  ArPose arg2 ;
  ArPose *argp2 ;
  
  arg1 = (ArMapObject *)jarg1; 
  argp2 = (ArPose *)jarg2; 
  if (!argp2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Attempt to dereference null ArPose", 0);
    return ;
  }
  arg2 = *argp2; 
  (arg1)->setPose(arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_ArMapObject_setFromTo(void * jarg1, void * jarg2, void * jarg3) {
  ArMapObject *arg1 = (ArMapObject *) 0 ;
  ArPose arg2 ;
  ArPose arg3 ;
  ArPose *argp2 ;
  ArPose *argp3 ;
  
  arg1 = (ArMapObject *)jarg1; 
  argp2 = (ArPose *)jarg2; 
  if (!argp2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Attempt to dereference null ArPose", 0);
    return ;
  }
  arg2 = *argp2; 
  argp3 = (ArPose *)jarg3; 
  if (!argp3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Attempt to dereference null ArPose", 0);
    return ;
  }
  arg3 = *argp3; 
  (arg1)->setFromTo(arg2,arg3);
}


SWIGEXPORT double SWIGSTDCALL CSharp_ArMapObject_getFromToRotation(void * jarg1) {
  double jresult ;
  ArMapObject *arg1 = (ArMapObject *) 0 ;
  double result;
  
  arg1 = (ArMapObject *)jarg1; 
  result = (double)((ArMapObject const *)arg1)->getFromToRotation();
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_ArMapObject_getFromToSegments(void * jarg1) {
  void * jresult ;
  ArMapObject *arg1 = (ArMapObject *) 0 ;
  SwigValueWrapper< std::list< ArLineSegment > > result;
  
  arg1 = (ArMapObject *)jarg1; 
  result = (arg1)->getFromToSegments();
  jresult = new std::list< ArLineSegment >((const std::list< ArLineSegment > &)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_ArMapObject_getFromToSegment(void * jarg1) {
  void * jresult ;
  ArMapObject *arg1 = (ArMapObject *) 0 ;
  SwigValueWrapper< ArLineSegment > result;
  
  arg1 = (ArMapObject *)jarg1; 
  result = (arg1)->getFromToSegment();
  jresult = new ArLineSegment((const ArLineSegment &)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_ArMapObject_findCenter(void * jarg1) {
  void * jresult ;
  ArMapObject *arg1 = (ArMapObject *) 0 ;
  ArPose result;
  
  arg1 = (ArMapObject *)jarg1; 
  result = ((ArMapObject const *)arg1)->findCenter();
  jresult = new ArPose((const ArPose &)result); 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_ArMapObject_isPointInside(void * jarg1, void * jarg2) {
  unsigned int jresult ;
  ArMapObject *arg1 = (ArMapObject *) 0 ;
  ArPose *arg2 = 0 ;
  bool result;
  
  arg1 = (ArMapObject *)jarg1; 
  arg2 = (ArPose *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "ArPose const & type is null", 0);
    return 0;
  } 
  result = (bool)((ArMapObject const *)arg1)->isPointInside((ArPose const &)*arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_ArMapObject_getRegionVertices(void * jarg1) {
  void * jresult ;
  ArMapObject *arg1 = (ArMapObject *) 0 ;
  std::vector< ArPose > result;
  
  arg1 = (ArMapObject *)jarg1; 
  result = ((ArMapObject const *)arg1)->getRegionVertices();
  jresult = new std::vector< ArPose >((const std::vector< ArPose > &)result); 
  return jresult;
}


SWIGEXPORT char * SWIGSTDCALL CSharp_ArMapObject_toString(void * jarg1) {
  char * jresult ;
  ArMapObject *arg1 = (ArMapObject *) 0 ;
  char *result = 0 ;
  
  arg1 = (ArMapObject *)jarg1; 
  result = (char *)((ArMapObject const *)arg1)->toString();
  jresult = SWIG_csharp_string_callback((const char *)result); 
  return jresult;
}


SWIGEXPORT char * SWIGSTDCALL CSharp_ArMapObject_getStringRepresentation(void * jarg1) {
  char * jresult ;
  ArMapObject *arg1 = (ArMapObject *) 0 ;
  char *result = 0 ;
  
  arg1 = (ArMapObject *)jarg1; 
  result = (char *)((ArMapObject const *)arg1)->getStringRepresentation();
  jresult = SWIG_csharp_string_callback((const char *)result); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_ArMapObject_log__SWIG_0(void * jarg1, char * jarg2) {
  ArMapObject *arg1 = (ArMapObject *) 0 ;
  char *arg2 = (char *) 0 ;
  
  arg1 = (ArMapObject *)jarg1; 
  arg2 = (char *)jarg2; 
  ((ArMapObject const *)arg1)->log((char const *)arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_ArMapObject_log__SWIG_1(void * jarg1) {
  ArMapObject *arg1 = (ArMapObject *) 0 ;
  
  arg1 = (ArMapObject *)jarg1; 
  ((ArMapObject const *)arg1)->log();
}


SWIGEXPORT char * SWIGSTDCALL CSharp_ArMapObject_getFileName(void * jarg1) {
  char * jresult ;
  ArMapObject *arg1 = (ArMapObject *) 0 ;
  char *result = 0 ;
  
  arg1 = (ArMapObject *)jarg1; 
  result = (char *)((ArMapObject const *)arg1)->getFileName();
  jresult = SWIG_csharp_string_callback((const char *)result); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_ArMode(void * jarg1) {
  ArMode *arg1 = (ArMode *) 0 ;
  
  arg1 = (ArMode *)jarg1; 
  delete arg1;
}


SWIGEXPORT char * SWIGSTDCALL CSharp_ArMode_getName(void * jarg1) {
  char * jresult ;
  ArMode *arg1 = (ArMode *) 0 ;
  char *result = 0 ;
  
  arg1 = (ArMode *)jarg1; 
  result = (char *)(arg1)->getName();
  jresult = SWIG_csharp_string_callback((const char *)result); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_ArMode_activate(void * jarg1) {
  ArMode *arg1 = (ArMode *) 0 ;
  
  arg1 = (ArMode *)jarg1; 
  (arg1)->activate();
}


SWIGEXPORT void SWIGSTDCALL CSharp_ArMode_deactivate(void * jarg1) {
  ArMode *arg1 = (ArMode *) 0 ;
  
  arg1 = (ArMode *)jarg1; 
  (arg1)->deactivate();
}


SWIGEXPORT void SWIGSTDCALL CSharp_ArMode_userTask(void * jarg1) {
  ArMode *arg1 = (ArMode *) 0 ;
  
  arg1 = (ArMode *)jarg1; 
  (arg1)->userTask();
}


SWIGEXPORT void SWIGSTDCALL CSharp_ArMode_help(void * jarg1) {
  ArMode *arg1 = (ArMode *) 0 ;
  
  arg1 = (ArMode *)jarg1; 
  (arg1)->help();
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_ArMode_baseActivate(void * jarg1) {
  unsigned int jresult ;
  ArMode *arg1 = (ArMode *) 0 ;
  bool result;
  
  arg1 = (ArMode *)jarg1; 
  result = (bool)(arg1)->baseActivate();
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_ArMode_baseDeactivate(void * jarg1) {
  unsigned int jresult ;
  ArMode *arg1 = (ArMode *) 0 ;
  bool result;
  
  arg1 = (ArMode *)jarg1; 
  result = (bool)(arg1)->baseDeactivate();
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_ArMode_baseHelp() {
  ArMode::baseHelp();
}


SWIGEXPORT char SWIGSTDCALL CSharp_ArMode_getKey(void * jarg1) {
  char jresult ;
  ArMode *arg1 = (ArMode *) 0 ;
  char result;
  
  arg1 = (ArMode *)jarg1; 
  result = (char)(arg1)->getKey();
  jresult = result; 
  return jresult;
}


SWIGEXPORT char SWIGSTDCALL CSharp_ArMode_getKey2(void * jarg1) {
  char jresult ;
  ArMode *arg1 = (ArMode *) 0 ;
  char result;
  
  arg1 = (ArMode *)jarg1; 
  result = (char)(arg1)->getKey2();
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_ArModeTeleop(void * jarg1, char * jarg2, char jarg3, char jarg4) {
  void * jresult ;
  ArRobot *arg1 = (ArRobot *) 0 ;
  char *arg2 = (char *) 0 ;
  char arg3 ;
  char arg4 ;
  ArModeTeleop *result = 0 ;
  
  arg1 = (ArRobot *)jarg1; 
  arg2 = (char *)jarg2; 
  arg3 = (char)jarg3; 
  arg4 = (char)jarg4; 
  result = (ArModeTeleop *)new ArModeTeleop(arg1,(char const *)arg2,arg3,arg4);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_ArModeTeleop(void * jarg1) {
  ArModeTeleop *arg1 = (ArModeTeleop *) 0 ;
  
  arg1 = (ArModeTeleop *)jarg1; 
  delete arg1;
}


SWIGEXPORT void SWIGSTDCALL CSharp_ArModeTeleop_activate(void * jarg1) {
  ArModeTeleop *arg1 = (ArModeTeleop *) 0 ;
  
  arg1 = (ArModeTeleop *)jarg1; 
  (arg1)->activate();
}


SWIGEXPORT void SWIGSTDCALL CSharp_ArModeTeleop_deactivate(void * jarg1) {
  ArModeTeleop *arg1 = (ArModeTeleop *) 0 ;
  
  arg1 = (ArModeTeleop *)jarg1; 
  (arg1)->deactivate();
}


SWIGEXPORT void SWIGSTDCALL CSharp_ArModeTeleop_help(void * jarg1) {
  ArModeTeleop *arg1 = (ArModeTeleop *) 0 ;
  
  arg1 = (ArModeTeleop *)jarg1; 
  (arg1)->help();
}


SWIGEXPORT void SWIGSTDCALL CSharp_ArModeTeleop_userTask(void * jarg1) {
  ArModeTeleop *arg1 = (ArModeTeleop *) 0 ;
  
  arg1 = (ArModeTeleop *)jarg1; 
  (arg1)->userTask();
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_ArModeUnguardedTeleop(void * jarg1, char * jarg2, char jarg3, char jarg4) {
  void * jresult ;
  ArRobot *arg1 = (ArRobot *) 0 ;
  char *arg2 = (char *) 0 ;
  char arg3 ;
  char arg4 ;
  ArModeUnguardedTeleop *result = 0 ;
  
  arg1 = (ArRobot *)jarg1; 
  arg2 = (char *)jarg2; 
  arg3 = (char)jarg3; 
  arg4 = (char)jarg4; 
  result = (ArModeUnguardedTeleop *)new ArModeUnguardedTeleop(arg1,(char const *)arg2,arg3,arg4);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_ArModeUnguardedTeleop(void * jarg1) {
  ArModeUnguardedTeleop *arg1 = (ArModeUnguardedTeleop *) 0 ;
  
  arg1 = (ArModeUnguardedTeleop *)jarg1; 
  delete arg1;
}


SWIGEXPORT void SWIGSTDCALL CSharp_ArModeUnguardedTeleop_activate(void * jarg1) {
  ArModeUnguardedTeleop *arg1 = (ArModeUnguardedTeleop *) 0 ;
  
  arg1 = (ArModeUnguardedTeleop *)jarg1; 
  (arg1)->activate();
}


SWIGEXPORT void SWIGSTDCALL CSharp_ArModeUnguardedTeleop_deactivate(void * jarg1) {
  ArModeUnguardedTeleop *arg1 = (ArModeUnguardedTeleop *) 0 ;
  
  arg1 = (ArModeUnguardedTeleop *)jarg1; 
  (arg1)->deactivate();
}


SWIGEXPORT void SWIGSTDCALL CSharp_ArModeUnguardedTeleop_help(void * jarg1) {
  ArModeUnguardedTeleop *arg1 = (ArModeUnguardedTeleop *) 0 ;
  
  arg1 = (ArModeUnguardedTeleop *)jarg1; 
  (arg1)->help();
}


SWIGEXPORT void SWIGSTDCALL CSharp_ArModeUnguardedTeleop_userTask(void * jarg1) {
  ArModeUnguardedTeleop *arg1 = (ArModeUnguardedTeleop *) 0 ;
  
  arg1 = (ArModeUnguardedTeleop *)jarg1; 
  (arg1)->userTask();
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_ArModeWander(void * jarg1, char * jarg2, char jarg3, char jarg4) {
  void * jresult ;
  ArRobot *arg1 = (ArRobot *) 0 ;
  char *arg2 = (char *) 0 ;
  char arg3 ;
  char arg4 ;
  ArModeWander *result = 0 ;
  
  arg1 = (ArRobot *)jarg1; 
  arg2 = (char *)jarg2; 
  arg3 = (char)jarg3; 
  arg4 = (char)jarg4; 
  result = (ArModeWander *)new ArModeWander(arg1,(char const *)arg2,arg3,arg4);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_ArModeWander(void * jarg1) {
  ArModeWander *arg1 = (ArModeWander *) 0 ;
  
  arg1 = (ArModeWander *)jarg1; 
  delete arg1;
}


SWIGEXPORT void SWIGSTDCALL CSharp_ArModeWander_activate(void * jarg1) {
  ArModeWander *arg1 = (ArModeWander *) 0 ;
  
  arg1 = (ArModeWander *)jarg1; 
  (arg1)->activate();
}


SWIGEXPORT void SWIGSTDCALL CSharp_ArModeWander_deactivate(void * jarg1) {
  ArModeWander *arg1 = (ArModeWander *) 0 ;
  
  arg1 = (ArModeWander *)jarg1; 
  (arg1)->deactivate();
}


SWIGEXPORT void SWIGSTDCALL CSharp_ArModeWander_help(void * jarg1) {
  ArModeWander *arg1 = (ArModeWander *) 0 ;
  
  arg1 = (ArModeWander *)jarg1; 
  (arg1)->help();
}


SWIGEXPORT void SWIGSTDCALL CSharp_ArModeWander_userTask(void * jarg1) {
  ArModeWander *arg1 = (ArModeWander *) 0 ;
  
  arg1 = (ArModeWander *)jarg1; 
  (arg1)->userTask();
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_ArModeGripper(void * jarg1, char * jarg2, char jarg3, char jarg4) {
  void * jresult ;
  ArRobot *arg1 = (ArRobot *) 0 ;
  char *arg2 = (char *) 0 ;
  char arg3 ;
  char arg4 ;
  ArModeGripper *result = 0 ;
  
  arg1 = (ArRobot *)jarg1; 
  arg2 = (char *)jarg2; 
  arg3 = (char)jarg3; 
  arg4 = (char)jarg4; 
  result = (ArModeGripper *)new ArModeGripper(arg1,(char const *)arg2,arg3,arg4);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_ArModeGripper(void * jarg1) {
  ArModeGripper *arg1 = (ArModeGripper *) 0 ;
  
  arg1 = (ArModeGripper *)jarg1; 
  delete arg1;
}


SWIGEXPORT void SWIGSTDCALL CSharp_ArModeGripper_activate(void * jarg1) {
  ArModeGripper *arg1 = (ArModeGripper *) 0 ;
  
  arg1 = (ArModeGripper *)jarg1; 
  (arg1)->activate();
}


SWIGEXPORT void SWIGSTDCALL CSharp_ArModeGripper_deactivate(void * jarg1) {
  ArModeGripper *arg1 = (ArModeGripper *) 0 ;
  
  arg1 = (ArModeGripper *)jarg1; 
  (arg1)->deactivate();
}


SWIGEXPORT void SWIGSTDCALL CSharp_ArModeGripper_userTask(void * jarg1) {
  ArModeGripper *arg1 = (ArModeGripper *) 0 ;
  
  arg1 = (ArModeGripper *)jarg1; 
  (arg1)->userTask();
}


SWIGEXPORT void SWIGSTDCALL CSharp_ArModeGripper_help(void * jarg1) {
  ArModeGripper *arg1 = (ArModeGripper *) 0 ;
  
  arg1 = (ArModeGripper *)jarg1; 
  (arg1)->help();
}


SWIGEXPORT void SWIGSTDCALL CSharp_ArModeGripper_open(void * jarg1) {
  ArModeGripper *arg1 = (ArModeGripper *) 0 ;
  
  arg1 = (ArModeGripper *)jarg1; 
  (arg1)->open();
}


SWIGEXPORT void SWIGSTDCALL CSharp_ArModeGripper_close(void * jarg1) {
  ArModeGripper *arg1 = (ArModeGripper *) 0 ;
  
  arg1 = (ArModeGripper *)jarg1; 
  (arg1)->close();
}


SWIGEXPORT void SWIGSTDCALL CSharp_ArModeGripper_up(void * jarg1) {
  ArModeGripper *arg1 = (ArModeGripper *) 0 ;
  
  arg1 = (ArModeGripper *)jarg1; 
  (arg1)->up();
}


SWIGEXPORT void SWIGSTDCALL CSharp_ArModeGripper_down(void * jarg1) {
  ArModeGripper *arg1 = (ArModeGripper *) 0 ;
  
  arg1 = (ArModeGripper *)jarg1; 
  (arg1)->down();
}


SWIGEXPORT void SWIGSTDCALL CSharp_ArModeGripper_stop(void * jarg1) {
  ArModeGripper *arg1 = (ArModeGripper *) 0 ;
  
  arg1 = (ArModeGripper *)jarg1; 
  (arg1)->stop();
}


SWIGEXPORT void SWIGSTDCALL CSharp_ArModeGripper_exercise(void * jarg1) {
  ArModeGripper *arg1 = (ArModeGripper *) 0 ;
  
  arg1 = (ArModeGripper *)jarg1; 
  (arg1)->exercise();
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_ArModeCamera(void * jarg1, char * jarg2, char jarg3, char jarg4) {
  void * jresult ;
  ArRobot *arg1 = (ArRobot *) 0 ;
  char *arg2 = (char *) 0 ;
  char arg3 ;
  char arg4 ;
  ArModeCamera *result = 0 ;
  
  arg1 = (ArRobot *)jarg1; 
  arg2 = (char *)jarg2; 
  arg3 = (char)jarg3; 
  arg4 = (char)jarg4; 
  result = (ArModeCamera *)new ArModeCamera(arg1,(char const *)arg2,arg3,arg4);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_ArModeCamera(void * jarg1) {
  ArModeCamera *arg1 = (ArModeCamera *) 0 ;
  
  arg1 = (ArModeCamera *)jarg1; 
  delete arg1;
}


SWIGEXPORT void SWIGSTDCALL CSharp_ArModeCamera_activate(void * jarg1) {
  ArModeCamera *arg1 = (ArModeCamera *) 0 ;
  
  arg1 = (ArModeCamera *)jarg1; 
  (arg1)->activate();
}


SWIGEXPORT void SWIGSTDCALL CSharp_ArModeCamera_deactivate(void * jarg1) {
  ArModeCamera *arg1 = (ArModeCamera *) 0 ;
  
  arg1 = (ArModeCamera *)jarg1; 
  (arg1)->deactivate();
}


SWIGEXPORT void SWIGSTDCALL CSharp_ArModeCamera_userTask(void * jarg1) {
  ArModeCamera *arg1 = (ArModeCamera *) 0 ;
  
  arg1 = (ArModeCamera *)jarg1; 
  (arg1)->userTask();
}


SWIGEXPORT void SWIGSTDCALL CSharp_ArModeCamera_help(void * jarg1) {
  ArModeCamera *arg1 = (ArModeCamera *) 0 ;
  
  arg1 = (ArModeCamera *)jarg1; 
  (arg1)->help();
}


SWIGEXPORT void SWIGSTDCALL CSharp_ArModeCamera_up(void * jarg1) {
  ArModeCamera *arg1 = (ArModeCamera *) 0 ;
  
  arg1 = (ArModeCamera *)jarg1; 
  (arg1)->up();
}


SWIGEXPORT void SWIGSTDCALL CSharp_ArModeCamera_down(void * jarg1) {
  ArModeCamera *arg1 = (ArModeCamera *) 0 ;
  
  arg1 = (ArModeCamera *)jarg1; 
  (arg1)->down();
}


SWIGEXPORT void SWIGSTDCALL CSharp_ArModeCamera_left(void * jarg1) {
  ArModeCamera *arg1 = (ArModeCamera *) 0 ;
  
  arg1 = (ArModeCamera *)jarg1; 
  (arg1)->left();
}


SWIGEXPORT void SWIGSTDCALL CSharp_ArModeCamera_right(void * jarg1) {
  ArModeCamera *arg1 = (ArModeCamera *) 0 ;
  
  arg1 = (ArModeCamera *)jarg1; 
  (arg1)->right();
}


SWIGEXPORT void SWIGSTDCALL CSharp_ArModeCamera_center(void * jarg1) {
  ArModeCamera *arg1 = (ArModeCamera *) 0 ;
  
  arg1 = (ArModeCamera *)jarg1; 
  (arg1)->center();
}


SWIGEXPORT void SWIGSTDCALL CSharp_ArModeCamera_zoomIn(void * jarg1) {
  ArModeCamera *arg1 = (ArModeCamera *) 0 ;
  
  arg1 = (ArModeCamera *)jarg1; 
  (arg1)->zoomIn();
}


SWIGEXPORT void SWIGSTDCALL CSharp_ArModeCamera_zoomOut(void * jarg1) {
  ArModeCamera *arg1 = (ArModeCamera *) 0 ;
  
  arg1 = (ArModeCamera *)jarg1; 
  (arg1)->zoomOut();
}


SWIGEXPORT void SWIGSTDCALL CSharp_ArModeCamera_exercise(void * jarg1) {
  ArModeCamera *arg1 = (ArModeCamera *) 0 ;
  
  arg1 = (ArModeCamera *)jarg1; 
  (arg1)->exercise();
}


SWIGEXPORT void SWIGSTDCALL CSharp_ArModeCamera_toggleAutoFocus(void * jarg1) {
  ArModeCamera *arg1 = (ArModeCamera *) 0 ;
  
  arg1 = (ArModeCamera *)jarg1; 
  (arg1)->toggleAutoFocus();
}


SWIGEXPORT void SWIGSTDCALL CSharp_ArModeCamera_sony(void * jarg1) {
  ArModeCamera *arg1 = (ArModeCamera *) 0 ;
  
  arg1 = (ArModeCamera *)jarg1; 
  (arg1)->sony();
}


SWIGEXPORT void SWIGSTDCALL CSharp_ArModeCamera_canon(void * jarg1) {
  ArModeCamera *arg1 = (ArModeCamera *) 0 ;
  
  arg1 = (ArModeCamera *)jarg1; 
  (arg1)->canon();
}


SWIGEXPORT void SWIGSTDCALL CSharp_ArModeCamera_dpptu(void * jarg1) {
  ArModeCamera *arg1 = (ArModeCamera *) 0 ;
  
  arg1 = (ArModeCamera *)jarg1; 
  (arg1)->dpptu();
}


SWIGEXPORT void SWIGSTDCALL CSharp_ArModeCamera_amptu(void * jarg1) {
  ArModeCamera *arg1 = (ArModeCamera *) 0 ;
  
  arg1 = (ArModeCamera *)jarg1; 
  (arg1)->amptu();
}


SWIGEXPORT void SWIGSTDCALL CSharp_ArModeCamera_canonInverted(void * jarg1) {
  ArModeCamera *arg1 = (ArModeCamera *) 0 ;
  
  arg1 = (ArModeCamera *)jarg1; 
  (arg1)->canonInverted();
}


SWIGEXPORT void SWIGSTDCALL CSharp_ArModeCamera_sonySerial(void * jarg1) {
  ArModeCamera *arg1 = (ArModeCamera *) 0 ;
  
  arg1 = (ArModeCamera *)jarg1; 
  (arg1)->sonySerial();
}


SWIGEXPORT void SWIGSTDCALL CSharp_ArModeCamera_canonSerial(void * jarg1) {
  ArModeCamera *arg1 = (ArModeCamera *) 0 ;
  
  arg1 = (ArModeCamera *)jarg1; 
  (arg1)->canonSerial();
}


SWIGEXPORT void SWIGSTDCALL CSharp_ArModeCamera_dpptuSerial(void * jarg1) {
  ArModeCamera *arg1 = (ArModeCamera *) 0 ;
  
  arg1 = (ArModeCamera *)jarg1; 
  (arg1)->dpptuSerial();
}


SWIGEXPORT void SWIGSTDCALL CSharp_ArModeCamera_amptuSerial(void * jarg1) {
  ArModeCamera *arg1 = (ArModeCamera *) 0 ;
  
  arg1 = (ArModeCamera *)jarg1; 
  (arg1)->amptuSerial();
}


SWIGEXPORT void SWIGSTDCALL CSharp_ArModeCamera_canonInvertedSerial(void * jarg1) {
  ArModeCamera *arg1 = (ArModeCamera *) 0 ;
  
  arg1 = (ArModeCamera *)jarg1; 
  (arg1)->canonInvertedSerial();
}


SWIGEXPORT void SWIGSTDCALL CSharp_ArModeCamera_rvisionSerial(void * jarg1) {
  ArModeCamera *arg1 = (ArModeCamera *) 0 ;
  
  arg1 = (ArModeCamera *)jarg1; 
  (arg1)->rvisionSerial();
}


SWIGEXPORT void SWIGSTDCALL CSharp_ArModeCamera_com1(void * jarg1) {
  ArModeCamera *arg1 = (ArModeCamera *) 0 ;
  
  arg1 = (ArModeCamera *)jarg1; 
  (arg1)->com1();
}


SWIGEXPORT void SWIGSTDCALL CSharp_ArModeCamera_com2(void * jarg1) {
  ArModeCamera *arg1 = (ArModeCamera *) 0 ;
  
  arg1 = (ArModeCamera *)jarg1; 
  (arg1)->com2();
}


SWIGEXPORT void SWIGSTDCALL CSharp_ArModeCamera_com3(void * jarg1) {
  ArModeCamera *arg1 = (ArModeCamera *) 0 ;
  
  arg1 = (ArModeCamera *)jarg1; 
  (arg1)->com3();
}


SWIGEXPORT void SWIGSTDCALL CSharp_ArModeCamera_com4(void * jarg1) {
  ArModeCamera *arg1 = (ArModeCamera *) 0 ;
  
  arg1 = (ArModeCamera *)jarg1; 
  (arg1)->com4();
}


SWIGEXPORT void SWIGSTDCALL CSharp_ArModeCamera_usb0(void * jarg1) {
  ArModeCamera *arg1 = (ArModeCamera *) 0 ;
  
  arg1 = (ArModeCamera *)jarg1; 
  (arg1)->usb0();
}


SWIGEXPORT void SWIGSTDCALL CSharp_ArModeCamera_usb9(void * jarg1) {
  ArModeCamera *arg1 = (ArModeCamera *) 0 ;
  
  arg1 = (ArModeCamera *)jarg1; 
  (arg1)->usb9();
}


SWIGEXPORT void SWIGSTDCALL CSharp_ArModeCamera_aux1(void * jarg1) {
  ArModeCamera *arg1 = (ArModeCamera *) 0 ;
  
  arg1 = (ArModeCamera *)jarg1; 
  (arg1)->aux1();
}


SWIGEXPORT void SWIGSTDCALL CSharp_ArModeCamera_aux2(void * jarg1) {
  ArModeCamera *arg1 = (ArModeCamera *) 0 ;
  
  arg1 = (ArModeCamera *)jarg1; 
  (arg1)->aux2();
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_ArModeSonar(void * jarg1, char * jarg2, char jarg3, char jarg4) {
  void * jresult ;
  ArRobot *arg1 = (ArRobot *) 0 ;
  char *arg2 = (char *) 0 ;
  char arg3 ;
  char arg4 ;
  ArModeSonar *result = 0 ;
  
  arg1 = (ArRobot *)jarg1; 
  arg2 = (char *)jarg2; 
  arg3 = (char)jarg3; 
  arg4 = (char)jarg4; 
  result = (ArModeSonar *)new ArModeSonar(arg1,(char const *)arg2,arg3,arg4);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_ArModeSonar(void * jarg1) {
  ArModeSonar *arg1 = (ArModeSonar *) 0 ;
  
  arg1 = (ArModeSonar *)jarg1; 
  delete arg1;
}


SWIGEXPORT void SWIGSTDCALL CSharp_ArModeSonar_activate(void * jarg1) {
  ArModeSonar *arg1 = (ArModeSonar *) 0 ;
  
  arg1 = (ArModeSonar *)jarg1; 
  (arg1)->activate();
}


SWIGEXPORT void SWIGSTDCALL CSharp_ArModeSonar_deactivate(void * jarg1) {
  ArModeSonar *arg1 = (ArModeSonar *) 0 ;
  
  arg1 = (ArModeSonar *)jarg1; 
  (arg1)->deactivate();
}


SWIGEXPORT void SWIGSTDCALL CSharp_ArModeSonar_userTask(void * jarg1) {
  ArModeSonar *arg1 = (ArModeSonar *) 0 ;
  
  arg1 = (ArModeSonar *)jarg1; 
  (arg1)->userTask();
}


SWIGEXPORT void SWIGSTDCALL CSharp_ArModeSonar_help(void * jarg1) {
  ArModeSonar *arg1 = (ArModeSonar *) 0 ;
  
  arg1 = (ArModeSonar *)jarg1; 
  (arg1)->help();
}


SWIGEXPORT void SWIGSTDCALL CSharp_ArModeSonar_allSonar(void * jarg1) {
  ArModeSonar *arg1 = (ArModeSonar *) 0 ;
  
  arg1 = (ArModeSonar *)jarg1; 
  (arg1)->allSonar();
}


SWIGEXPORT void SWIGSTDCALL CSharp_ArModeSonar_firstSonar(void * jarg1) {
  ArModeSonar *arg1 = (ArModeSonar *) 0 ;
  
  arg1 = (ArModeSonar *)jarg1; 
  (arg1)->firstSonar();
}


SWIGEXPORT void SWIGSTDCALL CSharp_ArModeSonar_secondSonar(void * jarg1) {
  ArModeSonar *arg1 = (ArModeSonar *) 0 ;
  
  arg1 = (ArModeSonar *)jarg1; 
  (arg1)->secondSonar();
}


SWIGEXPORT void SWIGSTDCALL CSharp_ArModeSonar_thirdSonar(void * jarg1) {
  ArModeSonar *arg1 = (ArModeSonar *) 0 ;
  
  arg1 = (ArModeSonar *)jarg1; 
  (arg1)->thirdSonar();
}


SWIGEXPORT void SWIGSTDCALL CSharp_ArModeSonar_fourthSonar(void * jarg1) {
  ArModeSonar *arg1 = (ArModeSonar *) 0 ;
  
  arg1 = (ArModeSonar *)jarg1; 
  (arg1)->fourthSonar();
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_ArModeBumps(void * jarg1, char * jarg2, char jarg3, char jarg4) {
  void * jresult ;
  ArRobot *arg1 = (ArRobot *) 0 ;
  char *arg2 = (char *) 0 ;
  char arg3 ;
  char arg4 ;
  ArModeBumps *result = 0 ;
  
  arg1 = (ArRobot *)jarg1; 
  arg2 = (char *)jarg2; 
  arg3 = (char)jarg3; 
  arg4 = (char)jarg4; 
  result = (ArModeBumps *)new ArModeBumps(arg1,(char const *)arg2,arg3,arg4);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_ArModeBumps(void * jarg1) {
  ArModeBumps *arg1 = (ArModeBumps *) 0 ;
  
  arg1 = (ArModeBumps *)jarg1; 
  delete arg1;
}


SWIGEXPORT void SWIGSTDCALL CSharp_ArModeBumps_activate(void * jarg1) {
  ArModeBumps *arg1 = (ArModeBumps *) 0 ;
  
  arg1 = (ArModeBumps *)jarg1; 
  (arg1)->activate();
}


SWIGEXPORT void SWIGSTDCALL CSharp_ArModeBumps_deactivate(void * jarg1) {
  ArModeBumps *arg1 = (ArModeBumps *) 0 ;
  
  arg1 = (ArModeBumps *)jarg1; 
  (arg1)->deactivate();
}


SWIGEXPORT void SWIGSTDCALL CSharp_ArModeBumps_userTask(void * jarg1) {
  ArModeBumps *arg1 = (ArModeBumps *) 0 ;
  
  arg1 = (ArModeBumps *)jarg1; 
  (arg1)->userTask();
}


SWIGEXPORT void SWIGSTDCALL CSharp_ArModeBumps_help(void * jarg1) {
  ArModeBumps *arg1 = (ArModeBumps *) 0 ;
  
  arg1 = (ArModeBumps *)jarg1; 
  (arg1)->help();
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_ArModePosition__SWIG_0(void * jarg1, char * jarg2, char jarg3, char jarg4, void * jarg5) {
  void * jresult ;
  ArRobot *arg1 = (ArRobot *) 0 ;
  char *arg2 = (char *) 0 ;
  char arg3 ;
  char arg4 ;
  ArAnalogGyro *arg5 = (ArAnalogGyro *) 0 ;
  ArModePosition *result = 0 ;
  
  arg1 = (ArRobot *)jarg1; 
  arg2 = (char *)jarg2; 
  arg3 = (char)jarg3; 
  arg4 = (char)jarg4; 
  arg5 = (ArAnalogGyro *)jarg5; 
  result = (ArModePosition *)new ArModePosition(arg1,(char const *)arg2,arg3,arg4,arg5);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_ArModePosition__SWIG_1(void * jarg1, char * jarg2, char jarg3, char jarg4) {
  void * jresult ;
  ArRobot *arg1 = (ArRobot *) 0 ;
  char *arg2 = (char *) 0 ;
  char arg3 ;
  char arg4 ;
  ArModePosition *result = 0 ;
  
  arg1 = (ArRobot *)jarg1; 
  arg2 = (char *)jarg2; 
  arg3 = (char)jarg3; 
  arg4 = (char)jarg4; 
  result = (ArModePosition *)new ArModePosition(arg1,(char const *)arg2,arg3,arg4);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_ArModePosition(void * jarg1) {
  ArModePosition *arg1 = (ArModePosition *) 0 ;
  
  arg1 = (ArModePosition *)jarg1; 
  delete arg1;
}


SWIGEXPORT void SWIGSTDCALL CSharp_ArModePosition_activate(void * jarg1) {
  ArModePosition *arg1 = (ArModePosition *) 0 ;
  
  arg1 = (ArModePosition *)jarg1; 
  (arg1)->activate();
}


SWIGEXPORT void SWIGSTDCALL CSharp_ArModePosition_deactivate(void * jarg1) {
  ArModePosition *arg1 = (ArModePosition *) 0 ;
  
  arg1 = (ArModePosition *)jarg1; 
  (arg1)->deactivate();
}


SWIGEXPORT void SWIGSTDCALL CSharp_ArModePosition_userTask(void * jarg1) {
  ArModePosition *arg1 = (ArModePosition *) 0 ;
  
  arg1 = (ArModePosition *)jarg1; 
  (arg1)->userTask();
}


SWIGEXPORT void SWIGSTDCALL CSharp_ArModePosition_help(void * jarg1) {
  ArModePosition *arg1 = (ArModePosition *) 0 ;
  
  arg1 = (ArModePosition *)jarg1; 
  (arg1)->help();
}


SWIGEXPORT void SWIGSTDCALL CSharp_ArModePosition_up(void * jarg1) {
  ArModePosition *arg1 = (ArModePosition *) 0 ;
  
  arg1 = (ArModePosition *)jarg1; 
  (arg1)->up();
}


SWIGEXPORT void SWIGSTDCALL CSharp_ArModePosition_down(void * jarg1) {
  ArModePosition *arg1 = (ArModePosition *) 0 ;
  
  arg1 = (ArModePosition *)jarg1; 
  (arg1)->down();
}


SWIGEXPORT void SWIGSTDCALL CSharp_ArModePosition_left(void * jarg1) {
  ArModePosition *arg1 = (ArModePosition *) 0 ;
  
  arg1 = (ArModePosition *)jarg1; 
  (arg1)->left();
}


SWIGEXPORT void SWIGSTDCALL CSharp_ArModePosition_right(void * jarg1) {
  ArModePosition *arg1 = (ArModePosition *) 0 ;
  
  arg1 = (ArModePosition *)jarg1; 
  (arg1)->right();
}


SWIGEXPORT void SWIGSTDCALL CSharp_ArModePosition_stop(void * jarg1) {
  ArModePosition *arg1 = (ArModePosition *) 0 ;
  
  arg1 = (ArModePosition *)jarg1; 
  (arg1)->stop();
}


SWIGEXPORT void SWIGSTDCALL CSharp_ArModePosition_reset(void * jarg1) {
  ArModePosition *arg1 = (ArModePosition *) 0 ;
  
  arg1 = (ArModePosition *)jarg1; 
  (arg1)->reset();
}


SWIGEXPORT void SWIGSTDCALL CSharp_ArModePosition_mode(void * jarg1) {
  ArModePosition *arg1 = (ArModePosition *) 0 ;
  
  arg1 = (ArModePosition *)jarg1; 
  (arg1)->mode();
}


SWIGEXPORT void SWIGSTDCALL CSharp_ArModePosition_gyro(void * jarg1) {
  ArModePosition *arg1 = (ArModePosition *) 0 ;
  
  arg1 = (ArModePosition *)jarg1; 
  (arg1)->gyro();
}


SWIGEXPORT void SWIGSTDCALL CSharp_ArModePosition_incDistance(void * jarg1) {
  ArModePosition *arg1 = (ArModePosition *) 0 ;
  
  arg1 = (ArModePosition *)jarg1; 
  (arg1)->incDistance();
}


SWIGEXPORT void SWIGSTDCALL CSharp_ArModePosition_decDistance(void * jarg1) {
  ArModePosition *arg1 = (ArModePosition *) 0 ;
  
  arg1 = (ArModePosition *)jarg1; 
  (arg1)->decDistance();
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_ArModeIO(void * jarg1, char * jarg2, char jarg3, char jarg4) {
  void * jresult ;
  ArRobot *arg1 = (ArRobot *) 0 ;
  char *arg2 = (char *) 0 ;
  char arg3 ;
  char arg4 ;
  ArModeIO *result = 0 ;
  
  arg1 = (ArRobot *)jarg1; 
  arg2 = (char *)jarg2; 
  arg3 = (char)jarg3; 
  arg4 = (char)jarg4; 
  result = (ArModeIO *)new ArModeIO(arg1,(char const *)arg2,arg3,arg4);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_ArModeIO(void * jarg1) {
  ArModeIO *arg1 = (ArModeIO *) 0 ;
  
  arg1 = (ArModeIO *)jarg1; 
  delete arg1;
}


SWIGEXPORT void SWIGSTDCALL CSharp_ArModeIO_activate(void * jarg1) {
  ArModeIO *arg1 = (ArModeIO *) 0 ;
  
  arg1 = (ArModeIO *)jarg1; 
  (arg1)->activate();
}


SWIGEXPORT void SWIGSTDCALL CSharp_ArModeIO_deactivate(void * jarg1) {
  ArModeIO *arg1 = (ArModeIO *) 0 ;
  
  arg1 = (ArModeIO *)jarg1; 
  (arg1)->deactivate();
}


SWIGEXPORT void SWIGSTDCALL CSharp_ArModeIO_userTask(void * jarg1) {
  ArModeIO *arg1 = (ArModeIO *) 0 ;
  
  arg1 = (ArModeIO *)jarg1; 
  (arg1)->userTask();
}


SWIGEXPORT void SWIGSTDCALL CSharp_ArModeIO_help(void * jarg1) {
  ArModeIO *arg1 = (ArModeIO *) 0 ;
  
  arg1 = (ArModeIO *)jarg1; 
  (arg1)->help();
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_ArModeLaser__SWIG_0(void * jarg1, char * jarg2, char jarg3, char jarg4, void * jarg5) {
  void * jresult ;
  ArRobot *arg1 = (ArRobot *) 0 ;
  char *arg2 = (char *) 0 ;
  char arg3 ;
  char arg4 ;
  ArSick *arg5 = (ArSick *) 0 ;
  ArModeLaser *result = 0 ;
  
  arg1 = (ArRobot *)jarg1; 
  arg2 = (char *)jarg2; 
  arg3 = (char)jarg3; 
  arg4 = (char)jarg4; 
  arg5 = (ArSick *)jarg5; 
  result = (ArModeLaser *)new ArModeLaser(arg1,(char const *)arg2,arg3,arg4,arg5);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_ArModeLaser__SWIG_1(void * jarg1, char * jarg2, char jarg3, char jarg4) {
  void * jresult ;
  ArRobot *arg1 = (ArRobot *) 0 ;
  char *arg2 = (char *) 0 ;
  char arg3 ;
  char arg4 ;
  ArModeLaser *result = 0 ;
  
  arg1 = (ArRobot *)jarg1; 
  arg2 = (char *)jarg2; 
  arg3 = (char)jarg3; 
  arg4 = (char)jarg4; 
  result = (ArModeLaser *)new ArModeLaser(arg1,(char const *)arg2,arg3,arg4);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_ArModeLaser(void * jarg1) {
  ArModeLaser *arg1 = (ArModeLaser *) 0 ;
  
  arg1 = (ArModeLaser *)jarg1; 
  delete arg1;
}


SWIGEXPORT void SWIGSTDCALL CSharp_ArModeLaser_activate(void * jarg1) {
  ArModeLaser *arg1 = (ArModeLaser *) 0 ;
  
  arg1 = (ArModeLaser *)jarg1; 
  (arg1)->activate();
}


SWIGEXPORT void SWIGSTDCALL CSharp_ArModeLaser_deactivate(void * jarg1) {
  ArModeLaser *arg1 = (ArModeLaser *) 0 ;
  
  arg1 = (ArModeLaser *)jarg1; 
  (arg1)->deactivate();
}


SWIGEXPORT void SWIGSTDCALL CSharp_ArModeLaser_userTask(void * jarg1) {
  ArModeLaser *arg1 = (ArModeLaser *) 0 ;
  
  arg1 = (ArModeLaser *)jarg1; 
  (arg1)->userTask();
}


SWIGEXPORT void SWIGSTDCALL CSharp_ArModeLaser_help(void * jarg1) {
  ArModeLaser *arg1 = (ArModeLaser *) 0 ;
  
  arg1 = (ArModeLaser *)jarg1; 
  (arg1)->help();
}


SWIGEXPORT void SWIGSTDCALL CSharp_ArModeLaser_switchToLaser(void * jarg1, int jarg2) {
  ArModeLaser *arg1 = (ArModeLaser *) 0 ;
  int arg2 ;
  
  arg1 = (ArModeLaser *)jarg1; 
  arg2 = (int)jarg2; 
  (arg1)->switchToLaser(arg2);
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_ArModeActs__SWIG_0(void * jarg1, char * jarg2, char jarg3, char jarg4, void * jarg5) {
  void * jresult ;
  ArRobot *arg1 = (ArRobot *) 0 ;
  char *arg2 = (char *) 0 ;
  char arg3 ;
  char arg4 ;
  ArACTS_1_2 *arg5 = (ArACTS_1_2 *) 0 ;
  ArModeActs *result = 0 ;
  
  arg1 = (ArRobot *)jarg1; 
  arg2 = (char *)jarg2; 
  arg3 = (char)jarg3; 
  arg4 = (char)jarg4; 
  arg5 = (ArACTS_1_2 *)jarg5; 
  result = (ArModeActs *)new ArModeActs(arg1,(char const *)arg2,arg3,arg4,arg5);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_ArModeActs__SWIG_1(void * jarg1, char * jarg2, char jarg3, char jarg4) {
  void * jresult ;
  ArRobot *arg1 = (ArRobot *) 0 ;
  char *arg2 = (char *) 0 ;
  char arg3 ;
  char arg4 ;
  ArModeActs *result = 0 ;
  
  arg1 = (ArRobot *)jarg1; 
  arg2 = (char *)jarg2; 
  arg3 = (char)jarg3; 
  arg4 = (char)jarg4; 
  result = (ArModeActs *)new ArModeActs(arg1,(char const *)arg2,arg3,arg4);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_ArModeActs(void * jarg1) {
  ArModeActs *arg1 = (ArModeActs *) 0 ;
  
  arg1 = (ArModeActs *)jarg1; 
  delete arg1;
}


SWIGEXPORT void SWIGSTDCALL CSharp_ArModeActs_activate(void * jarg1) {
  ArModeActs *arg1 = (ArModeActs *) 0 ;
  
  arg1 = (ArModeActs *)jarg1; 
  (arg1)->activate();
}


SWIGEXPORT void SWIGSTDCALL CSharp_ArModeActs_deactivate(void * jarg1) {
  ArModeActs *arg1 = (ArModeActs *) 0 ;
  
  arg1 = (ArModeActs *)jarg1; 
  (arg1)->deactivate();
}


SWIGEXPORT void SWIGSTDCALL CSharp_ArModeActs_help(void * jarg1) {
  ArModeActs *arg1 = (ArModeActs *) 0 ;
  
  arg1 = (ArModeActs *)jarg1; 
  (arg1)->help();
}


SWIGEXPORT void SWIGSTDCALL CSharp_ArModeActs_userTask(void * jarg1) {
  ArModeActs *arg1 = (ArModeActs *) 0 ;
  
  arg1 = (ArModeActs *)jarg1; 
  (arg1)->userTask();
}


SWIGEXPORT void SWIGSTDCALL CSharp_ArModeActs_channel1(void * jarg1) {
  ArModeActs *arg1 = (ArModeActs *) 0 ;
  
  arg1 = (ArModeActs *)jarg1; 
  (arg1)->channel1();
}


SWIGEXPORT void SWIGSTDCALL CSharp_ArModeActs_channel2(void * jarg1) {
  ArModeActs *arg1 = (ArModeActs *) 0 ;
  
  arg1 = (ArModeActs *)jarg1; 
  (arg1)->channel2();
}


SWIGEXPORT void SWIGSTDCALL CSharp_ArModeActs_channel3(void * jarg1) {
  ArModeActs *arg1 = (ArModeActs *) 0 ;
  
  arg1 = (ArModeActs *)jarg1; 
  (arg1)->channel3();
}


SWIGEXPORT void SWIGSTDCALL CSharp_ArModeActs_channel4(void * jarg1) {
  ArModeActs *arg1 = (ArModeActs *) 0 ;
  
  arg1 = (ArModeActs *)jarg1; 
  (arg1)->channel4();
}


SWIGEXPORT void SWIGSTDCALL CSharp_ArModeActs_channel5(void * jarg1) {
  ArModeActs *arg1 = (ArModeActs *) 0 ;
  
  arg1 = (ArModeActs *)jarg1; 
  (arg1)->channel5();
}


SWIGEXPORT void SWIGSTDCALL CSharp_ArModeActs_channel6(void * jarg1) {
  ArModeActs *arg1 = (ArModeActs *) 0 ;
  
  arg1 = (ArModeActs *)jarg1; 
  (arg1)->channel6();
}


SWIGEXPORT void SWIGSTDCALL CSharp_ArModeActs_channel7(void * jarg1) {
  ArModeActs *arg1 = (ArModeActs *) 0 ;
  
  arg1 = (ArModeActs *)jarg1; 
  (arg1)->channel7();
}


SWIGEXPORT void SWIGSTDCALL CSharp_ArModeActs_channel8(void * jarg1) {
  ArModeActs *arg1 = (ArModeActs *) 0 ;
  
  arg1 = (ArModeActs *)jarg1; 
  (arg1)->channel8();
}


SWIGEXPORT void SWIGSTDCALL CSharp_ArModeActs_stop(void * jarg1) {
  ArModeActs *arg1 = (ArModeActs *) 0 ;
  
  arg1 = (ArModeActs *)jarg1; 
  (arg1)->stop();
}


SWIGEXPORT void SWIGSTDCALL CSharp_ArModeActs_start(void * jarg1) {
  ArModeActs *arg1 = (ArModeActs *) 0 ;
  
  arg1 = (ArModeActs *)jarg1; 
  (arg1)->start();
}


SWIGEXPORT void SWIGSTDCALL CSharp_ArModeActs_toggleAcquire(void * jarg1) {
  ArModeActs *arg1 = (ArModeActs *) 0 ;
  
  arg1 = (ArModeActs *)jarg1; 
  (arg1)->toggleAcquire();
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_ArModeCommand(void * jarg1, char * jarg2, char jarg3, char jarg4) {
  void * jresult ;
  ArRobot *arg1 = (ArRobot *) 0 ;
  char *arg2 = (char *) 0 ;
  char arg3 ;
  char arg4 ;
  ArModeCommand *result = 0 ;
  
  arg1 = (ArRobot *)jarg1; 
  arg2 = (char *)jarg2; 
  arg3 = (char)jarg3; 
  arg4 = (char)jarg4; 
  result = (ArModeCommand *)new ArModeCommand(arg1,(char const *)arg2,arg3,arg4);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_ArModeCommand(void * jarg1) {
  ArModeCommand *arg1 = (ArModeCommand *) 0 ;
  
  arg1 = (ArModeCommand *)jarg1; 
  delete arg1;
}


SWIGEXPORT void SWIGSTDCALL CSharp_ArModeCommand_activate(void * jarg1) {
  ArModeCommand *arg1 = (ArModeCommand *) 0 ;
  
  arg1 = (ArModeCommand *)jarg1; 
  (arg1)->activate();
}


SWIGEXPORT void SWIGSTDCALL CSharp_ArModeCommand_deactivate(void * jarg1) {
  ArModeCommand *arg1 = (ArModeCommand *) 0 ;
  
  arg1 = (ArModeCommand *)jarg1; 
  (arg1)->deactivate();
}


SWIGEXPORT void SWIGSTDCALL CSharp_ArModeCommand_help(void * jarg1) {
  ArModeCommand *arg1 = (ArModeCommand *) 0 ;
  
  arg1 = (ArModeCommand *)jarg1; 
  (arg1)->help();
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_ArModeTCM2__SWIG_0(void * jarg1, char * jarg2, char jarg3, char jarg4, void * jarg5) {
  void * jresult ;
  ArRobot *arg1 = (ArRobot *) 0 ;
  char *arg2 = (char *) 0 ;
  char arg3 ;
  char arg4 ;
  ArTCM2 *arg5 = (ArTCM2 *) 0 ;
  ArModeTCM2 *result = 0 ;
  
  arg1 = (ArRobot *)jarg1; 
  arg2 = (char *)jarg2; 
  arg3 = (char)jarg3; 
  arg4 = (char)jarg4; 
  arg5 = (ArTCM2 *)jarg5; 
  result = (ArModeTCM2 *)new ArModeTCM2(arg1,(char const *)arg2,arg3,arg4,arg5);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_ArModeTCM2__SWIG_1(void * jarg1, char * jarg2, char jarg3, char jarg4) {
  void * jresult ;
  ArRobot *arg1 = (ArRobot *) 0 ;
  char *arg2 = (char *) 0 ;
  char arg3 ;
  char arg4 ;
  ArModeTCM2 *result = 0 ;
  
  arg1 = (ArRobot *)jarg1; 
  arg2 = (char *)jarg2; 
  arg3 = (char)jarg3; 
  arg4 = (char)jarg4; 
  result = (ArModeTCM2 *)new ArModeTCM2(arg1,(char const *)arg2,arg3,arg4);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_ArModeTCM2(void * jarg1) {
  ArModeTCM2 *arg1 = (ArModeTCM2 *) 0 ;
  
  arg1 = (ArModeTCM2 *)jarg1; 
  delete arg1;
}


SWIGEXPORT void SWIGSTDCALL CSharp_ArModeTCM2_activate(void * jarg1) {
  ArModeTCM2 *arg1 = (ArModeTCM2 *) 0 ;
  
  arg1 = (ArModeTCM2 *)jarg1; 
  (arg1)->activate();
}


SWIGEXPORT void SWIGSTDCALL CSharp_ArModeTCM2_deactivate(void * jarg1) {
  ArModeTCM2 *arg1 = (ArModeTCM2 *) 0 ;
  
  arg1 = (ArModeTCM2 *)jarg1; 
  (arg1)->deactivate();
}


SWIGEXPORT void SWIGSTDCALL CSharp_ArModeTCM2_help(void * jarg1) {
  ArModeTCM2 *arg1 = (ArModeTCM2 *) 0 ;
  
  arg1 = (ArModeTCM2 *)jarg1; 
  (arg1)->help();
}


SWIGEXPORT void SWIGSTDCALL CSharp_ArModeTCM2_userTask(void * jarg1) {
  ArModeTCM2 *arg1 = (ArModeTCM2 *) 0 ;
  
  arg1 = (ArModeTCM2 *)jarg1; 
  (arg1)->userTask();
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_ArModeConfig(void * jarg1, char * jarg2, char jarg3, char jarg4) {
  void * jresult ;
  ArRobot *arg1 = (ArRobot *) 0 ;
  char *arg2 = (char *) 0 ;
  char arg3 ;
  char arg4 ;
  ArModeConfig *result = 0 ;
  
  arg1 = (ArRobot *)jarg1; 
  arg2 = (char *)jarg2; 
  arg3 = (char)jarg3; 
  arg4 = (char)jarg4; 
  result = (ArModeConfig *)new ArModeConfig(arg1,(char const *)arg2,arg3,arg4);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_ArModeConfig_activate(void * jarg1) {
  ArModeConfig *arg1 = (ArModeConfig *) 0 ;
  
  arg1 = (ArModeConfig *)jarg1; 
  (arg1)->activate();
}


SWIGEXPORT void SWIGSTDCALL CSharp_ArModeConfig_deactivate(void * jarg1) {
  ArModeConfig *arg1 = (ArModeConfig *) 0 ;
  
  arg1 = (ArModeConfig *)jarg1; 
  (arg1)->deactivate();
}


SWIGEXPORT void SWIGSTDCALL CSharp_ArModeConfig_help(void * jarg1) {
  ArModeConfig *arg1 = (ArModeConfig *) 0 ;
  
  arg1 = (ArModeConfig *)jarg1; 
  (arg1)->help();
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_ArModeConfig(void * jarg1) {
  ArModeConfig *arg1 = (ArModeConfig *) 0 ;
  
  arg1 = (ArModeConfig *)jarg1; 
  delete arg1;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_ArModeRobotStatus(void * jarg1, char * jarg2, char jarg3, char jarg4) {
  void * jresult ;
  ArRobot *arg1 = (ArRobot *) 0 ;
  char *arg2 = (char *) 0 ;
  char arg3 ;
  char arg4 ;
  ArModeRobotStatus *result = 0 ;
  
  arg1 = (ArRobot *)jarg1; 
  arg2 = (char *)jarg2; 
  arg3 = (char)jarg3; 
  arg4 = (char)jarg4; 
  result = (ArModeRobotStatus *)new ArModeRobotStatus(arg1,(char const *)arg2,arg3,arg4);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_ArModeRobotStatus_activate(void * jarg1) {
  ArModeRobotStatus *arg1 = (ArModeRobotStatus *) 0 ;
  
  arg1 = (ArModeRobotStatus *)jarg1; 
  (arg1)->activate();
}


SWIGEXPORT void SWIGSTDCALL CSharp_ArModeRobotStatus_deactivate(void * jarg1) {
  ArModeRobotStatus *arg1 = (ArModeRobotStatus *) 0 ;
  
  arg1 = (ArModeRobotStatus *)jarg1; 
  (arg1)->deactivate();
}


SWIGEXPORT void SWIGSTDCALL CSharp_ArModeRobotStatus_help(void * jarg1) {
  ArModeRobotStatus *arg1 = (ArModeRobotStatus *) 0 ;
  
  arg1 = (ArModeRobotStatus *)jarg1; 
  (arg1)->help();
}


SWIGEXPORT void SWIGSTDCALL CSharp_ArModeRobotStatus_userTask(void * jarg1) {
  ArModeRobotStatus *arg1 = (ArModeRobotStatus *) 0 ;
  
  arg1 = (ArModeRobotStatus *)jarg1; 
  (arg1)->userTask();
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_ArModeRobotStatus(void * jarg1) {
  ArModeRobotStatus *arg1 = (ArModeRobotStatus *) 0 ;
  
  arg1 = (ArModeRobotStatus *)jarg1; 
  delete arg1;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_ArModule(void * jarg1) {
  ArModule *arg1 = (ArModule *) 0 ;
  
  arg1 = (ArModule *)jarg1; 
  delete arg1;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_ArModule_init__SWIG_0(void * jarg1, void * jarg2, void * jarg3) {
  unsigned int jresult ;
  ArModule *arg1 = (ArModule *) 0 ;
  ArRobot *arg2 = (ArRobot *) 0 ;
  void *arg3 = (void *) 0 ;
  bool result;
  
  arg1 = (ArModule *)jarg1; 
  arg2 = (ArRobot *)jarg2; 
  arg3 = (void *)jarg3; 
  result = (bool)(arg1)->init(arg2,arg3);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_ArModule_init__SWIG_1(void * jarg1, void * jarg2) {
  unsigned int jresult ;
  ArModule *arg1 = (ArModule *) 0 ;
  ArRobot *arg2 = (ArRobot *) 0 ;
  bool result;
  
  arg1 = (ArModule *)jarg1; 
  arg2 = (ArRobot *)jarg2; 
  result = (bool)(arg1)->init(arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_ArModule_exit(void * jarg1) {
  unsigned int jresult ;
  ArModule *arg1 = (ArModule *) 0 ;
  bool result;
  
  arg1 = (ArModule *)jarg1; 
  result = (bool)(arg1)->exit();
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_ArModule_getRobot(void * jarg1) {
  void * jresult ;
  ArModule *arg1 = (ArModule *) 0 ;
  ArRobot *result = 0 ;
  
  arg1 = (ArModule *)jarg1; 
  result = (ArRobot *)(arg1)->getRobot();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_ArModule_setRobot(void * jarg1, void * jarg2) {
  ArModule *arg1 = (ArModule *) 0 ;
  ArRobot *arg2 = (ArRobot *) 0 ;
  
  arg1 = (ArModule *)jarg1; 
  arg2 = (ArRobot *)jarg2; 
  (arg1)->setRobot(arg2);
}


SWIGEXPORT int SWIGSTDCALL CSharp_ArModuleLoader_load__SWIG_0(char * jarg1, void * jarg2, void * jarg3, unsigned int jarg4) {
  int jresult ;
  char *arg1 = (char *) 0 ;
  ArRobot *arg2 = (ArRobot *) 0 ;
  void *arg3 = (void *) 0 ;
  bool arg4 ;
  ArModuleLoader::Status result;
  
  arg1 = (char *)jarg1; 
  arg2 = (ArRobot *)jarg2; 
  arg3 = (void *)jarg3; 
  arg4 = jarg4 ? true : false; 
  result = (ArModuleLoader::Status)ArModuleLoader::load((char const *)arg1,arg2,arg3,arg4);
  jresult = (int)result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_ArModuleLoader_load__SWIG_1(char * jarg1, void * jarg2, void * jarg3) {
  int jresult ;
  char *arg1 = (char *) 0 ;
  ArRobot *arg2 = (ArRobot *) 0 ;
  void *arg3 = (void *) 0 ;
  ArModuleLoader::Status result;
  
  arg1 = (char *)jarg1; 
  arg2 = (ArRobot *)jarg2; 
  arg3 = (void *)jarg3; 
  result = (ArModuleLoader::Status)ArModuleLoader::load((char const *)arg1,arg2,arg3);
  jresult = (int)result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_ArModuleLoader_load__SWIG_2(char * jarg1, void * jarg2) {
  int jresult ;
  char *arg1 = (char *) 0 ;
  ArRobot *arg2 = (ArRobot *) 0 ;
  ArModuleLoader::Status result;
  
  arg1 = (char *)jarg1; 
  arg2 = (ArRobot *)jarg2; 
  result = (ArModuleLoader::Status)ArModuleLoader::load((char const *)arg1,arg2);
  jresult = (int)result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_ArModuleLoader_reload__SWIG_0(char * jarg1, void * jarg2, void * jarg3, unsigned int jarg4) {
  int jresult ;
  char *arg1 = (char *) 0 ;
  ArRobot *arg2 = (ArRobot *) 0 ;
  void *arg3 = (void *) 0 ;
  bool arg4 ;
  ArModuleLoader::Status result;
  
  arg1 = (char *)jarg1; 
  arg2 = (ArRobot *)jarg2; 
  arg3 = (void *)jarg3; 
  arg4 = jarg4 ? true : false; 
  result = (ArModuleLoader::Status)ArModuleLoader::reload((char const *)arg1,arg2,arg3,arg4);
  jresult = (int)result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_ArModuleLoader_reload__SWIG_1(char * jarg1, void * jarg2, void * jarg3) {
  int jresult ;
  char *arg1 = (char *) 0 ;
  ArRobot *arg2 = (ArRobot *) 0 ;
  void *arg3 = (void *) 0 ;
  ArModuleLoader::Status result;
  
  arg1 = (char *)jarg1; 
  arg2 = (ArRobot *)jarg2; 
  arg3 = (void *)jarg3; 
  result = (ArModuleLoader::Status)ArModuleLoader::reload((char const *)arg1,arg2,arg3);
  jresult = (int)result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_ArModuleLoader_reload__SWIG_2(char * jarg1, void * jarg2) {
  int jresult ;
  char *arg1 = (char *) 0 ;
  ArRobot *arg2 = (ArRobot *) 0 ;
  ArModuleLoader::Status result;
  
  arg1 = (char *)jarg1; 
  arg2 = (ArRobot *)jarg2; 
  result = (ArModuleLoader::Status)ArModuleLoader::reload((char const *)arg1,arg2);
  jresult = (int)result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_ArModuleLoader_close__SWIG_0(char * jarg1, unsigned int jarg2) {
  int jresult ;
  char *arg1 = (char *) 0 ;
  bool arg2 ;
  ArModuleLoader::Status result;
  
  arg1 = (char *)jarg1; 
  arg2 = jarg2 ? true : false; 
  result = (ArModuleLoader::Status)ArModuleLoader::close((char const *)arg1,arg2);
  jresult = (int)result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_ArModuleLoader_close__SWIG_1(char * jarg1) {
  int jresult ;
  char *arg1 = (char *) 0 ;
  ArModuleLoader::Status result;
  
  arg1 = (char *)jarg1; 
  result = (ArModuleLoader::Status)ArModuleLoader::close((char const *)arg1);
  jresult = (int)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_ArModuleLoader_closeAll() {
  ArModuleLoader::closeAll();
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_ArModuleLoader() {
  void * jresult ;
  ArModuleLoader *result = 0 ;
  
  result = (ArModuleLoader *)new ArModuleLoader();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_ArModuleLoader(void * jarg1) {
  ArModuleLoader *arg1 = (ArModuleLoader *) 0 ;
  
  arg1 = (ArModuleLoader *)jarg1; 
  delete arg1;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_ArMutex__SWIG_0(unsigned int jarg1) {
  void * jresult ;
  bool arg1 ;
  ArMutex *result = 0 ;
  
  arg1 = jarg1 ? true : false; 
  result = (ArMutex *)new ArMutex(arg1);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_ArMutex__SWIG_1() {
  void * jresult ;
  ArMutex *result = 0 ;
  
  result = (ArMutex *)new ArMutex();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_ArMutex(void * jarg1) {
  ArMutex *arg1 = (ArMutex *) 0 ;
  
  arg1 = (ArMutex *)jarg1; 
  delete arg1;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_ArMutex__SWIG_2(void * jarg1) {
  void * jresult ;
  ArMutex *arg1 = 0 ;
  ArMutex *result = 0 ;
  
  arg1 = (ArMutex *)jarg1;
  if (!arg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "ArMutex const & type is null", 0);
    return 0;
  } 
  result = (ArMutex *)new ArMutex((ArMutex const &)*arg1);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_ArMutex_lockObj(void * jarg1) {
  int jresult ;
  ArMutex *arg1 = (ArMutex *) 0 ;
  int result;
  
  arg1 = (ArMutex *)jarg1; 
  result = (int)(arg1)->lock();
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_ArMutex_tryLock(void * jarg1) {
  int jresult ;
  ArMutex *arg1 = (ArMutex *) 0 ;
  int result;
  
  arg1 = (ArMutex *)jarg1; 
  result = (int)(arg1)->tryLock();
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_ArMutex_unlockObj(void * jarg1) {
  int jresult ;
  ArMutex *arg1 = (ArMutex *) 0 ;
  int result;
  
  arg1 = (ArMutex *)jarg1; 
  result = (int)(arg1)->unlock();
  jresult = result; 
  return jresult;
}


SWIGEXPORT char * SWIGSTDCALL CSharp_ArMutex_getError(void * jarg1, int jarg2) {
  char * jresult ;
  ArMutex *arg1 = (ArMutex *) 0 ;
  int arg2 ;
  char *result = 0 ;
  
  arg1 = (ArMutex *)jarg1; 
  arg2 = (int)jarg2; 
  result = (char *)((ArMutex const *)arg1)->getError(arg2);
  jresult = SWIG_csharp_string_callback((const char *)result); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_ArMutex_setLog(void * jarg1, unsigned int jarg2) {
  ArMutex *arg1 = (ArMutex *) 0 ;
  bool arg2 ;
  
  arg1 = (ArMutex *)jarg1; 
  arg2 = jarg2 ? true : false; 
  (arg1)->setLog(arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_ArMutex_setLogName(void * jarg1, char * jarg2) {
  ArMutex *arg1 = (ArMutex *) 0 ;
  char *arg2 = (char *) 0 ;
  
  arg1 = (ArMutex *)jarg1; 
  arg2 = (char *)jarg2; 
  (arg1)->setLogName((char const *)arg2);
}


SWIGEXPORT void * SWIGSTDCALL CSharp_ArMutex_getMutex(void * jarg1) {
  void * jresult ;
  ArMutex *arg1 = (ArMutex *) 0 ;
  ArMutex::MutexType *result = 0 ;
  
  arg1 = (ArMutex *)jarg1; 
  result = (ArMutex::MutexType *) &(arg1)->getMutex();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_ArMutex_setLockWarningTime(double jarg1) {
  double arg1 ;
  
  arg1 = (double)jarg1; 
  ArMutex::setLockWarningTime(arg1);
}


SWIGEXPORT double SWIGSTDCALL CSharp_ArMutex_getLockWarningTime() {
  double jresult ;
  double result;
  
  result = (double)ArMutex::getLockWarningTime();
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_ArMutex_setUnlockWarningTime(double jarg1) {
  double arg1 ;
  
  arg1 = (double)jarg1; 
  ArMutex::setUnlockWarningTime(arg1);
}


SWIGEXPORT double SWIGSTDCALL CSharp_ArMutex_getUnlockWarningTime() {
  double jresult ;
  double result;
  
  result = (double)ArMutex::getUnlockWarningTime();
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_ArScopedLock(void * jarg1) {
  void * jresult ;
  ArMutex *arg1 = 0 ;
  ArScopedLock *result = 0 ;
  
  arg1 = (ArMutex *)jarg1;
  if (!arg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "ArMutex & type is null", 0);
    return 0;
  } 
  result = (ArScopedLock *)new ArScopedLock(*arg1);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_ArScopedLock(void * jarg1) {
  ArScopedLock *arg1 = (ArScopedLock *) 0 ;
  
  arg1 = (ArScopedLock *)jarg1; 
  delete arg1;
}


SWIGEXPORT void SWIGSTDCALL CSharp_ArScopedLock_lockObj(void * jarg1) {
  ArScopedLock *arg1 = (ArScopedLock *) 0 ;
  
  arg1 = (ArScopedLock *)jarg1; 
  (arg1)->lock();
}


SWIGEXPORT void SWIGSTDCALL CSharp_ArScopedLock_unlockObj(void * jarg1) {
  ArScopedLock *arg1 = (ArScopedLock *) 0 ;
  
  arg1 = (ArScopedLock *)jarg1; 
  (arg1)->unlock();
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_ArNMEAParser__SWIG_0(char * jarg1) {
  void * jresult ;
  char *arg1 = (char *) 0 ;
  ArNMEAParser *result = 0 ;
  
  arg1 = (char *)jarg1; 
  result = (ArNMEAParser *)new ArNMEAParser((char const *)arg1);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_ArNMEAParser__SWIG_1() {
  void * jresult ;
  ArNMEAParser *result = 0 ;
  
  result = (ArNMEAParser *)new ArNMEAParser();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_ArNMEAParser_ParseFinished_get() {
  int jresult ;
  int result;
  
  result = (int)ArNMEAParser::ParseFinished;
  jresult = (int)result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_ArNMEAParser_ParseError_get() {
  int jresult ;
  int result;
  
  result = (int)ArNMEAParser::ParseError;
  jresult = (int)result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_ArNMEAParser_ParseData_get() {
  int jresult ;
  int result;
  
  result = (int)ArNMEAParser::ParseData;
  jresult = (int)result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_ArNMEAParser_ParseUpdated_get() {
  int jresult ;
  int result;
  
  result = (int)ArNMEAParser::ParseUpdated;
  jresult = (int)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_ArNMEAParser_ParseFlags_set(void * jarg1, int jarg2) {
  ArNMEAParser *arg1 = (ArNMEAParser *) 0 ;
  int arg2 ;
  
  arg1 = (ArNMEAParser *)jarg1; 
  arg2 = (int)jarg2; 
  if (arg1 && sizeof(int) == sizeof((arg1)->ParseFlags)) *(int*)(void*)&((arg1)->ParseFlags) = arg2;
}


SWIGEXPORT int SWIGSTDCALL CSharp_ArNMEAParser_ParseFlags_get(void * jarg1) {
  int jresult ;
  ArNMEAParser *arg1 = (ArNMEAParser *) 0 ;
  int result;
  
  arg1 = (ArNMEAParser *)jarg1; 
  result = (int) ((arg1)->ParseFlags);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_ArNMEAParser_setIgnoreChecksum(void * jarg1, unsigned int jarg2) {
  ArNMEAParser *arg1 = (ArNMEAParser *) 0 ;
  bool arg2 ;
  
  arg1 = (ArNMEAParser *)jarg1; 
  arg2 = jarg2 ? true : false; 
  (arg1)->setIgnoreChecksum(arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_ArNMEAParser_Message_message_set(void * jarg1, void * jarg2) {
  ArNMEAParser::Message *arg1 = (ArNMEAParser::Message *) 0 ;
  ArNMEAParser::MessageVector *arg2 = (ArNMEAParser::MessageVector *) 0 ;
  
  arg1 = (ArNMEAParser::Message *)jarg1; 
  arg2 = (ArNMEAParser::MessageVector *)jarg2; 
  if (arg1) (arg1)->message = arg2;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_ArNMEAParser_Message_message_get(void * jarg1) {
  void * jresult ;
  ArNMEAParser::Message *arg1 = (ArNMEAParser::Message *) 0 ;
  ArNMEAParser::MessageVector *result = 0 ;
  
  arg1 = (ArNMEAParser::Message *)jarg1; 
  result = (ArNMEAParser::MessageVector *) ((arg1)->message);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_ArNMEAParser_Message_timeParseStarted_set(void * jarg1, void * jarg2) {
  ArNMEAParser::Message *arg1 = (ArNMEAParser::Message *) 0 ;
  ArTime *arg2 = (ArTime *) 0 ;
  
  arg1 = (ArNMEAParser::Message *)jarg1; 
  arg2 = (ArTime *)jarg2; 
  if (arg1) (arg1)->timeParseStarted = *arg2;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_ArNMEAParser_Message_timeParseStarted_get(void * jarg1) {
  void * jresult ;
  ArNMEAParser::Message *arg1 = (ArNMEAParser::Message *) 0 ;
  ArTime *result = 0 ;
  
  arg1 = (ArNMEAParser::Message *)jarg1; 
  result = (ArTime *)& ((arg1)->timeParseStarted);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_ArNMEAParser_Message_id_set(void * jarg1, char * jarg2) {
  ArNMEAParser::Message *arg1 = (ArNMEAParser::Message *) 0 ;
  std::string *arg2 = 0 ;
  
  arg1 = (ArNMEAParser::Message *)jarg1; 
  if (!jarg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return ;
  }
  std::string arg2_str(jarg2);
  arg2 = &arg2_str; 
  if (arg1) (arg1)->id = *arg2;
}


SWIGEXPORT char * SWIGSTDCALL CSharp_ArNMEAParser_Message_id_get(void * jarg1) {
  char * jresult ;
  ArNMEAParser::Message *arg1 = (ArNMEAParser::Message *) 0 ;
  std::string *result = 0 ;
  
  arg1 = (ArNMEAParser::Message *)jarg1; 
  result = (std::string *) & ((arg1)->id);
  jresult = SWIG_csharp_string_callback(result->c_str()); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_ArNMEAParser_Message_prefix_set(void * jarg1, char * jarg2) {
  ArNMEAParser::Message *arg1 = (ArNMEAParser::Message *) 0 ;
  std::string *arg2 = 0 ;
  
  arg1 = (ArNMEAParser::Message *)jarg1; 
  if (!jarg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return ;
  }
  std::string arg2_str(jarg2);
  arg2 = &arg2_str; 
  if (arg1) (arg1)->prefix = *arg2;
}


SWIGEXPORT char * SWIGSTDCALL CSharp_ArNMEAParser_Message_prefix_get(void * jarg1) {
  char * jresult ;
  ArNMEAParser::Message *arg1 = (ArNMEAParser::Message *) 0 ;
  std::string *result = 0 ;
  
  arg1 = (ArNMEAParser::Message *)jarg1; 
  result = (std::string *) & ((arg1)->prefix);
  jresult = SWIG_csharp_string_callback(result->c_str()); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_ArNMEAParser_Message() {
  void * jresult ;
  ArNMEAParser::Message *result = 0 ;
  
  result = (ArNMEAParser::Message *)new ArNMEAParser::Message();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_ArNMEAParser_Message(void * jarg1) {
  ArNMEAParser::Message *arg1 = (ArNMEAParser::Message *) 0 ;
  
  arg1 = (ArNMEAParser::Message *)jarg1; 
  delete arg1;
}


SWIGEXPORT void SWIGSTDCALL CSharp_ArNMEAParser_addHandler(void * jarg1, char * jarg2, void * jarg3) {
  ArNMEAParser *arg1 = (ArNMEAParser *) 0 ;
  char *arg2 = (char *) 0 ;
  ArNMEAParser::Handler *arg3 = (ArNMEAParser::Handler *) 0 ;
  
  arg1 = (ArNMEAParser *)jarg1; 
  arg2 = (char *)jarg2; 
  arg3 = (ArNMEAParser::Handler *)jarg3; 
  (arg1)->addHandler((char const *)arg2,arg3);
}


SWIGEXPORT void SWIGSTDCALL CSharp_ArNMEAParser_removeHandler(void * jarg1, char * jarg2) {
  ArNMEAParser *arg1 = (ArNMEAParser *) 0 ;
  char *arg2 = (char *) 0 ;
  
  arg1 = (ArNMEAParser *)jarg1; 
  arg2 = (char *)jarg2; 
  (arg1)->removeHandler((char const *)arg2);
}


SWIGEXPORT int SWIGSTDCALL CSharp_ArNMEAParser_parse__SWIG_0(void * jarg1, void * jarg2) {
  int jresult ;
  ArNMEAParser *arg1 = (ArNMEAParser *) 0 ;
  ArDeviceConnection *arg2 = (ArDeviceConnection *) 0 ;
  int result;
  
  arg1 = (ArNMEAParser *)jarg1; 
  arg2 = (ArDeviceConnection *)jarg2; 
  result = (int)(arg1)->parse(arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_ArNMEAParser_parse__SWIG_1(void * jarg1, char * jarg2, int jarg3) {
  int jresult ;
  ArNMEAParser *arg1 = (ArNMEAParser *) 0 ;
  char *arg2 = (char *) 0 ;
  int arg3 ;
  int result;
  
  arg1 = (ArNMEAParser *)jarg1; 
  arg2 = (char *)jarg2; 
  arg3 = (int)jarg3; 
  result = (int)(arg1)->parse((char const *)arg2,arg3);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_ArNMEAParser_getHandlersRef(void * jarg1) {
  void * jresult ;
  ArNMEAParser *arg1 = (ArNMEAParser *) 0 ;
  ArNMEAParser::HandlerMap *result = 0 ;
  
  arg1 = (ArNMEAParser *)jarg1; 
  result = (ArNMEAParser::HandlerMap *) &((ArNMEAParser const *)arg1)->getHandlersRef();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_ArNMEAParser(void * jarg1) {
  ArNMEAParser *arg1 = (ArNMEAParser *) 0 ;
  
  arg1 = (ArNMEAParser *)jarg1; 
  delete arg1;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_ArNetServer__SWIG_0(unsigned int jarg1, unsigned int jarg2, char * jarg3, void * jarg4) {
  void * jresult ;
  bool arg1 ;
  bool arg2 ;
  char *arg3 = (char *) 0 ;
  ArNetServer *arg4 = (ArNetServer *) 0 ;
  ArNetServer *result = 0 ;
  
  arg1 = jarg1 ? true : false; 
  arg2 = jarg2 ? true : false; 
  arg3 = (char *)jarg3; 
  arg4 = (ArNetServer *)jarg4; 
  result = (ArNetServer *)new ArNetServer(arg1,arg2,(char const *)arg3,arg4);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_ArNetServer__SWIG_1(unsigned int jarg1, unsigned int jarg2, char * jarg3) {
  void * jresult ;
  bool arg1 ;
  bool arg2 ;
  char *arg3 = (char *) 0 ;
  ArNetServer *result = 0 ;
  
  arg1 = jarg1 ? true : false; 
  arg2 = jarg2 ? true : false; 
  arg3 = (char *)jarg3; 
  result = (ArNetServer *)new ArNetServer(arg1,arg2,(char const *)arg3);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_ArNetServer__SWIG_2(unsigned int jarg1, unsigned int jarg2) {
  void * jresult ;
  bool arg1 ;
  bool arg2 ;
  ArNetServer *result = 0 ;
  
  arg1 = jarg1 ? true : false; 
  arg2 = jarg2 ? true : false; 
  result = (ArNetServer *)new ArNetServer(arg1,arg2);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_ArNetServer__SWIG_3(unsigned int jarg1) {
  void * jresult ;
  bool arg1 ;
  ArNetServer *result = 0 ;
  
  arg1 = jarg1 ? true : false; 
  result = (ArNetServer *)new ArNetServer(arg1);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_ArNetServer__SWIG_4() {
  void * jresult ;
  ArNetServer *result = 0 ;
  
  result = (ArNetServer *)new ArNetServer();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_ArNetServer(void * jarg1) {
  ArNetServer *arg1 = (ArNetServer *) 0 ;
  
  arg1 = (ArNetServer *)jarg1; 
  delete arg1;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_ArNetServer_open__SWIG_0(void * jarg1, void * jarg2, unsigned int jarg3, char * jarg4, unsigned int jarg5, char * jarg6) {
  unsigned int jresult ;
  ArNetServer *arg1 = (ArNetServer *) 0 ;
  ArRobot *arg2 = (ArRobot *) 0 ;
  unsigned int arg3 ;
  char *arg4 = (char *) 0 ;
  bool arg5 ;
  char *arg6 = (char *) 0 ;
  bool result;
  
  arg1 = (ArNetServer *)jarg1; 
  arg2 = (ArRobot *)jarg2; 
  arg3 = (unsigned int)jarg3; 
  arg4 = (char *)jarg4; 
  arg5 = jarg5 ? true : false; 
  arg6 = (char *)jarg6; 
  result = (bool)(arg1)->open(arg2,arg3,(char const *)arg4,arg5,(char const *)arg6);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_ArNetServer_open__SWIG_1(void * jarg1, void * jarg2, unsigned int jarg3, char * jarg4, unsigned int jarg5) {
  unsigned int jresult ;
  ArNetServer *arg1 = (ArNetServer *) 0 ;
  ArRobot *arg2 = (ArRobot *) 0 ;
  unsigned int arg3 ;
  char *arg4 = (char *) 0 ;
  bool arg5 ;
  bool result;
  
  arg1 = (ArNetServer *)jarg1; 
  arg2 = (ArRobot *)jarg2; 
  arg3 = (unsigned int)jarg3; 
  arg4 = (char *)jarg4; 
  arg5 = jarg5 ? true : false; 
  result = (bool)(arg1)->open(arg2,arg3,(char const *)arg4,arg5);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_ArNetServer_open__SWIG_2(void * jarg1, void * jarg2, unsigned int jarg3, char * jarg4) {
  unsigned int jresult ;
  ArNetServer *arg1 = (ArNetServer *) 0 ;
  ArRobot *arg2 = (ArRobot *) 0 ;
  unsigned int arg3 ;
  char *arg4 = (char *) 0 ;
  bool result;
  
  arg1 = (ArNetServer *)jarg1; 
  arg2 = (ArRobot *)jarg2; 
  arg3 = (unsigned int)jarg3; 
  arg4 = (char *)jarg4; 
  result = (bool)(arg1)->open(arg2,arg3,(char const *)arg4);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_ArNetServer_close(void * jarg1) {
  ArNetServer *arg1 = (ArNetServer *) 0 ;
  
  arg1 = (ArNetServer *)jarg1; 
  (arg1)->close();
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_ArNetServer_addCommand(void * jarg1, char * jarg2, void * jarg3, char * jarg4) {
  unsigned int jresult ;
  ArNetServer *arg1 = (ArNetServer *) 0 ;
  char *arg2 = (char *) 0 ;
  ArFunctor3< char **,int,ArSocket * > *arg3 = (ArFunctor3< char **,int,ArSocket * > *) 0 ;
  char *arg4 = (char *) 0 ;
  bool result;
  
  arg1 = (ArNetServer *)jarg1; 
  arg2 = (char *)jarg2; 
  arg3 = (ArFunctor3< char **,int,ArSocket * > *)jarg3; 
  arg4 = (char *)jarg4; 
  result = (bool)(arg1)->addCommand((char const *)arg2,arg3,(char const *)arg4);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_ArNetServer_remCommand(void * jarg1, char * jarg2) {
  unsigned int jresult ;
  ArNetServer *arg1 = (ArNetServer *) 0 ;
  char *arg2 = (char *) 0 ;
  bool result;
  
  arg1 = (ArNetServer *)jarg1; 
  arg2 = (char *)jarg2; 
  result = (bool)(arg1)->remCommand((char const *)arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT char * SWIGSTDCALL CSharp_ArNetServer_getName(void * jarg1) {
  char * jresult ;
  ArNetServer *arg1 = (ArNetServer *) 0 ;
  char *result = 0 ;
  
  arg1 = (ArNetServer *)jarg1; 
  result = (char *)(arg1)->getName();
  jresult = SWIG_csharp_string_callback((const char *)result); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_ArNetServer_sendToAllClientsPlain(void * jarg1, char * jarg2) {
  ArNetServer *arg1 = (ArNetServer *) 0 ;
  char *arg2 = (char *) 0 ;
  
  arg1 = (ArNetServer *)jarg1; 
  arg2 = (char *)jarg2; 
  (arg1)->sendToAllClientsPlain((char const *)arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_ArNetServer_sendToAllClientsNextCyclePlain(void * jarg1, char * jarg2) {
  ArNetServer *arg1 = (ArNetServer *) 0 ;
  char *arg2 = (char *) 0 ;
  
  arg1 = (ArNetServer *)jarg1; 
  arg2 = (char *)jarg2; 
  (arg1)->sendToAllClientsNextCyclePlain((char const *)arg2);
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_ArNetServer_sendToAllClientsNextCyclePlainBool(void * jarg1, char * jarg2) {
  unsigned int jresult ;
  ArNetServer *arg1 = (ArNetServer *) 0 ;
  char *arg2 = (char *) 0 ;
  bool result;
  
  arg1 = (ArNetServer *)jarg1; 
  arg2 = (char *)jarg2; 
  result = (bool)(arg1)->sendToAllClientsNextCyclePlainBool((char const *)arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_ArNetServer_sendToClientPlain(void * jarg1, void * jarg2, char * jarg3, char * jarg4) {
  ArNetServer *arg1 = (ArNetServer *) 0 ;
  ArSocket *arg2 = (ArSocket *) 0 ;
  char *arg3 = (char *) 0 ;
  char *arg4 = (char *) 0 ;
  
  arg1 = (ArNetServer *)jarg1; 
  arg2 = (ArSocket *)jarg2; 
  arg3 = (char *)jarg3; 
  arg4 = (char *)jarg4; 
  (arg1)->sendToClientPlain(arg2,(char const *)arg3,(char const *)arg4);
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_ArNetServer_isOpen(void * jarg1) {
  unsigned int jresult ;
  ArNetServer *arg1 = (ArNetServer *) 0 ;
  bool result;
  
  arg1 = (ArNetServer *)jarg1; 
  result = (bool)(arg1)->isOpen();
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_ArNetServer_setLoggingDataSent(void * jarg1, unsigned int jarg2) {
  ArNetServer *arg1 = (ArNetServer *) 0 ;
  bool arg2 ;
  
  arg1 = (ArNetServer *)jarg1; 
  arg2 = jarg2 ? true : false; 
  (arg1)->setLoggingDataSent(arg2);
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_ArNetServer_getLoggingDataSent(void * jarg1) {
  unsigned int jresult ;
  ArNetServer *arg1 = (ArNetServer *) 0 ;
  bool result;
  
  arg1 = (ArNetServer *)jarg1; 
  result = (bool)(arg1)->getLoggingDataSent();
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_ArNetServer_setLoggingDataReceived(void * jarg1, unsigned int jarg2) {
  ArNetServer *arg1 = (ArNetServer *) 0 ;
  bool arg2 ;
  
  arg1 = (ArNetServer *)jarg1; 
  arg2 = jarg2 ? true : false; 
  (arg1)->setLoggingDataReceived(arg2);
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_ArNetServer_getLoggingDataReceived(void * jarg1) {
  unsigned int jresult ;
  ArNetServer *arg1 = (ArNetServer *) 0 ;
  bool result;
  
  arg1 = (ArNetServer *)jarg1; 
  result = (bool)(arg1)->getLoggingDataReceived();
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_ArNetServer_setUseWrongEndChars(void * jarg1, unsigned int jarg2) {
  ArNetServer *arg1 = (ArNetServer *) 0 ;
  bool arg2 ;
  
  arg1 = (ArNetServer *)jarg1; 
  arg2 = jarg2 ? true : false; 
  (arg1)->setUseWrongEndChars(arg2);
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_ArNetServer_getUseWrongEndChars(void * jarg1) {
  unsigned int jresult ;
  ArNetServer *arg1 = (ArNetServer *) 0 ;
  bool result;
  
  arg1 = (ArNetServer *)jarg1; 
  result = (bool)(arg1)->getUseWrongEndChars();
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_ArNetServer_runOnce(void * jarg1) {
  ArNetServer *arg1 = (ArNetServer *) 0 ;
  
  arg1 = (ArNetServer *)jarg1; 
  (arg1)->runOnce();
}


SWIGEXPORT void SWIGSTDCALL CSharp_ArNetServer_internalGreeting(void * jarg1, void * jarg2) {
  ArNetServer *arg1 = (ArNetServer *) 0 ;
  ArSocket *arg2 = (ArSocket *) 0 ;
  
  arg1 = (ArNetServer *)jarg1; 
  arg2 = (ArSocket *)jarg2; 
  (arg1)->internalGreeting(arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_ArNetServer_internalHelp__SWIG_0(void * jarg1, void * jarg2) {
  ArNetServer *arg1 = (ArNetServer *) 0 ;
  ArSocket *arg2 = (ArSocket *) 0 ;
  
  arg1 = (ArNetServer *)jarg1; 
  arg2 = (ArSocket *)jarg2; 
  (arg1)->internalHelp(arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_ArNetServer_internalHelp__SWIG_1(void * jarg1, void * jarg2, int jarg3, void * jarg4) {
  ArNetServer *arg1 = (ArNetServer *) 0 ;
  char **arg2 = (char **) 0 ;
  int arg3 ;
  ArSocket *arg4 = (ArSocket *) 0 ;
  
  arg1 = (ArNetServer *)jarg1; 
  arg2 = (char **)jarg2; 
  arg3 = (int)jarg3; 
  arg4 = (ArSocket *)jarg4; 
  (arg1)->internalHelp(arg2,arg3,arg4);
}


SWIGEXPORT void SWIGSTDCALL CSharp_ArNetServer_internalEcho(void * jarg1, void * jarg2, int jarg3, void * jarg4) {
  ArNetServer *arg1 = (ArNetServer *) 0 ;
  char **arg2 = (char **) 0 ;
  int arg3 ;
  ArSocket *arg4 = (ArSocket *) 0 ;
  
  arg1 = (ArNetServer *)jarg1; 
  arg2 = (char **)jarg2; 
  arg3 = (int)jarg3; 
  arg4 = (ArSocket *)jarg4; 
  (arg1)->internalEcho(arg2,arg3,arg4);
}


SWIGEXPORT void SWIGSTDCALL CSharp_ArNetServer_internalQuit(void * jarg1, void * jarg2, int jarg3, void * jarg4) {
  ArNetServer *arg1 = (ArNetServer *) 0 ;
  char **arg2 = (char **) 0 ;
  int arg3 ;
  ArSocket *arg4 = (ArSocket *) 0 ;
  
  arg1 = (ArNetServer *)jarg1; 
  arg2 = (char **)jarg2; 
  arg3 = (int)jarg3; 
  arg4 = (ArSocket *)jarg4; 
  (arg1)->internalQuit(arg2,arg3,arg4);
}


SWIGEXPORT void SWIGSTDCALL CSharp_ArNetServer_internalShutdownServer(void * jarg1, void * jarg2, int jarg3, void * jarg4) {
  ArNetServer *arg1 = (ArNetServer *) 0 ;
  char **arg2 = (char **) 0 ;
  int arg3 ;
  ArSocket *arg4 = (ArSocket *) 0 ;
  
  arg1 = (ArNetServer *)jarg1; 
  arg2 = (char **)jarg2; 
  arg3 = (int)jarg3; 
  arg4 = (ArSocket *)jarg4; 
  (arg1)->internalShutdownServer(arg2,arg3,arg4);
}


SWIGEXPORT void SWIGSTDCALL CSharp_ArNetServer_parseCommandOnSocket__SWIG_0(void * jarg1, void * jarg2, void * jarg3, unsigned int jarg4) {
  ArNetServer *arg1 = (ArNetServer *) 0 ;
  ArArgumentBuilder *arg2 = (ArArgumentBuilder *) 0 ;
  ArSocket *arg3 = (ArSocket *) 0 ;
  bool arg4 ;
  
  arg1 = (ArNetServer *)jarg1; 
  arg2 = (ArArgumentBuilder *)jarg2; 
  arg3 = (ArSocket *)jarg3; 
  arg4 = jarg4 ? true : false; 
  (arg1)->parseCommandOnSocket(arg2,arg3,arg4);
}


SWIGEXPORT void SWIGSTDCALL CSharp_ArNetServer_parseCommandOnSocket__SWIG_1(void * jarg1, void * jarg2, void * jarg3) {
  ArNetServer *arg1 = (ArNetServer *) 0 ;
  ArArgumentBuilder *arg2 = (ArArgumentBuilder *) 0 ;
  ArSocket *arg3 = (ArSocket *) 0 ;
  
  arg1 = (ArNetServer *)jarg1; 
  arg2 = (ArArgumentBuilder *)jarg2; 
  arg3 = (ArSocket *)jarg3; 
  (arg1)->parseCommandOnSocket(arg2,arg3);
}


SWIGEXPORT void SWIGSTDCALL CSharp_ArNetServer_internalAddSocketToList(void * jarg1, void * jarg2) {
  ArNetServer *arg1 = (ArNetServer *) 0 ;
  ArSocket *arg2 = (ArSocket *) 0 ;
  
  arg1 = (ArNetServer *)jarg1; 
  arg2 = (ArSocket *)jarg2; 
  (arg1)->internalAddSocketToList(arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_ArNetServer_internalAddSocketToDeleteList(void * jarg1, void * jarg2) {
  ArNetServer *arg1 = (ArNetServer *) 0 ;
  ArSocket *arg2 = (ArSocket *) 0 ;
  
  arg1 = (ArNetServer *)jarg1; 
  arg2 = (ArSocket *)jarg2; 
  (arg1)->internalAddSocketToDeleteList(arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_ArNetServer_squelchNormal(void * jarg1) {
  ArNetServer *arg1 = (ArNetServer *) 0 ;
  
  arg1 = (ArNetServer *)jarg1; 
  (arg1)->squelchNormal();
}


SWIGEXPORT void SWIGSTDCALL CSharp_ArNetServer_setExtraString(void * jarg1, char * jarg2) {
  ArNetServer *arg1 = (ArNetServer *) 0 ;
  char *arg2 = (char *) 0 ;
  
  arg1 = (ArNetServer *)jarg1; 
  arg2 = (char *)jarg2; 
  (arg1)->setExtraString((char const *)arg2);
}


SWIGEXPORT char * SWIGSTDCALL CSharp_ArNetServer_getExtraString(void * jarg1) {
  char * jresult ;
  ArNetServer *arg1 = (ArNetServer *) 0 ;
  char *result = 0 ;
  
  arg1 = (ArNetServer *)jarg1; 
  result = (char *)(arg1)->getExtraString();
  jresult = SWIG_csharp_string_callback((const char *)result); 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_ArNetServer_lockObj(void * jarg1) {
  int jresult ;
  ArNetServer *arg1 = (ArNetServer *) 0 ;
  int result;
  
  arg1 = (ArNetServer *)jarg1; 
  result = (int)(arg1)->lock();
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_ArNetServer_tryLock(void * jarg1) {
  int jresult ;
  ArNetServer *arg1 = (ArNetServer *) 0 ;
  int result;
  
  arg1 = (ArNetServer *)jarg1; 
  result = (int)(arg1)->tryLock();
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_ArNetServer_unlockObj(void * jarg1) {
  int jresult ;
  ArNetServer *arg1 = (ArNetServer *) 0 ;
  int result;
  
  arg1 = (ArNetServer *)jarg1; 
  result = (int)(arg1)->unlock();
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_ArNovatelGPS() {
  void * jresult ;
  ArNovatelGPS *result = 0 ;
  
  result = (ArNovatelGPS *)new ArNovatelGPS();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_ArNovatelGPS(void * jarg1) {
  ArNovatelGPS *arg1 = (ArNovatelGPS *) 0 ;
  
  arg1 = (ArNovatelGPS *)jarg1; 
  delete arg1;
}


SWIGEXPORT void SWIGSTDCALL CSharp_ArNovatelSPAN_GPSLatitude_set(void * jarg1, double jarg2) {
  ArNovatelSPAN *arg1 = (ArNovatelSPAN *) 0 ;
  double arg2 ;
  
  arg1 = (ArNovatelSPAN *)jarg1; 
  arg2 = (double)jarg2; 
  if (arg1) (arg1)->GPSLatitude = arg2;
}


SWIGEXPORT double SWIGSTDCALL CSharp_ArNovatelSPAN_GPSLatitude_get(void * jarg1) {
  double jresult ;
  ArNovatelSPAN *arg1 = (ArNovatelSPAN *) 0 ;
  double result;
  
  arg1 = (ArNovatelSPAN *)jarg1; 
  result = (double) ((arg1)->GPSLatitude);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_ArNovatelSPAN_GPSLongitude_set(void * jarg1, double jarg2) {
  ArNovatelSPAN *arg1 = (ArNovatelSPAN *) 0 ;
  double arg2 ;
  
  arg1 = (ArNovatelSPAN *)jarg1; 
  arg2 = (double)jarg2; 
  if (arg1) (arg1)->GPSLongitude = arg2;
}


SWIGEXPORT double SWIGSTDCALL CSharp_ArNovatelSPAN_GPSLongitude_get(void * jarg1) {
  double jresult ;
  ArNovatelSPAN *arg1 = (ArNovatelSPAN *) 0 ;
  double result;
  
  arg1 = (ArNovatelSPAN *)jarg1; 
  result = (double) ((arg1)->GPSLongitude);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_ArNovatelSPAN_haveGPSPosition_set(void * jarg1, unsigned int jarg2) {
  ArNovatelSPAN *arg1 = (ArNovatelSPAN *) 0 ;
  bool arg2 ;
  
  arg1 = (ArNovatelSPAN *)jarg1; 
  arg2 = jarg2 ? true : false; 
  if (arg1) (arg1)->haveGPSPosition = arg2;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_ArNovatelSPAN_haveGPSPosition_get(void * jarg1) {
  unsigned int jresult ;
  ArNovatelSPAN *arg1 = (ArNovatelSPAN *) 0 ;
  bool result;
  
  arg1 = (ArNovatelSPAN *)jarg1; 
  result = (bool) ((arg1)->haveGPSPosition);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_ArNovatelSPAN_GPSValidFlag_set(void * jarg1, unsigned int jarg2) {
  ArNovatelSPAN *arg1 = (ArNovatelSPAN *) 0 ;
  bool arg2 ;
  
  arg1 = (ArNovatelSPAN *)jarg1; 
  arg2 = jarg2 ? true : false; 
  if (arg1) (arg1)->GPSValidFlag = arg2;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_ArNovatelSPAN_GPSValidFlag_get(void * jarg1) {
  unsigned int jresult ;
  ArNovatelSPAN *arg1 = (ArNovatelSPAN *) 0 ;
  bool result;
  
  arg1 = (ArNovatelSPAN *)jarg1; 
  result = (bool) ((arg1)->GPSValidFlag);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_ArNovatelSPAN_timeGotGPSPosition_set(void * jarg1, void * jarg2) {
  ArNovatelSPAN *arg1 = (ArNovatelSPAN *) 0 ;
  ArTime *arg2 = (ArTime *) 0 ;
  
  arg1 = (ArNovatelSPAN *)jarg1; 
  arg2 = (ArTime *)jarg2; 
  if (arg1) (arg1)->timeGotGPSPosition = *arg2;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_ArNovatelSPAN_timeGotGPSPosition_get(void * jarg1) {
  void * jresult ;
  ArNovatelSPAN *arg1 = (ArNovatelSPAN *) 0 ;
  ArTime *result = 0 ;
  
  arg1 = (ArNovatelSPAN *)jarg1; 
  result = (ArTime *)& ((arg1)->timeGotGPSPosition);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_ArNovatelSPAN_GPSTimestamp_set(void * jarg1, void * jarg2) {
  ArNovatelSPAN *arg1 = (ArNovatelSPAN *) 0 ;
  ArTime *arg2 = (ArTime *) 0 ;
  
  arg1 = (ArNovatelSPAN *)jarg1; 
  arg2 = (ArTime *)jarg2; 
  if (arg1) (arg1)->GPSTimestamp = *arg2;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_ArNovatelSPAN_GPSTimestamp_get(void * jarg1) {
  void * jresult ;
  ArNovatelSPAN *arg1 = (ArNovatelSPAN *) 0 ;
  ArTime *result = 0 ;
  
  arg1 = (ArNovatelSPAN *)jarg1; 
  result = (ArTime *)& ((arg1)->GPSTimestamp);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_ArNovatelSPAN() {
  void * jresult ;
  ArNovatelSPAN *result = 0 ;
  
  result = (ArNovatelSPAN *)new ArNovatelSPAN();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_ArNovatelSPAN(void * jarg1) {
  ArNovatelSPAN *arg1 = (ArNovatelSPAN *) 0 ;
  
  arg1 = (ArNovatelSPAN *)jarg1; 
  delete arg1;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_P2ArmJoint() {
  void * jresult ;
  P2ArmJoint *result = 0 ;
  
  result = (P2ArmJoint *)new P2ArmJoint();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_P2ArmJoint(void * jarg1) {
  P2ArmJoint *arg1 = (P2ArmJoint *) 0 ;
  
  arg1 = (P2ArmJoint *)jarg1; 
  delete arg1;
}


SWIGEXPORT void SWIGSTDCALL CSharp_P2ArmJoint_myPos_set(void * jarg1, unsigned char jarg2) {
  P2ArmJoint *arg1 = (P2ArmJoint *) 0 ;
  ArTypes::UByte arg2 ;
  
  arg1 = (P2ArmJoint *)jarg1; 
  arg2 = (ArTypes::UByte)jarg2; 
  if (arg1) (arg1)->myPos = arg2;
}


SWIGEXPORT unsigned char SWIGSTDCALL CSharp_P2ArmJoint_myPos_get(void * jarg1) {
  unsigned char jresult ;
  P2ArmJoint *arg1 = (P2ArmJoint *) 0 ;
  ArTypes::UByte result;
  
  arg1 = (P2ArmJoint *)jarg1; 
  result = (ArTypes::UByte) ((arg1)->myPos);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_P2ArmJoint_myVel_set(void * jarg1, unsigned char jarg2) {
  P2ArmJoint *arg1 = (P2ArmJoint *) 0 ;
  ArTypes::UByte arg2 ;
  
  arg1 = (P2ArmJoint *)jarg1; 
  arg2 = (ArTypes::UByte)jarg2; 
  if (arg1) (arg1)->myVel = arg2;
}


SWIGEXPORT unsigned char SWIGSTDCALL CSharp_P2ArmJoint_myVel_get(void * jarg1) {
  unsigned char jresult ;
  P2ArmJoint *arg1 = (P2ArmJoint *) 0 ;
  ArTypes::UByte result;
  
  arg1 = (P2ArmJoint *)jarg1; 
  result = (ArTypes::UByte) ((arg1)->myVel);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_P2ArmJoint_myHome_set(void * jarg1, unsigned char jarg2) {
  P2ArmJoint *arg1 = (P2ArmJoint *) 0 ;
  ArTypes::UByte arg2 ;
  
  arg1 = (P2ArmJoint *)jarg1; 
  arg2 = (ArTypes::UByte)jarg2; 
  if (arg1) (arg1)->myHome = arg2;
}


SWIGEXPORT unsigned char SWIGSTDCALL CSharp_P2ArmJoint_myHome_get(void * jarg1) {
  unsigned char jresult ;
  P2ArmJoint *arg1 = (P2ArmJoint *) 0 ;
  ArTypes::UByte result;
  
  arg1 = (P2ArmJoint *)jarg1; 
  result = (ArTypes::UByte) ((arg1)->myHome);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_P2ArmJoint_myMin_set(void * jarg1, unsigned char jarg2) {
  P2ArmJoint *arg1 = (P2ArmJoint *) 0 ;
  ArTypes::UByte arg2 ;
  
  arg1 = (P2ArmJoint *)jarg1; 
  arg2 = (ArTypes::UByte)jarg2; 
  if (arg1) (arg1)->myMin = arg2;
}


SWIGEXPORT unsigned char SWIGSTDCALL CSharp_P2ArmJoint_myMin_get(void * jarg1) {
  unsigned char jresult ;
  P2ArmJoint *arg1 = (P2ArmJoint *) 0 ;
  ArTypes::UByte result;
  
  arg1 = (P2ArmJoint *)jarg1; 
  result = (ArTypes::UByte) ((arg1)->myMin);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_P2ArmJoint_myCenter_set(void * jarg1, unsigned char jarg2) {
  P2ArmJoint *arg1 = (P2ArmJoint *) 0 ;
  ArTypes::UByte arg2 ;
  
  arg1 = (P2ArmJoint *)jarg1; 
  arg2 = (ArTypes::UByte)jarg2; 
  if (arg1) (arg1)->myCenter = arg2;
}


SWIGEXPORT unsigned char SWIGSTDCALL CSharp_P2ArmJoint_myCenter_get(void * jarg1) {
  unsigned char jresult ;
  P2ArmJoint *arg1 = (P2ArmJoint *) 0 ;
  ArTypes::UByte result;
  
  arg1 = (P2ArmJoint *)jarg1; 
  result = (ArTypes::UByte) ((arg1)->myCenter);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_P2ArmJoint_myMax_set(void * jarg1, unsigned char jarg2) {
  P2ArmJoint *arg1 = (P2ArmJoint *) 0 ;
  ArTypes::UByte arg2 ;
  
  arg1 = (P2ArmJoint *)jarg1; 
  arg2 = (ArTypes::UByte)jarg2; 
  if (arg1) (arg1)->myMax = arg2;
}


SWIGEXPORT unsigned char SWIGSTDCALL CSharp_P2ArmJoint_myMax_get(void * jarg1) {
  unsigned char jresult ;
  P2ArmJoint *arg1 = (P2ArmJoint *) 0 ;
  ArTypes::UByte result;
  
  arg1 = (P2ArmJoint *)jarg1; 
  result = (ArTypes::UByte) ((arg1)->myMax);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_P2ArmJoint_myTicksPer90_set(void * jarg1, unsigned char jarg2) {
  P2ArmJoint *arg1 = (P2ArmJoint *) 0 ;
  ArTypes::UByte arg2 ;
  
  arg1 = (P2ArmJoint *)jarg1; 
  arg2 = (ArTypes::UByte)jarg2; 
  if (arg1) (arg1)->myTicksPer90 = arg2;
}


SWIGEXPORT unsigned char SWIGSTDCALL CSharp_P2ArmJoint_myTicksPer90_get(void * jarg1) {
  unsigned char jresult ;
  P2ArmJoint *arg1 = (P2ArmJoint *) 0 ;
  ArTypes::UByte result;
  
  arg1 = (P2ArmJoint *)jarg1; 
  result = (ArTypes::UByte) ((arg1)->myTicksPer90);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_ArP2Arm_ArmJoint1_get() {
  int jresult ;
  int result;
  
  result = (int)(int)ArP2Arm::ArmJoint1;
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_ArP2Arm_ArmJoint2_get() {
  int jresult ;
  int result;
  
  result = (int)(int)ArP2Arm::ArmJoint2;
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_ArP2Arm_ArmJoint3_get() {
  int jresult ;
  int result;
  
  result = (int)(int)ArP2Arm::ArmJoint3;
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_ArP2Arm_ArmJoint4_get() {
  int jresult ;
  int result;
  
  result = (int)(int)ArP2Arm::ArmJoint4;
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_ArP2Arm_ArmJoint5_get() {
  int jresult ;
  int result;
  
  result = (int)(int)ArP2Arm::ArmJoint5;
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_ArP2Arm_ArmJoint6_get() {
  int jresult ;
  int result;
  
  result = (int)(int)ArP2Arm::ArmJoint6;
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_ArP2Arm_ArmGood_get() {
  int jresult ;
  int result;
  
  result = (int)(int)ArP2Arm::ArmGood;
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_ArP2Arm_ArmInited_get() {
  int jresult ;
  int result;
  
  result = (int)(int)ArP2Arm::ArmInited;
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_ArP2Arm_ArmPower_get() {
  int jresult ;
  int result;
  
  result = (int)(int)ArP2Arm::ArmPower;
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_ArP2Arm_ArmHoming_get() {
  int jresult ;
  int result;
  
  result = (int)(int)ArP2Arm::ArmHoming;
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_ArP2Arm_NumJoints_set(int jarg1) {
  int arg1 ;
  
  arg1 = (int)jarg1; 
  ArP2Arm::NumJoints = arg1;
}


SWIGEXPORT int SWIGSTDCALL CSharp_ArP2Arm_NumJoints_get() {
  int jresult ;
  int result;
  
  result = (int)ArP2Arm::NumJoints;
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_ArP2Arm() {
  void * jresult ;
  ArP2Arm *result = 0 ;
  
  result = (ArP2Arm *)new ArP2Arm();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_ArP2Arm(void * jarg1) {
  ArP2Arm *arg1 = (ArP2Arm *) 0 ;
  
  arg1 = (ArP2Arm *)jarg1; 
  delete arg1;
}


SWIGEXPORT void SWIGSTDCALL CSharp_ArP2Arm_setRobot(void * jarg1, void * jarg2) {
  ArP2Arm *arg1 = (ArP2Arm *) 0 ;
  ArRobot *arg2 = (ArRobot *) 0 ;
  
  arg1 = (ArP2Arm *)jarg1; 
  arg2 = (ArRobot *)jarg2; 
  (arg1)->setRobot(arg2);
}


SWIGEXPORT int SWIGSTDCALL CSharp_ArP2Arm_init(void * jarg1) {
  int jresult ;
  ArP2Arm *arg1 = (ArP2Arm *) 0 ;
  ArP2Arm::State result;
  
  arg1 = (ArP2Arm *)jarg1; 
  result = (ArP2Arm::State)(arg1)->init();
  jresult = (int)result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_ArP2Arm_uninit(void * jarg1) {
  int jresult ;
  ArP2Arm *arg1 = (ArP2Arm *) 0 ;
  ArP2Arm::State result;
  
  arg1 = (ArP2Arm *)jarg1; 
  result = (ArP2Arm::State)(arg1)->uninit();
  jresult = (int)result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_ArP2Arm_powerOn__SWIG_0(void * jarg1, unsigned int jarg2) {
  int jresult ;
  ArP2Arm *arg1 = (ArP2Arm *) 0 ;
  bool arg2 ;
  ArP2Arm::State result;
  
  arg1 = (ArP2Arm *)jarg1; 
  arg2 = jarg2 ? true : false; 
  result = (ArP2Arm::State)(arg1)->powerOn(arg2);
  jresult = (int)result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_ArP2Arm_powerOn__SWIG_1(void * jarg1) {
  int jresult ;
  ArP2Arm *arg1 = (ArP2Arm *) 0 ;
  ArP2Arm::State result;
  
  arg1 = (ArP2Arm *)jarg1; 
  result = (ArP2Arm::State)(arg1)->powerOn();
  jresult = (int)result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_ArP2Arm_powerOff(void * jarg1) {
  int jresult ;
  ArP2Arm *arg1 = (ArP2Arm *) 0 ;
  ArP2Arm::State result;
  
  arg1 = (ArP2Arm *)jarg1; 
  result = (ArP2Arm::State)(arg1)->powerOff();
  jresult = (int)result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_ArP2Arm_requestInfo(void * jarg1) {
  int jresult ;
  ArP2Arm *arg1 = (ArP2Arm *) 0 ;
  ArP2Arm::State result;
  
  arg1 = (ArP2Arm *)jarg1; 
  result = (ArP2Arm::State)(arg1)->requestInfo();
  jresult = (int)result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_ArP2Arm_requestStatus(void * jarg1, int jarg2) {
  int jresult ;
  ArP2Arm *arg1 = (ArP2Arm *) 0 ;
  ArP2Arm::StatusType arg2 ;
  ArP2Arm::State result;
  
  arg1 = (ArP2Arm *)jarg1; 
  arg2 = (ArP2Arm::StatusType)jarg2; 
  result = (ArP2Arm::State)(arg1)->requestStatus(arg2);
  jresult = (int)result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_ArP2Arm_requestInit(void * jarg1) {
  int jresult ;
  ArP2Arm *arg1 = (ArP2Arm *) 0 ;
  ArP2Arm::State result;
  
  arg1 = (ArP2Arm *)jarg1; 
  result = (ArP2Arm::State)(arg1)->requestInit();
  jresult = (int)result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_ArP2Arm_checkArm__SWIG_0(void * jarg1, unsigned int jarg2) {
  int jresult ;
  ArP2Arm *arg1 = (ArP2Arm *) 0 ;
  bool arg2 ;
  ArP2Arm::State result;
  
  arg1 = (ArP2Arm *)jarg1; 
  arg2 = jarg2 ? true : false; 
  result = (ArP2Arm::State)(arg1)->checkArm(arg2);
  jresult = (int)result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_ArP2Arm_checkArm__SWIG_1(void * jarg1) {
  int jresult ;
  ArP2Arm *arg1 = (ArP2Arm *) 0 ;
  ArP2Arm::State result;
  
  arg1 = (ArP2Arm *)jarg1; 
  result = (ArP2Arm::State)(arg1)->checkArm();
  jresult = (int)result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_ArP2Arm_home__SWIG_0(void * jarg1, int jarg2) {
  int jresult ;
  ArP2Arm *arg1 = (ArP2Arm *) 0 ;
  int arg2 ;
  ArP2Arm::State result;
  
  arg1 = (ArP2Arm *)jarg1; 
  arg2 = (int)jarg2; 
  result = (ArP2Arm::State)(arg1)->home(arg2);
  jresult = (int)result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_ArP2Arm_home__SWIG_1(void * jarg1) {
  int jresult ;
  ArP2Arm *arg1 = (ArP2Arm *) 0 ;
  ArP2Arm::State result;
  
  arg1 = (ArP2Arm *)jarg1; 
  result = (ArP2Arm::State)(arg1)->home();
  jresult = (int)result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_ArP2Arm_park(void * jarg1) {
  int jresult ;
  ArP2Arm *arg1 = (ArP2Arm *) 0 ;
  ArP2Arm::State result;
  
  arg1 = (ArP2Arm *)jarg1; 
  result = (ArP2Arm::State)(arg1)->park();
  jresult = (int)result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_ArP2Arm_moveTo__SWIG_0(void * jarg1, int jarg2, float jarg3, unsigned char jarg4) {
  int jresult ;
  ArP2Arm *arg1 = (ArP2Arm *) 0 ;
  int arg2 ;
  float arg3 ;
  unsigned char arg4 ;
  ArP2Arm::State result;
  
  arg1 = (ArP2Arm *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (float)jarg3; 
  arg4 = (unsigned char)jarg4; 
  result = (ArP2Arm::State)(arg1)->moveTo(arg2,arg3,arg4);
  jresult = (int)result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_ArP2Arm_moveTo__SWIG_1(void * jarg1, int jarg2, float jarg3) {
  int jresult ;
  ArP2Arm *arg1 = (ArP2Arm *) 0 ;
  int arg2 ;
  float arg3 ;
  ArP2Arm::State result;
  
  arg1 = (ArP2Arm *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (float)jarg3; 
  result = (ArP2Arm::State)(arg1)->moveTo(arg2,arg3);
  jresult = (int)result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_ArP2Arm_moveToTicks(void * jarg1, int jarg2, unsigned char jarg3) {
  int jresult ;
  ArP2Arm *arg1 = (ArP2Arm *) 0 ;
  int arg2 ;
  unsigned char arg3 ;
  ArP2Arm::State result;
  
  arg1 = (ArP2Arm *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (unsigned char)jarg3; 
  result = (ArP2Arm::State)(arg1)->moveToTicks(arg2,arg3);
  jresult = (int)result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_ArP2Arm_moveStep__SWIG_0(void * jarg1, int jarg2, float jarg3, unsigned char jarg4) {
  int jresult ;
  ArP2Arm *arg1 = (ArP2Arm *) 0 ;
  int arg2 ;
  float arg3 ;
  unsigned char arg4 ;
  ArP2Arm::State result;
  
  arg1 = (ArP2Arm *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (float)jarg3; 
  arg4 = (unsigned char)jarg4; 
  result = (ArP2Arm::State)(arg1)->moveStep(arg2,arg3,arg4);
  jresult = (int)result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_ArP2Arm_moveStep__SWIG_1(void * jarg1, int jarg2, float jarg3) {
  int jresult ;
  ArP2Arm *arg1 = (ArP2Arm *) 0 ;
  int arg2 ;
  float arg3 ;
  ArP2Arm::State result;
  
  arg1 = (ArP2Arm *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (float)jarg3; 
  result = (ArP2Arm::State)(arg1)->moveStep(arg2,arg3);
  jresult = (int)result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_ArP2Arm_moveStepTicks(void * jarg1, int jarg2, signed char jarg3) {
  int jresult ;
  ArP2Arm *arg1 = (ArP2Arm *) 0 ;
  int arg2 ;
  signed char arg3 ;
  ArP2Arm::State result;
  
  arg1 = (ArP2Arm *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (signed char)jarg3; 
  result = (ArP2Arm::State)(arg1)->moveStepTicks(arg2,arg3);
  jresult = (int)result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_ArP2Arm_moveVel(void * jarg1, int jarg2, int jarg3) {
  int jresult ;
  ArP2Arm *arg1 = (ArP2Arm *) 0 ;
  int arg2 ;
  int arg3 ;
  ArP2Arm::State result;
  
  arg1 = (ArP2Arm *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (int)jarg3; 
  result = (ArP2Arm::State)(arg1)->moveVel(arg2,arg3);
  jresult = (int)result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_ArP2Arm_stop(void * jarg1) {
  int jresult ;
  ArP2Arm *arg1 = (ArP2Arm *) 0 ;
  ArP2Arm::State result;
  
  arg1 = (ArP2Arm *)jarg1; 
  result = (ArP2Arm::State)(arg1)->stop();
  jresult = (int)result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_ArP2Arm_setAutoParkTimer(void * jarg1, int jarg2) {
  int jresult ;
  ArP2Arm *arg1 = (ArP2Arm *) 0 ;
  int arg2 ;
  ArP2Arm::State result;
  
  arg1 = (ArP2Arm *)jarg1; 
  arg2 = (int)jarg2; 
  result = (ArP2Arm::State)(arg1)->setAutoParkTimer(arg2);
  jresult = (int)result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_ArP2Arm_setGripperParkTimer(void * jarg1, int jarg2) {
  int jresult ;
  ArP2Arm *arg1 = (ArP2Arm *) 0 ;
  int arg2 ;
  ArP2Arm::State result;
  
  arg1 = (ArP2Arm *)jarg1; 
  arg2 = (int)jarg2; 
  result = (ArP2Arm::State)(arg1)->setGripperParkTimer(arg2);
  jresult = (int)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_ArP2Arm_setStoppedCB(void * jarg1, void * jarg2) {
  ArP2Arm *arg1 = (ArP2Arm *) 0 ;
  ArFunctor *arg2 = (ArFunctor *) 0 ;
  
  arg1 = (ArP2Arm *)jarg1; 
  arg2 = (ArFunctor *)jarg2; 
  (arg1)->setStoppedCB(arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_ArP2Arm_setPacketCB(void * jarg1, void * jarg2) {
  ArP2Arm *arg1 = (ArP2Arm *) 0 ;
  ArFunctor1< ArP2Arm::PacketType > *arg2 = (ArFunctor1< ArP2Arm::PacketType > *) 0 ;
  
  arg1 = (ArP2Arm *)jarg1; 
  arg2 = (ArFunctor1< ArP2Arm::PacketType > *)jarg2; 
  (arg1)->setPacketCB(arg2);
}


SWIGEXPORT char * SWIGSTDCALL CSharp_ArP2Arm_getArmVersion(void * jarg1) {
  char * jresult ;
  ArP2Arm *arg1 = (ArP2Arm *) 0 ;
  std::string result;
  
  arg1 = (ArP2Arm *)jarg1; 
  result = (arg1)->getArmVersion();
  jresult = SWIG_csharp_string_callback((&result)->c_str()); 
  return jresult;
}


SWIGEXPORT float SWIGSTDCALL CSharp_ArP2Arm_getJointPos(void * jarg1, int jarg2) {
  float jresult ;
  ArP2Arm *arg1 = (ArP2Arm *) 0 ;
  int arg2 ;
  float result;
  
  arg1 = (ArP2Arm *)jarg1; 
  arg2 = (int)jarg2; 
  result = (float)(arg1)->getJointPos(arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned char SWIGSTDCALL CSharp_ArP2Arm_getJointPosTicks(void * jarg1, int jarg2) {
  unsigned char jresult ;
  ArP2Arm *arg1 = (ArP2Arm *) 0 ;
  int arg2 ;
  unsigned char result;
  
  arg1 = (ArP2Arm *)jarg1; 
  arg2 = (int)jarg2; 
  result = (unsigned char)(arg1)->getJointPosTicks(arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_ArP2Arm_getMoving__SWIG_0(void * jarg1, int jarg2) {
  unsigned int jresult ;
  ArP2Arm *arg1 = (ArP2Arm *) 0 ;
  int arg2 ;
  bool result;
  
  arg1 = (ArP2Arm *)jarg1; 
  arg2 = (int)jarg2; 
  result = (bool)(arg1)->getMoving(arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_ArP2Arm_getMoving__SWIG_1(void * jarg1) {
  unsigned int jresult ;
  ArP2Arm *arg1 = (ArP2Arm *) 0 ;
  bool result;
  
  arg1 = (ArP2Arm *)jarg1; 
  result = (bool)(arg1)->getMoving();
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_ArP2Arm_isPowered(void * jarg1) {
  unsigned int jresult ;
  ArP2Arm *arg1 = (ArP2Arm *) 0 ;
  bool result;
  
  arg1 = (ArP2Arm *)jarg1; 
  result = (bool)(arg1)->isPowered();
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_ArP2Arm_isGood(void * jarg1) {
  unsigned int jresult ;
  ArP2Arm *arg1 = (ArP2Arm *) 0 ;
  bool result;
  
  arg1 = (ArP2Arm *)jarg1; 
  result = (bool)(arg1)->isGood();
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_ArP2Arm_getStatus(void * jarg1) {
  int jresult ;
  ArP2Arm *arg1 = (ArP2Arm *) 0 ;
  int result;
  
  arg1 = (ArP2Arm *)jarg1; 
  result = (int)(arg1)->getStatus();
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_ArP2Arm_getLastStatusTime(void * jarg1) {
  void * jresult ;
  ArP2Arm *arg1 = (ArP2Arm *) 0 ;
  ArTime result;
  
  arg1 = (ArP2Arm *)jarg1; 
  result = (arg1)->getLastStatusTime();
  jresult = new ArTime((const ArTime &)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_ArP2Arm_getRobot(void * jarg1) {
  void * jresult ;
  ArP2Arm *arg1 = (ArP2Arm *) 0 ;
  ArRobot *result = 0 ;
  
  arg1 = (ArP2Arm *)jarg1; 
  result = (ArRobot *)(arg1)->getRobot();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_ArP2Arm_getJoint(void * jarg1, int jarg2) {
  void * jresult ;
  ArP2Arm *arg1 = (ArP2Arm *) 0 ;
  int arg2 ;
  P2ArmJoint *result = 0 ;
  
  arg1 = (ArP2Arm *)jarg1; 
  arg2 = (int)jarg2; 
  result = (P2ArmJoint *)(arg1)->getJoint(arg2);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_ArP2Arm_convertDegToTicks(void * jarg1, int jarg2, float jarg3, void * jarg4) {
  unsigned int jresult ;
  ArP2Arm *arg1 = (ArP2Arm *) 0 ;
  int arg2 ;
  float arg3 ;
  unsigned char *arg4 = (unsigned char *) 0 ;
  bool result;
  
  arg1 = (ArP2Arm *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (float)jarg3; 
  arg4 = (unsigned char *)jarg4; 
  result = (bool)(arg1)->convertDegToTicks(arg2,arg3,arg4);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_ArP2Arm_convertTicksToDeg(void * jarg1, int jarg2, unsigned char jarg3, void * jarg4) {
  unsigned int jresult ;
  ArP2Arm *arg1 = (ArP2Arm *) 0 ;
  int arg2 ;
  unsigned char arg3 ;
  float *arg4 = (float *) 0 ;
  bool result;
  
  arg1 = (ArP2Arm *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (unsigned char)jarg3; 
  arg4 = (float *)jarg4; 
  result = (bool)(arg1)->convertTicksToDeg(arg2,arg3,arg4);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_ArPriorityResolver() {
  void * jresult ;
  ArPriorityResolver *result = 0 ;
  
  result = (ArPriorityResolver *)new ArPriorityResolver();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_ArPriorityResolver(void * jarg1) {
  ArPriorityResolver *arg1 = (ArPriorityResolver *) 0 ;
  
  arg1 = (ArPriorityResolver *)jarg1; 
  delete arg1;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_ArPriorityResolver_resolve__SWIG_0(void * jarg1, void * jarg2, void * jarg3, unsigned int jarg4) {
  void * jresult ;
  ArPriorityResolver *arg1 = (ArPriorityResolver *) 0 ;
  ArResolver::ActionMap *arg2 = (ArResolver::ActionMap *) 0 ;
  ArRobot *arg3 = (ArRobot *) 0 ;
  bool arg4 ;
  ArActionDesired *result = 0 ;
  
  arg1 = (ArPriorityResolver *)jarg1; 
  arg2 = (ArResolver::ActionMap *)jarg2; 
  arg3 = (ArRobot *)jarg3; 
  arg4 = jarg4 ? true : false; 
  result = (ArActionDesired *)(arg1)->resolve(arg2,arg3,arg4);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_ArPriorityResolver_resolve__SWIG_1(void * jarg1, void * jarg2, void * jarg3) {
  void * jresult ;
  ArPriorityResolver *arg1 = (ArPriorityResolver *) 0 ;
  ArResolver::ActionMap *arg2 = (ArResolver::ActionMap *) 0 ;
  ArRobot *arg3 = (ArRobot *) 0 ;
  ArActionDesired *result = 0 ;
  
  arg1 = (ArPriorityResolver *)jarg1; 
  arg2 = (ArResolver::ActionMap *)jarg2; 
  arg3 = (ArRobot *)jarg3; 
  result = (ArActionDesired *)(arg1)->resolve(arg2,arg3);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_ArRangeBuffer(int jarg1) {
  void * jresult ;
  int arg1 ;
  ArRangeBuffer *result = 0 ;
  
  arg1 = (int)jarg1; 
  result = (ArRangeBuffer *)new ArRangeBuffer(arg1);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_ArRangeBuffer(void * jarg1) {
  ArRangeBuffer *arg1 = (ArRangeBuffer *) 0 ;
  
  arg1 = (ArRangeBuffer *)jarg1; 
  delete arg1;
}


SWIGEXPORT unsigned long SWIGSTDCALL CSharp_ArRangeBuffer_getSize(void * jarg1) {
  unsigned long jresult ;
  ArRangeBuffer *arg1 = (ArRangeBuffer *) 0 ;
  size_t result;
  
  arg1 = (ArRangeBuffer *)jarg1; 
  result = ((ArRangeBuffer const *)arg1)->getSize();
  jresult = (unsigned long)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_ArRangeBuffer_setSize(void * jarg1, unsigned long jarg2) {
  ArRangeBuffer *arg1 = (ArRangeBuffer *) 0 ;
  size_t arg2 ;
  
  arg1 = (ArRangeBuffer *)jarg1; 
  arg2 = (size_t)jarg2; 
  (arg1)->setSize(arg2);
}


SWIGEXPORT void * SWIGSTDCALL CSharp_ArRangeBuffer_getPoseTaken(void * jarg1) {
  void * jresult ;
  ArRangeBuffer *arg1 = (ArRangeBuffer *) 0 ;
  ArPose result;
  
  arg1 = (ArRangeBuffer *)jarg1; 
  result = ((ArRangeBuffer const *)arg1)->getPoseTaken();
  jresult = new ArPose((const ArPose &)result); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_ArRangeBuffer_setPoseTaken(void * jarg1, void * jarg2) {
  ArRangeBuffer *arg1 = (ArRangeBuffer *) 0 ;
  ArPose arg2 ;
  ArPose *argp2 ;
  
  arg1 = (ArRangeBuffer *)jarg1; 
  argp2 = (ArPose *)jarg2; 
  if (!argp2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Attempt to dereference null ArPose", 0);
    return ;
  }
  arg2 = *argp2; 
  (arg1)->setPoseTaken(arg2);
}


SWIGEXPORT void * SWIGSTDCALL CSharp_ArRangeBuffer_getEncoderPoseTaken(void * jarg1) {
  void * jresult ;
  ArRangeBuffer *arg1 = (ArRangeBuffer *) 0 ;
  ArPose result;
  
  arg1 = (ArRangeBuffer *)jarg1; 
  result = ((ArRangeBuffer const *)arg1)->getEncoderPoseTaken();
  jresult = new ArPose((const ArPose &)result); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_ArRangeBuffer_setEncoderPoseTaken(void * jarg1, void * jarg2) {
  ArRangeBuffer *arg1 = (ArRangeBuffer *) 0 ;
  ArPose arg2 ;
  ArPose *argp2 ;
  
  arg1 = (ArRangeBuffer *)jarg1; 
  argp2 = (ArPose *)jarg2; 
  if (!argp2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Attempt to dereference null ArPose", 0);
    return ;
  }
  arg2 = *argp2; 
  (arg1)->setEncoderPoseTaken(arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_ArRangeBuffer_addReading(void * jarg1, double jarg2, double jarg3) {
  ArRangeBuffer *arg1 = (ArRangeBuffer *) 0 ;
  double arg2 ;
  double arg3 ;
  
  arg1 = (ArRangeBuffer *)jarg1; 
  arg2 = (double)jarg2; 
  arg3 = (double)jarg3; 
  (arg1)->addReading(arg2,arg3);
}


SWIGEXPORT void SWIGSTDCALL CSharp_ArRangeBuffer_addReadingConditional__SWIG_0(void * jarg1, double jarg2, double jarg3, double jarg4, void * jarg5) {
  ArRangeBuffer *arg1 = (ArRangeBuffer *) 0 ;
  double arg2 ;
  double arg3 ;
  double arg4 ;
  bool *arg5 = (bool *) 0 ;
  
  arg1 = (ArRangeBuffer *)jarg1; 
  arg2 = (double)jarg2; 
  arg3 = (double)jarg3; 
  arg4 = (double)jarg4; 
  arg5 = (bool *)jarg5; 
  (arg1)->addReadingConditional(arg2,arg3,arg4,arg5);
}


SWIGEXPORT void SWIGSTDCALL CSharp_ArRangeBuffer_addReadingConditional__SWIG_1(void * jarg1, double jarg2, double jarg3, double jarg4) {
  ArRangeBuffer *arg1 = (ArRangeBuffer *) 0 ;
  double arg2 ;
  double arg3 ;
  double arg4 ;
  
  arg1 = (ArRangeBuffer *)jarg1; 
  arg2 = (double)jarg2; 
  arg3 = (double)jarg3; 
  arg4 = (double)jarg4; 
  (arg1)->addReadingConditional(arg2,arg3,arg4);
}


SWIGEXPORT void * SWIGSTDCALL CSharp_ArRangeBuffer_getBuffer(void * jarg1) {
  void * jresult ;
  ArRangeBuffer *arg1 = (ArRangeBuffer *) 0 ;
  std::list< ArPoseWithTime * > *result = 0 ;
  
  arg1 = (ArRangeBuffer *)jarg1; 
  result = (std::list< ArPoseWithTime * > *)(arg1)->getBuffer();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT double SWIGSTDCALL CSharp_ArRangeBuffer_getClosestPolar__SWIG_0(void * jarg1, double jarg2, double jarg3, void * jarg4, unsigned int jarg5, void * jarg6) {
  double jresult ;
  ArRangeBuffer *arg1 = (ArRangeBuffer *) 0 ;
  double arg2 ;
  double arg3 ;
  ArPose arg4 ;
  unsigned int arg5 ;
  double *arg6 = (double *) 0 ;
  ArPose *argp4 ;
  double result;
  
  arg1 = (ArRangeBuffer *)jarg1; 
  arg2 = (double)jarg2; 
  arg3 = (double)jarg3; 
  argp4 = (ArPose *)jarg4; 
  if (!argp4) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Attempt to dereference null ArPose", 0);
    return 0;
  }
  arg4 = *argp4; 
  arg5 = (unsigned int)jarg5; 
  arg6 = (double *)jarg6; 
  result = (double)((ArRangeBuffer const *)arg1)->getClosestPolar(arg2,arg3,arg4,arg5,arg6);
  jresult = result; 
  return jresult;
}


SWIGEXPORT double SWIGSTDCALL CSharp_ArRangeBuffer_getClosestPolar__SWIG_1(void * jarg1, double jarg2, double jarg3, void * jarg4, unsigned int jarg5) {
  double jresult ;
  ArRangeBuffer *arg1 = (ArRangeBuffer *) 0 ;
  double arg2 ;
  double arg3 ;
  ArPose arg4 ;
  unsigned int arg5 ;
  ArPose *argp4 ;
  double result;
  
  arg1 = (ArRangeBuffer *)jarg1; 
  arg2 = (double)jarg2; 
  arg3 = (double)jarg3; 
  argp4 = (ArPose *)jarg4; 
  if (!argp4) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Attempt to dereference null ArPose", 0);
    return 0;
  }
  arg4 = *argp4; 
  arg5 = (unsigned int)jarg5; 
  result = (double)((ArRangeBuffer const *)arg1)->getClosestPolar(arg2,arg3,arg4,arg5);
  jresult = result; 
  return jresult;
}


SWIGEXPORT double SWIGSTDCALL CSharp_ArRangeBuffer_getClosestBox__SWIG_0(void * jarg1, double jarg2, double jarg3, double jarg4, double jarg5, void * jarg6, unsigned int jarg7, void * jarg8, void * jarg9) {
  double jresult ;
  ArRangeBuffer *arg1 = (ArRangeBuffer *) 0 ;
  double arg2 ;
  double arg3 ;
  double arg4 ;
  double arg5 ;
  ArPose arg6 ;
  unsigned int arg7 ;
  ArPose *arg8 = (ArPose *) 0 ;
  ArPose arg9 ;
  ArPose *argp6 ;
  ArPose *argp9 ;
  double result;
  
  arg1 = (ArRangeBuffer *)jarg1; 
  arg2 = (double)jarg2; 
  arg3 = (double)jarg3; 
  arg4 = (double)jarg4; 
  arg5 = (double)jarg5; 
  argp6 = (ArPose *)jarg6; 
  if (!argp6) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Attempt to dereference null ArPose", 0);
    return 0;
  }
  arg6 = *argp6; 
  arg7 = (unsigned int)jarg7; 
  arg8 = (ArPose *)jarg8; 
  argp9 = (ArPose *)jarg9; 
  if (!argp9) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Attempt to dereference null ArPose", 0);
    return 0;
  }
  arg9 = *argp9; 
  result = (double)((ArRangeBuffer const *)arg1)->getClosestBox(arg2,arg3,arg4,arg5,arg6,arg7,arg8,arg9);
  jresult = result; 
  return jresult;
}


SWIGEXPORT double SWIGSTDCALL CSharp_ArRangeBuffer_getClosestBox__SWIG_1(void * jarg1, double jarg2, double jarg3, double jarg4, double jarg5, void * jarg6, unsigned int jarg7, void * jarg8) {
  double jresult ;
  ArRangeBuffer *arg1 = (ArRangeBuffer *) 0 ;
  double arg2 ;
  double arg3 ;
  double arg4 ;
  double arg5 ;
  ArPose arg6 ;
  unsigned int arg7 ;
  ArPose *arg8 = (ArPose *) 0 ;
  ArPose *argp6 ;
  double result;
  
  arg1 = (ArRangeBuffer *)jarg1; 
  arg2 = (double)jarg2; 
  arg3 = (double)jarg3; 
  arg4 = (double)jarg4; 
  arg5 = (double)jarg5; 
  argp6 = (ArPose *)jarg6; 
  if (!argp6) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Attempt to dereference null ArPose", 0);
    return 0;
  }
  arg6 = *argp6; 
  arg7 = (unsigned int)jarg7; 
  arg8 = (ArPose *)jarg8; 
  result = (double)((ArRangeBuffer const *)arg1)->getClosestBox(arg2,arg3,arg4,arg5,arg6,arg7,arg8);
  jresult = result; 
  return jresult;
}


SWIGEXPORT double SWIGSTDCALL CSharp_ArRangeBuffer_getClosestBox__SWIG_2(void * jarg1, double jarg2, double jarg3, double jarg4, double jarg5, void * jarg6, unsigned int jarg7) {
  double jresult ;
  ArRangeBuffer *arg1 = (ArRangeBuffer *) 0 ;
  double arg2 ;
  double arg3 ;
  double arg4 ;
  double arg5 ;
  ArPose arg6 ;
  unsigned int arg7 ;
  ArPose *argp6 ;
  double result;
  
  arg1 = (ArRangeBuffer *)jarg1; 
  arg2 = (double)jarg2; 
  arg3 = (double)jarg3; 
  arg4 = (double)jarg4; 
  arg5 = (double)jarg5; 
  argp6 = (ArPose *)jarg6; 
  if (!argp6) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Attempt to dereference null ArPose", 0);
    return 0;
  }
  arg6 = *argp6; 
  arg7 = (unsigned int)jarg7; 
  result = (double)((ArRangeBuffer const *)arg1)->getClosestBox(arg2,arg3,arg4,arg5,arg6,arg7);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_ArRangeBuffer_applyTransform(void * jarg1, void * jarg2) {
  ArRangeBuffer *arg1 = (ArRangeBuffer *) 0 ;
  ArTransform arg2 ;
  ArTransform *argp2 ;
  
  arg1 = (ArRangeBuffer *)jarg1; 
  argp2 = (ArTransform *)jarg2; 
  if (!argp2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Attempt to dereference null ArTransform", 0);
    return ;
  }
  arg2 = *argp2; 
  (arg1)->applyTransform(arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_ArRangeBuffer_clear(void * jarg1) {
  ArRangeBuffer *arg1 = (ArRangeBuffer *) 0 ;
  
  arg1 = (ArRangeBuffer *)jarg1; 
  (arg1)->clear();
}


SWIGEXPORT void SWIGSTDCALL CSharp_ArRangeBuffer_clearOlderThan(void * jarg1, int jarg2) {
  ArRangeBuffer *arg1 = (ArRangeBuffer *) 0 ;
  int arg2 ;
  
  arg1 = (ArRangeBuffer *)jarg1; 
  arg2 = (int)jarg2; 
  (arg1)->clearOlderThan(arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_ArRangeBuffer_clearOlderThanSeconds(void * jarg1, int jarg2) {
  ArRangeBuffer *arg1 = (ArRangeBuffer *) 0 ;
  int arg2 ;
  
  arg1 = (ArRangeBuffer *)jarg1; 
  arg2 = (int)jarg2; 
  (arg1)->clearOlderThanSeconds(arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_ArRangeBuffer_reset(void * jarg1) {
  ArRangeBuffer *arg1 = (ArRangeBuffer *) 0 ;
  
  arg1 = (ArRangeBuffer *)jarg1; 
  (arg1)->reset();
}


SWIGEXPORT void SWIGSTDCALL CSharp_ArRangeBuffer_beginRedoBuffer(void * jarg1) {
  ArRangeBuffer *arg1 = (ArRangeBuffer *) 0 ;
  
  arg1 = (ArRangeBuffer *)jarg1; 
  (arg1)->beginRedoBuffer();
}


SWIGEXPORT void SWIGSTDCALL CSharp_ArRangeBuffer_redoReading(void * jarg1, double jarg2, double jarg3) {
  ArRangeBuffer *arg1 = (ArRangeBuffer *) 0 ;
  double arg2 ;
  double arg3 ;
  
  arg1 = (ArRangeBuffer *)jarg1; 
  arg2 = (double)jarg2; 
  arg3 = (double)jarg3; 
  (arg1)->redoReading(arg2,arg3);
}


SWIGEXPORT void SWIGSTDCALL CSharp_ArRangeBuffer_endRedoBuffer(void * jarg1) {
  ArRangeBuffer *arg1 = (ArRangeBuffer *) 0 ;
  
  arg1 = (ArRangeBuffer *)jarg1; 
  (arg1)->endRedoBuffer();
}


SWIGEXPORT void * SWIGSTDCALL CSharp_ArRangeBuffer_getBufferAsVector(void * jarg1) {
  void * jresult ;
  ArRangeBuffer *arg1 = (ArRangeBuffer *) 0 ;
  std::vector< ArPoseWithTime > *result = 0 ;
  
  arg1 = (ArRangeBuffer *)jarg1; 
  result = (std::vector< ArPoseWithTime > *)(arg1)->getBufferAsVector();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT double SWIGSTDCALL CSharp_ArRangeBuffer_getClosestPolarInList(double jarg1, double jarg2, void * jarg3, unsigned int jarg4, void * jarg5, void * jarg6) {
  double jresult ;
  double arg1 ;
  double arg2 ;
  ArPose arg3 ;
  unsigned int arg4 ;
  double *arg5 = (double *) 0 ;
  std::list< ArPoseWithTime * > *arg6 = (std::list< ArPoseWithTime * > *) 0 ;
  ArPose *argp3 ;
  double result;
  
  arg1 = (double)jarg1; 
  arg2 = (double)jarg2; 
  argp3 = (ArPose *)jarg3; 
  if (!argp3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Attempt to dereference null ArPose", 0);
    return 0;
  }
  arg3 = *argp3; 
  arg4 = (unsigned int)jarg4; 
  arg5 = (double *)jarg5; 
  arg6 = (std::list< ArPoseWithTime * > *)jarg6; 
  result = (double)ArRangeBuffer::getClosestPolarInList(arg1,arg2,arg3,arg4,arg5,(std::list< ArPoseWithTime * > const *)arg6);
  jresult = result; 
  return jresult;
}


SWIGEXPORT double SWIGSTDCALL CSharp_ArRangeBuffer_getClosestBoxInList(double jarg1, double jarg2, double jarg3, double jarg4, void * jarg5, unsigned int jarg6, void * jarg7, void * jarg8, void * jarg9) {
  double jresult ;
  double arg1 ;
  double arg2 ;
  double arg3 ;
  double arg4 ;
  ArPose arg5 ;
  unsigned int arg6 ;
  ArPose *arg7 = (ArPose *) 0 ;
  ArPose arg8 ;
  std::list< ArPoseWithTime * > *arg9 = (std::list< ArPoseWithTime * > *) 0 ;
  ArPose *argp5 ;
  ArPose *argp8 ;
  double result;
  
  arg1 = (double)jarg1; 
  arg2 = (double)jarg2; 
  arg3 = (double)jarg3; 
  arg4 = (double)jarg4; 
  argp5 = (ArPose *)jarg5; 
  if (!argp5) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Attempt to dereference null ArPose", 0);
    return 0;
  }
  arg5 = *argp5; 
  arg6 = (unsigned int)jarg6; 
  arg7 = (ArPose *)jarg7; 
  argp8 = (ArPose *)jarg8; 
  if (!argp8) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Attempt to dereference null ArPose", 0);
    return 0;
  }
  arg8 = *argp8; 
  arg9 = (std::list< ArPoseWithTime * > *)jarg9; 
  result = (double)ArRangeBuffer::getClosestBoxInList(arg1,arg2,arg3,arg4,arg5,arg6,arg7,arg8,(std::list< ArPoseWithTime * > const *)arg9);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_ArRatioInputJoydrive__SWIG_0(void * jarg1, void * jarg2, int jarg3, unsigned int jarg4, unsigned int jarg5) {
  void * jresult ;
  ArRobot *arg1 = (ArRobot *) 0 ;
  ArActionRatioInput *arg2 = (ArActionRatioInput *) 0 ;
  int arg3 ;
  bool arg4 ;
  bool arg5 ;
  ArRatioInputJoydrive *result = 0 ;
  
  arg1 = (ArRobot *)jarg1; 
  arg2 = (ArActionRatioInput *)jarg2; 
  arg3 = (int)jarg3; 
  arg4 = jarg4 ? true : false; 
  arg5 = jarg5 ? true : false; 
  result = (ArRatioInputJoydrive *)new ArRatioInputJoydrive(arg1,arg2,arg3,arg4,arg5);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_ArRatioInputJoydrive__SWIG_1(void * jarg1, void * jarg2, int jarg3, unsigned int jarg4) {
  void * jresult ;
  ArRobot *arg1 = (ArRobot *) 0 ;
  ArActionRatioInput *arg2 = (ArActionRatioInput *) 0 ;
  int arg3 ;
  bool arg4 ;
  ArRatioInputJoydrive *result = 0 ;
  
  arg1 = (ArRobot *)jarg1; 
  arg2 = (ArActionRatioInput *)jarg2; 
  arg3 = (int)jarg3; 
  arg4 = jarg4 ? true : false; 
  result = (ArRatioInputJoydrive *)new ArRatioInputJoydrive(arg1,arg2,arg3,arg4);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_ArRatioInputJoydrive__SWIG_2(void * jarg1, void * jarg2, int jarg3) {
  void * jresult ;
  ArRobot *arg1 = (ArRobot *) 0 ;
  ArActionRatioInput *arg2 = (ArActionRatioInput *) 0 ;
  int arg3 ;
  ArRatioInputJoydrive *result = 0 ;
  
  arg1 = (ArRobot *)jarg1; 
  arg2 = (ArActionRatioInput *)jarg2; 
  arg3 = (int)jarg3; 
  result = (ArRatioInputJoydrive *)new ArRatioInputJoydrive(arg1,arg2,arg3);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_ArRatioInputJoydrive__SWIG_3(void * jarg1, void * jarg2) {
  void * jresult ;
  ArRobot *arg1 = (ArRobot *) 0 ;
  ArActionRatioInput *arg2 = (ArActionRatioInput *) 0 ;
  ArRatioInputJoydrive *result = 0 ;
  
  arg1 = (ArRobot *)jarg1; 
  arg2 = (ArActionRatioInput *)jarg2; 
  result = (ArRatioInputJoydrive *)new ArRatioInputJoydrive(arg1,arg2);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_ArRatioInputJoydrive(void * jarg1) {
  ArRatioInputJoydrive *arg1 = (ArRatioInputJoydrive *) 0 ;
  
  arg1 = (ArRatioInputJoydrive *)jarg1; 
  delete arg1;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_ArRatioInputJoydrive_joystickInited(void * jarg1) {
  unsigned int jresult ;
  ArRatioInputJoydrive *arg1 = (ArRatioInputJoydrive *) 0 ;
  bool result;
  
  arg1 = (ArRatioInputJoydrive *)jarg1; 
  result = (bool)(arg1)->joystickInited();
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_ArRatioInputJoydrive_setStopIfNoButtonPressed(void * jarg1, unsigned int jarg2) {
  ArRatioInputJoydrive *arg1 = (ArRatioInputJoydrive *) 0 ;
  bool arg2 ;
  
  arg1 = (ArRatioInputJoydrive *)jarg1; 
  arg2 = jarg2 ? true : false; 
  (arg1)->setStopIfNoButtonPressed(arg2);
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_ArRatioInputJoydrive_getStopIfNoButtonPressed(void * jarg1) {
  unsigned int jresult ;
  ArRatioInputJoydrive *arg1 = (ArRatioInputJoydrive *) 0 ;
  bool result;
  
  arg1 = (ArRatioInputJoydrive *)jarg1; 
  result = (bool)(arg1)->getStopIfNoButtonPressed();
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_ArRatioInputJoydrive_setUseOSCal(void * jarg1, unsigned int jarg2) {
  ArRatioInputJoydrive *arg1 = (ArRatioInputJoydrive *) 0 ;
  bool arg2 ;
  
  arg1 = (ArRatioInputJoydrive *)jarg1; 
  arg2 = jarg2 ? true : false; 
  (arg1)->setUseOSCal(arg2);
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_ArRatioInputJoydrive_getUseOSCal(void * jarg1) {
  unsigned int jresult ;
  ArRatioInputJoydrive *arg1 = (ArRatioInputJoydrive *) 0 ;
  bool result;
  
  arg1 = (ArRatioInputJoydrive *)jarg1; 
  result = (bool)(arg1)->getUseOSCal();
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_ArRatioInputJoydrive_getJoyHandler(void * jarg1) {
  void * jresult ;
  ArRatioInputJoydrive *arg1 = (ArRatioInputJoydrive *) 0 ;
  ArJoyHandler *result = 0 ;
  
  arg1 = (ArRatioInputJoydrive *)jarg1; 
  result = (ArJoyHandler *)(arg1)->getJoyHandler();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_ArRatioInputKeydrive__SWIG_0(void * jarg1, void * jarg2, int jarg3, double jarg4) {
  void * jresult ;
  ArRobot *arg1 = (ArRobot *) 0 ;
  ArActionRatioInput *arg2 = (ArActionRatioInput *) 0 ;
  int arg3 ;
  double arg4 ;
  ArRatioInputKeydrive *result = 0 ;
  
  arg1 = (ArRobot *)jarg1; 
  arg2 = (ArActionRatioInput *)jarg2; 
  arg3 = (int)jarg3; 
  arg4 = (double)jarg4; 
  result = (ArRatioInputKeydrive *)new ArRatioInputKeydrive(arg1,arg2,arg3,arg4);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_ArRatioInputKeydrive__SWIG_1(void * jarg1, void * jarg2, int jarg3) {
  void * jresult ;
  ArRobot *arg1 = (ArRobot *) 0 ;
  ArActionRatioInput *arg2 = (ArActionRatioInput *) 0 ;
  int arg3 ;
  ArRatioInputKeydrive *result = 0 ;
  
  arg1 = (ArRobot *)jarg1; 
  arg2 = (ArActionRatioInput *)jarg2; 
  arg3 = (int)jarg3; 
  result = (ArRatioInputKeydrive *)new ArRatioInputKeydrive(arg1,arg2,arg3);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_ArRatioInputKeydrive__SWIG_2(void * jarg1, void * jarg2) {
  void * jresult ;
  ArRobot *arg1 = (ArRobot *) 0 ;
  ArActionRatioInput *arg2 = (ArActionRatioInput *) 0 ;
  ArRatioInputKeydrive *result = 0 ;
  
  arg1 = (ArRobot *)jarg1; 
  arg2 = (ArActionRatioInput *)jarg2; 
  result = (ArRatioInputKeydrive *)new ArRatioInputKeydrive(arg1,arg2);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_ArRatioInputKeydrive(void * jarg1) {
  ArRatioInputKeydrive *arg1 = (ArRatioInputKeydrive *) 0 ;
  
  arg1 = (ArRatioInputKeydrive *)jarg1; 
  delete arg1;
}


SWIGEXPORT void SWIGSTDCALL CSharp_ArRatioInputKeydrive_takeKeys(void * jarg1) {
  ArRatioInputKeydrive *arg1 = (ArRatioInputKeydrive *) 0 ;
  
  arg1 = (ArRatioInputKeydrive *)jarg1; 
  (arg1)->takeKeys();
}


SWIGEXPORT void SWIGSTDCALL CSharp_ArRatioInputKeydrive_giveUpKeys(void * jarg1) {
  ArRatioInputKeydrive *arg1 = (ArRatioInputKeydrive *) 0 ;
  
  arg1 = (ArRatioInputKeydrive *)jarg1; 
  (arg1)->giveUpKeys();
}


SWIGEXPORT void SWIGSTDCALL CSharp_ArRatioInputKeydrive_up(void * jarg1) {
  ArRatioInputKeydrive *arg1 = (ArRatioInputKeydrive *) 0 ;
  
  arg1 = (ArRatioInputKeydrive *)jarg1; 
  (arg1)->up();
}


SWIGEXPORT void SWIGSTDCALL CSharp_ArRatioInputKeydrive_down(void * jarg1) {
  ArRatioInputKeydrive *arg1 = (ArRatioInputKeydrive *) 0 ;
  
  arg1 = (ArRatioInputKeydrive *)jarg1; 
  (arg1)->down();
}


SWIGEXPORT void SWIGSTDCALL CSharp_ArRatioInputKeydrive_z(void * jarg1) {
  ArRatioInputKeydrive *arg1 = (ArRatioInputKeydrive *) 0 ;
  
  arg1 = (ArRatioInputKeydrive *)jarg1; 
  (arg1)->z();
}


SWIGEXPORT void SWIGSTDCALL CSharp_ArRatioInputKeydrive_x(void * jarg1) {
  ArRatioInputKeydrive *arg1 = (ArRatioInputKeydrive *) 0 ;
  
  arg1 = (ArRatioInputKeydrive *)jarg1; 
  (arg1)->x();
}


SWIGEXPORT void SWIGSTDCALL CSharp_ArRatioInputKeydrive_left(void * jarg1) {
  ArRatioInputKeydrive *arg1 = (ArRatioInputKeydrive *) 0 ;
  
  arg1 = (ArRatioInputKeydrive *)jarg1; 
  (arg1)->left();
}


SWIGEXPORT void SWIGSTDCALL CSharp_ArRatioInputKeydrive_right(void * jarg1) {
  ArRatioInputKeydrive *arg1 = (ArRatioInputKeydrive *) 0 ;
  
  arg1 = (ArRatioInputKeydrive *)jarg1; 
  (arg1)->right();
}


SWIGEXPORT void SWIGSTDCALL CSharp_ArRatioInputKeydrive_space(void * jarg1) {
  ArRatioInputKeydrive *arg1 = (ArRatioInputKeydrive *) 0 ;
  
  arg1 = (ArRatioInputKeydrive *)jarg1; 
  (arg1)->space();
}


SWIGEXPORT void * SWIGSTDCALL CSharp_ArRatioInputKeydrive_getFireCB(void * jarg1) {
  void * jresult ;
  ArRatioInputKeydrive *arg1 = (ArRatioInputKeydrive *) 0 ;
  ArFunctor *result = 0 ;
  
  arg1 = (ArRatioInputKeydrive *)jarg1; 
  result = (ArFunctor *)(arg1)->getFireCB();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_ArRatioInputRobotJoydrive__SWIG_0(void * jarg1, void * jarg2, int jarg3, unsigned int jarg4) {
  void * jresult ;
  ArRobot *arg1 = (ArRobot *) 0 ;
  ArActionRatioInput *arg2 = (ArActionRatioInput *) 0 ;
  int arg3 ;
  bool arg4 ;
  ArRatioInputRobotJoydrive *result = 0 ;
  
  arg1 = (ArRobot *)jarg1; 
  arg2 = (ArActionRatioInput *)jarg2; 
  arg3 = (int)jarg3; 
  arg4 = jarg4 ? true : false; 
  result = (ArRatioInputRobotJoydrive *)new ArRatioInputRobotJoydrive(arg1,arg2,arg3,arg4);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_ArRatioInputRobotJoydrive__SWIG_1(void * jarg1, void * jarg2, int jarg3) {
  void * jresult ;
  ArRobot *arg1 = (ArRobot *) 0 ;
  ArActionRatioInput *arg2 = (ArActionRatioInput *) 0 ;
  int arg3 ;
  ArRatioInputRobotJoydrive *result = 0 ;
  
  arg1 = (ArRobot *)jarg1; 
  arg2 = (ArActionRatioInput *)jarg2; 
  arg3 = (int)jarg3; 
  result = (ArRatioInputRobotJoydrive *)new ArRatioInputRobotJoydrive(arg1,arg2,arg3);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_ArRatioInputRobotJoydrive__SWIG_2(void * jarg1, void * jarg2) {
  void * jresult ;
  ArRobot *arg1 = (ArRobot *) 0 ;
  ArActionRatioInput *arg2 = (ArActionRatioInput *) 0 ;
  ArRatioInputRobotJoydrive *result = 0 ;
  
  arg1 = (ArRobot *)jarg1; 
  arg2 = (ArActionRatioInput *)jarg2; 
  result = (ArRatioInputRobotJoydrive *)new ArRatioInputRobotJoydrive(arg1,arg2);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_ArRatioInputRobotJoydrive(void * jarg1) {
  ArRatioInputRobotJoydrive *arg1 = (ArRatioInputRobotJoydrive *) 0 ;
  
  arg1 = (ArRatioInputRobotJoydrive *)jarg1; 
  delete arg1;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_ArRecurrentTask(void * jarg1) {
  ArRecurrentTask *arg1 = (ArRecurrentTask *) 0 ;
  
  arg1 = (ArRecurrentTask *)jarg1; 
  delete arg1;
}


SWIGEXPORT void SWIGSTDCALL CSharp_ArRecurrentTask_task(void * jarg1) {
  ArRecurrentTask *arg1 = (ArRecurrentTask *) 0 ;
  
  arg1 = (ArRecurrentTask *)jarg1; 
  (arg1)->task();
}


SWIGEXPORT void SWIGSTDCALL CSharp_ArRecurrentTask_go(void * jarg1) {
  ArRecurrentTask *arg1 = (ArRecurrentTask *) 0 ;
  
  arg1 = (ArRecurrentTask *)jarg1; 
  (arg1)->go();
}


SWIGEXPORT int SWIGSTDCALL CSharp_ArRecurrentTask_done(void * jarg1) {
  int jresult ;
  ArRecurrentTask *arg1 = (ArRecurrentTask *) 0 ;
  int result;
  
  arg1 = (ArRecurrentTask *)jarg1; 
  result = (int)(arg1)->done();
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_ArRecurrentTask_reset(void * jarg1) {
  ArRecurrentTask *arg1 = (ArRecurrentTask *) 0 ;
  
  arg1 = (ArRecurrentTask *)jarg1; 
  (arg1)->reset();
}


SWIGEXPORT void SWIGSTDCALL CSharp_ArRecurrentTask_kill(void * jarg1) {
  ArRecurrentTask *arg1 = (ArRecurrentTask *) 0 ;
  
  arg1 = (ArRecurrentTask *)jarg1; 
  (arg1)->kill();
}


SWIGEXPORT void * SWIGSTDCALL CSharp_ArRecurrentTask_runThread(void * jarg1, void * jarg2) {
  void * jresult ;
  ArRecurrentTask *arg1 = (ArRecurrentTask *) 0 ;
  void *arg2 = (void *) 0 ;
  void *result = 0 ;
  
  arg1 = (ArRecurrentTask *)jarg1; 
  arg2 = (void *)jarg2; 
  result = (void *)(arg1)->runThread(arg2);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_ArRobot__SWIG_0(char * jarg1, unsigned int jarg2, unsigned int jarg3, unsigned int jarg4, unsigned int jarg5) {
  void * jresult ;
  char *arg1 = (char *) 0 ;
  bool arg2 ;
  bool arg3 ;
  bool arg4 ;
  bool arg5 ;
  ArRobot *result = 0 ;
  
  arg1 = (char *)jarg1; 
  arg2 = jarg2 ? true : false; 
  arg3 = jarg3 ? true : false; 
  arg4 = jarg4 ? true : false; 
  arg5 = jarg5 ? true : false; 
  result = (ArRobot *)new ArRobot((char const *)arg1,arg2,arg3,arg4,arg5);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_ArRobot__SWIG_1(char * jarg1, unsigned int jarg2, unsigned int jarg3, unsigned int jarg4) {
  void * jresult ;
  char *arg1 = (char *) 0 ;
  bool arg2 ;
  bool arg3 ;
  bool arg4 ;
  ArRobot *result = 0 ;
  
  arg1 = (char *)jarg1; 
  arg2 = jarg2 ? true : false; 
  arg3 = jarg3 ? true : false; 
  arg4 = jarg4 ? true : false; 
  result = (ArRobot *)new ArRobot((char const *)arg1,arg2,arg3,arg4);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_ArRobot__SWIG_2(char * jarg1, unsigned int jarg2, unsigned int jarg3) {
  void * jresult ;
  char *arg1 = (char *) 0 ;
  bool arg2 ;
  bool arg3 ;
  ArRobot *result = 0 ;
  
  arg1 = (char *)jarg1; 
  arg2 = jarg2 ? true : false; 
  arg3 = jarg3 ? true : false; 
  result = (ArRobot *)new ArRobot((char const *)arg1,arg2,arg3);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_ArRobot__SWIG_3(char * jarg1, unsigned int jarg2) {
  void * jresult ;
  char *arg1 = (char *) 0 ;
  bool arg2 ;
  ArRobot *result = 0 ;
  
  arg1 = (char *)jarg1; 
  arg2 = jarg2 ? true : false; 
  result = (ArRobot *)new ArRobot((char const *)arg1,arg2);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_ArRobot__SWIG_4(char * jarg1) {
  void * jresult ;
  char *arg1 = (char *) 0 ;
  ArRobot *result = 0 ;
  
  arg1 = (char *)jarg1; 
  result = (ArRobot *)new ArRobot((char const *)arg1);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_ArRobot__SWIG_5() {
  void * jresult ;
  ArRobot *result = 0 ;
  
  result = (ArRobot *)new ArRobot();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_ArRobot(void * jarg1) {
  ArRobot *arg1 = (ArRobot *) 0 ;
  
  arg1 = (ArRobot *)jarg1; 
  delete arg1;
}


SWIGEXPORT void SWIGSTDCALL CSharp_ArRobot_run__SWIG_0(void * jarg1, unsigned int jarg2, unsigned int jarg3) {
  ArRobot *arg1 = (ArRobot *) 0 ;
  bool arg2 ;
  bool arg3 ;
  
  arg1 = (ArRobot *)jarg1; 
  arg2 = jarg2 ? true : false; 
  arg3 = jarg3 ? true : false; 
  (arg1)->run(arg2,arg3);
}


SWIGEXPORT void SWIGSTDCALL CSharp_ArRobot_run__SWIG_1(void * jarg1, unsigned int jarg2) {
  ArRobot *arg1 = (ArRobot *) 0 ;
  bool arg2 ;
  
  arg1 = (ArRobot *)jarg1; 
  arg2 = jarg2 ? true : false; 
  (arg1)->run(arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_ArRobot_runAsync__SWIG_0(void * jarg1, unsigned int jarg2, unsigned int jarg3) {
  ArRobot *arg1 = (ArRobot *) 0 ;
  bool arg2 ;
  bool arg3 ;
  
  arg1 = (ArRobot *)jarg1; 
  arg2 = jarg2 ? true : false; 
  arg3 = jarg3 ? true : false; 
  (arg1)->runAsync(arg2,arg3);
}


SWIGEXPORT void SWIGSTDCALL CSharp_ArRobot_runAsync__SWIG_1(void * jarg1, unsigned int jarg2) {
  ArRobot *arg1 = (ArRobot *) 0 ;
  bool arg2 ;
  
  arg1 = (ArRobot *)jarg1; 
  arg2 = jarg2 ? true : false; 
  (arg1)->runAsync(arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_ArRobot_run__SWIG_2(void * jarg1) {
  ArRobot *arg1 = (ArRobot *) 0 ;
  
  arg1 = (ArRobot *)jarg1; 
  (arg1)->run();
}


SWIGEXPORT void SWIGSTDCALL CSharp_ArRobot_runAsync__SWIG_2(void * jarg1) {
  ArRobot *arg1 = (ArRobot *) 0 ;
  
  arg1 = (ArRobot *)jarg1; 
  (arg1)->runAsync();
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_ArRobot_isRunning(void * jarg1) {
  unsigned int jresult ;
  ArRobot *arg1 = (ArRobot *) 0 ;
  bool result;
  
  arg1 = (ArRobot *)jarg1; 
  result = (bool)((ArRobot const *)arg1)->isRunning();
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_ArRobot_stopRunning__SWIG_0(void * jarg1, unsigned int jarg2) {
  ArRobot *arg1 = (ArRobot *) 0 ;
  bool arg2 ;
  
  arg1 = (ArRobot *)jarg1; 
  arg2 = jarg2 ? true : false; 
  (arg1)->stopRunning(arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_ArRobot_stopRunning__SWIG_1(void * jarg1) {
  ArRobot *arg1 = (ArRobot *) 0 ;
  
  arg1 = (ArRobot *)jarg1; 
  (arg1)->stopRunning();
}


SWIGEXPORT void SWIGSTDCALL CSharp_ArRobot_setDeviceConnection(void * jarg1, void * jarg2) {
  ArRobot *arg1 = (ArRobot *) 0 ;
  ArDeviceConnection *arg2 = (ArDeviceConnection *) 0 ;
  
  arg1 = (ArRobot *)jarg1; 
  arg2 = (ArDeviceConnection *)jarg2; 
  (arg1)->setDeviceConnection(arg2);
}


SWIGEXPORT void * SWIGSTDCALL CSharp_ArRobot_getDeviceConnection(void * jarg1) {
  void * jresult ;
  ArRobot *arg1 = (ArRobot *) 0 ;
  ArDeviceConnection *result = 0 ;
  
  arg1 = (ArRobot *)jarg1; 
  result = (ArDeviceConnection *)((ArRobot const *)arg1)->getDeviceConnection();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_ArRobot_isConnected(void * jarg1) {
  unsigned int jresult ;
  ArRobot *arg1 = (ArRobot *) 0 ;
  bool result;
  
  arg1 = (ArRobot *)jarg1; 
  result = (bool)((ArRobot const *)arg1)->isConnected();
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_ArRobot_blockingConnect__SWIG_0(void * jarg1, unsigned int jarg2) {
  unsigned int jresult ;
  ArRobot *arg1 = (ArRobot *) 0 ;
  bool arg2 ;
  bool result;
  
  arg1 = (ArRobot *)jarg1; 
  arg2 = jarg2 ? true : false; 
  result = (bool)(arg1)->blockingConnect(arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_ArRobot_blockingConnect__SWIG_1(void * jarg1) {
  unsigned int jresult ;
  ArRobot *arg1 = (ArRobot *) 0 ;
  bool result;
  
  arg1 = (ArRobot *)jarg1; 
  result = (bool)(arg1)->blockingConnect();
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_ArRobot_asyncConnect(void * jarg1) {
  unsigned int jresult ;
  ArRobot *arg1 = (ArRobot *) 0 ;
  bool result;
  
  arg1 = (ArRobot *)jarg1; 
  result = (bool)(arg1)->asyncConnect();
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_ArRobot_disconnect(void * jarg1) {
  unsigned int jresult ;
  ArRobot *arg1 = (ArRobot *) 0 ;
  bool result;
  
  arg1 = (ArRobot *)jarg1; 
  result = (bool)(arg1)->disconnect();
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_ArRobot_clearDirectMotion(void * jarg1) {
  ArRobot *arg1 = (ArRobot *) 0 ;
  
  arg1 = (ArRobot *)jarg1; 
  (arg1)->clearDirectMotion();
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_ArRobot_isDirectMotion(void * jarg1) {
  unsigned int jresult ;
  ArRobot *arg1 = (ArRobot *) 0 ;
  bool result;
  
  arg1 = (ArRobot *)jarg1; 
  result = (bool)((ArRobot const *)arg1)->isDirectMotion();
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_ArRobot_stopStateReflection(void * jarg1) {
  ArRobot *arg1 = (ArRobot *) 0 ;
  
  arg1 = (ArRobot *)jarg1; 
  (arg1)->stopStateReflection();
}


SWIGEXPORT void SWIGSTDCALL CSharp_ArRobot_enableMotors(void * jarg1) {
  ArRobot *arg1 = (ArRobot *) 0 ;
  
  arg1 = (ArRobot *)jarg1; 
  (arg1)->enableMotors();
}


SWIGEXPORT void SWIGSTDCALL CSharp_ArRobot_disableMotors(void * jarg1) {
  ArRobot *arg1 = (ArRobot *) 0 ;
  
  arg1 = (ArRobot *)jarg1; 
  (arg1)->disableMotors();
}


SWIGEXPORT void SWIGSTDCALL CSharp_ArRobot_enableSonar(void * jarg1) {
  ArRobot *arg1 = (ArRobot *) 0 ;
  
  arg1 = (ArRobot *)jarg1; 
  (arg1)->enableSonar();
}


SWIGEXPORT void SWIGSTDCALL CSharp_ArRobot_enableAutonomousDrivingSonar(void * jarg1) {
  ArRobot *arg1 = (ArRobot *) 0 ;
  
  arg1 = (ArRobot *)jarg1; 
  (arg1)->enableAutonomousDrivingSonar();
}


SWIGEXPORT void SWIGSTDCALL CSharp_ArRobot_disableSonar(void * jarg1) {
  ArRobot *arg1 = (ArRobot *) 0 ;
  
  arg1 = (ArRobot *)jarg1; 
  (arg1)->disableSonar();
}


SWIGEXPORT void SWIGSTDCALL CSharp_ArRobot_stop(void * jarg1) {
  ArRobot *arg1 = (ArRobot *) 0 ;
  
  arg1 = (ArRobot *)jarg1; 
  (arg1)->stop();
}


SWIGEXPORT void SWIGSTDCALL CSharp_ArRobot_setVel(void * jarg1, double jarg2) {
  ArRobot *arg1 = (ArRobot *) 0 ;
  double arg2 ;
  
  arg1 = (ArRobot *)jarg1; 
  arg2 = (double)jarg2; 
  (arg1)->setVel(arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_ArRobot_setVel2(void * jarg1, double jarg2, double jarg3) {
  ArRobot *arg1 = (ArRobot *) 0 ;
  double arg2 ;
  double arg3 ;
  
  arg1 = (ArRobot *)jarg1; 
  arg2 = (double)jarg2; 
  arg3 = (double)jarg3; 
  (arg1)->setVel2(arg2,arg3);
}


SWIGEXPORT void SWIGSTDCALL CSharp_ArRobot_move(void * jarg1, double jarg2) {
  ArRobot *arg1 = (ArRobot *) 0 ;
  double arg2 ;
  
  arg1 = (ArRobot *)jarg1; 
  arg2 = (double)jarg2; 
  (arg1)->move(arg2);
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_ArRobot_isMoveDone__SWIG_0(void * jarg1, double jarg2) {
  unsigned int jresult ;
  ArRobot *arg1 = (ArRobot *) 0 ;
  double arg2 ;
  bool result;
  
  arg1 = (ArRobot *)jarg1; 
  arg2 = (double)jarg2; 
  result = (bool)(arg1)->isMoveDone(arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_ArRobot_isMoveDone__SWIG_1(void * jarg1) {
  unsigned int jresult ;
  ArRobot *arg1 = (ArRobot *) 0 ;
  bool result;
  
  arg1 = (ArRobot *)jarg1; 
  result = (bool)(arg1)->isMoveDone();
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_ArRobot_setMoveDoneDist(void * jarg1, double jarg2) {
  ArRobot *arg1 = (ArRobot *) 0 ;
  double arg2 ;
  
  arg1 = (ArRobot *)jarg1; 
  arg2 = (double)jarg2; 
  (arg1)->setMoveDoneDist(arg2);
}


SWIGEXPORT double SWIGSTDCALL CSharp_ArRobot_getMoveDoneDist(void * jarg1) {
  double jresult ;
  ArRobot *arg1 = (ArRobot *) 0 ;
  double result;
  
  arg1 = (ArRobot *)jarg1; 
  result = (double)(arg1)->getMoveDoneDist();
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_ArRobot_setHeading(void * jarg1, double jarg2) {
  ArRobot *arg1 = (ArRobot *) 0 ;
  double arg2 ;
  
  arg1 = (ArRobot *)jarg1; 
  arg2 = (double)jarg2; 
  (arg1)->setHeading(arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_ArRobot_setRotVel(void * jarg1, double jarg2) {
  ArRobot *arg1 = (ArRobot *) 0 ;
  double arg2 ;
  
  arg1 = (ArRobot *)jarg1; 
  arg2 = (double)jarg2; 
  (arg1)->setRotVel(arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_ArRobot_setDeltaHeading(void * jarg1, double jarg2) {
  ArRobot *arg1 = (ArRobot *) 0 ;
  double arg2 ;
  
  arg1 = (ArRobot *)jarg1; 
  arg2 = (double)jarg2; 
  (arg1)->setDeltaHeading(arg2);
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_ArRobot_isHeadingDone__SWIG_0(void * jarg1, double jarg2) {
  unsigned int jresult ;
  ArRobot *arg1 = (ArRobot *) 0 ;
  double arg2 ;
  bool result;
  
  arg1 = (ArRobot *)jarg1; 
  arg2 = (double)jarg2; 
  result = (bool)((ArRobot const *)arg1)->isHeadingDone(arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_ArRobot_isHeadingDone__SWIG_1(void * jarg1) {
  unsigned int jresult ;
  ArRobot *arg1 = (ArRobot *) 0 ;
  bool result;
  
  arg1 = (ArRobot *)jarg1; 
  result = (bool)((ArRobot const *)arg1)->isHeadingDone();
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_ArRobot_setHeadingDoneDiff(void * jarg1, double jarg2) {
  ArRobot *arg1 = (ArRobot *) 0 ;
  double arg2 ;
  
  arg1 = (ArRobot *)jarg1; 
  arg2 = (double)jarg2; 
  (arg1)->setHeadingDoneDiff(arg2);
}


SWIGEXPORT double SWIGSTDCALL CSharp_ArRobot_getHeadingDoneDiff(void * jarg1) {
  double jresult ;
  ArRobot *arg1 = (ArRobot *) 0 ;
  double result;
  
  arg1 = (ArRobot *)jarg1; 
  result = (double)((ArRobot const *)arg1)->getHeadingDoneDiff();
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_ArRobot_setLatVel(void * jarg1, double jarg2) {
  ArRobot *arg1 = (ArRobot *) 0 ;
  double arg2 ;
  
  arg1 = (ArRobot *)jarg1; 
  arg2 = (double)jarg2; 
  (arg1)->setLatVel(arg2);
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_ArRobot_isStopped__SWIG_0(void * jarg1, double jarg2, double jarg3, double jarg4) {
  unsigned int jresult ;
  ArRobot *arg1 = (ArRobot *) 0 ;
  double arg2 ;
  double arg3 ;
  double arg4 ;
  bool result;
  
  arg1 = (ArRobot *)jarg1; 
  arg2 = (double)jarg2; 
  arg3 = (double)jarg3; 
  arg4 = (double)jarg4; 
  result = (bool)(arg1)->isStopped(arg2,arg3,arg4);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_ArRobot_isStopped__SWIG_1(void * jarg1, double jarg2, double jarg3) {
  unsigned int jresult ;
  ArRobot *arg1 = (ArRobot *) 0 ;
  double arg2 ;
  double arg3 ;
  bool result;
  
  arg1 = (ArRobot *)jarg1; 
  arg2 = (double)jarg2; 
  arg3 = (double)jarg3; 
  result = (bool)(arg1)->isStopped(arg2,arg3);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_ArRobot_isStopped__SWIG_2(void * jarg1, double jarg2) {
  unsigned int jresult ;
  ArRobot *arg1 = (ArRobot *) 0 ;
  double arg2 ;
  bool result;
  
  arg1 = (ArRobot *)jarg1; 
  arg2 = (double)jarg2; 
  result = (bool)(arg1)->isStopped(arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_ArRobot_isStopped__SWIG_3(void * jarg1) {
  unsigned int jresult ;
  ArRobot *arg1 = (ArRobot *) 0 ;
  bool result;
  
  arg1 = (ArRobot *)jarg1; 
  result = (bool)(arg1)->isStopped();
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_ArRobot_setStoppedVels(void * jarg1, double jarg2, double jarg3, double jarg4) {
  ArRobot *arg1 = (ArRobot *) 0 ;
  double arg2 ;
  double arg3 ;
  double arg4 ;
  
  arg1 = (ArRobot *)jarg1; 
  arg2 = (double)jarg2; 
  arg3 = (double)jarg3; 
  arg4 = (double)jarg4; 
  (arg1)->setStoppedVels(arg2,arg3,arg4);
}


SWIGEXPORT void SWIGSTDCALL CSharp_ArRobot_setDirectMotionPrecedenceTime(void * jarg1, int jarg2) {
  ArRobot *arg1 = (ArRobot *) 0 ;
  int arg2 ;
  
  arg1 = (ArRobot *)jarg1; 
  arg2 = (int)jarg2; 
  (arg1)->setDirectMotionPrecedenceTime(arg2);
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_ArRobot_getDirectMotionPrecedenceTime(void * jarg1) {
  unsigned int jresult ;
  ArRobot *arg1 = (ArRobot *) 0 ;
  unsigned int result;
  
  arg1 = (ArRobot *)jarg1; 
  result = (unsigned int)((ArRobot const *)arg1)->getDirectMotionPrecedenceTime();
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_ArRobot_com(void * jarg1, unsigned char jarg2) {
  unsigned int jresult ;
  ArRobot *arg1 = (ArRobot *) 0 ;
  unsigned char arg2 ;
  bool result;
  
  arg1 = (ArRobot *)jarg1; 
  arg2 = (unsigned char)jarg2; 
  result = (bool)(arg1)->com(arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_ArRobot_comInt(void * jarg1, unsigned char jarg2, short jarg3) {
  unsigned int jresult ;
  ArRobot *arg1 = (ArRobot *) 0 ;
  unsigned char arg2 ;
  short arg3 ;
  bool result;
  
  arg1 = (ArRobot *)jarg1; 
  arg2 = (unsigned char)jarg2; 
  arg3 = (short)jarg3; 
  result = (bool)(arg1)->comInt(arg2,arg3);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_ArRobot_com2Bytes(void * jarg1, unsigned char jarg2, char jarg3, char jarg4) {
  unsigned int jresult ;
  ArRobot *arg1 = (ArRobot *) 0 ;
  unsigned char arg2 ;
  char arg3 ;
  char arg4 ;
  bool result;
  
  arg1 = (ArRobot *)jarg1; 
  arg2 = (unsigned char)jarg2; 
  arg3 = (char)jarg3; 
  arg4 = (char)jarg4; 
  result = (bool)(arg1)->com2Bytes(arg2,arg3,arg4);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_ArRobot_comStr(void * jarg1, unsigned char jarg2, char * jarg3) {
  unsigned int jresult ;
  ArRobot *arg1 = (ArRobot *) 0 ;
  unsigned char arg2 ;
  char *arg3 = (char *) 0 ;
  bool result;
  
  arg1 = (ArRobot *)jarg1; 
  arg2 = (unsigned char)jarg2; 
  arg3 = (char *)jarg3; 
  result = (bool)(arg1)->comStr(arg2,(char const *)arg3);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_ArRobot_comStrN(void * jarg1, unsigned char jarg2, char * jarg3, int jarg4) {
  unsigned int jresult ;
  ArRobot *arg1 = (ArRobot *) 0 ;
  unsigned char arg2 ;
  char *arg3 = (char *) 0 ;
  int arg4 ;
  bool result;
  
  arg1 = (ArRobot *)jarg1; 
  arg2 = (unsigned char)jarg2; 
  arg3 = (char *)jarg3; 
  arg4 = (int)jarg4; 
  result = (bool)(arg1)->comStrN(arg2,(char const *)arg3,arg4);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_ArRobot_comDataN(void * jarg1, unsigned char jarg2, char * jarg3, int jarg4) {
  unsigned int jresult ;
  ArRobot *arg1 = (ArRobot *) 0 ;
  unsigned char arg2 ;
  char *arg3 = (char *) 0 ;
  int arg4 ;
  bool result;
  
  arg1 = (ArRobot *)jarg1; 
  arg2 = (unsigned char)jarg2; 
  arg3 = (char *)jarg3; 
  arg4 = (int)jarg4; 
  result = (bool)(arg1)->comDataN(arg2,(char const *)arg3,arg4);
  jresult = result; 
  return jresult;
}


SWIGEXPORT char * SWIGSTDCALL CSharp_ArRobot_getRobotName(void * jarg1) {
  char * jresult ;
  ArRobot *arg1 = (ArRobot *) 0 ;
  char *result = 0 ;
  
  arg1 = (ArRobot *)jarg1; 
  result = (char *)((ArRobot const *)arg1)->getRobotName();
  jresult = SWIG_csharp_string_callback((const char *)result); 
  return jresult;
}


SWIGEXPORT char * SWIGSTDCALL CSharp_ArRobot_getRobotType(void * jarg1) {
  char * jresult ;
  ArRobot *arg1 = (ArRobot *) 0 ;
  char *result = 0 ;
  
  arg1 = (ArRobot *)jarg1; 
  result = (char *)((ArRobot const *)arg1)->getRobotType();
  jresult = SWIG_csharp_string_callback((const char *)result); 
  return jresult;
}


SWIGEXPORT char * SWIGSTDCALL CSharp_ArRobot_getRobotSubType(void * jarg1) {
  char * jresult ;
  ArRobot *arg1 = (ArRobot *) 0 ;
  char *result = 0 ;
  
  arg1 = (ArRobot *)jarg1; 
  result = (char *)((ArRobot const *)arg1)->getRobotSubType();
  jresult = SWIG_csharp_string_callback((const char *)result); 
  return jresult;
}


SWIGEXPORT double SWIGSTDCALL CSharp_ArRobot_getAbsoluteMaxTransVel(void * jarg1) {
  double jresult ;
  ArRobot *arg1 = (ArRobot *) 0 ;
  double result;
  
  arg1 = (ArRobot *)jarg1; 
  result = (double)((ArRobot const *)arg1)->getAbsoluteMaxTransVel();
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_ArRobot_setAbsoluteMaxTransVel(void * jarg1, double jarg2) {
  unsigned int jresult ;
  ArRobot *arg1 = (ArRobot *) 0 ;
  double arg2 ;
  bool result;
  
  arg1 = (ArRobot *)jarg1; 
  arg2 = (double)jarg2; 
  result = (bool)(arg1)->setAbsoluteMaxTransVel(arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT double SWIGSTDCALL CSharp_ArRobot_getAbsoluteMaxTransNegVel(void * jarg1) {
  double jresult ;
  ArRobot *arg1 = (ArRobot *) 0 ;
  double result;
  
  arg1 = (ArRobot *)jarg1; 
  result = (double)((ArRobot const *)arg1)->getAbsoluteMaxTransNegVel();
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_ArRobot_setAbsoluteMaxTransNegVel(void * jarg1, double jarg2) {
  unsigned int jresult ;
  ArRobot *arg1 = (ArRobot *) 0 ;
  double arg2 ;
  bool result;
  
  arg1 = (ArRobot *)jarg1; 
  arg2 = (double)jarg2; 
  result = (bool)(arg1)->setAbsoluteMaxTransNegVel(arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT double SWIGSTDCALL CSharp_ArRobot_getAbsoluteMaxTransAccel(void * jarg1) {
  double jresult ;
  ArRobot *arg1 = (ArRobot *) 0 ;
  double result;
  
  arg1 = (ArRobot *)jarg1; 
  result = (double)((ArRobot const *)arg1)->getAbsoluteMaxTransAccel();
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_ArRobot_setAbsoluteMaxTransAccel(void * jarg1, double jarg2) {
  unsigned int jresult ;
  ArRobot *arg1 = (ArRobot *) 0 ;
  double arg2 ;
  bool result;
  
  arg1 = (ArRobot *)jarg1; 
  arg2 = (double)jarg2; 
  result = (bool)(arg1)->setAbsoluteMaxTransAccel(arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT double SWIGSTDCALL CSharp_ArRobot_getAbsoluteMaxTransDecel(void * jarg1) {
  double jresult ;
  ArRobot *arg1 = (ArRobot *) 0 ;
  double result;
  
  arg1 = (ArRobot *)jarg1; 
  result = (double)((ArRobot const *)arg1)->getAbsoluteMaxTransDecel();
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_ArRobot_setAbsoluteMaxTransDecel(void * jarg1, double jarg2) {
  unsigned int jresult ;
  ArRobot *arg1 = (ArRobot *) 0 ;
  double arg2 ;
  bool result;
  
  arg1 = (ArRobot *)jarg1; 
  arg2 = (double)jarg2; 
  result = (bool)(arg1)->setAbsoluteMaxTransDecel(arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT double SWIGSTDCALL CSharp_ArRobot_getAbsoluteMaxRotVel(void * jarg1) {
  double jresult ;
  ArRobot *arg1 = (ArRobot *) 0 ;
  double result;
  
  arg1 = (ArRobot *)jarg1; 
  result = (double)((ArRobot const *)arg1)->getAbsoluteMaxRotVel();
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_ArRobot_setAbsoluteMaxRotVel(void * jarg1, double jarg2) {
  unsigned int jresult ;
  ArRobot *arg1 = (ArRobot *) 0 ;
  double arg2 ;
  bool result;
  
  arg1 = (ArRobot *)jarg1; 
  arg2 = (double)jarg2; 
  result = (bool)(arg1)->setAbsoluteMaxRotVel(arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT double SWIGSTDCALL CSharp_ArRobot_getAbsoluteMaxRotAccel(void * jarg1) {
  double jresult ;
  ArRobot *arg1 = (ArRobot *) 0 ;
  double result;
  
  arg1 = (ArRobot *)jarg1; 
  result = (double)((ArRobot const *)arg1)->getAbsoluteMaxRotAccel();
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_ArRobot_setAbsoluteMaxRotAccel(void * jarg1, double jarg2) {
  unsigned int jresult ;
  ArRobot *arg1 = (ArRobot *) 0 ;
  double arg2 ;
  bool result;
  
  arg1 = (ArRobot *)jarg1; 
  arg2 = (double)jarg2; 
  result = (bool)(arg1)->setAbsoluteMaxRotAccel(arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT double SWIGSTDCALL CSharp_ArRobot_getAbsoluteMaxRotDecel(void * jarg1) {
  double jresult ;
  ArRobot *arg1 = (ArRobot *) 0 ;
  double result;
  
  arg1 = (ArRobot *)jarg1; 
  result = (double)((ArRobot const *)arg1)->getAbsoluteMaxRotDecel();
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_ArRobot_setAbsoluteMaxRotDecel(void * jarg1, double jarg2) {
  unsigned int jresult ;
  ArRobot *arg1 = (ArRobot *) 0 ;
  double arg2 ;
  bool result;
  
  arg1 = (ArRobot *)jarg1; 
  arg2 = (double)jarg2; 
  result = (bool)(arg1)->setAbsoluteMaxRotDecel(arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT double SWIGSTDCALL CSharp_ArRobot_getAbsoluteMaxLatVel(void * jarg1) {
  double jresult ;
  ArRobot *arg1 = (ArRobot *) 0 ;
  double result;
  
  arg1 = (ArRobot *)jarg1; 
  result = (double)((ArRobot const *)arg1)->getAbsoluteMaxLatVel();
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_ArRobot_setAbsoluteMaxLatVel(void * jarg1, double jarg2) {
  unsigned int jresult ;
  ArRobot *arg1 = (ArRobot *) 0 ;
  double arg2 ;
  bool result;
  
  arg1 = (ArRobot *)jarg1; 
  arg2 = (double)jarg2; 
  result = (bool)(arg1)->setAbsoluteMaxLatVel(arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT double SWIGSTDCALL CSharp_ArRobot_getAbsoluteMaxLatAccel(void * jarg1) {
  double jresult ;
  ArRobot *arg1 = (ArRobot *) 0 ;
  double result;
  
  arg1 = (ArRobot *)jarg1; 
  result = (double)((ArRobot const *)arg1)->getAbsoluteMaxLatAccel();
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_ArRobot_setAbsoluteMaxLatAccel(void * jarg1, double jarg2) {
  unsigned int jresult ;
  ArRobot *arg1 = (ArRobot *) 0 ;
  double arg2 ;
  bool result;
  
  arg1 = (ArRobot *)jarg1; 
  arg2 = (double)jarg2; 
  result = (bool)(arg1)->setAbsoluteMaxLatAccel(arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT double SWIGSTDCALL CSharp_ArRobot_getAbsoluteMaxLatDecel(void * jarg1) {
  double jresult ;
  ArRobot *arg1 = (ArRobot *) 0 ;
  double result;
  
  arg1 = (ArRobot *)jarg1; 
  result = (double)((ArRobot const *)arg1)->getAbsoluteMaxLatDecel();
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_ArRobot_setAbsoluteMaxLatDecel(void * jarg1, double jarg2) {
  unsigned int jresult ;
  ArRobot *arg1 = (ArRobot *) 0 ;
  double arg2 ;
  bool result;
  
  arg1 = (ArRobot *)jarg1; 
  arg2 = (double)jarg2; 
  result = (bool)(arg1)->setAbsoluteMaxLatDecel(arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_ArRobot_getPose(void * jarg1) {
  void * jresult ;
  ArRobot *arg1 = (ArRobot *) 0 ;
  ArPose result;
  
  arg1 = (ArRobot *)jarg1; 
  result = ((ArRobot const *)arg1)->getPose();
  jresult = new ArPose((const ArPose &)result); 
  return jresult;
}


SWIGEXPORT double SWIGSTDCALL CSharp_ArRobot_getX(void * jarg1) {
  double jresult ;
  ArRobot *arg1 = (ArRobot *) 0 ;
  double result;
  
  arg1 = (ArRobot *)jarg1; 
  result = (double)((ArRobot const *)arg1)->getX();
  jresult = result; 
  return jresult;
}


SWIGEXPORT double SWIGSTDCALL CSharp_ArRobot_getY(void * jarg1) {
  double jresult ;
  ArRobot *arg1 = (ArRobot *) 0 ;
  double result;
  
  arg1 = (ArRobot *)jarg1; 
  result = (double)((ArRobot const *)arg1)->getY();
  jresult = result; 
  return jresult;
}


SWIGEXPORT double SWIGSTDCALL CSharp_ArRobot_getTh(void * jarg1) {
  double jresult ;
  ArRobot *arg1 = (ArRobot *) 0 ;
  double result;
  
  arg1 = (ArRobot *)jarg1; 
  result = (double)((ArRobot const *)arg1)->getTh();
  jresult = result; 
  return jresult;
}


SWIGEXPORT double SWIGSTDCALL CSharp_ArRobot_findDistanceTo(void * jarg1, void * jarg2) {
  double jresult ;
  ArRobot *arg1 = (ArRobot *) 0 ;
  ArPose arg2 ;
  ArPose const *argp2 ;
  double result;
  
  arg1 = (ArRobot *)jarg1; 
  argp2 = (ArPose *)jarg2; 
  if (!argp2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Attempt to dereference null ArPose const", 0);
    return 0;
  }
  arg2 = *argp2; 
  result = (double)(arg1)->findDistanceTo(arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT double SWIGSTDCALL CSharp_ArRobot_findAngleTo(void * jarg1, void * jarg2) {
  double jresult ;
  ArRobot *arg1 = (ArRobot *) 0 ;
  ArPose arg2 ;
  ArPose const *argp2 ;
  double result;
  
  arg1 = (ArRobot *)jarg1; 
  argp2 = (ArPose *)jarg2; 
  if (!argp2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Attempt to dereference null ArPose const", 0);
    return 0;
  }
  arg2 = *argp2; 
  result = (double)(arg1)->findAngleTo(arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT double SWIGSTDCALL CSharp_ArRobot_findDeltaHeadingTo(void * jarg1, void * jarg2) {
  double jresult ;
  ArRobot *arg1 = (ArRobot *) 0 ;
  ArPose arg2 ;
  ArPose const *argp2 ;
  double result;
  
  arg1 = (ArRobot *)jarg1; 
  argp2 = (ArPose *)jarg2; 
  if (!argp2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Attempt to dereference null ArPose const", 0);
    return 0;
  }
  arg2 = *argp2; 
  result = (double)(arg1)->findDeltaHeadingTo(arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT double SWIGSTDCALL CSharp_ArRobot_getVel(void * jarg1) {
  double jresult ;
  ArRobot *arg1 = (ArRobot *) 0 ;
  double result;
  
  arg1 = (ArRobot *)jarg1; 
  result = (double)((ArRobot const *)arg1)->getVel();
  jresult = result; 
  return jresult;
}


SWIGEXPORT double SWIGSTDCALL CSharp_ArRobot_getRotVel(void * jarg1) {
  double jresult ;
  ArRobot *arg1 = (ArRobot *) 0 ;
  double result;
  
  arg1 = (ArRobot *)jarg1; 
  result = (double)((ArRobot const *)arg1)->getRotVel();
  jresult = result; 
  return jresult;
}


SWIGEXPORT double SWIGSTDCALL CSharp_ArRobot_getLatVel(void * jarg1) {
  double jresult ;
  ArRobot *arg1 = (ArRobot *) 0 ;
  double result;
  
  arg1 = (ArRobot *)jarg1; 
  result = (double)((ArRobot const *)arg1)->getLatVel();
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_ArRobot_hasLatVel(void * jarg1) {
  unsigned int jresult ;
  ArRobot *arg1 = (ArRobot *) 0 ;
  bool result;
  
  arg1 = (ArRobot *)jarg1; 
  result = (bool)((ArRobot const *)arg1)->hasLatVel();
  jresult = result; 
  return jresult;
}


SWIGEXPORT double SWIGSTDCALL CSharp_ArRobot_getRobotRadius(void * jarg1) {
  double jresult ;
  ArRobot *arg1 = (ArRobot *) 0 ;
  double result;
  
  arg1 = (ArRobot *)jarg1; 
  result = (double)((ArRobot const *)arg1)->getRobotRadius();
  jresult = result; 
  return jresult;
}


SWIGEXPORT double SWIGSTDCALL CSharp_ArRobot_getRobotWidth(void * jarg1) {
  double jresult ;
  ArRobot *arg1 = (ArRobot *) 0 ;
  double result;
  
  arg1 = (ArRobot *)jarg1; 
  result = (double)((ArRobot const *)arg1)->getRobotWidth();
  jresult = result; 
  return jresult;
}


SWIGEXPORT double SWIGSTDCALL CSharp_ArRobot_getRobotLength(void * jarg1) {
  double jresult ;
  ArRobot *arg1 = (ArRobot *) 0 ;
  double result;
  
  arg1 = (ArRobot *)jarg1; 
  result = (double)((ArRobot const *)arg1)->getRobotLength();
  jresult = result; 
  return jresult;
}


SWIGEXPORT double SWIGSTDCALL CSharp_ArRobot_getRobotLengthFront(void * jarg1) {
  double jresult ;
  ArRobot *arg1 = (ArRobot *) 0 ;
  double result;
  
  arg1 = (ArRobot *)jarg1; 
  result = (double)((ArRobot const *)arg1)->getRobotLengthFront();
  jresult = result; 
  return jresult;
}


SWIGEXPORT double SWIGSTDCALL CSharp_ArRobot_getRobotLengthRear(void * jarg1) {
  double jresult ;
  ArRobot *arg1 = (ArRobot *) 0 ;
  double result;
  
  arg1 = (ArRobot *)jarg1; 
  result = (double)((ArRobot const *)arg1)->getRobotLengthRear();
  jresult = result; 
  return jresult;
}


SWIGEXPORT double SWIGSTDCALL CSharp_ArRobot_getRobotDiagonal(void * jarg1) {
  double jresult ;
  ArRobot *arg1 = (ArRobot *) 0 ;
  double result;
  
  arg1 = (ArRobot *)jarg1; 
  result = (double)((ArRobot const *)arg1)->getRobotDiagonal();
  jresult = result; 
  return jresult;
}


SWIGEXPORT double SWIGSTDCALL CSharp_ArRobot_getBatteryVoltage(void * jarg1) {
  double jresult ;
  ArRobot *arg1 = (ArRobot *) 0 ;
  double result;
  
  arg1 = (ArRobot *)jarg1; 
  result = (double)((ArRobot const *)arg1)->getBatteryVoltage();
  jresult = result; 
  return jresult;
}


SWIGEXPORT double SWIGSTDCALL CSharp_ArRobot_getBatteryVoltageNow(void * jarg1) {
  double jresult ;
  ArRobot *arg1 = (ArRobot *) 0 ;
  double result;
  
  arg1 = (ArRobot *)jarg1; 
  result = (double)((ArRobot const *)arg1)->getBatteryVoltageNow();
  jresult = result; 
  return jresult;
}


SWIGEXPORT double SWIGSTDCALL CSharp_ArRobot_getRealBatteryVoltage(void * jarg1) {
  double jresult ;
  ArRobot *arg1 = (ArRobot *) 0 ;
  double result;
  
  arg1 = (ArRobot *)jarg1; 
  result = (double)((ArRobot const *)arg1)->getRealBatteryVoltage();
  jresult = result; 
  return jresult;
}


SWIGEXPORT double SWIGSTDCALL CSharp_ArRobot_getRealBatteryVoltageNow(void * jarg1) {
  double jresult ;
  ArRobot *arg1 = (ArRobot *) 0 ;
  double result;
  
  arg1 = (ArRobot *)jarg1; 
  result = (double)((ArRobot const *)arg1)->getRealBatteryVoltageNow();
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_ArRobot_haveStateOfCharge(void * jarg1) {
  unsigned int jresult ;
  ArRobot *arg1 = (ArRobot *) 0 ;
  bool result;
  
  arg1 = (ArRobot *)jarg1; 
  result = (bool)((ArRobot const *)arg1)->haveStateOfCharge();
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_ArRobot_hasStateOfCharge(void * jarg1) {
  unsigned int jresult ;
  ArRobot *arg1 = (ArRobot *) 0 ;
  bool result;
  
  arg1 = (ArRobot *)jarg1; 
  result = (bool)((ArRobot const *)arg1)->hasStateOfCharge();
  jresult = result; 
  return jresult;
}


SWIGEXPORT double SWIGSTDCALL CSharp_ArRobot_getStateOfCharge(void * jarg1) {
  double jresult ;
  ArRobot *arg1 = (ArRobot *) 0 ;
  double result;
  
  arg1 = (ArRobot *)jarg1; 
  result = (double)((ArRobot const *)arg1)->getStateOfCharge();
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_ArRobot_getStateOfChargeSetTime(void * jarg1) {
  void * jresult ;
  ArRobot *arg1 = (ArRobot *) 0 ;
  ArTime result;
  
  arg1 = (ArRobot *)jarg1; 
  result = ((ArRobot const *)arg1)->getStateOfChargeSetTime();
  jresult = new ArTime((const ArTime &)result); 
  return jresult;
}


SWIGEXPORT double SWIGSTDCALL CSharp_ArRobot_getStateOfChargeLow(void * jarg1) {
  double jresult ;
  ArRobot *arg1 = (ArRobot *) 0 ;
  double result;
  
  arg1 = (ArRobot *)jarg1; 
  result = (double)((ArRobot const *)arg1)->getStateOfChargeLow();
  jresult = result; 
  return jresult;
}


SWIGEXPORT double SWIGSTDCALL CSharp_ArRobot_getStateOfChargeShutdown(void * jarg1) {
  double jresult ;
  ArRobot *arg1 = (ArRobot *) 0 ;
  double result;
  
  arg1 = (ArRobot *)jarg1; 
  result = (double)((ArRobot const *)arg1)->getStateOfChargeShutdown();
  jresult = result; 
  return jresult;
}


SWIGEXPORT double SWIGSTDCALL CSharp_ArRobot_getLeftVel(void * jarg1) {
  double jresult ;
  ArRobot *arg1 = (ArRobot *) 0 ;
  double result;
  
  arg1 = (ArRobot *)jarg1; 
  result = (double)((ArRobot const *)arg1)->getLeftVel();
  jresult = result; 
  return jresult;
}


SWIGEXPORT double SWIGSTDCALL CSharp_ArRobot_getRightVel(void * jarg1) {
  double jresult ;
  ArRobot *arg1 = (ArRobot *) 0 ;
  double result;
  
  arg1 = (ArRobot *)jarg1; 
  result = (double)((ArRobot const *)arg1)->getRightVel();
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_ArRobot_getStallValue(void * jarg1) {
  int jresult ;
  ArRobot *arg1 = (ArRobot *) 0 ;
  int result;
  
  arg1 = (ArRobot *)jarg1; 
  result = (int)((ArRobot const *)arg1)->getStallValue();
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_ArRobot_isLeftMotorStalled(void * jarg1) {
  unsigned int jresult ;
  ArRobot *arg1 = (ArRobot *) 0 ;
  bool result;
  
  arg1 = (ArRobot *)jarg1; 
  result = (bool)((ArRobot const *)arg1)->isLeftMotorStalled();
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_ArRobot_isRightMotorStalled(void * jarg1) {
  unsigned int jresult ;
  ArRobot *arg1 = (ArRobot *) 0 ;
  bool result;
  
  arg1 = (ArRobot *)jarg1; 
  result = (bool)((ArRobot const *)arg1)->isRightMotorStalled();
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_ArRobot_isFrontBumperTriggered(void * jarg1) {
  unsigned int jresult ;
  ArRobot *arg1 = (ArRobot *) 0 ;
  bool result;
  
  arg1 = (ArRobot *)jarg1; 
  result = (bool)((ArRobot const *)arg1)->isFrontBumperTriggered();
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_ArRobot_isRearBumperTriggered(void * jarg1) {
  unsigned int jresult ;
  ArRobot *arg1 = (ArRobot *) 0 ;
  bool result;
  
  arg1 = (ArRobot *)jarg1; 
  result = (bool)((ArRobot const *)arg1)->isRearBumperTriggered();
  jresult = result; 
  return jresult;
}


SWIGEXPORT double SWIGSTDCALL CSharp_ArRobot_getControl(void * jarg1) {
  double jresult ;
  ArRobot *arg1 = (ArRobot *) 0 ;
  double result;
  
  arg1 = (ArRobot *)jarg1; 
  result = (double)((ArRobot const *)arg1)->getControl();
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_ArRobot_setKeepControlRaw(void * jarg1, unsigned int jarg2) {
  ArRobot *arg1 = (ArRobot *) 0 ;
  bool arg2 ;
  
  arg1 = (ArRobot *)jarg1; 
  arg2 = jarg2 ? true : false; 
  (arg1)->setKeepControlRaw(arg2);
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_ArRobot_getKeepControlRaw(void * jarg1) {
  unsigned int jresult ;
  ArRobot *arg1 = (ArRobot *) 0 ;
  bool result;
  
  arg1 = (ArRobot *)jarg1; 
  result = (bool)(arg1)->getKeepControlRaw();
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_ArRobot_getFlags(void * jarg1) {
  int jresult ;
  ArRobot *arg1 = (ArRobot *) 0 ;
  int result;
  
  arg1 = (ArRobot *)jarg1; 
  result = (int)((ArRobot const *)arg1)->getFlags();
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_ArRobot_getFaultFlags(void * jarg1) {
  int jresult ;
  ArRobot *arg1 = (ArRobot *) 0 ;
  int result;
  
  arg1 = (ArRobot *)jarg1; 
  result = (int)((ArRobot const *)arg1)->getFaultFlags();
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_ArRobot_hasFaultFlags(void * jarg1) {
  unsigned int jresult ;
  ArRobot *arg1 = (ArRobot *) 0 ;
  bool result;
  
  arg1 = (ArRobot *)jarg1; 
  result = (bool)((ArRobot const *)arg1)->hasFaultFlags();
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_ArRobot_getFlags3(void * jarg1) {
  int jresult ;
  ArRobot *arg1 = (ArRobot *) 0 ;
  int result;
  
  arg1 = (ArRobot *)jarg1; 
  result = (int)((ArRobot const *)arg1)->getFlags3();
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_ArRobot_hasFlags3(void * jarg1) {
  unsigned int jresult ;
  ArRobot *arg1 = (ArRobot *) 0 ;
  bool result;
  
  arg1 = (ArRobot *)jarg1; 
  result = (bool)((ArRobot const *)arg1)->hasFlags3();
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_ArRobot_areMotorsEnabled(void * jarg1) {
  unsigned int jresult ;
  ArRobot *arg1 = (ArRobot *) 0 ;
  bool result;
  
  arg1 = (ArRobot *)jarg1; 
  result = (bool)((ArRobot const *)arg1)->areMotorsEnabled();
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_ArRobot_areSonarsEnabled(void * jarg1) {
  unsigned int jresult ;
  ArRobot *arg1 = (ArRobot *) 0 ;
  bool result;
  
  arg1 = (ArRobot *)jarg1; 
  result = (bool)((ArRobot const *)arg1)->areSonarsEnabled();
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_ArRobot_areAutonomousDrivingSonarsEnabled(void * jarg1) {
  unsigned int jresult ;
  ArRobot *arg1 = (ArRobot *) 0 ;
  bool result;
  
  arg1 = (ArRobot *)jarg1; 
  result = (bool)((ArRobot const *)arg1)->areAutonomousDrivingSonarsEnabled();
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_ArRobot_areSonarsEnabledLegacy(void * jarg1) {
  unsigned int jresult ;
  ArRobot *arg1 = (ArRobot *) 0 ;
  bool result;
  
  arg1 = (ArRobot *)jarg1; 
  result = (bool)((ArRobot const *)arg1)->areSonarsEnabledLegacy();
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_ArRobot_isEStopPressed(void * jarg1) {
  unsigned int jresult ;
  ArRobot *arg1 = (ArRobot *) 0 ;
  bool result;
  
  arg1 = (ArRobot *)jarg1; 
  result = (bool)((ArRobot const *)arg1)->isEStopPressed();
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_ArRobot_getEstop(void * jarg1) {
  unsigned int jresult ;
  ArRobot *arg1 = (ArRobot *) 0 ;
  bool result;
  
  arg1 = (ArRobot *)jarg1; 
  result = (bool)(arg1)->getEstop();
  jresult = result; 
  return jresult;
}


SWIGEXPORT double SWIGSTDCALL CSharp_ArRobot_getCompass(void * jarg1) {
  double jresult ;
  ArRobot *arg1 = (ArRobot *) 0 ;
  double result;
  
  arg1 = (ArRobot *)jarg1; 
  result = (double)((ArRobot const *)arg1)->getCompass();
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_ArRobot_getAnalogPortSelected(void * jarg1) {
  int jresult ;
  ArRobot *arg1 = (ArRobot *) 0 ;
  int result;
  
  arg1 = (ArRobot *)jarg1; 
  result = (int)((ArRobot const *)arg1)->getAnalogPortSelected();
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned char SWIGSTDCALL CSharp_ArRobot_getAnalog(void * jarg1) {
  unsigned char jresult ;
  ArRobot *arg1 = (ArRobot *) 0 ;
  unsigned char result;
  
  arg1 = (ArRobot *)jarg1; 
  result = (unsigned char)((ArRobot const *)arg1)->getAnalog();
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned char SWIGSTDCALL CSharp_ArRobot_getDigIn(void * jarg1) {
  unsigned char jresult ;
  ArRobot *arg1 = (ArRobot *) 0 ;
  unsigned char result;
  
  arg1 = (ArRobot *)jarg1; 
  result = (unsigned char)((ArRobot const *)arg1)->getDigIn();
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned char SWIGSTDCALL CSharp_ArRobot_getDigOut(void * jarg1) {
  unsigned char jresult ;
  ArRobot *arg1 = (ArRobot *) 0 ;
  unsigned char result;
  
  arg1 = (ArRobot *)jarg1; 
  result = (unsigned char)((ArRobot const *)arg1)->getDigOut();
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_ArRobot_getChargeState(void * jarg1) {
  int jresult ;
  ArRobot *arg1 = (ArRobot *) 0 ;
  ArRobot::ChargeState result;
  
  arg1 = (ArRobot *)jarg1; 
  result = (ArRobot::ChargeState)((ArRobot const *)arg1)->getChargeState();
  jresult = (int)result; 
  return jresult;
}


SWIGEXPORT char * SWIGSTDCALL CSharp_ArRobot_getChargeStateName(void * jarg1) {
  char * jresult ;
  ArRobot *arg1 = (ArRobot *) 0 ;
  char *result = 0 ;
  
  arg1 = (ArRobot *)jarg1; 
  result = (char *)((ArRobot const *)arg1)->getChargeStateName();
  jresult = SWIG_csharp_string_callback((const char *)result); 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_ArRobot_isChargerPowerGood(void * jarg1) {
  unsigned int jresult ;
  ArRobot *arg1 = (ArRobot *) 0 ;
  bool result;
  
  arg1 = (ArRobot *)jarg1; 
  result = (bool)((ArRobot const *)arg1)->isChargerPowerGood();
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_ArRobot_getIOAnalogSize(void * jarg1) {
  int jresult ;
  ArRobot *arg1 = (ArRobot *) 0 ;
  int result;
  
  arg1 = (ArRobot *)jarg1; 
  result = (int)((ArRobot const *)arg1)->getIOAnalogSize();
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_ArRobot_getIODigInSize(void * jarg1) {
  int jresult ;
  ArRobot *arg1 = (ArRobot *) 0 ;
  int result;
  
  arg1 = (ArRobot *)jarg1; 
  result = (int)((ArRobot const *)arg1)->getIODigInSize();
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_ArRobot_getIODigOutSize(void * jarg1) {
  int jresult ;
  ArRobot *arg1 = (ArRobot *) 0 ;
  int result;
  
  arg1 = (ArRobot *)jarg1; 
  result = (int)((ArRobot const *)arg1)->getIODigOutSize();
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_ArRobot_getIOAnalog(void * jarg1, int jarg2) {
  int jresult ;
  ArRobot *arg1 = (ArRobot *) 0 ;
  int arg2 ;
  int result;
  
  arg1 = (ArRobot *)jarg1; 
  arg2 = (int)jarg2; 
  result = (int)((ArRobot const *)arg1)->getIOAnalog(arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT double SWIGSTDCALL CSharp_ArRobot_getIOAnalogVoltage(void * jarg1, int jarg2) {
  double jresult ;
  ArRobot *arg1 = (ArRobot *) 0 ;
  int arg2 ;
  double result;
  
  arg1 = (ArRobot *)jarg1; 
  arg2 = (int)jarg2; 
  result = (double)((ArRobot const *)arg1)->getIOAnalogVoltage(arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned char SWIGSTDCALL CSharp_ArRobot_getIODigIn(void * jarg1, int jarg2) {
  unsigned char jresult ;
  ArRobot *arg1 = (ArRobot *) 0 ;
  int arg2 ;
  unsigned char result;
  
  arg1 = (ArRobot *)jarg1; 
  arg2 = (int)jarg2; 
  result = (unsigned char)((ArRobot const *)arg1)->getIODigIn(arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned char SWIGSTDCALL CSharp_ArRobot_getIODigOut(void * jarg1, int jarg2) {
  unsigned char jresult ;
  ArRobot *arg1 = (ArRobot *) 0 ;
  int arg2 ;
  unsigned char result;
  
  arg1 = (ArRobot *)jarg1; 
  arg2 = (int)jarg2; 
  result = (unsigned char)((ArRobot const *)arg1)->getIODigOut(arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_ArRobot_hasTableSensingIR(void * jarg1) {
  unsigned int jresult ;
  ArRobot *arg1 = (ArRobot *) 0 ;
  bool result;
  
  arg1 = (ArRobot *)jarg1; 
  result = (bool)((ArRobot const *)arg1)->hasTableSensingIR();
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_ArRobot_isLeftTableSensingIRTriggered(void * jarg1) {
  unsigned int jresult ;
  ArRobot *arg1 = (ArRobot *) 0 ;
  bool result;
  
  arg1 = (ArRobot *)jarg1; 
  result = (bool)((ArRobot const *)arg1)->isLeftTableSensingIRTriggered();
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_ArRobot_isRightTableSensingIRTriggered(void * jarg1) {
  unsigned int jresult ;
  ArRobot *arg1 = (ArRobot *) 0 ;
  bool result;
  
  arg1 = (ArRobot *)jarg1; 
  result = (bool)((ArRobot const *)arg1)->isRightTableSensingIRTriggered();
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_ArRobot_isLeftBreakBeamTriggered(void * jarg1) {
  unsigned int jresult ;
  ArRobot *arg1 = (ArRobot *) 0 ;
  bool result;
  
  arg1 = (ArRobot *)jarg1; 
  result = (bool)((ArRobot const *)arg1)->isLeftBreakBeamTriggered();
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_ArRobot_isRightBreakBeamTriggered(void * jarg1) {
  unsigned int jresult ;
  ArRobot *arg1 = (ArRobot *) 0 ;
  bool result;
  
  arg1 = (ArRobot *)jarg1; 
  result = (bool)((ArRobot const *)arg1)->isRightBreakBeamTriggered();
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_ArRobot_getIOPacketTime(void * jarg1) {
  void * jresult ;
  ArRobot *arg1 = (ArRobot *) 0 ;
  ArTime result;
  
  arg1 = (ArRobot *)jarg1; 
  result = ((ArRobot const *)arg1)->getIOPacketTime();
  jresult = new ArTime((const ArTime &)result); 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_ArRobot_hasFrontBumpers(void * jarg1) {
  unsigned int jresult ;
  ArRobot *arg1 = (ArRobot *) 0 ;
  bool result;
  
  arg1 = (ArRobot *)jarg1; 
  result = (bool)((ArRobot const *)arg1)->hasFrontBumpers();
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_ArRobot_getNumFrontBumpers(void * jarg1) {
  unsigned int jresult ;
  ArRobot *arg1 = (ArRobot *) 0 ;
  unsigned int result;
  
  arg1 = (ArRobot *)jarg1; 
  result = (unsigned int)((ArRobot const *)arg1)->getNumFrontBumpers();
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_ArRobot_hasRearBumpers(void * jarg1) {
  unsigned int jresult ;
  ArRobot *arg1 = (ArRobot *) 0 ;
  bool result;
  
  arg1 = (ArRobot *)jarg1; 
  result = (bool)((ArRobot const *)arg1)->hasRearBumpers();
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_ArRobot_getNumRearBumpers(void * jarg1) {
  unsigned int jresult ;
  ArRobot *arg1 = (ArRobot *) 0 ;
  unsigned int result;
  
  arg1 = (ArRobot *)jarg1; 
  result = (unsigned int)((ArRobot const *)arg1)->getNumRearBumpers();
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_ArRobot_getEncoderPose(void * jarg1) {
  void * jresult ;
  ArRobot *arg1 = (ArRobot *) 0 ;
  ArPose result;
  
  arg1 = (ArRobot *)jarg1; 
  result = ((ArRobot const *)arg1)->getEncoderPose();
  jresult = new ArPose((const ArPose &)result); 
  return jresult;
}


SWIGEXPORT double SWIGSTDCALL CSharp_ArRobot_getEncoderX(void * jarg1) {
  double jresult ;
  ArRobot *arg1 = (ArRobot *) 0 ;
  double result;
  
  arg1 = (ArRobot *)jarg1; 
  result = (double)((ArRobot const *)arg1)->getEncoderX();
  jresult = result; 
  return jresult;
}


SWIGEXPORT double SWIGSTDCALL CSharp_ArRobot_getEncoderY(void * jarg1) {
  double jresult ;
  ArRobot *arg1 = (ArRobot *) 0 ;
  double result;
  
  arg1 = (ArRobot *)jarg1; 
  result = (double)((ArRobot const *)arg1)->getEncoderY();
  jresult = result; 
  return jresult;
}


SWIGEXPORT double SWIGSTDCALL CSharp_ArRobot_getEncoderTh(void * jarg1) {
  double jresult ;
  ArRobot *arg1 = (ArRobot *) 0 ;
  double result;
  
  arg1 = (ArRobot *)jarg1; 
  result = (double)((ArRobot const *)arg1)->getEncoderTh();
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_ArRobot_isTryingToMove(void * jarg1) {
  unsigned int jresult ;
  ArRobot *arg1 = (ArRobot *) 0 ;
  bool result;
  
  arg1 = (ArRobot *)jarg1; 
  result = (bool)(arg1)->isTryingToMove();
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_ArRobot_forceTryingToMove(void * jarg1) {
  ArRobot *arg1 = (ArRobot *) 0 ;
  
  arg1 = (ArRobot *)jarg1; 
  (arg1)->forceTryingToMove();
}


SWIGEXPORT int SWIGSTDCALL CSharp_ArRobot_getMotorPacCount(void * jarg1) {
  int jresult ;
  ArRobot *arg1 = (ArRobot *) 0 ;
  int result;
  
  arg1 = (ArRobot *)jarg1; 
  result = (int)((ArRobot const *)arg1)->getMotorPacCount();
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_ArRobot_getSonarPacCount(void * jarg1) {
  int jresult ;
  ArRobot *arg1 = (ArRobot *) 0 ;
  int result;
  
  arg1 = (ArRobot *)jarg1; 
  result = (int)((ArRobot const *)arg1)->getSonarPacCount();
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_ArRobot_getSonarRange(void * jarg1, int jarg2) {
  int jresult ;
  ArRobot *arg1 = (ArRobot *) 0 ;
  int arg2 ;
  int result;
  
  arg1 = (ArRobot *)jarg1; 
  arg2 = (int)jarg2; 
  result = (int)((ArRobot const *)arg1)->getSonarRange(arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_ArRobot_isSonarNew(void * jarg1, int jarg2) {
  unsigned int jresult ;
  ArRobot *arg1 = (ArRobot *) 0 ;
  int arg2 ;
  bool result;
  
  arg1 = (ArRobot *)jarg1; 
  arg2 = (int)jarg2; 
  result = (bool)((ArRobot const *)arg1)->isSonarNew(arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_ArRobot_getNumSonar(void * jarg1) {
  int jresult ;
  ArRobot *arg1 = (ArRobot *) 0 ;
  int result;
  
  arg1 = (ArRobot *)jarg1; 
  result = (int)((ArRobot const *)arg1)->getNumSonar();
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_ArRobot_getSonarReading(void * jarg1, int jarg2) {
  void * jresult ;
  ArRobot *arg1 = (ArRobot *) 0 ;
  int arg2 ;
  ArSensorReading *result = 0 ;
  
  arg1 = (ArRobot *)jarg1; 
  arg2 = (int)jarg2; 
  result = (ArSensorReading *)((ArRobot const *)arg1)->getSonarReading(arg2);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_ArRobot_getClosestSonarRange(void * jarg1, double jarg2, double jarg3) {
  int jresult ;
  ArRobot *arg1 = (ArRobot *) 0 ;
  double arg2 ;
  double arg3 ;
  int result;
  
  arg1 = (ArRobot *)jarg1; 
  arg2 = (double)jarg2; 
  arg3 = (double)jarg3; 
  result = (int)((ArRobot const *)arg1)->getClosestSonarRange(arg2,arg3);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_ArRobot_getClosestSonarNumber(void * jarg1, double jarg2, double jarg3) {
  int jresult ;
  ArRobot *arg1 = (ArRobot *) 0 ;
  double arg2 ;
  double arg3 ;
  int result;
  
  arg1 = (ArRobot *)jarg1; 
  arg2 = (double)jarg2; 
  arg3 = (double)jarg3; 
  result = (int)((ArRobot const *)arg1)->getClosestSonarNumber(arg2,arg3);
  jresult = result; 
  return jresult;
}


SWIGEXPORT char * SWIGSTDCALL CSharp_ArRobot_getName(void * jarg1) {
  char * jresult ;
  ArRobot *arg1 = (ArRobot *) 0 ;
  char *result = 0 ;
  
  arg1 = (ArRobot *)jarg1; 
  result = (char *)((ArRobot const *)arg1)->getName();
  jresult = SWIG_csharp_string_callback((const char *)result); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_ArRobot_setName(void * jarg1, char * jarg2) {
  ArRobot *arg1 = (ArRobot *) 0 ;
  char *arg2 = (char *) 0 ;
  
  arg1 = (ArRobot *)jarg1; 
  arg2 = (char *)jarg2; 
  (arg1)->setName((char const *)arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_ArRobot_moveTo__SWIG_0(void * jarg1, void * jarg2, unsigned int jarg3) {
  ArRobot *arg1 = (ArRobot *) 0 ;
  ArPose arg2 ;
  bool arg3 ;
  ArPose *argp2 ;
  
  arg1 = (ArRobot *)jarg1; 
  argp2 = (ArPose *)jarg2; 
  if (!argp2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Attempt to dereference null ArPose", 0);
    return ;
  }
  arg2 = *argp2; 
  arg3 = jarg3 ? true : false; 
  (arg1)->moveTo(arg2,arg3);
}


SWIGEXPORT void SWIGSTDCALL CSharp_ArRobot_moveTo__SWIG_1(void * jarg1, void * jarg2) {
  ArRobot *arg1 = (ArRobot *) 0 ;
  ArPose arg2 ;
  ArPose *argp2 ;
  
  arg1 = (ArRobot *)jarg1; 
  argp2 = (ArPose *)jarg2; 
  if (!argp2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Attempt to dereference null ArPose", 0);
    return ;
  }
  arg2 = *argp2; 
  (arg1)->moveTo(arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_ArRobot_moveTo__SWIG_2(void * jarg1, void * jarg2, void * jarg3, unsigned int jarg4) {
  ArRobot *arg1 = (ArRobot *) 0 ;
  ArPose arg2 ;
  ArPose arg3 ;
  bool arg4 ;
  ArPose *argp2 ;
  ArPose *argp3 ;
  
  arg1 = (ArRobot *)jarg1; 
  argp2 = (ArPose *)jarg2; 
  if (!argp2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Attempt to dereference null ArPose", 0);
    return ;
  }
  arg2 = *argp2; 
  argp3 = (ArPose *)jarg3; 
  if (!argp3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Attempt to dereference null ArPose", 0);
    return ;
  }
  arg3 = *argp3; 
  arg4 = jarg4 ? true : false; 
  (arg1)->moveTo(arg2,arg3,arg4);
}


SWIGEXPORT void SWIGSTDCALL CSharp_ArRobot_moveTo__SWIG_3(void * jarg1, void * jarg2, void * jarg3) {
  ArRobot *arg1 = (ArRobot *) 0 ;
  ArPose arg2 ;
  ArPose arg3 ;
  ArPose *argp2 ;
  ArPose *argp3 ;
  
  arg1 = (ArRobot *)jarg1; 
  argp2 = (ArPose *)jarg2; 
  if (!argp2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Attempt to dereference null ArPose", 0);
    return ;
  }
  arg2 = *argp2; 
  argp3 = (ArPose *)jarg3; 
  if (!argp3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Attempt to dereference null ArPose", 0);
    return ;
  }
  arg3 = *argp3; 
  (arg1)->moveTo(arg2,arg3);
}


SWIGEXPORT void SWIGSTDCALL CSharp_ArRobot_setStateOfCharge(void * jarg1, double jarg2) {
  ArRobot *arg1 = (ArRobot *) 0 ;
  double arg2 ;
  
  arg1 = (ArRobot *)jarg1; 
  arg2 = (double)jarg2; 
  (arg1)->setStateOfCharge(arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_ArRobot_setStateOfChargeLow(void * jarg1, double jarg2) {
  ArRobot *arg1 = (ArRobot *) 0 ;
  double arg2 ;
  
  arg1 = (ArRobot *)jarg1; 
  arg2 = (double)jarg2; 
  (arg1)->setStateOfChargeLow(arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_ArRobot_setStateOfChargeShutdown(void * jarg1, double jarg2) {
  ArRobot *arg1 = (ArRobot *) 0 ;
  double arg2 ;
  
  arg1 = (ArRobot *)jarg1; 
  arg2 = (double)jarg2; 
  (arg1)->setStateOfChargeShutdown(arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_ArRobot_setChargeState(void * jarg1, int jarg2) {
  ArRobot *arg1 = (ArRobot *) 0 ;
  ArRobot::ChargeState arg2 ;
  
  arg1 = (ArRobot *)jarg1; 
  arg2 = (ArRobot::ChargeState)jarg2; 
  (arg1)->setChargeState(arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_ArRobot_setIsChargerPowerGood(void * jarg1, unsigned int jarg2) {
  ArRobot *arg1 = (ArRobot *) 0 ;
  bool arg2 ;
  
  arg1 = (ArRobot *)jarg1; 
  arg2 = jarg2 ? true : false; 
  (arg1)->setIsChargerPowerGood(arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_ArRobot_setIgnoreMicroControllerBatteryInfo(void * jarg1, unsigned int jarg2) {
  ArRobot *arg1 = (ArRobot *) 0 ;
  bool arg2 ;
  
  arg1 = (ArRobot *)jarg1; 
  arg2 = jarg2 ? true : false; 
  (arg1)->setIgnoreMicroControllerBatteryInfo(arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_ArRobot_setBatteryInfo(void * jarg1, double jarg2, double jarg3, unsigned int jarg4, double jarg5) {
  ArRobot *arg1 = (ArRobot *) 0 ;
  double arg2 ;
  double arg3 ;
  bool arg4 ;
  double arg5 ;
  
  arg1 = (ArRobot *)jarg1; 
  arg2 = (double)jarg2; 
  arg3 = (double)jarg3; 
  arg4 = jarg4 ? true : false; 
  arg5 = (double)jarg5; 
  (arg1)->setBatteryInfo(arg2,arg3,arg4,arg5);
}


SWIGEXPORT unsigned long SWIGSTDCALL CSharp_ArRobot_getBatteryVoltageAverageOfNum(void * jarg1) {
  unsigned long jresult ;
  ArRobot *arg1 = (ArRobot *) 0 ;
  size_t result;
  
  arg1 = (ArRobot *)jarg1; 
  result = (arg1)->getBatteryVoltageAverageOfNum();
  jresult = (unsigned long)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_ArRobot_setBatteryVoltageAverageOfNum(void * jarg1, unsigned long jarg2) {
  ArRobot *arg1 = (ArRobot *) 0 ;
  size_t arg2 ;
  
  arg1 = (ArRobot *)jarg1; 
  arg2 = (size_t)jarg2; 
  (arg1)->setBatteryVoltageAverageOfNum(arg2);
}


SWIGEXPORT unsigned long SWIGSTDCALL CSharp_ArRobot_getRealBatteryVoltageAverageOfNum(void * jarg1) {
  unsigned long jresult ;
  ArRobot *arg1 = (ArRobot *) 0 ;
  size_t result;
  
  arg1 = (ArRobot *)jarg1; 
  result = (arg1)->getRealBatteryVoltageAverageOfNum();
  jresult = (unsigned long)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_ArRobot_setRealBatteryVoltageAverageOfNum(void * jarg1, unsigned long jarg2) {
  ArRobot *arg1 = (ArRobot *) 0 ;
  size_t arg2 ;
  
  arg1 = (ArRobot *)jarg1; 
  arg2 = (size_t)jarg2; 
  (arg1)->setRealBatteryVoltageAverageOfNum(arg2);
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_ArRobot_hasTemperature(void * jarg1) {
  unsigned int jresult ;
  ArRobot *arg1 = (ArRobot *) 0 ;
  bool result;
  
  arg1 = (ArRobot *)jarg1; 
  result = (bool)(arg1)->hasTemperature();
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_ArRobot_getTemperature(void * jarg1) {
  int jresult ;
  ArRobot *arg1 = (ArRobot *) 0 ;
  int result;
  
  arg1 = (ArRobot *)jarg1; 
  result = (int)((ArRobot const *)arg1)->getTemperature();
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_ArRobot_requestEncoderPackets(void * jarg1) {
  ArRobot *arg1 = (ArRobot *) 0 ;
  
  arg1 = (ArRobot *)jarg1; 
  (arg1)->requestEncoderPackets();
}


SWIGEXPORT void SWIGSTDCALL CSharp_ArRobot_requestIOPackets(void * jarg1) {
  ArRobot *arg1 = (ArRobot *) 0 ;
  
  arg1 = (ArRobot *)jarg1; 
  (arg1)->requestIOPackets();
}


SWIGEXPORT void SWIGSTDCALL CSharp_ArRobot_stopEncoderPackets(void * jarg1) {
  ArRobot *arg1 = (ArRobot *) 0 ;
  
  arg1 = (ArRobot *)jarg1; 
  (arg1)->stopEncoderPackets();
}


SWIGEXPORT void SWIGSTDCALL CSharp_ArRobot_stopIOPackets(void * jarg1) {
  ArRobot *arg1 = (ArRobot *) 0 ;
  
  arg1 = (ArRobot *)jarg1; 
  (arg1)->stopIOPackets();
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_ArRobot_haveRequestedEncoderPackets(void * jarg1) {
  unsigned int jresult ;
  ArRobot *arg1 = (ArRobot *) 0 ;
  bool result;
  
  arg1 = (ArRobot *)jarg1; 
  result = (bool)(arg1)->haveRequestedEncoderPackets();
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_ArRobot_haveRequestedIOPackets(void * jarg1) {
  unsigned int jresult ;
  ArRobot *arg1 = (ArRobot *) 0 ;
  bool result;
  
  arg1 = (ArRobot *)jarg1; 
  result = (bool)(arg1)->haveRequestedIOPackets();
  jresult = result; 
  return jresult;
}


SWIGEXPORT long SWIGSTDCALL CSharp_ArRobot_getLeftEncoder(void * jarg1) {
  long jresult ;
  ArRobot *arg1 = (ArRobot *) 0 ;
  long result;
  
  arg1 = (ArRobot *)jarg1; 
  result = (long)(arg1)->getLeftEncoder();
  jresult = result; 
  return jresult;
}


SWIGEXPORT long SWIGSTDCALL CSharp_ArRobot_getRightEncoder(void * jarg1) {
  long jresult ;
  ArRobot *arg1 = (ArRobot *) 0 ;
  long result;
  
  arg1 = (ArRobot *)jarg1; 
  result = (long)(arg1)->getRightEncoder();
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_ArRobot_setEncoderTransform__SWIG_0(void * jarg1, void * jarg2, void * jarg3) {
  ArRobot *arg1 = (ArRobot *) 0 ;
  ArPose arg2 ;
  ArPose arg3 ;
  ArPose *argp2 ;
  ArPose *argp3 ;
  
  arg1 = (ArRobot *)jarg1; 
  argp2 = (ArPose *)jarg2; 
  if (!argp2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Attempt to dereference null ArPose", 0);
    return ;
  }
  arg2 = *argp2; 
  argp3 = (ArPose *)jarg3; 
  if (!argp3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Attempt to dereference null ArPose", 0);
    return ;
  }
  arg3 = *argp3; 
  (arg1)->setEncoderTransform(arg2,arg3);
}


SWIGEXPORT void SWIGSTDCALL CSharp_ArRobot_setEncoderTransform__SWIG_1(void * jarg1, void * jarg2) {
  ArRobot *arg1 = (ArRobot *) 0 ;
  ArPose arg2 ;
  ArPose *argp2 ;
  
  arg1 = (ArRobot *)jarg1; 
  argp2 = (ArPose *)jarg2; 
  if (!argp2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Attempt to dereference null ArPose", 0);
    return ;
  }
  arg2 = *argp2; 
  (arg1)->setEncoderTransform(arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_ArRobot_setEncoderTransform__SWIG_2(void * jarg1, void * jarg2) {
  ArRobot *arg1 = (ArRobot *) 0 ;
  ArTransform arg2 ;
  ArTransform *argp2 ;
  
  arg1 = (ArRobot *)jarg1; 
  argp2 = (ArTransform *)jarg2; 
  if (!argp2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Attempt to dereference null ArTransform", 0);
    return ;
  }
  arg2 = *argp2; 
  (arg1)->setEncoderTransform(arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_ArRobot_setEncoderPose(void * jarg1, void * jarg2) {
  ArRobot *arg1 = (ArRobot *) 0 ;
  ArPose arg2 ;
  ArPose *argp2 ;
  
  arg1 = (ArRobot *)jarg1; 
  argp2 = (ArPose *)jarg2; 
  if (!argp2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Attempt to dereference null ArPose", 0);
    return ;
  }
  arg2 = *argp2; 
  (arg1)->setEncoderPose(arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_ArRobot_setRawEncoderPose(void * jarg1, void * jarg2) {
  ArRobot *arg1 = (ArRobot *) 0 ;
  ArPose arg2 ;
  ArPose *argp2 ;
  
  arg1 = (ArRobot *)jarg1; 
  argp2 = (ArPose *)jarg2; 
  if (!argp2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Attempt to dereference null ArPose", 0);
    return ;
  }
  arg2 = *argp2; 
  (arg1)->setRawEncoderPose(arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_ArRobot_addSetEncoderTransformCB__SWIG_0(void * jarg1, void * jarg2, int jarg3) {
  ArRobot *arg1 = (ArRobot *) 0 ;
  ArFunctor *arg2 = (ArFunctor *) 0 ;
  int arg3 ;
  
  arg1 = (ArRobot *)jarg1; 
  arg2 = (ArFunctor *)jarg2; 
  arg3 = (int)jarg3; 
  (arg1)->addSetEncoderTransformCB(arg2,arg3);
}


SWIGEXPORT void SWIGSTDCALL CSharp_ArRobot_addSetEncoderTransformCB__SWIG_1(void * jarg1, void * jarg2) {
  ArRobot *arg1 = (ArRobot *) 0 ;
  ArFunctor *arg2 = (ArFunctor *) 0 ;
  
  arg1 = (ArRobot *)jarg1; 
  arg2 = (ArFunctor *)jarg2; 
  (arg1)->addSetEncoderTransformCB(arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_ArRobot_remSetEncoderTransformCB(void * jarg1, void * jarg2) {
  ArRobot *arg1 = (ArRobot *) 0 ;
  ArFunctor *arg2 = (ArFunctor *) 0 ;
  
  arg1 = (ArRobot *)jarg1; 
  arg2 = (ArFunctor *)jarg2; 
  (arg1)->remSetEncoderTransformCB(arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_ArRobot_setMTXTimeUSecCB(void * jarg1, void * jarg2) {
  ArRobot *arg1 = (ArRobot *) 0 ;
  ArRetFunctor1< bool,ArTypes::UByte4 * > *arg2 = (ArRetFunctor1< bool,ArTypes::UByte4 * > *) 0 ;
  
  arg1 = (ArRobot *)jarg1; 
  arg2 = (ArRetFunctor1< bool,ArTypes::UByte4 * > *)jarg2; 
  (arg1)->setMTXTimeUSecCB(arg2);
}


SWIGEXPORT void * SWIGSTDCALL CSharp_ArRobot_getEncoderTransform(void * jarg1) {
  void * jresult ;
  ArRobot *arg1 = (ArRobot *) 0 ;
  ArTransform result;
  
  arg1 = (ArRobot *)jarg1; 
  result = ((ArRobot const *)arg1)->getEncoderTransform();
  jresult = new ArTransform((const ArTransform &)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_ArRobot_getToGlobalTransform(void * jarg1) {
  void * jresult ;
  ArRobot *arg1 = (ArRobot *) 0 ;
  ArTransform result;
  
  arg1 = (ArRobot *)jarg1; 
  result = ((ArRobot const *)arg1)->getToGlobalTransform();
  jresult = new ArTransform((const ArTransform &)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_ArRobot_getToLocalTransform(void * jarg1) {
  void * jresult ;
  ArRobot *arg1 = (ArRobot *) 0 ;
  ArTransform result;
  
  arg1 = (ArRobot *)jarg1; 
  result = ((ArRobot const *)arg1)->getToLocalTransform();
  jresult = new ArTransform((const ArTransform &)result); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_ArRobot_applyTransform__SWIG_0(void * jarg1, void * jarg2, unsigned int jarg3) {
  ArRobot *arg1 = (ArRobot *) 0 ;
  ArTransform arg2 ;
  bool arg3 ;
  ArTransform *argp2 ;
  
  arg1 = (ArRobot *)jarg1; 
  argp2 = (ArTransform *)jarg2; 
  if (!argp2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Attempt to dereference null ArTransform", 0);
    return ;
  }
  arg2 = *argp2; 
  arg3 = jarg3 ? true : false; 
  (arg1)->applyTransform(arg2,arg3);
}


SWIGEXPORT void SWIGSTDCALL CSharp_ArRobot_applyTransform__SWIG_1(void * jarg1, void * jarg2) {
  ArRobot *arg1 = (ArRobot *) 0 ;
  ArTransform arg2 ;
  ArTransform *argp2 ;
  
  arg1 = (ArRobot *)jarg1; 
  argp2 = (ArTransform *)jarg2; 
  if (!argp2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Attempt to dereference null ArTransform", 0);
    return ;
  }
  arg2 = *argp2; 
  (arg1)->applyTransform(arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_ArRobot_setDeadReconPose(void * jarg1, void * jarg2) {
  ArRobot *arg1 = (ArRobot *) 0 ;
  ArPose arg2 ;
  ArPose *argp2 ;
  
  arg1 = (ArRobot *)jarg1; 
  argp2 = (ArPose *)jarg2; 
  if (!argp2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Attempt to dereference null ArPose", 0);
    return ;
  }
  arg2 = *argp2; 
  (arg1)->setDeadReconPose(arg2);
}


SWIGEXPORT double SWIGSTDCALL CSharp_ArRobot_getTripOdometerDistance(void * jarg1) {
  double jresult ;
  ArRobot *arg1 = (ArRobot *) 0 ;
  double result;
  
  arg1 = (ArRobot *)jarg1; 
  result = (double)(arg1)->getTripOdometerDistance();
  jresult = result; 
  return jresult;
}


SWIGEXPORT double SWIGSTDCALL CSharp_ArRobot_getTripOdometerDegrees(void * jarg1) {
  double jresult ;
  ArRobot *arg1 = (ArRobot *) 0 ;
  double result;
  
  arg1 = (ArRobot *)jarg1; 
  result = (double)(arg1)->getTripOdometerDegrees();
  jresult = result; 
  return jresult;
}


SWIGEXPORT double SWIGSTDCALL CSharp_ArRobot_getTripOdometerTime(void * jarg1) {
  double jresult ;
  ArRobot *arg1 = (ArRobot *) 0 ;
  double result;
  
  arg1 = (ArRobot *)jarg1; 
  result = (double)(arg1)->getTripOdometerTime();
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_ArRobot_resetTripOdometer(void * jarg1) {
  ArRobot *arg1 = (ArRobot *) 0 ;
  
  arg1 = (ArRobot *)jarg1; 
  (arg1)->resetTripOdometer();
}


SWIGEXPORT double SWIGSTDCALL CSharp_ArRobot_getOdometerDistance(void * jarg1) {
  double jresult ;
  ArRobot *arg1 = (ArRobot *) 0 ;
  double result;
  
  arg1 = (ArRobot *)jarg1; 
  result = (double)(arg1)->getOdometerDistance();
  jresult = result; 
  return jresult;
}


SWIGEXPORT double SWIGSTDCALL CSharp_ArRobot_getOdometerDistanceMeters(void * jarg1) {
  double jresult ;
  ArRobot *arg1 = (ArRobot *) 0 ;
  double result;
  
  arg1 = (ArRobot *)jarg1; 
  result = (double)(arg1)->getOdometerDistanceMeters();
  jresult = result; 
  return jresult;
}


SWIGEXPORT double SWIGSTDCALL CSharp_ArRobot_getOdometerDegrees(void * jarg1) {
  double jresult ;
  ArRobot *arg1 = (ArRobot *) 0 ;
  double result;
  
  arg1 = (ArRobot *)jarg1; 
  result = (double)(arg1)->getOdometerDegrees();
  jresult = result; 
  return jresult;
}


SWIGEXPORT double SWIGSTDCALL CSharp_ArRobot_getOdometerTime(void * jarg1) {
  double jresult ;
  ArRobot *arg1 = (ArRobot *) 0 ;
  double result;
  
  arg1 = (ArRobot *)jarg1; 
  result = (double)(arg1)->getOdometerTime();
  jresult = result; 
  return jresult;
}


SWIGEXPORT double SWIGSTDCALL CSharp_ArRobot_getOdometerTimeMinutes(void * jarg1) {
  double jresult ;
  ArRobot *arg1 = (ArRobot *) 0 ;
  double result;
  
  arg1 = (ArRobot *)jarg1; 
  result = (double)(arg1)->getOdometerTimeMinutes();
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_ArRobot_addRangeDevice(void * jarg1, void * jarg2) {
  ArRobot *arg1 = (ArRobot *) 0 ;
  ArRangeDevice *arg2 = (ArRangeDevice *) 0 ;
  
  arg1 = (ArRobot *)jarg1; 
  arg2 = (ArRangeDevice *)jarg2; 
  (arg1)->addRangeDevice(arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_ArRobot_remRangeDevice__SWIG_0(void * jarg1, char * jarg2) {
  ArRobot *arg1 = (ArRobot *) 0 ;
  char *arg2 = (char *) 0 ;
  
  arg1 = (ArRobot *)jarg1; 
  arg2 = (char *)jarg2; 
  (arg1)->remRangeDevice((char const *)arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_ArRobot_remRangeDevice__SWIG_1(void * jarg1, void * jarg2) {
  ArRobot *arg1 = (ArRobot *) 0 ;
  ArRangeDevice *arg2 = (ArRangeDevice *) 0 ;
  
  arg1 = (ArRobot *)jarg1; 
  arg2 = (ArRangeDevice *)jarg2; 
  (arg1)->remRangeDevice(arg2);
}


SWIGEXPORT void * SWIGSTDCALL CSharp_ArRobot_findRangeDevice__SWIG_0(void * jarg1, char * jarg2, unsigned int jarg3) {
  void * jresult ;
  ArRobot *arg1 = (ArRobot *) 0 ;
  char *arg2 = (char *) 0 ;
  bool arg3 ;
  ArRangeDevice *result = 0 ;
  
  arg1 = (ArRobot *)jarg1; 
  arg2 = (char *)jarg2; 
  arg3 = jarg3 ? true : false; 
  result = (ArRangeDevice *)((ArRobot const *)arg1)->findRangeDevice((char const *)arg2,arg3);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_ArRobot_findRangeDevice__SWIG_1(void * jarg1, char * jarg2) {
  void * jresult ;
  ArRobot *arg1 = (ArRobot *) 0 ;
  char *arg2 = (char *) 0 ;
  ArRangeDevice *result = 0 ;
  
  arg1 = (ArRobot *)jarg1; 
  arg2 = (char *)jarg2; 
  result = (ArRangeDevice *)((ArRobot const *)arg1)->findRangeDevice((char const *)arg2);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_ArRobot_getRangeDeviceList(void * jarg1) {
  void * jresult ;
  ArRobot *arg1 = (ArRobot *) 0 ;
  std::list< ArRangeDevice * > *result = 0 ;
  
  arg1 = (ArRobot *)jarg1; 
  result = (std::list< ArRangeDevice * > *)(arg1)->getRangeDeviceList();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_ArRobot_hasRangeDevice(void * jarg1, void * jarg2) {
  unsigned int jresult ;
  ArRobot *arg1 = (ArRobot *) 0 ;
  ArRangeDevice *arg2 = (ArRangeDevice *) 0 ;
  bool result;
  
  arg1 = (ArRobot *)jarg1; 
  arg2 = (ArRangeDevice *)jarg2; 
  result = (bool)((ArRobot const *)arg1)->hasRangeDevice(arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT double SWIGSTDCALL CSharp_ArRobot_checkRangeDevicesCurrentPolar__SWIG_0(void * jarg1, double jarg2, double jarg3, void * jarg4, void * jarg5, unsigned int jarg6) {
  double jresult ;
  ArRobot *arg1 = (ArRobot *) 0 ;
  double arg2 ;
  double arg3 ;
  double *arg4 = (double *) 0 ;
  ArRangeDevice **arg5 = (ArRangeDevice **) 0 ;
  bool arg6 ;
  double result;
  
  arg1 = (ArRobot *)jarg1; 
  arg2 = (double)jarg2; 
  arg3 = (double)jarg3; 
  arg4 = (double *)jarg4; 
  arg5 = (ArRangeDevice **)jarg5; 
  arg6 = jarg6 ? true : false; 
  result = (double)((ArRobot const *)arg1)->checkRangeDevicesCurrentPolar(arg2,arg3,arg4,(ArRangeDevice const **)arg5,arg6);
  jresult = result; 
  return jresult;
}


SWIGEXPORT double SWIGSTDCALL CSharp_ArRobot_checkRangeDevicesCurrentPolar__SWIG_1(void * jarg1, double jarg2, double jarg3, void * jarg4, void * jarg5) {
  double jresult ;
  ArRobot *arg1 = (ArRobot *) 0 ;
  double arg2 ;
  double arg3 ;
  double *arg4 = (double *) 0 ;
  ArRangeDevice **arg5 = (ArRangeDevice **) 0 ;
  double result;
  
  arg1 = (ArRobot *)jarg1; 
  arg2 = (double)jarg2; 
  arg3 = (double)jarg3; 
  arg4 = (double *)jarg4; 
  arg5 = (ArRangeDevice **)jarg5; 
  result = (double)((ArRobot const *)arg1)->checkRangeDevicesCurrentPolar(arg2,arg3,arg4,(ArRangeDevice const **)arg5);
  jresult = result; 
  return jresult;
}


SWIGEXPORT double SWIGSTDCALL CSharp_ArRobot_checkRangeDevicesCurrentPolar__SWIG_2(void * jarg1, double jarg2, double jarg3, void * jarg4) {
  double jresult ;
  ArRobot *arg1 = (ArRobot *) 0 ;
  double arg2 ;
  double arg3 ;
  double *arg4 = (double *) 0 ;
  double result;
  
  arg1 = (ArRobot *)jarg1; 
  arg2 = (double)jarg2; 
  arg3 = (double)jarg3; 
  arg4 = (double *)jarg4; 
  result = (double)((ArRobot const *)arg1)->checkRangeDevicesCurrentPolar(arg2,arg3,arg4);
  jresult = result; 
  return jresult;
}


SWIGEXPORT double SWIGSTDCALL CSharp_ArRobot_checkRangeDevicesCurrentPolar__SWIG_3(void * jarg1, double jarg2, double jarg3) {
  double jresult ;
  ArRobot *arg1 = (ArRobot *) 0 ;
  double arg2 ;
  double arg3 ;
  double result;
  
  arg1 = (ArRobot *)jarg1; 
  arg2 = (double)jarg2; 
  arg3 = (double)jarg3; 
  result = (double)((ArRobot const *)arg1)->checkRangeDevicesCurrentPolar(arg2,arg3);
  jresult = result; 
  return jresult;
}


SWIGEXPORT double SWIGSTDCALL CSharp_ArRobot_checkRangeDevicesCumulativePolar__SWIG_0(void * jarg1, double jarg2, double jarg3, void * jarg4, void * jarg5, unsigned int jarg6) {
  double jresult ;
  ArRobot *arg1 = (ArRobot *) 0 ;
  double arg2 ;
  double arg3 ;
  double *arg4 = (double *) 0 ;
  ArRangeDevice **arg5 = (ArRangeDevice **) 0 ;
  bool arg6 ;
  double result;
  
  arg1 = (ArRobot *)jarg1; 
  arg2 = (double)jarg2; 
  arg3 = (double)jarg3; 
  arg4 = (double *)jarg4; 
  arg5 = (ArRangeDevice **)jarg5; 
  arg6 = jarg6 ? true : false; 
  result = (double)((ArRobot const *)arg1)->checkRangeDevicesCumulativePolar(arg2,arg3,arg4,(ArRangeDevice const **)arg5,arg6);
  jresult = result; 
  return jresult;
}


SWIGEXPORT double SWIGSTDCALL CSharp_ArRobot_checkRangeDevicesCumulativePolar__SWIG_1(void * jarg1, double jarg2, double jarg3, void * jarg4, void * jarg5) {
  double jresult ;
  ArRobot *arg1 = (ArRobot *) 0 ;
  double arg2 ;
  double arg3 ;
  double *arg4 = (double *) 0 ;
  ArRangeDevice **arg5 = (ArRangeDevice **) 0 ;
  double result;
  
  arg1 = (ArRobot *)jarg1; 
  arg2 = (double)jarg2; 
  arg3 = (double)jarg3; 
  arg4 = (double *)jarg4; 
  arg5 = (ArRangeDevice **)jarg5; 
  result = (double)((ArRobot const *)arg1)->checkRangeDevicesCumulativePolar(arg2,arg3,arg4,(ArRangeDevice const **)arg5);
  jresult = result; 
  return jresult;
}


SWIGEXPORT double SWIGSTDCALL CSharp_ArRobot_checkRangeDevicesCumulativePolar__SWIG_2(void * jarg1, double jarg2, double jarg3, void * jarg4) {
  double jresult ;
  ArRobot *arg1 = (ArRobot *) 0 ;
  double arg2 ;
  double arg3 ;
  double *arg4 = (double *) 0 ;
  double result;
  
  arg1 = (ArRobot *)jarg1; 
  arg2 = (double)jarg2; 
  arg3 = (double)jarg3; 
  arg4 = (double *)jarg4; 
  result = (double)((ArRobot const *)arg1)->checkRangeDevicesCumulativePolar(arg2,arg3,arg4);
  jresult = result; 
  return jresult;
}


SWIGEXPORT double SWIGSTDCALL CSharp_ArRobot_checkRangeDevicesCumulativePolar__SWIG_3(void * jarg1, double jarg2, double jarg3) {
  double jresult ;
  ArRobot *arg1 = (ArRobot *) 0 ;
  double arg2 ;
  double arg3 ;
  double result;
  
  arg1 = (ArRobot *)jarg1; 
  arg2 = (double)jarg2; 
  arg3 = (double)jarg3; 
  result = (double)((ArRobot const *)arg1)->checkRangeDevicesCumulativePolar(arg2,arg3);
  jresult = result; 
  return jresult;
}


SWIGEXPORT double SWIGSTDCALL CSharp_ArRobot_checkRangeDevicesCurrentBox__SWIG_0(void * jarg1, double jarg2, double jarg3, double jarg4, double jarg5, void * jarg6, void * jarg7, unsigned int jarg8) {
  double jresult ;
  ArRobot *arg1 = (ArRobot *) 0 ;
  double arg2 ;
  double arg3 ;
  double arg4 ;
  double arg5 ;
  ArPose *arg6 = (ArPose *) 0 ;
  ArRangeDevice **arg7 = (ArRangeDevice **) 0 ;
  bool arg8 ;
  double result;
  
  arg1 = (ArRobot *)jarg1; 
  arg2 = (double)jarg2; 
  arg3 = (double)jarg3; 
  arg4 = (double)jarg4; 
  arg5 = (double)jarg5; 
  arg6 = (ArPose *)jarg6; 
  arg7 = (ArRangeDevice **)jarg7; 
  arg8 = jarg8 ? true : false; 
  result = (double)((ArRobot const *)arg1)->checkRangeDevicesCurrentBox(arg2,arg3,arg4,arg5,arg6,(ArRangeDevice const **)arg7,arg8);
  jresult = result; 
  return jresult;
}


SWIGEXPORT double SWIGSTDCALL CSharp_ArRobot_checkRangeDevicesCurrentBox__SWIG_1(void * jarg1, double jarg2, double jarg3, double jarg4, double jarg5, void * jarg6, void * jarg7) {
  double jresult ;
  ArRobot *arg1 = (ArRobot *) 0 ;
  double arg2 ;
  double arg3 ;
  double arg4 ;
  double arg5 ;
  ArPose *arg6 = (ArPose *) 0 ;
  ArRangeDevice **arg7 = (ArRangeDevice **) 0 ;
  double result;
  
  arg1 = (ArRobot *)jarg1; 
  arg2 = (double)jarg2; 
  arg3 = (double)jarg3; 
  arg4 = (double)jarg4; 
  arg5 = (double)jarg5; 
  arg6 = (ArPose *)jarg6; 
  arg7 = (ArRangeDevice **)jarg7; 
  result = (double)((ArRobot const *)arg1)->checkRangeDevicesCurrentBox(arg2,arg3,arg4,arg5,arg6,(ArRangeDevice const **)arg7);
  jresult = result; 
  return jresult;
}


SWIGEXPORT double SWIGSTDCALL CSharp_ArRobot_checkRangeDevicesCurrentBox__SWIG_2(void * jarg1, double jarg2, double jarg3, double jarg4, double jarg5, void * jarg6) {
  double jresult ;
  ArRobot *arg1 = (ArRobot *) 0 ;
  double arg2 ;
  double arg3 ;
  double arg4 ;
  double arg5 ;
  ArPose *arg6 = (ArPose *) 0 ;
  double result;
  
  arg1 = (ArRobot *)jarg1; 
  arg2 = (double)jarg2; 
  arg3 = (double)jarg3; 
  arg4 = (double)jarg4; 
  arg5 = (double)jarg5; 
  arg6 = (ArPose *)jarg6; 
  result = (double)((ArRobot const *)arg1)->checkRangeDevicesCurrentBox(arg2,arg3,arg4,arg5,arg6);
  jresult = result; 
  return jresult;
}


SWIGEXPORT double SWIGSTDCALL CSharp_ArRobot_checkRangeDevicesCurrentBox__SWIG_3(void * jarg1, double jarg2, double jarg3, double jarg4, double jarg5) {
  double jresult ;
  ArRobot *arg1 = (ArRobot *) 0 ;
  double arg2 ;
  double arg3 ;
  double arg4 ;
  double arg5 ;
  double result;
  
  arg1 = (ArRobot *)jarg1; 
  arg2 = (double)jarg2; 
  arg3 = (double)jarg3; 
  arg4 = (double)jarg4; 
  arg5 = (double)jarg5; 
  result = (double)((ArRobot const *)arg1)->checkRangeDevicesCurrentBox(arg2,arg3,arg4,arg5);
  jresult = result; 
  return jresult;
}


SWIGEXPORT double SWIGSTDCALL CSharp_ArRobot_checkRangeDevicesCumulativeBox__SWIG_0(void * jarg1, double jarg2, double jarg3, double jarg4, double jarg5, void * jarg6, void * jarg7, unsigned int jarg8) {
  double jresult ;
  ArRobot *arg1 = (ArRobot *) 0 ;
  double arg2 ;
  double arg3 ;
  double arg4 ;
  double arg5 ;
  ArPose *arg6 = (ArPose *) 0 ;
  ArRangeDevice **arg7 = (ArRangeDevice **) 0 ;
  bool arg8 ;
  double result;
  
  arg1 = (ArRobot *)jarg1; 
  arg2 = (double)jarg2; 
  arg3 = (double)jarg3; 
  arg4 = (double)jarg4; 
  arg5 = (double)jarg5; 
  arg6 = (ArPose *)jarg6; 
  arg7 = (ArRangeDevice **)jarg7; 
  arg8 = jarg8 ? true : false; 
  result = (double)((ArRobot const *)arg1)->checkRangeDevicesCumulativeBox(arg2,arg3,arg4,arg5,arg6,(ArRangeDevice const **)arg7,arg8);
  jresult = result; 
  return jresult;
}


SWIGEXPORT double SWIGSTDCALL CSharp_ArRobot_checkRangeDevicesCumulativeBox__SWIG_1(void * jarg1, double jarg2, double jarg3, double jarg4, double jarg5, void * jarg6, void * jarg7) {
  double jresult ;
  ArRobot *arg1 = (ArRobot *) 0 ;
  double arg2 ;
  double arg3 ;
  double arg4 ;
  double arg5 ;
  ArPose *arg6 = (ArPose *) 0 ;
  ArRangeDevice **arg7 = (ArRangeDevice **) 0 ;
  double result;
  
  arg1 = (ArRobot *)jarg1; 
  arg2 = (double)jarg2; 
  arg3 = (double)jarg3; 
  arg4 = (double)jarg4; 
  arg5 = (double)jarg5; 
  arg6 = (ArPose *)jarg6; 
  arg7 = (ArRangeDevice **)jarg7; 
  result = (double)((ArRobot const *)arg1)->checkRangeDevicesCumulativeBox(arg2,arg3,arg4,arg5,arg6,(ArRangeDevice const **)arg7);
  jresult = result; 
  return jresult;
}


SWIGEXPORT double SWIGSTDCALL CSharp_ArRobot_checkRangeDevicesCumulativeBox__SWIG_2(void * jarg1, double jarg2, double jarg3, double jarg4, double jarg5, void * jarg6) {
  double jresult ;
  ArRobot *arg1 = (ArRobot *) 0 ;
  double arg2 ;
  double arg3 ;
  double arg4 ;
  double arg5 ;
  ArPose *arg6 = (ArPose *) 0 ;
  double result;
  
  arg1 = (ArRobot *)jarg1; 
  arg2 = (double)jarg2; 
  arg3 = (double)jarg3; 
  arg4 = (double)jarg4; 
  arg5 = (double)jarg5; 
  arg6 = (ArPose *)jarg6; 
  result = (double)((ArRobot const *)arg1)->checkRangeDevicesCumulativeBox(arg2,arg3,arg4,arg5,arg6);
  jresult = result; 
  return jresult;
}


SWIGEXPORT double SWIGSTDCALL CSharp_ArRobot_checkRangeDevicesCumulativeBox__SWIG_3(void * jarg1, double jarg2, double jarg3, double jarg4, double jarg5) {
  double jresult ;
  ArRobot *arg1 = (ArRobot *) 0 ;
  double arg2 ;
  double arg3 ;
  double arg4 ;
  double arg5 ;
  double result;
  
  arg1 = (ArRobot *)jarg1; 
  arg2 = (double)jarg2; 
  arg3 = (double)jarg3; 
  arg4 = (double)jarg4; 
  arg5 = (double)jarg5; 
  result = (double)((ArRobot const *)arg1)->checkRangeDevicesCumulativeBox(arg2,arg3,arg4,arg5);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_ArRobot_addLaser__SWIG_0(void * jarg1, void * jarg2, int jarg3, unsigned int jarg4) {
  unsigned int jresult ;
  ArRobot *arg1 = (ArRobot *) 0 ;
  ArLaser *arg2 = (ArLaser *) 0 ;
  int arg3 ;
  bool arg4 ;
  bool result;
  
  arg1 = (ArRobot *)jarg1; 
  arg2 = (ArLaser *)jarg2; 
  arg3 = (int)jarg3; 
  arg4 = jarg4 ? true : false; 
  result = (bool)(arg1)->addLaser(arg2,arg3,arg4);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_ArRobot_addLaser__SWIG_1(void * jarg1, void * jarg2, int jarg3) {
  unsigned int jresult ;
  ArRobot *arg1 = (ArRobot *) 0 ;
  ArLaser *arg2 = (ArLaser *) 0 ;
  int arg3 ;
  bool result;
  
  arg1 = (ArRobot *)jarg1; 
  arg2 = (ArLaser *)jarg2; 
  arg3 = (int)jarg3; 
  result = (bool)(arg1)->addLaser(arg2,arg3);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_ArRobot_remLaser__SWIG_0(void * jarg1, void * jarg2, unsigned int jarg3) {
  unsigned int jresult ;
  ArRobot *arg1 = (ArRobot *) 0 ;
  ArLaser *arg2 = (ArLaser *) 0 ;
  bool arg3 ;
  bool result;
  
  arg1 = (ArRobot *)jarg1; 
  arg2 = (ArLaser *)jarg2; 
  arg3 = jarg3 ? true : false; 
  result = (bool)(arg1)->remLaser(arg2,arg3);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_ArRobot_remLaser__SWIG_1(void * jarg1, void * jarg2) {
  unsigned int jresult ;
  ArRobot *arg1 = (ArRobot *) 0 ;
  ArLaser *arg2 = (ArLaser *) 0 ;
  bool result;
  
  arg1 = (ArRobot *)jarg1; 
  arg2 = (ArLaser *)jarg2; 
  result = (bool)(arg1)->remLaser(arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_ArRobot_remLaser__SWIG_2(void * jarg1, int jarg2, unsigned int jarg3) {
  unsigned int jresult ;
  ArRobot *arg1 = (ArRobot *) 0 ;
  int arg2 ;
  bool arg3 ;
  bool result;
  
  arg1 = (ArRobot *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = jarg3 ? true : false; 
  result = (bool)(arg1)->remLaser(arg2,arg3);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_ArRobot_remLaser__SWIG_3(void * jarg1, int jarg2) {
  unsigned int jresult ;
  ArRobot *arg1 = (ArRobot *) 0 ;
  int arg2 ;
  bool result;
  
  arg1 = (ArRobot *)jarg1; 
  arg2 = (int)jarg2; 
  result = (bool)(arg1)->remLaser(arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_ArRobot_findLaser__SWIG_0(void * jarg1, int jarg2) {
  void * jresult ;
  ArRobot *arg1 = (ArRobot *) 0 ;
  int arg2 ;
  ArLaser *result = 0 ;
  
  arg1 = (ArRobot *)jarg1; 
  arg2 = (int)jarg2; 
  result = (ArLaser *)((ArRobot const *)arg1)->findLaser(arg2);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_ArRobot_getLaserMap__SWIG_0(void * jarg1) {
  void * jresult ;
  ArRobot *arg1 = (ArRobot *) 0 ;
  std::map< int,ArLaser *,std::less< int > > *result = 0 ;
  
  arg1 = (ArRobot *)jarg1; 
  result = (std::map< int,ArLaser *,std::less< int > > *)((ArRobot const *)arg1)->getLaserMap();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_ArRobot_hasLaser(void * jarg1, void * jarg2) {
  unsigned int jresult ;
  ArRobot *arg1 = (ArRobot *) 0 ;
  ArLaser *arg2 = (ArLaser *) 0 ;
  bool result;
  
  arg1 = (ArRobot *)jarg1; 
  arg2 = (ArLaser *)jarg2; 
  result = (bool)((ArRobot const *)arg1)->hasLaser(arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned long SWIGSTDCALL CSharp_ArRobot_getNumLasers(void * jarg1) {
  unsigned long jresult ;
  ArRobot *arg1 = (ArRobot *) 0 ;
  size_t result;
  
  arg1 = (ArRobot *)jarg1; 
  result = (arg1)->getNumLasers();
  jresult = (unsigned long)result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_ArRobot_addBattery(void * jarg1, void * jarg2, int jarg3) {
  unsigned int jresult ;
  ArRobot *arg1 = (ArRobot *) 0 ;
  ArBatteryMTX *arg2 = (ArBatteryMTX *) 0 ;
  int arg3 ;
  bool result;
  
  arg1 = (ArRobot *)jarg1; 
  arg2 = (ArBatteryMTX *)jarg2; 
  arg3 = (int)jarg3; 
  result = (bool)(arg1)->addBattery(arg2,arg3);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_ArRobot_remBattery__SWIG_0(void * jarg1, void * jarg2) {
  unsigned int jresult ;
  ArRobot *arg1 = (ArRobot *) 0 ;
  ArBatteryMTX *arg2 = (ArBatteryMTX *) 0 ;
  bool result;
  
  arg1 = (ArRobot *)jarg1; 
  arg2 = (ArBatteryMTX *)jarg2; 
  result = (bool)(arg1)->remBattery(arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_ArRobot_remBattery__SWIG_1(void * jarg1, int jarg2) {
  unsigned int jresult ;
  ArRobot *arg1 = (ArRobot *) 0 ;
  int arg2 ;
  bool result;
  
  arg1 = (ArRobot *)jarg1; 
  arg2 = (int)jarg2; 
  result = (bool)(arg1)->remBattery(arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_ArRobot_findBattery__SWIG_0(void * jarg1, int jarg2) {
  void * jresult ;
  ArRobot *arg1 = (ArRobot *) 0 ;
  int arg2 ;
  ArBatteryMTX *result = 0 ;
  
  arg1 = (ArRobot *)jarg1; 
  arg2 = (int)jarg2; 
  result = (ArBatteryMTX *)((ArRobot const *)arg1)->findBattery(arg2);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_ArRobot_getBatteryMap__SWIG_0(void * jarg1) {
  void * jresult ;
  ArRobot *arg1 = (ArRobot *) 0 ;
  std::map< int,ArBatteryMTX *,std::less< int > > *result = 0 ;
  
  arg1 = (ArRobot *)jarg1; 
  result = (std::map< int,ArBatteryMTX *,std::less< int > > *)((ArRobot const *)arg1)->getBatteryMap();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_ArRobot_hasBattery(void * jarg1, void * jarg2) {
  unsigned int jresult ;
  ArRobot *arg1 = (ArRobot *) 0 ;
  ArBatteryMTX *arg2 = (ArBatteryMTX *) 0 ;
  bool result;
  
  arg1 = (ArRobot *)jarg1; 
  arg2 = (ArBatteryMTX *)jarg2; 
  result = (bool)((ArRobot const *)arg1)->hasBattery(arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_ArRobot_addLCD(void * jarg1, void * jarg2, int jarg3) {
  unsigned int jresult ;
  ArRobot *arg1 = (ArRobot *) 0 ;
  ArLCDMTX *arg2 = (ArLCDMTX *) 0 ;
  int arg3 ;
  bool result;
  
  arg1 = (ArRobot *)jarg1; 
  arg2 = (ArLCDMTX *)jarg2; 
  arg3 = (int)jarg3; 
  result = (bool)(arg1)->addLCD(arg2,arg3);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_ArRobot_remLCD__SWIG_0(void * jarg1, void * jarg2) {
  unsigned int jresult ;
  ArRobot *arg1 = (ArRobot *) 0 ;
  ArLCDMTX *arg2 = (ArLCDMTX *) 0 ;
  bool result;
  
  arg1 = (ArRobot *)jarg1; 
  arg2 = (ArLCDMTX *)jarg2; 
  result = (bool)(arg1)->remLCD(arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_ArRobot_remLCD__SWIG_1(void * jarg1, int jarg2) {
  unsigned int jresult ;
  ArRobot *arg1 = (ArRobot *) 0 ;
  int arg2 ;
  bool result;
  
  arg1 = (ArRobot *)jarg1; 
  arg2 = (int)jarg2; 
  result = (bool)(arg1)->remLCD(arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_ArRobot_findLCD__SWIG_0(void * jarg1, int jarg2) {
  void * jresult ;
  ArRobot *arg1 = (ArRobot *) 0 ;
  int arg2 ;
  ArLCDMTX *result = 0 ;
  
  arg1 = (ArRobot *)jarg1; 
  arg2 = (int)jarg2; 
  result = (ArLCDMTX *)((ArRobot const *)arg1)->findLCD(arg2);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_ArRobot_findLCD__SWIG_1(void * jarg1) {
  void * jresult ;
  ArRobot *arg1 = (ArRobot *) 0 ;
  ArLCDMTX *result = 0 ;
  
  arg1 = (ArRobot *)jarg1; 
  result = (ArLCDMTX *)((ArRobot const *)arg1)->findLCD();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_ArRobot_getLCDMap__SWIG_0(void * jarg1) {
  void * jresult ;
  ArRobot *arg1 = (ArRobot *) 0 ;
  std::map< int,ArLCDMTX *,std::less< int > > *result = 0 ;
  
  arg1 = (ArRobot *)jarg1; 
  result = (std::map< int,ArLCDMTX *,std::less< int > > *)((ArRobot const *)arg1)->getLCDMap();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_ArRobot_hasLCD(void * jarg1, void * jarg2) {
  unsigned int jresult ;
  ArRobot *arg1 = (ArRobot *) 0 ;
  ArLCDMTX *arg2 = (ArLCDMTX *) 0 ;
  bool result;
  
  arg1 = (ArRobot *)jarg1; 
  arg2 = (ArLCDMTX *)jarg2; 
  result = (bool)((ArRobot const *)arg1)->hasLCD(arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_ArRobot_addSonar(void * jarg1, void * jarg2, int jarg3) {
  unsigned int jresult ;
  ArRobot *arg1 = (ArRobot *) 0 ;
  ArSonarMTX *arg2 = (ArSonarMTX *) 0 ;
  int arg3 ;
  bool result;
  
  arg1 = (ArRobot *)jarg1; 
  arg2 = (ArSonarMTX *)jarg2; 
  arg3 = (int)jarg3; 
  result = (bool)(arg1)->addSonar(arg2,arg3);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_ArRobot_remSonar__SWIG_0(void * jarg1, void * jarg2) {
  unsigned int jresult ;
  ArRobot *arg1 = (ArRobot *) 0 ;
  ArSonarMTX *arg2 = (ArSonarMTX *) 0 ;
  bool result;
  
  arg1 = (ArRobot *)jarg1; 
  arg2 = (ArSonarMTX *)jarg2; 
  result = (bool)(arg1)->remSonar(arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_ArRobot_remSonar__SWIG_1(void * jarg1, int jarg2) {
  unsigned int jresult ;
  ArRobot *arg1 = (ArRobot *) 0 ;
  int arg2 ;
  bool result;
  
  arg1 = (ArRobot *)jarg1; 
  arg2 = (int)jarg2; 
  result = (bool)(arg1)->remSonar(arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_ArRobot_findSonar__SWIG_0(void * jarg1, int jarg2) {
  void * jresult ;
  ArRobot *arg1 = (ArRobot *) 0 ;
  int arg2 ;
  ArSonarMTX *result = 0 ;
  
  arg1 = (ArRobot *)jarg1; 
  arg2 = (int)jarg2; 
  result = (ArSonarMTX *)((ArRobot const *)arg1)->findSonar(arg2);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_ArRobot_getSonarMap__SWIG_0(void * jarg1) {
  void * jresult ;
  ArRobot *arg1 = (ArRobot *) 0 ;
  std::map< int,ArSonarMTX *,std::less< int > > *result = 0 ;
  
  arg1 = (ArRobot *)jarg1; 
  result = (std::map< int,ArSonarMTX *,std::less< int > > *)((ArRobot const *)arg1)->getSonarMap();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_ArRobot_hasSonar(void * jarg1, void * jarg2) {
  unsigned int jresult ;
  ArRobot *arg1 = (ArRobot *) 0 ;
  ArSonarMTX *arg2 = (ArSonarMTX *) 0 ;
  bool result;
  
  arg1 = (ArRobot *)jarg1; 
  arg2 = (ArSonarMTX *)jarg2; 
  result = (bool)((ArRobot const *)arg1)->hasSonar(arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_ArRobot_setPTZ(void * jarg1, void * jarg2) {
  ArRobot *arg1 = (ArRobot *) 0 ;
  ArPTZ *arg2 = (ArPTZ *) 0 ;
  
  arg1 = (ArRobot *)jarg1; 
  arg2 = (ArPTZ *)jarg2; 
  (arg1)->setPTZ(arg2);
}


SWIGEXPORT void * SWIGSTDCALL CSharp_ArRobot_getPTZ(void * jarg1) {
  void * jresult ;
  ArRobot *arg1 = (ArRobot *) 0 ;
  ArPTZ *result = 0 ;
  
  arg1 = (ArRobot *)jarg1; 
  result = (ArPTZ *)(arg1)->getPTZ();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_ArRobot_setStateReflectionRefreshTime(void * jarg1, int jarg2) {
  ArRobot *arg1 = (ArRobot *) 0 ;
  int arg2 ;
  
  arg1 = (ArRobot *)jarg1; 
  arg2 = (int)jarg2; 
  (arg1)->setStateReflectionRefreshTime(arg2);
}


SWIGEXPORT int SWIGSTDCALL CSharp_ArRobot_getStateReflectionRefreshTime(void * jarg1) {
  int jresult ;
  ArRobot *arg1 = (ArRobot *) 0 ;
  int result;
  
  arg1 = (ArRobot *)jarg1; 
  result = (int)((ArRobot const *)arg1)->getStateReflectionRefreshTime();
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_ArRobot_addPacketHandler__SWIG_0(void * jarg1, void * jarg2, int jarg3) {
  ArRobot *arg1 = (ArRobot *) 0 ;
  ArRetFunctor1< bool,ArRobotPacket * > *arg2 = (ArRetFunctor1< bool,ArRobotPacket * > *) 0 ;
  ArListPos::Pos arg3 ;
  
  arg1 = (ArRobot *)jarg1; 
  arg2 = (ArRetFunctor1< bool,ArRobotPacket * > *)jarg2; 
  arg3 = (ArListPos::Pos)jarg3; 
  (arg1)->addPacketHandler(arg2,arg3);
}


SWIGEXPORT void SWIGSTDCALL CSharp_ArRobot_addPacketHandler__SWIG_1(void * jarg1, void * jarg2) {
  ArRobot *arg1 = (ArRobot *) 0 ;
  ArRetFunctor1< bool,ArRobotPacket * > *arg2 = (ArRetFunctor1< bool,ArRobotPacket * > *) 0 ;
  
  arg1 = (ArRobot *)jarg1; 
  arg2 = (ArRetFunctor1< bool,ArRobotPacket * > *)jarg2; 
  (arg1)->addPacketHandler(arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_ArRobot_remPacketHandler(void * jarg1, void * jarg2) {
  ArRobot *arg1 = (ArRobot *) 0 ;
  ArRetFunctor1< bool,ArRobotPacket * > *arg2 = (ArRetFunctor1< bool,ArRobotPacket * > *) 0 ;
  
  arg1 = (ArRobot *)jarg1; 
  arg2 = (ArRetFunctor1< bool,ArRobotPacket * > *)jarg2; 
  (arg1)->remPacketHandler(arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_ArRobot_addConnectCB__SWIG_0(void * jarg1, void * jarg2, int jarg3) {
  ArRobot *arg1 = (ArRobot *) 0 ;
  ArFunctor *arg2 = (ArFunctor *) 0 ;
  ArListPos::Pos arg3 ;
  
  arg1 = (ArRobot *)jarg1; 
  arg2 = (ArFunctor *)jarg2; 
  arg3 = (ArListPos::Pos)jarg3; 
  (arg1)->addConnectCB(arg2,arg3);
}


SWIGEXPORT void SWIGSTDCALL CSharp_ArRobot_addConnectCB__SWIG_1(void * jarg1, void * jarg2) {
  ArRobot *arg1 = (ArRobot *) 0 ;
  ArFunctor *arg2 = (ArFunctor *) 0 ;
  
  arg1 = (ArRobot *)jarg1; 
  arg2 = (ArFunctor *)jarg2; 
  (arg1)->addConnectCB(arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_ArRobot_remConnectCB(void * jarg1, void * jarg2) {
  ArRobot *arg1 = (ArRobot *) 0 ;
  ArFunctor *arg2 = (ArFunctor *) 0 ;
  
  arg1 = (ArRobot *)jarg1; 
  arg2 = (ArFunctor *)jarg2; 
  (arg1)->remConnectCB(arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_ArRobot_addFailedConnectCB__SWIG_0(void * jarg1, void * jarg2, int jarg3) {
  ArRobot *arg1 = (ArRobot *) 0 ;
  ArFunctor *arg2 = (ArFunctor *) 0 ;
  ArListPos::Pos arg3 ;
  
  arg1 = (ArRobot *)jarg1; 
  arg2 = (ArFunctor *)jarg2; 
  arg3 = (ArListPos::Pos)jarg3; 
  (arg1)->addFailedConnectCB(arg2,arg3);
}


SWIGEXPORT void SWIGSTDCALL CSharp_ArRobot_addFailedConnectCB__SWIG_1(void * jarg1, void * jarg2) {
  ArRobot *arg1 = (ArRobot *) 0 ;
  ArFunctor *arg2 = (ArFunctor *) 0 ;
  
  arg1 = (ArRobot *)jarg1; 
  arg2 = (ArFunctor *)jarg2; 
  (arg1)->addFailedConnectCB(arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_ArRobot_remFailedConnectCB(void * jarg1, void * jarg2) {
  ArRobot *arg1 = (ArRobot *) 0 ;
  ArFunctor *arg2 = (ArFunctor *) 0 ;
  
  arg1 = (ArRobot *)jarg1; 
  arg2 = (ArFunctor *)jarg2; 
  (arg1)->remFailedConnectCB(arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_ArRobot_addDisconnectNormallyCB__SWIG_0(void * jarg1, void * jarg2, int jarg3) {
  ArRobot *arg1 = (ArRobot *) 0 ;
  ArFunctor *arg2 = (ArFunctor *) 0 ;
  ArListPos::Pos arg3 ;
  
  arg1 = (ArRobot *)jarg1; 
  arg2 = (ArFunctor *)jarg2; 
  arg3 = (ArListPos::Pos)jarg3; 
  (arg1)->addDisconnectNormallyCB(arg2,arg3);
}


SWIGEXPORT void SWIGSTDCALL CSharp_ArRobot_addDisconnectNormallyCB__SWIG_1(void * jarg1, void * jarg2) {
  ArRobot *arg1 = (ArRobot *) 0 ;
  ArFunctor *arg2 = (ArFunctor *) 0 ;
  
  arg1 = (ArRobot *)jarg1; 
  arg2 = (ArFunctor *)jarg2; 
  (arg1)->addDisconnectNormallyCB(arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_ArRobot_remDisconnectNormallyCB(void * jarg1, void * jarg2) {
  ArRobot *arg1 = (ArRobot *) 0 ;
  ArFunctor *arg2 = (ArFunctor *) 0 ;
  
  arg1 = (ArRobot *)jarg1; 
  arg2 = (ArFunctor *)jarg2; 
  (arg1)->remDisconnectNormallyCB(arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_ArRobot_addDisconnectOnErrorCB__SWIG_0(void * jarg1, void * jarg2, int jarg3) {
  ArRobot *arg1 = (ArRobot *) 0 ;
  ArFunctor *arg2 = (ArFunctor *) 0 ;
  ArListPos::Pos arg3 ;
  
  arg1 = (ArRobot *)jarg1; 
  arg2 = (ArFunctor *)jarg2; 
  arg3 = (ArListPos::Pos)jarg3; 
  (arg1)->addDisconnectOnErrorCB(arg2,arg3);
}


SWIGEXPORT void SWIGSTDCALL CSharp_ArRobot_addDisconnectOnErrorCB__SWIG_1(void * jarg1, void * jarg2) {
  ArRobot *arg1 = (ArRobot *) 0 ;
  ArFunctor *arg2 = (ArFunctor *) 0 ;
  
  arg1 = (ArRobot *)jarg1; 
  arg2 = (ArFunctor *)jarg2; 
  (arg1)->addDisconnectOnErrorCB(arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_ArRobot_remDisconnectOnErrorCB(void * jarg1, void * jarg2) {
  ArRobot *arg1 = (ArRobot *) 0 ;
  ArFunctor *arg2 = (ArFunctor *) 0 ;
  
  arg1 = (ArRobot *)jarg1; 
  arg2 = (ArFunctor *)jarg2; 
  (arg1)->remDisconnectOnErrorCB(arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_ArRobot_addRunExitCB__SWIG_0(void * jarg1, void * jarg2, int jarg3) {
  ArRobot *arg1 = (ArRobot *) 0 ;
  ArFunctor *arg2 = (ArFunctor *) 0 ;
  ArListPos::Pos arg3 ;
  
  arg1 = (ArRobot *)jarg1; 
  arg2 = (ArFunctor *)jarg2; 
  arg3 = (ArListPos::Pos)jarg3; 
  (arg1)->addRunExitCB(arg2,arg3);
}


SWIGEXPORT void SWIGSTDCALL CSharp_ArRobot_addRunExitCB__SWIG_1(void * jarg1, void * jarg2) {
  ArRobot *arg1 = (ArRobot *) 0 ;
  ArFunctor *arg2 = (ArFunctor *) 0 ;
  
  arg1 = (ArRobot *)jarg1; 
  arg2 = (ArFunctor *)jarg2; 
  (arg1)->addRunExitCB(arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_ArRobot_remRunExitCB(void * jarg1, void * jarg2) {
  ArRobot *arg1 = (ArRobot *) 0 ;
  ArFunctor *arg2 = (ArFunctor *) 0 ;
  
  arg1 = (ArRobot *)jarg1; 
  arg2 = (ArFunctor *)jarg2; 
  (arg1)->remRunExitCB(arg2);
}


SWIGEXPORT int SWIGSTDCALL CSharp_ArRobot_waitForConnect__SWIG_0(void * jarg1, unsigned int jarg2) {
  int jresult ;
  ArRobot *arg1 = (ArRobot *) 0 ;
  unsigned int arg2 ;
  ArRobot::WaitState result;
  
  arg1 = (ArRobot *)jarg1; 
  arg2 = (unsigned int)jarg2; 
  result = (ArRobot::WaitState)(arg1)->waitForConnect(arg2);
  jresult = (int)result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_ArRobot_waitForConnect__SWIG_1(void * jarg1) {
  int jresult ;
  ArRobot *arg1 = (ArRobot *) 0 ;
  ArRobot::WaitState result;
  
  arg1 = (ArRobot *)jarg1; 
  result = (ArRobot::WaitState)(arg1)->waitForConnect();
  jresult = (int)result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_ArRobot_waitForConnectOrConnFail__SWIG_0(void * jarg1, unsigned int jarg2) {
  int jresult ;
  ArRobot *arg1 = (ArRobot *) 0 ;
  unsigned int arg2 ;
  ArRobot::WaitState result;
  
  arg1 = (ArRobot *)jarg1; 
  arg2 = (unsigned int)jarg2; 
  result = (ArRobot::WaitState)(arg1)->waitForConnectOrConnFail(arg2);
  jresult = (int)result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_ArRobot_waitForConnectOrConnFail__SWIG_1(void * jarg1) {
  int jresult ;
  ArRobot *arg1 = (ArRobot *) 0 ;
  ArRobot::WaitState result;
  
  arg1 = (ArRobot *)jarg1; 
  result = (ArRobot::WaitState)(arg1)->waitForConnectOrConnFail();
  jresult = (int)result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_ArRobot_waitForRunExit__SWIG_0(void * jarg1, unsigned int jarg2) {
  int jresult ;
  ArRobot *arg1 = (ArRobot *) 0 ;
  unsigned int arg2 ;
  ArRobot::WaitState result;
  
  arg1 = (ArRobot *)jarg1; 
  arg2 = (unsigned int)jarg2; 
  result = (ArRobot::WaitState)(arg1)->waitForRunExit(arg2);
  jresult = (int)result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_ArRobot_waitForRunExit__SWIG_1(void * jarg1) {
  int jresult ;
  ArRobot *arg1 = (ArRobot *) 0 ;
  ArRobot::WaitState result;
  
  arg1 = (ArRobot *)jarg1; 
  result = (ArRobot::WaitState)(arg1)->waitForRunExit();
  jresult = (int)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_ArRobot_wakeAllWaitingThreads(void * jarg1) {
  ArRobot *arg1 = (ArRobot *) 0 ;
  
  arg1 = (ArRobot *)jarg1; 
  (arg1)->wakeAllWaitingThreads();
}


SWIGEXPORT void SWIGSTDCALL CSharp_ArRobot_wakeAllConnWaitingThreads(void * jarg1) {
  ArRobot *arg1 = (ArRobot *) 0 ;
  
  arg1 = (ArRobot *)jarg1; 
  (arg1)->wakeAllConnWaitingThreads();
}


SWIGEXPORT void SWIGSTDCALL CSharp_ArRobot_wakeAllConnOrFailWaitingThreads(void * jarg1) {
  ArRobot *arg1 = (ArRobot *) 0 ;
  
  arg1 = (ArRobot *)jarg1; 
  (arg1)->wakeAllConnOrFailWaitingThreads();
}


SWIGEXPORT void SWIGSTDCALL CSharp_ArRobot_wakeAllRunExitWaitingThreads(void * jarg1) {
  ArRobot *arg1 = (ArRobot *) 0 ;
  
  arg1 = (ArRobot *)jarg1; 
  (arg1)->wakeAllRunExitWaitingThreads();
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_ArRobot_addUserTask__SWIG_0(void * jarg1, char * jarg2, int jarg3, void * jarg4, void * jarg5) {
  unsigned int jresult ;
  ArRobot *arg1 = (ArRobot *) 0 ;
  char *arg2 = (char *) 0 ;
  int arg3 ;
  ArFunctor *arg4 = (ArFunctor *) 0 ;
  ArTaskState::State *arg5 = (ArTaskState::State *) 0 ;
  bool result;
  
  arg1 = (ArRobot *)jarg1; 
  arg2 = (char *)jarg2; 
  arg3 = (int)jarg3; 
  arg4 = (ArFunctor *)jarg4; 
  arg5 = (ArTaskState::State *)jarg5; 
  result = (bool)(arg1)->addUserTask((char const *)arg2,arg3,arg4,arg5);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_ArRobot_addUserTask__SWIG_1(void * jarg1, char * jarg2, int jarg3, void * jarg4) {
  unsigned int jresult ;
  ArRobot *arg1 = (ArRobot *) 0 ;
  char *arg2 = (char *) 0 ;
  int arg3 ;
  ArFunctor *arg4 = (ArFunctor *) 0 ;
  bool result;
  
  arg1 = (ArRobot *)jarg1; 
  arg2 = (char *)jarg2; 
  arg3 = (int)jarg3; 
  arg4 = (ArFunctor *)jarg4; 
  result = (bool)(arg1)->addUserTask((char const *)arg2,arg3,arg4);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_ArRobot_remUserTask__SWIG_0(void * jarg1, char * jarg2) {
  ArRobot *arg1 = (ArRobot *) 0 ;
  char *arg2 = (char *) 0 ;
  
  arg1 = (ArRobot *)jarg1; 
  arg2 = (char *)jarg2; 
  (arg1)->remUserTask((char const *)arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_ArRobot_remUserTask__SWIG_1(void * jarg1, void * jarg2) {
  ArRobot *arg1 = (ArRobot *) 0 ;
  ArFunctor *arg2 = (ArFunctor *) 0 ;
  
  arg1 = (ArRobot *)jarg1; 
  arg2 = (ArFunctor *)jarg2; 
  (arg1)->remUserTask(arg2);
}


SWIGEXPORT void * SWIGSTDCALL CSharp_ArRobot_findUserTask__SWIG_0(void * jarg1, char * jarg2) {
  void * jresult ;
  ArRobot *arg1 = (ArRobot *) 0 ;
  char *arg2 = (char *) 0 ;
  ArSyncTask *result = 0 ;
  
  arg1 = (ArRobot *)jarg1; 
  arg2 = (char *)jarg2; 
  result = (ArSyncTask *)(arg1)->findUserTask((char const *)arg2);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_ArRobot_findUserTask__SWIG_1(void * jarg1, void * jarg2) {
  void * jresult ;
  ArRobot *arg1 = (ArRobot *) 0 ;
  ArFunctor *arg2 = (ArFunctor *) 0 ;
  ArSyncTask *result = 0 ;
  
  arg1 = (ArRobot *)jarg1; 
  arg2 = (ArFunctor *)jarg2; 
  result = (ArSyncTask *)(arg1)->findUserTask(arg2);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_ArRobot_logUserTasks(void * jarg1) {
  ArRobot *arg1 = (ArRobot *) 0 ;
  
  arg1 = (ArRobot *)jarg1; 
  ((ArRobot const *)arg1)->logUserTasks();
}


SWIGEXPORT void SWIGSTDCALL CSharp_ArRobot_logAllTasks(void * jarg1) {
  ArRobot *arg1 = (ArRobot *) 0 ;
  
  arg1 = (ArRobot *)jarg1; 
  ((ArRobot const *)arg1)->logAllTasks();
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_ArRobot_addSensorInterpTask__SWIG_0(void * jarg1, char * jarg2, int jarg3, void * jarg4, void * jarg5) {
  unsigned int jresult ;
  ArRobot *arg1 = (ArRobot *) 0 ;
  char *arg2 = (char *) 0 ;
  int arg3 ;
  ArFunctor *arg4 = (ArFunctor *) 0 ;
  ArTaskState::State *arg5 = (ArTaskState::State *) 0 ;
  bool result;
  
  arg1 = (ArRobot *)jarg1; 
  arg2 = (char *)jarg2; 
  arg3 = (int)jarg3; 
  arg4 = (ArFunctor *)jarg4; 
  arg5 = (ArTaskState::State *)jarg5; 
  result = (bool)(arg1)->addSensorInterpTask((char const *)arg2,arg3,arg4,arg5);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_ArRobot_addSensorInterpTask__SWIG_1(void * jarg1, char * jarg2, int jarg3, void * jarg4) {
  unsigned int jresult ;
  ArRobot *arg1 = (ArRobot *) 0 ;
  char *arg2 = (char *) 0 ;
  int arg3 ;
  ArFunctor *arg4 = (ArFunctor *) 0 ;
  bool result;
  
  arg1 = (ArRobot *)jarg1; 
  arg2 = (char *)jarg2; 
  arg3 = (int)jarg3; 
  arg4 = (ArFunctor *)jarg4; 
  result = (bool)(arg1)->addSensorInterpTask((char const *)arg2,arg3,arg4);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_ArRobot_remSensorInterpTask__SWIG_0(void * jarg1, char * jarg2) {
  ArRobot *arg1 = (ArRobot *) 0 ;
  char *arg2 = (char *) 0 ;
  
  arg1 = (ArRobot *)jarg1; 
  arg2 = (char *)jarg2; 
  (arg1)->remSensorInterpTask((char const *)arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_ArRobot_remSensorInterpTask__SWIG_1(void * jarg1, void * jarg2) {
  ArRobot *arg1 = (ArRobot *) 0 ;
  ArFunctor *arg2 = (ArFunctor *) 0 ;
  
  arg1 = (ArRobot *)jarg1; 
  arg2 = (ArFunctor *)jarg2; 
  (arg1)->remSensorInterpTask(arg2);
}


SWIGEXPORT void * SWIGSTDCALL CSharp_ArRobot_findTask__SWIG_0(void * jarg1, char * jarg2) {
  void * jresult ;
  ArRobot *arg1 = (ArRobot *) 0 ;
  char *arg2 = (char *) 0 ;
  ArSyncTask *result = 0 ;
  
  arg1 = (ArRobot *)jarg1; 
  arg2 = (char *)jarg2; 
  result = (ArSyncTask *)(arg1)->findTask((char const *)arg2);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_ArRobot_findTask__SWIG_1(void * jarg1, void * jarg2) {
  void * jresult ;
  ArRobot *arg1 = (ArRobot *) 0 ;
  ArFunctor *arg2 = (ArFunctor *) 0 ;
  ArSyncTask *result = 0 ;
  
  arg1 = (ArRobot *)jarg1; 
  arg2 = (ArFunctor *)jarg2; 
  result = (ArSyncTask *)(arg1)->findTask(arg2);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_ArRobot_addAction(void * jarg1, void * jarg2, int jarg3) {
  unsigned int jresult ;
  ArRobot *arg1 = (ArRobot *) 0 ;
  ArAction *arg2 = (ArAction *) 0 ;
  int arg3 ;
  bool result;
  
  arg1 = (ArRobot *)jarg1; 
  arg2 = (ArAction *)jarg2; 
  arg3 = (int)jarg3; 
  result = (bool)(arg1)->addAction(arg2,arg3);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_ArRobot_remAction__SWIG_0(void * jarg1, void * jarg2) {
  unsigned int jresult ;
  ArRobot *arg1 = (ArRobot *) 0 ;
  ArAction *arg2 = (ArAction *) 0 ;
  bool result;
  
  arg1 = (ArRobot *)jarg1; 
  arg2 = (ArAction *)jarg2; 
  result = (bool)(arg1)->remAction(arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_ArRobot_remAction__SWIG_1(void * jarg1, char * jarg2) {
  unsigned int jresult ;
  ArRobot *arg1 = (ArRobot *) 0 ;
  char *arg2 = (char *) 0 ;
  bool result;
  
  arg1 = (ArRobot *)jarg1; 
  arg2 = (char *)jarg2; 
  result = (bool)(arg1)->remAction((char const *)arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_ArRobot_findAction(void * jarg1, char * jarg2) {
  void * jresult ;
  ArRobot *arg1 = (ArRobot *) 0 ;
  char *arg2 = (char *) 0 ;
  ArAction *result = 0 ;
  
  arg1 = (ArRobot *)jarg1; 
  arg2 = (char *)jarg2; 
  result = (ArAction *)(arg1)->findAction((char const *)arg2);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_ArRobot_getActionMap(void * jarg1) {
  void * jresult ;
  ArRobot *arg1 = (ArRobot *) 0 ;
  ArResolver::ActionMap *result = 0 ;
  
  arg1 = (ArRobot *)jarg1; 
  result = (ArResolver::ActionMap *)(arg1)->getActionMap();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_ArRobot_deactivateActions(void * jarg1) {
  ArRobot *arg1 = (ArRobot *) 0 ;
  
  arg1 = (ArRobot *)jarg1; 
  (arg1)->deactivateActions();
}


SWIGEXPORT void SWIGSTDCALL CSharp_ArRobot_logActions__SWIG_0(void * jarg1, unsigned int jarg2) {
  ArRobot *arg1 = (ArRobot *) 0 ;
  bool arg2 ;
  
  arg1 = (ArRobot *)jarg1; 
  arg2 = jarg2 ? true : false; 
  ((ArRobot const *)arg1)->logActions(arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_ArRobot_logActions__SWIG_1(void * jarg1) {
  ArRobot *arg1 = (ArRobot *) 0 ;
  
  arg1 = (ArRobot *)jarg1; 
  ((ArRobot const *)arg1)->logActions();
}


SWIGEXPORT void * SWIGSTDCALL CSharp_ArRobot_getResolver(void * jarg1) {
  void * jresult ;
  ArRobot *arg1 = (ArRobot *) 0 ;
  ArResolver *result = 0 ;
  
  arg1 = (ArRobot *)jarg1; 
  result = (ArResolver *)(arg1)->getResolver();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_ArRobot_setResolver(void * jarg1, void * jarg2) {
  ArRobot *arg1 = (ArRobot *) 0 ;
  ArResolver *arg2 = (ArResolver *) 0 ;
  
  arg1 = (ArRobot *)jarg1; 
  arg2 = (ArResolver *)jarg2; 
  (arg1)->setResolver(arg2);
}


SWIGEXPORT void * SWIGSTDCALL CSharp_ArRobot_getLastActionResolverOutput(void * jarg1) {
  void * jresult ;
  ArRobot *arg1 = (ArRobot *) 0 ;
  ArActionDesired *result = 0 ;
  
  arg1 = (ArRobot *)jarg1; 
  result = (ArActionDesired *)(arg1)->getLastActionResolverOutput();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_ArRobot_setEncoderCorrectionCallback(void * jarg1, void * jarg2) {
  ArRobot *arg1 = (ArRobot *) 0 ;
  ArRetFunctor1< double,ArPoseWithTime > *arg2 = (ArRetFunctor1< double,ArPoseWithTime > *) 0 ;
  
  arg1 = (ArRobot *)jarg1; 
  arg2 = (ArRetFunctor1< double,ArPoseWithTime > *)jarg2; 
  (arg1)->setEncoderCorrectionCallback(arg2);
}


SWIGEXPORT void * SWIGSTDCALL CSharp_ArRobot_getEncoderCorrectionCallback(void * jarg1) {
  void * jresult ;
  ArRobot *arg1 = (ArRobot *) 0 ;
  ArRetFunctor1< double,ArPoseWithTime > *result = 0 ;
  
  arg1 = (ArRobot *)jarg1; 
  result = (ArRetFunctor1< double,ArPoseWithTime > *)((ArRobot const *)arg1)->getEncoderCorrectionCallback();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_ArRobot_getConnectionOpenedTime(void * jarg1) {
  void * jresult ;
  ArRobot *arg1 = (ArRobot *) 0 ;
  ArTime result;
  
  arg1 = (ArRobot *)jarg1; 
  result = ((ArRobot const *)arg1)->getConnectionOpenedTime();
  jresult = new ArTime((const ArTime &)result); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_ArRobot_setCycleTime(void * jarg1, unsigned int jarg2) {
  ArRobot *arg1 = (ArRobot *) 0 ;
  unsigned int arg2 ;
  
  arg1 = (ArRobot *)jarg1; 
  arg2 = (unsigned int)jarg2; 
  (arg1)->setCycleTime(arg2);
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_ArRobot_getCycleTime(void * jarg1) {
  unsigned int jresult ;
  ArRobot *arg1 = (ArRobot *) 0 ;
  unsigned int result;
  
  arg1 = (ArRobot *)jarg1; 
  result = (unsigned int)((ArRobot const *)arg1)->getCycleTime();
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_ArRobot_setCycleWarningTime(void * jarg1, unsigned int jarg2) {
  ArRobot *arg1 = (ArRobot *) 0 ;
  unsigned int arg2 ;
  
  arg1 = (ArRobot *)jarg1; 
  arg2 = (unsigned int)jarg2; 
  (arg1)->setCycleWarningTime(arg2);
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_ArRobot_getCycleWarningTime__SWIG_0(void * jarg1) {
  unsigned int jresult ;
  ArRobot *arg1 = (ArRobot *) 0 ;
  unsigned int result;
  
  arg1 = (ArRobot *)jarg1; 
  result = (unsigned int)((ArRobot const *)arg1)->getCycleWarningTime();
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_ArRobot_setConnectionCycleMultiplier(void * jarg1, unsigned int jarg2) {
  ArRobot *arg1 = (ArRobot *) 0 ;
  unsigned int arg2 ;
  
  arg1 = (ArRobot *)jarg1; 
  arg2 = (unsigned int)jarg2; 
  (arg1)->setConnectionCycleMultiplier(arg2);
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_ArRobot_getConnectionCycleMultiplier(void * jarg1) {
  unsigned int jresult ;
  ArRobot *arg1 = (ArRobot *) 0 ;
  unsigned int result;
  
  arg1 = (ArRobot *)jarg1; 
  result = (unsigned int)((ArRobot const *)arg1)->getConnectionCycleMultiplier();
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_ArRobot_setAsyncConnectSyncPacketRetries(void * jarg1, int jarg2) {
  ArRobot *arg1 = (ArRobot *) 0 ;
  int arg2 ;
  
  arg1 = (ArRobot *)jarg1; 
  arg2 = (int)jarg2; 
  (arg1)->setAsyncConnectSyncPacketRetries(arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_ArRobot_setCycleChained(void * jarg1, unsigned int jarg2) {
  ArRobot *arg1 = (ArRobot *) 0 ;
  bool arg2 ;
  
  arg1 = (ArRobot *)jarg1; 
  arg2 = jarg2 ? true : false; 
  (arg1)->setCycleChained(arg2);
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_ArRobot_isCycleChained(void * jarg1) {
  unsigned int jresult ;
  ArRobot *arg1 = (ArRobot *) 0 ;
  bool result;
  
  arg1 = (ArRobot *)jarg1; 
  result = (bool)((ArRobot const *)arg1)->isCycleChained();
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_ArRobot_setConnectionTimeoutTime(void * jarg1, int jarg2) {
  ArRobot *arg1 = (ArRobot *) 0 ;
  int arg2 ;
  
  arg1 = (ArRobot *)jarg1; 
  arg2 = (int)jarg2; 
  (arg1)->setConnectionTimeoutTime(arg2);
}


SWIGEXPORT int SWIGSTDCALL CSharp_ArRobot_getConnectionTimeoutTime(void * jarg1) {
  int jresult ;
  ArRobot *arg1 = (ArRobot *) 0 ;
  int result;
  
  arg1 = (ArRobot *)jarg1; 
  result = (int)(arg1)->getConnectionTimeoutTime();
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_ArRobot_getLastPacketTime(void * jarg1) {
  void * jresult ;
  ArRobot *arg1 = (ArRobot *) 0 ;
  ArTime result;
  
  arg1 = (ArRobot *)jarg1; 
  result = (arg1)->getLastPacketTime();
  jresult = new ArTime((const ArTime &)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_ArRobot_getLastOdometryTime(void * jarg1) {
  void * jresult ;
  ArRobot *arg1 = (ArRobot *) 0 ;
  ArTime result;
  
  arg1 = (ArRobot *)jarg1; 
  result = (arg1)->getLastOdometryTime();
  jresult = new ArTime((const ArTime &)result); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_ArRobot_setPoseInterpNumReadings(void * jarg1, unsigned long jarg2) {
  ArRobot *arg1 = (ArRobot *) 0 ;
  size_t arg2 ;
  
  arg1 = (ArRobot *)jarg1; 
  arg2 = (size_t)jarg2; 
  (arg1)->setPoseInterpNumReadings(arg2);
}


SWIGEXPORT unsigned long SWIGSTDCALL CSharp_ArRobot_getPoseInterpNumReadings(void * jarg1) {
  unsigned long jresult ;
  ArRobot *arg1 = (ArRobot *) 0 ;
  size_t result;
  
  arg1 = (ArRobot *)jarg1; 
  result = ((ArRobot const *)arg1)->getPoseInterpNumReadings();
  jresult = (unsigned long)result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_ArRobot_getPoseInterpPosition__SWIG_0(void * jarg1, void * jarg2, void * jarg3, void * jarg4) {
  int jresult ;
  ArRobot *arg1 = (ArRobot *) 0 ;
  ArTime arg2 ;
  ArPose *arg3 = (ArPose *) 0 ;
  ArPoseWithTime *arg4 = (ArPoseWithTime *) 0 ;
  ArTime *argp2 ;
  int result;
  
  arg1 = (ArRobot *)jarg1; 
  argp2 = (ArTime *)jarg2; 
  if (!argp2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Attempt to dereference null ArTime", 0);
    return 0;
  }
  arg2 = *argp2; 
  arg3 = (ArPose *)jarg3; 
  arg4 = (ArPoseWithTime *)jarg4; 
  result = (int)(arg1)->getPoseInterpPosition(arg2,arg3,arg4);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_ArRobot_getPoseInterpPosition__SWIG_1(void * jarg1, void * jarg2, void * jarg3) {
  int jresult ;
  ArRobot *arg1 = (ArRobot *) 0 ;
  ArTime arg2 ;
  ArPose *arg3 = (ArPose *) 0 ;
  ArTime *argp2 ;
  int result;
  
  arg1 = (ArRobot *)jarg1; 
  argp2 = (ArTime *)jarg2; 
  if (!argp2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Attempt to dereference null ArTime", 0);
    return 0;
  }
  arg2 = *argp2; 
  arg3 = (ArPose *)jarg3; 
  result = (int)(arg1)->getPoseInterpPosition(arg2,arg3);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_ArRobot_getPoseInterpolation(void * jarg1) {
  void * jresult ;
  ArRobot *arg1 = (ArRobot *) 0 ;
  ArInterpolation *result = 0 ;
  
  arg1 = (ArRobot *)jarg1; 
  result = (ArInterpolation *)(arg1)->getPoseInterpolation();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_ArRobot_getPoseInterpPositionCallback(void * jarg1) {
  void * jresult ;
  ArRobot *arg1 = (ArRobot *) 0 ;
  ArRetFunctor3< int,ArTime,ArPose *,ArPoseWithTime * > *result = 0 ;
  
  arg1 = (ArRobot *)jarg1; 
  result = (ArRetFunctor3< int,ArTime,ArPose *,ArPoseWithTime * > *)(arg1)->getPoseInterpPositionCallback();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_ArRobot_setEncoderPoseInterpNumReadings(void * jarg1, unsigned long jarg2) {
  ArRobot *arg1 = (ArRobot *) 0 ;
  size_t arg2 ;
  
  arg1 = (ArRobot *)jarg1; 
  arg2 = (size_t)jarg2; 
  (arg1)->setEncoderPoseInterpNumReadings(arg2);
}


SWIGEXPORT unsigned long SWIGSTDCALL CSharp_ArRobot_getEncoderPoseInterpNumReadings(void * jarg1) {
  unsigned long jresult ;
  ArRobot *arg1 = (ArRobot *) 0 ;
  size_t result;
  
  arg1 = (ArRobot *)jarg1; 
  result = ((ArRobot const *)arg1)->getEncoderPoseInterpNumReadings();
  jresult = (unsigned long)result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_ArRobot_getEncoderPoseInterpPosition__SWIG_0(void * jarg1, void * jarg2, void * jarg3, void * jarg4) {
  int jresult ;
  ArRobot *arg1 = (ArRobot *) 0 ;
  ArTime arg2 ;
  ArPose *arg3 = (ArPose *) 0 ;
  ArPoseWithTime *arg4 = (ArPoseWithTime *) 0 ;
  ArTime *argp2 ;
  int result;
  
  arg1 = (ArRobot *)jarg1; 
  argp2 = (ArTime *)jarg2; 
  if (!argp2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Attempt to dereference null ArTime", 0);
    return 0;
  }
  arg2 = *argp2; 
  arg3 = (ArPose *)jarg3; 
  arg4 = (ArPoseWithTime *)jarg4; 
  result = (int)(arg1)->getEncoderPoseInterpPosition(arg2,arg3,arg4);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_ArRobot_getEncoderPoseInterpPosition__SWIG_1(void * jarg1, void * jarg2, void * jarg3) {
  int jresult ;
  ArRobot *arg1 = (ArRobot *) 0 ;
  ArTime arg2 ;
  ArPose *arg3 = (ArPose *) 0 ;
  ArTime *argp2 ;
  int result;
  
  arg1 = (ArRobot *)jarg1; 
  argp2 = (ArTime *)jarg2; 
  if (!argp2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Attempt to dereference null ArTime", 0);
    return 0;
  }
  arg2 = *argp2; 
  arg3 = (ArPose *)jarg3; 
  result = (int)(arg1)->getEncoderPoseInterpPosition(arg2,arg3);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_ArRobot_getEncoderPoseInterpolation(void * jarg1) {
  void * jresult ;
  ArRobot *arg1 = (ArRobot *) 0 ;
  ArInterpolation *result = 0 ;
  
  arg1 = (ArRobot *)jarg1; 
  result = (ArInterpolation *)(arg1)->getEncoderPoseInterpolation();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_ArRobot_getEncoderPoseInterpPositionCallback(void * jarg1) {
  void * jresult ;
  ArRobot *arg1 = (ArRobot *) 0 ;
  ArRetFunctor3< int,ArTime,ArPose *,ArPoseWithTime * > *result = 0 ;
  
  arg1 = (ArRobot *)jarg1; 
  result = (ArRetFunctor3< int,ArTime,ArPose *,ArPoseWithTime * > *)(arg1)->getEncoderPoseInterpPositionCallback();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_ArRobot_applyEncoderOffset(void * jarg1, void * jarg2, void * jarg3, void * jarg4) {
  int jresult ;
  ArRobot *arg1 = (ArRobot *) 0 ;
  ArPoseWithTime arg2 ;
  ArTime arg3 ;
  ArPose *arg4 = (ArPose *) 0 ;
  ArPoseWithTime *argp2 ;
  ArTime *argp3 ;
  int result;
  
  arg1 = (ArRobot *)jarg1; 
  argp2 = (ArPoseWithTime *)jarg2; 
  if (!argp2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Attempt to dereference null ArPoseWithTime", 0);
    return 0;
  }
  arg2 = *argp2; 
  argp3 = (ArTime *)jarg3; 
  if (!argp3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Attempt to dereference null ArTime", 0);
    return 0;
  }
  arg3 = *argp3; 
  arg4 = (ArPose *)jarg4; 
  result = (int)(arg1)->applyEncoderOffset(arg2,arg3,arg4);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_ArRobot_getCounter(void * jarg1) {
  unsigned int jresult ;
  ArRobot *arg1 = (ArRobot *) 0 ;
  unsigned int result;
  
  arg1 = (ArRobot *)jarg1; 
  result = (unsigned int)((ArRobot const *)arg1)->getCounter();
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_ArRobot_getRobotParams(void * jarg1) {
  void * jresult ;
  ArRobot *arg1 = (ArRobot *) 0 ;
  ArRobotParams *result = 0 ;
  
  arg1 = (ArRobot *)jarg1; 
  result = (ArRobotParams *)((ArRobot const *)arg1)->getRobotParams();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_ArRobot_setRequireConfigPacket(void * jarg1, unsigned int jarg2) {
  ArRobot *arg1 = (ArRobot *) 0 ;
  bool arg2 ;
  
  arg1 = (ArRobot *)jarg1; 
  arg2 = jarg2 ? true : false; 
  (arg1)->setRequireConfigPacket(arg2);
}


SWIGEXPORT void * SWIGSTDCALL CSharp_ArRobot_getOrigRobotConfig(void * jarg1) {
  void * jresult ;
  ArRobot *arg1 = (ArRobot *) 0 ;
  ArRobotConfigPacketReader *result = 0 ;
  
  arg1 = (ArRobot *)jarg1; 
  result = (ArRobotConfigPacketReader *)((ArRobot const *)arg1)->getOrigRobotConfig();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_ArRobot_getBatteryPacketReader(void * jarg1) {
  void * jresult ;
  ArRobot *arg1 = (ArRobot *) 0 ;
  ArRobotBatteryPacketReader *result = 0 ;
  
  arg1 = (ArRobot *)jarg1; 
  result = (ArRobotBatteryPacketReader *)(arg1)->getBatteryPacketReader();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_ArRobot_setTransVelMax(void * jarg1, double jarg2) {
  ArRobot *arg1 = (ArRobot *) 0 ;
  double arg2 ;
  
  arg1 = (ArRobot *)jarg1; 
  arg2 = (double)jarg2; 
  (arg1)->setTransVelMax(arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_ArRobot_setTransNegVelMax(void * jarg1, double jarg2) {
  ArRobot *arg1 = (ArRobot *) 0 ;
  double arg2 ;
  
  arg1 = (ArRobot *)jarg1; 
  arg2 = (double)jarg2; 
  (arg1)->setTransNegVelMax(arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_ArRobot_setTransAccel(void * jarg1, double jarg2) {
  ArRobot *arg1 = (ArRobot *) 0 ;
  double arg2 ;
  
  arg1 = (ArRobot *)jarg1; 
  arg2 = (double)jarg2; 
  (arg1)->setTransAccel(arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_ArRobot_setTransDecel(void * jarg1, double jarg2) {
  ArRobot *arg1 = (ArRobot *) 0 ;
  double arg2 ;
  
  arg1 = (ArRobot *)jarg1; 
  arg2 = (double)jarg2; 
  (arg1)->setTransDecel(arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_ArRobot_setRotVelMax(void * jarg1, double jarg2) {
  ArRobot *arg1 = (ArRobot *) 0 ;
  double arg2 ;
  
  arg1 = (ArRobot *)jarg1; 
  arg2 = (double)jarg2; 
  (arg1)->setRotVelMax(arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_ArRobot_setRotAccel(void * jarg1, double jarg2) {
  ArRobot *arg1 = (ArRobot *) 0 ;
  double arg2 ;
  
  arg1 = (ArRobot *)jarg1; 
  arg2 = (double)jarg2; 
  (arg1)->setRotAccel(arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_ArRobot_setRotDecel(void * jarg1, double jarg2) {
  ArRobot *arg1 = (ArRobot *) 0 ;
  double arg2 ;
  
  arg1 = (ArRobot *)jarg1; 
  arg2 = (double)jarg2; 
  (arg1)->setRotDecel(arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_ArRobot_setLatVelMax(void * jarg1, double jarg2) {
  ArRobot *arg1 = (ArRobot *) 0 ;
  double arg2 ;
  
  arg1 = (ArRobot *)jarg1; 
  arg2 = (double)jarg2; 
  (arg1)->setLatVelMax(arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_ArRobot_setLatAccel(void * jarg1, double jarg2) {
  ArRobot *arg1 = (ArRobot *) 0 ;
  double arg2 ;
  
  arg1 = (ArRobot *)jarg1; 
  arg2 = (double)jarg2; 
  (arg1)->setLatAccel(arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_ArRobot_setLatDecel(void * jarg1, double jarg2) {
  ArRobot *arg1 = (ArRobot *) 0 ;
  double arg2 ;
  
  arg1 = (ArRobot *)jarg1; 
  arg2 = (double)jarg2; 
  (arg1)->setLatDecel(arg2);
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_ArRobot_hasSettableVelMaxes(void * jarg1) {
  unsigned int jresult ;
  ArRobot *arg1 = (ArRobot *) 0 ;
  bool result;
  
  arg1 = (ArRobot *)jarg1; 
  result = (bool)((ArRobot const *)arg1)->hasSettableVelMaxes();
  jresult = result; 
  return jresult;
}


SWIGEXPORT double SWIGSTDCALL CSharp_ArRobot_getTransVelMax(void * jarg1) {
  double jresult ;
  ArRobot *arg1 = (ArRobot *) 0 ;
  double result;
  
  arg1 = (ArRobot *)jarg1; 
  result = (double)((ArRobot const *)arg1)->getTransVelMax();
  jresult = result; 
  return jresult;
}


SWIGEXPORT double SWIGSTDCALL CSharp_ArRobot_getTransNegVelMax(void * jarg1) {
  double jresult ;
  ArRobot *arg1 = (ArRobot *) 0 ;
  double result;
  
  arg1 = (ArRobot *)jarg1; 
  result = (double)((ArRobot const *)arg1)->getTransNegVelMax();
  jresult = result; 
  return jresult;
}


SWIGEXPORT double SWIGSTDCALL CSharp_ArRobot_getRotVelMax(void * jarg1) {
  double jresult ;
  ArRobot *arg1 = (ArRobot *) 0 ;
  double result;
  
  arg1 = (ArRobot *)jarg1; 
  result = (double)((ArRobot const *)arg1)->getRotVelMax();
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_ArRobot_hasSettableAccsDecs(void * jarg1) {
  unsigned int jresult ;
  ArRobot *arg1 = (ArRobot *) 0 ;
  bool result;
  
  arg1 = (ArRobot *)jarg1; 
  result = (bool)((ArRobot const *)arg1)->hasSettableAccsDecs();
  jresult = result; 
  return jresult;
}


SWIGEXPORT double SWIGSTDCALL CSharp_ArRobot_getTransAccel(void * jarg1) {
  double jresult ;
  ArRobot *arg1 = (ArRobot *) 0 ;
  double result;
  
  arg1 = (ArRobot *)jarg1; 
  result = (double)((ArRobot const *)arg1)->getTransAccel();
  jresult = result; 
  return jresult;
}


SWIGEXPORT double SWIGSTDCALL CSharp_ArRobot_getTransDecel(void * jarg1) {
  double jresult ;
  ArRobot *arg1 = (ArRobot *) 0 ;
  double result;
  
  arg1 = (ArRobot *)jarg1; 
  result = (double)((ArRobot const *)arg1)->getTransDecel();
  jresult = result; 
  return jresult;
}


SWIGEXPORT double SWIGSTDCALL CSharp_ArRobot_getRotAccel(void * jarg1) {
  double jresult ;
  ArRobot *arg1 = (ArRobot *) 0 ;
  double result;
  
  arg1 = (ArRobot *)jarg1; 
  result = (double)((ArRobot const *)arg1)->getRotAccel();
  jresult = result; 
  return jresult;
}


SWIGEXPORT double SWIGSTDCALL CSharp_ArRobot_getRotDecel(void * jarg1) {
  double jresult ;
  ArRobot *arg1 = (ArRobot *) 0 ;
  double result;
  
  arg1 = (ArRobot *)jarg1; 
  result = (double)((ArRobot const *)arg1)->getRotDecel();
  jresult = result; 
  return jresult;
}


SWIGEXPORT double SWIGSTDCALL CSharp_ArRobot_getLatVelMax(void * jarg1) {
  double jresult ;
  ArRobot *arg1 = (ArRobot *) 0 ;
  double result;
  
  arg1 = (ArRobot *)jarg1; 
  result = (double)((ArRobot const *)arg1)->getLatVelMax();
  jresult = result; 
  return jresult;
}


SWIGEXPORT double SWIGSTDCALL CSharp_ArRobot_getLatAccel(void * jarg1) {
  double jresult ;
  ArRobot *arg1 = (ArRobot *) 0 ;
  double result;
  
  arg1 = (ArRobot *)jarg1; 
  result = (double)((ArRobot const *)arg1)->getLatAccel();
  jresult = result; 
  return jresult;
}


SWIGEXPORT double SWIGSTDCALL CSharp_ArRobot_getLatDecel(void * jarg1) {
  double jresult ;
  ArRobot *arg1 = (ArRobot *) 0 ;
  double result;
  
  arg1 = (ArRobot *)jarg1; 
  result = (double)((ArRobot const *)arg1)->getLatDecel();
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_ArRobot_loadParamFile(void * jarg1, char * jarg2) {
  unsigned int jresult ;
  ArRobot *arg1 = (ArRobot *) 0 ;
  char *arg2 = (char *) 0 ;
  bool result;
  
  arg1 = (ArRobot *)jarg1; 
  arg2 = (char *)jarg2; 
  result = (bool)(arg1)->loadParamFile((char const *)arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_ArRobot_setRobotParams(void * jarg1, void * jarg2) {
  ArRobot *arg1 = (ArRobot *) 0 ;
  ArRobotParams *arg2 = (ArRobotParams *) 0 ;
  
  arg1 = (ArRobot *)jarg1; 
  arg2 = (ArRobotParams *)jarg2; 
  (arg1)->setRobotParams(arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_ArRobot_attachKeyHandler__SWIG_0(void * jarg1, void * jarg2, unsigned int jarg3, unsigned int jarg4) {
  ArRobot *arg1 = (ArRobot *) 0 ;
  ArKeyHandler *arg2 = (ArKeyHandler *) 0 ;
  bool arg3 ;
  bool arg4 ;
  
  arg1 = (ArRobot *)jarg1; 
  arg2 = (ArKeyHandler *)jarg2; 
  arg3 = jarg3 ? true : false; 
  arg4 = jarg4 ? true : false; 
  (arg1)->attachKeyHandler(arg2,arg3,arg4);
}


SWIGEXPORT void SWIGSTDCALL CSharp_ArRobot_attachKeyHandler__SWIG_1(void * jarg1, void * jarg2, unsigned int jarg3) {
  ArRobot *arg1 = (ArRobot *) 0 ;
  ArKeyHandler *arg2 = (ArKeyHandler *) 0 ;
  bool arg3 ;
  
  arg1 = (ArRobot *)jarg1; 
  arg2 = (ArKeyHandler *)jarg2; 
  arg3 = jarg3 ? true : false; 
  (arg1)->attachKeyHandler(arg2,arg3);
}


SWIGEXPORT void SWIGSTDCALL CSharp_ArRobot_attachKeyHandler__SWIG_2(void * jarg1, void * jarg2) {
  ArRobot *arg1 = (ArRobot *) 0 ;
  ArKeyHandler *arg2 = (ArKeyHandler *) 0 ;
  
  arg1 = (ArRobot *)jarg1; 
  arg2 = (ArKeyHandler *)jarg2; 
  (arg1)->attachKeyHandler(arg2);
}


SWIGEXPORT void * SWIGSTDCALL CSharp_ArRobot_getKeyHandler(void * jarg1) {
  void * jresult ;
  ArRobot *arg1 = (ArRobot *) 0 ;
  ArKeyHandler *result = 0 ;
  
  arg1 = (ArRobot *)jarg1; 
  result = (ArKeyHandler *)((ArRobot const *)arg1)->getKeyHandler();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_ArRobot_lockObj(void * jarg1) {
  int jresult ;
  ArRobot *arg1 = (ArRobot *) 0 ;
  int result;
  
  arg1 = (ArRobot *)jarg1; 
  result = (int)(arg1)->lock();
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_ArRobot_tryLock(void * jarg1) {
  int jresult ;
  ArRobot *arg1 = (ArRobot *) 0 ;
  int result;
  
  arg1 = (ArRobot *)jarg1; 
  result = (int)(arg1)->tryLock();
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_ArRobot_unlockObj(void * jarg1) {
  int jresult ;
  ArRobot *arg1 = (ArRobot *) 0 ;
  int result;
  
  arg1 = (ArRobot *)jarg1; 
  result = (int)(arg1)->unlock();
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_ArRobot_setMutexLogging(void * jarg1, unsigned int jarg2) {
  ArRobot *arg1 = (ArRobot *) 0 ;
  bool arg2 ;
  
  arg1 = (ArRobot *)jarg1; 
  arg2 = jarg2 ? true : false; 
  (arg1)->setMutexLogging(arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_ArRobot_setMutexLockWarningTime(void * jarg1, double jarg2) {
  ArRobot *arg1 = (ArRobot *) 0 ;
  double arg2 ;
  
  arg1 = (ArRobot *)jarg1; 
  arg2 = (double)jarg2; 
  (arg1)->setMutexLockWarningTime(arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_ArRobot_setMutexUnlockWarningTime(void * jarg1, double jarg2) {
  ArRobot *arg1 = (ArRobot *) 0 ;
  double arg2 ;
  
  arg1 = (ArRobot *)jarg1; 
  arg2 = (double)jarg2; 
  (arg1)->setMutexUnlockWarningTime(arg2);
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_ArRobot_isStabilizing(void * jarg1) {
  unsigned int jresult ;
  ArRobot *arg1 = (ArRobot *) 0 ;
  bool result;
  
  arg1 = (ArRobot *)jarg1; 
  result = (bool)(arg1)->isStabilizing();
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_ArRobot_setStabilizingTime(void * jarg1, int jarg2) {
  ArRobot *arg1 = (ArRobot *) 0 ;
  int arg2 ;
  
  arg1 = (ArRobot *)jarg1; 
  arg2 = (int)jarg2; 
  (arg1)->setStabilizingTime(arg2);
}


SWIGEXPORT int SWIGSTDCALL CSharp_ArRobot_getStabilizingTime(void * jarg1) {
  int jresult ;
  ArRobot *arg1 = (ArRobot *) 0 ;
  int result;
  
  arg1 = (ArRobot *)jarg1; 
  result = (int)((ArRobot const *)arg1)->getStabilizingTime();
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_ArRobot_addStabilizingCB__SWIG_0(void * jarg1, void * jarg2, int jarg3) {
  ArRobot *arg1 = (ArRobot *) 0 ;
  ArFunctor *arg2 = (ArFunctor *) 0 ;
  ArListPos::Pos arg3 ;
  
  arg1 = (ArRobot *)jarg1; 
  arg2 = (ArFunctor *)jarg2; 
  arg3 = (ArListPos::Pos)jarg3; 
  (arg1)->addStabilizingCB(arg2,arg3);
}


SWIGEXPORT void SWIGSTDCALL CSharp_ArRobot_addStabilizingCB__SWIG_1(void * jarg1, void * jarg2) {
  ArRobot *arg1 = (ArRobot *) 0 ;
  ArFunctor *arg2 = (ArFunctor *) 0 ;
  
  arg1 = (ArRobot *)jarg1; 
  arg2 = (ArFunctor *)jarg2; 
  (arg1)->addStabilizingCB(arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_ArRobot_remStabilizingCB(void * jarg1, void * jarg2) {
  ArRobot *arg1 = (ArRobot *) 0 ;
  ArFunctor *arg2 = (ArFunctor *) 0 ;
  
  arg1 = (ArRobot *)jarg1; 
  arg2 = (ArFunctor *)jarg2; 
  (arg1)->remStabilizingCB(arg2);
}


SWIGEXPORT void * SWIGSTDCALL CSharp_ArRobot_getSyncTaskRoot(void * jarg1) {
  void * jresult ;
  ArRobot *arg1 = (ArRobot *) 0 ;
  ArSyncTask *result = 0 ;
  
  arg1 = (ArRobot *)jarg1; 
  result = (ArSyncTask *)(arg1)->getSyncTaskRoot();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_ArRobot_loopOnce(void * jarg1) {
  ArRobot *arg1 = (ArRobot *) 0 ;
  
  arg1 = (ArRobot *)jarg1; 
  (arg1)->loopOnce();
}


SWIGEXPORT void SWIGSTDCALL CSharp_ArRobot_setOdometryDelay(void * jarg1, int jarg2) {
  ArRobot *arg1 = (ArRobot *) 0 ;
  int arg2 ;
  
  arg1 = (ArRobot *)jarg1; 
  arg2 = (int)jarg2; 
  (arg1)->setOdometryDelay(arg2);
}


SWIGEXPORT int SWIGSTDCALL CSharp_ArRobot_getOdometryDelay(void * jarg1) {
  int jresult ;
  ArRobot *arg1 = (ArRobot *) 0 ;
  int result;
  
  arg1 = (ArRobot *)jarg1; 
  result = (int)(arg1)->getOdometryDelay();
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_ArRobot_getLogMovementSent(void * jarg1) {
  unsigned int jresult ;
  ArRobot *arg1 = (ArRobot *) 0 ;
  bool result;
  
  arg1 = (ArRobot *)jarg1; 
  result = (bool)(arg1)->getLogMovementSent();
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_ArRobot_setLogMovementSent(void * jarg1, unsigned int jarg2) {
  ArRobot *arg1 = (ArRobot *) 0 ;
  bool arg2 ;
  
  arg1 = (ArRobot *)jarg1; 
  arg2 = jarg2 ? true : false; 
  (arg1)->setLogMovementSent(arg2);
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_ArRobot_getLogMovementReceived(void * jarg1) {
  unsigned int jresult ;
  ArRobot *arg1 = (ArRobot *) 0 ;
  bool result;
  
  arg1 = (ArRobot *)jarg1; 
  result = (bool)(arg1)->getLogMovementReceived();
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_ArRobot_setLogMovementReceived(void * jarg1, unsigned int jarg2) {
  ArRobot *arg1 = (ArRobot *) 0 ;
  bool arg2 ;
  
  arg1 = (ArRobot *)jarg1; 
  arg2 = jarg2 ? true : false; 
  (arg1)->setLogMovementReceived(arg2);
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_ArRobot_getLogVelocitiesReceived(void * jarg1) {
  unsigned int jresult ;
  ArRobot *arg1 = (ArRobot *) 0 ;
  bool result;
  
  arg1 = (ArRobot *)jarg1; 
  result = (bool)(arg1)->getLogVelocitiesReceived();
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_ArRobot_setLogVelocitiesReceived(void * jarg1, unsigned int jarg2) {
  ArRobot *arg1 = (ArRobot *) 0 ;
  bool arg2 ;
  
  arg1 = (ArRobot *)jarg1; 
  arg2 = jarg2 ? true : false; 
  (arg1)->setLogVelocitiesReceived(arg2);
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_ArRobot_getPacketsReceivedTracking(void * jarg1) {
  unsigned int jresult ;
  ArRobot *arg1 = (ArRobot *) 0 ;
  bool result;
  
  arg1 = (ArRobot *)jarg1; 
  result = (bool)(arg1)->getPacketsReceivedTracking();
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_ArRobot_setPacketsReceivedTracking(void * jarg1, unsigned int jarg2) {
  ArRobot *arg1 = (ArRobot *) 0 ;
  bool arg2 ;
  
  arg1 = (ArRobot *)jarg1; 
  arg2 = jarg2 ? true : false; 
  (arg1)->setPacketsReceivedTracking(arg2);
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_ArRobot_getLogSIPContents(void * jarg1) {
  unsigned int jresult ;
  ArRobot *arg1 = (ArRobot *) 0 ;
  bool result;
  
  arg1 = (ArRobot *)jarg1; 
  result = (bool)(arg1)->getLogSIPContents();
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_ArRobot_setLogSIPContents(void * jarg1, unsigned int jarg2) {
  ArRobot *arg1 = (ArRobot *) 0 ;
  bool arg2 ;
  
  arg1 = (ArRobot *)jarg1; 
  arg2 = jarg2 ? true : false; 
  (arg1)->setLogSIPContents(arg2);
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_ArRobot_getPacketsSentTracking(void * jarg1) {
  unsigned int jresult ;
  ArRobot *arg1 = (ArRobot *) 0 ;
  bool result;
  
  arg1 = (ArRobot *)jarg1; 
  result = (bool)(arg1)->getPacketsSentTracking();
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_ArRobot_setPacketsSentTracking(void * jarg1, unsigned int jarg2) {
  ArRobot *arg1 = (ArRobot *) 0 ;
  bool arg2 ;
  
  arg1 = (ArRobot *)jarg1; 
  arg2 = jarg2 ? true : false; 
  (arg1)->setPacketsSentTracking(arg2);
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_ArRobot_getLogActions(void * jarg1) {
  unsigned int jresult ;
  ArRobot *arg1 = (ArRobot *) 0 ;
  bool result;
  
  arg1 = (ArRobot *)jarg1; 
  result = (bool)(arg1)->getLogActions();
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_ArRobot_setLogActions(void * jarg1, unsigned int jarg2) {
  ArRobot *arg1 = (ArRobot *) 0 ;
  bool arg2 ;
  
  arg1 = (ArRobot *)jarg1; 
  arg2 = jarg2 ? true : false; 
  (arg1)->setLogActions(arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_ArRobot_setDoNotSwitchBaud(void * jarg1, unsigned int jarg2) {
  ArRobot *arg1 = (ArRobot *) 0 ;
  bool arg2 ;
  
  arg1 = (ArRobot *)jarg1; 
  arg2 = jarg2 ? true : false; 
  (arg1)->setDoNotSwitchBaud(arg2);
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_ArRobot_getDoNotSwitchBaud(void * jarg1) {
  unsigned int jresult ;
  ArRobot *arg1 = (ArRobot *) 0 ;
  bool result;
  
  arg1 = (ArRobot *)jarg1; 
  result = (bool)(arg1)->getDoNotSwitchBaud();
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_ArRobot_incCounter(void * jarg1) {
  ArRobot *arg1 = (ArRobot *) 0 ;
  
  arg1 = (ArRobot *)jarg1; 
  (arg1)->incCounter();
}


SWIGEXPORT void SWIGSTDCALL CSharp_ArRobot_packetHandler(void * jarg1) {
  ArRobot *arg1 = (ArRobot *) 0 ;
  
  arg1 = (ArRobot *)jarg1; 
  (arg1)->packetHandler();
}


SWIGEXPORT void SWIGSTDCALL CSharp_ArRobot_actionHandler(void * jarg1) {
  ArRobot *arg1 = (ArRobot *) 0 ;
  
  arg1 = (ArRobot *)jarg1; 
  (arg1)->actionHandler();
}


SWIGEXPORT void SWIGSTDCALL CSharp_ArRobot_stateReflector(void * jarg1) {
  ArRobot *arg1 = (ArRobot *) 0 ;
  
  arg1 = (ArRobot *)jarg1; 
  (arg1)->stateReflector();
}


SWIGEXPORT void SWIGSTDCALL CSharp_ArRobot_robotLocker(void * jarg1) {
  ArRobot *arg1 = (ArRobot *) 0 ;
  
  arg1 = (ArRobot *)jarg1; 
  (arg1)->robotLocker();
}


SWIGEXPORT void SWIGSTDCALL CSharp_ArRobot_robotUnlocker(void * jarg1) {
  ArRobot *arg1 = (ArRobot *) 0 ;
  
  arg1 = (ArRobot *)jarg1; 
  (arg1)->robotUnlocker();
}


SWIGEXPORT void SWIGSTDCALL CSharp_ArRobot_packetHandlerNonThreaded(void * jarg1) {
  ArRobot *arg1 = (ArRobot *) 0 ;
  
  arg1 = (ArRobot *)jarg1; 
  (arg1)->packetHandlerNonThreaded();
}


SWIGEXPORT void SWIGSTDCALL CSharp_ArRobot_packetHandlerThreadedProcessor(void * jarg1) {
  ArRobot *arg1 = (ArRobot *) 0 ;
  
  arg1 = (ArRobot *)jarg1; 
  (arg1)->packetHandlerThreadedProcessor();
}


SWIGEXPORT void SWIGSTDCALL CSharp_ArRobot_packetHandlerThreadedReader(void * jarg1) {
  ArRobot *arg1 = (ArRobot *) 0 ;
  
  arg1 = (ArRobot *)jarg1; 
  (arg1)->packetHandlerThreadedReader();
}


SWIGEXPORT void SWIGSTDCALL CSharp_ArRobot_keyHandlerExit(void * jarg1) {
  ArRobot *arg1 = (ArRobot *) 0 ;
  
  arg1 = (ArRobot *)jarg1; 
  (arg1)->keyHandlerExit();
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_ArRobot_processMotorPacket(void * jarg1, void * jarg2) {
  unsigned int jresult ;
  ArRobot *arg1 = (ArRobot *) 0 ;
  ArRobotPacket *arg2 = (ArRobotPacket *) 0 ;
  bool result;
  
  arg1 = (ArRobot *)jarg1; 
  arg2 = (ArRobotPacket *)jarg2; 
  result = (bool)(arg1)->processMotorPacket(arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_ArRobot_processNewSonar(void * jarg1, char jarg2, int jarg3, void * jarg4) {
  ArRobot *arg1 = (ArRobot *) 0 ;
  char arg2 ;
  int arg3 ;
  ArTime arg4 ;
  ArTime *argp4 ;
  
  arg1 = (ArRobot *)jarg1; 
  arg2 = (char)jarg2; 
  arg3 = (int)jarg3; 
  argp4 = (ArTime *)jarg4; 
  if (!argp4) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Attempt to dereference null ArTime", 0);
    return ;
  }
  arg4 = *argp4; 
  (arg1)->processNewSonar(arg2,arg3,arg4);
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_ArRobot_processEncoderPacket(void * jarg1, void * jarg2) {
  unsigned int jresult ;
  ArRobot *arg1 = (ArRobot *) 0 ;
  ArRobotPacket *arg2 = (ArRobotPacket *) 0 ;
  bool result;
  
  arg1 = (ArRobot *)jarg1; 
  arg2 = (ArRobotPacket *)jarg2; 
  result = (bool)(arg1)->processEncoderPacket(arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_ArRobot_processIOPacket(void * jarg1, void * jarg2) {
  unsigned int jresult ;
  ArRobot *arg1 = (ArRobot *) 0 ;
  ArRobotPacket *arg2 = (ArRobotPacket *) 0 ;
  bool result;
  
  arg1 = (ArRobot *)jarg1; 
  arg2 = (ArRobotPacket *)jarg2; 
  result = (bool)(arg1)->processIOPacket(arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_ArRobot_init(void * jarg1) {
  ArRobot *arg1 = (ArRobot *) 0 ;
  
  arg1 = (ArRobot *)jarg1; 
  (arg1)->init();
}


SWIGEXPORT void SWIGSTDCALL CSharp_ArRobot_setUpSyncList(void * jarg1) {
  ArRobot *arg1 = (ArRobot *) 0 ;
  
  arg1 = (ArRobot *)jarg1; 
  (arg1)->setUpSyncList();
}


SWIGEXPORT void SWIGSTDCALL CSharp_ArRobot_setUpPacketHandlers(void * jarg1) {
  ArRobot *arg1 = (ArRobot *) 0 ;
  
  arg1 = (ArRobot *)jarg1; 
  (arg1)->setUpPacketHandlers();
}


SWIGEXPORT void SWIGSTDCALL CSharp_ArRobot_myMotorPacketCB_set(void * jarg1, void * jarg2) {
  ArRobot *arg1 = (ArRobot *) 0 ;
  ArRetFunctor1C< bool,ArRobot,ArRobotPacket * > *arg2 = (ArRetFunctor1C< bool,ArRobot,ArRobotPacket * > *) 0 ;
  
  arg1 = (ArRobot *)jarg1; 
  arg2 = (ArRetFunctor1C< bool,ArRobot,ArRobotPacket * > *)jarg2; 
  if (arg1) (arg1)->myMotorPacketCB = *arg2;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_ArRobot_myMotorPacketCB_get(void * jarg1) {
  void * jresult ;
  ArRobot *arg1 = (ArRobot *) 0 ;
  ArRetFunctor1C< bool,ArRobot,ArRobotPacket * > *result = 0 ;
  
  arg1 = (ArRobot *)jarg1; 
  result = (ArRetFunctor1C< bool,ArRobot,ArRobotPacket * > *)& ((arg1)->myMotorPacketCB);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_ArRobot_myEncoderPacketCB_set(void * jarg1, void * jarg2) {
  ArRobot *arg1 = (ArRobot *) 0 ;
  ArRetFunctor1C< bool,ArRobot,ArRobotPacket * > *arg2 = (ArRetFunctor1C< bool,ArRobot,ArRobotPacket * > *) 0 ;
  
  arg1 = (ArRobot *)jarg1; 
  arg2 = (ArRetFunctor1C< bool,ArRobot,ArRobotPacket * > *)jarg2; 
  if (arg1) (arg1)->myEncoderPacketCB = *arg2;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_ArRobot_myEncoderPacketCB_get(void * jarg1) {
  void * jresult ;
  ArRobot *arg1 = (ArRobot *) 0 ;
  ArRetFunctor1C< bool,ArRobot,ArRobotPacket * > *result = 0 ;
  
  arg1 = (ArRobot *)jarg1; 
  result = (ArRetFunctor1C< bool,ArRobot,ArRobotPacket * > *)& ((arg1)->myEncoderPacketCB);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_ArRobot_myIOPacketCB_set(void * jarg1, void * jarg2) {
  ArRobot *arg1 = (ArRobot *) 0 ;
  ArRetFunctor1C< bool,ArRobot,ArRobotPacket * > *arg2 = (ArRetFunctor1C< bool,ArRobot,ArRobotPacket * > *) 0 ;
  
  arg1 = (ArRobot *)jarg1; 
  arg2 = (ArRetFunctor1C< bool,ArRobot,ArRobotPacket * > *)jarg2; 
  if (arg1) (arg1)->myIOPacketCB = *arg2;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_ArRobot_myIOPacketCB_get(void * jarg1) {
  void * jresult ;
  ArRobot *arg1 = (ArRobot *) 0 ;
  ArRetFunctor1C< bool,ArRobot,ArRobotPacket * > *result = 0 ;
  
  arg1 = (ArRobot *)jarg1; 
  result = (ArRetFunctor1C< bool,ArRobot,ArRobotPacket * > *)& ((arg1)->myIOPacketCB);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_ArRobot_myPacketHandlerCB_set(void * jarg1, void * jarg2) {
  ArRobot *arg1 = (ArRobot *) 0 ;
  ArFunctorC< ArRobot > *arg2 = (ArFunctorC< ArRobot > *) 0 ;
  
  arg1 = (ArRobot *)jarg1; 
  arg2 = (ArFunctorC< ArRobot > *)jarg2; 
  if (arg1) (arg1)->myPacketHandlerCB = *arg2;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_ArRobot_myPacketHandlerCB_get(void * jarg1) {
  void * jresult ;
  ArRobot *arg1 = (ArRobot *) 0 ;
  ArFunctorC< ArRobot > *result = 0 ;
  
  arg1 = (ArRobot *)jarg1; 
  result = (ArFunctorC< ArRobot > *)& ((arg1)->myPacketHandlerCB);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_ArRobot_myActionHandlerCB_set(void * jarg1, void * jarg2) {
  ArRobot *arg1 = (ArRobot *) 0 ;
  ArFunctorC< ArRobot > *arg2 = (ArFunctorC< ArRobot > *) 0 ;
  
  arg1 = (ArRobot *)jarg1; 
  arg2 = (ArFunctorC< ArRobot > *)jarg2; 
  if (arg1) (arg1)->myActionHandlerCB = *arg2;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_ArRobot_myActionHandlerCB_get(void * jarg1) {
  void * jresult ;
  ArRobot *arg1 = (ArRobot *) 0 ;
  ArFunctorC< ArRobot > *result = 0 ;
  
  arg1 = (ArRobot *)jarg1; 
  result = (ArFunctorC< ArRobot > *)& ((arg1)->myActionHandlerCB);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_ArRobot_myStateReflectorCB_set(void * jarg1, void * jarg2) {
  ArRobot *arg1 = (ArRobot *) 0 ;
  ArFunctorC< ArRobot > *arg2 = (ArFunctorC< ArRobot > *) 0 ;
  
  arg1 = (ArRobot *)jarg1; 
  arg2 = (ArFunctorC< ArRobot > *)jarg2; 
  if (arg1) (arg1)->myStateReflectorCB = *arg2;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_ArRobot_myStateReflectorCB_get(void * jarg1) {
  void * jresult ;
  ArRobot *arg1 = (ArRobot *) 0 ;
  ArFunctorC< ArRobot > *result = 0 ;
  
  arg1 = (ArRobot *)jarg1; 
  result = (ArFunctorC< ArRobot > *)& ((arg1)->myStateReflectorCB);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_ArRobot_myRobotLockerCB_set(void * jarg1, void * jarg2) {
  ArRobot *arg1 = (ArRobot *) 0 ;
  ArFunctorC< ArRobot > *arg2 = (ArFunctorC< ArRobot > *) 0 ;
  
  arg1 = (ArRobot *)jarg1; 
  arg2 = (ArFunctorC< ArRobot > *)jarg2; 
  if (arg1) (arg1)->myRobotLockerCB = *arg2;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_ArRobot_myRobotLockerCB_get(void * jarg1) {
  void * jresult ;
  ArRobot *arg1 = (ArRobot *) 0 ;
  ArFunctorC< ArRobot > *result = 0 ;
  
  arg1 = (ArRobot *)jarg1; 
  result = (ArFunctorC< ArRobot > *)& ((arg1)->myRobotLockerCB);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_ArRobot_myRobotUnlockerCB_set(void * jarg1, void * jarg2) {
  ArRobot *arg1 = (ArRobot *) 0 ;
  ArFunctorC< ArRobot > *arg2 = (ArFunctorC< ArRobot > *) 0 ;
  
  arg1 = (ArRobot *)jarg1; 
  arg2 = (ArFunctorC< ArRobot > *)jarg2; 
  if (arg1) (arg1)->myRobotUnlockerCB = *arg2;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_ArRobot_myRobotUnlockerCB_get(void * jarg1) {
  void * jresult ;
  ArRobot *arg1 = (ArRobot *) 0 ;
  ArFunctorC< ArRobot > *result = 0 ;
  
  arg1 = (ArRobot *)jarg1; 
  result = (ArFunctorC< ArRobot > *)& ((arg1)->myRobotUnlockerCB);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_ArRobot_myKeyHandlerExitCB_set(void * jarg1, void * jarg2) {
  ArRobot *arg1 = (ArRobot *) 0 ;
  ArFunctorC< ArRobot > *arg2 = (ArFunctorC< ArRobot > *) 0 ;
  
  arg1 = (ArRobot *)jarg1; 
  arg2 = (ArFunctorC< ArRobot > *)jarg2; 
  if (arg1) (arg1)->myKeyHandlerExitCB = *arg2;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_ArRobot_myKeyHandlerExitCB_get(void * jarg1) {
  void * jresult ;
  ArRobot *arg1 = (ArRobot *) 0 ;
  ArFunctorC< ArRobot > *result = 0 ;
  
  arg1 = (ArRobot *)jarg1; 
  result = (ArFunctorC< ArRobot > *)& ((arg1)->myKeyHandlerExitCB);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_ArRobot_myKeyHandlerCB_set(void * jarg1, void * jarg2) {
  ArRobot *arg1 = (ArRobot *) 0 ;
  ArFunctorC< ArKeyHandler > *arg2 = (ArFunctorC< ArKeyHandler > *) 0 ;
  
  arg1 = (ArRobot *)jarg1; 
  arg2 = (ArFunctorC< ArKeyHandler > *)jarg2; 
  if (arg1) (arg1)->myKeyHandlerCB = arg2;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_ArRobot_myKeyHandlerCB_get(void * jarg1) {
  void * jresult ;
  ArRobot *arg1 = (ArRobot *) 0 ;
  ArFunctorC< ArKeyHandler > *result = 0 ;
  
  arg1 = (ArRobot *)jarg1; 
  result = (ArFunctorC< ArKeyHandler > *) ((arg1)->myKeyHandlerCB);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_ArRobot_getRunExitListCopy(void * jarg1) {
  void * jresult ;
  ArRobot *arg1 = (ArRobot *) 0 ;
  std::list< ArFunctor * > *result = 0 ;
  
  arg1 = (ArRobot *)jarg1; 
  result = (std::list< ArFunctor * > *)(arg1)->getRunExitListCopy();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_ArRobot_getRawEncoderPose(void * jarg1) {
  void * jresult ;
  ArRobot *arg1 = (ArRobot *) 0 ;
  ArPose result;
  
  arg1 = (ArRobot *)jarg1; 
  result = ((ArRobot const *)arg1)->getRawEncoderPose();
  jresult = new ArPose((const ArPose &)result); 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_ArRobot_getNoTimeWarningThisCycle(void * jarg1) {
  unsigned int jresult ;
  ArRobot *arg1 = (ArRobot *) 0 ;
  bool result;
  
  arg1 = (ArRobot *)jarg1; 
  result = (bool)(arg1)->getNoTimeWarningThisCycle();
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_ArRobot_setNoTimeWarningThisCycle(void * jarg1, unsigned int jarg2) {
  ArRobot *arg1 = (ArRobot *) 0 ;
  bool arg2 ;
  
  arg1 = (ArRobot *)jarg1; 
  arg2 = jarg2 ? true : false; 
  (arg1)->setNoTimeWarningThisCycle(arg2);
}


SWIGEXPORT void * SWIGSTDCALL CSharp_ArRobot_getPacketSender(void * jarg1) {
  void * jresult ;
  ArRobot *arg1 = (ArRobot *) 0 ;
  ArRobotPacketSender *result = 0 ;
  
  arg1 = (ArRobot *)jarg1; 
  result = (ArRobotPacketSender *)(arg1)->getPacketSender();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_ArRobot_getPacketReceiver(void * jarg1) {
  void * jresult ;
  ArRobot *arg1 = (ArRobot *) 0 ;
  ArRobotPacketReceiver *result = 0 ;
  
  arg1 = (ArRobot *)jarg1; 
  result = (ArRobotPacketReceiver *)(arg1)->getPacketReceiver();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_ArRobot_addUserTask__SWIG_2(void * jarg1, void * jarg2, char * jarg3) {
  void * jresult ;
  ArRobot *arg1 = (ArRobot *) 0 ;
  ArFunctor *arg2 = (ArFunctor *) 0 ;
  char *arg3 = (char *) 0 ;
  ArSyncTask *result = 0 ;
  
  arg1 = (ArRobot *)jarg1; 
  arg2 = (ArFunctor *)jarg2; 
  arg3 = (char *)jarg3; 
  result = (ArSyncTask *)ArRobot_addUserTask__SWIG_2(arg1,arg2,(char const *)arg3);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_ArRobot_addUserTask__SWIG_3(void * jarg1, void * jarg2) {
  void * jresult ;
  ArRobot *arg1 = (ArRobot *) 0 ;
  ArFunctor *arg2 = (ArFunctor *) 0 ;
  ArSyncTask *result = 0 ;
  
  arg1 = (ArRobot *)jarg1; 
  arg2 = (ArFunctor *)jarg2; 
  result = (ArSyncTask *)ArRobot_addUserTask__SWIG_2(arg1,arg2);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_ArRobot_addSensorInterpTask__SWIG_2(void * jarg1, void * jarg2, char * jarg3) {
  void * jresult ;
  ArRobot *arg1 = (ArRobot *) 0 ;
  ArFunctor *arg2 = (ArFunctor *) 0 ;
  char *arg3 = (char *) 0 ;
  ArSyncTask *result = 0 ;
  
  arg1 = (ArRobot *)jarg1; 
  arg2 = (ArFunctor *)jarg2; 
  arg3 = (char *)jarg3; 
  result = (ArSyncTask *)ArRobot_addSensorInterpTask__SWIG_2(arg1,arg2,(char const *)arg3);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_ArRobot_addSensorInterpTask__SWIG_3(void * jarg1, void * jarg2) {
  void * jresult ;
  ArRobot *arg1 = (ArRobot *) 0 ;
  ArFunctor *arg2 = (ArFunctor *) 0 ;
  ArSyncTask *result = 0 ;
  
  arg1 = (ArRobot *)jarg1; 
  arg2 = (ArFunctor *)jarg2; 
  result = (ArSyncTask *)ArRobot_addSensorInterpTask__SWIG_2(arg1,arg2);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_ArRobot_removeTask__SWIG_0(void * jarg1, char * jarg2) {
  ArRobot *arg1 = (ArRobot *) 0 ;
  char *arg2 = (char *) 0 ;
  
  arg1 = (ArRobot *)jarg1; 
  arg2 = (char *)jarg2; 
  ArRobot_removeTask__SWIG_0(arg1,(char const *)arg2);
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_ArRobot_replaceSensorInterpTask(void * jarg1, void * jarg2, char * jarg3) {
  unsigned int jresult ;
  ArRobot *arg1 = (ArRobot *) 0 ;
  ArFunctor *arg2 = (ArFunctor *) 0 ;
  char *arg3 = (char *) 0 ;
  bool result;
  
  arg1 = (ArRobot *)jarg1; 
  arg2 = (ArFunctor *)jarg2; 
  arg3 = (char *)jarg3; 
  result = (bool)ArRobot_replaceSensorInterpTask(arg1,arg2,(char const *)arg3);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_ArRobot_replaceUserTask(void * jarg1, void * jarg2, char * jarg3) {
  unsigned int jresult ;
  ArRobot *arg1 = (ArRobot *) 0 ;
  ArFunctor *arg2 = (ArFunctor *) 0 ;
  char *arg3 = (char *) 0 ;
  bool result;
  
  arg1 = (ArRobot *)jarg1; 
  arg2 = (ArFunctor *)jarg2; 
  arg3 = (char *)jarg3; 
  result = (bool)ArRobot_replaceUserTask(arg1,arg2,(char const *)arg3);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_ArRobot_removeTask__SWIG_1(void * jarg1, void * jarg2) {
  ArRobot *arg1 = (ArRobot *) 0 ;
  ArFunctor *arg2 = (ArFunctor *) 0 ;
  
  arg1 = (ArRobot *)jarg1; 
  arg2 = (ArFunctor *)jarg2; 
  ArRobot_removeTask__SWIG_1(arg1,arg2);
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_ArRobotConfig(void * jarg1) {
  void * jresult ;
  ArRobot *arg1 = (ArRobot *) 0 ;
  ArRobotConfig *result = 0 ;
  
  arg1 = (ArRobot *)jarg1; 
  result = (ArRobotConfig *)new ArRobotConfig(arg1);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_ArRobotConfig(void * jarg1) {
  ArRobotConfig *arg1 = (ArRobotConfig *) 0 ;
  
  arg1 = (ArRobotConfig *)jarg1; 
  delete arg1;
}


SWIGEXPORT void SWIGSTDCALL CSharp_ArRobotConfig_addAnalogGyro(void * jarg1, void * jarg2) {
  ArRobotConfig *arg1 = (ArRobotConfig *) 0 ;
  ArAnalogGyro *arg2 = (ArAnalogGyro *) 0 ;
  
  arg1 = (ArRobotConfig *)jarg1; 
  arg2 = (ArAnalogGyro *)jarg2; 
  (arg1)->addAnalogGyro(arg2);
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_ArRobotConfig_processFile(void * jarg1) {
  unsigned int jresult ;
  ArRobotConfig *arg1 = (ArRobotConfig *) 0 ;
  bool result;
  
  arg1 = (ArRobotConfig *)jarg1; 
  result = (bool)(arg1)->processFile();
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_ArRobotConfig_connectCallback(void * jarg1) {
  ArRobotConfig *arg1 = (ArRobotConfig *) 0 ;
  
  arg1 = (ArRobotConfig *)jarg1; 
  (arg1)->connectCallback();
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_ArRobotConfigPacketReader__SWIG_0(void * jarg1, unsigned int jarg2, void * jarg3) {
  void * jresult ;
  ArRobot *arg1 = (ArRobot *) 0 ;
  bool arg2 ;
  ArFunctor *arg3 = (ArFunctor *) 0 ;
  ArRobotConfigPacketReader *result = 0 ;
  
  arg1 = (ArRobot *)jarg1; 
  arg2 = jarg2 ? true : false; 
  arg3 = (ArFunctor *)jarg3; 
  result = (ArRobotConfigPacketReader *)new ArRobotConfigPacketReader(arg1,arg2,arg3);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_ArRobotConfigPacketReader__SWIG_1(void * jarg1, unsigned int jarg2) {
  void * jresult ;
  ArRobot *arg1 = (ArRobot *) 0 ;
  bool arg2 ;
  ArRobotConfigPacketReader *result = 0 ;
  
  arg1 = (ArRobot *)jarg1; 
  arg2 = jarg2 ? true : false; 
  result = (ArRobotConfigPacketReader *)new ArRobotConfigPacketReader(arg1,arg2);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_ArRobotConfigPacketReader__SWIG_2(void * jarg1) {
  void * jresult ;
  ArRobot *arg1 = (ArRobot *) 0 ;
  ArRobotConfigPacketReader *result = 0 ;
  
  arg1 = (ArRobot *)jarg1; 
  result = (ArRobotConfigPacketReader *)new ArRobotConfigPacketReader(arg1);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_ArRobotConfigPacketReader(void * jarg1) {
  ArRobotConfigPacketReader *arg1 = (ArRobotConfigPacketReader *) 0 ;
  
  arg1 = (ArRobotConfigPacketReader *)jarg1; 
  delete arg1;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_ArRobotConfigPacketReader_requestPacket(void * jarg1) {
  unsigned int jresult ;
  ArRobotConfigPacketReader *arg1 = (ArRobotConfigPacketReader *) 0 ;
  bool result;
  
  arg1 = (ArRobotConfigPacketReader *)jarg1; 
  result = (bool)(arg1)->requestPacket();
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_ArRobotConfigPacketReader_hasPacketBeenRequested(void * jarg1) {
  unsigned int jresult ;
  ArRobotConfigPacketReader *arg1 = (ArRobotConfigPacketReader *) 0 ;
  bool result;
  
  arg1 = (ArRobotConfigPacketReader *)jarg1; 
  result = (bool)((ArRobotConfigPacketReader const *)arg1)->hasPacketBeenRequested();
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_ArRobotConfigPacketReader_hasPacketArrived(void * jarg1) {
  unsigned int jresult ;
  ArRobotConfigPacketReader *arg1 = (ArRobotConfigPacketReader *) 0 ;
  bool result;
  
  arg1 = (ArRobotConfigPacketReader *)jarg1; 
  result = (bool)((ArRobotConfigPacketReader const *)arg1)->hasPacketArrived();
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_ArRobotConfigPacketReader_getRobotPacket(void * jarg1) {
  void * jresult ;
  ArRobotConfigPacketReader *arg1 = (ArRobotConfigPacketReader *) 0 ;
  ArRobotPacket *result = 0 ;
  
  arg1 = (ArRobotConfigPacketReader *)jarg1; 
  result = (ArRobotPacket *)((ArRobotConfigPacketReader const *)arg1)->getRobotPacket();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_ArRobotConfigPacketReader_log(void * jarg1) {
  ArRobotConfigPacketReader *arg1 = (ArRobotConfigPacketReader *) 0 ;
  
  arg1 = (ArRobotConfigPacketReader *)jarg1; 
  ((ArRobotConfigPacketReader const *)arg1)->log();
}


SWIGEXPORT void SWIGSTDCALL CSharp_ArRobotConfigPacketReader_logMovement(void * jarg1) {
  ArRobotConfigPacketReader *arg1 = (ArRobotConfigPacketReader *) 0 ;
  
  arg1 = (ArRobotConfigPacketReader *)jarg1; 
  ((ArRobotConfigPacketReader const *)arg1)->logMovement();
}


SWIGEXPORT char * SWIGSTDCALL CSharp_ArRobotConfigPacketReader_buildString(void * jarg1) {
  char * jresult ;
  ArRobotConfigPacketReader *arg1 = (ArRobotConfigPacketReader *) 0 ;
  std::string result;
  
  arg1 = (ArRobotConfigPacketReader *)jarg1; 
  result = ((ArRobotConfigPacketReader const *)arg1)->buildString();
  jresult = SWIG_csharp_string_callback((&result)->c_str()); 
  return jresult;
}


SWIGEXPORT char * SWIGSTDCALL CSharp_ArRobotConfigPacketReader_buildStringMovement(void * jarg1) {
  char * jresult ;
  ArRobotConfigPacketReader *arg1 = (ArRobotConfigPacketReader *) 0 ;
  std::string result;
  
  arg1 = (ArRobotConfigPacketReader *)jarg1; 
  result = ((ArRobotConfigPacketReader const *)arg1)->buildStringMovement();
  jresult = SWIG_csharp_string_callback((&result)->c_str()); 
  return jresult;
}


SWIGEXPORT char * SWIGSTDCALL CSharp_ArRobotConfigPacketReader_getType(void * jarg1) {
  char * jresult ;
  ArRobotConfigPacketReader *arg1 = (ArRobotConfigPacketReader *) 0 ;
  char *result = 0 ;
  
  arg1 = (ArRobotConfigPacketReader *)jarg1; 
  result = (char *)((ArRobotConfigPacketReader const *)arg1)->getType();
  jresult = SWIG_csharp_string_callback((const char *)result); 
  return jresult;
}


SWIGEXPORT char * SWIGSTDCALL CSharp_ArRobotConfigPacketReader_getSubType(void * jarg1) {
  char * jresult ;
  ArRobotConfigPacketReader *arg1 = (ArRobotConfigPacketReader *) 0 ;
  char *result = 0 ;
  
  arg1 = (ArRobotConfigPacketReader *)jarg1; 
  result = (char *)((ArRobotConfigPacketReader const *)arg1)->getSubType();
  jresult = SWIG_csharp_string_callback((const char *)result); 
  return jresult;
}


SWIGEXPORT char * SWIGSTDCALL CSharp_ArRobotConfigPacketReader_getSerialNumber(void * jarg1) {
  char * jresult ;
  ArRobotConfigPacketReader *arg1 = (ArRobotConfigPacketReader *) 0 ;
  char *result = 0 ;
  
  arg1 = (ArRobotConfigPacketReader *)jarg1; 
  result = (char *)((ArRobotConfigPacketReader const *)arg1)->getSerialNumber();
  jresult = SWIG_csharp_string_callback((const char *)result); 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_ArRobotConfigPacketReader_getRotVelTop(void * jarg1) {
  int jresult ;
  ArRobotConfigPacketReader *arg1 = (ArRobotConfigPacketReader *) 0 ;
  int result;
  
  arg1 = (ArRobotConfigPacketReader *)jarg1; 
  result = (int)((ArRobotConfigPacketReader const *)arg1)->getRotVelTop();
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_ArRobotConfigPacketReader_getTransVelTop(void * jarg1) {
  int jresult ;
  ArRobotConfigPacketReader *arg1 = (ArRobotConfigPacketReader *) 0 ;
  int result;
  
  arg1 = (ArRobotConfigPacketReader *)jarg1; 
  result = (int)((ArRobotConfigPacketReader const *)arg1)->getTransVelTop();
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_ArRobotConfigPacketReader_getRotAccelTop(void * jarg1) {
  int jresult ;
  ArRobotConfigPacketReader *arg1 = (ArRobotConfigPacketReader *) 0 ;
  int result;
  
  arg1 = (ArRobotConfigPacketReader *)jarg1; 
  result = (int)((ArRobotConfigPacketReader const *)arg1)->getRotAccelTop();
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_ArRobotConfigPacketReader_getTransAccelTop(void * jarg1) {
  int jresult ;
  ArRobotConfigPacketReader *arg1 = (ArRobotConfigPacketReader *) 0 ;
  int result;
  
  arg1 = (ArRobotConfigPacketReader *)jarg1; 
  result = (int)((ArRobotConfigPacketReader const *)arg1)->getTransAccelTop();
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_ArRobotConfigPacketReader_getPwmMax(void * jarg1) {
  int jresult ;
  ArRobotConfigPacketReader *arg1 = (ArRobotConfigPacketReader *) 0 ;
  int result;
  
  arg1 = (ArRobotConfigPacketReader *)jarg1; 
  result = (int)((ArRobotConfigPacketReader const *)arg1)->getPwmMax();
  jresult = result; 
  return jresult;
}


SWIGEXPORT char * SWIGSTDCALL CSharp_ArRobotConfigPacketReader_getName(void * jarg1) {
  char * jresult ;
  ArRobotConfigPacketReader *arg1 = (ArRobotConfigPacketReader *) 0 ;
  char *result = 0 ;
  
  arg1 = (ArRobotConfigPacketReader *)jarg1; 
  result = (char *)((ArRobotConfigPacketReader const *)arg1)->getName();
  jresult = SWIG_csharp_string_callback((const char *)result); 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_ArRobotConfigPacketReader_getSipCycleTime(void * jarg1) {
  int jresult ;
  ArRobotConfigPacketReader *arg1 = (ArRobotConfigPacketReader *) 0 ;
  int result;
  
  arg1 = (ArRobotConfigPacketReader *)jarg1; 
  result = (int)((ArRobotConfigPacketReader const *)arg1)->getSipCycleTime();
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_ArRobotConfigPacketReader_getHostBaud(void * jarg1) {
  int jresult ;
  ArRobotConfigPacketReader *arg1 = (ArRobotConfigPacketReader *) 0 ;
  int result;
  
  arg1 = (ArRobotConfigPacketReader *)jarg1; 
  result = (int)((ArRobotConfigPacketReader const *)arg1)->getHostBaud();
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_ArRobotConfigPacketReader_getAux1Baud(void * jarg1) {
  int jresult ;
  ArRobotConfigPacketReader *arg1 = (ArRobotConfigPacketReader *) 0 ;
  int result;
  
  arg1 = (ArRobotConfigPacketReader *)jarg1; 
  result = (int)((ArRobotConfigPacketReader const *)arg1)->getAux1Baud();
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_ArRobotConfigPacketReader_getHasGripper(void * jarg1) {
  unsigned int jresult ;
  ArRobotConfigPacketReader *arg1 = (ArRobotConfigPacketReader *) 0 ;
  bool result;
  
  arg1 = (ArRobotConfigPacketReader *)jarg1; 
  result = (bool)((ArRobotConfigPacketReader const *)arg1)->getHasGripper();
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_ArRobotConfigPacketReader_getFrontSonar(void * jarg1) {
  unsigned int jresult ;
  ArRobotConfigPacketReader *arg1 = (ArRobotConfigPacketReader *) 0 ;
  bool result;
  
  arg1 = (ArRobotConfigPacketReader *)jarg1; 
  result = (bool)((ArRobotConfigPacketReader const *)arg1)->getFrontSonar();
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_ArRobotConfigPacketReader_getRearSonar(void * jarg1) {
  unsigned int jresult ;
  ArRobotConfigPacketReader *arg1 = (ArRobotConfigPacketReader *) 0 ;
  bool result;
  
  arg1 = (ArRobotConfigPacketReader *)jarg1; 
  result = (bool)((ArRobotConfigPacketReader const *)arg1)->getRearSonar();
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_ArRobotConfigPacketReader_getLowBattery(void * jarg1) {
  int jresult ;
  ArRobotConfigPacketReader *arg1 = (ArRobotConfigPacketReader *) 0 ;
  int result;
  
  arg1 = (ArRobotConfigPacketReader *)jarg1; 
  result = (int)((ArRobotConfigPacketReader const *)arg1)->getLowBattery();
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_ArRobotConfigPacketReader_getRevCount(void * jarg1) {
  int jresult ;
  ArRobotConfigPacketReader *arg1 = (ArRobotConfigPacketReader *) 0 ;
  int result;
  
  arg1 = (ArRobotConfigPacketReader *)jarg1; 
  result = (int)((ArRobotConfigPacketReader const *)arg1)->getRevCount();
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_ArRobotConfigPacketReader_getWatchdog(void * jarg1) {
  int jresult ;
  ArRobotConfigPacketReader *arg1 = (ArRobotConfigPacketReader *) 0 ;
  int result;
  
  arg1 = (ArRobotConfigPacketReader *)jarg1; 
  result = (int)((ArRobotConfigPacketReader const *)arg1)->getWatchdog();
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_ArRobotConfigPacketReader_getNormalMPacs(void * jarg1) {
  unsigned int jresult ;
  ArRobotConfigPacketReader *arg1 = (ArRobotConfigPacketReader *) 0 ;
  bool result;
  
  arg1 = (ArRobotConfigPacketReader *)jarg1; 
  result = (bool)((ArRobotConfigPacketReader const *)arg1)->getNormalMPacs();
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_ArRobotConfigPacketReader_getStallVal(void * jarg1) {
  int jresult ;
  ArRobotConfigPacketReader *arg1 = (ArRobotConfigPacketReader *) 0 ;
  int result;
  
  arg1 = (ArRobotConfigPacketReader *)jarg1; 
  result = (int)((ArRobotConfigPacketReader const *)arg1)->getStallVal();
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_ArRobotConfigPacketReader_getStallCount(void * jarg1) {
  int jresult ;
  ArRobotConfigPacketReader *arg1 = (ArRobotConfigPacketReader *) 0 ;
  int result;
  
  arg1 = (ArRobotConfigPacketReader *)jarg1; 
  result = (int)((ArRobotConfigPacketReader const *)arg1)->getStallCount();
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_ArRobotConfigPacketReader_getJoyVel(void * jarg1) {
  int jresult ;
  ArRobotConfigPacketReader *arg1 = (ArRobotConfigPacketReader *) 0 ;
  int result;
  
  arg1 = (ArRobotConfigPacketReader *)jarg1; 
  result = (int)((ArRobotConfigPacketReader const *)arg1)->getJoyVel();
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_ArRobotConfigPacketReader_getJoyRotVel(void * jarg1) {
  int jresult ;
  ArRobotConfigPacketReader *arg1 = (ArRobotConfigPacketReader *) 0 ;
  int result;
  
  arg1 = (ArRobotConfigPacketReader *)jarg1; 
  result = (int)((ArRobotConfigPacketReader const *)arg1)->getJoyRotVel();
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_ArRobotConfigPacketReader_getRotVelMax(void * jarg1) {
  int jresult ;
  ArRobotConfigPacketReader *arg1 = (ArRobotConfigPacketReader *) 0 ;
  int result;
  
  arg1 = (ArRobotConfigPacketReader *)jarg1; 
  result = (int)((ArRobotConfigPacketReader const *)arg1)->getRotVelMax();
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_ArRobotConfigPacketReader_getTransVelMax(void * jarg1) {
  int jresult ;
  ArRobotConfigPacketReader *arg1 = (ArRobotConfigPacketReader *) 0 ;
  int result;
  
  arg1 = (ArRobotConfigPacketReader *)jarg1; 
  result = (int)((ArRobotConfigPacketReader const *)arg1)->getTransVelMax();
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_ArRobotConfigPacketReader_getRotAccel(void * jarg1) {
  int jresult ;
  ArRobotConfigPacketReader *arg1 = (ArRobotConfigPacketReader *) 0 ;
  int result;
  
  arg1 = (ArRobotConfigPacketReader *)jarg1; 
  result = (int)((ArRobotConfigPacketReader const *)arg1)->getRotAccel();
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_ArRobotConfigPacketReader_getRotDecel(void * jarg1) {
  int jresult ;
  ArRobotConfigPacketReader *arg1 = (ArRobotConfigPacketReader *) 0 ;
  int result;
  
  arg1 = (ArRobotConfigPacketReader *)jarg1; 
  result = (int)((ArRobotConfigPacketReader const *)arg1)->getRotDecel();
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_ArRobotConfigPacketReader_getRotKP(void * jarg1) {
  int jresult ;
  ArRobotConfigPacketReader *arg1 = (ArRobotConfigPacketReader *) 0 ;
  int result;
  
  arg1 = (ArRobotConfigPacketReader *)jarg1; 
  result = (int)((ArRobotConfigPacketReader const *)arg1)->getRotKP();
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_ArRobotConfigPacketReader_getRotKV(void * jarg1) {
  int jresult ;
  ArRobotConfigPacketReader *arg1 = (ArRobotConfigPacketReader *) 0 ;
  int result;
  
  arg1 = (ArRobotConfigPacketReader *)jarg1; 
  result = (int)((ArRobotConfigPacketReader const *)arg1)->getRotKV();
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_ArRobotConfigPacketReader_getRotKI(void * jarg1) {
  int jresult ;
  ArRobotConfigPacketReader *arg1 = (ArRobotConfigPacketReader *) 0 ;
  int result;
  
  arg1 = (ArRobotConfigPacketReader *)jarg1; 
  result = (int)((ArRobotConfigPacketReader const *)arg1)->getRotKI();
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_ArRobotConfigPacketReader_getTransAccel(void * jarg1) {
  int jresult ;
  ArRobotConfigPacketReader *arg1 = (ArRobotConfigPacketReader *) 0 ;
  int result;
  
  arg1 = (ArRobotConfigPacketReader *)jarg1; 
  result = (int)((ArRobotConfigPacketReader const *)arg1)->getTransAccel();
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_ArRobotConfigPacketReader_getTransDecel(void * jarg1) {
  int jresult ;
  ArRobotConfigPacketReader *arg1 = (ArRobotConfigPacketReader *) 0 ;
  int result;
  
  arg1 = (ArRobotConfigPacketReader *)jarg1; 
  result = (int)((ArRobotConfigPacketReader const *)arg1)->getTransDecel();
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_ArRobotConfigPacketReader_getTransKP(void * jarg1) {
  int jresult ;
  ArRobotConfigPacketReader *arg1 = (ArRobotConfigPacketReader *) 0 ;
  int result;
  
  arg1 = (ArRobotConfigPacketReader *)jarg1; 
  result = (int)((ArRobotConfigPacketReader const *)arg1)->getTransKP();
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_ArRobotConfigPacketReader_getTransKV(void * jarg1) {
  int jresult ;
  ArRobotConfigPacketReader *arg1 = (ArRobotConfigPacketReader *) 0 ;
  int result;
  
  arg1 = (ArRobotConfigPacketReader *)jarg1; 
  result = (int)((ArRobotConfigPacketReader const *)arg1)->getTransKV();
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_ArRobotConfigPacketReader_getTransKI(void * jarg1) {
  int jresult ;
  ArRobotConfigPacketReader *arg1 = (ArRobotConfigPacketReader *) 0 ;
  int result;
  
  arg1 = (ArRobotConfigPacketReader *)jarg1; 
  result = (int)((ArRobotConfigPacketReader const *)arg1)->getTransKI();
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_ArRobotConfigPacketReader_getFrontBumps(void * jarg1) {
  int jresult ;
  ArRobotConfigPacketReader *arg1 = (ArRobotConfigPacketReader *) 0 ;
  int result;
  
  arg1 = (ArRobotConfigPacketReader *)jarg1; 
  result = (int)((ArRobotConfigPacketReader const *)arg1)->getFrontBumps();
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_ArRobotConfigPacketReader_getRearBumps(void * jarg1) {
  int jresult ;
  ArRobotConfigPacketReader *arg1 = (ArRobotConfigPacketReader *) 0 ;
  int result;
  
  arg1 = (ArRobotConfigPacketReader *)jarg1; 
  result = (int)((ArRobotConfigPacketReader const *)arg1)->getRearBumps();
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_ArRobotConfigPacketReader_getHasCharger(void * jarg1) {
  int jresult ;
  ArRobotConfigPacketReader *arg1 = (ArRobotConfigPacketReader *) 0 ;
  int result;
  
  arg1 = (ArRobotConfigPacketReader *)jarg1; 
  result = (int)((ArRobotConfigPacketReader const *)arg1)->getHasCharger();
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_ArRobotConfigPacketReader_getSonarCycle(void * jarg1) {
  int jresult ;
  ArRobotConfigPacketReader *arg1 = (ArRobotConfigPacketReader *) 0 ;
  int result;
  
  arg1 = (ArRobotConfigPacketReader *)jarg1; 
  result = (int)((ArRobotConfigPacketReader const *)arg1)->getSonarCycle();
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_ArRobotConfigPacketReader_getResetBaud(void * jarg1) {
  unsigned int jresult ;
  ArRobotConfigPacketReader *arg1 = (ArRobotConfigPacketReader *) 0 ;
  bool result;
  
  arg1 = (ArRobotConfigPacketReader *)jarg1; 
  result = (bool)((ArRobotConfigPacketReader const *)arg1)->getResetBaud();
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_ArRobotConfigPacketReader_getHasGyro(void * jarg1) {
  unsigned int jresult ;
  ArRobotConfigPacketReader *arg1 = (ArRobotConfigPacketReader *) 0 ;
  bool result;
  
  arg1 = (ArRobotConfigPacketReader *)jarg1; 
  result = (bool)((ArRobotConfigPacketReader const *)arg1)->getHasGyro();
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_ArRobotConfigPacketReader_getGyroType(void * jarg1) {
  int jresult ;
  ArRobotConfigPacketReader *arg1 = (ArRobotConfigPacketReader *) 0 ;
  int result;
  
  arg1 = (ArRobotConfigPacketReader *)jarg1; 
  result = (int)((ArRobotConfigPacketReader const *)arg1)->getGyroType();
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_ArRobotConfigPacketReader_getDriftFactor(void * jarg1) {
  int jresult ;
  ArRobotConfigPacketReader *arg1 = (ArRobotConfigPacketReader *) 0 ;
  int result;
  
  arg1 = (ArRobotConfigPacketReader *)jarg1; 
  result = (int)((ArRobotConfigPacketReader const *)arg1)->getDriftFactor();
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_ArRobotConfigPacketReader_getAux2Baud(void * jarg1) {
  int jresult ;
  ArRobotConfigPacketReader *arg1 = (ArRobotConfigPacketReader *) 0 ;
  int result;
  
  arg1 = (ArRobotConfigPacketReader *)jarg1; 
  result = (int)((ArRobotConfigPacketReader const *)arg1)->getAux2Baud();
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_ArRobotConfigPacketReader_getAux3Baud(void * jarg1) {
  int jresult ;
  ArRobotConfigPacketReader *arg1 = (ArRobotConfigPacketReader *) 0 ;
  int result;
  
  arg1 = (ArRobotConfigPacketReader *)jarg1; 
  result = (int)((ArRobotConfigPacketReader const *)arg1)->getAux3Baud();
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_ArRobotConfigPacketReader_getTicksMM(void * jarg1) {
  int jresult ;
  ArRobotConfigPacketReader *arg1 = (ArRobotConfigPacketReader *) 0 ;
  int result;
  
  arg1 = (ArRobotConfigPacketReader *)jarg1; 
  result = (int)((ArRobotConfigPacketReader const *)arg1)->getTicksMM();
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_ArRobotConfigPacketReader_getShutdownVoltage(void * jarg1) {
  int jresult ;
  ArRobotConfigPacketReader *arg1 = (ArRobotConfigPacketReader *) 0 ;
  int result;
  
  arg1 = (ArRobotConfigPacketReader *)jarg1; 
  result = (int)((ArRobotConfigPacketReader const *)arg1)->getShutdownVoltage();
  jresult = result; 
  return jresult;
}


SWIGEXPORT char * SWIGSTDCALL CSharp_ArRobotConfigPacketReader_getFirmwareVersion(void * jarg1) {
  char * jresult ;
  ArRobotConfigPacketReader *arg1 = (ArRobotConfigPacketReader *) 0 ;
  char *result = 0 ;
  
  arg1 = (ArRobotConfigPacketReader *)jarg1; 
  result = (char *)((ArRobotConfigPacketReader const *)arg1)->getFirmwareVersion();
  jresult = SWIG_csharp_string_callback((const char *)result); 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_ArRobotConfigPacketReader_getGyroCW(void * jarg1) {
  int jresult ;
  ArRobotConfigPacketReader *arg1 = (ArRobotConfigPacketReader *) 0 ;
  int result;
  
  arg1 = (ArRobotConfigPacketReader *)jarg1; 
  result = (int)((ArRobotConfigPacketReader const *)arg1)->getGyroCW();
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_ArRobotConfigPacketReader_getGyroCCW(void * jarg1) {
  int jresult ;
  ArRobotConfigPacketReader *arg1 = (ArRobotConfigPacketReader *) 0 ;
  int result;
  
  arg1 = (ArRobotConfigPacketReader *)jarg1; 
  result = (int)((ArRobotConfigPacketReader const *)arg1)->getGyroCCW();
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_ArRobotConfigPacketReader_getKinematicsDelay(void * jarg1) {
  int jresult ;
  ArRobotConfigPacketReader *arg1 = (ArRobotConfigPacketReader *) 0 ;
  int result;
  
  arg1 = (ArRobotConfigPacketReader *)jarg1; 
  result = (int)((ArRobotConfigPacketReader const *)arg1)->getKinematicsDelay();
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_ArRobotConfigPacketReader_getLatVelTop(void * jarg1) {
  int jresult ;
  ArRobotConfigPacketReader *arg1 = (ArRobotConfigPacketReader *) 0 ;
  int result;
  
  arg1 = (ArRobotConfigPacketReader *)jarg1; 
  result = (int)((ArRobotConfigPacketReader const *)arg1)->getLatVelTop();
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_ArRobotConfigPacketReader_getLatAccelTop(void * jarg1) {
  int jresult ;
  ArRobotConfigPacketReader *arg1 = (ArRobotConfigPacketReader *) 0 ;
  int result;
  
  arg1 = (ArRobotConfigPacketReader *)jarg1; 
  result = (int)((ArRobotConfigPacketReader const *)arg1)->getLatAccelTop();
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_ArRobotConfigPacketReader_getLatVelMax(void * jarg1) {
  int jresult ;
  ArRobotConfigPacketReader *arg1 = (ArRobotConfigPacketReader *) 0 ;
  int result;
  
  arg1 = (ArRobotConfigPacketReader *)jarg1; 
  result = (int)((ArRobotConfigPacketReader const *)arg1)->getLatVelMax();
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_ArRobotConfigPacketReader_getLatAccel(void * jarg1) {
  int jresult ;
  ArRobotConfigPacketReader *arg1 = (ArRobotConfigPacketReader *) 0 ;
  int result;
  
  arg1 = (ArRobotConfigPacketReader *)jarg1; 
  result = (int)((ArRobotConfigPacketReader const *)arg1)->getLatAccel();
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_ArRobotConfigPacketReader_getLatDecel(void * jarg1) {
  int jresult ;
  ArRobotConfigPacketReader *arg1 = (ArRobotConfigPacketReader *) 0 ;
  int result;
  
  arg1 = (ArRobotConfigPacketReader *)jarg1; 
  result = (int)((ArRobotConfigPacketReader const *)arg1)->getLatDecel();
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_ArRobotConfigPacketReader_getPowerbotChargeThreshold(void * jarg1) {
  int jresult ;
  ArRobotConfigPacketReader *arg1 = (ArRobotConfigPacketReader *) 0 ;
  int result;
  
  arg1 = (ArRobotConfigPacketReader *)jarg1; 
  result = (int)((ArRobotConfigPacketReader const *)arg1)->getPowerbotChargeThreshold();
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned char SWIGSTDCALL CSharp_ArRobotConfigPacketReader_getPDBPort(void * jarg1) {
  unsigned char jresult ;
  ArRobotConfigPacketReader *arg1 = (ArRobotConfigPacketReader *) 0 ;
  unsigned char result;
  
  arg1 = (ArRobotConfigPacketReader *)jarg1; 
  result = (unsigned char)((ArRobotConfigPacketReader const *)arg1)->getPDBPort();
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_ArRobotConfigPacketReader_getGyroRateLimit(void * jarg1) {
  int jresult ;
  ArRobotConfigPacketReader *arg1 = (ArRobotConfigPacketReader *) 0 ;
  int result;
  
  arg1 = (ArRobotConfigPacketReader *)jarg1; 
  result = (int)((ArRobotConfigPacketReader const *)arg1)->getGyroRateLimit();
  jresult = result; 
  return jresult;
}


SWIGEXPORT char SWIGSTDCALL CSharp_ArRobotConfigPacketReader_getHighTemperatureShutdown(void * jarg1) {
  char jresult ;
  ArRobotConfigPacketReader *arg1 = (ArRobotConfigPacketReader *) 0 ;
  char result;
  
  arg1 = (ArRobotConfigPacketReader *)jarg1; 
  result = (char)((ArRobotConfigPacketReader const *)arg1)->getHighTemperatureShutdown();
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_ArRobotConfigPacketReader_getPowerBits(void * jarg1) {
  int jresult ;
  ArRobotConfigPacketReader *arg1 = (ArRobotConfigPacketReader *) 0 ;
  int result;
  
  arg1 = (ArRobotConfigPacketReader *)jarg1; 
  result = (int)((ArRobotConfigPacketReader const *)arg1)->getPowerBits();
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned char SWIGSTDCALL CSharp_ArRobotConfigPacketReader_getBatteryType(void * jarg1) {
  unsigned char jresult ;
  ArRobotConfigPacketReader *arg1 = (ArRobotConfigPacketReader *) 0 ;
  unsigned char result;
  
  arg1 = (ArRobotConfigPacketReader *)jarg1; 
  result = (unsigned char)((ArRobotConfigPacketReader const *)arg1)->getBatteryType();
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_ArRobotConfigPacketReader_getStateOfChargeLow(void * jarg1) {
  int jresult ;
  ArRobotConfigPacketReader *arg1 = (ArRobotConfigPacketReader *) 0 ;
  int result;
  
  arg1 = (ArRobotConfigPacketReader *)jarg1; 
  result = (int)((ArRobotConfigPacketReader const *)arg1)->getStateOfChargeLow();
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_ArRobotConfigPacketReader_getStateOfChargeShutdown(void * jarg1) {
  int jresult ;
  ArRobotConfigPacketReader *arg1 = (ArRobotConfigPacketReader *) 0 ;
  int result;
  
  arg1 = (ArRobotConfigPacketReader *)jarg1; 
  result = (int)((ArRobotConfigPacketReader const *)arg1)->getStateOfChargeShutdown();
  jresult = result; 
  return jresult;
}


SWIGEXPORT char * SWIGSTDCALL CSharp_ArRobotConfigPacketReader_getFirmwareBootloaderVersion(void * jarg1) {
  char * jresult ;
  ArRobotConfigPacketReader *arg1 = (ArRobotConfigPacketReader *) 0 ;
  char *result = 0 ;
  
  arg1 = (ArRobotConfigPacketReader *)jarg1; 
  result = (char *)((ArRobotConfigPacketReader const *)arg1)->getFirmwareBootloaderVersion();
  jresult = SWIG_csharp_string_callback((const char *)result); 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_ArRobotConfigPacketReader_getConfigFlags(void * jarg1) {
  unsigned int jresult ;
  ArRobotConfigPacketReader *arg1 = (ArRobotConfigPacketReader *) 0 ;
  unsigned int result;
  
  arg1 = (ArRobotConfigPacketReader *)jarg1; 
  result = (unsigned int)((ArRobotConfigPacketReader const *)arg1)->getConfigFlags();
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_ArRobotConfigPacketReader_getGyroFWVersion(void * jarg1) {
  int jresult ;
  ArRobotConfigPacketReader *arg1 = (ArRobotConfigPacketReader *) 0 ;
  int result;
  
  arg1 = (ArRobotConfigPacketReader *)jarg1; 
  result = (int)((ArRobotConfigPacketReader const *)arg1)->getGyroFWVersion();
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_ArRobotConfigPacketReader_packetHandler(void * jarg1, void * jarg2) {
  unsigned int jresult ;
  ArRobotConfigPacketReader *arg1 = (ArRobotConfigPacketReader *) 0 ;
  ArRobotPacket *arg2 = (ArRobotPacket *) 0 ;
  bool result;
  
  arg1 = (ArRobotConfigPacketReader *)jarg1; 
  arg2 = (ArRobotPacket *)jarg2; 
  result = (bool)(arg1)->packetHandler(arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_ArRobotConfigPacketReader_connected(void * jarg1) {
  ArRobotConfigPacketReader *arg1 = (ArRobotConfigPacketReader *) 0 ;
  
  arg1 = (ArRobotConfigPacketReader *)jarg1; 
  (arg1)->connected();
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_ArRobotConnector__SWIG_0(void * jarg1, void * jarg2, unsigned int jarg3, unsigned int jarg4) {
  void * jresult ;
  ArArgumentParser *arg1 = (ArArgumentParser *) 0 ;
  ArRobot *arg2 = (ArRobot *) 0 ;
  bool arg3 ;
  bool arg4 ;
  ArRobotConnector *result = 0 ;
  
  arg1 = (ArArgumentParser *)jarg1; 
  arg2 = (ArRobot *)jarg2; 
  arg3 = jarg3 ? true : false; 
  arg4 = jarg4 ? true : false; 
  result = (ArRobotConnector *)new ArRobotConnector(arg1,arg2,arg3,arg4);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_ArRobotConnector__SWIG_1(void * jarg1, void * jarg2, unsigned int jarg3) {
  void * jresult ;
  ArArgumentParser *arg1 = (ArArgumentParser *) 0 ;
  ArRobot *arg2 = (ArRobot *) 0 ;
  bool arg3 ;
  ArRobotConnector *result = 0 ;
  
  arg1 = (ArArgumentParser *)jarg1; 
  arg2 = (ArRobot *)jarg2; 
  arg3 = jarg3 ? true : false; 
  result = (ArRobotConnector *)new ArRobotConnector(arg1,arg2,arg3);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_ArRobotConnector__SWIG_2(void * jarg1, void * jarg2) {
  void * jresult ;
  ArArgumentParser *arg1 = (ArArgumentParser *) 0 ;
  ArRobot *arg2 = (ArRobot *) 0 ;
  ArRobotConnector *result = 0 ;
  
  arg1 = (ArArgumentParser *)jarg1; 
  arg2 = (ArRobot *)jarg2; 
  result = (ArRobotConnector *)new ArRobotConnector(arg1,arg2);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_ArRobotConnector(void * jarg1) {
  ArRobotConnector *arg1 = (ArRobotConnector *) 0 ;
  
  arg1 = (ArRobotConnector *)jarg1; 
  delete arg1;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_ArRobotConnector_connectRobot__SWIG_0(void * jarg1) {
  unsigned int jresult ;
  ArRobotConnector *arg1 = (ArRobotConnector *) 0 ;
  bool result;
  
  arg1 = (ArRobotConnector *)jarg1; 
  result = (bool)(arg1)->connectRobot();
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_ArRobotConnector_connectRobot__SWIG_1(void * jarg1, void * jarg2) {
  unsigned int jresult ;
  ArRobotConnector *arg1 = (ArRobotConnector *) 0 ;
  ArRobot *arg2 = (ArRobot *) 0 ;
  bool result;
  
  arg1 = (ArRobotConnector *)jarg1; 
  arg2 = (ArRobot *)jarg2; 
  result = (bool)(arg1)->connectRobot(arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_ArRobotConnector_setResetOldConnection(void * jarg1, unsigned int jarg2) {
  ArRobotConnector *arg1 = (ArRobotConnector *) 0 ;
  bool arg2 ;
  
  arg1 = (ArRobotConnector *)jarg1; 
  arg2 = jarg2 ? true : false; 
  (arg1)->setResetOldConnection(arg2);
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_ArRobotConnector_setupRobot__SWIG_0(void * jarg1) {
  unsigned int jresult ;
  ArRobotConnector *arg1 = (ArRobotConnector *) 0 ;
  bool result;
  
  arg1 = (ArRobotConnector *)jarg1; 
  result = (bool)(arg1)->setupRobot();
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_ArRobotConnector_setupRobot__SWIG_1(void * jarg1, void * jarg2) {
  unsigned int jresult ;
  ArRobotConnector *arg1 = (ArRobotConnector *) 0 ;
  ArRobot *arg2 = (ArRobot *) 0 ;
  bool result;
  
  arg1 = (ArRobotConnector *)jarg1; 
  arg2 = (ArRobot *)jarg2; 
  result = (bool)(arg1)->setupRobot(arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_ArRobotConnector_parseArgs__SWIG_0(void * jarg1) {
  unsigned int jresult ;
  ArRobotConnector *arg1 = (ArRobotConnector *) 0 ;
  bool result;
  
  arg1 = (ArRobotConnector *)jarg1; 
  result = (bool)(arg1)->parseArgs();
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_ArRobotConnector_parseArgs__SWIG_1(void * jarg1, void * jarg2) {
  unsigned int jresult ;
  ArRobotConnector *arg1 = (ArRobotConnector *) 0 ;
  ArArgumentParser *arg2 = (ArArgumentParser *) 0 ;
  bool result;
  
  arg1 = (ArRobotConnector *)jarg1; 
  arg2 = (ArArgumentParser *)jarg2; 
  result = (bool)(arg1)->parseArgs(arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_ArRobotConnector_logOptions(void * jarg1) {
  ArRobotConnector *arg1 = (ArRobotConnector *) 0 ;
  
  arg1 = (ArRobotConnector *)jarg1; 
  ((ArRobotConnector const *)arg1)->logOptions();
}


SWIGEXPORT char * SWIGSTDCALL CSharp_ArRobotConnector_getRemoteHost(void * jarg1) {
  char * jresult ;
  ArRobotConnector *arg1 = (ArRobotConnector *) 0 ;
  char *result = 0 ;
  
  arg1 = (ArRobotConnector *)jarg1; 
  result = (char *)((ArRobotConnector const *)arg1)->getRemoteHost();
  jresult = SWIG_csharp_string_callback((const char *)result); 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_ArRobotConnector_getRemoteIsSim(void * jarg1) {
  unsigned int jresult ;
  ArRobotConnector *arg1 = (ArRobotConnector *) 0 ;
  bool result;
  
  arg1 = (ArRobotConnector *)jarg1; 
  result = (bool)((ArRobotConnector const *)arg1)->getRemoteIsSim();
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_ArRobotConnector_setRemoteIsSim(void * jarg1, unsigned int jarg2) {
  ArRobotConnector *arg1 = (ArRobotConnector *) 0 ;
  bool arg2 ;
  
  arg1 = (ArRobotConnector *)jarg1; 
  arg2 = jarg2 ? true : false; 
  (arg1)->setRemoteIsSim(arg2);
}


SWIGEXPORT void * SWIGSTDCALL CSharp_ArRobotConnector_getRobot(void * jarg1) {
  void * jresult ;
  ArRobotConnector *arg1 = (ArRobotConnector *) 0 ;
  ArRobot *result = 0 ;
  
  arg1 = (ArRobotConnector *)jarg1; 
  result = (ArRobot *)(arg1)->getRobot();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_ArRobotConnector_disconnectAll(void * jarg1) {
  unsigned int jresult ;
  ArRobotConnector *arg1 = (ArRobotConnector *) 0 ;
  bool result;
  
  arg1 = (ArRobotConnector *)jarg1; 
  result = (bool)(arg1)->disconnectAll();
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_ArRobotJoyHandler(void * jarg1) {
  void * jresult ;
  ArRobot *arg1 = (ArRobot *) 0 ;
  ArRobotJoyHandler *result = 0 ;
  
  arg1 = (ArRobot *)jarg1; 
  result = (ArRobotJoyHandler *)new ArRobotJoyHandler(arg1);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_ArRobotJoyHandler(void * jarg1) {
  ArRobotJoyHandler *arg1 = (ArRobotJoyHandler *) 0 ;
  
  arg1 = (ArRobotJoyHandler *)jarg1; 
  delete arg1;
}


SWIGEXPORT void SWIGSTDCALL CSharp_ArRobotJoyHandler_getDoubles(void * jarg1, double * jarg2, double * jarg3, double * jarg4) {
  ArRobotJoyHandler *arg1 = (ArRobotJoyHandler *) 0 ;
  double *arg2 = (double *) 0 ;
  double *arg3 = (double *) 0 ;
  double *arg4 = (double *) 0 ;
  
  arg1 = (ArRobotJoyHandler *)jarg1; 
  arg2 = (double *)jarg2; 
  arg3 = (double *)jarg3; 
  arg4 = (double *)jarg4; 
  (arg1)->getDoubles(arg2,arg3,arg4);
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_ArRobotJoyHandler_getButton1(void * jarg1) {
  unsigned int jresult ;
  ArRobotJoyHandler *arg1 = (ArRobotJoyHandler *) 0 ;
  bool result;
  
  arg1 = (ArRobotJoyHandler *)jarg1; 
  result = (bool)(arg1)->getButton1();
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_ArRobotJoyHandler_getButton2(void * jarg1) {
  unsigned int jresult ;
  ArRobotJoyHandler *arg1 = (ArRobotJoyHandler *) 0 ;
  bool result;
  
  arg1 = (ArRobotJoyHandler *)jarg1; 
  result = (bool)(arg1)->getButton2();
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_ArRobotJoyHandler_getDataReceivedTime(void * jarg1) {
  void * jresult ;
  ArRobotJoyHandler *arg1 = (ArRobotJoyHandler *) 0 ;
  ArTime result;
  
  arg1 = (ArRobotJoyHandler *)jarg1; 
  result = (arg1)->getDataReceivedTime();
  jresult = new ArTime((const ArTime &)result); 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_ArRobotJoyHandler_gotData(void * jarg1) {
  unsigned int jresult ;
  ArRobotJoyHandler *arg1 = (ArRobotJoyHandler *) 0 ;
  bool result;
  
  arg1 = (ArRobotJoyHandler *)jarg1; 
  result = (bool)(arg1)->gotData();
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_ArRobotJoyHandler_addToConfig(void * jarg1, void * jarg2, char * jarg3) {
  ArRobotJoyHandler *arg1 = (ArRobotJoyHandler *) 0 ;
  ArConfig *arg2 = (ArConfig *) 0 ;
  char *arg3 = (char *) 0 ;
  
  arg1 = (ArRobotJoyHandler *)jarg1; 
  arg2 = (ArConfig *)jarg2; 
  arg3 = (char *)jarg3; 
  (arg1)->addToConfig(arg2,(char const *)arg3);
}


SWIGEXPORT int SWIGSTDCALL CSharp_ArRobotJoyHandler_getRawX(void * jarg1) {
  int jresult ;
  ArRobotJoyHandler *arg1 = (ArRobotJoyHandler *) 0 ;
  int result;
  
  arg1 = (ArRobotJoyHandler *)jarg1; 
  result = (int)(arg1)->getRawX();
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_ArRobotJoyHandler_getRawY(void * jarg1) {
  int jresult ;
  ArRobotJoyHandler *arg1 = (ArRobotJoyHandler *) 0 ;
  int result;
  
  arg1 = (ArRobotJoyHandler *)jarg1; 
  result = (int)(arg1)->getRawY();
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_ArRobotJoyHandler_getRawThrottle(void * jarg1) {
  int jresult ;
  ArRobotJoyHandler *arg1 = (ArRobotJoyHandler *) 0 ;
  int result;
  
  arg1 = (ArRobotJoyHandler *)jarg1; 
  result = (int)(arg1)->getRawThrottle();
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_ArRobotPacket__SWIG_0(unsigned char jarg1, unsigned char jarg2) {
  void * jresult ;
  unsigned char arg1 ;
  unsigned char arg2 ;
  ArRobotPacket *result = 0 ;
  
  arg1 = (unsigned char)jarg1; 
  arg2 = (unsigned char)jarg2; 
  result = (ArRobotPacket *)new ArRobotPacket(arg1,arg2);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_ArRobotPacket__SWIG_1(unsigned char jarg1) {
  void * jresult ;
  unsigned char arg1 ;
  ArRobotPacket *result = 0 ;
  
  arg1 = (unsigned char)jarg1; 
  result = (ArRobotPacket *)new ArRobotPacket(arg1);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_ArRobotPacket__SWIG_2() {
  void * jresult ;
  ArRobotPacket *result = 0 ;
  
  result = (ArRobotPacket *)new ArRobotPacket();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_ArRobotPacket(void * jarg1) {
  ArRobotPacket *arg1 = (ArRobotPacket *) 0 ;
  
  arg1 = (ArRobotPacket *)jarg1; 
  delete arg1;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_ArRobotPacket_verifyCheckSum(void * jarg1) {
  unsigned int jresult ;
  ArRobotPacket *arg1 = (ArRobotPacket *) 0 ;
  bool result;
  
  arg1 = (ArRobotPacket *)jarg1; 
  result = (bool)(arg1)->verifyCheckSum();
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned char SWIGSTDCALL CSharp_ArRobotPacket_getID(void * jarg1) {
  unsigned char jresult ;
  ArRobotPacket *arg1 = (ArRobotPacket *) 0 ;
  ArTypes::UByte result;
  
  arg1 = (ArRobotPacket *)jarg1; 
  result = (ArTypes::UByte)(arg1)->getID();
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_ArRobotPacket_setID(void * jarg1, unsigned char jarg2) {
  ArRobotPacket *arg1 = (ArRobotPacket *) 0 ;
  ArTypes::UByte arg2 ;
  
  arg1 = (ArRobotPacket *)jarg1; 
  arg2 = (ArTypes::UByte)jarg2; 
  (arg1)->setID(arg2);
}


SWIGEXPORT short SWIGSTDCALL CSharp_ArRobotPacket_calcCheckSum(void * jarg1) {
  short jresult ;
  ArRobotPacket *arg1 = (ArRobotPacket *) 0 ;
  ArTypes::Byte2 result;
  
  arg1 = (ArRobotPacket *)jarg1; 
  result = (ArTypes::Byte2)(arg1)->calcCheckSum();
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_ArRobotPacket_finalizePacket(void * jarg1) {
  ArRobotPacket *arg1 = (ArRobotPacket *) 0 ;
  
  arg1 = (ArRobotPacket *)jarg1; 
  (arg1)->finalizePacket();
}


SWIGEXPORT void * SWIGSTDCALL CSharp_ArRobotPacket_getTimeReceived(void * jarg1) {
  void * jresult ;
  ArRobotPacket *arg1 = (ArRobotPacket *) 0 ;
  ArTime result;
  
  arg1 = (ArRobotPacket *)jarg1; 
  result = (arg1)->getTimeReceived();
  jresult = new ArTime((const ArTime &)result); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_ArRobotPacket_setTimeReceived(void * jarg1, void * jarg2) {
  ArRobotPacket *arg1 = (ArRobotPacket *) 0 ;
  ArTime arg2 ;
  ArTime *argp2 ;
  
  arg1 = (ArRobotPacket *)jarg1; 
  argp2 = (ArTime *)jarg2; 
  if (!argp2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Attempt to dereference null ArTime", 0);
    return ;
  }
  arg2 = *argp2; 
  (arg1)->setTimeReceived(arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_ArRobotPacket_log(void * jarg1) {
  ArRobotPacket *arg1 = (ArRobotPacket *) 0 ;
  
  arg1 = (ArRobotPacket *)jarg1; 
  (arg1)->log();
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_ArRobotPacketReceiver__SWIG_0(unsigned int jarg1, unsigned char jarg2, unsigned char jarg3) {
  void * jresult ;
  bool arg1 ;
  unsigned char arg2 ;
  unsigned char arg3 ;
  ArRobotPacketReceiver *result = 0 ;
  
  arg1 = jarg1 ? true : false; 
  arg2 = (unsigned char)jarg2; 
  arg3 = (unsigned char)jarg3; 
  result = (ArRobotPacketReceiver *)new ArRobotPacketReceiver(arg1,arg2,arg3);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_ArRobotPacketReceiver__SWIG_1(unsigned int jarg1, unsigned char jarg2) {
  void * jresult ;
  bool arg1 ;
  unsigned char arg2 ;
  ArRobotPacketReceiver *result = 0 ;
  
  arg1 = jarg1 ? true : false; 
  arg2 = (unsigned char)jarg2; 
  result = (ArRobotPacketReceiver *)new ArRobotPacketReceiver(arg1,arg2);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_ArRobotPacketReceiver__SWIG_2(unsigned int jarg1) {
  void * jresult ;
  bool arg1 ;
  ArRobotPacketReceiver *result = 0 ;
  
  arg1 = jarg1 ? true : false; 
  result = (ArRobotPacketReceiver *)new ArRobotPacketReceiver(arg1);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_ArRobotPacketReceiver__SWIG_3() {
  void * jresult ;
  ArRobotPacketReceiver *result = 0 ;
  
  result = (ArRobotPacketReceiver *)new ArRobotPacketReceiver();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_ArRobotPacketReceiver__SWIG_4(void * jarg1, unsigned int jarg2, unsigned char jarg3, unsigned char jarg4) {
  void * jresult ;
  ArDeviceConnection *arg1 = (ArDeviceConnection *) 0 ;
  bool arg2 ;
  unsigned char arg3 ;
  unsigned char arg4 ;
  ArRobotPacketReceiver *result = 0 ;
  
  arg1 = (ArDeviceConnection *)jarg1; 
  arg2 = jarg2 ? true : false; 
  arg3 = (unsigned char)jarg3; 
  arg4 = (unsigned char)jarg4; 
  result = (ArRobotPacketReceiver *)new ArRobotPacketReceiver(arg1,arg2,arg3,arg4);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_ArRobotPacketReceiver__SWIG_5(void * jarg1, unsigned int jarg2, unsigned char jarg3) {
  void * jresult ;
  ArDeviceConnection *arg1 = (ArDeviceConnection *) 0 ;
  bool arg2 ;
  unsigned char arg3 ;
  ArRobotPacketReceiver *result = 0 ;
  
  arg1 = (ArDeviceConnection *)jarg1; 
  arg2 = jarg2 ? true : false; 
  arg3 = (unsigned char)jarg3; 
  result = (ArRobotPacketReceiver *)new ArRobotPacketReceiver(arg1,arg2,arg3);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_ArRobotPacketReceiver__SWIG_6(void * jarg1, unsigned int jarg2) {
  void * jresult ;
  ArDeviceConnection *arg1 = (ArDeviceConnection *) 0 ;
  bool arg2 ;
  ArRobotPacketReceiver *result = 0 ;
  
  arg1 = (ArDeviceConnection *)jarg1; 
  arg2 = jarg2 ? true : false; 
  result = (ArRobotPacketReceiver *)new ArRobotPacketReceiver(arg1,arg2);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_ArRobotPacketReceiver__SWIG_7(void * jarg1) {
  void * jresult ;
  ArDeviceConnection *arg1 = (ArDeviceConnection *) 0 ;
  ArRobotPacketReceiver *result = 0 ;
  
  arg1 = (ArDeviceConnection *)jarg1; 
  result = (ArRobotPacketReceiver *)new ArRobotPacketReceiver(arg1);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_ArRobotPacketReceiver__SWIG_8(void * jarg1, unsigned int jarg2, unsigned char jarg3, unsigned char jarg4, unsigned int jarg5, char * jarg6) {
  void * jresult ;
  ArDeviceConnection *arg1 = (ArDeviceConnection *) 0 ;
  bool arg2 ;
  unsigned char arg3 ;
  unsigned char arg4 ;
  bool arg5 ;
  char *arg6 = (char *) 0 ;
  ArRobotPacketReceiver *result = 0 ;
  
  arg1 = (ArDeviceConnection *)jarg1; 
  arg2 = jarg2 ? true : false; 
  arg3 = (unsigned char)jarg3; 
  arg4 = (unsigned char)jarg4; 
  arg5 = jarg5 ? true : false; 
  arg6 = (char *)jarg6; 
  result = (ArRobotPacketReceiver *)new ArRobotPacketReceiver(arg1,arg2,arg3,arg4,arg5,(char const *)arg6);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_ArRobotPacketReceiver(void * jarg1) {
  ArRobotPacketReceiver *arg1 = (ArRobotPacketReceiver *) 0 ;
  
  arg1 = (ArRobotPacketReceiver *)jarg1; 
  delete arg1;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_ArRobotPacketReceiver_receivePacket__SWIG_0(void * jarg1, unsigned int jarg2) {
  void * jresult ;
  ArRobotPacketReceiver *arg1 = (ArRobotPacketReceiver *) 0 ;
  unsigned int arg2 ;
  ArRobotPacket *result = 0 ;
  
  arg1 = (ArRobotPacketReceiver *)jarg1; 
  arg2 = (unsigned int)jarg2; 
  result = (ArRobotPacket *)(arg1)->receivePacket(arg2);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_ArRobotPacketReceiver_receivePacket__SWIG_1(void * jarg1) {
  void * jresult ;
  ArRobotPacketReceiver *arg1 = (ArRobotPacketReceiver *) 0 ;
  ArRobotPacket *result = 0 ;
  
  arg1 = (ArRobotPacketReceiver *)jarg1; 
  result = (ArRobotPacket *)(arg1)->receivePacket();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_ArRobotPacketReceiver_setDeviceConnection(void * jarg1, void * jarg2) {
  ArRobotPacketReceiver *arg1 = (ArRobotPacketReceiver *) 0 ;
  ArDeviceConnection *arg2 = (ArDeviceConnection *) 0 ;
  
  arg1 = (ArRobotPacketReceiver *)jarg1; 
  arg2 = (ArDeviceConnection *)jarg2; 
  (arg1)->setDeviceConnection(arg2);
}


SWIGEXPORT void * SWIGSTDCALL CSharp_ArRobotPacketReceiver_getDeviceConnection(void * jarg1) {
  void * jresult ;
  ArRobotPacketReceiver *arg1 = (ArRobotPacketReceiver *) 0 ;
  ArDeviceConnection *result = 0 ;
  
  arg1 = (ArRobotPacketReceiver *)jarg1; 
  result = (ArDeviceConnection *)(arg1)->getDeviceConnection();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_ArRobotPacketReceiver_isAllocatingPackets(void * jarg1) {
  unsigned int jresult ;
  ArRobotPacketReceiver *arg1 = (ArRobotPacketReceiver *) 0 ;
  bool result;
  
  arg1 = (ArRobotPacketReceiver *)jarg1; 
  result = (bool)(arg1)->isAllocatingPackets();
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_ArRobotPacketReceiver_setAllocatingPackets(void * jarg1, unsigned int jarg2) {
  ArRobotPacketReceiver *arg1 = (ArRobotPacketReceiver *) 0 ;
  bool arg2 ;
  
  arg1 = (ArRobotPacketReceiver *)jarg1; 
  arg2 = jarg2 ? true : false; 
  (arg1)->setAllocatingPackets(arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_ArRobotPacketReceiver_setTracking(void * jarg1, unsigned int jarg2) {
  ArRobotPacketReceiver *arg1 = (ArRobotPacketReceiver *) 0 ;
  bool arg2 ;
  
  arg1 = (ArRobotPacketReceiver *)jarg1; 
  arg2 = jarg2 ? true : false; 
  (arg1)->setTracking(arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_ArRobotPacketReceiver_setTrackingLogName(void * jarg1, char * jarg2) {
  ArRobotPacketReceiver *arg1 = (ArRobotPacketReceiver *) 0 ;
  char *arg2 = (char *) 0 ;
  
  arg1 = (ArRobotPacketReceiver *)jarg1; 
  arg2 = (char *)jarg2; 
  (arg1)->setTrackingLogName((char const *)arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_ArRobotPacketReceiver_setPacketReceivedCallback(void * jarg1, void * jarg2) {
  ArRobotPacketReceiver *arg1 = (ArRobotPacketReceiver *) 0 ;
  ArFunctor1< ArRobotPacket * > *arg2 = (ArFunctor1< ArRobotPacket * > *) 0 ;
  
  arg1 = (ArRobotPacketReceiver *)jarg1; 
  arg2 = (ArFunctor1< ArRobotPacket * > *)jarg2; 
  (arg1)->setPacketReceivedCallback(arg2);
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_ArRobotPacketSender__SWIG_0(unsigned char jarg1, unsigned char jarg2) {
  void * jresult ;
  unsigned char arg1 ;
  unsigned char arg2 ;
  ArRobotPacketSender *result = 0 ;
  
  arg1 = (unsigned char)jarg1; 
  arg2 = (unsigned char)jarg2; 
  result = (ArRobotPacketSender *)new ArRobotPacketSender(arg1,arg2);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_ArRobotPacketSender__SWIG_1(unsigned char jarg1) {
  void * jresult ;
  unsigned char arg1 ;
  ArRobotPacketSender *result = 0 ;
  
  arg1 = (unsigned char)jarg1; 
  result = (ArRobotPacketSender *)new ArRobotPacketSender(arg1);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_ArRobotPacketSender__SWIG_2() {
  void * jresult ;
  ArRobotPacketSender *result = 0 ;
  
  result = (ArRobotPacketSender *)new ArRobotPacketSender();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_ArRobotPacketSender__SWIG_3(void * jarg1, unsigned char jarg2, unsigned char jarg3) {
  void * jresult ;
  ArDeviceConnection *arg1 = (ArDeviceConnection *) 0 ;
  unsigned char arg2 ;
  unsigned char arg3 ;
  ArRobotPacketSender *result = 0 ;
  
  arg1 = (ArDeviceConnection *)jarg1; 
  arg2 = (unsigned char)jarg2; 
  arg3 = (unsigned char)jarg3; 
  result = (ArRobotPacketSender *)new ArRobotPacketSender(arg1,arg2,arg3);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_ArRobotPacketSender__SWIG_4(void * jarg1, unsigned char jarg2) {
  void * jresult ;
  ArDeviceConnection *arg1 = (ArDeviceConnection *) 0 ;
  unsigned char arg2 ;
  ArRobotPacketSender *result = 0 ;
  
  arg1 = (ArDeviceConnection *)jarg1; 
  arg2 = (unsigned char)jarg2; 
  result = (ArRobotPacketSender *)new ArRobotPacketSender(arg1,arg2);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_ArRobotPacketSender__SWIG_5(void * jarg1) {
  void * jresult ;
  ArDeviceConnection *arg1 = (ArDeviceConnection *) 0 ;
  ArRobotPacketSender *result = 0 ;
  
  arg1 = (ArDeviceConnection *)jarg1; 
  result = (ArRobotPacketSender *)new ArRobotPacketSender(arg1);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_ArRobotPacketSender__SWIG_6(void * jarg1, unsigned char jarg2, unsigned char jarg3, unsigned int jarg4, char * jarg5) {
  void * jresult ;
  ArDeviceConnection *arg1 = (ArDeviceConnection *) 0 ;
  unsigned char arg2 ;
  unsigned char arg3 ;
  bool arg4 ;
  char *arg5 = (char *) 0 ;
  ArRobotPacketSender *result = 0 ;
  
  arg1 = (ArDeviceConnection *)jarg1; 
  arg2 = (unsigned char)jarg2; 
  arg3 = (unsigned char)jarg3; 
  arg4 = jarg4 ? true : false; 
  arg5 = (char *)jarg5; 
  result = (ArRobotPacketSender *)new ArRobotPacketSender(arg1,arg2,arg3,arg4,(char const *)arg5);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_ArRobotPacketSender(void * jarg1) {
  ArRobotPacketSender *arg1 = (ArRobotPacketSender *) 0 ;
  
  arg1 = (ArRobotPacketSender *)jarg1; 
  delete arg1;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_ArRobotPacketSender_com(void * jarg1, unsigned char jarg2) {
  unsigned int jresult ;
  ArRobotPacketSender *arg1 = (ArRobotPacketSender *) 0 ;
  unsigned char arg2 ;
  bool result;
  
  arg1 = (ArRobotPacketSender *)jarg1; 
  arg2 = (unsigned char)jarg2; 
  result = (bool)(arg1)->com(arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_ArRobotPacketSender_comInt(void * jarg1, unsigned char jarg2, short jarg3) {
  unsigned int jresult ;
  ArRobotPacketSender *arg1 = (ArRobotPacketSender *) 0 ;
  unsigned char arg2 ;
  short arg3 ;
  bool result;
  
  arg1 = (ArRobotPacketSender *)jarg1; 
  arg2 = (unsigned char)jarg2; 
  arg3 = (short)jarg3; 
  result = (bool)(arg1)->comInt(arg2,arg3);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_ArRobotPacketSender_com2Bytes(void * jarg1, unsigned char jarg2, char jarg3, char jarg4) {
  unsigned int jresult ;
  ArRobotPacketSender *arg1 = (ArRobotPacketSender *) 0 ;
  unsigned char arg2 ;
  char arg3 ;
  char arg4 ;
  bool result;
  
  arg1 = (ArRobotPacketSender *)jarg1; 
  arg2 = (unsigned char)jarg2; 
  arg3 = (char)jarg3; 
  arg4 = (char)jarg4; 
  result = (bool)(arg1)->com2Bytes(arg2,arg3,arg4);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_ArRobotPacketSender_comStr(void * jarg1, unsigned char jarg2, char * jarg3) {
  unsigned int jresult ;
  ArRobotPacketSender *arg1 = (ArRobotPacketSender *) 0 ;
  unsigned char arg2 ;
  char *arg3 = (char *) 0 ;
  bool result;
  
  arg1 = (ArRobotPacketSender *)jarg1; 
  arg2 = (unsigned char)jarg2; 
  arg3 = (char *)jarg3; 
  result = (bool)(arg1)->comStr(arg2,(char const *)arg3);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_ArRobotPacketSender_comStrN(void * jarg1, unsigned char jarg2, char * jarg3, int jarg4) {
  unsigned int jresult ;
  ArRobotPacketSender *arg1 = (ArRobotPacketSender *) 0 ;
  unsigned char arg2 ;
  char *arg3 = (char *) 0 ;
  int arg4 ;
  bool result;
  
  arg1 = (ArRobotPacketSender *)jarg1; 
  arg2 = (unsigned char)jarg2; 
  arg3 = (char *)jarg3; 
  arg4 = (int)jarg4; 
  result = (bool)(arg1)->comStrN(arg2,(char const *)arg3,arg4);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_ArRobotPacketSender_comDataN(void * jarg1, unsigned char jarg2, char * jarg3, int jarg4) {
  unsigned int jresult ;
  ArRobotPacketSender *arg1 = (ArRobotPacketSender *) 0 ;
  unsigned char arg2 ;
  char *arg3 = (char *) 0 ;
  int arg4 ;
  bool result;
  
  arg1 = (ArRobotPacketSender *)jarg1; 
  arg2 = (unsigned char)jarg2; 
  arg3 = (char *)jarg3; 
  arg4 = (int)jarg4; 
  result = (bool)(arg1)->comDataN(arg2,(char const *)arg3,arg4);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_ArRobotPacketSender_sendPacket(void * jarg1, void * jarg2) {
  unsigned int jresult ;
  ArRobotPacketSender *arg1 = (ArRobotPacketSender *) 0 ;
  ArRobotPacket *arg2 = (ArRobotPacket *) 0 ;
  bool result;
  
  arg1 = (ArRobotPacketSender *)jarg1; 
  arg2 = (ArRobotPacket *)jarg2; 
  result = (bool)(arg1)->sendPacket(arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_ArRobotPacketSender_setDeviceConnection(void * jarg1, void * jarg2) {
  ArRobotPacketSender *arg1 = (ArRobotPacketSender *) 0 ;
  ArDeviceConnection *arg2 = (ArDeviceConnection *) 0 ;
  
  arg1 = (ArRobotPacketSender *)jarg1; 
  arg2 = (ArDeviceConnection *)jarg2; 
  (arg1)->setDeviceConnection(arg2);
}


SWIGEXPORT void * SWIGSTDCALL CSharp_ArRobotPacketSender_getDeviceConnection(void * jarg1) {
  void * jresult ;
  ArRobotPacketSender *arg1 = (ArRobotPacketSender *) 0 ;
  ArDeviceConnection *result = 0 ;
  
  arg1 = (ArRobotPacketSender *)jarg1; 
  result = (ArDeviceConnection *)(arg1)->getDeviceConnection();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_ArRobotPacketSender_setPacketSentCallback(void * jarg1, void * jarg2) {
  ArRobotPacketSender *arg1 = (ArRobotPacketSender *) 0 ;
  ArFunctor1< ArRobotPacket * > *arg2 = (ArFunctor1< ArRobotPacket * > *) 0 ;
  
  arg1 = (ArRobotPacketSender *)jarg1; 
  arg2 = (ArFunctor1< ArRobotPacket * > *)jarg2; 
  (arg1)->setPacketSentCallback(arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_ArRobotPacketSender_setCommandMonitor(void * jarg1, void * jarg2) {
  ArRobotPacketSender *arg1 = (ArRobotPacketSender *) 0 ;
  ArFunctor2< unsigned char,short > *arg2 = (ArFunctor2< unsigned char,short > *) 0 ;
  
  arg1 = (ArRobotPacketSender *)jarg1; 
  arg2 = (ArFunctor2< unsigned char,short > *)jarg2; 
  (arg1)->setCommandMonitor(arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_ArRobotPacketSender_setTracking__SWIG_0(void * jarg1, unsigned int jarg2) {
  ArRobotPacketSender *arg1 = (ArRobotPacketSender *) 0 ;
  bool arg2 ;
  
  arg1 = (ArRobotPacketSender *)jarg1; 
  arg2 = jarg2 ? true : false; 
  (arg1)->setTracking(arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_ArRobotPacketSender_setTracking__SWIG_1(void * jarg1) {
  ArRobotPacketSender *arg1 = (ArRobotPacketSender *) 0 ;
  
  arg1 = (ArRobotPacketSender *)jarg1; 
  (arg1)->setTracking();
}


SWIGEXPORT void SWIGSTDCALL CSharp_ArRobotPacketSender_setTrackingLogName(void * jarg1, char * jarg2) {
  ArRobotPacketSender *arg1 = (ArRobotPacketSender *) 0 ;
  char *arg2 = (char *) 0 ;
  
  arg1 = (ArRobotPacketSender *)jarg1; 
  arg2 = (char *)jarg2; 
  (arg1)->setTrackingLogName((char const *)arg2);
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_ArRobotParams() {
  void * jresult ;
  ArRobotParams *result = 0 ;
  
  result = (ArRobotParams *)new ArRobotParams();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_ArRobotParams(void * jarg1) {
  ArRobotParams *arg1 = (ArRobotParams *) 0 ;
  
  arg1 = (ArRobotParams *)jarg1; 
  delete arg1;
}


SWIGEXPORT char * SWIGSTDCALL CSharp_ArRobotParams_getClassName(void * jarg1) {
  char * jresult ;
  ArRobotParams *arg1 = (ArRobotParams *) 0 ;
  char *result = 0 ;
  
  arg1 = (ArRobotParams *)jarg1; 
  result = (char *)((ArRobotParams const *)arg1)->getClassName();
  jresult = SWIG_csharp_string_callback((const char *)result); 
  return jresult;
}


SWIGEXPORT char * SWIGSTDCALL CSharp_ArRobotParams_getSubClassName(void * jarg1) {
  char * jresult ;
  ArRobotParams *arg1 = (ArRobotParams *) 0 ;
  char *result = 0 ;
  
  arg1 = (ArRobotParams *)jarg1; 
  result = (char *)((ArRobotParams const *)arg1)->getSubClassName();
  jresult = SWIG_csharp_string_callback((const char *)result); 
  return jresult;
}


SWIGEXPORT double SWIGSTDCALL CSharp_ArRobotParams_getRobotRadius(void * jarg1) {
  double jresult ;
  ArRobotParams *arg1 = (ArRobotParams *) 0 ;
  double result;
  
  arg1 = (ArRobotParams *)jarg1; 
  result = (double)((ArRobotParams const *)arg1)->getRobotRadius();
  jresult = result; 
  return jresult;
}


SWIGEXPORT double SWIGSTDCALL CSharp_ArRobotParams_getRobotDiagonal(void * jarg1) {
  double jresult ;
  ArRobotParams *arg1 = (ArRobotParams *) 0 ;
  double result;
  
  arg1 = (ArRobotParams *)jarg1; 
  result = (double)((ArRobotParams const *)arg1)->getRobotDiagonal();
  jresult = result; 
  return jresult;
}


SWIGEXPORT double SWIGSTDCALL CSharp_ArRobotParams_getRobotWidth(void * jarg1) {
  double jresult ;
  ArRobotParams *arg1 = (ArRobotParams *) 0 ;
  double result;
  
  arg1 = (ArRobotParams *)jarg1; 
  result = (double)((ArRobotParams const *)arg1)->getRobotWidth();
  jresult = result; 
  return jresult;
}


SWIGEXPORT double SWIGSTDCALL CSharp_ArRobotParams_getRobotLength(void * jarg1) {
  double jresult ;
  ArRobotParams *arg1 = (ArRobotParams *) 0 ;
  double result;
  
  arg1 = (ArRobotParams *)jarg1; 
  result = (double)((ArRobotParams const *)arg1)->getRobotLength();
  jresult = result; 
  return jresult;
}


SWIGEXPORT double SWIGSTDCALL CSharp_ArRobotParams_getRobotLengthFront(void * jarg1) {
  double jresult ;
  ArRobotParams *arg1 = (ArRobotParams *) 0 ;
  double result;
  
  arg1 = (ArRobotParams *)jarg1; 
  result = (double)((ArRobotParams const *)arg1)->getRobotLengthFront();
  jresult = result; 
  return jresult;
}


SWIGEXPORT double SWIGSTDCALL CSharp_ArRobotParams_getRobotLengthRear(void * jarg1) {
  double jresult ;
  ArRobotParams *arg1 = (ArRobotParams *) 0 ;
  double result;
  
  arg1 = (ArRobotParams *)jarg1; 
  result = (double)((ArRobotParams const *)arg1)->getRobotLengthRear();
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_ArRobotParams_isHolonomic(void * jarg1) {
  unsigned int jresult ;
  ArRobotParams *arg1 = (ArRobotParams *) 0 ;
  bool result;
  
  arg1 = (ArRobotParams *)jarg1; 
  result = (bool)((ArRobotParams const *)arg1)->isHolonomic();
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_ArRobotParams_hasMoveCommand(void * jarg1) {
  unsigned int jresult ;
  ArRobotParams *arg1 = (ArRobotParams *) 0 ;
  bool result;
  
  arg1 = (ArRobotParams *)jarg1; 
  result = (bool)((ArRobotParams const *)arg1)->hasMoveCommand();
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_ArRobotParams_getAbsoluteMaxVelocity(void * jarg1) {
  int jresult ;
  ArRobotParams *arg1 = (ArRobotParams *) 0 ;
  int result;
  
  arg1 = (ArRobotParams *)jarg1; 
  result = (int)((ArRobotParams const *)arg1)->getAbsoluteMaxVelocity();
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_ArRobotParams_getAbsoluteMaxRotVelocity(void * jarg1) {
  int jresult ;
  ArRobotParams *arg1 = (ArRobotParams *) 0 ;
  int result;
  
  arg1 = (ArRobotParams *)jarg1; 
  result = (int)((ArRobotParams const *)arg1)->getAbsoluteMaxRotVelocity();
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_ArRobotParams_getAbsoluteMaxLatVelocity(void * jarg1) {
  int jresult ;
  ArRobotParams *arg1 = (ArRobotParams *) 0 ;
  int result;
  
  arg1 = (ArRobotParams *)jarg1; 
  result = (int)((ArRobotParams const *)arg1)->getAbsoluteMaxLatVelocity();
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_ArRobotParams_getRequestIOPackets(void * jarg1) {
  unsigned int jresult ;
  ArRobotParams *arg1 = (ArRobotParams *) 0 ;
  bool result;
  
  arg1 = (ArRobotParams *)jarg1; 
  result = (bool)((ArRobotParams const *)arg1)->getRequestIOPackets();
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_ArRobotParams_getRequestEncoderPackets(void * jarg1) {
  unsigned int jresult ;
  ArRobotParams *arg1 = (ArRobotParams *) 0 ;
  bool result;
  
  arg1 = (ArRobotParams *)jarg1; 
  result = (bool)((ArRobotParams const *)arg1)->getRequestEncoderPackets();
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_ArRobotParams_getSwitchToBaudRate(void * jarg1) {
  int jresult ;
  ArRobotParams *arg1 = (ArRobotParams *) 0 ;
  int result;
  
  arg1 = (ArRobotParams *)jarg1; 
  result = (int)((ArRobotParams const *)arg1)->getSwitchToBaudRate();
  jresult = result; 
  return jresult;
}


SWIGEXPORT double SWIGSTDCALL CSharp_ArRobotParams_getAngleConvFactor(void * jarg1) {
  double jresult ;
  ArRobotParams *arg1 = (ArRobotParams *) 0 ;
  double result;
  
  arg1 = (ArRobotParams *)jarg1; 
  result = (double)((ArRobotParams const *)arg1)->getAngleConvFactor();
  jresult = result; 
  return jresult;
}


SWIGEXPORT double SWIGSTDCALL CSharp_ArRobotParams_getDistConvFactor(void * jarg1) {
  double jresult ;
  ArRobotParams *arg1 = (ArRobotParams *) 0 ;
  double result;
  
  arg1 = (ArRobotParams *)jarg1; 
  result = (double)((ArRobotParams const *)arg1)->getDistConvFactor();
  jresult = result; 
  return jresult;
}


SWIGEXPORT double SWIGSTDCALL CSharp_ArRobotParams_getVelConvFactor(void * jarg1) {
  double jresult ;
  ArRobotParams *arg1 = (ArRobotParams *) 0 ;
  double result;
  
  arg1 = (ArRobotParams *)jarg1; 
  result = (double)((ArRobotParams const *)arg1)->getVelConvFactor();
  jresult = result; 
  return jresult;
}


SWIGEXPORT double SWIGSTDCALL CSharp_ArRobotParams_getRangeConvFactor(void * jarg1) {
  double jresult ;
  ArRobotParams *arg1 = (ArRobotParams *) 0 ;
  double result;
  
  arg1 = (ArRobotParams *)jarg1; 
  result = (double)((ArRobotParams const *)arg1)->getRangeConvFactor();
  jresult = result; 
  return jresult;
}


SWIGEXPORT double SWIGSTDCALL CSharp_ArRobotParams_getDiffConvFactor(void * jarg1) {
  double jresult ;
  ArRobotParams *arg1 = (ArRobotParams *) 0 ;
  double result;
  
  arg1 = (ArRobotParams *)jarg1; 
  result = (double)((ArRobotParams const *)arg1)->getDiffConvFactor();
  jresult = result; 
  return jresult;
}


SWIGEXPORT double SWIGSTDCALL CSharp_ArRobotParams_getVel2Divisor(void * jarg1) {
  double jresult ;
  ArRobotParams *arg1 = (ArRobotParams *) 0 ;
  double result;
  
  arg1 = (ArRobotParams *)jarg1; 
  result = (double)((ArRobotParams const *)arg1)->getVel2Divisor();
  jresult = result; 
  return jresult;
}


SWIGEXPORT double SWIGSTDCALL CSharp_ArRobotParams_getGyroScaler(void * jarg1) {
  double jresult ;
  ArRobotParams *arg1 = (ArRobotParams *) 0 ;
  double result;
  
  arg1 = (ArRobotParams *)jarg1; 
  result = (double)((ArRobotParams const *)arg1)->getGyroScaler();
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_ArRobotParams_haveTableSensingIR(void * jarg1) {
  unsigned int jresult ;
  ArRobotParams *arg1 = (ArRobotParams *) 0 ;
  bool result;
  
  arg1 = (ArRobotParams *)jarg1; 
  result = (bool)((ArRobotParams const *)arg1)->haveTableSensingIR();
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_ArRobotParams_haveNewTableSensingIR(void * jarg1) {
  unsigned int jresult ;
  ArRobotParams *arg1 = (ArRobotParams *) 0 ;
  bool result;
  
  arg1 = (ArRobotParams *)jarg1; 
  result = (bool)((ArRobotParams const *)arg1)->haveNewTableSensingIR();
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_ArRobotParams_haveFrontBumpers(void * jarg1) {
  unsigned int jresult ;
  ArRobotParams *arg1 = (ArRobotParams *) 0 ;
  bool result;
  
  arg1 = (ArRobotParams *)jarg1; 
  result = (bool)((ArRobotParams const *)arg1)->haveFrontBumpers();
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_ArRobotParams_numFrontBumpers(void * jarg1) {
  int jresult ;
  ArRobotParams *arg1 = (ArRobotParams *) 0 ;
  int result;
  
  arg1 = (ArRobotParams *)jarg1; 
  result = (int)((ArRobotParams const *)arg1)->numFrontBumpers();
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_ArRobotParams_haveRearBumpers(void * jarg1) {
  unsigned int jresult ;
  ArRobotParams *arg1 = (ArRobotParams *) 0 ;
  bool result;
  
  arg1 = (ArRobotParams *)jarg1; 
  result = (bool)((ArRobotParams const *)arg1)->haveRearBumpers();
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_ArRobotParams_numRearBumpers(void * jarg1) {
  int jresult ;
  ArRobotParams *arg1 = (ArRobotParams *) 0 ;
  int result;
  
  arg1 = (ArRobotParams *)jarg1; 
  result = (int)((ArRobotParams const *)arg1)->numRearBumpers();
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_ArRobotParams_getNumIR(void * jarg1) {
  int jresult ;
  ArRobotParams *arg1 = (ArRobotParams *) 0 ;
  int result;
  
  arg1 = (ArRobotParams *)jarg1; 
  result = (int)((ArRobotParams const *)arg1)->getNumIR();
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_ArRobotParams_haveIR(void * jarg1, int jarg2) {
  unsigned int jresult ;
  ArRobotParams *arg1 = (ArRobotParams *) 0 ;
  int arg2 ;
  bool result;
  
  arg1 = (ArRobotParams *)jarg1; 
  arg2 = (int)jarg2; 
  result = (bool)((ArRobotParams const *)arg1)->haveIR(arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_ArRobotParams_getIRX(void * jarg1, int jarg2) {
  int jresult ;
  ArRobotParams *arg1 = (ArRobotParams *) 0 ;
  int arg2 ;
  int result;
  
  arg1 = (ArRobotParams *)jarg1; 
  arg2 = (int)jarg2; 
  result = (int)((ArRobotParams const *)arg1)->getIRX(arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_ArRobotParams_getIRY(void * jarg1, int jarg2) {
  int jresult ;
  ArRobotParams *arg1 = (ArRobotParams *) 0 ;
  int arg2 ;
  int result;
  
  arg1 = (ArRobotParams *)jarg1; 
  arg2 = (int)jarg2; 
  result = (int)((ArRobotParams const *)arg1)->getIRY(arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_ArRobotParams_getIRType(void * jarg1, int jarg2) {
  int jresult ;
  ArRobotParams *arg1 = (ArRobotParams *) 0 ;
  int arg2 ;
  int result;
  
  arg1 = (ArRobotParams *)jarg1; 
  arg2 = (int)jarg2; 
  result = (int)((ArRobotParams const *)arg1)->getIRType(arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_ArRobotParams_getIRCycles(void * jarg1, int jarg2) {
  int jresult ;
  ArRobotParams *arg1 = (ArRobotParams *) 0 ;
  int arg2 ;
  int result;
  
  arg1 = (ArRobotParams *)jarg1; 
  arg2 = (int)jarg2; 
  result = (int)((ArRobotParams const *)arg1)->getIRCycles(arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_ArRobotParams_getNumSonar(void * jarg1) {
  int jresult ;
  ArRobotParams *arg1 = (ArRobotParams *) 0 ;
  int result;
  
  arg1 = (ArRobotParams *)jarg1; 
  result = (int)((ArRobotParams const *)arg1)->getNumSonar();
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_ArRobotParams_getLaserPossessed(void * jarg1) {
  unsigned int jresult ;
  ArRobotParams *arg1 = (ArRobotParams *) 0 ;
  bool result;
  
  arg1 = (ArRobotParams *)jarg1; 
  result = (bool)((ArRobotParams const *)arg1)->getLaserPossessed();
  jresult = result; 
  return jresult;
}


SWIGEXPORT char * SWIGSTDCALL CSharp_ArRobotParams_getLaserType__SWIG_0(void * jarg1, int jarg2) {
  char * jresult ;
  ArRobotParams *arg1 = (ArRobotParams *) 0 ;
  int arg2 ;
  char *result = 0 ;
  
  arg1 = (ArRobotParams *)jarg1; 
  arg2 = (int)jarg2; 
  result = (char *)((ArRobotParams const *)arg1)->getLaserType(arg2);
  jresult = SWIG_csharp_string_callback((const char *)result); 
  return jresult;
}


SWIGEXPORT char * SWIGSTDCALL CSharp_ArRobotParams_getLaserType__SWIG_1(void * jarg1) {
  char * jresult ;
  ArRobotParams *arg1 = (ArRobotParams *) 0 ;
  char *result = 0 ;
  
  arg1 = (ArRobotParams *)jarg1; 
  result = (char *)((ArRobotParams const *)arg1)->getLaserType();
  jresult = SWIG_csharp_string_callback((const char *)result); 
  return jresult;
}


SWIGEXPORT char * SWIGSTDCALL CSharp_ArRobotParams_getLaserPortType__SWIG_0(void * jarg1, int jarg2) {
  char * jresult ;
  ArRobotParams *arg1 = (ArRobotParams *) 0 ;
  int arg2 ;
  char *result = 0 ;
  
  arg1 = (ArRobotParams *)jarg1; 
  arg2 = (int)jarg2; 
  result = (char *)((ArRobotParams const *)arg1)->getLaserPortType(arg2);
  jresult = SWIG_csharp_string_callback((const char *)result); 
  return jresult;
}


SWIGEXPORT char * SWIGSTDCALL CSharp_ArRobotParams_getLaserPortType__SWIG_1(void * jarg1) {
  char * jresult ;
  ArRobotParams *arg1 = (ArRobotParams *) 0 ;
  char *result = 0 ;
  
  arg1 = (ArRobotParams *)jarg1; 
  result = (char *)((ArRobotParams const *)arg1)->getLaserPortType();
  jresult = SWIG_csharp_string_callback((const char *)result); 
  return jresult;
}


SWIGEXPORT char * SWIGSTDCALL CSharp_ArRobotParams_getLaserPort__SWIG_0(void * jarg1, int jarg2) {
  char * jresult ;
  ArRobotParams *arg1 = (ArRobotParams *) 0 ;
  int arg2 ;
  char *result = 0 ;
  
  arg1 = (ArRobotParams *)jarg1; 
  arg2 = (int)jarg2; 
  result = (char *)((ArRobotParams const *)arg1)->getLaserPort(arg2);
  jresult = SWIG_csharp_string_callback((const char *)result); 
  return jresult;
}


SWIGEXPORT char * SWIGSTDCALL CSharp_ArRobotParams_getLaserPort__SWIG_1(void * jarg1) {
  char * jresult ;
  ArRobotParams *arg1 = (ArRobotParams *) 0 ;
  char *result = 0 ;
  
  arg1 = (ArRobotParams *)jarg1; 
  result = (char *)((ArRobotParams const *)arg1)->getLaserPort();
  jresult = SWIG_csharp_string_callback((const char *)result); 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_ArRobotParams_getConnectLaser__SWIG_0(void * jarg1, int jarg2) {
  unsigned int jresult ;
  ArRobotParams *arg1 = (ArRobotParams *) 0 ;
  int arg2 ;
  bool result;
  
  arg1 = (ArRobotParams *)jarg1; 
  arg2 = (int)jarg2; 
  result = (bool)((ArRobotParams const *)arg1)->getConnectLaser(arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_ArRobotParams_getConnectLaser__SWIG_1(void * jarg1) {
  unsigned int jresult ;
  ArRobotParams *arg1 = (ArRobotParams *) 0 ;
  bool result;
  
  arg1 = (ArRobotParams *)jarg1; 
  result = (bool)((ArRobotParams const *)arg1)->getConnectLaser();
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_ArRobotParams_getLaserFlipped__SWIG_0(void * jarg1, int jarg2) {
  unsigned int jresult ;
  ArRobotParams *arg1 = (ArRobotParams *) 0 ;
  int arg2 ;
  bool result;
  
  arg1 = (ArRobotParams *)jarg1; 
  arg2 = (int)jarg2; 
  result = (bool)((ArRobotParams const *)arg1)->getLaserFlipped(arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_ArRobotParams_getLaserFlipped__SWIG_1(void * jarg1) {
  unsigned int jresult ;
  ArRobotParams *arg1 = (ArRobotParams *) 0 ;
  bool result;
  
  arg1 = (ArRobotParams *)jarg1; 
  result = (bool)((ArRobotParams const *)arg1)->getLaserFlipped();
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_ArRobotParams_getLaserPowerControlled__SWIG_0(void * jarg1, int jarg2) {
  unsigned int jresult ;
  ArRobotParams *arg1 = (ArRobotParams *) 0 ;
  int arg2 ;
  bool result;
  
  arg1 = (ArRobotParams *)jarg1; 
  arg2 = (int)jarg2; 
  result = (bool)((ArRobotParams const *)arg1)->getLaserPowerControlled(arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_ArRobotParams_getLaserPowerControlled__SWIG_1(void * jarg1) {
  unsigned int jresult ;
  ArRobotParams *arg1 = (ArRobotParams *) 0 ;
  bool result;
  
  arg1 = (ArRobotParams *)jarg1; 
  result = (bool)((ArRobotParams const *)arg1)->getLaserPowerControlled();
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_ArRobotParams_getLaserMaxRange__SWIG_0(void * jarg1, int jarg2) {
  int jresult ;
  ArRobotParams *arg1 = (ArRobotParams *) 0 ;
  int arg2 ;
  int result;
  
  arg1 = (ArRobotParams *)jarg1; 
  arg2 = (int)jarg2; 
  result = (int)((ArRobotParams const *)arg1)->getLaserMaxRange(arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_ArRobotParams_getLaserMaxRange__SWIG_1(void * jarg1) {
  int jresult ;
  ArRobotParams *arg1 = (ArRobotParams *) 0 ;
  int result;
  
  arg1 = (ArRobotParams *)jarg1; 
  result = (int)((ArRobotParams const *)arg1)->getLaserMaxRange();
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_ArRobotParams_getLaserCumulativeBufferSize__SWIG_0(void * jarg1, int jarg2) {
  int jresult ;
  ArRobotParams *arg1 = (ArRobotParams *) 0 ;
  int arg2 ;
  int result;
  
  arg1 = (ArRobotParams *)jarg1; 
  arg2 = (int)jarg2; 
  result = (int)((ArRobotParams const *)arg1)->getLaserCumulativeBufferSize(arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_ArRobotParams_getLaserCumulativeBufferSize__SWIG_1(void * jarg1) {
  int jresult ;
  ArRobotParams *arg1 = (ArRobotParams *) 0 ;
  int result;
  
  arg1 = (ArRobotParams *)jarg1; 
  result = (int)((ArRobotParams const *)arg1)->getLaserCumulativeBufferSize();
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_ArRobotParams_getLaserX__SWIG_0(void * jarg1, int jarg2) {
  int jresult ;
  ArRobotParams *arg1 = (ArRobotParams *) 0 ;
  int arg2 ;
  int result;
  
  arg1 = (ArRobotParams *)jarg1; 
  arg2 = (int)jarg2; 
  result = (int)((ArRobotParams const *)arg1)->getLaserX(arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_ArRobotParams_getLaserX__SWIG_1(void * jarg1) {
  int jresult ;
  ArRobotParams *arg1 = (ArRobotParams *) 0 ;
  int result;
  
  arg1 = (ArRobotParams *)jarg1; 
  result = (int)((ArRobotParams const *)arg1)->getLaserX();
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_ArRobotParams_getLaserY__SWIG_0(void * jarg1, int jarg2) {
  int jresult ;
  ArRobotParams *arg1 = (ArRobotParams *) 0 ;
  int arg2 ;
  int result;
  
  arg1 = (ArRobotParams *)jarg1; 
  arg2 = (int)jarg2; 
  result = (int)((ArRobotParams const *)arg1)->getLaserY(arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_ArRobotParams_getLaserY__SWIG_1(void * jarg1) {
  int jresult ;
  ArRobotParams *arg1 = (ArRobotParams *) 0 ;
  int result;
  
  arg1 = (ArRobotParams *)jarg1; 
  result = (int)((ArRobotParams const *)arg1)->getLaserY();
  jresult = result; 
  return jresult;
}


SWIGEXPORT double SWIGSTDCALL CSharp_ArRobotParams_getLaserTh__SWIG_0(void * jarg1, int jarg2) {
  double jresult ;
  ArRobotParams *arg1 = (ArRobotParams *) 0 ;
  int arg2 ;
  double result;
  
  arg1 = (ArRobotParams *)jarg1; 
  arg2 = (int)jarg2; 
  result = (double)((ArRobotParams const *)arg1)->getLaserTh(arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT double SWIGSTDCALL CSharp_ArRobotParams_getLaserTh__SWIG_1(void * jarg1) {
  double jresult ;
  ArRobotParams *arg1 = (ArRobotParams *) 0 ;
  double result;
  
  arg1 = (ArRobotParams *)jarg1; 
  result = (double)((ArRobotParams const *)arg1)->getLaserTh();
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_ArRobotParams_getLaserZ__SWIG_0(void * jarg1, int jarg2) {
  int jresult ;
  ArRobotParams *arg1 = (ArRobotParams *) 0 ;
  int arg2 ;
  int result;
  
  arg1 = (ArRobotParams *)jarg1; 
  arg2 = (int)jarg2; 
  result = (int)((ArRobotParams const *)arg1)->getLaserZ(arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_ArRobotParams_getLaserZ__SWIG_1(void * jarg1) {
  int jresult ;
  ArRobotParams *arg1 = (ArRobotParams *) 0 ;
  int result;
  
  arg1 = (ArRobotParams *)jarg1; 
  result = (int)((ArRobotParams const *)arg1)->getLaserZ();
  jresult = result; 
  return jresult;
}


SWIGEXPORT char * SWIGSTDCALL CSharp_ArRobotParams_getLaserIgnore__SWIG_0(void * jarg1, int jarg2) {
  char * jresult ;
  ArRobotParams *arg1 = (ArRobotParams *) 0 ;
  int arg2 ;
  char *result = 0 ;
  
  arg1 = (ArRobotParams *)jarg1; 
  arg2 = (int)jarg2; 
  result = (char *)((ArRobotParams const *)arg1)->getLaserIgnore(arg2);
  jresult = SWIG_csharp_string_callback((const char *)result); 
  return jresult;
}


SWIGEXPORT char * SWIGSTDCALL CSharp_ArRobotParams_getLaserIgnore__SWIG_1(void * jarg1) {
  char * jresult ;
  ArRobotParams *arg1 = (ArRobotParams *) 0 ;
  char *result = 0 ;
  
  arg1 = (ArRobotParams *)jarg1; 
  result = (char *)((ArRobotParams const *)arg1)->getLaserIgnore();
  jresult = SWIG_csharp_string_callback((const char *)result); 
  return jresult;
}


SWIGEXPORT char * SWIGSTDCALL CSharp_ArRobotParams_getLaserStartDegrees__SWIG_0(void * jarg1, int jarg2) {
  char * jresult ;
  ArRobotParams *arg1 = (ArRobotParams *) 0 ;
  int arg2 ;
  char *result = 0 ;
  
  arg1 = (ArRobotParams *)jarg1; 
  arg2 = (int)jarg2; 
  result = (char *)((ArRobotParams const *)arg1)->getLaserStartDegrees(arg2);
  jresult = SWIG_csharp_string_callback((const char *)result); 
  return jresult;
}


SWIGEXPORT char * SWIGSTDCALL CSharp_ArRobotParams_getLaserStartDegrees__SWIG_1(void * jarg1) {
  char * jresult ;
  ArRobotParams *arg1 = (ArRobotParams *) 0 ;
  char *result = 0 ;
  
  arg1 = (ArRobotParams *)jarg1; 
  result = (char *)((ArRobotParams const *)arg1)->getLaserStartDegrees();
  jresult = SWIG_csharp_string_callback((const char *)result); 
  return jresult;
}


SWIGEXPORT char * SWIGSTDCALL CSharp_ArRobotParams_getLaserEndDegrees__SWIG_0(void * jarg1, int jarg2) {
  char * jresult ;
  ArRobotParams *arg1 = (ArRobotParams *) 0 ;
  int arg2 ;
  char *result = 0 ;
  
  arg1 = (ArRobotParams *)jarg1; 
  arg2 = (int)jarg2; 
  result = (char *)((ArRobotParams const *)arg1)->getLaserEndDegrees(arg2);
  jresult = SWIG_csharp_string_callback((const char *)result); 
  return jresult;
}


SWIGEXPORT char * SWIGSTDCALL CSharp_ArRobotParams_getLaserEndDegrees__SWIG_1(void * jarg1) {
  char * jresult ;
  ArRobotParams *arg1 = (ArRobotParams *) 0 ;
  char *result = 0 ;
  
  arg1 = (ArRobotParams *)jarg1; 
  result = (char *)((ArRobotParams const *)arg1)->getLaserEndDegrees();
  jresult = SWIG_csharp_string_callback((const char *)result); 
  return jresult;
}


SWIGEXPORT char * SWIGSTDCALL CSharp_ArRobotParams_getLaserDegreesChoice__SWIG_0(void * jarg1, int jarg2) {
  char * jresult ;
  ArRobotParams *arg1 = (ArRobotParams *) 0 ;
  int arg2 ;
  char *result = 0 ;
  
  arg1 = (ArRobotParams *)jarg1; 
  arg2 = (int)jarg2; 
  result = (char *)((ArRobotParams const *)arg1)->getLaserDegreesChoice(arg2);
  jresult = SWIG_csharp_string_callback((const char *)result); 
  return jresult;
}


SWIGEXPORT char * SWIGSTDCALL CSharp_ArRobotParams_getLaserDegreesChoice__SWIG_1(void * jarg1) {
  char * jresult ;
  ArRobotParams *arg1 = (ArRobotParams *) 0 ;
  char *result = 0 ;
  
  arg1 = (ArRobotParams *)jarg1; 
  result = (char *)((ArRobotParams const *)arg1)->getLaserDegreesChoice();
  jresult = SWIG_csharp_string_callback((const char *)result); 
  return jresult;
}


SWIGEXPORT char * SWIGSTDCALL CSharp_ArRobotParams_getLaserIncrement__SWIG_0(void * jarg1, int jarg2) {
  char * jresult ;
  ArRobotParams *arg1 = (ArRobotParams *) 0 ;
  int arg2 ;
  char *result = 0 ;
  
  arg1 = (ArRobotParams *)jarg1; 
  arg2 = (int)jarg2; 
  result = (char *)((ArRobotParams const *)arg1)->getLaserIncrement(arg2);
  jresult = SWIG_csharp_string_callback((const char *)result); 
  return jresult;
}


SWIGEXPORT char * SWIGSTDCALL CSharp_ArRobotParams_getLaserIncrement__SWIG_1(void * jarg1) {
  char * jresult ;
  ArRobotParams *arg1 = (ArRobotParams *) 0 ;
  char *result = 0 ;
  
  arg1 = (ArRobotParams *)jarg1; 
  result = (char *)((ArRobotParams const *)arg1)->getLaserIncrement();
  jresult = SWIG_csharp_string_callback((const char *)result); 
  return jresult;
}


SWIGEXPORT char * SWIGSTDCALL CSharp_ArRobotParams_getLaserIncrementChoice__SWIG_0(void * jarg1, int jarg2) {
  char * jresult ;
  ArRobotParams *arg1 = (ArRobotParams *) 0 ;
  int arg2 ;
  char *result = 0 ;
  
  arg1 = (ArRobotParams *)jarg1; 
  arg2 = (int)jarg2; 
  result = (char *)((ArRobotParams const *)arg1)->getLaserIncrementChoice(arg2);
  jresult = SWIG_csharp_string_callback((const char *)result); 
  return jresult;
}


SWIGEXPORT char * SWIGSTDCALL CSharp_ArRobotParams_getLaserIncrementChoice__SWIG_1(void * jarg1) {
  char * jresult ;
  ArRobotParams *arg1 = (ArRobotParams *) 0 ;
  char *result = 0 ;
  
  arg1 = (ArRobotParams *)jarg1; 
  result = (char *)((ArRobotParams const *)arg1)->getLaserIncrementChoice();
  jresult = SWIG_csharp_string_callback((const char *)result); 
  return jresult;
}


SWIGEXPORT char * SWIGSTDCALL CSharp_ArRobotParams_getLaserUnitsChoice__SWIG_0(void * jarg1, int jarg2) {
  char * jresult ;
  ArRobotParams *arg1 = (ArRobotParams *) 0 ;
  int arg2 ;
  char *result = 0 ;
  
  arg1 = (ArRobotParams *)jarg1; 
  arg2 = (int)jarg2; 
  result = (char *)((ArRobotParams const *)arg1)->getLaserUnitsChoice(arg2);
  jresult = SWIG_csharp_string_callback((const char *)result); 
  return jresult;
}


SWIGEXPORT char * SWIGSTDCALL CSharp_ArRobotParams_getLaserUnitsChoice__SWIG_1(void * jarg1) {
  char * jresult ;
  ArRobotParams *arg1 = (ArRobotParams *) 0 ;
  char *result = 0 ;
  
  arg1 = (ArRobotParams *)jarg1; 
  result = (char *)((ArRobotParams const *)arg1)->getLaserUnitsChoice();
  jresult = SWIG_csharp_string_callback((const char *)result); 
  return jresult;
}


SWIGEXPORT char * SWIGSTDCALL CSharp_ArRobotParams_getLaserReflectorBitsChoice__SWIG_0(void * jarg1, int jarg2) {
  char * jresult ;
  ArRobotParams *arg1 = (ArRobotParams *) 0 ;
  int arg2 ;
  char *result = 0 ;
  
  arg1 = (ArRobotParams *)jarg1; 
  arg2 = (int)jarg2; 
  result = (char *)((ArRobotParams const *)arg1)->getLaserReflectorBitsChoice(arg2);
  jresult = SWIG_csharp_string_callback((const char *)result); 
  return jresult;
}


SWIGEXPORT char * SWIGSTDCALL CSharp_ArRobotParams_getLaserReflectorBitsChoice__SWIG_1(void * jarg1) {
  char * jresult ;
  ArRobotParams *arg1 = (ArRobotParams *) 0 ;
  char *result = 0 ;
  
  arg1 = (ArRobotParams *)jarg1; 
  result = (char *)((ArRobotParams const *)arg1)->getLaserReflectorBitsChoice();
  jresult = SWIG_csharp_string_callback((const char *)result); 
  return jresult;
}


SWIGEXPORT char * SWIGSTDCALL CSharp_ArRobotParams_getLaserStartingBaudChoice__SWIG_0(void * jarg1, int jarg2) {
  char * jresult ;
  ArRobotParams *arg1 = (ArRobotParams *) 0 ;
  int arg2 ;
  char *result = 0 ;
  
  arg1 = (ArRobotParams *)jarg1; 
  arg2 = (int)jarg2; 
  result = (char *)((ArRobotParams const *)arg1)->getLaserStartingBaudChoice(arg2);
  jresult = SWIG_csharp_string_callback((const char *)result); 
  return jresult;
}


SWIGEXPORT char * SWIGSTDCALL CSharp_ArRobotParams_getLaserStartingBaudChoice__SWIG_1(void * jarg1) {
  char * jresult ;
  ArRobotParams *arg1 = (ArRobotParams *) 0 ;
  char *result = 0 ;
  
  arg1 = (ArRobotParams *)jarg1; 
  result = (char *)((ArRobotParams const *)arg1)->getLaserStartingBaudChoice();
  jresult = SWIG_csharp_string_callback((const char *)result); 
  return jresult;
}


SWIGEXPORT char * SWIGSTDCALL CSharp_ArRobotParams_getLaserAutoBaudChoice__SWIG_0(void * jarg1, int jarg2) {
  char * jresult ;
  ArRobotParams *arg1 = (ArRobotParams *) 0 ;
  int arg2 ;
  char *result = 0 ;
  
  arg1 = (ArRobotParams *)jarg1; 
  arg2 = (int)jarg2; 
  result = (char *)((ArRobotParams const *)arg1)->getLaserAutoBaudChoice(arg2);
  jresult = SWIG_csharp_string_callback((const char *)result); 
  return jresult;
}


SWIGEXPORT char * SWIGSTDCALL CSharp_ArRobotParams_getLaserAutoBaudChoice__SWIG_1(void * jarg1) {
  char * jresult ;
  ArRobotParams *arg1 = (ArRobotParams *) 0 ;
  char *result = 0 ;
  
  arg1 = (ArRobotParams *)jarg1; 
  result = (char *)((ArRobotParams const *)arg1)->getLaserAutoBaudChoice();
  jresult = SWIG_csharp_string_callback((const char *)result); 
  return jresult;
}


SWIGEXPORT char * SWIGSTDCALL CSharp_ArRobotParams_getLaserSection__SWIG_0(void * jarg1, int jarg2) {
  char * jresult ;
  ArRobotParams *arg1 = (ArRobotParams *) 0 ;
  int arg2 ;
  char *result = 0 ;
  
  arg1 = (ArRobotParams *)jarg1; 
  arg2 = (int)jarg2; 
  result = (char *)((ArRobotParams const *)arg1)->getLaserSection(arg2);
  jresult = SWIG_csharp_string_callback((const char *)result); 
  return jresult;
}


SWIGEXPORT char * SWIGSTDCALL CSharp_ArRobotParams_getLaserSection__SWIG_1(void * jarg1) {
  char * jresult ;
  ArRobotParams *arg1 = (ArRobotParams *) 0 ;
  char *result = 0 ;
  
  arg1 = (ArRobotParams *)jarg1; 
  result = (char *)((ArRobotParams const *)arg1)->getLaserSection();
  jresult = SWIG_csharp_string_callback((const char *)result); 
  return jresult;
}


SWIGEXPORT char * SWIGSTDCALL CSharp_ArRobotParams_getLaserPowerOutput__SWIG_0(void * jarg1, int jarg2) {
  char * jresult ;
  ArRobotParams *arg1 = (ArRobotParams *) 0 ;
  int arg2 ;
  char *result = 0 ;
  
  arg1 = (ArRobotParams *)jarg1; 
  arg2 = (int)jarg2; 
  result = (char *)((ArRobotParams const *)arg1)->getLaserPowerOutput(arg2);
  jresult = SWIG_csharp_string_callback((const char *)result); 
  return jresult;
}


SWIGEXPORT char * SWIGSTDCALL CSharp_ArRobotParams_getLaserPowerOutput__SWIG_1(void * jarg1) {
  char * jresult ;
  ArRobotParams *arg1 = (ArRobotParams *) 0 ;
  char *result = 0 ;
  
  arg1 = (ArRobotParams *)jarg1; 
  result = (char *)((ArRobotParams const *)arg1)->getLaserPowerOutput();
  jresult = SWIG_csharp_string_callback((const char *)result); 
  return jresult;
}


SWIGEXPORT char * SWIGSTDCALL CSharp_ArRobotParams_getBatteryMTXBoardType__SWIG_0(void * jarg1, int jarg2) {
  char * jresult ;
  ArRobotParams *arg1 = (ArRobotParams *) 0 ;
  int arg2 ;
  char *result = 0 ;
  
  arg1 = (ArRobotParams *)jarg1; 
  arg2 = (int)jarg2; 
  result = (char *)((ArRobotParams const *)arg1)->getBatteryMTXBoardType(arg2);
  jresult = SWIG_csharp_string_callback((const char *)result); 
  return jresult;
}


SWIGEXPORT char * SWIGSTDCALL CSharp_ArRobotParams_getBatteryMTXBoardType__SWIG_1(void * jarg1) {
  char * jresult ;
  ArRobotParams *arg1 = (ArRobotParams *) 0 ;
  char *result = 0 ;
  
  arg1 = (ArRobotParams *)jarg1; 
  result = (char *)((ArRobotParams const *)arg1)->getBatteryMTXBoardType();
  jresult = SWIG_csharp_string_callback((const char *)result); 
  return jresult;
}


SWIGEXPORT char * SWIGSTDCALL CSharp_ArRobotParams_getBatteryMTXBoardPortType__SWIG_0(void * jarg1, int jarg2) {
  char * jresult ;
  ArRobotParams *arg1 = (ArRobotParams *) 0 ;
  int arg2 ;
  char *result = 0 ;
  
  arg1 = (ArRobotParams *)jarg1; 
  arg2 = (int)jarg2; 
  result = (char *)((ArRobotParams const *)arg1)->getBatteryMTXBoardPortType(arg2);
  jresult = SWIG_csharp_string_callback((const char *)result); 
  return jresult;
}


SWIGEXPORT char * SWIGSTDCALL CSharp_ArRobotParams_getBatteryMTXBoardPortType__SWIG_1(void * jarg1) {
  char * jresult ;
  ArRobotParams *arg1 = (ArRobotParams *) 0 ;
  char *result = 0 ;
  
  arg1 = (ArRobotParams *)jarg1; 
  result = (char *)((ArRobotParams const *)arg1)->getBatteryMTXBoardPortType();
  jresult = SWIG_csharp_string_callback((const char *)result); 
  return jresult;
}


SWIGEXPORT char * SWIGSTDCALL CSharp_ArRobotParams_getBatteryMTXBoardPort__SWIG_0(void * jarg1, int jarg2) {
  char * jresult ;
  ArRobotParams *arg1 = (ArRobotParams *) 0 ;
  int arg2 ;
  char *result = 0 ;
  
  arg1 = (ArRobotParams *)jarg1; 
  arg2 = (int)jarg2; 
  result = (char *)((ArRobotParams const *)arg1)->getBatteryMTXBoardPort(arg2);
  jresult = SWIG_csharp_string_callback((const char *)result); 
  return jresult;
}


SWIGEXPORT char * SWIGSTDCALL CSharp_ArRobotParams_getBatteryMTXBoardPort__SWIG_1(void * jarg1) {
  char * jresult ;
  ArRobotParams *arg1 = (ArRobotParams *) 0 ;
  char *result = 0 ;
  
  arg1 = (ArRobotParams *)jarg1; 
  result = (char *)((ArRobotParams const *)arg1)->getBatteryMTXBoardPort();
  jresult = SWIG_csharp_string_callback((const char *)result); 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_ArRobotParams_getBatteryMTXBoardBaud__SWIG_0(void * jarg1, int jarg2) {
  int jresult ;
  ArRobotParams *arg1 = (ArRobotParams *) 0 ;
  int arg2 ;
  int result;
  
  arg1 = (ArRobotParams *)jarg1; 
  arg2 = (int)jarg2; 
  result = (int)((ArRobotParams const *)arg1)->getBatteryMTXBoardBaud(arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_ArRobotParams_getBatteryMTXBoardBaud__SWIG_1(void * jarg1) {
  int jresult ;
  ArRobotParams *arg1 = (ArRobotParams *) 0 ;
  int result;
  
  arg1 = (ArRobotParams *)jarg1; 
  result = (int)((ArRobotParams const *)arg1)->getBatteryMTXBoardBaud();
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_ArRobotParams_getBatteryMTXBoardAutoConn__SWIG_0(void * jarg1, int jarg2) {
  unsigned int jresult ;
  ArRobotParams *arg1 = (ArRobotParams *) 0 ;
  int arg2 ;
  bool result;
  
  arg1 = (ArRobotParams *)jarg1; 
  arg2 = (int)jarg2; 
  result = (bool)((ArRobotParams const *)arg1)->getBatteryMTXBoardAutoConn(arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_ArRobotParams_getBatteryMTXBoardAutoConn__SWIG_1(void * jarg1) {
  unsigned int jresult ;
  ArRobotParams *arg1 = (ArRobotParams *) 0 ;
  bool result;
  
  arg1 = (ArRobotParams *)jarg1; 
  result = (bool)((ArRobotParams const *)arg1)->getBatteryMTXBoardAutoConn();
  jresult = result; 
  return jresult;
}


SWIGEXPORT char * SWIGSTDCALL CSharp_ArRobotParams_getLCDMTXBoardType__SWIG_0(void * jarg1, int jarg2) {
  char * jresult ;
  ArRobotParams *arg1 = (ArRobotParams *) 0 ;
  int arg2 ;
  char *result = 0 ;
  
  arg1 = (ArRobotParams *)jarg1; 
  arg2 = (int)jarg2; 
  result = (char *)((ArRobotParams const *)arg1)->getLCDMTXBoardType(arg2);
  jresult = SWIG_csharp_string_callback((const char *)result); 
  return jresult;
}


SWIGEXPORT char * SWIGSTDCALL CSharp_ArRobotParams_getLCDMTXBoardType__SWIG_1(void * jarg1) {
  char * jresult ;
  ArRobotParams *arg1 = (ArRobotParams *) 0 ;
  char *result = 0 ;
  
  arg1 = (ArRobotParams *)jarg1; 
  result = (char *)((ArRobotParams const *)arg1)->getLCDMTXBoardType();
  jresult = SWIG_csharp_string_callback((const char *)result); 
  return jresult;
}


SWIGEXPORT char * SWIGSTDCALL CSharp_ArRobotParams_getLCDMTXBoardPortType__SWIG_0(void * jarg1, int jarg2) {
  char * jresult ;
  ArRobotParams *arg1 = (ArRobotParams *) 0 ;
  int arg2 ;
  char *result = 0 ;
  
  arg1 = (ArRobotParams *)jarg1; 
  arg2 = (int)jarg2; 
  result = (char *)((ArRobotParams const *)arg1)->getLCDMTXBoardPortType(arg2);
  jresult = SWIG_csharp_string_callback((const char *)result); 
  return jresult;
}


SWIGEXPORT char * SWIGSTDCALL CSharp_ArRobotParams_getLCDMTXBoardPortType__SWIG_1(void * jarg1) {
  char * jresult ;
  ArRobotParams *arg1 = (ArRobotParams *) 0 ;
  char *result = 0 ;
  
  arg1 = (ArRobotParams *)jarg1; 
  result = (char *)((ArRobotParams const *)arg1)->getLCDMTXBoardPortType();
  jresult = SWIG_csharp_string_callback((const char *)result); 
  return jresult;
}


SWIGEXPORT char * SWIGSTDCALL CSharp_ArRobotParams_getLCDMTXBoardPort__SWIG_0(void * jarg1, int jarg2) {
  char * jresult ;
  ArRobotParams *arg1 = (ArRobotParams *) 0 ;
  int arg2 ;
  char *result = 0 ;
  
  arg1 = (ArRobotParams *)jarg1; 
  arg2 = (int)jarg2; 
  result = (char *)((ArRobotParams const *)arg1)->getLCDMTXBoardPort(arg2);
  jresult = SWIG_csharp_string_callback((const char *)result); 
  return jresult;
}


SWIGEXPORT char * SWIGSTDCALL CSharp_ArRobotParams_getLCDMTXBoardPort__SWIG_1(void * jarg1) {
  char * jresult ;
  ArRobotParams *arg1 = (ArRobotParams *) 0 ;
  char *result = 0 ;
  
  arg1 = (ArRobotParams *)jarg1; 
  result = (char *)((ArRobotParams const *)arg1)->getLCDMTXBoardPort();
  jresult = SWIG_csharp_string_callback((const char *)result); 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_ArRobotParams_getLCDMTXBoardBaud__SWIG_0(void * jarg1, int jarg2) {
  int jresult ;
  ArRobotParams *arg1 = (ArRobotParams *) 0 ;
  int arg2 ;
  int result;
  
  arg1 = (ArRobotParams *)jarg1; 
  arg2 = (int)jarg2; 
  result = (int)((ArRobotParams const *)arg1)->getLCDMTXBoardBaud(arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_ArRobotParams_getLCDMTXBoardBaud__SWIG_1(void * jarg1) {
  int jresult ;
  ArRobotParams *arg1 = (ArRobotParams *) 0 ;
  int result;
  
  arg1 = (ArRobotParams *)jarg1; 
  result = (int)((ArRobotParams const *)arg1)->getLCDMTXBoardBaud();
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_ArRobotParams_getLCDMTXBoardAutoConn__SWIG_0(void * jarg1, int jarg2) {
  unsigned int jresult ;
  ArRobotParams *arg1 = (ArRobotParams *) 0 ;
  int arg2 ;
  bool result;
  
  arg1 = (ArRobotParams *)jarg1; 
  arg2 = (int)jarg2; 
  result = (bool)((ArRobotParams const *)arg1)->getLCDMTXBoardAutoConn(arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_ArRobotParams_getLCDMTXBoardAutoConn__SWIG_1(void * jarg1) {
  unsigned int jresult ;
  ArRobotParams *arg1 = (ArRobotParams *) 0 ;
  bool result;
  
  arg1 = (ArRobotParams *)jarg1; 
  result = (bool)((ArRobotParams const *)arg1)->getLCDMTXBoardAutoConn();
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_ArRobotParams_getLCDMTXBoardConnFailOption__SWIG_0(void * jarg1, int jarg2) {
  unsigned int jresult ;
  ArRobotParams *arg1 = (ArRobotParams *) 0 ;
  int arg2 ;
  bool result;
  
  arg1 = (ArRobotParams *)jarg1; 
  arg2 = (int)jarg2; 
  result = (bool)((ArRobotParams const *)arg1)->getLCDMTXBoardConnFailOption(arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_ArRobotParams_getLCDMTXBoardConnFailOption__SWIG_1(void * jarg1) {
  unsigned int jresult ;
  ArRobotParams *arg1 = (ArRobotParams *) 0 ;
  bool result;
  
  arg1 = (ArRobotParams *)jarg1; 
  result = (bool)((ArRobotParams const *)arg1)->getLCDMTXBoardConnFailOption();
  jresult = result; 
  return jresult;
}


SWIGEXPORT char * SWIGSTDCALL CSharp_ArRobotParams_getLCDMTXBoardPowerOutput__SWIG_0(void * jarg1, int jarg2) {
  char * jresult ;
  ArRobotParams *arg1 = (ArRobotParams *) 0 ;
  int arg2 ;
  char *result = 0 ;
  
  arg1 = (ArRobotParams *)jarg1; 
  arg2 = (int)jarg2; 
  result = (char *)((ArRobotParams const *)arg1)->getLCDMTXBoardPowerOutput(arg2);
  jresult = SWIG_csharp_string_callback((const char *)result); 
  return jresult;
}


SWIGEXPORT char * SWIGSTDCALL CSharp_ArRobotParams_getLCDMTXBoardPowerOutput__SWIG_1(void * jarg1) {
  char * jresult ;
  ArRobotParams *arg1 = (ArRobotParams *) 0 ;
  char *result = 0 ;
  
  arg1 = (ArRobotParams *)jarg1; 
  result = (char *)((ArRobotParams const *)arg1)->getLCDMTXBoardPowerOutput();
  jresult = SWIG_csharp_string_callback((const char *)result); 
  return jresult;
}


SWIGEXPORT char * SWIGSTDCALL CSharp_ArRobotParams_getSonarMTXBoardType__SWIG_0(void * jarg1, int jarg2) {
  char * jresult ;
  ArRobotParams *arg1 = (ArRobotParams *) 0 ;
  int arg2 ;
  char *result = 0 ;
  
  arg1 = (ArRobotParams *)jarg1; 
  arg2 = (int)jarg2; 
  result = (char *)((ArRobotParams const *)arg1)->getSonarMTXBoardType(arg2);
  jresult = SWIG_csharp_string_callback((const char *)result); 
  return jresult;
}


SWIGEXPORT char * SWIGSTDCALL CSharp_ArRobotParams_getSonarMTXBoardType__SWIG_1(void * jarg1) {
  char * jresult ;
  ArRobotParams *arg1 = (ArRobotParams *) 0 ;
  char *result = 0 ;
  
  arg1 = (ArRobotParams *)jarg1; 
  result = (char *)((ArRobotParams const *)arg1)->getSonarMTXBoardType();
  jresult = SWIG_csharp_string_callback((const char *)result); 
  return jresult;
}


SWIGEXPORT char * SWIGSTDCALL CSharp_ArRobotParams_getSonarMTXBoardPortType__SWIG_0(void * jarg1, int jarg2) {
  char * jresult ;
  ArRobotParams *arg1 = (ArRobotParams *) 0 ;
  int arg2 ;
  char *result = 0 ;
  
  arg1 = (ArRobotParams *)jarg1; 
  arg2 = (int)jarg2; 
  result = (char *)((ArRobotParams const *)arg1)->getSonarMTXBoardPortType(arg2);
  jresult = SWIG_csharp_string_callback((const char *)result); 
  return jresult;
}


SWIGEXPORT char * SWIGSTDCALL CSharp_ArRobotParams_getSonarMTXBoardPortType__SWIG_1(void * jarg1) {
  char * jresult ;
  ArRobotParams *arg1 = (ArRobotParams *) 0 ;
  char *result = 0 ;
  
  arg1 = (ArRobotParams *)jarg1; 
  result = (char *)((ArRobotParams const *)arg1)->getSonarMTXBoardPortType();
  jresult = SWIG_csharp_string_callback((const char *)result); 
  return jresult;
}


SWIGEXPORT char * SWIGSTDCALL CSharp_ArRobotParams_getSonarMTXBoardPort__SWIG_0(void * jarg1, int jarg2) {
  char * jresult ;
  ArRobotParams *arg1 = (ArRobotParams *) 0 ;
  int arg2 ;
  char *result = 0 ;
  
  arg1 = (ArRobotParams *)jarg1; 
  arg2 = (int)jarg2; 
  result = (char *)((ArRobotParams const *)arg1)->getSonarMTXBoardPort(arg2);
  jresult = SWIG_csharp_string_callback((const char *)result); 
  return jresult;
}


SWIGEXPORT char * SWIGSTDCALL CSharp_ArRobotParams_getSonarMTXBoardPort__SWIG_1(void * jarg1) {
  char * jresult ;
  ArRobotParams *arg1 = (ArRobotParams *) 0 ;
  char *result = 0 ;
  
  arg1 = (ArRobotParams *)jarg1; 
  result = (char *)((ArRobotParams const *)arg1)->getSonarMTXBoardPort();
  jresult = SWIG_csharp_string_callback((const char *)result); 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_ArRobotParams_getSonarMTXBoardBaud__SWIG_0(void * jarg1, int jarg2) {
  int jresult ;
  ArRobotParams *arg1 = (ArRobotParams *) 0 ;
  int arg2 ;
  int result;
  
  arg1 = (ArRobotParams *)jarg1; 
  arg2 = (int)jarg2; 
  result = (int)((ArRobotParams const *)arg1)->getSonarMTXBoardBaud(arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_ArRobotParams_getSonarMTXBoardBaud__SWIG_1(void * jarg1) {
  int jresult ;
  ArRobotParams *arg1 = (ArRobotParams *) 0 ;
  int result;
  
  arg1 = (ArRobotParams *)jarg1; 
  result = (int)((ArRobotParams const *)arg1)->getSonarMTXBoardBaud();
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_ArRobotParams_getSonarMTXBoardAutoConn__SWIG_0(void * jarg1, int jarg2) {
  unsigned int jresult ;
  ArRobotParams *arg1 = (ArRobotParams *) 0 ;
  int arg2 ;
  bool result;
  
  arg1 = (ArRobotParams *)jarg1; 
  arg2 = (int)jarg2; 
  result = (bool)((ArRobotParams const *)arg1)->getSonarMTXBoardAutoConn(arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_ArRobotParams_getSonarMTXBoardAutoConn__SWIG_1(void * jarg1) {
  unsigned int jresult ;
  ArRobotParams *arg1 = (ArRobotParams *) 0 ;
  bool result;
  
  arg1 = (ArRobotParams *)jarg1; 
  result = (bool)((ArRobotParams const *)arg1)->getSonarMTXBoardAutoConn();
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_ArRobotParams_getSonarMTXBoardDelay__SWIG_0(void * jarg1, int jarg2) {
  int jresult ;
  ArRobotParams *arg1 = (ArRobotParams *) 0 ;
  int arg2 ;
  int result;
  
  arg1 = (ArRobotParams *)jarg1; 
  arg2 = (int)jarg2; 
  result = (int)((ArRobotParams const *)arg1)->getSonarMTXBoardDelay(arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_ArRobotParams_getSonarMTXBoardDelay__SWIG_1(void * jarg1) {
  int jresult ;
  ArRobotParams *arg1 = (ArRobotParams *) 0 ;
  int result;
  
  arg1 = (ArRobotParams *)jarg1; 
  result = (int)((ArRobotParams const *)arg1)->getSonarMTXBoardDelay();
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_ArRobotParams_getSonarMTXBoardGain__SWIG_0(void * jarg1, int jarg2) {
  int jresult ;
  ArRobotParams *arg1 = (ArRobotParams *) 0 ;
  int arg2 ;
  int result;
  
  arg1 = (ArRobotParams *)jarg1; 
  arg2 = (int)jarg2; 
  result = (int)((ArRobotParams const *)arg1)->getSonarMTXBoardGain(arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_ArRobotParams_getSonarMTXBoardGain__SWIG_1(void * jarg1) {
  int jresult ;
  ArRobotParams *arg1 = (ArRobotParams *) 0 ;
  int result;
  
  arg1 = (ArRobotParams *)jarg1; 
  result = (int)((ArRobotParams const *)arg1)->getSonarMTXBoardGain();
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_ArRobotParams_getSonarMTXBoardDetectionThreshold__SWIG_0(void * jarg1, int jarg2) {
  int jresult ;
  ArRobotParams *arg1 = (ArRobotParams *) 0 ;
  int arg2 ;
  int result;
  
  arg1 = (ArRobotParams *)jarg1; 
  arg2 = (int)jarg2; 
  result = (int)((ArRobotParams const *)arg1)->getSonarMTXBoardDetectionThreshold(arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_ArRobotParams_getSonarMTXBoardDetectionThreshold__SWIG_1(void * jarg1) {
  int jresult ;
  ArRobotParams *arg1 = (ArRobotParams *) 0 ;
  int result;
  
  arg1 = (ArRobotParams *)jarg1; 
  result = (int)((ArRobotParams const *)arg1)->getSonarMTXBoardDetectionThreshold();
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_ArRobotParams_getSonarMTXBoardMaxRange__SWIG_0(void * jarg1, int jarg2) {
  int jresult ;
  ArRobotParams *arg1 = (ArRobotParams *) 0 ;
  int arg2 ;
  int result;
  
  arg1 = (ArRobotParams *)jarg1; 
  arg2 = (int)jarg2; 
  result = (int)((ArRobotParams const *)arg1)->getSonarMTXBoardMaxRange(arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_ArRobotParams_getSonarMTXBoardMaxRange__SWIG_1(void * jarg1) {
  int jresult ;
  ArRobotParams *arg1 = (ArRobotParams *) 0 ;
  int result;
  
  arg1 = (ArRobotParams *)jarg1; 
  result = (int)((ArRobotParams const *)arg1)->getSonarMTXBoardMaxRange();
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_ArRobotParams_getSonarMTXBoardUseForAutonomousDriving__SWIG_0(void * jarg1, int jarg2) {
  int jresult ;
  ArRobotParams *arg1 = (ArRobotParams *) 0 ;
  int arg2 ;
  int result;
  
  arg1 = (ArRobotParams *)jarg1; 
  arg2 = (int)jarg2; 
  result = (int)((ArRobotParams const *)arg1)->getSonarMTXBoardUseForAutonomousDriving(arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_ArRobotParams_getSonarMTXBoardUseForAutonomousDriving__SWIG_1(void * jarg1) {
  int jresult ;
  ArRobotParams *arg1 = (ArRobotParams *) 0 ;
  int result;
  
  arg1 = (ArRobotParams *)jarg1; 
  result = (int)((ArRobotParams const *)arg1)->getSonarMTXBoardUseForAutonomousDriving();
  jresult = result; 
  return jresult;
}


SWIGEXPORT char * SWIGSTDCALL CSharp_ArRobotParams_getSonarMTXBoardPowerOutput__SWIG_0(void * jarg1, int jarg2) {
  char * jresult ;
  ArRobotParams *arg1 = (ArRobotParams *) 0 ;
  int arg2 ;
  char *result = 0 ;
  
  arg1 = (ArRobotParams *)jarg1; 
  arg2 = (int)jarg2; 
  result = (char *)((ArRobotParams const *)arg1)->getSonarMTXBoardPowerOutput(arg2);
  jresult = SWIG_csharp_string_callback((const char *)result); 
  return jresult;
}


SWIGEXPORT char * SWIGSTDCALL CSharp_ArRobotParams_getSonarMTXBoardPowerOutput__SWIG_1(void * jarg1) {
  char * jresult ;
  ArRobotParams *arg1 = (ArRobotParams *) 0 ;
  char *result = 0 ;
  
  arg1 = (ArRobotParams *)jarg1; 
  result = (char *)((ArRobotParams const *)arg1)->getSonarMTXBoardPowerOutput();
  jresult = SWIG_csharp_string_callback((const char *)result); 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_ArRobotParams_getNumSonarOnMTXBoard__SWIG_0(void * jarg1, int jarg2) {
  int jresult ;
  ArRobotParams *arg1 = (ArRobotParams *) 0 ;
  int arg2 ;
  int result;
  
  arg1 = (ArRobotParams *)jarg1; 
  arg2 = (int)jarg2; 
  result = (int)((ArRobotParams const *)arg1)->getNumSonarOnMTXBoard(arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_ArRobotParams_getNumSonarOnMTXBoard__SWIG_1(void * jarg1) {
  int jresult ;
  ArRobotParams *arg1 = (ArRobotParams *) 0 ;
  int result;
  
  arg1 = (ArRobotParams *)jarg1; 
  result = (int)((ArRobotParams const *)arg1)->getNumSonarOnMTXBoard();
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_ArRobotParams_getNumSonarUnits(void * jarg1) {
  int jresult ;
  ArRobotParams *arg1 = (ArRobotParams *) 0 ;
  int result;
  
  arg1 = (ArRobotParams *)jarg1; 
  result = (int)((ArRobotParams const *)arg1)->getNumSonarUnits();
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_ArRobotParams_haveSonar(void * jarg1, int jarg2) {
  unsigned int jresult ;
  ArRobotParams *arg1 = (ArRobotParams *) 0 ;
  int arg2 ;
  bool result;
  
  arg1 = (ArRobotParams *)jarg1; 
  arg2 = (int)jarg2; 
  result = (bool)((ArRobotParams const *)arg1)->haveSonar(arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_ArRobotParams_getSonarX(void * jarg1, int jarg2) {
  int jresult ;
  ArRobotParams *arg1 = (ArRobotParams *) 0 ;
  int arg2 ;
  int result;
  
  arg1 = (ArRobotParams *)jarg1; 
  arg2 = (int)jarg2; 
  result = (int)((ArRobotParams const *)arg1)->getSonarX(arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_ArRobotParams_getSonarY(void * jarg1, int jarg2) {
  int jresult ;
  ArRobotParams *arg1 = (ArRobotParams *) 0 ;
  int arg2 ;
  int result;
  
  arg1 = (ArRobotParams *)jarg1; 
  arg2 = (int)jarg2; 
  result = (int)((ArRobotParams const *)arg1)->getSonarY(arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_ArRobotParams_getSonarTh(void * jarg1, int jarg2) {
  int jresult ;
  ArRobotParams *arg1 = (ArRobotParams *) 0 ;
  int arg2 ;
  int result;
  
  arg1 = (ArRobotParams *)jarg1; 
  arg2 = (int)jarg2; 
  result = (int)((ArRobotParams const *)arg1)->getSonarTh(arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_ArRobotParams_getSonarGain(void * jarg1, int jarg2) {
  int jresult ;
  ArRobotParams *arg1 = (ArRobotParams *) 0 ;
  int arg2 ;
  int result;
  
  arg1 = (ArRobotParams *)jarg1; 
  arg2 = (int)jarg2; 
  result = (int)((ArRobotParams const *)arg1)->getSonarGain(arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_ArRobotParams_getSonarDetectionThreshold(void * jarg1, int jarg2) {
  int jresult ;
  ArRobotParams *arg1 = (ArRobotParams *) 0 ;
  int arg2 ;
  int result;
  
  arg1 = (ArRobotParams *)jarg1; 
  arg2 = (int)jarg2; 
  result = (int)((ArRobotParams const *)arg1)->getSonarDetectionThreshold(arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_ArRobotParams_getSonarMaxRange(void * jarg1, int jarg2) {
  int jresult ;
  ArRobotParams *arg1 = (ArRobotParams *) 0 ;
  int arg2 ;
  int result;
  
  arg1 = (ArRobotParams *)jarg1; 
  arg2 = (int)jarg2; 
  result = (int)((ArRobotParams const *)arg1)->getSonarMaxRange(arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_ArRobotParams_getSonarUseForAutonomousDriving(void * jarg1, int jarg2) {
  int jresult ;
  ArRobotParams *arg1 = (ArRobotParams *) 0 ;
  int arg2 ;
  int result;
  
  arg1 = (ArRobotParams *)jarg1; 
  arg2 = (int)jarg2; 
  result = (int)((ArRobotParams const *)arg1)->getSonarUseForAutonomousDriving(arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_ArRobotParams_getSonarMTXBoard(void * jarg1, int jarg2) {
  int jresult ;
  ArRobotParams *arg1 = (ArRobotParams *) 0 ;
  int arg2 ;
  int result;
  
  arg1 = (ArRobotParams *)jarg1; 
  arg2 = (int)jarg2; 
  result = (int)((ArRobotParams const *)arg1)->getSonarMTXBoard(arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_ArRobotParams_getSonarMTXBoardUnitPosition(void * jarg1, int jarg2) {
  int jresult ;
  ArRobotParams *arg1 = (ArRobotParams *) 0 ;
  int arg2 ;
  int result;
  
  arg1 = (ArRobotParams *)jarg1; 
  arg2 = (int)jarg2; 
  result = (int)((ArRobotParams const *)arg1)->getSonarMTXBoardUnitPosition(arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_ArRobotParams_hasSettableVelMaxes(void * jarg1) {
  unsigned int jresult ;
  ArRobotParams *arg1 = (ArRobotParams *) 0 ;
  bool result;
  
  arg1 = (ArRobotParams *)jarg1; 
  result = (bool)((ArRobotParams const *)arg1)->hasSettableVelMaxes();
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_ArRobotParams_getTransVelMax(void * jarg1) {
  int jresult ;
  ArRobotParams *arg1 = (ArRobotParams *) 0 ;
  int result;
  
  arg1 = (ArRobotParams *)jarg1; 
  result = (int)((ArRobotParams const *)arg1)->getTransVelMax();
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_ArRobotParams_getRotVelMax(void * jarg1) {
  int jresult ;
  ArRobotParams *arg1 = (ArRobotParams *) 0 ;
  int result;
  
  arg1 = (ArRobotParams *)jarg1; 
  result = (int)((ArRobotParams const *)arg1)->getRotVelMax();
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_ArRobotParams_hasSettableAccsDecs(void * jarg1) {
  unsigned int jresult ;
  ArRobotParams *arg1 = (ArRobotParams *) 0 ;
  bool result;
  
  arg1 = (ArRobotParams *)jarg1; 
  result = (bool)((ArRobotParams const *)arg1)->hasSettableAccsDecs();
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_ArRobotParams_getTransAccel(void * jarg1) {
  int jresult ;
  ArRobotParams *arg1 = (ArRobotParams *) 0 ;
  int result;
  
  arg1 = (ArRobotParams *)jarg1; 
  result = (int)((ArRobotParams const *)arg1)->getTransAccel();
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_ArRobotParams_getTransDecel(void * jarg1) {
  int jresult ;
  ArRobotParams *arg1 = (ArRobotParams *) 0 ;
  int result;
  
  arg1 = (ArRobotParams *)jarg1; 
  result = (int)((ArRobotParams const *)arg1)->getTransDecel();
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_ArRobotParams_getRotAccel(void * jarg1) {
  int jresult ;
  ArRobotParams *arg1 = (ArRobotParams *) 0 ;
  int result;
  
  arg1 = (ArRobotParams *)jarg1; 
  result = (int)((ArRobotParams const *)arg1)->getRotAccel();
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_ArRobotParams_getRotDecel(void * jarg1) {
  int jresult ;
  ArRobotParams *arg1 = (ArRobotParams *) 0 ;
  int result;
  
  arg1 = (ArRobotParams *)jarg1; 
  result = (int)((ArRobotParams const *)arg1)->getRotDecel();
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_ArRobotParams_hasLatVel(void * jarg1) {
  unsigned int jresult ;
  ArRobotParams *arg1 = (ArRobotParams *) 0 ;
  bool result;
  
  arg1 = (ArRobotParams *)jarg1; 
  result = (bool)((ArRobotParams const *)arg1)->hasLatVel();
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_ArRobotParams_getLatVelMax(void * jarg1) {
  int jresult ;
  ArRobotParams *arg1 = (ArRobotParams *) 0 ;
  int result;
  
  arg1 = (ArRobotParams *)jarg1; 
  result = (int)((ArRobotParams const *)arg1)->getLatVelMax();
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_ArRobotParams_getLatAccel(void * jarg1) {
  int jresult ;
  ArRobotParams *arg1 = (ArRobotParams *) 0 ;
  int result;
  
  arg1 = (ArRobotParams *)jarg1; 
  result = (int)((ArRobotParams const *)arg1)->getLatAccel();
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_ArRobotParams_getLatDecel(void * jarg1) {
  int jresult ;
  ArRobotParams *arg1 = (ArRobotParams *) 0 ;
  int result;
  
  arg1 = (ArRobotParams *)jarg1; 
  result = (int)((ArRobotParams const *)arg1)->getLatDecel();
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_ArRobotParams_save(void * jarg1) {
  unsigned int jresult ;
  ArRobotParams *arg1 = (ArRobotParams *) 0 ;
  bool result;
  
  arg1 = (ArRobotParams *)jarg1; 
  result = (bool)(arg1)->save();
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_ArRobotParams_getGPSX(void * jarg1) {
  int jresult ;
  ArRobotParams *arg1 = (ArRobotParams *) 0 ;
  int result;
  
  arg1 = (ArRobotParams *)jarg1; 
  result = (int)((ArRobotParams const *)arg1)->getGPSX();
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_ArRobotParams_getGPSY(void * jarg1) {
  int jresult ;
  ArRobotParams *arg1 = (ArRobotParams *) 0 ;
  int result;
  
  arg1 = (ArRobotParams *)jarg1; 
  result = (int)((ArRobotParams const *)arg1)->getGPSY();
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_ArRobotParams_getGPSBaud(void * jarg1) {
  int jresult ;
  ArRobotParams *arg1 = (ArRobotParams *) 0 ;
  int result;
  
  arg1 = (ArRobotParams *)jarg1; 
  result = (int)((ArRobotParams const *)arg1)->getGPSBaud();
  jresult = result; 
  return jresult;
}


SWIGEXPORT char * SWIGSTDCALL CSharp_ArRobotParams_getGPSPort(void * jarg1) {
  char * jresult ;
  ArRobotParams *arg1 = (ArRobotParams *) 0 ;
  char *result = 0 ;
  
  arg1 = (ArRobotParams *)jarg1; 
  result = (char *)((ArRobotParams const *)arg1)->getGPSPort();
  jresult = SWIG_csharp_string_callback((const char *)result); 
  return jresult;
}


SWIGEXPORT char * SWIGSTDCALL CSharp_ArRobotParams_getGPSType(void * jarg1) {
  char * jresult ;
  ArRobotParams *arg1 = (ArRobotParams *) 0 ;
  char *result = 0 ;
  
  arg1 = (ArRobotParams *)jarg1; 
  result = (char *)((ArRobotParams const *)arg1)->getGPSType();
  jresult = SWIG_csharp_string_callback((const char *)result); 
  return jresult;
}


SWIGEXPORT char * SWIGSTDCALL CSharp_ArRobotParams_getCompassType(void * jarg1) {
  char * jresult ;
  ArRobotParams *arg1 = (ArRobotParams *) 0 ;
  char *result = 0 ;
  
  arg1 = (ArRobotParams *)jarg1; 
  result = (char *)((ArRobotParams const *)arg1)->getCompassType();
  jresult = SWIG_csharp_string_callback((const char *)result); 
  return jresult;
}


SWIGEXPORT char * SWIGSTDCALL CSharp_ArRobotParams_getCompassPort(void * jarg1) {
  char * jresult ;
  ArRobotParams *arg1 = (ArRobotParams *) 0 ;
  char *result = 0 ;
  
  arg1 = (ArRobotParams *)jarg1; 
  result = (char *)((ArRobotParams const *)arg1)->getCompassPort();
  jresult = SWIG_csharp_string_callback((const char *)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_ArRobotParams_getVideoParams(void * jarg1) {
  void * jresult ;
  ArRobotParams *arg1 = (ArRobotParams *) 0 ;
  std::vector< ArVideoParams > *result = 0 ;
  
  arg1 = (ArRobotParams *)jarg1; 
  result = (std::vector< ArVideoParams > *) &((ArRobotParams const *)arg1)->getVideoParams();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_ArRobotParams_getPTZParams(void * jarg1) {
  void * jresult ;
  ArRobotParams *arg1 = (ArRobotParams *) 0 ;
  std::vector< ArPTZParams > *result = 0 ;
  
  arg1 = (ArRobotParams *)jarg1; 
  result = (std::vector< ArPTZParams > *) &((ArRobotParams const *)arg1)->getPTZParams();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_ArRVisionPacket__SWIG_0(unsigned short jarg1) {
  void * jresult ;
  ArTypes::UByte2 arg1 ;
  ArRVisionPacket *result = 0 ;
  
  arg1 = (ArTypes::UByte2)jarg1; 
  result = (ArRVisionPacket *)new ArRVisionPacket(arg1);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_ArRVisionPacket__SWIG_1() {
  void * jresult ;
  ArRVisionPacket *result = 0 ;
  
  result = (ArRVisionPacket *)new ArRVisionPacket();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_ArRVisionPacket(void * jarg1) {
  ArRVisionPacket *arg1 = (ArRVisionPacket *) 0 ;
  
  arg1 = (ArRVisionPacket *)jarg1; 
  delete arg1;
}


SWIGEXPORT void SWIGSTDCALL CSharp_ArRVisionPacket_uByteToBuf(void * jarg1, unsigned char jarg2) {
  ArRVisionPacket *arg1 = (ArRVisionPacket *) 0 ;
  ArTypes::UByte arg2 ;
  
  arg1 = (ArRVisionPacket *)jarg1; 
  arg2 = (ArTypes::UByte)jarg2; 
  (arg1)->uByteToBuf(arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_ArRVisionPacket_byte2ToBuf(void * jarg1, short jarg2) {
  ArRVisionPacket *arg1 = (ArRVisionPacket *) 0 ;
  ArTypes::Byte2 arg2 ;
  
  arg1 = (ArRVisionPacket *)jarg1; 
  arg2 = (ArTypes::Byte2)jarg2; 
  (arg1)->byte2ToBuf(arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_ArRVisionPacket_byte2ToBufAtPos(void * jarg1, short jarg2, unsigned short jarg3) {
  ArRVisionPacket *arg1 = (ArRVisionPacket *) 0 ;
  ArTypes::Byte2 arg2 ;
  ArTypes::UByte2 arg3 ;
  
  arg1 = (ArRVisionPacket *)jarg1; 
  arg2 = (ArTypes::Byte2)jarg2; 
  arg3 = (ArTypes::UByte2)jarg3; 
  (arg1)->byte2ToBufAtPos(arg2,arg3);
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_ArRVisionPTZ(void * jarg1) {
  void * jresult ;
  ArRobot *arg1 = (ArRobot *) 0 ;
  ArRVisionPTZ *result = 0 ;
  
  arg1 = (ArRobot *)jarg1; 
  result = (ArRVisionPTZ *)new ArRVisionPTZ(arg1);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_ArRVisionPTZ(void * jarg1) {
  ArRVisionPTZ *arg1 = (ArRVisionPTZ *) 0 ;
  
  arg1 = (ArRVisionPTZ *)jarg1; 
  delete arg1;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_ArRVisionPTZ_init(void * jarg1) {
  unsigned int jresult ;
  ArRVisionPTZ *arg1 = (ArRVisionPTZ *) 0 ;
  bool result;
  
  arg1 = (ArRVisionPTZ *)jarg1; 
  result = (bool)(arg1)->init();
  jresult = result; 
  return jresult;
}


SWIGEXPORT char * SWIGSTDCALL CSharp_ArRVisionPTZ_getTypeName(void * jarg1) {
  char * jresult ;
  ArRVisionPTZ *arg1 = (ArRVisionPTZ *) 0 ;
  char *result = 0 ;
  
  arg1 = (ArRVisionPTZ *)jarg1; 
  result = (char *)(arg1)->getTypeName();
  jresult = SWIG_csharp_string_callback((const char *)result); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_ArRVisionPTZ_setPort(void * jarg1, char * jarg2) {
  ArRVisionPTZ *arg1 = (ArRVisionPTZ *) 0 ;
  char *arg2 = (char *) 0 ;
  
  arg1 = (ArRVisionPTZ *)jarg1; 
  arg2 = (char *)jarg2; 
  (arg1)->setPort((char const *)arg2);
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_ArRVisionPTZ_canZoom(void * jarg1) {
  unsigned int jresult ;
  ArRVisionPTZ *arg1 = (ArRVisionPTZ *) 0 ;
  bool result;
  
  arg1 = (ArRVisionPTZ *)jarg1; 
  result = (bool)((ArRVisionPTZ const *)arg1)->canZoom();
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_ArRVisionPTZ_zoom(void * jarg1, int jarg2) {
  unsigned int jresult ;
  ArRVisionPTZ *arg1 = (ArRVisionPTZ *) 0 ;
  int arg2 ;
  bool result;
  
  arg1 = (ArRVisionPTZ *)jarg1; 
  arg2 = (int)jarg2; 
  result = (bool)(arg1)->zoom(arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_ArRVisionPTZ_zoomRel(void * jarg1, int jarg2) {
  unsigned int jresult ;
  ArRVisionPTZ *arg1 = (ArRVisionPTZ *) 0 ;
  int arg2 ;
  bool result;
  
  arg1 = (ArRVisionPTZ *)jarg1; 
  arg2 = (int)jarg2; 
  result = (bool)(arg1)->zoomRel(arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_ArRVisionPTZ_getZoom(void * jarg1) {
  int jresult ;
  ArRVisionPTZ *arg1 = (ArRVisionPTZ *) 0 ;
  int result;
  
  arg1 = (ArRVisionPTZ *)jarg1; 
  result = (int)((ArRVisionPTZ const *)arg1)->getZoom();
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_ArRVisionPTZ_canGetRealPanTilt(void * jarg1) {
  unsigned int jresult ;
  ArRVisionPTZ *arg1 = (ArRVisionPTZ *) 0 ;
  bool result;
  
  arg1 = (ArRVisionPTZ *)jarg1; 
  result = (bool)((ArRVisionPTZ const *)arg1)->canGetRealPanTilt();
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_ArRVisionPTZ_canGetRealZoom(void * jarg1) {
  unsigned int jresult ;
  ArRVisionPTZ *arg1 = (ArRVisionPTZ *) 0 ;
  bool result;
  
  arg1 = (ArRVisionPTZ *)jarg1; 
  result = (bool)((ArRVisionPTZ const *)arg1)->canGetRealZoom();
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_ArRVisionPTZ_canGetFOV(void * jarg1) {
  unsigned int jresult ;
  ArRVisionPTZ *arg1 = (ArRVisionPTZ *) 0 ;
  bool result;
  
  arg1 = (ArRVisionPTZ *)jarg1; 
  result = (bool)(arg1)->canGetFOV();
  jresult = result; 
  return jresult;
}


SWIGEXPORT double SWIGSTDCALL CSharp_ArRVisionPTZ_getFOVAtMaxZoom(void * jarg1) {
  double jresult ;
  ArRVisionPTZ *arg1 = (ArRVisionPTZ *) 0 ;
  double result;
  
  arg1 = (ArRVisionPTZ *)jarg1; 
  result = (double)(arg1)->getFOVAtMaxZoom();
  jresult = result; 
  return jresult;
}


SWIGEXPORT double SWIGSTDCALL CSharp_ArRVisionPTZ_getFOVAtMinZoom(void * jarg1) {
  double jresult ;
  ArRVisionPTZ *arg1 = (ArRVisionPTZ *) 0 ;
  double result;
  
  arg1 = (ArRVisionPTZ *)jarg1; 
  result = (double)(arg1)->getFOVAtMinZoom();
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_ArRVisionPTZ_readPacket(void * jarg1) {
  void * jresult ;
  ArRVisionPTZ *arg1 = (ArRVisionPTZ *) 0 ;
  ArBasePacket *result = 0 ;
  
  arg1 = (ArRVisionPTZ *)jarg1; 
  result = (ArBasePacket *)(arg1)->readPacket();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_ArRVisionPTZ_MAX_PAN_get() {
  int jresult ;
  int result;
  
  result = (int)ArRVisionPTZ::MAX_PAN;
  jresult = (int)result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_ArRVisionPTZ_MIN_PAN_get() {
  int jresult ;
  int result;
  
  result = (int)ArRVisionPTZ::MIN_PAN;
  jresult = (int)result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_ArRVisionPTZ_MIN_TILT_get() {
  int jresult ;
  int result;
  
  result = (int)ArRVisionPTZ::MIN_TILT;
  jresult = (int)result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_ArRVisionPTZ_MAX_TILT_get() {
  int jresult ;
  int result;
  
  result = (int)ArRVisionPTZ::MAX_TILT;
  jresult = (int)result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_ArRVisionPTZ_MIN_ZOOM_get() {
  int jresult ;
  int result;
  
  result = (int)ArRVisionPTZ::MIN_ZOOM;
  jresult = (int)result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_ArRVisionPTZ_MAX_ZOOM_get() {
  int jresult ;
  int result;
  
  result = (int)ArRVisionPTZ::MAX_ZOOM;
  jresult = (int)result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_ArRVisionPTZ_TILT_OFFSET_IN_DEGREES_get() {
  int jresult ;
  int result;
  
  result = (int)ArRVisionPTZ::TILT_OFFSET_IN_DEGREES;
  jresult = (int)result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_ArRVisionPTZ_PAN_OFFSET_IN_DEGREES_get() {
  int jresult ;
  int result;
  
  result = (int)ArRVisionPTZ::PAN_OFFSET_IN_DEGREES;
  jresult = (int)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_ArSensorReading__SWIG_0(double jarg1, double jarg2, double jarg3) {
  void * jresult ;
  double arg1 ;
  double arg2 ;
  double arg3 ;
  ArSensorReading *result = 0 ;
  
  arg1 = (double)jarg1; 
  arg2 = (double)jarg2; 
  arg3 = (double)jarg3; 
  result = (ArSensorReading *)new ArSensorReading(arg1,arg2,arg3);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_ArSensorReading__SWIG_1(double jarg1, double jarg2) {
  void * jresult ;
  double arg1 ;
  double arg2 ;
  ArSensorReading *result = 0 ;
  
  arg1 = (double)jarg1; 
  arg2 = (double)jarg2; 
  result = (ArSensorReading *)new ArSensorReading(arg1,arg2);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_ArSensorReading__SWIG_2(double jarg1) {
  void * jresult ;
  double arg1 ;
  ArSensorReading *result = 0 ;
  
  arg1 = (double)jarg1; 
  result = (ArSensorReading *)new ArSensorReading(arg1);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_ArSensorReading__SWIG_3() {
  void * jresult ;
  ArSensorReading *result = 0 ;
  
  result = (ArSensorReading *)new ArSensorReading();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_ArSensorReading__SWIG_4(void * jarg1) {
  void * jresult ;
  ArSensorReading *arg1 = 0 ;
  ArSensorReading *result = 0 ;
  
  arg1 = (ArSensorReading *)jarg1;
  if (!arg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "ArSensorReading const & type is null", 0);
    return 0;
  } 
  result = (ArSensorReading *)new ArSensorReading((ArSensorReading const &)*arg1);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_ArSensorReading(void * jarg1) {
  ArSensorReading *arg1 = (ArSensorReading *) 0 ;
  
  arg1 = (ArSensorReading *)jarg1; 
  delete arg1;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_ArSensorReading_getRange(void * jarg1) {
  unsigned int jresult ;
  ArSensorReading *arg1 = (ArSensorReading *) 0 ;
  unsigned int result;
  
  arg1 = (ArSensorReading *)jarg1; 
  result = (unsigned int)((ArSensorReading const *)arg1)->getRange();
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_ArSensorReading_isNew(void * jarg1, unsigned int jarg2) {
  unsigned int jresult ;
  ArSensorReading *arg1 = (ArSensorReading *) 0 ;
  unsigned int arg2 ;
  bool result;
  
  arg1 = (ArSensorReading *)jarg1; 
  arg2 = (unsigned int)jarg2; 
  result = (bool)((ArSensorReading const *)arg1)->isNew(arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT double SWIGSTDCALL CSharp_ArSensorReading_getX(void * jarg1) {
  double jresult ;
  ArSensorReading *arg1 = (ArSensorReading *) 0 ;
  double result;
  
  arg1 = (ArSensorReading *)jarg1; 
  result = (double)((ArSensorReading const *)arg1)->getX();
  jresult = result; 
  return jresult;
}


SWIGEXPORT double SWIGSTDCALL CSharp_ArSensorReading_getY(void * jarg1) {
  double jresult ;
  ArSensorReading *arg1 = (ArSensorReading *) 0 ;
  double result;
  
  arg1 = (ArSensorReading *)jarg1; 
  result = (double)((ArSensorReading const *)arg1)->getY();
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_ArSensorReading_getPose(void * jarg1) {
  void * jresult ;
  ArSensorReading *arg1 = (ArSensorReading *) 0 ;
  ArPose result;
  
  arg1 = (ArSensorReading *)jarg1; 
  result = ((ArSensorReading const *)arg1)->getPose();
  jresult = new ArPose((const ArPose &)result); 
  return jresult;
}


SWIGEXPORT double SWIGSTDCALL CSharp_ArSensorReading_getLocalX(void * jarg1) {
  double jresult ;
  ArSensorReading *arg1 = (ArSensorReading *) 0 ;
  double result;
  
  arg1 = (ArSensorReading *)jarg1; 
  result = (double)((ArSensorReading const *)arg1)->getLocalX();
  jresult = result; 
  return jresult;
}


SWIGEXPORT double SWIGSTDCALL CSharp_ArSensorReading_getLocalY(void * jarg1) {
  double jresult ;
  ArSensorReading *arg1 = (ArSensorReading *) 0 ;
  double result;
  
  arg1 = (ArSensorReading *)jarg1; 
  result = (double)((ArSensorReading const *)arg1)->getLocalY();
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_ArSensorReading_getLocalPose(void * jarg1) {
  void * jresult ;
  ArSensorReading *arg1 = (ArSensorReading *) 0 ;
  ArPose result;
  
  arg1 = (ArSensorReading *)jarg1; 
  result = ((ArSensorReading const *)arg1)->getLocalPose();
  jresult = new ArPose((const ArPose &)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_ArSensorReading_getPoseTaken(void * jarg1) {
  void * jresult ;
  ArSensorReading *arg1 = (ArSensorReading *) 0 ;
  ArPose result;
  
  arg1 = (ArSensorReading *)jarg1; 
  result = ((ArSensorReading const *)arg1)->getPoseTaken();
  jresult = new ArPose((const ArPose &)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_ArSensorReading_getEncoderPoseTaken(void * jarg1) {
  void * jresult ;
  ArSensorReading *arg1 = (ArSensorReading *) 0 ;
  ArPose result;
  
  arg1 = (ArSensorReading *)jarg1; 
  result = ((ArSensorReading const *)arg1)->getEncoderPoseTaken();
  jresult = new ArPose((const ArPose &)result); 
  return jresult;
}


SWIGEXPORT double SWIGSTDCALL CSharp_ArSensorReading_getSensorX(void * jarg1) {
  double jresult ;
  ArSensorReading *arg1 = (ArSensorReading *) 0 ;
  double result;
  
  arg1 = (ArSensorReading *)jarg1; 
  result = (double)((ArSensorReading const *)arg1)->getSensorX();
  jresult = result; 
  return jresult;
}


SWIGEXPORT double SWIGSTDCALL CSharp_ArSensorReading_getSensorY(void * jarg1) {
  double jresult ;
  ArSensorReading *arg1 = (ArSensorReading *) 0 ;
  double result;
  
  arg1 = (ArSensorReading *)jarg1; 
  result = (double)((ArSensorReading const *)arg1)->getSensorY();
  jresult = result; 
  return jresult;
}


SWIGEXPORT double SWIGSTDCALL CSharp_ArSensorReading_getSensorTh(void * jarg1) {
  double jresult ;
  ArSensorReading *arg1 = (ArSensorReading *) 0 ;
  double result;
  
  arg1 = (ArSensorReading *)jarg1; 
  result = (double)((ArSensorReading const *)arg1)->getSensorTh();
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_ArSensorReading_getIgnoreThisReading(void * jarg1) {
  unsigned int jresult ;
  ArSensorReading *arg1 = (ArSensorReading *) 0 ;
  bool result;
  
  arg1 = (ArSensorReading *)jarg1; 
  result = (bool)((ArSensorReading const *)arg1)->getIgnoreThisReading();
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_ArSensorReading_getExtraInt(void * jarg1) {
  int jresult ;
  ArSensorReading *arg1 = (ArSensorReading *) 0 ;
  int result;
  
  arg1 = (ArSensorReading *)jarg1; 
  result = (int)((ArSensorReading const *)arg1)->getExtraInt();
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_ArSensorReading_getSensorPosition(void * jarg1) {
  void * jresult ;
  ArSensorReading *arg1 = (ArSensorReading *) 0 ;
  ArPose result;
  
  arg1 = (ArSensorReading *)jarg1; 
  result = ((ArSensorReading const *)arg1)->getSensorPosition();
  jresult = new ArPose((const ArPose &)result); 
  return jresult;
}


SWIGEXPORT double SWIGSTDCALL CSharp_ArSensorReading_getSensorDX(void * jarg1) {
  double jresult ;
  ArSensorReading *arg1 = (ArSensorReading *) 0 ;
  double result;
  
  arg1 = (ArSensorReading *)jarg1; 
  result = (double)((ArSensorReading const *)arg1)->getSensorDX();
  jresult = result; 
  return jresult;
}


SWIGEXPORT double SWIGSTDCALL CSharp_ArSensorReading_getSensorDY(void * jarg1) {
  double jresult ;
  ArSensorReading *arg1 = (ArSensorReading *) 0 ;
  double result;
  
  arg1 = (ArSensorReading *)jarg1; 
  result = (double)((ArSensorReading const *)arg1)->getSensorDY();
  jresult = result; 
  return jresult;
}


SWIGEXPORT double SWIGSTDCALL CSharp_ArSensorReading_getXTaken(void * jarg1) {
  double jresult ;
  ArSensorReading *arg1 = (ArSensorReading *) 0 ;
  double result;
  
  arg1 = (ArSensorReading *)jarg1; 
  result = (double)((ArSensorReading const *)arg1)->getXTaken();
  jresult = result; 
  return jresult;
}


SWIGEXPORT double SWIGSTDCALL CSharp_ArSensorReading_getYTaken(void * jarg1) {
  double jresult ;
  ArSensorReading *arg1 = (ArSensorReading *) 0 ;
  double result;
  
  arg1 = (ArSensorReading *)jarg1; 
  result = (double)((ArSensorReading const *)arg1)->getYTaken();
  jresult = result; 
  return jresult;
}


SWIGEXPORT double SWIGSTDCALL CSharp_ArSensorReading_getThTaken(void * jarg1) {
  double jresult ;
  ArSensorReading *arg1 = (ArSensorReading *) 0 ;
  double result;
  
  arg1 = (ArSensorReading *)jarg1; 
  result = (double)((ArSensorReading const *)arg1)->getThTaken();
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_ArSensorReading_getCounterTaken(void * jarg1) {
  unsigned int jresult ;
  ArSensorReading *arg1 = (ArSensorReading *) 0 ;
  unsigned int result;
  
  arg1 = (ArSensorReading *)jarg1; 
  result = (unsigned int)((ArSensorReading const *)arg1)->getCounterTaken();
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_ArSensorReading_getTimeTaken(void * jarg1) {
  void * jresult ;
  ArSensorReading *arg1 = (ArSensorReading *) 0 ;
  ArTime result;
  
  arg1 = (ArSensorReading *)jarg1; 
  result = ((ArSensorReading const *)arg1)->getTimeTaken();
  jresult = new ArTime((const ArTime &)result); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_ArSensorReading_newData__SWIG_0(void * jarg1, int jarg2, void * jarg3, void * jarg4, void * jarg5, unsigned int jarg6, void * jarg7, unsigned int jarg8, int jarg9) {
  ArSensorReading *arg1 = (ArSensorReading *) 0 ;
  int arg2 ;
  ArPose arg3 ;
  ArPose arg4 ;
  ArTransform arg5 ;
  unsigned int arg6 ;
  ArTime arg7 ;
  bool arg8 ;
  int arg9 ;
  ArPose *argp3 ;
  ArPose *argp4 ;
  ArTransform *argp5 ;
  ArTime *argp7 ;
  
  arg1 = (ArSensorReading *)jarg1; 
  arg2 = (int)jarg2; 
  argp3 = (ArPose *)jarg3; 
  if (!argp3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Attempt to dereference null ArPose", 0);
    return ;
  }
  arg3 = *argp3; 
  argp4 = (ArPose *)jarg4; 
  if (!argp4) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Attempt to dereference null ArPose", 0);
    return ;
  }
  arg4 = *argp4; 
  argp5 = (ArTransform *)jarg5; 
  if (!argp5) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Attempt to dereference null ArTransform", 0);
    return ;
  }
  arg5 = *argp5; 
  arg6 = (unsigned int)jarg6; 
  argp7 = (ArTime *)jarg7; 
  if (!argp7) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Attempt to dereference null ArTime", 0);
    return ;
  }
  arg7 = *argp7; 
  arg8 = jarg8 ? true : false; 
  arg9 = (int)jarg9; 
  (arg1)->newData(arg2,arg3,arg4,arg5,arg6,arg7,arg8,arg9);
}


SWIGEXPORT void SWIGSTDCALL CSharp_ArSensorReading_newData__SWIG_1(void * jarg1, int jarg2, void * jarg3, void * jarg4, void * jarg5, unsigned int jarg6, void * jarg7, unsigned int jarg8) {
  ArSensorReading *arg1 = (ArSensorReading *) 0 ;
  int arg2 ;
  ArPose arg3 ;
  ArPose arg4 ;
  ArTransform arg5 ;
  unsigned int arg6 ;
  ArTime arg7 ;
  bool arg8 ;
  ArPose *argp3 ;
  ArPose *argp4 ;
  ArTransform *argp5 ;
  ArTime *argp7 ;
  
  arg1 = (ArSensorReading *)jarg1; 
  arg2 = (int)jarg2; 
  argp3 = (ArPose *)jarg3; 
  if (!argp3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Attempt to dereference null ArPose", 0);
    return ;
  }
  arg3 = *argp3; 
  argp4 = (ArPose *)jarg4; 
  if (!argp4) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Attempt to dereference null ArPose", 0);
    return ;
  }
  arg4 = *argp4; 
  argp5 = (ArTransform *)jarg5; 
  if (!argp5) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Attempt to dereference null ArTransform", 0);
    return ;
  }
  arg5 = *argp5; 
  arg6 = (unsigned int)jarg6; 
  argp7 = (ArTime *)jarg7; 
  if (!argp7) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Attempt to dereference null ArTime", 0);
    return ;
  }
  arg7 = *argp7; 
  arg8 = jarg8 ? true : false; 
  (arg1)->newData(arg2,arg3,arg4,arg5,arg6,arg7,arg8);
}


SWIGEXPORT void SWIGSTDCALL CSharp_ArSensorReading_newData__SWIG_2(void * jarg1, int jarg2, void * jarg3, void * jarg4, void * jarg5, unsigned int jarg6, void * jarg7) {
  ArSensorReading *arg1 = (ArSensorReading *) 0 ;
  int arg2 ;
  ArPose arg3 ;
  ArPose arg4 ;
  ArTransform arg5 ;
  unsigned int arg6 ;
  ArTime arg7 ;
  ArPose *argp3 ;
  ArPose *argp4 ;
  ArTransform *argp5 ;
  ArTime *argp7 ;
  
  arg1 = (ArSensorReading *)jarg1; 
  arg2 = (int)jarg2; 
  argp3 = (ArPose *)jarg3; 
  if (!argp3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Attempt to dereference null ArPose", 0);
    return ;
  }
  arg3 = *argp3; 
  argp4 = (ArPose *)jarg4; 
  if (!argp4) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Attempt to dereference null ArPose", 0);
    return ;
  }
  arg4 = *argp4; 
  argp5 = (ArTransform *)jarg5; 
  if (!argp5) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Attempt to dereference null ArTransform", 0);
    return ;
  }
  arg5 = *argp5; 
  arg6 = (unsigned int)jarg6; 
  argp7 = (ArTime *)jarg7; 
  if (!argp7) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Attempt to dereference null ArTime", 0);
    return ;
  }
  arg7 = *argp7; 
  (arg1)->newData(arg2,arg3,arg4,arg5,arg6,arg7);
}


SWIGEXPORT void SWIGSTDCALL CSharp_ArSensorReading_newData__SWIG_3(void * jarg1, int jarg2, int jarg3, void * jarg4, void * jarg5, void * jarg6, unsigned int jarg7, void * jarg8, unsigned int jarg9, int jarg10) {
  ArSensorReading *arg1 = (ArSensorReading *) 0 ;
  int arg2 ;
  int arg3 ;
  ArPose arg4 ;
  ArPose arg5 ;
  ArTransform arg6 ;
  unsigned int arg7 ;
  ArTime arg8 ;
  bool arg9 ;
  int arg10 ;
  ArPose *argp4 ;
  ArPose *argp5 ;
  ArTransform *argp6 ;
  ArTime *argp8 ;
  
  arg1 = (ArSensorReading *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (int)jarg3; 
  argp4 = (ArPose *)jarg4; 
  if (!argp4) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Attempt to dereference null ArPose", 0);
    return ;
  }
  arg4 = *argp4; 
  argp5 = (ArPose *)jarg5; 
  if (!argp5) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Attempt to dereference null ArPose", 0);
    return ;
  }
  arg5 = *argp5; 
  argp6 = (ArTransform *)jarg6; 
  if (!argp6) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Attempt to dereference null ArTransform", 0);
    return ;
  }
  arg6 = *argp6; 
  arg7 = (unsigned int)jarg7; 
  argp8 = (ArTime *)jarg8; 
  if (!argp8) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Attempt to dereference null ArTime", 0);
    return ;
  }
  arg8 = *argp8; 
  arg9 = jarg9 ? true : false; 
  arg10 = (int)jarg10; 
  (arg1)->newData(arg2,arg3,arg4,arg5,arg6,arg7,arg8,arg9,arg10);
}


SWIGEXPORT void SWIGSTDCALL CSharp_ArSensorReading_newData__SWIG_4(void * jarg1, int jarg2, int jarg3, void * jarg4, void * jarg5, void * jarg6, unsigned int jarg7, void * jarg8, unsigned int jarg9) {
  ArSensorReading *arg1 = (ArSensorReading *) 0 ;
  int arg2 ;
  int arg3 ;
  ArPose arg4 ;
  ArPose arg5 ;
  ArTransform arg6 ;
  unsigned int arg7 ;
  ArTime arg8 ;
  bool arg9 ;
  ArPose *argp4 ;
  ArPose *argp5 ;
  ArTransform *argp6 ;
  ArTime *argp8 ;
  
  arg1 = (ArSensorReading *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (int)jarg3; 
  argp4 = (ArPose *)jarg4; 
  if (!argp4) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Attempt to dereference null ArPose", 0);
    return ;
  }
  arg4 = *argp4; 
  argp5 = (ArPose *)jarg5; 
  if (!argp5) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Attempt to dereference null ArPose", 0);
    return ;
  }
  arg5 = *argp5; 
  argp6 = (ArTransform *)jarg6; 
  if (!argp6) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Attempt to dereference null ArTransform", 0);
    return ;
  }
  arg6 = *argp6; 
  arg7 = (unsigned int)jarg7; 
  argp8 = (ArTime *)jarg8; 
  if (!argp8) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Attempt to dereference null ArTime", 0);
    return ;
  }
  arg8 = *argp8; 
  arg9 = jarg9 ? true : false; 
  (arg1)->newData(arg2,arg3,arg4,arg5,arg6,arg7,arg8,arg9);
}


SWIGEXPORT void SWIGSTDCALL CSharp_ArSensorReading_newData__SWIG_5(void * jarg1, int jarg2, int jarg3, void * jarg4, void * jarg5, void * jarg6, unsigned int jarg7, void * jarg8) {
  ArSensorReading *arg1 = (ArSensorReading *) 0 ;
  int arg2 ;
  int arg3 ;
  ArPose arg4 ;
  ArPose arg5 ;
  ArTransform arg6 ;
  unsigned int arg7 ;
  ArTime arg8 ;
  ArPose *argp4 ;
  ArPose *argp5 ;
  ArTransform *argp6 ;
  ArTime *argp8 ;
  
  arg1 = (ArSensorReading *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (int)jarg3; 
  argp4 = (ArPose *)jarg4; 
  if (!argp4) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Attempt to dereference null ArPose", 0);
    return ;
  }
  arg4 = *argp4; 
  argp5 = (ArPose *)jarg5; 
  if (!argp5) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Attempt to dereference null ArPose", 0);
    return ;
  }
  arg5 = *argp5; 
  argp6 = (ArTransform *)jarg6; 
  if (!argp6) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Attempt to dereference null ArTransform", 0);
    return ;
  }
  arg6 = *argp6; 
  arg7 = (unsigned int)jarg7; 
  argp8 = (ArTime *)jarg8; 
  if (!argp8) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Attempt to dereference null ArTime", 0);
    return ;
  }
  arg8 = *argp8; 
  (arg1)->newData(arg2,arg3,arg4,arg5,arg6,arg7,arg8);
}


SWIGEXPORT void SWIGSTDCALL CSharp_ArSensorReading_resetSensorPosition__SWIG_0(void * jarg1, double jarg2, double jarg3, double jarg4, unsigned int jarg5) {
  ArSensorReading *arg1 = (ArSensorReading *) 0 ;
  double arg2 ;
  double arg3 ;
  double arg4 ;
  bool arg5 ;
  
  arg1 = (ArSensorReading *)jarg1; 
  arg2 = (double)jarg2; 
  arg3 = (double)jarg3; 
  arg4 = (double)jarg4; 
  arg5 = jarg5 ? true : false; 
  (arg1)->resetSensorPosition(arg2,arg3,arg4,arg5);
}


SWIGEXPORT void SWIGSTDCALL CSharp_ArSensorReading_resetSensorPosition__SWIG_1(void * jarg1, double jarg2, double jarg3, double jarg4) {
  ArSensorReading *arg1 = (ArSensorReading *) 0 ;
  double arg2 ;
  double arg3 ;
  double arg4 ;
  
  arg1 = (ArSensorReading *)jarg1; 
  arg2 = (double)jarg2; 
  arg3 = (double)jarg3; 
  arg4 = (double)jarg4; 
  (arg1)->resetSensorPosition(arg2,arg3,arg4);
}


SWIGEXPORT void SWIGSTDCALL CSharp_ArSensorReading_setIgnoreThisReading(void * jarg1, unsigned int jarg2) {
  ArSensorReading *arg1 = (ArSensorReading *) 0 ;
  bool arg2 ;
  
  arg1 = (ArSensorReading *)jarg1; 
  arg2 = jarg2 ? true : false; 
  (arg1)->setIgnoreThisReading(arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_ArSensorReading_setExtraInt(void * jarg1, int jarg2) {
  ArSensorReading *arg1 = (ArSensorReading *) 0 ;
  int arg2 ;
  
  arg1 = (ArSensorReading *)jarg1; 
  arg2 = (int)jarg2; 
  (arg1)->setExtraInt(arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_ArSensorReading_applyTransform(void * jarg1, void * jarg2) {
  ArSensorReading *arg1 = (ArSensorReading *) 0 ;
  ArTransform arg2 ;
  ArTransform *argp2 ;
  
  arg1 = (ArSensorReading *)jarg1; 
  argp2 = (ArTransform *)jarg2; 
  if (!argp2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Attempt to dereference null ArTransform", 0);
    return ;
  }
  arg2 = *argp2; 
  (arg1)->applyTransform(arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_ArSensorReading_applyEncoderTransform(void * jarg1, void * jarg2) {
  ArSensorReading *arg1 = (ArSensorReading *) 0 ;
  ArTransform arg2 ;
  ArTransform *argp2 ;
  
  arg1 = (ArSensorReading *)jarg1; 
  argp2 = (ArTransform *)jarg2; 
  if (!argp2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Attempt to dereference null ArTransform", 0);
    return ;
  }
  arg2 = *argp2; 
  (arg1)->applyEncoderTransform(arg2);
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_ArSensorReading_getAdjusted(void * jarg1) {
  unsigned int jresult ;
  ArSensorReading *arg1 = (ArSensorReading *) 0 ;
  bool result;
  
  arg1 = (ArSensorReading *)jarg1; 
  result = (bool)(arg1)->getAdjusted();
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_ArSensorReading_setAdjusted(void * jarg1, unsigned int jarg2) {
  ArSensorReading *arg1 = (ArSensorReading *) 0 ;
  bool arg2 ;
  
  arg1 = (ArSensorReading *)jarg1; 
  arg2 = jarg2 ? true : false; 
  (arg1)->setAdjusted(arg2);
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_ArSerialConnection__SWIG_0(unsigned int jarg1) {
  void * jresult ;
  bool arg1 ;
  ArSerialConnection *result = 0 ;
  
  arg1 = jarg1 ? true : false; 
  result = (ArSerialConnection *)new ArSerialConnection(arg1);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_ArSerialConnection__SWIG_1() {
  void * jresult ;
  ArSerialConnection *result = 0 ;
  
  result = (ArSerialConnection *)new ArSerialConnection();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_ArSerialConnection(void * jarg1) {
  ArSerialConnection *arg1 = (ArSerialConnection *) 0 ;
  
  arg1 = (ArSerialConnection *)jarg1; 
  delete arg1;
}


SWIGEXPORT int SWIGSTDCALL CSharp_ArSerialConnection_open__SWIG_0(void * jarg1, char * jarg2) {
  int jresult ;
  ArSerialConnection *arg1 = (ArSerialConnection *) 0 ;
  char *arg2 = (char *) 0 ;
  int result;
  
  arg1 = (ArSerialConnection *)jarg1; 
  arg2 = (char *)jarg2; 
  result = (int)(arg1)->open((char const *)arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_ArSerialConnection_open__SWIG_1(void * jarg1) {
  int jresult ;
  ArSerialConnection *arg1 = (ArSerialConnection *) 0 ;
  int result;
  
  arg1 = (ArSerialConnection *)jarg1; 
  result = (int)(arg1)->open();
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_ArSerialConnection_setPort__SWIG_0(void * jarg1, char * jarg2) {
  ArSerialConnection *arg1 = (ArSerialConnection *) 0 ;
  char *arg2 = (char *) 0 ;
  
  arg1 = (ArSerialConnection *)jarg1; 
  arg2 = (char *)jarg2; 
  (arg1)->setPort((char const *)arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_ArSerialConnection_setPort__SWIG_1(void * jarg1) {
  ArSerialConnection *arg1 = (ArSerialConnection *) 0 ;
  
  arg1 = (ArSerialConnection *)jarg1; 
  (arg1)->setPort();
}


SWIGEXPORT char * SWIGSTDCALL CSharp_ArSerialConnection_getPort(void * jarg1) {
  char * jresult ;
  ArSerialConnection *arg1 = (ArSerialConnection *) 0 ;
  char *result = 0 ;
  
  arg1 = (ArSerialConnection *)jarg1; 
  result = (char *)(arg1)->getPort();
  jresult = SWIG_csharp_string_callback((const char *)result); 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_ArSerialConnection_openSimple(void * jarg1) {
  unsigned int jresult ;
  ArSerialConnection *arg1 = (ArSerialConnection *) 0 ;
  bool result;
  
  arg1 = (ArSerialConnection *)jarg1; 
  result = (bool)(arg1)->openSimple();
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_ArSerialConnection_getStatus(void * jarg1) {
  int jresult ;
  ArSerialConnection *arg1 = (ArSerialConnection *) 0 ;
  int result;
  
  arg1 = (ArSerialConnection *)jarg1; 
  result = (int)(arg1)->getStatus();
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_ArSerialConnection_close(void * jarg1) {
  unsigned int jresult ;
  ArSerialConnection *arg1 = (ArSerialConnection *) 0 ;
  bool result;
  
  arg1 = (ArSerialConnection *)jarg1; 
  result = (bool)(arg1)->close();
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_ArSerialConnection_read__SWIG_0(void * jarg1, char * jarg2, unsigned int jarg3, unsigned int jarg4) {
  int jresult ;
  ArSerialConnection *arg1 = (ArSerialConnection *) 0 ;
  char *arg2 = (char *) 0 ;
  unsigned int arg3 ;
  unsigned int arg4 ;
  int result;
  
  arg1 = (ArSerialConnection *)jarg1; 
  arg2 = (char *)jarg2; 
  arg3 = (unsigned int)jarg3; 
  arg4 = (unsigned int)jarg4; 
  result = (int)(arg1)->read((char const *)arg2,arg3,arg4);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_ArSerialConnection_read__SWIG_1(void * jarg1, char * jarg2, unsigned int jarg3) {
  int jresult ;
  ArSerialConnection *arg1 = (ArSerialConnection *) 0 ;
  char *arg2 = (char *) 0 ;
  unsigned int arg3 ;
  int result;
  
  arg1 = (ArSerialConnection *)jarg1; 
  arg2 = (char *)jarg2; 
  arg3 = (unsigned int)jarg3; 
  result = (int)(arg1)->read((char const *)arg2,arg3);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_ArSerialConnection_write(void * jarg1, char * jarg2, unsigned int jarg3) {
  int jresult ;
  ArSerialConnection *arg1 = (ArSerialConnection *) 0 ;
  char *arg2 = (char *) 0 ;
  unsigned int arg3 ;
  int result;
  
  arg1 = (ArSerialConnection *)jarg1; 
  arg2 = (char *)jarg2; 
  arg3 = (unsigned int)jarg3; 
  result = (int)(arg1)->write((char const *)arg2,arg3);
  jresult = result; 
  return jresult;
}


SWIGEXPORT char * SWIGSTDCALL CSharp_ArSerialConnection_getOpenMessage(void * jarg1, int jarg2) {
  char * jresult ;
  ArSerialConnection *arg1 = (ArSerialConnection *) 0 ;
  int arg2 ;
  char *result = 0 ;
  
  arg1 = (ArSerialConnection *)jarg1; 
  arg2 = (int)jarg2; 
  result = (char *)(arg1)->getOpenMessage(arg2);
  jresult = SWIG_csharp_string_callback((const char *)result); 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_ArSerialConnection_setBaud(void * jarg1, int jarg2) {
  unsigned int jresult ;
  ArSerialConnection *arg1 = (ArSerialConnection *) 0 ;
  int arg2 ;
  bool result;
  
  arg1 = (ArSerialConnection *)jarg1; 
  arg2 = (int)jarg2; 
  result = (bool)(arg1)->setBaud(arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_ArSerialConnection_getBaud(void * jarg1) {
  int jresult ;
  ArSerialConnection *arg1 = (ArSerialConnection *) 0 ;
  int result;
  
  arg1 = (ArSerialConnection *)jarg1; 
  result = (int)(arg1)->getBaud();
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_ArSerialConnection_setHardwareControl(void * jarg1, unsigned int jarg2) {
  unsigned int jresult ;
  ArSerialConnection *arg1 = (ArSerialConnection *) 0 ;
  bool arg2 ;
  bool result;
  
  arg1 = (ArSerialConnection *)jarg1; 
  arg2 = jarg2 ? true : false; 
  result = (bool)(arg1)->setHardwareControl(arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_ArSerialConnection_getHardwareControl(void * jarg1) {
  unsigned int jresult ;
  ArSerialConnection *arg1 = (ArSerialConnection *) 0 ;
  bool result;
  
  arg1 = (ArSerialConnection *)jarg1; 
  result = (bool)(arg1)->getHardwareControl();
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_ArSerialConnection_getCTS(void * jarg1) {
  unsigned int jresult ;
  ArSerialConnection *arg1 = (ArSerialConnection *) 0 ;
  bool result;
  
  arg1 = (ArSerialConnection *)jarg1; 
  result = (bool)(arg1)->getCTS();
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_ArSerialConnection_getDSR(void * jarg1) {
  unsigned int jresult ;
  ArSerialConnection *arg1 = (ArSerialConnection *) 0 ;
  bool result;
  
  arg1 = (ArSerialConnection *)jarg1; 
  result = (bool)(arg1)->getDSR();
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_ArSerialConnection_getDCD(void * jarg1) {
  unsigned int jresult ;
  ArSerialConnection *arg1 = (ArSerialConnection *) 0 ;
  bool result;
  
  arg1 = (ArSerialConnection *)jarg1; 
  result = (bool)(arg1)->getDCD();
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_ArSerialConnection_getRing(void * jarg1) {
  unsigned int jresult ;
  ArSerialConnection *arg1 = (ArSerialConnection *) 0 ;
  bool result;
  
  arg1 = (ArSerialConnection *)jarg1; 
  result = (bool)(arg1)->getRing();
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_ArSerialConnection_internalOpen(void * jarg1) {
  int jresult ;
  ArSerialConnection *arg1 = (ArSerialConnection *) 0 ;
  int result;
  
  arg1 = (ArSerialConnection *)jarg1; 
  result = (int)(arg1)->internalOpen();
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_ArSerialConnection_getTimeRead(void * jarg1, int jarg2) {
  void * jresult ;
  ArSerialConnection *arg1 = (ArSerialConnection *) 0 ;
  int arg2 ;
  ArTime result;
  
  arg1 = (ArSerialConnection *)jarg1; 
  arg2 = (int)jarg2; 
  result = (arg1)->getTimeRead(arg2);
  jresult = new ArTime((const ArTime &)result); 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_ArSerialConnection_isTimeStamping(void * jarg1) {
  unsigned int jresult ;
  ArSerialConnection *arg1 = (ArSerialConnection *) 0 ;
  bool result;
  
  arg1 = (ArSerialConnection *)jarg1; 
  result = (bool)(arg1)->isTimeStamping();
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_ArSignalHandler_createHandlerNonThreaded() {
  ArSignalHandler::createHandlerNonThreaded();
}


SWIGEXPORT void SWIGSTDCALL CSharp_ArSignalHandler_createHandlerThreaded() {
  ArSignalHandler::createHandlerThreaded();
}


SWIGEXPORT void SWIGSTDCALL CSharp_ArSignalHandler_blockCommon() {
  ArSignalHandler::blockCommon();
}


SWIGEXPORT void SWIGSTDCALL CSharp_ArSignalHandler_unblockAll() {
  ArSignalHandler::unblockAll();
}


SWIGEXPORT void SWIGSTDCALL CSharp_ArSignalHandler_block(int jarg1) {
  ArSignalHandler::Signal arg1 ;
  
  arg1 = (ArSignalHandler::Signal)jarg1; 
  ArSignalHandler::block(arg1);
}


SWIGEXPORT void SWIGSTDCALL CSharp_ArSignalHandler_unblock(int jarg1) {
  ArSignalHandler::Signal arg1 ;
  
  arg1 = (ArSignalHandler::Signal)jarg1; 
  ArSignalHandler::unblock(arg1);
}


SWIGEXPORT void SWIGSTDCALL CSharp_ArSignalHandler_handle(int jarg1) {
  ArSignalHandler::Signal arg1 ;
  
  arg1 = (ArSignalHandler::Signal)jarg1; 
  ArSignalHandler::handle(arg1);
}


SWIGEXPORT void SWIGSTDCALL CSharp_ArSignalHandler_unhandle(int jarg1) {
  ArSignalHandler::Signal arg1 ;
  
  arg1 = (ArSignalHandler::Signal)jarg1; 
  ArSignalHandler::unhandle(arg1);
}


SWIGEXPORT void SWIGSTDCALL CSharp_ArSignalHandler_addHandlerCB(void * jarg1, int jarg2) {
  ArFunctor1< int > *arg1 = (ArFunctor1< int > *) 0 ;
  ArListPos::Pos arg2 ;
  
  arg1 = (ArFunctor1< int > *)jarg1; 
  arg2 = (ArListPos::Pos)jarg2; 
  ArSignalHandler::addHandlerCB(arg1,arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_ArSignalHandler_delHandlerCB(void * jarg1) {
  ArFunctor1< int > *arg1 = (ArFunctor1< int > *) 0 ;
  
  arg1 = (ArFunctor1< int > *)jarg1; 
  ArSignalHandler::delHandlerCB(arg1);
}


SWIGEXPORT void SWIGSTDCALL CSharp_ArSignalHandler_delAllHandlerCBs() {
  ArSignalHandler::delAllHandlerCBs();
}


SWIGEXPORT void * SWIGSTDCALL CSharp_ArSignalHandler_getHandler() {
  void * jresult ;
  ArSignalHandler *result = 0 ;
  
  result = (ArSignalHandler *)ArSignalHandler::getHandler();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT char * SWIGSTDCALL CSharp_ArSignalHandler_nameSignal(int jarg1) {
  char * jresult ;
  int arg1 ;
  char *result = 0 ;
  
  arg1 = (int)jarg1; 
  result = (char *)ArSignalHandler::nameSignal(arg1);
  jresult = SWIG_csharp_string_callback((const char *)result); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_ArSignalHandler_blockCommonThisThread() {
  ArSignalHandler::blockCommonThisThread();
}


SWIGEXPORT void SWIGSTDCALL CSharp_ArSignalHandler_blockAllThisThread() {
  ArSignalHandler::blockAllThisThread();
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_ArSignalHandler(void * jarg1) {
  ArSignalHandler *arg1 = (ArSignalHandler *) 0 ;
  
  arg1 = (ArSignalHandler *)jarg1; 
  delete arg1;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_ArSignalHandler_runThread(void * jarg1, void * jarg2) {
  void * jresult ;
  ArSignalHandler *arg1 = (ArSignalHandler *) 0 ;
  void *arg2 = (void *) 0 ;
  void *result = 0 ;
  
  arg1 = (ArSignalHandler *)jarg1; 
  arg2 = (void *)jarg2; 
  result = (void *)(arg1)->runThread(arg2);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_ArSignalHandler_signalCB(int jarg1) {
  int arg1 ;
  
  arg1 = (int)jarg1; 
  ArSignalHandler::signalCB(arg1);
}


SWIGEXPORT void SWIGSTDCALL CSharp_ArSignalHandler_logThread() {
  ArSignalHandler::logThread();
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_ArSimpleConnector__SWIG_0(void * jarg1, void * jarg2) {
  void * jresult ;
  int *arg1 = (int *) 0 ;
  char **arg2 = (char **) 0 ;
  ArSimpleConnector *result = 0 ;
  
  arg1 = (int *)jarg1; 
  arg2 = (char **)jarg2; 
  result = (ArSimpleConnector *)new ArSimpleConnector(arg1,arg2);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_ArSimpleConnector__SWIG_1(void * jarg1) {
  void * jresult ;
  ArArgumentBuilder *arg1 = (ArArgumentBuilder *) 0 ;
  ArSimpleConnector *result = 0 ;
  
  arg1 = (ArArgumentBuilder *)jarg1; 
  result = (ArSimpleConnector *)new ArSimpleConnector(arg1);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_ArSimpleConnector__SWIG_2(void * jarg1) {
  void * jresult ;
  ArArgumentParser *arg1 = (ArArgumentParser *) 0 ;
  ArSimpleConnector *result = 0 ;
  
  arg1 = (ArArgumentParser *)jarg1; 
  result = (ArSimpleConnector *)new ArSimpleConnector(arg1);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_ArSimpleConnector(void * jarg1) {
  ArSimpleConnector *arg1 = (ArSimpleConnector *) 0 ;
  
  arg1 = (ArSimpleConnector *)jarg1; 
  delete arg1;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_ArSimpleConnector_setupRobot(void * jarg1, void * jarg2) {
  unsigned int jresult ;
  ArSimpleConnector *arg1 = (ArSimpleConnector *) 0 ;
  ArRobot *arg2 = (ArRobot *) 0 ;
  bool result;
  
  arg1 = (ArSimpleConnector *)jarg1; 
  arg2 = (ArRobot *)jarg2; 
  result = (bool)(arg1)->setupRobot(arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_ArSimpleConnector_connectRobot(void * jarg1, void * jarg2) {
  unsigned int jresult ;
  ArSimpleConnector *arg1 = (ArSimpleConnector *) 0 ;
  ArRobot *arg2 = (ArRobot *) 0 ;
  bool result;
  
  arg1 = (ArSimpleConnector *)jarg1; 
  arg2 = (ArRobot *)jarg2; 
  result = (bool)(arg1)->connectRobot(arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_ArSimpleConnector_setupLaser(void * jarg1, void * jarg2) {
  unsigned int jresult ;
  ArSimpleConnector *arg1 = (ArSimpleConnector *) 0 ;
  ArSick *arg2 = (ArSick *) 0 ;
  bool result;
  
  arg1 = (ArSimpleConnector *)jarg1; 
  arg2 = (ArSick *)jarg2; 
  result = (bool)(arg1)->setupLaser(arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_ArSimpleConnector_setupSecondLaser(void * jarg1, void * jarg2) {
  unsigned int jresult ;
  ArSimpleConnector *arg1 = (ArSimpleConnector *) 0 ;
  ArSick *arg2 = (ArSick *) 0 ;
  bool result;
  
  arg1 = (ArSimpleConnector *)jarg1; 
  arg2 = (ArSick *)jarg2; 
  result = (bool)(arg1)->setupSecondLaser(arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_ArSimpleConnector_setupLaserArbitrary(void * jarg1, void * jarg2, int jarg3) {
  unsigned int jresult ;
  ArSimpleConnector *arg1 = (ArSimpleConnector *) 0 ;
  ArSick *arg2 = (ArSick *) 0 ;
  int arg3 ;
  bool result;
  
  arg1 = (ArSimpleConnector *)jarg1; 
  arg2 = (ArSick *)jarg2; 
  arg3 = (int)jarg3; 
  result = (bool)(arg1)->setupLaserArbitrary(arg2,arg3);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_ArSimpleConnector_connectLaser(void * jarg1, void * jarg2) {
  unsigned int jresult ;
  ArSimpleConnector *arg1 = (ArSimpleConnector *) 0 ;
  ArSick *arg2 = (ArSick *) 0 ;
  bool result;
  
  arg1 = (ArSimpleConnector *)jarg1; 
  arg2 = (ArSick *)jarg2; 
  result = (bool)(arg1)->connectLaser(arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_ArSimpleConnector_connectSecondLaser(void * jarg1, void * jarg2) {
  unsigned int jresult ;
  ArSimpleConnector *arg1 = (ArSimpleConnector *) 0 ;
  ArSick *arg2 = (ArSick *) 0 ;
  bool result;
  
  arg1 = (ArSimpleConnector *)jarg1; 
  arg2 = (ArSick *)jarg2; 
  result = (bool)(arg1)->connectSecondLaser(arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_ArSimpleConnector_connectLaserArbitrary(void * jarg1, void * jarg2, int jarg3) {
  unsigned int jresult ;
  ArSimpleConnector *arg1 = (ArSimpleConnector *) 0 ;
  ArSick *arg2 = (ArSick *) 0 ;
  int arg3 ;
  bool result;
  
  arg1 = (ArSimpleConnector *)jarg1; 
  arg2 = (ArSick *)jarg2; 
  arg3 = (int)jarg3; 
  result = (bool)(arg1)->connectLaserArbitrary(arg2,arg3);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_ArSimpleConnector_parseArgs__SWIG_0(void * jarg1) {
  unsigned int jresult ;
  ArSimpleConnector *arg1 = (ArSimpleConnector *) 0 ;
  bool result;
  
  arg1 = (ArSimpleConnector *)jarg1; 
  result = (bool)(arg1)->parseArgs();
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_ArSimpleConnector_parseArgs__SWIG_1(void * jarg1, void * jarg2) {
  unsigned int jresult ;
  ArSimpleConnector *arg1 = (ArSimpleConnector *) 0 ;
  ArArgumentParser *arg2 = (ArArgumentParser *) 0 ;
  bool result;
  
  arg1 = (ArSimpleConnector *)jarg1; 
  arg2 = (ArArgumentParser *)jarg2; 
  result = (bool)(arg1)->parseArgs(arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_ArSimpleConnector_logOptions(void * jarg1) {
  ArSimpleConnector *arg1 = (ArSimpleConnector *) 0 ;
  
  arg1 = (ArSimpleConnector *)jarg1; 
  ((ArSimpleConnector const *)arg1)->logOptions();
}


SWIGEXPORT void SWIGSTDCALL CSharp_ArSimpleConnector_setMaxNumLasers__SWIG_0(void * jarg1, int jarg2) {
  ArSimpleConnector *arg1 = (ArSimpleConnector *) 0 ;
  int arg2 ;
  
  arg1 = (ArSimpleConnector *)jarg1; 
  arg2 = (int)jarg2; 
  (arg1)->setMaxNumLasers(arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_ArSimpleConnector_setMaxNumLasers__SWIG_1(void * jarg1) {
  ArSimpleConnector *arg1 = (ArSimpleConnector *) 0 ;
  
  arg1 = (ArSimpleConnector *)jarg1; 
  (arg1)->setMaxNumLasers();
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_ArSimulatedLaser(void * jarg1) {
  void * jresult ;
  ArLaser *arg1 = (ArLaser *) 0 ;
  ArSimulatedLaser *result = 0 ;
  
  arg1 = (ArLaser *)jarg1; 
  result = (ArSimulatedLaser *)new ArSimulatedLaser(arg1);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_ArSimulatedLaser(void * jarg1) {
  ArSimulatedLaser *arg1 = (ArSimulatedLaser *) 0 ;
  
  arg1 = (ArSimulatedLaser *)jarg1; 
  delete arg1;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_ArSimulatedLaser_blockingConnect(void * jarg1) {
  unsigned int jresult ;
  ArSimulatedLaser *arg1 = (ArSimulatedLaser *) 0 ;
  bool result;
  
  arg1 = (ArSimulatedLaser *)jarg1; 
  result = (bool)(arg1)->blockingConnect();
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_ArSimulatedLaser_asyncConnect(void * jarg1) {
  unsigned int jresult ;
  ArSimulatedLaser *arg1 = (ArSimulatedLaser *) 0 ;
  bool result;
  
  arg1 = (ArSimulatedLaser *)jarg1; 
  result = (bool)(arg1)->asyncConnect();
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_ArSimulatedLaser_disconnect(void * jarg1) {
  unsigned int jresult ;
  ArSimulatedLaser *arg1 = (ArSimulatedLaser *) 0 ;
  bool result;
  
  arg1 = (ArSimulatedLaser *)jarg1; 
  result = (bool)(arg1)->disconnect();
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_ArSimulatedLaser_isConnected(void * jarg1) {
  unsigned int jresult ;
  ArSimulatedLaser *arg1 = (ArSimulatedLaser *) 0 ;
  bool result;
  
  arg1 = (ArSimulatedLaser *)jarg1; 
  result = (bool)(arg1)->isConnected();
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_ArSimulatedLaser_isTryingToConnect(void * jarg1) {
  unsigned int jresult ;
  ArSimulatedLaser *arg1 = (ArSimulatedLaser *) 0 ;
  bool result;
  
  arg1 = (ArSimulatedLaser *)jarg1; 
  result = (bool)(arg1)->isTryingToConnect();
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_ArSocket__SWIG_0() {
  void * jresult ;
  ArSocket *result = 0 ;
  
  result = (ArSocket *)new ArSocket();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_ArSocket__SWIG_1(char * jarg1, int jarg2, int jarg3) {
  void * jresult ;
  char *arg1 = (char *) 0 ;
  int arg2 ;
  ArSocket::Type arg3 ;
  ArSocket *result = 0 ;
  
  arg1 = (char *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (ArSocket::Type)jarg3; 
  result = (ArSocket *)new ArSocket((char const *)arg1,arg2,arg3);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_ArSocket__SWIG_2(int jarg1, unsigned int jarg2, int jarg3) {
  void * jresult ;
  int arg1 ;
  bool arg2 ;
  ArSocket::Type arg3 ;
  ArSocket *result = 0 ;
  
  arg1 = (int)jarg1; 
  arg2 = jarg2 ? true : false; 
  arg3 = (ArSocket::Type)jarg3; 
  result = (ArSocket *)new ArSocket(arg1,arg2,arg3);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_ArSocket(void * jarg1) {
  ArSocket *arg1 = (ArSocket *) 0 ;
  
  arg1 = (ArSocket *)jarg1; 
  delete arg1;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_ArSocket_init() {
  unsigned int jresult ;
  bool result;
  
  result = (bool)ArSocket::init();
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_ArSocket_shutdown() {
  ArSocket::shutdown();
}


SWIGEXPORT char * SWIGSTDCALL CSharp_ArSocket_toString(int jarg1) {
  char * jresult ;
  ArSocket::Type arg1 ;
  char *result = 0 ;
  
  arg1 = (ArSocket::Type)jarg1; 
  result = (char *)ArSocket::toString(arg1);
  jresult = SWIG_csharp_string_callback((const char *)result); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_ArSocket_ourInitialized_set(unsigned int jarg1) {
  bool arg1 ;
  
  arg1 = jarg1 ? true : false; 
  ArSocket::ourInitialized = arg1;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_ArSocket_ourInitialized_get() {
  unsigned int jresult ;
  bool result;
  
  result = (bool)ArSocket::ourInitialized;
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_ArSocket_copy__SWIG_0(void * jarg1, int jarg2, unsigned int jarg3) {
  unsigned int jresult ;
  ArSocket *arg1 = (ArSocket *) 0 ;
  int arg2 ;
  bool arg3 ;
  bool result;
  
  arg1 = (ArSocket *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = jarg3 ? true : false; 
  result = (bool)(arg1)->copy(arg2,arg3);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_ArSocket_copy__SWIG_1(void * jarg1, void * jarg2) {
  ArSocket *arg1 = (ArSocket *) 0 ;
  ArSocket *arg2 = (ArSocket *) 0 ;
  
  arg1 = (ArSocket *)jarg1; 
  arg2 = (ArSocket *)jarg2; 
  (arg1)->copy(arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_ArSocket_transfer(void * jarg1, void * jarg2) {
  ArSocket *arg1 = (ArSocket *) 0 ;
  ArSocket *arg2 = (ArSocket *) 0 ;
  
  arg1 = (ArSocket *)jarg1; 
  arg2 = (ArSocket *)jarg2; 
  (arg1)->transfer(arg2);
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_ArSocket_connect__SWIG_0(void * jarg1, char * jarg2, int jarg3, int jarg4, char * jarg5) {
  unsigned int jresult ;
  ArSocket *arg1 = (ArSocket *) 0 ;
  char *arg2 = (char *) 0 ;
  int arg3 ;
  ArSocket::Type arg4 ;
  char *arg5 = (char *) 0 ;
  bool result;
  
  arg1 = (ArSocket *)jarg1; 
  arg2 = (char *)jarg2; 
  arg3 = (int)jarg3; 
  arg4 = (ArSocket::Type)jarg4; 
  arg5 = (char *)jarg5; 
  result = (bool)(arg1)->connect((char const *)arg2,arg3,arg4,(char const *)arg5);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_ArSocket_connect__SWIG_1(void * jarg1, char * jarg2, int jarg3, int jarg4) {
  unsigned int jresult ;
  ArSocket *arg1 = (ArSocket *) 0 ;
  char *arg2 = (char *) 0 ;
  int arg3 ;
  ArSocket::Type arg4 ;
  bool result;
  
  arg1 = (ArSocket *)jarg1; 
  arg2 = (char *)jarg2; 
  arg3 = (int)jarg3; 
  arg4 = (ArSocket::Type)jarg4; 
  result = (bool)(arg1)->connect((char const *)arg2,arg3,arg4);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_ArSocket_connect__SWIG_2(void * jarg1, char * jarg2, int jarg3) {
  unsigned int jresult ;
  ArSocket *arg1 = (ArSocket *) 0 ;
  char *arg2 = (char *) 0 ;
  int arg3 ;
  bool result;
  
  arg1 = (ArSocket *)jarg1; 
  arg2 = (char *)jarg2; 
  arg3 = (int)jarg3; 
  result = (bool)(arg1)->connect((char const *)arg2,arg3);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_ArSocket_open__SWIG_0(void * jarg1, int jarg2, int jarg3, char * jarg4) {
  unsigned int jresult ;
  ArSocket *arg1 = (ArSocket *) 0 ;
  int arg2 ;
  ArSocket::Type arg3 ;
  char *arg4 = (char *) 0 ;
  bool result;
  
  arg1 = (ArSocket *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (ArSocket::Type)jarg3; 
  arg4 = (char *)jarg4; 
  result = (bool)(arg1)->open(arg2,arg3,(char const *)arg4);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_ArSocket_open__SWIG_1(void * jarg1, int jarg2, int jarg3) {
  unsigned int jresult ;
  ArSocket *arg1 = (ArSocket *) 0 ;
  int arg2 ;
  ArSocket::Type arg3 ;
  bool result;
  
  arg1 = (ArSocket *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (ArSocket::Type)jarg3; 
  result = (bool)(arg1)->open(arg2,arg3);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_ArSocket_create(void * jarg1, int jarg2) {
  unsigned int jresult ;
  ArSocket *arg1 = (ArSocket *) 0 ;
  ArSocket::Type arg2 ;
  bool result;
  
  arg1 = (ArSocket *)jarg1; 
  arg2 = (ArSocket::Type)jarg2; 
  result = (bool)(arg1)->create(arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_ArSocket_findValidPort__SWIG_0(void * jarg1, int jarg2, char * jarg3) {
  unsigned int jresult ;
  ArSocket *arg1 = (ArSocket *) 0 ;
  int arg2 ;
  char *arg3 = (char *) 0 ;
  bool result;
  
  arg1 = (ArSocket *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (char *)jarg3; 
  result = (bool)(arg1)->findValidPort(arg2,(char const *)arg3);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_ArSocket_findValidPort__SWIG_1(void * jarg1, int jarg2) {
  unsigned int jresult ;
  ArSocket *arg1 = (ArSocket *) 0 ;
  int arg2 ;
  bool result;
  
  arg1 = (ArSocket *)jarg1; 
  arg2 = (int)jarg2; 
  result = (bool)(arg1)->findValidPort(arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_ArSocket_connectTo__SWIG_0(void * jarg1, char * jarg2, int jarg3) {
  unsigned int jresult ;
  ArSocket *arg1 = (ArSocket *) 0 ;
  char *arg2 = (char *) 0 ;
  int arg3 ;
  bool result;
  
  arg1 = (ArSocket *)jarg1; 
  arg2 = (char *)jarg2; 
  arg3 = (int)jarg3; 
  result = (bool)(arg1)->connectTo((char const *)arg2,arg3);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_ArSocket_connectTo__SWIG_1(void * jarg1, void * jarg2) {
  unsigned int jresult ;
  ArSocket *arg1 = (ArSocket *) 0 ;
  sockaddr_in *arg2 = (sockaddr_in *) 0 ;
  bool result;
  
  arg1 = (ArSocket *)jarg1; 
  arg2 = (sockaddr_in *)jarg2; 
  result = (bool)(arg1)->connectTo(arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_ArSocket_accept(void * jarg1, void * jarg2) {
  unsigned int jresult ;
  ArSocket *arg1 = (ArSocket *) 0 ;
  ArSocket *arg2 = (ArSocket *) 0 ;
  bool result;
  
  arg1 = (ArSocket *)jarg1; 
  arg2 = (ArSocket *)jarg2; 
  result = (bool)(arg1)->accept(arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_ArSocket_close(void * jarg1) {
  unsigned int jresult ;
  ArSocket *arg1 = (ArSocket *) 0 ;
  bool result;
  
  arg1 = (ArSocket *)jarg1; 
  result = (bool)(arg1)->close();
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_ArSocket_write__SWIG_0(void * jarg1, void * jarg2, unsigned long jarg3) {
  int jresult ;
  ArSocket *arg1 = (ArSocket *) 0 ;
  void *arg2 = (void *) 0 ;
  size_t arg3 ;
  int result;
  
  arg1 = (ArSocket *)jarg1; 
  arg2 = (void *)jarg2; 
  arg3 = (size_t)jarg3; 
  result = (int)(arg1)->write((void const *)arg2,arg3);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_ArSocket_read__SWIG_0(void * jarg1, void * jarg2, unsigned long jarg3, unsigned int jarg4) {
  int jresult ;
  ArSocket *arg1 = (ArSocket *) 0 ;
  void *arg2 = (void *) 0 ;
  size_t arg3 ;
  unsigned int arg4 ;
  int result;
  
  arg1 = (ArSocket *)jarg1; 
  arg2 = (void *)jarg2; 
  arg3 = (size_t)jarg3; 
  arg4 = (unsigned int)jarg4; 
  result = (int)(arg1)->read(arg2,arg3,arg4);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_ArSocket_read__SWIG_1(void * jarg1, void * jarg2, unsigned long jarg3) {
  int jresult ;
  ArSocket *arg1 = (ArSocket *) 0 ;
  void *arg2 = (void *) 0 ;
  size_t arg3 ;
  int result;
  
  arg1 = (ArSocket *)jarg1; 
  arg2 = (void *)jarg2; 
  arg3 = (size_t)jarg3; 
  result = (int)(arg1)->read(arg2,arg3);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_ArSocket_sendTo__SWIG_0(void * jarg1, void * jarg2, int jarg3) {
  int jresult ;
  ArSocket *arg1 = (ArSocket *) 0 ;
  void *arg2 = (void *) 0 ;
  int arg3 ;
  int result;
  
  arg1 = (ArSocket *)jarg1; 
  arg2 = (void *)jarg2; 
  arg3 = (int)jarg3; 
  result = (int)(arg1)->sendTo((void const *)arg2,arg3);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_ArSocket_sendTo__SWIG_1(void * jarg1, void * jarg2, int jarg3, void * jarg4) {
  int jresult ;
  ArSocket *arg1 = (ArSocket *) 0 ;
  void *arg2 = (void *) 0 ;
  int arg3 ;
  sockaddr_in *arg4 = (sockaddr_in *) 0 ;
  int result;
  
  arg1 = (ArSocket *)jarg1; 
  arg2 = (void *)jarg2; 
  arg3 = (int)jarg3; 
  arg4 = (sockaddr_in *)jarg4; 
  result = (int)(arg1)->sendTo((void const *)arg2,arg3,arg4);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_ArSocket_recvFrom(void * jarg1, void * jarg2, int jarg3, void * jarg4) {
  int jresult ;
  ArSocket *arg1 = (ArSocket *) 0 ;
  void *arg2 = (void *) 0 ;
  int arg3 ;
  sockaddr_in *arg4 = (sockaddr_in *) 0 ;
  int result;
  
  arg1 = (ArSocket *)jarg1; 
  arg2 = (void *)jarg2; 
  arg3 = (int)jarg3; 
  arg4 = (sockaddr_in *)jarg4; 
  result = (int)(arg1)->recvFrom(arg2,arg3,arg4);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_ArSocket_hostAddr(char * jarg1, void * jarg2) {
  unsigned int jresult ;
  char *arg1 = (char *) 0 ;
  in_addr *arg2 = 0 ;
  bool result;
  
  arg1 = (char *)jarg1; 
  arg2 = (in_addr *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "in_addr & type is null", 0);
    return 0;
  } 
  result = (bool)ArSocket::hostAddr((char const *)arg1,*arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_ArSocket_addrHost(void * jarg1, char * jarg2) {
  unsigned int jresult ;
  in_addr *arg1 = 0 ;
  char *arg2 = (char *) 0 ;
  bool result;
  
  arg1 = (in_addr *)jarg1;
  if (!arg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "in_addr & type is null", 0);
    return 0;
  } 
  arg2 = (char *)jarg2; 
  result = (bool)ArSocket::addrHost(*arg1,arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT char * SWIGSTDCALL CSharp_ArSocket_getHostName() {
  char * jresult ;
  std::string result;
  
  result = ArSocket::getHostName();
  jresult = SWIG_csharp_string_callback((&result)->c_str()); 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_ArSocket_getSockName(void * jarg1) {
  unsigned int jresult ;
  ArSocket *arg1 = (ArSocket *) 0 ;
  bool result;
  
  arg1 = (ArSocket *)jarg1; 
  result = (bool)(arg1)->getSockName();
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_ArSocket_sockAddrIn(void * jarg1) {
  void * jresult ;
  ArSocket *arg1 = (ArSocket *) 0 ;
  sockaddr_in *result = 0 ;
  
  arg1 = (ArSocket *)jarg1; 
  result = (sockaddr_in *)(arg1)->sockAddrIn();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_ArSocket_inAddr(void * jarg1) {
  void * jresult ;
  ArSocket *arg1 = (ArSocket *) 0 ;
  in_addr *result = 0 ;
  
  arg1 = (ArSocket *)jarg1; 
  result = (in_addr *)(arg1)->inAddr();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT unsigned short SWIGSTDCALL CSharp_ArSocket_inPort(void * jarg1) {
  unsigned short jresult ;
  ArSocket *arg1 = (ArSocket *) 0 ;
  unsigned short result;
  
  arg1 = (ArSocket *)jarg1; 
  result = (unsigned short)(arg1)->inPort();
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_ArSocket_inToA(void * jarg1, char * jarg2) {
  in_addr *arg1 = (in_addr *) 0 ;
  char *arg2 = (char *) 0 ;
  
  arg1 = (in_addr *)jarg1; 
  arg2 = (char *)jarg2; 
  ArSocket::inToA(arg1,arg2);
}


SWIGEXPORT unsigned long SWIGSTDCALL CSharp_ArSocket_sockAddrLen() {
  unsigned long jresult ;
  size_t result;
  
  result = ArSocket::sockAddrLen();
  jresult = (unsigned long)result; 
  return jresult;
}


SWIGEXPORT unsigned long SWIGSTDCALL CSharp_ArSocket_maxHostNameLen() {
  unsigned long jresult ;
  size_t result;
  
  result = ArSocket::maxHostNameLen();
  jresult = (unsigned long)result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_ArSocket_hostToNetOrder(int jarg1) {
  unsigned int jresult ;
  int arg1 ;
  unsigned int result;
  
  arg1 = (int)jarg1; 
  result = (unsigned int)ArSocket::hostToNetOrder(arg1);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_ArSocket_netToHostOrder(int jarg1) {
  unsigned int jresult ;
  int arg1 ;
  unsigned int result;
  
  arg1 = (int)jarg1; 
  result = (unsigned int)ArSocket::netToHostOrder(arg1);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_ArSocket_setLinger(void * jarg1, int jarg2) {
  unsigned int jresult ;
  ArSocket *arg1 = (ArSocket *) 0 ;
  int arg2 ;
  bool result;
  
  arg1 = (ArSocket *)jarg1; 
  arg2 = (int)jarg2; 
  result = (bool)(arg1)->setLinger(arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_ArSocket_setBroadcast(void * jarg1) {
  unsigned int jresult ;
  ArSocket *arg1 = (ArSocket *) 0 ;
  bool result;
  
  arg1 = (ArSocket *)jarg1; 
  result = (bool)(arg1)->setBroadcast();
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_ArSocket_setReuseAddress(void * jarg1) {
  unsigned int jresult ;
  ArSocket *arg1 = (ArSocket *) 0 ;
  bool result;
  
  arg1 = (ArSocket *)jarg1; 
  result = (bool)(arg1)->setReuseAddress();
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_ArSocket_setNonBlock(void * jarg1) {
  unsigned int jresult ;
  ArSocket *arg1 = (ArSocket *) 0 ;
  bool result;
  
  arg1 = (ArSocket *)jarg1; 
  result = (bool)(arg1)->setNonBlock();
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_ArSocket_setDoClose(void * jarg1, unsigned int jarg2) {
  ArSocket *arg1 = (ArSocket *) 0 ;
  bool arg2 ;
  
  arg1 = (ArSocket *)jarg1; 
  arg2 = jarg2 ? true : false; 
  (arg1)->setDoClose(arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_ArSocket_setFakeWrites(void * jarg1, unsigned int jarg2) {
  ArSocket *arg1 = (ArSocket *) 0 ;
  bool arg2 ;
  
  arg1 = (ArSocket *)jarg1; 
  arg2 = jarg2 ? true : false; 
  (arg1)->setFakeWrites(arg2);
}


SWIGEXPORT int SWIGSTDCALL CSharp_ArSocket_getFD(void * jarg1) {
  int jresult ;
  ArSocket *arg1 = (ArSocket *) 0 ;
  int result;
  
  arg1 = (ArSocket *)jarg1; 
  result = (int)((ArSocket const *)arg1)->getFD();
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_ArSocket_getType(void * jarg1) {
  int jresult ;
  ArSocket *arg1 = (ArSocket *) 0 ;
  ArSocket::Type result;
  
  arg1 = (ArSocket *)jarg1; 
  result = (ArSocket::Type)((ArSocket const *)arg1)->getType();
  jresult = (int)result; 
  return jresult;
}


SWIGEXPORT char * SWIGSTDCALL CSharp_ArSocket_getErrorStr(void * jarg1) {
  char * jresult ;
  ArSocket *arg1 = (ArSocket *) 0 ;
  std::string *result = 0 ;
  
  arg1 = (ArSocket *)jarg1; 
  result = (std::string *) &((ArSocket const *)arg1)->getErrorStr();
  jresult = SWIG_csharp_string_callback(result->c_str()); 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_ArSocket_getError(void * jarg1) {
  int jresult ;
  ArSocket *arg1 = (ArSocket *) 0 ;
  ArSocket::Error result;
  
  arg1 = (ArSocket *)jarg1; 
  result = (ArSocket::Error)((ArSocket const *)arg1)->getError();
  jresult = (int)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_ArSocket_setErrorTracking(void * jarg1, unsigned int jarg2) {
  ArSocket *arg1 = (ArSocket *) 0 ;
  bool arg2 ;
  
  arg1 = (ArSocket *)jarg1; 
  arg2 = jarg2 ? true : false; 
  (arg1)->setErrorTracking(arg2);
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_ArSocket_getErrorTracking(void * jarg1) {
  unsigned int jresult ;
  ArSocket *arg1 = (ArSocket *) 0 ;
  bool result;
  
  arg1 = (ArSocket *)jarg1; 
  result = (bool)(arg1)->getErrorTracking();
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_ArSocket_getBadWrite(void * jarg1) {
  unsigned int jresult ;
  ArSocket *arg1 = (ArSocket *) 0 ;
  bool result;
  
  arg1 = (ArSocket *)jarg1; 
  result = (bool)((ArSocket const *)arg1)->getBadWrite();
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_ArSocket_getBadRead(void * jarg1) {
  unsigned int jresult ;
  ArSocket *arg1 = (ArSocket *) 0 ;
  bool result;
  
  arg1 = (ArSocket *)jarg1; 
  result = (bool)((ArSocket const *)arg1)->getBadRead();
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_ArSocket_writeStringPlain(void * jarg1, char * jarg2) {
  int jresult ;
  ArSocket *arg1 = (ArSocket *) 0 ;
  char *arg2 = (char *) 0 ;
  int result;
  
  arg1 = (ArSocket *)jarg1; 
  arg2 = (char *)jarg2; 
  result = (int)(arg1)->writeStringPlain((char const *)arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT char * SWIGSTDCALL CSharp_ArSocket_readString__SWIG_0(void * jarg1, unsigned int jarg2) {
  char * jresult ;
  ArSocket *arg1 = (ArSocket *) 0 ;
  unsigned int arg2 ;
  char *result = 0 ;
  
  arg1 = (ArSocket *)jarg1; 
  arg2 = (unsigned int)jarg2; 
  result = (char *)(arg1)->readString(arg2);
  jresult = SWIG_csharp_string_callback((const char *)result); 
  return jresult;
}


SWIGEXPORT char * SWIGSTDCALL CSharp_ArSocket_readString__SWIG_1(void * jarg1) {
  char * jresult ;
  ArSocket *arg1 = (ArSocket *) 0 ;
  char *result = 0 ;
  
  arg1 = (ArSocket *)jarg1; 
  result = (char *)(arg1)->readString();
  jresult = SWIG_csharp_string_callback((const char *)result); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_ArSocket_setReadStringIgnoreReturn(void * jarg1, unsigned int jarg2) {
  ArSocket *arg1 = (ArSocket *) 0 ;
  bool arg2 ;
  
  arg1 = (ArSocket *)jarg1; 
  arg2 = jarg2 ? true : false; 
  (arg1)->setReadStringIgnoreReturn(arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_ArSocket_clearPartialReadString(void * jarg1) {
  ArSocket *arg1 = (ArSocket *) 0 ;
  
  arg1 = (ArSocket *)jarg1; 
  (arg1)->clearPartialReadString();
}


SWIGEXPORT int SWIGSTDCALL CSharp_ArSocket_comparePartialReadString(void * jarg1, char * jarg2) {
  int jresult ;
  ArSocket *arg1 = (ArSocket *) 0 ;
  char *arg2 = (char *) 0 ;
  int result;
  
  arg1 = (ArSocket *)jarg1; 
  arg2 = (char *)jarg2; 
  result = (int)(arg1)->comparePartialReadString((char const *)arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_ArSocket_getLastStringReadTime(void * jarg1) {
  void * jresult ;
  ArSocket *arg1 = (ArSocket *) 0 ;
  ArTime result;
  
  arg1 = (ArSocket *)jarg1; 
  result = (arg1)->getLastStringReadTime();
  jresult = new ArTime((const ArTime &)result); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_ArSocket_setEcho(void * jarg1, unsigned int jarg2) {
  ArSocket *arg1 = (ArSocket *) 0 ;
  bool arg2 ;
  
  arg1 = (ArSocket *)jarg1; 
  arg2 = jarg2 ? true : false; 
  (arg1)->setEcho(arg2);
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_ArSocket_getEcho(void * jarg1) {
  unsigned int jresult ;
  ArSocket *arg1 = (ArSocket *) 0 ;
  bool result;
  
  arg1 = (ArSocket *)jarg1; 
  result = (bool)(arg1)->getEcho();
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_ArSocket_setLogWriteStrings(void * jarg1, unsigned int jarg2) {
  ArSocket *arg1 = (ArSocket *) 0 ;
  bool arg2 ;
  
  arg1 = (ArSocket *)jarg1; 
  arg2 = jarg2 ? true : false; 
  (arg1)->setLogWriteStrings(arg2);
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_ArSocket_getLogWriteStrings(void * jarg1) {
  unsigned int jresult ;
  ArSocket *arg1 = (ArSocket *) 0 ;
  bool result;
  
  arg1 = (ArSocket *)jarg1; 
  result = (bool)(arg1)->getLogWriteStrings();
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_ArSocket_setStringUseWrongEndChars(void * jarg1, unsigned int jarg2) {
  ArSocket *arg1 = (ArSocket *) 0 ;
  bool arg2 ;
  
  arg1 = (ArSocket *)jarg1; 
  arg2 = jarg2 ? true : false; 
  (arg1)->setStringUseWrongEndChars(arg2);
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_ArSocket_getStringUseWrongEndChars(void * jarg1) {
  unsigned int jresult ;
  ArSocket *arg1 = (ArSocket *) 0 ;
  bool result;
  
  arg1 = (ArSocket *)jarg1; 
  result = (bool)(arg1)->getStringUseWrongEndChars();
  jresult = result; 
  return jresult;
}


SWIGEXPORT char * SWIGSTDCALL CSharp_ArSocket_getRawIPString(void * jarg1) {
  char * jresult ;
  ArSocket *arg1 = (ArSocket *) 0 ;
  char *result = 0 ;
  
  arg1 = (ArSocket *)jarg1; 
  result = (char *)((ArSocket const *)arg1)->getRawIPString();
  jresult = SWIG_csharp_string_callback((const char *)result); 
  return jresult;
}


SWIGEXPORT char * SWIGSTDCALL CSharp_ArSocket_getIPString(void * jarg1) {
  char * jresult ;
  ArSocket *arg1 = (ArSocket *) 0 ;
  char *result = 0 ;
  
  arg1 = (ArSocket *)jarg1; 
  result = (char *)((ArSocket const *)arg1)->getIPString();
  jresult = SWIG_csharp_string_callback((const char *)result); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_ArSocket_setIPString(void * jarg1, char * jarg2) {
  ArSocket *arg1 = (ArSocket *) 0 ;
  char *arg2 = (char *) 0 ;
  
  arg1 = (ArSocket *)jarg1; 
  arg2 = (char *)jarg2; 
  (arg1)->setIPString((char const *)arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_ArSocket_setCloseCallback(void * jarg1, void * jarg2) {
  ArSocket *arg1 = (ArSocket *) 0 ;
  ArFunctor *arg2 = (ArFunctor *) 0 ;
  
  arg1 = (ArSocket *)jarg1; 
  arg2 = (ArFunctor *)jarg2; 
  (arg1)->setCloseCallback(arg2);
}


SWIGEXPORT void * SWIGSTDCALL CSharp_ArSocket_getCloseCallback(void * jarg1) {
  void * jresult ;
  ArSocket *arg1 = (ArSocket *) 0 ;
  ArFunctor *result = 0 ;
  
  arg1 = (ArSocket *)jarg1; 
  result = (ArFunctor *)(arg1)->getCloseCallback();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT long SWIGSTDCALL CSharp_ArSocket_getSends(void * jarg1) {
  long jresult ;
  ArSocket *arg1 = (ArSocket *) 0 ;
  long result;
  
  arg1 = (ArSocket *)jarg1; 
  result = (long)(arg1)->getSends();
  jresult = result; 
  return jresult;
}


SWIGEXPORT long SWIGSTDCALL CSharp_ArSocket_getBytesSent(void * jarg1) {
  long jresult ;
  ArSocket *arg1 = (ArSocket *) 0 ;
  long result;
  
  arg1 = (ArSocket *)jarg1; 
  result = (long)(arg1)->getBytesSent();
  jresult = result; 
  return jresult;
}


SWIGEXPORT long SWIGSTDCALL CSharp_ArSocket_getRecvs(void * jarg1) {
  long jresult ;
  ArSocket *arg1 = (ArSocket *) 0 ;
  long result;
  
  arg1 = (ArSocket *)jarg1; 
  result = (long)(arg1)->getRecvs();
  jresult = result; 
  return jresult;
}


SWIGEXPORT long SWIGSTDCALL CSharp_ArSocket_getBytesRecvd(void * jarg1) {
  long jresult ;
  ArSocket *arg1 = (ArSocket *) 0 ;
  long result;
  
  arg1 = (ArSocket *)jarg1; 
  result = (long)(arg1)->getBytesRecvd();
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_ArSocket_resetTracking(void * jarg1) {
  ArSocket *arg1 = (ArSocket *) 0 ;
  
  arg1 = (ArSocket *)jarg1; 
  (arg1)->resetTracking();
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_ArSocket_setNoDelay(void * jarg1, unsigned int jarg2) {
  unsigned int jresult ;
  ArSocket *arg1 = (ArSocket *) 0 ;
  bool arg2 ;
  bool result;
  
  arg1 = (ArSocket *)jarg1; 
  arg2 = jarg2 ? true : false; 
  result = (bool)(arg1)->setNoDelay(arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_ArSocket_isOpen(void * jarg1) {
  unsigned int jresult ;
  ArSocket *arg1 = (ArSocket *) 0 ;
  bool result;
  
  arg1 = (ArSocket *)jarg1; 
  result = (bool)(arg1)->isOpen();
  jresult = result; 
  return jresult;
}


SWIGEXPORT char * SWIGSTDCALL CSharp_ArSocket_read__SWIG_2(void * jarg1, unsigned long jarg2, unsigned int jarg3) {
  char * jresult ;
  ArSocket *arg1 = (ArSocket *) 0 ;
  size_t arg2 ;
  unsigned int arg3 ;
  std::string result;
  
  arg1 = (ArSocket *)jarg1; 
  arg2 = (size_t)jarg2; 
  arg3 = (unsigned int)jarg3; 
  result = ArSocket_read__SWIG_2(arg1,arg2,arg3);
  jresult = SWIG_csharp_string_callback((&result)->c_str()); 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_ArSocket_write__SWIG_1(void * jarg1, char * jarg2) {
  unsigned int jresult ;
  ArSocket *arg1 = (ArSocket *) 0 ;
  std::string arg2 ;
  bool result;
  
  arg1 = (ArSocket *)jarg1; 
  if (!jarg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return 0;
  }
  (&arg2)->assign(jarg2); 
  result = (bool)ArSocket_write__SWIG_1(arg1,arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_ArSonarAutoDisabler(void * jarg1) {
  void * jresult ;
  ArRobot *arg1 = (ArRobot *) 0 ;
  ArSonarAutoDisabler *result = 0 ;
  
  arg1 = (ArRobot *)jarg1; 
  result = (ArSonarAutoDisabler *)new ArSonarAutoDisabler(arg1);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_ArSonarAutoDisabler(void * jarg1) {
  ArSonarAutoDisabler *arg1 = (ArSonarAutoDisabler *) 0 ;
  
  arg1 = (ArSonarAutoDisabler *)jarg1; 
  delete arg1;
}


SWIGEXPORT void SWIGSTDCALL CSharp_ArSonarAutoDisabler_supress(void * jarg1) {
  ArSonarAutoDisabler *arg1 = (ArSonarAutoDisabler *) 0 ;
  
  arg1 = (ArSonarAutoDisabler *)jarg1; 
  (arg1)->supress();
}


SWIGEXPORT void * SWIGSTDCALL CSharp_ArSonarAutoDisabler_getSupressCallback(void * jarg1) {
  void * jresult ;
  ArSonarAutoDisabler *arg1 = (ArSonarAutoDisabler *) 0 ;
  ArFunctor *result = 0 ;
  
  arg1 = (ArSonarAutoDisabler *)jarg1; 
  result = (ArFunctor *)(arg1)->getSupressCallback();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_ArSonarAutoDisabler_unsupress(void * jarg1) {
  ArSonarAutoDisabler *arg1 = (ArSonarAutoDisabler *) 0 ;
  
  arg1 = (ArSonarAutoDisabler *)jarg1; 
  (arg1)->unsupress();
}


SWIGEXPORT void * SWIGSTDCALL CSharp_ArSonarAutoDisabler_getUnsupressCallback(void * jarg1) {
  void * jresult ;
  ArSonarAutoDisabler *arg1 = (ArSonarAutoDisabler *) 0 ;
  ArFunctor *result = 0 ;
  
  arg1 = (ArSonarAutoDisabler *)jarg1; 
  result = (ArFunctor *)(arg1)->getUnsupressCallback();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_ArSonarAutoDisabler_setAutonomousDriving(void * jarg1) {
  ArSonarAutoDisabler *arg1 = (ArSonarAutoDisabler *) 0 ;
  
  arg1 = (ArSonarAutoDisabler *)jarg1; 
  (arg1)->setAutonomousDriving();
}


SWIGEXPORT void * SWIGSTDCALL CSharp_ArSonarAutoDisabler_getSetAutonomousDrivingCallback(void * jarg1) {
  void * jresult ;
  ArSonarAutoDisabler *arg1 = (ArSonarAutoDisabler *) 0 ;
  ArFunctor *result = 0 ;
  
  arg1 = (ArSonarAutoDisabler *)jarg1; 
  result = (ArFunctor *)(arg1)->getSetAutonomousDrivingCallback();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_ArSonarAutoDisabler_clearAutonomousDriving(void * jarg1) {
  ArSonarAutoDisabler *arg1 = (ArSonarAutoDisabler *) 0 ;
  
  arg1 = (ArSonarAutoDisabler *)jarg1; 
  (arg1)->clearAutonomousDriving();
}


SWIGEXPORT void * SWIGSTDCALL CSharp_ArSonarAutoDisabler_getClearAutonomousDrivingCallback(void * jarg1) {
  void * jresult ;
  ArSonarAutoDisabler *arg1 = (ArSonarAutoDisabler *) 0 ;
  ArFunctor *result = 0 ;
  
  arg1 = (ArSonarAutoDisabler *)jarg1; 
  result = (ArFunctor *)(arg1)->getClearAutonomousDrivingCallback();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_ArSonarDevice__SWIG_0(unsigned long jarg1, unsigned long jarg2, char * jarg3) {
  void * jresult ;
  size_t arg1 ;
  size_t arg2 ;
  char *arg3 = (char *) 0 ;
  ArSonarDevice *result = 0 ;
  
  arg1 = (size_t)jarg1; 
  arg2 = (size_t)jarg2; 
  arg3 = (char *)jarg3; 
  result = (ArSonarDevice *)new ArSonarDevice(arg1,arg2,(char const *)arg3);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_ArSonarDevice__SWIG_1(unsigned long jarg1, unsigned long jarg2) {
  void * jresult ;
  size_t arg1 ;
  size_t arg2 ;
  ArSonarDevice *result = 0 ;
  
  arg1 = (size_t)jarg1; 
  arg2 = (size_t)jarg2; 
  result = (ArSonarDevice *)new ArSonarDevice(arg1,arg2);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_ArSonarDevice__SWIG_2(unsigned long jarg1) {
  void * jresult ;
  size_t arg1 ;
  ArSonarDevice *result = 0 ;
  
  arg1 = (size_t)jarg1; 
  result = (ArSonarDevice *)new ArSonarDevice(arg1);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_ArSonarDevice__SWIG_3() {
  void * jresult ;
  ArSonarDevice *result = 0 ;
  
  result = (ArSonarDevice *)new ArSonarDevice();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_ArSonarDevice(void * jarg1) {
  ArSonarDevice *arg1 = (ArSonarDevice *) 0 ;
  
  arg1 = (ArSonarDevice *)jarg1; 
  delete arg1;
}


SWIGEXPORT void SWIGSTDCALL CSharp_ArSonarDevice_processReadings(void * jarg1) {
  ArSonarDevice *arg1 = (ArSonarDevice *) 0 ;
  
  arg1 = (ArSonarDevice *)jarg1; 
  (arg1)->processReadings();
}


SWIGEXPORT void SWIGSTDCALL CSharp_ArSonarDevice_setRobot(void * jarg1, void * jarg2) {
  ArSonarDevice *arg1 = (ArSonarDevice *) 0 ;
  ArRobot *arg2 = (ArRobot *) 0 ;
  
  arg1 = (ArSonarDevice *)jarg1; 
  arg2 = (ArRobot *)jarg2; 
  (arg1)->setRobot(arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_ArSonarDevice_addReading(void * jarg1, double jarg2, double jarg3) {
  ArSonarDevice *arg1 = (ArSonarDevice *) 0 ;
  double arg2 ;
  double arg3 ;
  
  arg1 = (ArSonarDevice *)jarg1; 
  arg2 = (double)jarg2; 
  arg3 = (double)jarg3; 
  (arg1)->addReading(arg2,arg3);
}


SWIGEXPORT void SWIGSTDCALL CSharp_ArSonarDevice_setIgnoreReadingCB(void * jarg1, void * jarg2) {
  ArSonarDevice *arg1 = (ArSonarDevice *) 0 ;
  ArRetFunctor1< bool,ArPose > *arg2 = (ArRetFunctor1< bool,ArPose > *) 0 ;
  
  arg1 = (ArSonarDevice *)jarg1; 
  arg2 = (ArRetFunctor1< bool,ArPose > *)jarg2; 
  (arg1)->setIgnoreReadingCB(arg2);
}


SWIGEXPORT void * SWIGSTDCALL CSharp_ArSonarDevice_getIgnoreReadingCB(void * jarg1) {
  void * jresult ;
  ArSonarDevice *arg1 = (ArSonarDevice *) 0 ;
  ArRetFunctor1< bool,ArPose > *result = 0 ;
  
  arg1 = (ArSonarDevice *)jarg1; 
  result = (ArRetFunctor1< bool,ArPose > *)(arg1)->getIgnoreReadingCB();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_ArSonarDevice_setCumulativeMaxRange(void * jarg1, double jarg2) {
  ArSonarDevice *arg1 = (ArSonarDevice *) 0 ;
  double arg2 ;
  
  arg1 = (ArSonarDevice *)jarg1; 
  arg2 = (double)jarg2; 
  (arg1)->setCumulativeMaxRange(arg2);
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_ArSonyPacket__SWIG_0(unsigned short jarg1) {
  void * jresult ;
  ArTypes::UByte2 arg1 ;
  ArSonyPacket *result = 0 ;
  
  arg1 = (ArTypes::UByte2)jarg1; 
  result = (ArSonyPacket *)new ArSonyPacket(arg1);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_ArSonyPacket__SWIG_1() {
  void * jresult ;
  ArSonyPacket *result = 0 ;
  
  result = (ArSonyPacket *)new ArSonyPacket();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_ArSonyPacket(void * jarg1) {
  ArSonyPacket *arg1 = (ArSonyPacket *) 0 ;
  
  arg1 = (ArSonyPacket *)jarg1; 
  delete arg1;
}


SWIGEXPORT void SWIGSTDCALL CSharp_ArSonyPacket_uByteToBuf(void * jarg1, unsigned char jarg2) {
  ArSonyPacket *arg1 = (ArSonyPacket *) 0 ;
  ArTypes::UByte arg2 ;
  
  arg1 = (ArSonyPacket *)jarg1; 
  arg2 = (ArTypes::UByte)jarg2; 
  (arg1)->uByteToBuf(arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_ArSonyPacket_byte2ToBuf(void * jarg1, short jarg2) {
  ArSonyPacket *arg1 = (ArSonyPacket *) 0 ;
  ArTypes::Byte2 arg2 ;
  
  arg1 = (ArSonyPacket *)jarg1; 
  arg2 = (ArTypes::Byte2)jarg2; 
  (arg1)->byte2ToBuf(arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_ArSonyPacket_byte2ToBufAtPos(void * jarg1, short jarg2, unsigned short jarg3) {
  ArSonyPacket *arg1 = (ArSonyPacket *) 0 ;
  ArTypes::Byte2 arg2 ;
  ArTypes::UByte2 arg3 ;
  
  arg1 = (ArSonyPacket *)jarg1; 
  arg2 = (ArTypes::Byte2)jarg2; 
  arg3 = (ArTypes::UByte2)jarg3; 
  (arg1)->byte2ToBufAtPos(arg2,arg3);
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_ArSonyPTZ(void * jarg1) {
  void * jresult ;
  ArRobot *arg1 = (ArRobot *) 0 ;
  ArSonyPTZ *result = 0 ;
  
  arg1 = (ArRobot *)jarg1; 
  result = (ArSonyPTZ *)new ArSonyPTZ(arg1);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_ArSonyPTZ(void * jarg1) {
  ArSonyPTZ *arg1 = (ArSonyPTZ *) 0 ;
  
  arg1 = (ArSonyPTZ *)jarg1; 
  delete arg1;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_ArSonyPTZ_init(void * jarg1) {
  unsigned int jresult ;
  ArSonyPTZ *arg1 = (ArSonyPTZ *) 0 ;
  bool result;
  
  arg1 = (ArSonyPTZ *)jarg1; 
  result = (bool)(arg1)->init();
  jresult = result; 
  return jresult;
}


SWIGEXPORT char * SWIGSTDCALL CSharp_ArSonyPTZ_getTypeName(void * jarg1) {
  char * jresult ;
  ArSonyPTZ *arg1 = (ArSonyPTZ *) 0 ;
  char *result = 0 ;
  
  arg1 = (ArSonyPTZ *)jarg1; 
  result = (char *)(arg1)->getTypeName();
  jresult = SWIG_csharp_string_callback((const char *)result); 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_ArSonyPTZ_canZoom(void * jarg1) {
  unsigned int jresult ;
  ArSonyPTZ *arg1 = (ArSonyPTZ *) 0 ;
  bool result;
  
  arg1 = (ArSonyPTZ *)jarg1; 
  result = (bool)((ArSonyPTZ const *)arg1)->canZoom();
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_ArSonyPTZ_zoom(void * jarg1, int jarg2) {
  unsigned int jresult ;
  ArSonyPTZ *arg1 = (ArSonyPTZ *) 0 ;
  int arg2 ;
  bool result;
  
  arg1 = (ArSonyPTZ *)jarg1; 
  arg2 = (int)jarg2; 
  result = (bool)(arg1)->zoom(arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_ArSonyPTZ_zoomRel(void * jarg1, int jarg2) {
  unsigned int jresult ;
  ArSonyPTZ *arg1 = (ArSonyPTZ *) 0 ;
  int arg2 ;
  bool result;
  
  arg1 = (ArSonyPTZ *)jarg1; 
  arg2 = (int)jarg2; 
  result = (bool)(arg1)->zoomRel(arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_ArSonyPTZ_getZoom(void * jarg1) {
  int jresult ;
  ArSonyPTZ *arg1 = (ArSonyPTZ *) 0 ;
  int result;
  
  arg1 = (ArSonyPTZ *)jarg1; 
  result = (int)((ArSonyPTZ const *)arg1)->getZoom();
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_ArSonyPTZ_canGetFOV(void * jarg1) {
  unsigned int jresult ;
  ArSonyPTZ *arg1 = (ArSonyPTZ *) 0 ;
  bool result;
  
  arg1 = (ArSonyPTZ *)jarg1; 
  result = (bool)(arg1)->canGetFOV();
  jresult = result; 
  return jresult;
}


SWIGEXPORT double SWIGSTDCALL CSharp_ArSonyPTZ_getFOVAtMaxZoom(void * jarg1) {
  double jresult ;
  ArSonyPTZ *arg1 = (ArSonyPTZ *) 0 ;
  double result;
  
  arg1 = (ArSonyPTZ *)jarg1; 
  result = (double)(arg1)->getFOVAtMaxZoom();
  jresult = result; 
  return jresult;
}


SWIGEXPORT double SWIGSTDCALL CSharp_ArSonyPTZ_getFOVAtMinZoom(void * jarg1) {
  double jresult ;
  ArSonyPTZ *arg1 = (ArSonyPTZ *) 0 ;
  double result;
  
  arg1 = (ArSonyPTZ *)jarg1; 
  result = (double)(arg1)->getFOVAtMinZoom();
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_ArSonyPTZ_backLightingOn(void * jarg1) {
  unsigned int jresult ;
  ArSonyPTZ *arg1 = (ArSonyPTZ *) 0 ;
  bool result;
  
  arg1 = (ArSonyPTZ *)jarg1; 
  result = (bool)(arg1)->backLightingOn();
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_ArSonyPTZ_backLightingOff(void * jarg1) {
  unsigned int jresult ;
  ArSonyPTZ *arg1 = (ArSonyPTZ *) 0 ;
  bool result;
  
  arg1 = (ArSonyPTZ *)jarg1; 
  result = (bool)(arg1)->backLightingOff();
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_ArSoundPlayer_playWavFile__SWIG_0(char * jarg1, char * jarg2) {
  unsigned int jresult ;
  char *arg1 = (char *) 0 ;
  char *arg2 = (char *) 0 ;
  bool result;
  
  arg1 = (char *)jarg1; 
  arg2 = (char *)jarg2; 
  result = (bool)ArSoundPlayer::playWavFile((char const *)arg1,(char const *)arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_ArSoundPlayer_playWavFile__SWIG_1(char * jarg1) {
  unsigned int jresult ;
  char *arg1 = (char *) 0 ;
  bool result;
  
  arg1 = (char *)jarg1; 
  result = (bool)ArSoundPlayer::playWavFile((char const *)arg1);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_ArSoundPlayer_playNativeFile(char * jarg1, char * jarg2) {
  unsigned int jresult ;
  char *arg1 = (char *) 0 ;
  char *arg2 = (char *) 0 ;
  bool result;
  
  arg1 = (char *)jarg1; 
  arg2 = (char *)jarg2; 
  result = (bool)ArSoundPlayer::playNativeFile((char const *)arg1,(char const *)arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_ArSoundPlayer_stopPlaying() {
  ArSoundPlayer::stopPlaying();
}


SWIGEXPORT void * SWIGSTDCALL CSharp_ArSoundPlayer_getPlayWavFileCallback() {
  void * jresult ;
  ArRetFunctor2< bool,char const *,char const * > *result = 0 ;
  
  result = (ArRetFunctor2< bool,char const *,char const * > *)ArSoundPlayer::getPlayWavFileCallback();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_ArSoundPlayer_getStopPlayingCallback() {
  void * jresult ;
  ArFunctor *result = 0 ;
  
  result = (ArFunctor *)ArSoundPlayer::getStopPlayingCallback();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_ArSoundPlayer_playSoundPCM16(char * jarg1, int jarg2) {
  unsigned int jresult ;
  char *arg1 = (char *) 0 ;
  int arg2 ;
  bool result;
  
  arg1 = (char *)jarg1; 
  arg2 = (int)jarg2; 
  result = (bool)ArSoundPlayer::playSoundPCM16(arg1,arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_ArSoundPlayer_setVolume(double jarg1) {
  double arg1 ;
  
  arg1 = (double)jarg1; 
  ArSoundPlayer::setVolume(arg1);
}


SWIGEXPORT void SWIGSTDCALL CSharp_ArSoundPlayer_setVolumePercent(double jarg1) {
  double arg1 ;
  
  arg1 = (double)jarg1; 
  ArSoundPlayer::setVolumePercent(arg1);
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_ArSoundPlayer() {
  void * jresult ;
  ArSoundPlayer *result = 0 ;
  
  result = (ArSoundPlayer *)new ArSoundPlayer();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_ArSoundPlayer(void * jarg1) {
  ArSoundPlayer *arg1 = (ArSoundPlayer *) 0 ;
  
  arg1 = (ArSoundPlayer *)jarg1; 
  delete arg1;
}


SWIGEXPORT void SWIGSTDCALL CSharp_ArSoundsQueue_Item_data_set(void * jarg1, char * jarg2) {
  ArSoundsQueue::Item *arg1 = (ArSoundsQueue::Item *) 0 ;
  std::string *arg2 = 0 ;
  
  arg1 = (ArSoundsQueue::Item *)jarg1; 
  if (!jarg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return ;
  }
  std::string arg2_str(jarg2);
  arg2 = &arg2_str; 
  if (arg1) (arg1)->data = *arg2;
}


SWIGEXPORT char * SWIGSTDCALL CSharp_ArSoundsQueue_Item_data_get(void * jarg1) {
  char * jresult ;
  ArSoundsQueue::Item *arg1 = (ArSoundsQueue::Item *) 0 ;
  std::string *result = 0 ;
  
  arg1 = (ArSoundsQueue::Item *)jarg1; 
  result = (std::string *) & ((arg1)->data);
  jresult = SWIG_csharp_string_callback(result->c_str()); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_ArSoundsQueue_Item_type_set(void * jarg1, int jarg2) {
  ArSoundsQueue::Item *arg1 = (ArSoundsQueue::Item *) 0 ;
  ArSoundsQueue::ItemType arg2 ;
  
  arg1 = (ArSoundsQueue::Item *)jarg1; 
  arg2 = (ArSoundsQueue::ItemType)jarg2; 
  if (arg1) (arg1)->type = arg2;
}


SWIGEXPORT int SWIGSTDCALL CSharp_ArSoundsQueue_Item_type_get(void * jarg1) {
  int jresult ;
  ArSoundsQueue::Item *arg1 = (ArSoundsQueue::Item *) 0 ;
  ArSoundsQueue::ItemType result;
  
  arg1 = (ArSoundsQueue::Item *)jarg1; 
  result = (ArSoundsQueue::ItemType) ((arg1)->type);
  jresult = (int)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_ArSoundsQueue_Item__params_set(void * jarg1, char * jarg2) {
  ArSoundsQueue::Item *arg1 = (ArSoundsQueue::Item *) 0 ;
  std::string *arg2 = 0 ;
  
  arg1 = (ArSoundsQueue::Item *)jarg1; 
  if (!jarg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return ;
  }
  std::string arg2_str(jarg2);
  arg2 = &arg2_str; 
  if (arg1) (arg1)->params = *arg2;
}


SWIGEXPORT char * SWIGSTDCALL CSharp_ArSoundsQueue_Item__params_get(void * jarg1) {
  char * jresult ;
  ArSoundsQueue::Item *arg1 = (ArSoundsQueue::Item *) 0 ;
  std::string *result = 0 ;
  
  arg1 = (ArSoundsQueue::Item *)jarg1; 
  result = (std::string *) & ((arg1)->params);
  jresult = SWIG_csharp_string_callback(result->c_str()); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_ArSoundsQueue_Item_priority_set(void * jarg1, int jarg2) {
  ArSoundsQueue::Item *arg1 = (ArSoundsQueue::Item *) 0 ;
  int arg2 ;
  
  arg1 = (ArSoundsQueue::Item *)jarg1; 
  arg2 = (int)jarg2; 
  if (arg1) (arg1)->priority = arg2;
}


SWIGEXPORT int SWIGSTDCALL CSharp_ArSoundsQueue_Item_priority_get(void * jarg1) {
  int jresult ;
  ArSoundsQueue::Item *arg1 = (ArSoundsQueue::Item *) 0 ;
  int result;
  
  arg1 = (ArSoundsQueue::Item *)jarg1; 
  result = (int) ((arg1)->priority);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_ArSoundsQueue_Item_interruptCallbacks_set(void * jarg1, void * jarg2) {
  ArSoundsQueue::Item *arg1 = (ArSoundsQueue::Item *) 0 ;
  std::list< ArSoundsQueue::InterruptItemFunctor * > *arg2 = (std::list< ArSoundsQueue::InterruptItemFunctor * > *) 0 ;
  
  arg1 = (ArSoundsQueue::Item *)jarg1; 
  arg2 = (std::list< ArSoundsQueue::InterruptItemFunctor * > *)jarg2; 
  if (arg1) (arg1)->interruptCallbacks = *arg2;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_ArSoundsQueue_Item_interruptCallbacks_get(void * jarg1) {
  void * jresult ;
  ArSoundsQueue::Item *arg1 = (ArSoundsQueue::Item *) 0 ;
  std::list< ArSoundsQueue::InterruptItemFunctor * > *result = 0 ;
  
  arg1 = (ArSoundsQueue::Item *)jarg1; 
  result = (std::list< ArSoundsQueue::InterruptItemFunctor * > *)& ((arg1)->interruptCallbacks);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_ArSoundsQueue_Item_playCallbacks_set(void * jarg1, void * jarg2) {
  ArSoundsQueue::Item *arg1 = (ArSoundsQueue::Item *) 0 ;
  std::list< ArSoundsQueue::PlayItemFunctor * > arg2 ;
  std::list< ArSoundsQueue::PlayItemFunctor * > *argp2 ;
  
  arg1 = (ArSoundsQueue::Item *)jarg1; 
  argp2 = (std::list< ArSoundsQueue::PlayItemFunctor * > *)jarg2; 
  if (!argp2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Attempt to dereference null std::list< ArSoundsQueue::PlayItemFunctor * >", 0);
    return ;
  }
  arg2 = *argp2; 
  if (arg1) (arg1)->playCallbacks = arg2;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_ArSoundsQueue_Item_playCallbacks_get(void * jarg1) {
  void * jresult ;
  ArSoundsQueue::Item *arg1 = (ArSoundsQueue::Item *) 0 ;
  std::list< ArSoundsQueue::PlayItemFunctor * > result;
  
  arg1 = (ArSoundsQueue::Item *)jarg1; 
  result =  ((arg1)->playCallbacks);
  jresult = new std::list< ArSoundsQueue::PlayItemFunctor * >((const std::list< ArSoundsQueue::PlayItemFunctor * > &)result); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_ArSoundsQueue_Item_doneCallbacks_set(void * jarg1, void * jarg2) {
  ArSoundsQueue::Item *arg1 = (ArSoundsQueue::Item *) 0 ;
  std::list< ArFunctor * > *arg2 = (std::list< ArFunctor * > *) 0 ;
  
  arg1 = (ArSoundsQueue::Item *)jarg1; 
  arg2 = (std::list< ArFunctor * > *)jarg2; 
  if (arg1) (arg1)->doneCallbacks = *arg2;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_ArSoundsQueue_Item_doneCallbacks_get(void * jarg1) {
  void * jresult ;
  ArSoundsQueue::Item *arg1 = (ArSoundsQueue::Item *) 0 ;
  std::list< ArFunctor * > *result = 0 ;
  
  arg1 = (ArSoundsQueue::Item *)jarg1; 
  result = (std::list< ArFunctor * > *)& ((arg1)->doneCallbacks);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_ArSoundsQueue_Item_playbackConditionCallbacks_set(void * jarg1, void * jarg2) {
  ArSoundsQueue::Item *arg1 = (ArSoundsQueue::Item *) 0 ;
  std::list< ArSoundsQueue::PlaybackConditionFunctor * > *arg2 = (std::list< ArSoundsQueue::PlaybackConditionFunctor * > *) 0 ;
  
  arg1 = (ArSoundsQueue::Item *)jarg1; 
  arg2 = (std::list< ArSoundsQueue::PlaybackConditionFunctor * > *)jarg2; 
  if (arg1) (arg1)->playbackConditionCallbacks = *arg2;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_ArSoundsQueue_Item_playbackConditionCallbacks_get(void * jarg1) {
  void * jresult ;
  ArSoundsQueue::Item *arg1 = (ArSoundsQueue::Item *) 0 ;
  std::list< ArSoundsQueue::PlaybackConditionFunctor * > *result = 0 ;
  
  arg1 = (ArSoundsQueue::Item *)jarg1; 
  result = (std::list< ArSoundsQueue::PlaybackConditionFunctor * > *)& ((arg1)->playbackConditionCallbacks);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_ArSoundsQueue_Item__SWIG_0() {
  void * jresult ;
  ArSoundsQueue::Item *result = 0 ;
  
  result = (ArSoundsQueue::Item *)new ArSoundsQueue::Item();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_ArSoundsQueue_Item__SWIG_1(char * jarg1, int jarg2, char * jarg3, int jarg4) {
  void * jresult ;
  std::string arg1 ;
  ArSoundsQueue::ItemType arg2 ;
  std::string arg3 ;
  int arg4 ;
  ArSoundsQueue::Item *result = 0 ;
  
  if (!jarg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return 0;
  }
  (&arg1)->assign(jarg1); 
  arg2 = (ArSoundsQueue::ItemType)jarg2; 
  if (!jarg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return 0;
  }
  (&arg3)->assign(jarg3); 
  arg4 = (int)jarg4; 
  result = (ArSoundsQueue::Item *)new ArSoundsQueue::Item(arg1,arg2,arg3,arg4);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_ArSoundsQueue_Item__SWIG_2(char * jarg1, int jarg2, char * jarg3) {
  void * jresult ;
  std::string arg1 ;
  ArSoundsQueue::ItemType arg2 ;
  std::string arg3 ;
  ArSoundsQueue::Item *result = 0 ;
  
  if (!jarg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return 0;
  }
  (&arg1)->assign(jarg1); 
  arg2 = (ArSoundsQueue::ItemType)jarg2; 
  if (!jarg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return 0;
  }
  (&arg3)->assign(jarg3); 
  result = (ArSoundsQueue::Item *)new ArSoundsQueue::Item(arg1,arg2,arg3);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_ArSoundsQueue_Item__SWIG_3(char * jarg1, int jarg2) {
  void * jresult ;
  std::string arg1 ;
  ArSoundsQueue::ItemType arg2 ;
  ArSoundsQueue::Item *result = 0 ;
  
  if (!jarg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return 0;
  }
  (&arg1)->assign(jarg1); 
  arg2 = (ArSoundsQueue::ItemType)jarg2; 
  result = (ArSoundsQueue::Item *)new ArSoundsQueue::Item(arg1,arg2);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_ArSoundsQueue_Item__SWIG_4(char * jarg1, int jarg2, char * jarg3, int jarg4, void * jarg5) {
  void * jresult ;
  std::string arg1 ;
  ArSoundsQueue::ItemType arg2 ;
  std::string arg3 ;
  int arg4 ;
  std::list< ArSoundsQueue::PlayItemFunctor * > arg5 ;
  std::list< ArSoundsQueue::PlayItemFunctor * > *argp5 ;
  ArSoundsQueue::Item *result = 0 ;
  
  if (!jarg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return 0;
  }
  (&arg1)->assign(jarg1); 
  arg2 = (ArSoundsQueue::ItemType)jarg2; 
  if (!jarg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return 0;
  }
  (&arg3)->assign(jarg3); 
  arg4 = (int)jarg4; 
  argp5 = (std::list< ArSoundsQueue::PlayItemFunctor * > *)jarg5; 
  if (!argp5) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Attempt to dereference null std::list< ArSoundsQueue::PlayItemFunctor * >", 0);
    return 0;
  }
  arg5 = *argp5; 
  result = (ArSoundsQueue::Item *)new ArSoundsQueue::Item(arg1,arg2,arg3,arg4,arg5);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_ArSoundsQueue_Item__SWIG_5(void * jarg1) {
  void * jresult ;
  ArSoundsQueue::Item *arg1 = 0 ;
  ArSoundsQueue::Item *result = 0 ;
  
  arg1 = (ArSoundsQueue::Item *)jarg1;
  if (!arg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "ArSoundsQueue::Item const & type is null", 0);
    return 0;
  } 
  result = (ArSoundsQueue::Item *)new ArSoundsQueue::Item((ArSoundsQueue::Item const &)*arg1);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_ArSoundsQueue_Item(void * jarg1) {
  ArSoundsQueue::Item *arg1 = (ArSoundsQueue::Item *) 0 ;
  
  arg1 = (ArSoundsQueue::Item *)jarg1; 
  delete arg1;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_ArSoundsQueue__SWIG_0() {
  void * jresult ;
  ArSoundsQueue *result = 0 ;
  
  result = (ArSoundsQueue *)new ArSoundsQueue();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_ArSoundsQueue__SWIG_1(void * jarg1, void * jarg2, void * jarg3, void * jarg4, void * jarg5, void * jarg6) {
  void * jresult ;
  ArRetFunctor< bool > *arg1 = (ArRetFunctor< bool > *) 0 ;
  ArSoundsQueue::PlayItemFunctor *arg2 = (ArSoundsQueue::PlayItemFunctor *) 0 ;
  ArSoundsQueue::InterruptItemFunctor *arg3 = (ArSoundsQueue::InterruptItemFunctor *) 0 ;
  ArRetFunctor< bool > *arg4 = (ArRetFunctor< bool > *) 0 ;
  ArSoundsQueue::PlayItemFunctor *arg5 = (ArSoundsQueue::PlayItemFunctor *) 0 ;
  ArSoundsQueue::InterruptItemFunctor *arg6 = (ArSoundsQueue::InterruptItemFunctor *) 0 ;
  ArSoundsQueue *result = 0 ;
  
  arg1 = (ArRetFunctor< bool > *)jarg1; 
  arg2 = (ArSoundsQueue::PlayItemFunctor *)jarg2; 
  arg3 = (ArSoundsQueue::InterruptItemFunctor *)jarg3; 
  arg4 = (ArRetFunctor< bool > *)jarg4; 
  arg5 = (ArSoundsQueue::PlayItemFunctor *)jarg5; 
  arg6 = (ArSoundsQueue::InterruptItemFunctor *)jarg6; 
  result = (ArSoundsQueue *)new ArSoundsQueue(arg1,arg2,arg3,arg4,arg5,arg6);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_ArSoundsQueue__SWIG_2(void * jarg1, void * jarg2, void * jarg3, void * jarg4, void * jarg5) {
  void * jresult ;
  ArRetFunctor< bool > *arg1 = (ArRetFunctor< bool > *) 0 ;
  ArSoundsQueue::PlayItemFunctor *arg2 = (ArSoundsQueue::PlayItemFunctor *) 0 ;
  ArSoundsQueue::InterruptItemFunctor *arg3 = (ArSoundsQueue::InterruptItemFunctor *) 0 ;
  ArRetFunctor< bool > *arg4 = (ArRetFunctor< bool > *) 0 ;
  ArSoundsQueue::PlayItemFunctor *arg5 = (ArSoundsQueue::PlayItemFunctor *) 0 ;
  ArSoundsQueue *result = 0 ;
  
  arg1 = (ArRetFunctor< bool > *)jarg1; 
  arg2 = (ArSoundsQueue::PlayItemFunctor *)jarg2; 
  arg3 = (ArSoundsQueue::InterruptItemFunctor *)jarg3; 
  arg4 = (ArRetFunctor< bool > *)jarg4; 
  arg5 = (ArSoundsQueue::PlayItemFunctor *)jarg5; 
  result = (ArSoundsQueue *)new ArSoundsQueue(arg1,arg2,arg3,arg4,arg5);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_ArSoundsQueue__SWIG_3(void * jarg1, void * jarg2, void * jarg3, void * jarg4) {
  void * jresult ;
  ArRetFunctor< bool > *arg1 = (ArRetFunctor< bool > *) 0 ;
  ArSoundsQueue::PlayItemFunctor *arg2 = (ArSoundsQueue::PlayItemFunctor *) 0 ;
  ArSoundsQueue::InterruptItemFunctor *arg3 = (ArSoundsQueue::InterruptItemFunctor *) 0 ;
  ArRetFunctor< bool > *arg4 = (ArRetFunctor< bool > *) 0 ;
  ArSoundsQueue *result = 0 ;
  
  arg1 = (ArRetFunctor< bool > *)jarg1; 
  arg2 = (ArSoundsQueue::PlayItemFunctor *)jarg2; 
  arg3 = (ArSoundsQueue::InterruptItemFunctor *)jarg3; 
  arg4 = (ArRetFunctor< bool > *)jarg4; 
  result = (ArSoundsQueue *)new ArSoundsQueue(arg1,arg2,arg3,arg4);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_ArSoundsQueue__SWIG_4(void * jarg1, void * jarg2, void * jarg3) {
  void * jresult ;
  ArRetFunctor< bool > *arg1 = (ArRetFunctor< bool > *) 0 ;
  ArSoundsQueue::PlayItemFunctor *arg2 = (ArSoundsQueue::PlayItemFunctor *) 0 ;
  ArSoundsQueue::InterruptItemFunctor *arg3 = (ArSoundsQueue::InterruptItemFunctor *) 0 ;
  ArSoundsQueue *result = 0 ;
  
  arg1 = (ArRetFunctor< bool > *)jarg1; 
  arg2 = (ArSoundsQueue::PlayItemFunctor *)jarg2; 
  arg3 = (ArSoundsQueue::InterruptItemFunctor *)jarg3; 
  result = (ArSoundsQueue *)new ArSoundsQueue(arg1,arg2,arg3);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_ArSoundsQueue__SWIG_5(void * jarg1, void * jarg2) {
  void * jresult ;
  ArRetFunctor< bool > *arg1 = (ArRetFunctor< bool > *) 0 ;
  ArSoundsQueue::PlayItemFunctor *arg2 = (ArSoundsQueue::PlayItemFunctor *) 0 ;
  ArSoundsQueue *result = 0 ;
  
  arg1 = (ArRetFunctor< bool > *)jarg1; 
  arg2 = (ArSoundsQueue::PlayItemFunctor *)jarg2; 
  result = (ArSoundsQueue *)new ArSoundsQueue(arg1,arg2);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_ArSoundsQueue__SWIG_6(void * jarg1) {
  void * jresult ;
  ArRetFunctor< bool > *arg1 = (ArRetFunctor< bool > *) 0 ;
  ArSoundsQueue *result = 0 ;
  
  arg1 = (ArRetFunctor< bool > *)jarg1; 
  result = (ArSoundsQueue *)new ArSoundsQueue(arg1);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_ArSoundsQueue__SWIG_7(void * jarg1, void * jarg2, void * jarg3, void * jarg4) {
  void * jresult ;
  ArSpeechSynth *arg1 = (ArSpeechSynth *) 0 ;
  ArRetFunctor< bool > *arg2 = (ArRetFunctor< bool > *) 0 ;
  ArSoundsQueue::PlayItemFunctor *arg3 = (ArSoundsQueue::PlayItemFunctor *) 0 ;
  ArSoundsQueue::InterruptItemFunctor *arg4 = (ArSoundsQueue::InterruptItemFunctor *) 0 ;
  ArSoundsQueue *result = 0 ;
  
  arg1 = (ArSpeechSynth *)jarg1; 
  arg2 = (ArRetFunctor< bool > *)jarg2; 
  arg3 = (ArSoundsQueue::PlayItemFunctor *)jarg3; 
  arg4 = (ArSoundsQueue::InterruptItemFunctor *)jarg4; 
  result = (ArSoundsQueue *)new ArSoundsQueue(arg1,arg2,arg3,arg4);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_ArSoundsQueue__SWIG_8(void * jarg1, void * jarg2, void * jarg3) {
  void * jresult ;
  ArSpeechSynth *arg1 = (ArSpeechSynth *) 0 ;
  ArRetFunctor< bool > *arg2 = (ArRetFunctor< bool > *) 0 ;
  ArSoundsQueue::PlayItemFunctor *arg3 = (ArSoundsQueue::PlayItemFunctor *) 0 ;
  ArSoundsQueue *result = 0 ;
  
  arg1 = (ArSpeechSynth *)jarg1; 
  arg2 = (ArRetFunctor< bool > *)jarg2; 
  arg3 = (ArSoundsQueue::PlayItemFunctor *)jarg3; 
  result = (ArSoundsQueue *)new ArSoundsQueue(arg1,arg2,arg3);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_ArSoundsQueue__SWIG_9(void * jarg1, void * jarg2) {
  void * jresult ;
  ArSpeechSynth *arg1 = (ArSpeechSynth *) 0 ;
  ArRetFunctor< bool > *arg2 = (ArRetFunctor< bool > *) 0 ;
  ArSoundsQueue *result = 0 ;
  
  arg1 = (ArSpeechSynth *)jarg1; 
  arg2 = (ArRetFunctor< bool > *)jarg2; 
  result = (ArSoundsQueue *)new ArSoundsQueue(arg1,arg2);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_ArSoundsQueue__SWIG_10(void * jarg1) {
  void * jresult ;
  ArSpeechSynth *arg1 = (ArSpeechSynth *) 0 ;
  ArSoundsQueue *result = 0 ;
  
  arg1 = (ArSpeechSynth *)jarg1; 
  result = (ArSoundsQueue *)new ArSoundsQueue(arg1);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_ArSoundsQueue(void * jarg1) {
  ArSoundsQueue *arg1 = (ArSoundsQueue *) 0 ;
  
  arg1 = (ArSoundsQueue *)jarg1; 
  delete arg1;
}


SWIGEXPORT void SWIGSTDCALL CSharp_ArSoundsQueue_addInitCallback(void * jarg1, void * jarg2) {
  ArSoundsQueue *arg1 = (ArSoundsQueue *) 0 ;
  ArRetFunctor< bool > *arg2 = (ArRetFunctor< bool > *) 0 ;
  
  arg1 = (ArSoundsQueue *)jarg1; 
  arg2 = (ArRetFunctor< bool > *)jarg2; 
  (arg1)->addInitCallback(arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_ArSoundsQueue_setSpeakInitCallback(void * jarg1, void * jarg2) {
  ArSoundsQueue *arg1 = (ArSoundsQueue *) 0 ;
  ArRetFunctor< bool > *arg2 = (ArRetFunctor< bool > *) 0 ;
  
  arg1 = (ArSoundsQueue *)jarg1; 
  arg2 = (ArRetFunctor< bool > *)jarg2; 
  (arg1)->setSpeakInitCallback(arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_ArSoundsQueue_addItem__SWIG_0(void * jarg1, void * jarg2) {
  ArSoundsQueue *arg1 = (ArSoundsQueue *) 0 ;
  ArSoundsQueue::Item arg2 ;
  ArSoundsQueue::Item *argp2 ;
  
  arg1 = (ArSoundsQueue *)jarg1; 
  argp2 = (ArSoundsQueue::Item *)jarg2; 
  if (!argp2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Attempt to dereference null ArSoundsQueue::Item", 0);
    return ;
  }
  arg2 = *argp2; 
  (arg1)->addItem(arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_ArSoundsQueue_addItem__SWIG_1(void * jarg1, int jarg2, char * jarg3, void * jarg4, int jarg5, char * jarg6) {
  ArSoundsQueue *arg1 = (ArSoundsQueue *) 0 ;
  ArSoundsQueue::ItemType arg2 ;
  char *arg3 = (char *) 0 ;
  std::list< ArSoundsQueue::PlayItemFunctor * > arg4 ;
  int arg5 ;
  char *arg6 = (char *) 0 ;
  std::list< ArSoundsQueue::PlayItemFunctor * > *argp4 ;
  
  arg1 = (ArSoundsQueue *)jarg1; 
  arg2 = (ArSoundsQueue::ItemType)jarg2; 
  arg3 = (char *)jarg3; 
  argp4 = (std::list< ArSoundsQueue::PlayItemFunctor * > *)jarg4; 
  if (!argp4) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Attempt to dereference null std::list< ArSoundsQueue::PlayItemFunctor * >", 0);
    return ;
  }
  arg4 = *argp4; 
  arg5 = (int)jarg5; 
  arg6 = (char *)jarg6; 
  (arg1)->addItem(arg2,(char const *)arg3,arg4,arg5,(char const *)arg6);
}


SWIGEXPORT void SWIGSTDCALL CSharp_ArSoundsQueue_addItem__SWIG_2(void * jarg1, int jarg2, char * jarg3, void * jarg4, int jarg5) {
  ArSoundsQueue *arg1 = (ArSoundsQueue *) 0 ;
  ArSoundsQueue::ItemType arg2 ;
  char *arg3 = (char *) 0 ;
  std::list< ArSoundsQueue::PlayItemFunctor * > arg4 ;
  int arg5 ;
  std::list< ArSoundsQueue::PlayItemFunctor * > *argp4 ;
  
  arg1 = (ArSoundsQueue *)jarg1; 
  arg2 = (ArSoundsQueue::ItemType)jarg2; 
  arg3 = (char *)jarg3; 
  argp4 = (std::list< ArSoundsQueue::PlayItemFunctor * > *)jarg4; 
  if (!argp4) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Attempt to dereference null std::list< ArSoundsQueue::PlayItemFunctor * >", 0);
    return ;
  }
  arg4 = *argp4; 
  arg5 = (int)jarg5; 
  (arg1)->addItem(arg2,(char const *)arg3,arg4,arg5);
}


SWIGEXPORT void SWIGSTDCALL CSharp_ArSoundsQueue_addItem__SWIG_3(void * jarg1, int jarg2, char * jarg3, void * jarg4) {
  ArSoundsQueue *arg1 = (ArSoundsQueue *) 0 ;
  ArSoundsQueue::ItemType arg2 ;
  char *arg3 = (char *) 0 ;
  std::list< ArSoundsQueue::PlayItemFunctor * > arg4 ;
  std::list< ArSoundsQueue::PlayItemFunctor * > *argp4 ;
  
  arg1 = (ArSoundsQueue *)jarg1; 
  arg2 = (ArSoundsQueue::ItemType)jarg2; 
  arg3 = (char *)jarg3; 
  argp4 = (std::list< ArSoundsQueue::PlayItemFunctor * > *)jarg4; 
  if (!argp4) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Attempt to dereference null std::list< ArSoundsQueue::PlayItemFunctor * >", 0);
    return ;
  }
  arg4 = *argp4; 
  (arg1)->addItem(arg2,(char const *)arg3,arg4);
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_ArSoundsQueue_isInitialized(void * jarg1) {
  unsigned int jresult ;
  ArSoundsQueue *arg1 = (ArSoundsQueue *) 0 ;
  bool result;
  
  arg1 = (ArSoundsQueue *)jarg1; 
  result = (bool)(arg1)->isInitialized();
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_ArSoundsQueue_isSpeakingOrPlaying(void * jarg1) {
  unsigned int jresult ;
  ArSoundsQueue *arg1 = (ArSoundsQueue *) 0 ;
  bool result;
  
  arg1 = (ArSoundsQueue *)jarg1; 
  result = (bool)(arg1)->isSpeakingOrPlaying();
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_ArSoundsQueue_isPlaying(void * jarg1) {
  unsigned int jresult ;
  ArSoundsQueue *arg1 = (ArSoundsQueue *) 0 ;
  bool result;
  
  arg1 = (ArSoundsQueue *)jarg1; 
  result = (bool)(arg1)->isPlaying();
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_ArSoundsQueue_isSpeaking(void * jarg1) {
  unsigned int jresult ;
  ArSoundsQueue *arg1 = (ArSoundsQueue *) 0 ;
  bool result;
  
  arg1 = (ArSoundsQueue *)jarg1; 
  result = (bool)(arg1)->isSpeaking();
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_ArSoundsQueue_run(void * jarg1) {
  ArSoundsQueue *arg1 = (ArSoundsQueue *) 0 ;
  
  arg1 = (ArSoundsQueue *)jarg1; 
  (arg1)->run();
}


SWIGEXPORT void SWIGSTDCALL CSharp_ArSoundsQueue_runAsync(void * jarg1) {
  ArSoundsQueue *arg1 = (ArSoundsQueue *) 0 ;
  
  arg1 = (ArSoundsQueue *)jarg1; 
  (arg1)->runAsync();
}


SWIGEXPORT void SWIGSTDCALL CSharp_ArSoundsQueue_pause(void * jarg1) {
  ArSoundsQueue *arg1 = (ArSoundsQueue *) 0 ;
  
  arg1 = (ArSoundsQueue *)jarg1; 
  (arg1)->pause();
}


SWIGEXPORT void SWIGSTDCALL CSharp_ArSoundsQueue_resume(void * jarg1) {
  ArSoundsQueue *arg1 = (ArSoundsQueue *) 0 ;
  
  arg1 = (ArSoundsQueue *)jarg1; 
  (arg1)->resume();
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_ArSoundsQueue_isPaused(void * jarg1) {
  unsigned int jresult ;
  ArSoundsQueue *arg1 = (ArSoundsQueue *) 0 ;
  bool result;
  
  arg1 = (ArSoundsQueue *)jarg1; 
  result = (bool)(arg1)->isPaused();
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_ArSoundsQueue_interrupt(void * jarg1) {
  ArSoundsQueue *arg1 = (ArSoundsQueue *) 0 ;
  
  arg1 = (ArSoundsQueue *)jarg1; 
  (arg1)->interrupt();
}


SWIGEXPORT void SWIGSTDCALL CSharp_ArSoundsQueue_clearQueue(void * jarg1) {
  ArSoundsQueue *arg1 = (ArSoundsQueue *) 0 ;
  
  arg1 = (ArSoundsQueue *)jarg1; 
  (arg1)->clearQueue();
}


SWIGEXPORT void SWIGSTDCALL CSharp_ArSoundsQueue_stop(void * jarg1) {
  ArSoundsQueue *arg1 = (ArSoundsQueue *) 0 ;
  
  arg1 = (ArSoundsQueue *)jarg1; 
  (arg1)->stop();
}


SWIGEXPORT void * SWIGSTDCALL CSharp_ArSoundsQueue_getPauseCallback(void * jarg1) {
  void * jresult ;
  ArSoundsQueue *arg1 = (ArSoundsQueue *) 0 ;
  ArFunctor *result = 0 ;
  
  arg1 = (ArSoundsQueue *)jarg1; 
  result = (ArFunctor *)(arg1)->getPauseCallback();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_ArSoundsQueue_getResumeCallback(void * jarg1) {
  void * jresult ;
  ArSoundsQueue *arg1 = (ArSoundsQueue *) 0 ;
  ArFunctor *result = 0 ;
  
  arg1 = (ArSoundsQueue *)jarg1; 
  result = (ArFunctor *)(arg1)->getResumeCallback();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT unsigned long SWIGSTDCALL CSharp_ArSoundsQueue_getCurrentQueueSize(void * jarg1) {
  unsigned long jresult ;
  ArSoundsQueue *arg1 = (ArSoundsQueue *) 0 ;
  size_t result;
  
  arg1 = (ArSoundsQueue *)jarg1; 
  result = (arg1)->getCurrentQueueSize();
  jresult = (unsigned long)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_ArSoundsQueue_addSoundStartedCallback(void * jarg1, void * jarg2) {
  ArSoundsQueue *arg1 = (ArSoundsQueue *) 0 ;
  ArFunctor *arg2 = (ArFunctor *) 0 ;
  
  arg1 = (ArSoundsQueue *)jarg1; 
  arg2 = (ArFunctor *)jarg2; 
  (arg1)->addSoundStartedCallback(arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_ArSoundsQueue_remSoundStartedCallback(void * jarg1, void * jarg2) {
  ArSoundsQueue *arg1 = (ArSoundsQueue *) 0 ;
  ArFunctor *arg2 = (ArFunctor *) 0 ;
  
  arg1 = (ArSoundsQueue *)jarg1; 
  arg2 = (ArFunctor *)jarg2; 
  (arg1)->remSoundStartedCallback(arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_ArSoundsQueue_addSoundFinishedCallback(void * jarg1, void * jarg2) {
  ArSoundsQueue *arg1 = (ArSoundsQueue *) 0 ;
  ArFunctor *arg2 = (ArFunctor *) 0 ;
  
  arg1 = (ArSoundsQueue *)jarg1; 
  arg2 = (ArFunctor *)jarg2; 
  (arg1)->addSoundFinishedCallback(arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_ArSoundsQueue_remSoundFinishedCallback(void * jarg1, void * jarg2) {
  ArSoundsQueue *arg1 = (ArSoundsQueue *) 0 ;
  ArFunctor *arg2 = (ArFunctor *) 0 ;
  
  arg1 = (ArSoundsQueue *)jarg1; 
  arg2 = (ArFunctor *)jarg2; 
  (arg1)->remSoundFinishedCallback(arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_ArSoundsQueue_addSoundItemStartedCallback(void * jarg1, void * jarg2) {
  ArSoundsQueue *arg1 = (ArSoundsQueue *) 0 ;
  ArFunctor1< ArSoundsQueue::Item > *arg2 = (ArFunctor1< ArSoundsQueue::Item > *) 0 ;
  
  arg1 = (ArSoundsQueue *)jarg1; 
  arg2 = (ArFunctor1< ArSoundsQueue::Item > *)jarg2; 
  (arg1)->addSoundItemStartedCallback(arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_ArSoundsQueue_remSoundItemStartedCallback(void * jarg1, void * jarg2) {
  ArSoundsQueue *arg1 = (ArSoundsQueue *) 0 ;
  ArFunctor1< ArSoundsQueue::Item > *arg2 = (ArFunctor1< ArSoundsQueue::Item > *) 0 ;
  
  arg1 = (ArSoundsQueue *)jarg1; 
  arg2 = (ArFunctor1< ArSoundsQueue::Item > *)jarg2; 
  (arg1)->remSoundItemStartedCallback(arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_ArSoundsQueue_addSoundItemFinishedCallback(void * jarg1, void * jarg2) {
  ArSoundsQueue *arg1 = (ArSoundsQueue *) 0 ;
  ArFunctor1< ArSoundsQueue::Item > *arg2 = (ArFunctor1< ArSoundsQueue::Item > *) 0 ;
  
  arg1 = (ArSoundsQueue *)jarg1; 
  arg2 = (ArFunctor1< ArSoundsQueue::Item > *)jarg2; 
  (arg1)->addSoundItemFinishedCallback(arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_ArSoundsQueue_remSoundItemFinishedCallback(void * jarg1, void * jarg2) {
  ArSoundsQueue *arg1 = (ArSoundsQueue *) 0 ;
  ArFunctor1< ArSoundsQueue::Item > *arg2 = (ArFunctor1< ArSoundsQueue::Item > *) 0 ;
  
  arg1 = (ArSoundsQueue *)jarg1; 
  arg2 = (ArFunctor1< ArSoundsQueue::Item > *)jarg2; 
  (arg1)->remSoundItemFinishedCallback(arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_ArSoundsQueue_addQueueNonemptyCallback(void * jarg1, void * jarg2) {
  ArSoundsQueue *arg1 = (ArSoundsQueue *) 0 ;
  ArFunctor *arg2 = (ArFunctor *) 0 ;
  
  arg1 = (ArSoundsQueue *)jarg1; 
  arg2 = (ArFunctor *)jarg2; 
  (arg1)->addQueueNonemptyCallback(arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_ArSoundsQueue_remQueueNonemptyCallback(void * jarg1, void * jarg2) {
  ArSoundsQueue *arg1 = (ArSoundsQueue *) 0 ;
  ArFunctor *arg2 = (ArFunctor *) 0 ;
  
  arg1 = (ArSoundsQueue *)jarg1; 
  arg2 = (ArFunctor *)jarg2; 
  (arg1)->remQueueNonemptyCallback(arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_ArSoundsQueue_addQueueEmptyCallback(void * jarg1, void * jarg2) {
  ArSoundsQueue *arg1 = (ArSoundsQueue *) 0 ;
  ArFunctor *arg2 = (ArFunctor *) 0 ;
  
  arg1 = (ArSoundsQueue *)jarg1; 
  arg2 = (ArFunctor *)jarg2; 
  (arg1)->addQueueEmptyCallback(arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_ArSoundsQueue_remQueueEmptyCallback(void * jarg1, void * jarg2) {
  ArSoundsQueue *arg1 = (ArSoundsQueue *) 0 ;
  ArFunctor *arg2 = (ArFunctor *) 0 ;
  
  arg1 = (ArSoundsQueue *)jarg1; 
  arg2 = (ArFunctor *)jarg2; 
  (arg1)->remQueueEmptyCallback(arg2);
}


SWIGEXPORT void * SWIGSTDCALL CSharp_ArSoundsQueue_findPendingItems(void * jarg1, char * jarg2) {
  void * jresult ;
  ArSoundsQueue *arg1 = (ArSoundsQueue *) 0 ;
  char *arg2 = (char *) 0 ;
  std::set< int > result;
  
  arg1 = (ArSoundsQueue *)jarg1; 
  arg2 = (char *)jarg2; 
  result = (arg1)->findPendingItems((char const *)arg2);
  jresult = new std::set< int >((const std::set< int > &)result); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_ArSoundsQueue_removePendingItems__SWIG_0(void * jarg1, char * jarg2, int jarg3) {
  ArSoundsQueue *arg1 = (ArSoundsQueue *) 0 ;
  char *arg2 = (char *) 0 ;
  ArSoundsQueue::ItemType arg3 ;
  
  arg1 = (ArSoundsQueue *)jarg1; 
  arg2 = (char *)jarg2; 
  arg3 = (ArSoundsQueue::ItemType)jarg3; 
  (arg1)->removePendingItems((char const *)arg2,arg3);
}


SWIGEXPORT void SWIGSTDCALL CSharp_ArSoundsQueue_removePendingItems__SWIG_1(void * jarg1, char * jarg2) {
  ArSoundsQueue *arg1 = (ArSoundsQueue *) 0 ;
  char *arg2 = (char *) 0 ;
  
  arg1 = (ArSoundsQueue *)jarg1; 
  arg2 = (char *)jarg2; 
  (arg1)->removePendingItems((char const *)arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_ArSoundsQueue_removePendingItemsByPriority(void * jarg1, int jarg2) {
  ArSoundsQueue *arg1 = (ArSoundsQueue *) 0 ;
  int arg2 ;
  
  arg1 = (ArSoundsQueue *)jarg1; 
  arg2 = (int)jarg2; 
  (arg1)->removePendingItems(arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_ArSoundsQueue_removePendingItemsByPriorityWithType(void * jarg1, int jarg2, int jarg3) {
  ArSoundsQueue *arg1 = (ArSoundsQueue *) 0 ;
  int arg2 ;
  ArSoundsQueue::ItemType arg3 ;
  
  arg1 = (ArSoundsQueue *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (ArSoundsQueue::ItemType)jarg3; 
  (arg1)->removePendingItems(arg2,arg3);
}


SWIGEXPORT void SWIGSTDCALL CSharp_ArSoundsQueue_removePendingItemsByType(void * jarg1, int jarg2) {
  ArSoundsQueue *arg1 = (ArSoundsQueue *) 0 ;
  ArSoundsQueue::ItemType arg2 ;
  
  arg1 = (ArSoundsQueue *)jarg1; 
  arg2 = (ArSoundsQueue::ItemType)jarg2; 
  (arg1)->removePendingItems(arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_ArSoundsQueue_removeItems__SWIG_0(void * jarg1, int jarg2) {
  ArSoundsQueue *arg1 = (ArSoundsQueue *) 0 ;
  int arg2 ;
  
  arg1 = (ArSoundsQueue *)jarg1; 
  arg2 = (int)jarg2; 
  (arg1)->removeItems(arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_ArSoundsQueue_removeItems__SWIG_1(void * jarg1, void * jarg2) {
  ArSoundsQueue *arg1 = (ArSoundsQueue *) 0 ;
  ArSoundsQueue::Item arg2 ;
  ArSoundsQueue::Item *argp2 ;
  
  arg1 = (ArSoundsQueue *)jarg1; 
  argp2 = (ArSoundsQueue::Item *)jarg2; 
  if (!argp2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Attempt to dereference null ArSoundsQueue::Item", 0);
    return ;
  }
  arg2 = *argp2; 
  (arg1)->removeItems(arg2);
}


SWIGEXPORT char * SWIGSTDCALL CSharp_ArSoundsQueue_nextItemByType(void * jarg1, int jarg2) {
  char * jresult ;
  ArSoundsQueue *arg1 = (ArSoundsQueue *) 0 ;
  ArSoundsQueue::ItemType arg2 ;
  std::string result;
  
  arg1 = (ArSoundsQueue *)jarg1; 
  arg2 = (ArSoundsQueue::ItemType)jarg2; 
  result = (arg1)->nextItem(arg2);
  jresult = SWIG_csharp_string_callback((&result)->c_str()); 
  return jresult;
}


SWIGEXPORT char * SWIGSTDCALL CSharp_ArSoundsQueue_nextItemByPriority(void * jarg1, int jarg2) {
  char * jresult ;
  ArSoundsQueue *arg1 = (ArSoundsQueue *) 0 ;
  int arg2 ;
  std::string result;
  
  arg1 = (ArSoundsQueue *)jarg1; 
  arg2 = (int)jarg2; 
  result = (arg1)->nextItem(arg2);
  jresult = SWIG_csharp_string_callback((&result)->c_str()); 
  return jresult;
}


SWIGEXPORT char * SWIGSTDCALL CSharp_ArSoundsQueue_nextItemByTypeAndPriority(void * jarg1, int jarg2, int jarg3) {
  char * jresult ;
  ArSoundsQueue *arg1 = (ArSoundsQueue *) 0 ;
  ArSoundsQueue::ItemType arg2 ;
  int arg3 ;
  std::string result;
  
  arg1 = (ArSoundsQueue *)jarg1; 
  arg2 = (ArSoundsQueue::ItemType)jarg2; 
  arg3 = (int)jarg3; 
  result = (arg1)->nextItem(arg2,arg3);
  jresult = SWIG_csharp_string_callback((&result)->c_str()); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_ArSoundsQueue_setSpeakCallback(void * jarg1, void * jarg2) {
  ArSoundsQueue *arg1 = (ArSoundsQueue *) 0 ;
  ArSoundsQueue::PlayItemFunctor *arg2 = (ArSoundsQueue::PlayItemFunctor *) 0 ;
  
  arg1 = (ArSoundsQueue *)jarg1; 
  arg2 = (ArSoundsQueue::PlayItemFunctor *)jarg2; 
  (arg1)->setSpeakCallback(arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_ArSoundsQueue_setInterruptSpeechCallback(void * jarg1, void * jarg2) {
  ArSoundsQueue *arg1 = (ArSoundsQueue *) 0 ;
  ArSoundsQueue::InterruptItemFunctor *arg2 = (ArSoundsQueue::InterruptItemFunctor *) 0 ;
  
  arg1 = (ArSoundsQueue *)jarg1; 
  arg2 = (ArSoundsQueue::InterruptItemFunctor *)jarg2; 
  (arg1)->setInterruptSpeechCallback(arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_ArSoundsQueue_setPlayFileCallback(void * jarg1, void * jarg2) {
  ArSoundsQueue *arg1 = (ArSoundsQueue *) 0 ;
  ArSoundsQueue::PlayItemFunctor *arg2 = (ArSoundsQueue::PlayItemFunctor *) 0 ;
  
  arg1 = (ArSoundsQueue *)jarg1; 
  arg2 = (ArSoundsQueue::PlayItemFunctor *)jarg2; 
  (arg1)->setPlayFileCallback(arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_ArSoundsQueue_setPlayWavFileCallback(void * jarg1, void * jarg2) {
  ArSoundsQueue *arg1 = (ArSoundsQueue *) 0 ;
  ArSoundsQueue::PlayItemFunctor *arg2 = (ArSoundsQueue::PlayItemFunctor *) 0 ;
  
  arg1 = (ArSoundsQueue *)jarg1; 
  arg2 = (ArSoundsQueue::PlayItemFunctor *)jarg2; 
  (arg1)->setPlayWavFileCallback(arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_ArSoundsQueue_setInterruptFileCallback(void * jarg1, void * jarg2) {
  ArSoundsQueue *arg1 = (ArSoundsQueue *) 0 ;
  ArSoundsQueue::InterruptItemFunctor *arg2 = (ArSoundsQueue::InterruptItemFunctor *) 0 ;
  
  arg1 = (ArSoundsQueue *)jarg1; 
  arg2 = (ArSoundsQueue::InterruptItemFunctor *)jarg2; 
  (arg1)->setInterruptFileCallback(arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_ArSoundsQueue_setInterruptWavFileCallback(void * jarg1, void * jarg2) {
  ArSoundsQueue *arg1 = (ArSoundsQueue *) 0 ;
  ArSoundsQueue::InterruptItemFunctor *arg2 = (ArSoundsQueue::InterruptItemFunctor *) 0 ;
  
  arg1 = (ArSoundsQueue *)jarg1; 
  arg2 = (ArSoundsQueue::InterruptItemFunctor *)jarg2; 
  (arg1)->setInterruptWavFileCallback(arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_ArSoundsQueue_speak(void * jarg1, char * jarg2) {
  ArSoundsQueue *arg1 = (ArSoundsQueue *) 0 ;
  char *arg2 = (char *) 0 ;
  
  arg1 = (ArSoundsQueue *)jarg1; 
  arg2 = (char *)jarg2; 
  (arg1)->speak((char const *)arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_ArSoundsQueue_play(void * jarg1, char * jarg2) {
  ArSoundsQueue *arg1 = (ArSoundsQueue *) 0 ;
  char *arg2 = (char *) 0 ;
  
  arg1 = (ArSoundsQueue *)jarg1; 
  arg2 = (char *)jarg2; 
  (arg1)->play((char const *)arg2);
}


SWIGEXPORT void * SWIGSTDCALL CSharp_ArSoundsQueue_createDefaultSpeechItem__SWIG_0(void * jarg1, char * jarg2) {
  void * jresult ;
  ArSoundsQueue *arg1 = (ArSoundsQueue *) 0 ;
  char *arg2 = (char *) 0 ;
  ArSoundsQueue::Item result;
  
  arg1 = (ArSoundsQueue *)jarg1; 
  arg2 = (char *)jarg2; 
  result = (arg1)->createDefaultSpeechItem((char const *)arg2);
  jresult = new ArSoundsQueue::Item((const ArSoundsQueue::Item &)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_ArSoundsQueue_createDefaultSpeechItem__SWIG_1(void * jarg1) {
  void * jresult ;
  ArSoundsQueue *arg1 = (ArSoundsQueue *) 0 ;
  ArSoundsQueue::Item result;
  
  arg1 = (ArSoundsQueue *)jarg1; 
  result = (arg1)->createDefaultSpeechItem();
  jresult = new ArSoundsQueue::Item((const ArSoundsQueue::Item &)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_ArSoundsQueue_createDefaultFileItem__SWIG_0(void * jarg1, char * jarg2) {
  void * jresult ;
  ArSoundsQueue *arg1 = (ArSoundsQueue *) 0 ;
  char *arg2 = (char *) 0 ;
  ArSoundsQueue::Item result;
  
  arg1 = (ArSoundsQueue *)jarg1; 
  arg2 = (char *)jarg2; 
  result = (arg1)->createDefaultFileItem((char const *)arg2);
  jresult = new ArSoundsQueue::Item((const ArSoundsQueue::Item &)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_ArSoundsQueue_createDefaultFileItem__SWIG_1(void * jarg1) {
  void * jresult ;
  ArSoundsQueue *arg1 = (ArSoundsQueue *) 0 ;
  ArSoundsQueue::Item result;
  
  arg1 = (ArSoundsQueue *)jarg1; 
  result = (arg1)->createDefaultFileItem();
  jresult = new ArSoundsQueue::Item((const ArSoundsQueue::Item &)result); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_ArSoundsQueue_setDefaultPlayConditionCB(void * jarg1, void * jarg2) {
  ArSoundsQueue *arg1 = (ArSoundsQueue *) 0 ;
  ArSoundsQueue::PlaybackConditionFunctor *arg2 = (ArSoundsQueue::PlaybackConditionFunctor *) 0 ;
  
  arg1 = (ArSoundsQueue *)jarg1; 
  arg2 = (ArSoundsQueue::PlaybackConditionFunctor *)jarg2; 
  (arg1)->setDefaultPlayConditionCB(arg2);
}


SWIGEXPORT void * SWIGSTDCALL CSharp_ArSoundsQueue_runThread(void * jarg1, void * jarg2) {
  void * jresult ;
  ArSoundsQueue *arg1 = (ArSoundsQueue *) 0 ;
  void *arg2 = (void *) 0 ;
  void *result = 0 ;
  
  arg1 = (ArSoundsQueue *)jarg1; 
  arg2 = (void *)jarg2; 
  result = (void *)(arg1)->runThread(arg2);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_ArSpeechSynth(void * jarg1) {
  ArSpeechSynth *arg1 = (ArSpeechSynth *) 0 ;
  
  arg1 = (ArSpeechSynth *)jarg1; 
  delete arg1;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_ArSpeechSynth_init(void * jarg1) {
  unsigned int jresult ;
  ArSpeechSynth *arg1 = (ArSpeechSynth *) 0 ;
  bool result;
  
  arg1 = (ArSpeechSynth *)jarg1; 
  result = (bool)(arg1)->init();
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_ArSpeechSynth_addToConfig(void * jarg1, void * jarg2) {
  ArSpeechSynth *arg1 = (ArSpeechSynth *) 0 ;
  ArConfig *arg2 = (ArConfig *) 0 ;
  
  arg1 = (ArSpeechSynth *)jarg1; 
  arg2 = (ArConfig *)jarg2; 
  (arg1)->addToConfig(arg2);
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_ArSpeechSynth_speak__SWIG_0(void * jarg1, char * jarg2, char * jarg3, void * jarg4, unsigned short jarg5) {
  unsigned int jresult ;
  ArSpeechSynth *arg1 = (ArSpeechSynth *) 0 ;
  char *arg2 = (char *) 0 ;
  char *arg3 = (char *) 0 ;
  ArRetFunctor2< bool,ArTypes::Byte2 *,int > *arg4 = (ArRetFunctor2< bool,ArTypes::Byte2 *,int > *) 0 ;
  unsigned short arg5 ;
  bool result;
  
  arg1 = (ArSpeechSynth *)jarg1; 
  arg2 = (char *)jarg2; 
  arg3 = (char *)jarg3; 
  arg4 = (ArRetFunctor2< bool,ArTypes::Byte2 *,int > *)jarg4; 
  arg5 = (unsigned short)jarg5; 
  result = (bool)(arg1)->speak((char const *)arg2,(char const *)arg3,arg4,arg5);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_ArSpeechSynth_speak__SWIG_1(void * jarg1, char * jarg2, char * jarg3, void * jarg4) {
  unsigned int jresult ;
  ArSpeechSynth *arg1 = (ArSpeechSynth *) 0 ;
  char *arg2 = (char *) 0 ;
  char *arg3 = (char *) 0 ;
  ArRetFunctor2< bool,ArTypes::Byte2 *,int > *arg4 = (ArRetFunctor2< bool,ArTypes::Byte2 *,int > *) 0 ;
  bool result;
  
  arg1 = (ArSpeechSynth *)jarg1; 
  arg2 = (char *)jarg2; 
  arg3 = (char *)jarg3; 
  arg4 = (ArRetFunctor2< bool,ArTypes::Byte2 *,int > *)jarg4; 
  result = (bool)(arg1)->speak((char const *)arg2,(char const *)arg3,arg4);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_ArSpeechSynth_speak__SWIG_2(void * jarg1, char * jarg2, char * jarg3) {
  unsigned int jresult ;
  ArSpeechSynth *arg1 = (ArSpeechSynth *) 0 ;
  char *arg2 = (char *) 0 ;
  char *arg3 = (char *) 0 ;
  bool result;
  
  arg1 = (ArSpeechSynth *)jarg1; 
  arg2 = (char *)jarg2; 
  arg3 = (char *)jarg3; 
  result = (bool)(arg1)->speak((char const *)arg2,(char const *)arg3);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_ArSpeechSynth_speak__SWIG_3(void * jarg1, char * jarg2) {
  unsigned int jresult ;
  ArSpeechSynth *arg1 = (ArSpeechSynth *) 0 ;
  char *arg2 = (char *) 0 ;
  bool result;
  
  arg1 = (ArSpeechSynth *)jarg1; 
  arg2 = (char *)jarg2; 
  result = (bool)(arg1)->speak((char const *)arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_ArSpeechSynth_speakf(void * jarg1, char * jarg2) {
  unsigned int jresult ;
  ArSpeechSynth *arg1 = (ArSpeechSynth *) 0 ;
  char *arg2 = (char *) 0 ;
  void *arg3 = 0 ;
  bool result;
  
  arg1 = (ArSpeechSynth *)jarg1; 
  arg2 = (char *)jarg2; 
  result = (bool)(arg1)->speakf((char const *)arg2,arg3);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_ArSpeechSynth_interrupt(void * jarg1) {
  ArSpeechSynth *arg1 = (ArSpeechSynth *) 0 ;
  
  arg1 = (ArSpeechSynth *)jarg1; 
  (arg1)->interrupt();
}


SWIGEXPORT void * SWIGSTDCALL CSharp_ArSpeechSynth_getInitCallback(void * jarg1) {
  void * jresult ;
  ArSpeechSynth *arg1 = (ArSpeechSynth *) 0 ;
  ArRetFunctorC< bool,ArSpeechSynth > *result = 0 ;
  
  arg1 = (ArSpeechSynth *)jarg1; 
  result = (ArRetFunctorC< bool,ArSpeechSynth > *)(arg1)->getInitCallback();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_ArSpeechSynth_getSpeakCallback(void * jarg1) {
  void * jresult ;
  ArSpeechSynth *arg1 = (ArSpeechSynth *) 0 ;
  ArRetFunctor2C< bool,ArSpeechSynth,char const *,char const * > *result = 0 ;
  
  arg1 = (ArSpeechSynth *)jarg1; 
  result = (ArRetFunctor2C< bool,ArSpeechSynth,char const *,char const * > *)(arg1)->getSpeakCallback();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_ArSpeechSynth_getInterruptCallback(void * jarg1) {
  void * jresult ;
  ArSpeechSynth *arg1 = (ArSpeechSynth *) 0 ;
  ArFunctorC< ArSpeechSynth > *result = 0 ;
  
  arg1 = (ArSpeechSynth *)jarg1; 
  result = (ArFunctorC< ArSpeechSynth > *)(arg1)->getInterruptCallback();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_ArSpeechSynth_setAudioCallback(void * jarg1, void * jarg2) {
  ArSpeechSynth *arg1 = (ArSpeechSynth *) 0 ;
  ArRetFunctor2< bool,ArTypes::Byte2 *,int > *arg2 = (ArRetFunctor2< bool,ArTypes::Byte2 *,int > *) 0 ;
  
  arg1 = (ArSpeechSynth *)jarg1; 
  arg2 = (ArRetFunctor2< bool,ArTypes::Byte2 *,int > *)jarg2; 
  (arg1)->setAudioCallback(arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_ArSpeechSynth_setAudioSampleRate(void * jarg1, int jarg2) {
  ArSpeechSynth *arg1 = (ArSpeechSynth *) 0 ;
  int arg2 ;
  
  arg1 = (ArSpeechSynth *)jarg1; 
  arg2 = (int)jarg2; 
  (arg1)->setAudioSampleRate(arg2);
}


SWIGEXPORT int SWIGSTDCALL CSharp_ArSpeechSynth_getAudioSampleRate(void * jarg1) {
  int jresult ;
  ArSpeechSynth *arg1 = (ArSpeechSynth *) 0 ;
  int result;
  
  arg1 = (ArSpeechSynth *)jarg1; 
  result = (int)(arg1)->getAudioSampleRate();
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_ArSpeechSynth_lockObj(void * jarg1) {
  ArSpeechSynth *arg1 = (ArSpeechSynth *) 0 ;
  
  arg1 = (ArSpeechSynth *)jarg1; 
  (arg1)->lock();
}


SWIGEXPORT void SWIGSTDCALL CSharp_ArSpeechSynth_unlockObj(void * jarg1) {
  ArSpeechSynth *arg1 = (ArSpeechSynth *) 0 ;
  
  arg1 = (ArSpeechSynth *)jarg1; 
  (arg1)->unlock();
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_ArSpeechSynth_setVoice(void * jarg1, char * jarg2) {
  unsigned int jresult ;
  ArSpeechSynth *arg1 = (ArSpeechSynth *) 0 ;
  char *arg2 = (char *) 0 ;
  bool result;
  
  arg1 = (ArSpeechSynth *)jarg1; 
  arg2 = (char *)jarg2; 
  result = (bool)(arg1)->setVoice((char const *)arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT char * SWIGSTDCALL CSharp_ArSpeechSynth_getCurrentVoiceName(void * jarg1) {
  char * jresult ;
  ArSpeechSynth *arg1 = (ArSpeechSynth *) 0 ;
  char *result = 0 ;
  
  arg1 = (ArSpeechSynth *)jarg1; 
  result = (char *)(arg1)->getCurrentVoiceName();
  jresult = SWIG_csharp_string_callback((const char *)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_ArSpeechSynth_getVoiceNames(void * jarg1) {
  void * jresult ;
  ArSpeechSynth *arg1 = (ArSpeechSynth *) 0 ;
  SwigValueWrapper< std::list< std::string > > result;
  
  arg1 = (ArSpeechSynth *)jarg1; 
  result = (arg1)->getVoiceNames();
  jresult = new std::list< std::string >((const std::list< std::string > &)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_ArStringInfoGroup() {
  void * jresult ;
  ArStringInfoGroup *result = 0 ;
  
  result = (ArStringInfoGroup *)new ArStringInfoGroup();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_ArStringInfoGroup(void * jarg1) {
  ArStringInfoGroup *arg1 = (ArStringInfoGroup *) 0 ;
  
  arg1 = (ArStringInfoGroup *)jarg1; 
  delete arg1;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_ArStringInfoGroup_addString(void * jarg1, char * jarg2, unsigned short jarg3, void * jarg4) {
  unsigned int jresult ;
  ArStringInfoGroup *arg1 = (ArStringInfoGroup *) 0 ;
  char *arg2 = (char *) 0 ;
  ArTypes::UByte2 arg3 ;
  ArFunctor2< char *,ArTypes::UByte2 > *arg4 = (ArFunctor2< char *,ArTypes::UByte2 > *) 0 ;
  bool result;
  
  arg1 = (ArStringInfoGroup *)jarg1; 
  arg2 = (char *)jarg2; 
  arg3 = (ArTypes::UByte2)jarg3; 
  arg4 = (ArFunctor2< char *,ArTypes::UByte2 > *)jarg4; 
  result = (bool)(arg1)->addString((char const *)arg2,arg3,arg4);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_ArStringInfoGroup_addStringInt__SWIG_0(void * jarg1, char * jarg2, unsigned short jarg3, void * jarg4, char * jarg5, int jarg6) {
  unsigned int jresult ;
  ArStringInfoGroup *arg1 = (ArStringInfoGroup *) 0 ;
  char *arg2 = (char *) 0 ;
  ArTypes::UByte2 arg3 ;
  ArRetFunctor< int > *arg4 = (ArRetFunctor< int > *) 0 ;
  char *arg5 = (char *) 0 ;
  int arg6 ;
  bool result;
  
  arg1 = (ArStringInfoGroup *)jarg1; 
  arg2 = (char *)jarg2; 
  arg3 = (ArTypes::UByte2)jarg3; 
  arg4 = (ArRetFunctor< int > *)jarg4; 
  arg5 = (char *)jarg5; 
  arg6 = (int)jarg6; 
  result = (bool)(arg1)->addStringInt((char const *)arg2,arg3,arg4,(char const *)arg5,arg6);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_ArStringInfoGroup_addStringInt__SWIG_1(void * jarg1, char * jarg2, unsigned short jarg3, void * jarg4, char * jarg5) {
  unsigned int jresult ;
  ArStringInfoGroup *arg1 = (ArStringInfoGroup *) 0 ;
  char *arg2 = (char *) 0 ;
  ArTypes::UByte2 arg3 ;
  ArRetFunctor< int > *arg4 = (ArRetFunctor< int > *) 0 ;
  char *arg5 = (char *) 0 ;
  bool result;
  
  arg1 = (ArStringInfoGroup *)jarg1; 
  arg2 = (char *)jarg2; 
  arg3 = (ArTypes::UByte2)jarg3; 
  arg4 = (ArRetFunctor< int > *)jarg4; 
  arg5 = (char *)jarg5; 
  result = (bool)(arg1)->addStringInt((char const *)arg2,arg3,arg4,(char const *)arg5);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_ArStringInfoGroup_addStringInt__SWIG_2(void * jarg1, char * jarg2, unsigned short jarg3, void * jarg4) {
  unsigned int jresult ;
  ArStringInfoGroup *arg1 = (ArStringInfoGroup *) 0 ;
  char *arg2 = (char *) 0 ;
  ArTypes::UByte2 arg3 ;
  ArRetFunctor< int > *arg4 = (ArRetFunctor< int > *) 0 ;
  bool result;
  
  arg1 = (ArStringInfoGroup *)jarg1; 
  arg2 = (char *)jarg2; 
  arg3 = (ArTypes::UByte2)jarg3; 
  arg4 = (ArRetFunctor< int > *)jarg4; 
  result = (bool)(arg1)->addStringInt((char const *)arg2,arg3,arg4);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_ArStringInfoGroup_addStringDouble__SWIG_0(void * jarg1, char * jarg2, unsigned short jarg3, void * jarg4, char * jarg5) {
  unsigned int jresult ;
  ArStringInfoGroup *arg1 = (ArStringInfoGroup *) 0 ;
  char *arg2 = (char *) 0 ;
  ArTypes::UByte2 arg3 ;
  ArRetFunctor< double > *arg4 = (ArRetFunctor< double > *) 0 ;
  char *arg5 = (char *) 0 ;
  bool result;
  
  arg1 = (ArStringInfoGroup *)jarg1; 
  arg2 = (char *)jarg2; 
  arg3 = (ArTypes::UByte2)jarg3; 
  arg4 = (ArRetFunctor< double > *)jarg4; 
  arg5 = (char *)jarg5; 
  result = (bool)(arg1)->addStringDouble((char const *)arg2,arg3,arg4,(char const *)arg5);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_ArStringInfoGroup_addStringDouble__SWIG_1(void * jarg1, char * jarg2, unsigned short jarg3, void * jarg4) {
  unsigned int jresult ;
  ArStringInfoGroup *arg1 = (ArStringInfoGroup *) 0 ;
  char *arg2 = (char *) 0 ;
  ArTypes::UByte2 arg3 ;
  ArRetFunctor< double > *arg4 = (ArRetFunctor< double > *) 0 ;
  bool result;
  
  arg1 = (ArStringInfoGroup *)jarg1; 
  arg2 = (char *)jarg2; 
  arg3 = (ArTypes::UByte2)jarg3; 
  arg4 = (ArRetFunctor< double > *)jarg4; 
  result = (bool)(arg1)->addStringDouble((char const *)arg2,arg3,arg4);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_ArStringInfoGroup_addStringBool__SWIG_0(void * jarg1, char * jarg2, unsigned short jarg3, void * jarg4, char * jarg5) {
  unsigned int jresult ;
  ArStringInfoGroup *arg1 = (ArStringInfoGroup *) 0 ;
  char *arg2 = (char *) 0 ;
  ArTypes::UByte2 arg3 ;
  ArRetFunctor< bool > *arg4 = (ArRetFunctor< bool > *) 0 ;
  char *arg5 = (char *) 0 ;
  bool result;
  
  arg1 = (ArStringInfoGroup *)jarg1; 
  arg2 = (char *)jarg2; 
  arg3 = (ArTypes::UByte2)jarg3; 
  arg4 = (ArRetFunctor< bool > *)jarg4; 
  arg5 = (char *)jarg5; 
  result = (bool)(arg1)->addStringBool((char const *)arg2,arg3,arg4,(char const *)arg5);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_ArStringInfoGroup_addStringBool__SWIG_1(void * jarg1, char * jarg2, unsigned short jarg3, void * jarg4) {
  unsigned int jresult ;
  ArStringInfoGroup *arg1 = (ArStringInfoGroup *) 0 ;
  char *arg2 = (char *) 0 ;
  ArTypes::UByte2 arg3 ;
  ArRetFunctor< bool > *arg4 = (ArRetFunctor< bool > *) 0 ;
  bool result;
  
  arg1 = (ArStringInfoGroup *)jarg1; 
  arg2 = (char *)jarg2; 
  arg3 = (ArTypes::UByte2)jarg3; 
  arg4 = (ArRetFunctor< bool > *)jarg4; 
  result = (bool)(arg1)->addStringBool((char const *)arg2,arg3,arg4);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_ArStringInfoGroup_addStringString__SWIG_0(void * jarg1, char * jarg2, unsigned short jarg3, void * jarg4, char * jarg5) {
  unsigned int jresult ;
  ArStringInfoGroup *arg1 = (ArStringInfoGroup *) 0 ;
  char *arg2 = (char *) 0 ;
  ArTypes::UByte2 arg3 ;
  ArRetFunctor< char const * > *arg4 = (ArRetFunctor< char const * > *) 0 ;
  char *arg5 = (char *) 0 ;
  bool result;
  
  arg1 = (ArStringInfoGroup *)jarg1; 
  arg2 = (char *)jarg2; 
  arg3 = (ArTypes::UByte2)jarg3; 
  arg4 = (ArRetFunctor< char const * > *)jarg4; 
  arg5 = (char *)jarg5; 
  result = (bool)(arg1)->addStringString((char const *)arg2,arg3,arg4,(char const *)arg5);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_ArStringInfoGroup_addStringString__SWIG_1(void * jarg1, char * jarg2, unsigned short jarg3, void * jarg4) {
  unsigned int jresult ;
  ArStringInfoGroup *arg1 = (ArStringInfoGroup *) 0 ;
  char *arg2 = (char *) 0 ;
  ArTypes::UByte2 arg3 ;
  ArRetFunctor< char const * > *arg4 = (ArRetFunctor< char const * > *) 0 ;
  bool result;
  
  arg1 = (ArStringInfoGroup *)jarg1; 
  arg2 = (char *)jarg2; 
  arg3 = (ArTypes::UByte2)jarg3; 
  arg4 = (ArRetFunctor< char const * > *)jarg4; 
  result = (bool)(arg1)->addStringString((char const *)arg2,arg3,arg4);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_ArStringInfoGroup_addStringString__SWIG_2(void * jarg1, char * jarg2, unsigned short jarg3, void * jarg4) {
  unsigned int jresult ;
  ArStringInfoGroup *arg1 = (ArStringInfoGroup *) 0 ;
  char *arg2 = (char *) 0 ;
  ArTypes::UByte2 arg3 ;
  ArRetFunctor< std::string > *arg4 = (ArRetFunctor< std::string > *) 0 ;
  bool result;
  
  arg1 = (ArStringInfoGroup *)jarg1; 
  arg2 = (char *)jarg2; 
  arg3 = (ArTypes::UByte2)jarg3; 
  arg4 = (ArRetFunctor< std::string > *)jarg4; 
  result = (bool)(arg1)->addStringString((char const *)arg2,arg3,arg4);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_ArStringInfoGroup_addStringUnsignedLong__SWIG_0(void * jarg1, char * jarg2, unsigned short jarg3, void * jarg4, char * jarg5, unsigned long jarg6) {
  unsigned int jresult ;
  ArStringInfoGroup *arg1 = (ArStringInfoGroup *) 0 ;
  char *arg2 = (char *) 0 ;
  ArTypes::UByte2 arg3 ;
  ArRetFunctor< unsigned long > *arg4 = (ArRetFunctor< unsigned long > *) 0 ;
  char *arg5 = (char *) 0 ;
  unsigned long arg6 ;
  bool result;
  
  arg1 = (ArStringInfoGroup *)jarg1; 
  arg2 = (char *)jarg2; 
  arg3 = (ArTypes::UByte2)jarg3; 
  arg4 = (ArRetFunctor< unsigned long > *)jarg4; 
  arg5 = (char *)jarg5; 
  arg6 = (unsigned long)jarg6; 
  result = (bool)(arg1)->addStringUnsignedLong((char const *)arg2,arg3,arg4,(char const *)arg5,arg6);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_ArStringInfoGroup_addStringUnsignedLong__SWIG_1(void * jarg1, char * jarg2, unsigned short jarg3, void * jarg4, char * jarg5) {
  unsigned int jresult ;
  ArStringInfoGroup *arg1 = (ArStringInfoGroup *) 0 ;
  char *arg2 = (char *) 0 ;
  ArTypes::UByte2 arg3 ;
  ArRetFunctor< unsigned long > *arg4 = (ArRetFunctor< unsigned long > *) 0 ;
  char *arg5 = (char *) 0 ;
  bool result;
  
  arg1 = (ArStringInfoGroup *)jarg1; 
  arg2 = (char *)jarg2; 
  arg3 = (ArTypes::UByte2)jarg3; 
  arg4 = (ArRetFunctor< unsigned long > *)jarg4; 
  arg5 = (char *)jarg5; 
  result = (bool)(arg1)->addStringUnsignedLong((char const *)arg2,arg3,arg4,(char const *)arg5);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_ArStringInfoGroup_addStringUnsignedLong__SWIG_2(void * jarg1, char * jarg2, unsigned short jarg3, void * jarg4) {
  unsigned int jresult ;
  ArStringInfoGroup *arg1 = (ArStringInfoGroup *) 0 ;
  char *arg2 = (char *) 0 ;
  ArTypes::UByte2 arg3 ;
  ArRetFunctor< unsigned long > *arg4 = (ArRetFunctor< unsigned long > *) 0 ;
  bool result;
  
  arg1 = (ArStringInfoGroup *)jarg1; 
  arg2 = (char *)jarg2; 
  arg3 = (ArTypes::UByte2)jarg3; 
  arg4 = (ArRetFunctor< unsigned long > *)jarg4; 
  result = (bool)(arg1)->addStringUnsignedLong((char const *)arg2,arg3,arg4);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_ArStringInfoGroup_addStringLong__SWIG_0(void * jarg1, char * jarg2, unsigned short jarg3, void * jarg4, char * jarg5, long jarg6) {
  unsigned int jresult ;
  ArStringInfoGroup *arg1 = (ArStringInfoGroup *) 0 ;
  char *arg2 = (char *) 0 ;
  ArTypes::UByte2 arg3 ;
  ArRetFunctor< long > *arg4 = (ArRetFunctor< long > *) 0 ;
  char *arg5 = (char *) 0 ;
  long arg6 ;
  bool result;
  
  arg1 = (ArStringInfoGroup *)jarg1; 
  arg2 = (char *)jarg2; 
  arg3 = (ArTypes::UByte2)jarg3; 
  arg4 = (ArRetFunctor< long > *)jarg4; 
  arg5 = (char *)jarg5; 
  arg6 = (long)jarg6; 
  result = (bool)(arg1)->addStringLong((char const *)arg2,arg3,arg4,(char const *)arg5,arg6);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_ArStringInfoGroup_addStringLong__SWIG_1(void * jarg1, char * jarg2, unsigned short jarg3, void * jarg4, char * jarg5) {
  unsigned int jresult ;
  ArStringInfoGroup *arg1 = (ArStringInfoGroup *) 0 ;
  char *arg2 = (char *) 0 ;
  ArTypes::UByte2 arg3 ;
  ArRetFunctor< long > *arg4 = (ArRetFunctor< long > *) 0 ;
  char *arg5 = (char *) 0 ;
  bool result;
  
  arg1 = (ArStringInfoGroup *)jarg1; 
  arg2 = (char *)jarg2; 
  arg3 = (ArTypes::UByte2)jarg3; 
  arg4 = (ArRetFunctor< long > *)jarg4; 
  arg5 = (char *)jarg5; 
  result = (bool)(arg1)->addStringLong((char const *)arg2,arg3,arg4,(char const *)arg5);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_ArStringInfoGroup_addStringLong__SWIG_2(void * jarg1, char * jarg2, unsigned short jarg3, void * jarg4) {
  unsigned int jresult ;
  ArStringInfoGroup *arg1 = (ArStringInfoGroup *) 0 ;
  char *arg2 = (char *) 0 ;
  ArTypes::UByte2 arg3 ;
  ArRetFunctor< long > *arg4 = (ArRetFunctor< long > *) 0 ;
  bool result;
  
  arg1 = (ArStringInfoGroup *)jarg1; 
  arg2 = (char *)jarg2; 
  arg3 = (ArTypes::UByte2)jarg3; 
  arg4 = (ArRetFunctor< long > *)jarg4; 
  result = (bool)(arg1)->addStringLong((char const *)arg2,arg3,arg4);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_ArStringInfoGroup_addStringTime__SWIG_0(void * jarg1, char * jarg2, unsigned short jarg3, void * jarg4, char * jarg5) {
  unsigned int jresult ;
  ArStringInfoGroup *arg1 = (ArStringInfoGroup *) 0 ;
  char *arg2 = (char *) 0 ;
  ArTypes::UByte2 arg3 ;
  ArRetFunctor< ArTime > *arg4 = (ArRetFunctor< ArTime > *) 0 ;
  char *arg5 = (char *) 0 ;
  bool result;
  
  arg1 = (ArStringInfoGroup *)jarg1; 
  arg2 = (char *)jarg2; 
  arg3 = (ArTypes::UByte2)jarg3; 
  arg4 = (ArRetFunctor< ArTime > *)jarg4; 
  arg5 = (char *)jarg5; 
  result = (bool)(arg1)->addStringTime((char const *)arg2,arg3,arg4,(char const *)arg5);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_ArStringInfoGroup_addStringTime__SWIG_1(void * jarg1, char * jarg2, unsigned short jarg3, void * jarg4) {
  unsigned int jresult ;
  ArStringInfoGroup *arg1 = (ArStringInfoGroup *) 0 ;
  char *arg2 = (char *) 0 ;
  ArTypes::UByte2 arg3 ;
  ArRetFunctor< ArTime > *arg4 = (ArRetFunctor< ArTime > *) 0 ;
  bool result;
  
  arg1 = (ArStringInfoGroup *)jarg1; 
  arg2 = (char *)jarg2; 
  arg3 = (ArTypes::UByte2)jarg3; 
  arg4 = (ArRetFunctor< ArTime > *)jarg4; 
  result = (bool)(arg1)->addStringTime((char const *)arg2,arg3,arg4);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_ArStringInfoGroup_addStringFloat__SWIG_0(void * jarg1, char * jarg2, unsigned short jarg3, void * jarg4, char * jarg5) {
  unsigned int jresult ;
  ArStringInfoGroup *arg1 = (ArStringInfoGroup *) 0 ;
  char *arg2 = (char *) 0 ;
  ArTypes::UByte2 arg3 ;
  ArRetFunctor< float > *arg4 = (ArRetFunctor< float > *) 0 ;
  char *arg5 = (char *) 0 ;
  bool result;
  
  arg1 = (ArStringInfoGroup *)jarg1; 
  arg2 = (char *)jarg2; 
  arg3 = (ArTypes::UByte2)jarg3; 
  arg4 = (ArRetFunctor< float > *)jarg4; 
  arg5 = (char *)jarg5; 
  result = (bool)(arg1)->addStringFloat((char const *)arg2,arg3,arg4,(char const *)arg5);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_ArStringInfoGroup_addStringFloat__SWIG_1(void * jarg1, char * jarg2, unsigned short jarg3, void * jarg4) {
  unsigned int jresult ;
  ArStringInfoGroup *arg1 = (ArStringInfoGroup *) 0 ;
  char *arg2 = (char *) 0 ;
  ArTypes::UByte2 arg3 ;
  ArRetFunctor< float > *arg4 = (ArRetFunctor< float > *) 0 ;
  bool result;
  
  arg1 = (ArStringInfoGroup *)jarg1; 
  arg2 = (char *)jarg2; 
  arg3 = (ArTypes::UByte2)jarg3; 
  arg4 = (ArRetFunctor< float > *)jarg4; 
  result = (bool)(arg1)->addStringFloat((char const *)arg2,arg3,arg4);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_ArStringInfoGroup_addAddStringCallback__SWIG_0(void * jarg1, void * jarg2, int jarg3) {
  ArStringInfoGroup *arg1 = (ArStringInfoGroup *) 0 ;
  ArFunctor3< char const *,ArTypes::UByte2,ArFunctor2< char *,ArTypes::UByte2 > * > *arg2 = (ArFunctor3< char const *,ArTypes::UByte2,ArFunctor2< char *,ArTypes::UByte2 > * > *) 0 ;
  ArListPos::Pos arg3 ;
  
  arg1 = (ArStringInfoGroup *)jarg1; 
  arg2 = (ArFunctor3< char const *,ArTypes::UByte2,ArFunctor2< char *,ArTypes::UByte2 > * > *)jarg2; 
  arg3 = (ArListPos::Pos)jarg3; 
  (arg1)->addAddStringCallback(arg2,arg3);
}


SWIGEXPORT void SWIGSTDCALL CSharp_ArStringInfoGroup_addAddStringCallback__SWIG_1(void * jarg1, void * jarg2) {
  ArStringInfoGroup *arg1 = (ArStringInfoGroup *) 0 ;
  ArFunctor3< char const *,ArTypes::UByte2,ArFunctor2< char *,ArTypes::UByte2 > * > *arg2 = (ArFunctor3< char const *,ArTypes::UByte2,ArFunctor2< char *,ArTypes::UByte2 > * > *) 0 ;
  
  arg1 = (ArStringInfoGroup *)jarg1; 
  arg2 = (ArFunctor3< char const *,ArTypes::UByte2,ArFunctor2< char *,ArTypes::UByte2 > * > *)jarg2; 
  (arg1)->addAddStringCallback(arg2);
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_ArSyncLoop() {
  void * jresult ;
  ArSyncLoop *result = 0 ;
  
  result = (ArSyncLoop *)new ArSyncLoop();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_ArSyncLoop(void * jarg1) {
  ArSyncLoop *arg1 = (ArSyncLoop *) 0 ;
  
  arg1 = (ArSyncLoop *)jarg1; 
  delete arg1;
}


SWIGEXPORT void SWIGSTDCALL CSharp_ArSyncLoop_setRobot(void * jarg1, void * jarg2) {
  ArSyncLoop *arg1 = (ArSyncLoop *) 0 ;
  ArRobot *arg2 = (ArRobot *) 0 ;
  
  arg1 = (ArSyncLoop *)jarg1; 
  arg2 = (ArRobot *)jarg2; 
  (arg1)->setRobot(arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_ArSyncLoop_stopRunIfNotConnected(void * jarg1, unsigned int jarg2) {
  ArSyncLoop *arg1 = (ArSyncLoop *) 0 ;
  bool arg2 ;
  
  arg1 = (ArSyncLoop *)jarg1; 
  arg2 = jarg2 ? true : false; 
  (arg1)->stopRunIfNotConnected(arg2);
}


SWIGEXPORT void * SWIGSTDCALL CSharp_ArSyncLoop_runThread(void * jarg1, void * jarg2) {
  void * jresult ;
  ArSyncLoop *arg1 = (ArSyncLoop *) 0 ;
  void *arg2 = (void *) 0 ;
  void *result = 0 ;
  
  arg1 = (ArSyncLoop *)jarg1; 
  arg2 = (void *)jarg2; 
  result = (void *)(arg1)->runThread(arg2);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT char * SWIGSTDCALL CSharp_ArSyncLoop_getThreadActivity(void * jarg1) {
  char * jresult ;
  ArSyncLoop *arg1 = (ArSyncLoop *) 0 ;
  char *result = 0 ;
  
  arg1 = (ArSyncLoop *)jarg1; 
  result = (char *)(arg1)->getThreadActivity();
  jresult = SWIG_csharp_string_callback((const char *)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_ArSyncTask__SWIG_0(char * jarg1, void * jarg2, void * jarg3, void * jarg4) {
  void * jresult ;
  char *arg1 = (char *) 0 ;
  ArFunctor *arg2 = (ArFunctor *) 0 ;
  ArTaskState::State *arg3 = (ArTaskState::State *) 0 ;
  ArSyncTask *arg4 = (ArSyncTask *) 0 ;
  ArSyncTask *result = 0 ;
  
  arg1 = (char *)jarg1; 
  arg2 = (ArFunctor *)jarg2; 
  arg3 = (ArTaskState::State *)jarg3; 
  arg4 = (ArSyncTask *)jarg4; 
  result = (ArSyncTask *)new ArSyncTask((char const *)arg1,arg2,arg3,arg4);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_ArSyncTask__SWIG_1(char * jarg1, void * jarg2, void * jarg3) {
  void * jresult ;
  char *arg1 = (char *) 0 ;
  ArFunctor *arg2 = (ArFunctor *) 0 ;
  ArTaskState::State *arg3 = (ArTaskState::State *) 0 ;
  ArSyncTask *result = 0 ;
  
  arg1 = (char *)jarg1; 
  arg2 = (ArFunctor *)jarg2; 
  arg3 = (ArTaskState::State *)jarg3; 
  result = (ArSyncTask *)new ArSyncTask((char const *)arg1,arg2,arg3);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_ArSyncTask__SWIG_2(char * jarg1, void * jarg2) {
  void * jresult ;
  char *arg1 = (char *) 0 ;
  ArFunctor *arg2 = (ArFunctor *) 0 ;
  ArSyncTask *result = 0 ;
  
  arg1 = (char *)jarg1; 
  arg2 = (ArFunctor *)jarg2; 
  result = (ArSyncTask *)new ArSyncTask((char const *)arg1,arg2);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_ArSyncTask__SWIG_3(char * jarg1) {
  void * jresult ;
  char *arg1 = (char *) 0 ;
  ArSyncTask *result = 0 ;
  
  arg1 = (char *)jarg1; 
  result = (ArSyncTask *)new ArSyncTask((char const *)arg1);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_ArSyncTask(void * jarg1) {
  ArSyncTask *arg1 = (ArSyncTask *) 0 ;
  
  arg1 = (ArSyncTask *)jarg1; 
  delete arg1;
}


SWIGEXPORT void SWIGSTDCALL CSharp_ArSyncTask_run(void * jarg1) {
  ArSyncTask *arg1 = (ArSyncTask *) 0 ;
  
  arg1 = (ArSyncTask *)jarg1; 
  (arg1)->run();
}


SWIGEXPORT void SWIGSTDCALL CSharp_ArSyncTask_log__SWIG_0(void * jarg1, int jarg2) {
  ArSyncTask *arg1 = (ArSyncTask *) 0 ;
  int arg2 ;
  
  arg1 = (ArSyncTask *)jarg1; 
  arg2 = (int)jarg2; 
  (arg1)->log(arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_ArSyncTask_log__SWIG_1(void * jarg1) {
  ArSyncTask *arg1 = (ArSyncTask *) 0 ;
  
  arg1 = (ArSyncTask *)jarg1; 
  (arg1)->log();
}


SWIGEXPORT int SWIGSTDCALL CSharp_ArSyncTask_getState(void * jarg1) {
  int jresult ;
  ArSyncTask *arg1 = (ArSyncTask *) 0 ;
  ArTaskState::State result;
  
  arg1 = (ArSyncTask *)jarg1; 
  result = (ArTaskState::State)(arg1)->getState();
  jresult = (int)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_ArSyncTask_setState(void * jarg1, int jarg2) {
  ArSyncTask *arg1 = (ArSyncTask *) 0 ;
  ArTaskState::State arg2 ;
  
  arg1 = (ArSyncTask *)jarg1; 
  arg2 = (ArTaskState::State)jarg2; 
  (arg1)->setState(arg2);
}


SWIGEXPORT void * SWIGSTDCALL CSharp_ArSyncTask_findNonRecursive__SWIG_0(void * jarg1, char * jarg2) {
  void * jresult ;
  ArSyncTask *arg1 = (ArSyncTask *) 0 ;
  char *arg2 = (char *) 0 ;
  ArSyncTask *result = 0 ;
  
  arg1 = (ArSyncTask *)jarg1; 
  arg2 = (char *)jarg2; 
  result = (ArSyncTask *)(arg1)->findNonRecursive((char const *)arg2);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_ArSyncTask_findNonRecursive__SWIG_1(void * jarg1, void * jarg2) {
  void * jresult ;
  ArSyncTask *arg1 = (ArSyncTask *) 0 ;
  ArFunctor *arg2 = (ArFunctor *) 0 ;
  ArSyncTask *result = 0 ;
  
  arg1 = (ArSyncTask *)jarg1; 
  arg2 = (ArFunctor *)jarg2; 
  result = (ArSyncTask *)(arg1)->findNonRecursive(arg2);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_ArSyncTask_find__SWIG_0(void * jarg1, char * jarg2) {
  void * jresult ;
  ArSyncTask *arg1 = (ArSyncTask *) 0 ;
  char *arg2 = (char *) 0 ;
  ArSyncTask *result = 0 ;
  
  arg1 = (ArSyncTask *)jarg1; 
  arg2 = (char *)jarg2; 
  result = (ArSyncTask *)(arg1)->find((char const *)arg2);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_ArSyncTask_find__SWIG_1(void * jarg1, void * jarg2) {
  void * jresult ;
  ArSyncTask *arg1 = (ArSyncTask *) 0 ;
  ArFunctor *arg2 = (ArFunctor *) 0 ;
  ArSyncTask *result = 0 ;
  
  arg1 = (ArSyncTask *)jarg1; 
  arg2 = (ArFunctor *)jarg2; 
  result = (ArSyncTask *)(arg1)->find(arg2);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_ArSyncTask_getRunning(void * jarg1) {
  void * jresult ;
  ArSyncTask *arg1 = (ArSyncTask *) 0 ;
  ArSyncTask *result = 0 ;
  
  arg1 = (ArSyncTask *)jarg1; 
  result = (ArSyncTask *)(arg1)->getRunning();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_ArSyncTask_addNewBranch__SWIG_0(void * jarg1, char * jarg2, int jarg3, void * jarg4) {
  ArSyncTask *arg1 = (ArSyncTask *) 0 ;
  char *arg2 = (char *) 0 ;
  int arg3 ;
  ArTaskState::State *arg4 = (ArTaskState::State *) 0 ;
  
  arg1 = (ArSyncTask *)jarg1; 
  arg2 = (char *)jarg2; 
  arg3 = (int)jarg3; 
  arg4 = (ArTaskState::State *)jarg4; 
  (arg1)->addNewBranch((char const *)arg2,arg3,arg4);
}


SWIGEXPORT void SWIGSTDCALL CSharp_ArSyncTask_addNewBranch__SWIG_1(void * jarg1, char * jarg2, int jarg3) {
  ArSyncTask *arg1 = (ArSyncTask *) 0 ;
  char *arg2 = (char *) 0 ;
  int arg3 ;
  
  arg1 = (ArSyncTask *)jarg1; 
  arg2 = (char *)jarg2; 
  arg3 = (int)jarg3; 
  (arg1)->addNewBranch((char const *)arg2,arg3);
}


SWIGEXPORT void SWIGSTDCALL CSharp_ArSyncTask_addNewLeaf__SWIG_0(void * jarg1, char * jarg2, int jarg3, void * jarg4, void * jarg5) {
  ArSyncTask *arg1 = (ArSyncTask *) 0 ;
  char *arg2 = (char *) 0 ;
  int arg3 ;
  ArFunctor *arg4 = (ArFunctor *) 0 ;
  ArTaskState::State *arg5 = (ArTaskState::State *) 0 ;
  
  arg1 = (ArSyncTask *)jarg1; 
  arg2 = (char *)jarg2; 
  arg3 = (int)jarg3; 
  arg4 = (ArFunctor *)jarg4; 
  arg5 = (ArTaskState::State *)jarg5; 
  (arg1)->addNewLeaf((char const *)arg2,arg3,arg4,arg5);
}


SWIGEXPORT void SWIGSTDCALL CSharp_ArSyncTask_addNewLeaf__SWIG_1(void * jarg1, char * jarg2, int jarg3, void * jarg4) {
  ArSyncTask *arg1 = (ArSyncTask *) 0 ;
  char *arg2 = (char *) 0 ;
  int arg3 ;
  ArFunctor *arg4 = (ArFunctor *) 0 ;
  
  arg1 = (ArSyncTask *)jarg1; 
  arg2 = (char *)jarg2; 
  arg3 = (int)jarg3; 
  arg4 = (ArFunctor *)jarg4; 
  (arg1)->addNewLeaf((char const *)arg2,arg3,arg4);
}


SWIGEXPORT char * SWIGSTDCALL CSharp_ArSyncTask_getName(void * jarg1) {
  char * jresult ;
  ArSyncTask *arg1 = (ArSyncTask *) 0 ;
  std::string result;
  
  arg1 = (ArSyncTask *)jarg1; 
  result = (arg1)->getName();
  jresult = SWIG_csharp_string_callback((&result)->c_str()); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_ArSyncTask_getFunctor(void * jarg1) {
  void * jresult ;
  ArSyncTask *arg1 = (ArSyncTask *) 0 ;
  ArFunctor *result = 0 ;
  
  arg1 = (ArSyncTask *)jarg1; 
  result = (ArFunctor *)(arg1)->getFunctor();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_ArSyncTask_setWarningTimeCB(void * jarg1, void * jarg2) {
  ArSyncTask *arg1 = (ArSyncTask *) 0 ;
  ArRetFunctor< unsigned int > *arg2 = (ArRetFunctor< unsigned int > *) 0 ;
  
  arg1 = (ArSyncTask *)jarg1; 
  arg2 = (ArRetFunctor< unsigned int > *)jarg2; 
  (arg1)->setWarningTimeCB(arg2);
}


SWIGEXPORT void * SWIGSTDCALL CSharp_ArSyncTask_getWarningTimeCB(void * jarg1) {
  void * jresult ;
  ArSyncTask *arg1 = (ArSyncTask *) 0 ;
  ArRetFunctor< unsigned int > *result = 0 ;
  
  arg1 = (ArSyncTask *)jarg1; 
  result = (ArRetFunctor< unsigned int > *)(arg1)->getWarningTimeCB();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_ArSyncTask_setNoTimeWarningCB(void * jarg1, void * jarg2) {
  ArSyncTask *arg1 = (ArSyncTask *) 0 ;
  ArRetFunctor< bool > *arg2 = (ArRetFunctor< bool > *) 0 ;
  
  arg1 = (ArSyncTask *)jarg1; 
  arg2 = (ArRetFunctor< bool > *)jarg2; 
  (arg1)->setNoTimeWarningCB(arg2);
}


SWIGEXPORT void * SWIGSTDCALL CSharp_ArSyncTask_getNoTimeWarningCB(void * jarg1) {
  void * jresult ;
  ArSyncTask *arg1 = (ArSyncTask *) 0 ;
  ArRetFunctor< bool > *result = 0 ;
  
  arg1 = (ArSyncTask *)jarg1; 
  result = (ArRetFunctor< bool > *)(arg1)->getNoTimeWarningCB();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_ArSyncTask_remove(void * jarg1, void * jarg2) {
  ArSyncTask *arg1 = (ArSyncTask *) 0 ;
  ArSyncTask *arg2 = (ArSyncTask *) 0 ;
  
  arg1 = (ArSyncTask *)jarg1; 
  arg2 = (ArSyncTask *)jarg2; 
  (arg1)->remove(arg2);
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_ArSyncTask_isDeleting(void * jarg1) {
  unsigned int jresult ;
  ArSyncTask *arg1 = (ArSyncTask *) 0 ;
  bool result;
  
  arg1 = (ArSyncTask *)jarg1; 
  result = (bool)(arg1)->isDeleting();
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_ArSystemStatus_startPeriodicUpdate__SWIG_0(int jarg1, int jarg2) {
  int arg1 ;
  ArLog::LogLevel arg2 ;
  
  arg1 = (int)jarg1; 
  arg2 = (ArLog::LogLevel)jarg2; 
  ArSystemStatus::startPeriodicUpdate(arg1,arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_ArSystemStatus_startPeriodicUpdate__SWIG_1(int jarg1) {
  int arg1 ;
  
  arg1 = (int)jarg1; 
  ArSystemStatus::startPeriodicUpdate(arg1);
}


SWIGEXPORT void SWIGSTDCALL CSharp_ArSystemStatus_startPeriodicUpdate__SWIG_2() {
  ArSystemStatus::startPeriodicUpdate();
}


SWIGEXPORT void SWIGSTDCALL CSharp_ArSystemStatus_stopPeriodicUpdate() {
  ArSystemStatus::stopPeriodicUpdate();
}


SWIGEXPORT void SWIGSTDCALL CSharp_ArSystemStatus_runRefreshThread__SWIG_0(int jarg1) {
  int arg1 ;
  
  arg1 = (int)jarg1; 
  ArSystemStatus::runRefreshThread(arg1);
}


SWIGEXPORT void SWIGSTDCALL CSharp_ArSystemStatus_runRefreshThread__SWIG_1() {
  ArSystemStatus::runRefreshThread();
}


SWIGEXPORT double SWIGSTDCALL CSharp_ArSystemStatus_getCPU() {
  double jresult ;
  double result;
  
  result = (double)ArSystemStatus::getCPU();
  jresult = result; 
  return jresult;
}


SWIGEXPORT double SWIGSTDCALL CSharp_ArSystemStatus_getCPUPercent() {
  double jresult ;
  double result;
  
  result = (double)ArSystemStatus::getCPUPercent();
  jresult = result; 
  return jresult;
}


SWIGEXPORT char * SWIGSTDCALL CSharp_ArSystemStatus_getCPUPercentAsString() {
  char * jresult ;
  std::string result;
  
  result = ArSystemStatus::getCPUPercentAsString();
  jresult = SWIG_csharp_string_callback((&result)->c_str()); 
  return jresult;
}


SWIGEXPORT unsigned long SWIGSTDCALL CSharp_ArSystemStatus_getUptime() {
  unsigned long jresult ;
  unsigned long result;
  
  result = (unsigned long)ArSystemStatus::getUptime();
  jresult = (unsigned long)result; 
  return jresult;
}


SWIGEXPORT unsigned long SWIGSTDCALL CSharp_ArSystemStatus_getProgramUptime() {
  unsigned long jresult ;
  unsigned long result;
  
  result = (unsigned long)ArSystemStatus::getProgramUptime();
  jresult = (unsigned long)result; 
  return jresult;
}


SWIGEXPORT double SWIGSTDCALL CSharp_ArSystemStatus_getUptimeHours() {
  double jresult ;
  double result;
  
  result = (double)ArSystemStatus::getUptimeHours();
  jresult = result; 
  return jresult;
}


SWIGEXPORT char * SWIGSTDCALL CSharp_ArSystemStatus_getUptimeHoursAsString() {
  char * jresult ;
  std::string result;
  
  result = ArSystemStatus::getUptimeHoursAsString();
  jresult = SWIG_csharp_string_callback((&result)->c_str()); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_ArSystemStatus_getCPUPercentFunctor() {
  void * jresult ;
  ArRetFunctor< double > *result = 0 ;
  
  result = (ArRetFunctor< double > *)ArSystemStatus::getCPUPercentFunctor();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_ArSystemStatus_getUptimeHoursFunctor() {
  void * jresult ;
  ArRetFunctor< double > *result = 0 ;
  
  result = (ArRetFunctor< double > *)ArSystemStatus::getUptimeHoursFunctor();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_ArSystemStatus_getUptimeFunctor() {
  void * jresult ;
  ArRetFunctor< unsigned long > *result = 0 ;
  
  result = (ArRetFunctor< unsigned long > *)ArSystemStatus::getUptimeFunctor();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_ArSystemStatus_getProgramUptimeFunctor() {
  void * jresult ;
  ArRetFunctor< unsigned long > *result = 0 ;
  
  result = (ArRetFunctor< unsigned long > *)ArSystemStatus::getProgramUptimeFunctor();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_ArSystemStatus_getWirelessLinkQuality() {
  int jresult ;
  int result;
  
  result = (int)ArSystemStatus::getWirelessLinkQuality();
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_ArSystemStatus_getWirelessLinkSignal() {
  int jresult ;
  int result;
  
  result = (int)ArSystemStatus::getWirelessLinkSignal();
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_ArSystemStatus_getWirelessLinkNoise() {
  int jresult ;
  int result;
  
  result = (int)ArSystemStatus::getWirelessLinkNoise();
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_ArSystemStatus_getWirelessDiscardedPackets() {
  int jresult ;
  int result;
  
  result = (int)ArSystemStatus::getWirelessDiscardedPackets();
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_ArSystemStatus_getWirelessDiscardedPacketsBecauseNetConflict() {
  int jresult ;
  int result;
  
  result = (int)ArSystemStatus::getWirelessDiscardedPacketsBecauseNetConflict();
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_ArSystemStatus_getMTXWirelessLink() {
  int jresult ;
  int result;
  
  result = (int)ArSystemStatus::getMTXWirelessLink();
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_ArSystemStatus_getMTXWirelessQuality() {
  int jresult ;
  int result;
  
  result = (int)ArSystemStatus::getMTXWirelessQuality();
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_ArSystemStatus_getMTXWirelessIpAddress1() {
  int jresult ;
  int result;
  
  result = (int)ArSystemStatus::getMTXWirelessIpAddress1();
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_ArSystemStatus_getMTXWirelessIpAddress2() {
  int jresult ;
  int result;
  
  result = (int)ArSystemStatus::getMTXWirelessIpAddress2();
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_ArSystemStatus_getMTXWirelessIpAddress3() {
  int jresult ;
  int result;
  
  result = (int)ArSystemStatus::getMTXWirelessIpAddress3();
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_ArSystemStatus_getMTXWirelessIpAddress4() {
  int jresult ;
  int result;
  
  result = (int)ArSystemStatus::getMTXWirelessIpAddress4();
  jresult = result; 
  return jresult;
}


SWIGEXPORT char * SWIGSTDCALL CSharp_ArSystemStatus_getMTXWirelessIpAddressString() {
  char * jresult ;
  char *result = 0 ;
  
  result = (char *)ArSystemStatus::getMTXWirelessIpAddressString();
  jresult = SWIG_csharp_string_callback((const char *)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_ArSystemStatus_getWirelessLinkQualityFunctor() {
  void * jresult ;
  ArRetFunctor< int > *result = 0 ;
  
  result = (ArRetFunctor< int > *)ArSystemStatus::getWirelessLinkQualityFunctor();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_ArSystemStatus_getWirelessLinkNoiseFunctor() {
  void * jresult ;
  ArRetFunctor< int > *result = 0 ;
  
  result = (ArRetFunctor< int > *)ArSystemStatus::getWirelessLinkNoiseFunctor();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_ArSystemStatus_getWirelessLinkSignalFunctor() {
  void * jresult ;
  ArRetFunctor< int > *result = 0 ;
  
  result = (ArRetFunctor< int > *)ArSystemStatus::getWirelessLinkSignalFunctor();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_ArSystemStatus_getMTXWirelessLinkFunctor() {
  void * jresult ;
  ArRetFunctor< int > *result = 0 ;
  
  result = (ArRetFunctor< int > *)ArSystemStatus::getMTXWirelessLinkFunctor();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_ArSystemStatus_getMTXWirelessQualityFunctor() {
  void * jresult ;
  ArRetFunctor< int > *result = 0 ;
  
  result = (ArRetFunctor< int > *)ArSystemStatus::getMTXWirelessQualityFunctor();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_ArSystemStatus_invalidate() {
  ArSystemStatus::invalidate();
}


SWIGEXPORT void SWIGSTDCALL CSharp_ArSystemStatus_refresh() {
  ArSystemStatus::refresh();
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_ArSystemStatus() {
  void * jresult ;
  ArSystemStatus *result = 0 ;
  
  result = (ArSystemStatus *)new ArSystemStatus();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_ArSystemStatus(void * jarg1) {
  ArSystemStatus *arg1 = (ArSystemStatus *) 0 ;
  
  arg1 = (ArSystemStatus *)jarg1; 
  delete arg1;
}


SWIGEXPORT char * SWIGSTDCALL CSharp_ARTCM2_DEFAULT_SERIAL_PORT_get() {
  char * jresult ;
  char *result = 0 ;
  
  result = (char *)("/dev/ttyS3");
  jresult = SWIG_csharp_string_callback((const char *)result); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_ArTCM2(void * jarg1) {
  ArTCM2 *arg1 = (ArTCM2 *) 0 ;
  
  arg1 = (ArTCM2 *)jarg1; 
  delete arg1;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_ArTCM2_connect(void * jarg1) {
  unsigned int jresult ;
  ArTCM2 *arg1 = (ArTCM2 *) 0 ;
  bool result;
  
  arg1 = (ArTCM2 *)jarg1; 
  result = (bool)(arg1)->connect();
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_ArTCM2_blockingConnect__SWIG_0(void * jarg1, unsigned long jarg2) {
  unsigned int jresult ;
  ArTCM2 *arg1 = (ArTCM2 *) 0 ;
  unsigned long arg2 ;
  bool result;
  
  arg1 = (ArTCM2 *)jarg1; 
  arg2 = (unsigned long)jarg2; 
  result = (bool)(arg1)->blockingConnect(arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_ArTCM2_blockingConnect__SWIG_1(void * jarg1) {
  unsigned int jresult ;
  ArTCM2 *arg1 = (ArTCM2 *) 0 ;
  bool result;
  
  arg1 = (ArTCM2 *)jarg1; 
  result = (bool)(arg1)->blockingConnect();
  jresult = result; 
  return jresult;
}


SWIGEXPORT double SWIGSTDCALL CSharp_ArTCM2_getHeading(void * jarg1) {
  double jresult ;
  ArTCM2 *arg1 = (ArTCM2 *) 0 ;
  double result;
  
  arg1 = (ArTCM2 *)jarg1; 
  result = (double)((ArTCM2 const *)arg1)->getHeading();
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_ArTCM2_haveHeading(void * jarg1) {
  unsigned int jresult ;
  ArTCM2 *arg1 = (ArTCM2 *) 0 ;
  bool result;
  
  arg1 = (ArTCM2 *)jarg1; 
  result = (bool)((ArTCM2 const *)arg1)->haveHeading();
  jresult = result; 
  return jresult;
}


SWIGEXPORT double SWIGSTDCALL CSharp_ArTCM2_getCompass(void * jarg1) {
  double jresult ;
  ArTCM2 *arg1 = (ArTCM2 *) 0 ;
  double result;
  
  arg1 = (ArTCM2 *)jarg1; 
  result = (double)((ArTCM2 const *)arg1)->getCompass();
  jresult = result; 
  return jresult;
}


SWIGEXPORT double SWIGSTDCALL CSharp_ArTCM2_getPitch(void * jarg1) {
  double jresult ;
  ArTCM2 *arg1 = (ArTCM2 *) 0 ;
  double result;
  
  arg1 = (ArTCM2 *)jarg1; 
  result = (double)((ArTCM2 const *)arg1)->getPitch();
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_ArTCM2_havePitch(void * jarg1) {
  unsigned int jresult ;
  ArTCM2 *arg1 = (ArTCM2 *) 0 ;
  bool result;
  
  arg1 = (ArTCM2 *)jarg1; 
  result = (bool)((ArTCM2 const *)arg1)->havePitch();
  jresult = result; 
  return jresult;
}


SWIGEXPORT double SWIGSTDCALL CSharp_ArTCM2_getRoll(void * jarg1) {
  double jresult ;
  ArTCM2 *arg1 = (ArTCM2 *) 0 ;
  double result;
  
  arg1 = (ArTCM2 *)jarg1; 
  result = (double)((ArTCM2 const *)arg1)->getRoll();
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_ArTCM2_haveRoll(void * jarg1) {
  unsigned int jresult ;
  ArTCM2 *arg1 = (ArTCM2 *) 0 ;
  bool result;
  
  arg1 = (ArTCM2 *)jarg1; 
  result = (bool)((ArTCM2 const *)arg1)->haveRoll();
  jresult = result; 
  return jresult;
}


SWIGEXPORT double SWIGSTDCALL CSharp_ArTCM2_getXMagnetic(void * jarg1) {
  double jresult ;
  ArTCM2 *arg1 = (ArTCM2 *) 0 ;
  double result;
  
  arg1 = (ArTCM2 *)jarg1; 
  result = (double)((ArTCM2 const *)arg1)->getXMagnetic();
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_ArTCM2_haveXMagnetic(void * jarg1) {
  unsigned int jresult ;
  ArTCM2 *arg1 = (ArTCM2 *) 0 ;
  bool result;
  
  arg1 = (ArTCM2 *)jarg1; 
  result = (bool)((ArTCM2 const *)arg1)->haveXMagnetic();
  jresult = result; 
  return jresult;
}


SWIGEXPORT double SWIGSTDCALL CSharp_ArTCM2_getYMagnetic(void * jarg1) {
  double jresult ;
  ArTCM2 *arg1 = (ArTCM2 *) 0 ;
  double result;
  
  arg1 = (ArTCM2 *)jarg1; 
  result = (double)((ArTCM2 const *)arg1)->getYMagnetic();
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_ArTCM2_haveYMagnetic(void * jarg1) {
  unsigned int jresult ;
  ArTCM2 *arg1 = (ArTCM2 *) 0 ;
  bool result;
  
  arg1 = (ArTCM2 *)jarg1; 
  result = (bool)((ArTCM2 const *)arg1)->haveYMagnetic();
  jresult = result; 
  return jresult;
}


SWIGEXPORT double SWIGSTDCALL CSharp_ArTCM2_getZMagnetic(void * jarg1) {
  double jresult ;
  ArTCM2 *arg1 = (ArTCM2 *) 0 ;
  double result;
  
  arg1 = (ArTCM2 *)jarg1; 
  result = (double)((ArTCM2 const *)arg1)->getZMagnetic();
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_ArTCM2_haveZMagnetic(void * jarg1) {
  unsigned int jresult ;
  ArTCM2 *arg1 = (ArTCM2 *) 0 ;
  bool result;
  
  arg1 = (ArTCM2 *)jarg1; 
  result = (bool)((ArTCM2 const *)arg1)->haveZMagnetic();
  jresult = result; 
  return jresult;
}


SWIGEXPORT double SWIGSTDCALL CSharp_ArTCM2_getTemperature(void * jarg1) {
  double jresult ;
  ArTCM2 *arg1 = (ArTCM2 *) 0 ;
  double result;
  
  arg1 = (ArTCM2 *)jarg1; 
  result = (double)((ArTCM2 const *)arg1)->getTemperature();
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_ArTCM2_haveTemperature(void * jarg1) {
  unsigned int jresult ;
  ArTCM2 *arg1 = (ArTCM2 *) 0 ;
  bool result;
  
  arg1 = (ArTCM2 *)jarg1; 
  result = (bool)((ArTCM2 const *)arg1)->haveTemperature();
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_ArTCM2_getError(void * jarg1) {
  int jresult ;
  ArTCM2 *arg1 = (ArTCM2 *) 0 ;
  int result;
  
  arg1 = (ArTCM2 *)jarg1; 
  result = (int)((ArTCM2 const *)arg1)->getError();
  jresult = result; 
  return jresult;
}


SWIGEXPORT double SWIGSTDCALL CSharp_ArTCM2_getCalibrationH(void * jarg1) {
  double jresult ;
  ArTCM2 *arg1 = (ArTCM2 *) 0 ;
  double result;
  
  arg1 = (ArTCM2 *)jarg1; 
  result = (double)((ArTCM2 const *)arg1)->getCalibrationH();
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_ArTCM2_haveCalibrationH(void * jarg1) {
  unsigned int jresult ;
  ArTCM2 *arg1 = (ArTCM2 *) 0 ;
  bool result;
  
  arg1 = (ArTCM2 *)jarg1; 
  result = (bool)((ArTCM2 const *)arg1)->haveCalibrationH();
  jresult = result; 
  return jresult;
}


SWIGEXPORT double SWIGSTDCALL CSharp_ArTCM2_getCalibrationV(void * jarg1) {
  double jresult ;
  ArTCM2 *arg1 = (ArTCM2 *) 0 ;
  double result;
  
  arg1 = (ArTCM2 *)jarg1; 
  result = (double)((ArTCM2 const *)arg1)->getCalibrationV();
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_ArTCM2_haveCalibrationV(void * jarg1) {
  unsigned int jresult ;
  ArTCM2 *arg1 = (ArTCM2 *) 0 ;
  bool result;
  
  arg1 = (ArTCM2 *)jarg1; 
  result = (bool)((ArTCM2 const *)arg1)->haveCalibrationV();
  jresult = result; 
  return jresult;
}


SWIGEXPORT double SWIGSTDCALL CSharp_ArTCM2_getCalibrationM(void * jarg1) {
  double jresult ;
  ArTCM2 *arg1 = (ArTCM2 *) 0 ;
  double result;
  
  arg1 = (ArTCM2 *)jarg1; 
  result = (double)((ArTCM2 const *)arg1)->getCalibrationM();
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_ArTCM2_haveCalibrationM(void * jarg1) {
  unsigned int jresult ;
  ArTCM2 *arg1 = (ArTCM2 *) 0 ;
  bool result;
  
  arg1 = (ArTCM2 *)jarg1; 
  result = (bool)((ArTCM2 const *)arg1)->haveCalibrationM();
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_ArTCM2_commandOff(void * jarg1) {
  ArTCM2 *arg1 = (ArTCM2 *) 0 ;
  
  arg1 = (ArTCM2 *)jarg1; 
  (arg1)->commandOff();
}


SWIGEXPORT void SWIGSTDCALL CSharp_ArTCM2_commandOnePacket(void * jarg1) {
  ArTCM2 *arg1 = (ArTCM2 *) 0 ;
  
  arg1 = (ArTCM2 *)jarg1; 
  (arg1)->commandOnePacket();
}


SWIGEXPORT void SWIGSTDCALL CSharp_ArTCM2_commandContinuousPackets(void * jarg1) {
  ArTCM2 *arg1 = (ArTCM2 *) 0 ;
  
  arg1 = (ArTCM2 *)jarg1; 
  (arg1)->commandContinuousPackets();
}


SWIGEXPORT void SWIGSTDCALL CSharp_ArTCM2_commandUserCalibration(void * jarg1) {
  ArTCM2 *arg1 = (ArTCM2 *) 0 ;
  
  arg1 = (ArTCM2 *)jarg1; 
  (arg1)->commandUserCalibration();
}


SWIGEXPORT void SWIGSTDCALL CSharp_ArTCM2_commandAutoCalibration(void * jarg1) {
  ArTCM2 *arg1 = (ArTCM2 *) 0 ;
  
  arg1 = (ArTCM2 *)jarg1; 
  (arg1)->commandAutoCalibration();
}


SWIGEXPORT void SWIGSTDCALL CSharp_ArTCM2_commandStopCalibration(void * jarg1) {
  ArTCM2 *arg1 = (ArTCM2 *) 0 ;
  
  arg1 = (ArTCM2 *)jarg1; 
  (arg1)->commandStopCalibration();
}


SWIGEXPORT void SWIGSTDCALL CSharp_ArTCM2_commandSoftReset(void * jarg1) {
  ArTCM2 *arg1 = (ArTCM2 *) 0 ;
  
  arg1 = (ArTCM2 *)jarg1; 
  (arg1)->commandSoftReset();
}


SWIGEXPORT void SWIGSTDCALL CSharp_ArTCM2_commandJustCompass(void * jarg1) {
  ArTCM2 *arg1 = (ArTCM2 *) 0 ;
  
  arg1 = (ArTCM2 *)jarg1; 
  (arg1)->commandJustCompass();
}


SWIGEXPORT int SWIGSTDCALL CSharp_ArTCM2_getPacCount(void * jarg1) {
  int jresult ;
  ArTCM2 *arg1 = (ArTCM2 *) 0 ;
  int result;
  
  arg1 = (ArTCM2 *)jarg1; 
  result = (int)(arg1)->getPacCount();
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_ArTCM2_addHeadingDataCallback(void * jarg1, void * jarg2) {
  ArTCM2 *arg1 = (ArTCM2 *) 0 ;
  ArFunctor1< double > *arg2 = (ArFunctor1< double > *) 0 ;
  
  arg1 = (ArTCM2 *)jarg1; 
  arg2 = (ArFunctor1< double > *)jarg2; 
  (arg1)->addHeadingDataCallback(arg2);
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_ArCompassConnector(void * jarg1) {
  void * jresult ;
  ArArgumentParser *arg1 = (ArArgumentParser *) 0 ;
  ArCompassConnector *result = 0 ;
  
  arg1 = (ArArgumentParser *)jarg1; 
  result = (ArCompassConnector *)new ArCompassConnector(arg1);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_ArCompassConnector(void * jarg1) {
  ArCompassConnector *arg1 = (ArCompassConnector *) 0 ;
  
  arg1 = (ArCompassConnector *)jarg1; 
  delete arg1;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_ArCompassConnector_create(void * jarg1, void * jarg2) {
  void * jresult ;
  ArCompassConnector *arg1 = (ArCompassConnector *) 0 ;
  ArRobot *arg2 = (ArRobot *) 0 ;
  ArTCM2 *result = 0 ;
  
  arg1 = (ArCompassConnector *)jarg1; 
  arg2 = (ArRobot *)jarg2; 
  result = (ArTCM2 *)(arg1)->create(arg2);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_ArCompassConnector_connect(void * jarg1, void * jarg2) {
  unsigned int jresult ;
  ArCompassConnector *arg1 = (ArCompassConnector *) 0 ;
  ArTCM2 *arg2 = (ArTCM2 *) 0 ;
  bool result;
  
  arg1 = (ArCompassConnector *)jarg1; 
  arg2 = (ArTCM2 *)jarg2; 
  result = (bool)((ArCompassConnector const *)arg1)->connect(arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_ArTCMCompassDirect__SWIG_0(void * jarg1) {
  void * jresult ;
  ArDeviceConnection *arg1 = (ArDeviceConnection *) 0 ;
  ArTCMCompassDirect *result = 0 ;
  
  arg1 = (ArDeviceConnection *)jarg1; 
  result = (ArTCMCompassDirect *)new ArTCMCompassDirect(arg1);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_ArTCMCompassDirect__SWIG_1(char * jarg1) {
  void * jresult ;
  char *arg1 = (char *) 0 ;
  ArTCMCompassDirect *result = 0 ;
  
  arg1 = (char *)jarg1; 
  result = (ArTCMCompassDirect *)new ArTCMCompassDirect((char const *)arg1);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_ArTCMCompassDirect__SWIG_2() {
  void * jresult ;
  ArTCMCompassDirect *result = 0 ;
  
  result = (ArTCMCompassDirect *)new ArTCMCompassDirect();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_ArTCMCompassDirect(void * jarg1) {
  ArTCMCompassDirect *arg1 = (ArTCMCompassDirect *) 0 ;
  
  arg1 = (ArTCMCompassDirect *)jarg1; 
  delete arg1;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_ArTCMCompassDirect_connect(void * jarg1) {
  unsigned int jresult ;
  ArTCMCompassDirect *arg1 = (ArTCMCompassDirect *) 0 ;
  bool result;
  
  arg1 = (ArTCMCompassDirect *)jarg1; 
  result = (bool)(arg1)->connect();
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_ArTCMCompassDirect_blockingConnect__SWIG_0(void * jarg1, unsigned long jarg2) {
  unsigned int jresult ;
  ArTCMCompassDirect *arg1 = (ArTCMCompassDirect *) 0 ;
  unsigned long arg2 ;
  bool result;
  
  arg1 = (ArTCMCompassDirect *)jarg1; 
  arg2 = (unsigned long)jarg2; 
  result = (bool)(arg1)->blockingConnect(arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_ArTCMCompassDirect_blockingConnect__SWIG_1(void * jarg1) {
  unsigned int jresult ;
  ArTCMCompassDirect *arg1 = (ArTCMCompassDirect *) 0 ;
  bool result;
  
  arg1 = (ArTCMCompassDirect *)jarg1; 
  result = (bool)(arg1)->blockingConnect();
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_ArTCMCompassDirect_commandAutoCalibration(void * jarg1) {
  ArTCMCompassDirect *arg1 = (ArTCMCompassDirect *) 0 ;
  
  arg1 = (ArTCMCompassDirect *)jarg1; 
  (arg1)->commandAutoCalibration();
}


SWIGEXPORT void SWIGSTDCALL CSharp_ArTCMCompassDirect_commandUserCalibration(void * jarg1) {
  ArTCMCompassDirect *arg1 = (ArTCMCompassDirect *) 0 ;
  
  arg1 = (ArTCMCompassDirect *)jarg1; 
  (arg1)->commandUserCalibration();
}


SWIGEXPORT void SWIGSTDCALL CSharp_ArTCMCompassDirect_commandStopCalibration(void * jarg1) {
  ArTCMCompassDirect *arg1 = (ArTCMCompassDirect *) 0 ;
  
  arg1 = (ArTCMCompassDirect *)jarg1; 
  (arg1)->commandStopCalibration();
}


SWIGEXPORT void SWIGSTDCALL CSharp_ArTCMCompassDirect_commandContinuousPackets(void * jarg1) {
  ArTCMCompassDirect *arg1 = (ArTCMCompassDirect *) 0 ;
  
  arg1 = (ArTCMCompassDirect *)jarg1; 
  (arg1)->commandContinuousPackets();
}


SWIGEXPORT void SWIGSTDCALL CSharp_ArTCMCompassDirect_commandOnePacket(void * jarg1) {
  ArTCMCompassDirect *arg1 = (ArTCMCompassDirect *) 0 ;
  
  arg1 = (ArTCMCompassDirect *)jarg1; 
  (arg1)->commandOnePacket();
}


SWIGEXPORT void SWIGSTDCALL CSharp_ArTCMCompassDirect_commandOff(void * jarg1) {
  ArTCMCompassDirect *arg1 = (ArTCMCompassDirect *) 0 ;
  
  arg1 = (ArTCMCompassDirect *)jarg1; 
  (arg1)->commandOff();
}


SWIGEXPORT void SWIGSTDCALL CSharp_ArTCMCompassDirect_commandSoftReset(void * jarg1) {
  ArTCMCompassDirect *arg1 = (ArTCMCompassDirect *) 0 ;
  
  arg1 = (ArTCMCompassDirect *)jarg1; 
  (arg1)->commandSoftReset();
}


SWIGEXPORT void SWIGSTDCALL CSharp_ArTCMCompassDirect_commandJustCompass(void * jarg1) {
  ArTCMCompassDirect *arg1 = (ArTCMCompassDirect *) 0 ;
  
  arg1 = (ArTCMCompassDirect *)jarg1; 
  (arg1)->commandJustCompass();
}


SWIGEXPORT int SWIGSTDCALL CSharp_ArTCMCompassDirect_read__SWIG_0(void * jarg1, unsigned int jarg2) {
  int jresult ;
  ArTCMCompassDirect *arg1 = (ArTCMCompassDirect *) 0 ;
  unsigned int arg2 ;
  int result;
  
  arg1 = (ArTCMCompassDirect *)jarg1; 
  arg2 = (unsigned int)jarg2; 
  result = (int)(arg1)->read(arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_ArTCMCompassDirect_read__SWIG_1(void * jarg1) {
  int jresult ;
  ArTCMCompassDirect *arg1 = (ArTCMCompassDirect *) 0 ;
  int result;
  
  arg1 = (ArTCMCompassDirect *)jarg1; 
  result = (int)(arg1)->read();
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_ArTCMCompassDirect_setDeviceConnection(void * jarg1, void * jarg2) {
  ArTCMCompassDirect *arg1 = (ArTCMCompassDirect *) 0 ;
  ArDeviceConnection *arg2 = (ArDeviceConnection *) 0 ;
  
  arg1 = (ArTCMCompassDirect *)jarg1; 
  arg2 = (ArDeviceConnection *)jarg2; 
  (arg1)->setDeviceConnection(arg2);
}


SWIGEXPORT void * SWIGSTDCALL CSharp_ArTCMCompassDirect_getDeviceConnetion(void * jarg1) {
  void * jresult ;
  ArTCMCompassDirect *arg1 = (ArTCMCompassDirect *) 0 ;
  ArDeviceConnection *result = 0 ;
  
  arg1 = (ArTCMCompassDirect *)jarg1; 
  result = (ArDeviceConnection *)(arg1)->getDeviceConnetion();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_ArTCMCompassRobot(void * jarg1) {
  void * jresult ;
  ArRobot *arg1 = (ArRobot *) 0 ;
  ArTCMCompassRobot *result = 0 ;
  
  arg1 = (ArRobot *)jarg1; 
  result = (ArTCMCompassRobot *)new ArTCMCompassRobot(arg1);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_ArTCMCompassRobot(void * jarg1) {
  ArTCMCompassRobot *arg1 = (ArTCMCompassRobot *) 0 ;
  
  arg1 = (ArTCMCompassRobot *)jarg1; 
  delete arg1;
}


SWIGEXPORT void SWIGSTDCALL CSharp_ArTCMCompassRobot_commandOff(void * jarg1) {
  ArTCMCompassRobot *arg1 = (ArTCMCompassRobot *) 0 ;
  
  arg1 = (ArTCMCompassRobot *)jarg1; 
  (arg1)->commandOff();
}


SWIGEXPORT void SWIGSTDCALL CSharp_ArTCMCompassRobot_commandJustCompass(void * jarg1) {
  ArTCMCompassRobot *arg1 = (ArTCMCompassRobot *) 0 ;
  
  arg1 = (ArTCMCompassRobot *)jarg1; 
  (arg1)->commandJustCompass();
}


SWIGEXPORT void SWIGSTDCALL CSharp_ArTCMCompassRobot_commandOnePacket(void * jarg1) {
  ArTCMCompassRobot *arg1 = (ArTCMCompassRobot *) 0 ;
  
  arg1 = (ArTCMCompassRobot *)jarg1; 
  (arg1)->commandOnePacket();
}


SWIGEXPORT void SWIGSTDCALL CSharp_ArTCMCompassRobot_commandContinuousPackets(void * jarg1) {
  ArTCMCompassRobot *arg1 = (ArTCMCompassRobot *) 0 ;
  
  arg1 = (ArTCMCompassRobot *)jarg1; 
  (arg1)->commandContinuousPackets();
}


SWIGEXPORT void SWIGSTDCALL CSharp_ArTCMCompassRobot_commandUserCalibration(void * jarg1) {
  ArTCMCompassRobot *arg1 = (ArTCMCompassRobot *) 0 ;
  
  arg1 = (ArTCMCompassRobot *)jarg1; 
  (arg1)->commandUserCalibration();
}


SWIGEXPORT void SWIGSTDCALL CSharp_ArTCMCompassRobot_commandAutoCalibration(void * jarg1) {
  ArTCMCompassRobot *arg1 = (ArTCMCompassRobot *) 0 ;
  
  arg1 = (ArTCMCompassRobot *)jarg1; 
  (arg1)->commandAutoCalibration();
}


SWIGEXPORT void SWIGSTDCALL CSharp_ArTCMCompassRobot_commandStopCalibration(void * jarg1) {
  ArTCMCompassRobot *arg1 = (ArTCMCompassRobot *) 0 ;
  
  arg1 = (ArTCMCompassRobot *)jarg1; 
  (arg1)->commandStopCalibration();
}


SWIGEXPORT void SWIGSTDCALL CSharp_ArTCMCompassRobot_commandSoftReset(void * jarg1) {
  ArTCMCompassRobot *arg1 = (ArTCMCompassRobot *) 0 ;
  
  arg1 = (ArTCMCompassRobot *)jarg1; 
  (arg1)->commandSoftReset();
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_ArTaskState() {
  void * jresult ;
  ArTaskState *result = 0 ;
  
  result = (ArTaskState *)new ArTaskState();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_ArTaskState(void * jarg1) {
  ArTaskState *arg1 = (ArTaskState *) 0 ;
  
  arg1 = (ArTaskState *)jarg1; 
  delete arg1;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_ArTcpConnection() {
  void * jresult ;
  ArTcpConnection *result = 0 ;
  
  result = (ArTcpConnection *)new ArTcpConnection();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_ArTcpConnection(void * jarg1) {
  ArTcpConnection *arg1 = (ArTcpConnection *) 0 ;
  
  arg1 = (ArTcpConnection *)jarg1; 
  delete arg1;
}


SWIGEXPORT int SWIGSTDCALL CSharp_ArTcpConnection_open__SWIG_0(void * jarg1, char * jarg2, int jarg3) {
  int jresult ;
  ArTcpConnection *arg1 = (ArTcpConnection *) 0 ;
  char *arg2 = (char *) 0 ;
  int arg3 ;
  int result;
  
  arg1 = (ArTcpConnection *)jarg1; 
  arg2 = (char *)jarg2; 
  arg3 = (int)jarg3; 
  result = (int)(arg1)->open((char const *)arg2,arg3);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_ArTcpConnection_open__SWIG_1(void * jarg1, char * jarg2) {
  int jresult ;
  ArTcpConnection *arg1 = (ArTcpConnection *) 0 ;
  char *arg2 = (char *) 0 ;
  int result;
  
  arg1 = (ArTcpConnection *)jarg1; 
  arg2 = (char *)jarg2; 
  result = (int)(arg1)->open((char const *)arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_ArTcpConnection_open__SWIG_2(void * jarg1) {
  int jresult ;
  ArTcpConnection *arg1 = (ArTcpConnection *) 0 ;
  int result;
  
  arg1 = (ArTcpConnection *)jarg1; 
  result = (int)(arg1)->open();
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_ArTcpConnection_setPort__SWIG_0(void * jarg1, char * jarg2, int jarg3) {
  ArTcpConnection *arg1 = (ArTcpConnection *) 0 ;
  char *arg2 = (char *) 0 ;
  int arg3 ;
  
  arg1 = (ArTcpConnection *)jarg1; 
  arg2 = (char *)jarg2; 
  arg3 = (int)jarg3; 
  (arg1)->setPort((char const *)arg2,arg3);
}


SWIGEXPORT void SWIGSTDCALL CSharp_ArTcpConnection_setPort__SWIG_1(void * jarg1, char * jarg2) {
  ArTcpConnection *arg1 = (ArTcpConnection *) 0 ;
  char *arg2 = (char *) 0 ;
  
  arg1 = (ArTcpConnection *)jarg1; 
  arg2 = (char *)jarg2; 
  (arg1)->setPort((char const *)arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_ArTcpConnection_setPort__SWIG_2(void * jarg1) {
  ArTcpConnection *arg1 = (ArTcpConnection *) 0 ;
  
  arg1 = (ArTcpConnection *)jarg1; 
  (arg1)->setPort();
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_ArTcpConnection_openSimple(void * jarg1) {
  unsigned int jresult ;
  ArTcpConnection *arg1 = (ArTcpConnection *) 0 ;
  bool result;
  
  arg1 = (ArTcpConnection *)jarg1; 
  result = (bool)(arg1)->openSimple();
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_ArTcpConnection_getStatus(void * jarg1) {
  int jresult ;
  ArTcpConnection *arg1 = (ArTcpConnection *) 0 ;
  int result;
  
  arg1 = (ArTcpConnection *)jarg1; 
  result = (int)(arg1)->getStatus();
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_ArTcpConnection_close(void * jarg1) {
  unsigned int jresult ;
  ArTcpConnection *arg1 = (ArTcpConnection *) 0 ;
  bool result;
  
  arg1 = (ArTcpConnection *)jarg1; 
  result = (bool)(arg1)->close();
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_ArTcpConnection_read__SWIG_0(void * jarg1, char * jarg2, unsigned int jarg3, unsigned int jarg4) {
  int jresult ;
  ArTcpConnection *arg1 = (ArTcpConnection *) 0 ;
  char *arg2 = (char *) 0 ;
  unsigned int arg3 ;
  unsigned int arg4 ;
  int result;
  
  arg1 = (ArTcpConnection *)jarg1; 
  arg2 = (char *)jarg2; 
  arg3 = (unsigned int)jarg3; 
  arg4 = (unsigned int)jarg4; 
  result = (int)(arg1)->read((char const *)arg2,arg3,arg4);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_ArTcpConnection_read__SWIG_1(void * jarg1, char * jarg2, unsigned int jarg3) {
  int jresult ;
  ArTcpConnection *arg1 = (ArTcpConnection *) 0 ;
  char *arg2 = (char *) 0 ;
  unsigned int arg3 ;
  int result;
  
  arg1 = (ArTcpConnection *)jarg1; 
  arg2 = (char *)jarg2; 
  arg3 = (unsigned int)jarg3; 
  result = (int)(arg1)->read((char const *)arg2,arg3);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_ArTcpConnection_write(void * jarg1, char * jarg2, unsigned int jarg3) {
  int jresult ;
  ArTcpConnection *arg1 = (ArTcpConnection *) 0 ;
  char *arg2 = (char *) 0 ;
  unsigned int arg3 ;
  int result;
  
  arg1 = (ArTcpConnection *)jarg1; 
  arg2 = (char *)jarg2; 
  arg3 = (unsigned int)jarg3; 
  result = (int)(arg1)->write((char const *)arg2,arg3);
  jresult = result; 
  return jresult;
}


SWIGEXPORT char * SWIGSTDCALL CSharp_ArTcpConnection_getOpenMessage(void * jarg1, int jarg2) {
  char * jresult ;
  ArTcpConnection *arg1 = (ArTcpConnection *) 0 ;
  int arg2 ;
  char *result = 0 ;
  
  arg1 = (ArTcpConnection *)jarg1; 
  arg2 = (int)jarg2; 
  result = (char *)(arg1)->getOpenMessage(arg2);
  jresult = SWIG_csharp_string_callback((const char *)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_ArTcpConnection_getTimeRead(void * jarg1, int jarg2) {
  void * jresult ;
  ArTcpConnection *arg1 = (ArTcpConnection *) 0 ;
  int arg2 ;
  ArTime result;
  
  arg1 = (ArTcpConnection *)jarg1; 
  arg2 = (int)jarg2; 
  result = (arg1)->getTimeRead(arg2);
  jresult = new ArTime((const ArTime &)result); 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_ArTcpConnection_isTimeStamping(void * jarg1) {
  unsigned int jresult ;
  ArTcpConnection *arg1 = (ArTcpConnection *) 0 ;
  bool result;
  
  arg1 = (ArTcpConnection *)jarg1; 
  result = (bool)(arg1)->isTimeStamping();
  jresult = result; 
  return jresult;
}


SWIGEXPORT char * SWIGSTDCALL CSharp_ArTcpConnection_getHost(void * jarg1) {
  char * jresult ;
  ArTcpConnection *arg1 = (ArTcpConnection *) 0 ;
  std::string result;
  
  arg1 = (ArTcpConnection *)jarg1; 
  result = (arg1)->getHost();
  jresult = SWIG_csharp_string_callback((&result)->c_str()); 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_ArTcpConnection_getPort(void * jarg1) {
  int jresult ;
  ArTcpConnection *arg1 = (ArTcpConnection *) 0 ;
  int result;
  
  arg1 = (ArTcpConnection *)jarg1; 
  result = (int)(arg1)->getPort();
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_ArTcpConnection_internalOpen(void * jarg1) {
  int jresult ;
  ArTcpConnection *arg1 = (ArTcpConnection *) 0 ;
  int result;
  
  arg1 = (ArTcpConnection *)jarg1; 
  result = (int)(arg1)->internalOpen();
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_ArTcpConnection_setSocket(void * jarg1, void * jarg2) {
  ArTcpConnection *arg1 = (ArTcpConnection *) 0 ;
  ArSocket *arg2 = (ArSocket *) 0 ;
  
  arg1 = (ArTcpConnection *)jarg1; 
  arg2 = (ArSocket *)jarg2; 
  (arg1)->setSocket(arg2);
}


SWIGEXPORT void * SWIGSTDCALL CSharp_ArTcpConnection_getSocket(void * jarg1) {
  void * jresult ;
  ArTcpConnection *arg1 = (ArTcpConnection *) 0 ;
  ArSocket *result = 0 ;
  
  arg1 = (ArTcpConnection *)jarg1; 
  result = (ArSocket *)(arg1)->getSocket();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_ArTcpConnection_setStatus(void * jarg1, int jarg2) {
  ArTcpConnection *arg1 = (ArTcpConnection *) 0 ;
  int arg2 ;
  
  arg1 = (ArTcpConnection *)jarg1; 
  arg2 = (int)jarg2; 
  (arg1)->setStatus(arg2);
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_ArTransform__SWIG_0() {
  void * jresult ;
  ArTransform *result = 0 ;
  
  result = (ArTransform *)new ArTransform();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_ArTransform__SWIG_1(void * jarg1) {
  void * jresult ;
  ArPose arg1 ;
  ArPose *argp1 ;
  ArTransform *result = 0 ;
  
  argp1 = (ArPose *)jarg1; 
  if (!argp1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Attempt to dereference null ArPose", 0);
    return 0;
  }
  arg1 = *argp1; 
  result = (ArTransform *)new ArTransform(arg1);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_ArTransform__SWIG_2(void * jarg1, void * jarg2) {
  void * jresult ;
  ArPose arg1 ;
  ArPose arg2 ;
  ArPose *argp1 ;
  ArPose *argp2 ;
  ArTransform *result = 0 ;
  
  argp1 = (ArPose *)jarg1; 
  if (!argp1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Attempt to dereference null ArPose", 0);
    return 0;
  }
  arg1 = *argp1; 
  argp2 = (ArPose *)jarg2; 
  if (!argp2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Attempt to dereference null ArPose", 0);
    return 0;
  }
  arg2 = *argp2; 
  result = (ArTransform *)new ArTransform(arg1,arg2);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_ArTransform(void * jarg1) {
  ArTransform *arg1 = (ArTransform *) 0 ;
  
  arg1 = (ArTransform *)jarg1; 
  delete arg1;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_ArTransform_doTransform__SWIG_0(void * jarg1, void * jarg2) {
  void * jresult ;
  ArTransform *arg1 = (ArTransform *) 0 ;
  ArPose arg2 ;
  ArPose *argp2 ;
  ArPose result;
  
  arg1 = (ArTransform *)jarg1; 
  argp2 = (ArPose *)jarg2; 
  if (!argp2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Attempt to dereference null ArPose", 0);
    return 0;
  }
  arg2 = *argp2; 
  result = (arg1)->doTransform(arg2);
  jresult = new ArPose((const ArPose &)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_ArTransform_doTransform__SWIG_1(void * jarg1, void * jarg2) {
  void * jresult ;
  ArTransform *arg1 = (ArTransform *) 0 ;
  ArPoseWithTime arg2 ;
  ArPoseWithTime *argp2 ;
  ArPoseWithTime result;
  
  arg1 = (ArTransform *)jarg1; 
  argp2 = (ArPoseWithTime *)jarg2; 
  if (!argp2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Attempt to dereference null ArPoseWithTime", 0);
    return 0;
  }
  arg2 = *argp2; 
  result = (arg1)->doTransform(arg2);
  jresult = new ArPoseWithTime((const ArPoseWithTime &)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_ArTransform_doInvTransform__SWIG_0(void * jarg1, void * jarg2) {
  void * jresult ;
  ArTransform *arg1 = (ArTransform *) 0 ;
  ArPose arg2 ;
  ArPose *argp2 ;
  ArPose result;
  
  arg1 = (ArTransform *)jarg1; 
  argp2 = (ArPose *)jarg2; 
  if (!argp2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Attempt to dereference null ArPose", 0);
    return 0;
  }
  arg2 = *argp2; 
  result = (arg1)->doInvTransform(arg2);
  jresult = new ArPose((const ArPose &)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_ArTransform_doInvTransform__SWIG_1(void * jarg1, void * jarg2) {
  void * jresult ;
  ArTransform *arg1 = (ArTransform *) 0 ;
  ArPoseWithTime arg2 ;
  ArPoseWithTime *argp2 ;
  ArPoseWithTime result;
  
  arg1 = (ArTransform *)jarg1; 
  argp2 = (ArPoseWithTime *)jarg2; 
  if (!argp2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Attempt to dereference null ArPoseWithTime", 0);
    return 0;
  }
  arg2 = *argp2; 
  result = (arg1)->doInvTransform(arg2);
  jresult = new ArPoseWithTime((const ArPoseWithTime &)result); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_ArTransform_doTransform__SWIG_2(void * jarg1, void * jarg2) {
  ArTransform *arg1 = (ArTransform *) 0 ;
  std::list< ArPose * > *arg2 = (std::list< ArPose * > *) 0 ;
  
  arg1 = (ArTransform *)jarg1; 
  arg2 = (std::list< ArPose * > *)jarg2; 
  (arg1)->doTransform(arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_ArTransform_doTransform__SWIG_3(void * jarg1, void * jarg2) {
  ArTransform *arg1 = (ArTransform *) 0 ;
  std::list< ArPoseWithTime * > *arg2 = (std::list< ArPoseWithTime * > *) 0 ;
  
  arg1 = (ArTransform *)jarg1; 
  arg2 = (std::list< ArPoseWithTime * > *)jarg2; 
  (arg1)->doTransform(arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_ArTransform_setTransform__SWIG_0(void * jarg1, void * jarg2) {
  ArTransform *arg1 = (ArTransform *) 0 ;
  ArPose arg2 ;
  ArPose *argp2 ;
  
  arg1 = (ArTransform *)jarg1; 
  argp2 = (ArPose *)jarg2; 
  if (!argp2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Attempt to dereference null ArPose", 0);
    return ;
  }
  arg2 = *argp2; 
  (arg1)->setTransform(arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_ArTransform_setTransform__SWIG_1(void * jarg1, void * jarg2, void * jarg3) {
  ArTransform *arg1 = (ArTransform *) 0 ;
  ArPose arg2 ;
  ArPose arg3 ;
  ArPose *argp2 ;
  ArPose *argp3 ;
  
  arg1 = (ArTransform *)jarg1; 
  argp2 = (ArPose *)jarg2; 
  if (!argp2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Attempt to dereference null ArPose", 0);
    return ;
  }
  arg2 = *argp2; 
  argp3 = (ArPose *)jarg3; 
  if (!argp3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Attempt to dereference null ArPose", 0);
    return ;
  }
  arg3 = *argp3; 
  (arg1)->setTransform(arg2,arg3);
}


SWIGEXPORT double SWIGSTDCALL CSharp_ArTransform_getX(void * jarg1) {
  double jresult ;
  ArTransform *arg1 = (ArTransform *) 0 ;
  double result;
  
  arg1 = (ArTransform *)jarg1; 
  result = (double)(arg1)->getX();
  jresult = result; 
  return jresult;
}


SWIGEXPORT double SWIGSTDCALL CSharp_ArTransform_getY(void * jarg1) {
  double jresult ;
  ArTransform *arg1 = (ArTransform *) 0 ;
  double result;
  
  arg1 = (ArTransform *)jarg1; 
  result = (double)(arg1)->getY();
  jresult = result; 
  return jresult;
}


SWIGEXPORT double SWIGSTDCALL CSharp_ArTransform_getTh(void * jarg1) {
  double jresult ;
  ArTransform *arg1 = (ArTransform *) 0 ;
  double result;
  
  arg1 = (ArTransform *)jarg1; 
  result = (double)(arg1)->getTh();
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_ArTransform_setTransformLowLevel(void * jarg1, double jarg2, double jarg3, double jarg4) {
  ArTransform *arg1 = (ArTransform *) 0 ;
  double arg2 ;
  double arg3 ;
  double arg4 ;
  
  arg1 = (ArTransform *)jarg1; 
  arg2 = (double)jarg2; 
  arg3 = (double)jarg3; 
  arg4 = (double)jarg4; 
  (arg1)->setTransformLowLevel(arg2,arg3,arg4);
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_ArTrimbleGPS() {
  void * jresult ;
  ArTrimbleGPS *result = 0 ;
  
  result = (ArTrimbleGPS *)new ArTrimbleGPS();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_ArTrimbleGPS(void * jarg1) {
  ArTrimbleGPS *arg1 = (ArTrimbleGPS *) 0 ;
  
  arg1 = (ArTrimbleGPS *)jarg1; 
  delete arg1;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_ArTrimbleGPS_sendTSIPCommand(void * jarg1, char jarg2, char * jarg3, unsigned long jarg4) {
  unsigned int jresult ;
  ArTrimbleGPS *arg1 = (ArTrimbleGPS *) 0 ;
  char arg2 ;
  char *arg3 = (char *) 0 ;
  size_t arg4 ;
  bool result;
  
  arg1 = (ArTrimbleGPS *)jarg1; 
  arg2 = (char)jarg2; 
  arg3 = (char *)jarg3; 
  arg4 = (size_t)jarg4; 
  result = (bool)(arg1)->sendTSIPCommand(arg2,(char const *)arg3,arg4);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_ArUrg__SWIG_0(int jarg1, char * jarg2) {
  void * jresult ;
  int arg1 ;
  char *arg2 = (char *) 0 ;
  ArUrg *result = 0 ;
  
  arg1 = (int)jarg1; 
  arg2 = (char *)jarg2; 
  result = (ArUrg *)new ArUrg(arg1,(char const *)arg2);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_ArUrg__SWIG_1(int jarg1) {
  void * jresult ;
  int arg1 ;
  ArUrg *result = 0 ;
  
  arg1 = (int)jarg1; 
  result = (ArUrg *)new ArUrg(arg1);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_ArUrg(void * jarg1) {
  ArUrg *arg1 = (ArUrg *) 0 ;
  
  arg1 = (ArUrg *)jarg1; 
  delete arg1;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_ArUrg_blockingConnect(void * jarg1) {
  unsigned int jresult ;
  ArUrg *arg1 = (ArUrg *) 0 ;
  bool result;
  
  arg1 = (ArUrg *)jarg1; 
  result = (bool)(arg1)->blockingConnect();
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_ArUrg_asyncConnect(void * jarg1) {
  unsigned int jresult ;
  ArUrg *arg1 = (ArUrg *) 0 ;
  bool result;
  
  arg1 = (ArUrg *)jarg1; 
  result = (bool)(arg1)->asyncConnect();
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_ArUrg_disconnect(void * jarg1) {
  unsigned int jresult ;
  ArUrg *arg1 = (ArUrg *) 0 ;
  bool result;
  
  arg1 = (ArUrg *)jarg1; 
  result = (bool)(arg1)->disconnect();
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_ArUrg_isConnected(void * jarg1) {
  unsigned int jresult ;
  ArUrg *arg1 = (ArUrg *) 0 ;
  bool result;
  
  arg1 = (ArUrg *)jarg1; 
  result = (bool)(arg1)->isConnected();
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_ArUrg_isTryingToConnect(void * jarg1) {
  unsigned int jresult ;
  ArUrg *arg1 = (ArUrg *) 0 ;
  bool result;
  
  arg1 = (ArUrg *)jarg1; 
  result = (bool)(arg1)->isTryingToConnect();
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_ArUrg_log(void * jarg1) {
  ArUrg *arg1 = (ArUrg *) 0 ;
  
  arg1 = (ArUrg *)jarg1; 
  (arg1)->log();
}


SWIGEXPORT int SWIGSTDCALL CSharp_MAX_RESPONSE_BYTES_get() {
  int jresult ;
  int result;
  
  result = (int)(14);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_BIDIRECTIONAL_TIMEOUT_get() {
  int jresult ;
  int result;
  
  result = (int)(5000);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_UNIDIRECTIONAL_TIMEOUT_get() {
  int jresult ;
  int result;
  
  result = (int)(300);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_AUTO_UPDATE_TIME_get() {
  int jresult ;
  int result;
  
  result = (int)(2000);
  jresult = result; 
  return jresult;
}


SWIGEXPORT double SWIGSTDCALL CSharp_TOLERANCE_get() {
  double jresult ;
  double result;
  
  result = (double)(.1);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_ArVCC4Commands() {
  void * jresult ;
  ArVCC4Commands *result = 0 ;
  
  result = (ArVCC4Commands *)new ArVCC4Commands();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_ArVCC4Commands(void * jarg1) {
  ArVCC4Commands *arg1 = (ArVCC4Commands *) 0 ;
  
  arg1 = (ArVCC4Commands *)jarg1; 
  delete arg1;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_ArVCC4Packet__SWIG_0(unsigned short jarg1) {
  void * jresult ;
  ArTypes::UByte2 arg1 ;
  ArVCC4Packet *result = 0 ;
  
  arg1 = (ArTypes::UByte2)jarg1; 
  result = (ArVCC4Packet *)new ArVCC4Packet(arg1);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_ArVCC4Packet__SWIG_1() {
  void * jresult ;
  ArVCC4Packet *result = 0 ;
  
  result = (ArVCC4Packet *)new ArVCC4Packet();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_ArVCC4Packet(void * jarg1) {
  ArVCC4Packet *arg1 = (ArVCC4Packet *) 0 ;
  
  arg1 = (ArVCC4Packet *)jarg1; 
  delete arg1;
}


SWIGEXPORT void SWIGSTDCALL CSharp_ArVCC4Packet_byte2ToBuf(void * jarg1, int jarg2) {
  ArVCC4Packet *arg1 = (ArVCC4Packet *) 0 ;
  ArTypes::Byte4 arg2 ;
  
  arg1 = (ArVCC4Packet *)jarg1; 
  arg2 = (ArTypes::Byte4)jarg2; 
  (arg1)->byte2ToBuf(arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_ArVCC4Packet_finalizePacket(void * jarg1) {
  ArVCC4Packet *arg1 = (ArVCC4Packet *) 0 ;
  
  arg1 = (ArVCC4Packet *)jarg1; 
  (arg1)->finalizePacket();
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_ArVCC4__SWIG_0(void * jarg1, unsigned int jarg2, int jarg3, unsigned int jarg4, unsigned int jarg5, int jarg6) {
  void * jresult ;
  ArRobot *arg1 = (ArRobot *) 0 ;
  bool arg2 ;
  ArVCC4::CommState arg3 ;
  bool arg4 ;
  bool arg5 ;
  ArVCC4::CameraType arg6 ;
  ArVCC4 *result = 0 ;
  
  arg1 = (ArRobot *)jarg1; 
  arg2 = jarg2 ? true : false; 
  arg3 = (ArVCC4::CommState)jarg3; 
  arg4 = jarg4 ? true : false; 
  arg5 = jarg5 ? true : false; 
  arg6 = (ArVCC4::CameraType)jarg6; 
  result = (ArVCC4 *)new ArVCC4(arg1,arg2,arg3,arg4,arg5,arg6);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_ArVCC4__SWIG_1(void * jarg1, unsigned int jarg2, int jarg3, unsigned int jarg4, unsigned int jarg5) {
  void * jresult ;
  ArRobot *arg1 = (ArRobot *) 0 ;
  bool arg2 ;
  ArVCC4::CommState arg3 ;
  bool arg4 ;
  bool arg5 ;
  ArVCC4 *result = 0 ;
  
  arg1 = (ArRobot *)jarg1; 
  arg2 = jarg2 ? true : false; 
  arg3 = (ArVCC4::CommState)jarg3; 
  arg4 = jarg4 ? true : false; 
  arg5 = jarg5 ? true : false; 
  result = (ArVCC4 *)new ArVCC4(arg1,arg2,arg3,arg4,arg5);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_ArVCC4__SWIG_2(void * jarg1, unsigned int jarg2, int jarg3, unsigned int jarg4) {
  void * jresult ;
  ArRobot *arg1 = (ArRobot *) 0 ;
  bool arg2 ;
  ArVCC4::CommState arg3 ;
  bool arg4 ;
  ArVCC4 *result = 0 ;
  
  arg1 = (ArRobot *)jarg1; 
  arg2 = jarg2 ? true : false; 
  arg3 = (ArVCC4::CommState)jarg3; 
  arg4 = jarg4 ? true : false; 
  result = (ArVCC4 *)new ArVCC4(arg1,arg2,arg3,arg4);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_ArVCC4__SWIG_3(void * jarg1, unsigned int jarg2, int jarg3) {
  void * jresult ;
  ArRobot *arg1 = (ArRobot *) 0 ;
  bool arg2 ;
  ArVCC4::CommState arg3 ;
  ArVCC4 *result = 0 ;
  
  arg1 = (ArRobot *)jarg1; 
  arg2 = jarg2 ? true : false; 
  arg3 = (ArVCC4::CommState)jarg3; 
  result = (ArVCC4 *)new ArVCC4(arg1,arg2,arg3);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_ArVCC4__SWIG_4(void * jarg1, unsigned int jarg2) {
  void * jresult ;
  ArRobot *arg1 = (ArRobot *) 0 ;
  bool arg2 ;
  ArVCC4 *result = 0 ;
  
  arg1 = (ArRobot *)jarg1; 
  arg2 = jarg2 ? true : false; 
  result = (ArVCC4 *)new ArVCC4(arg1,arg2);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_ArVCC4__SWIG_5(void * jarg1) {
  void * jresult ;
  ArRobot *arg1 = (ArRobot *) 0 ;
  ArVCC4 *result = 0 ;
  
  arg1 = (ArRobot *)jarg1; 
  result = (ArVCC4 *)new ArVCC4(arg1);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_ArVCC4(void * jarg1) {
  ArVCC4 *arg1 = (ArVCC4 *) 0 ;
  
  arg1 = (ArVCC4 *)jarg1; 
  delete arg1;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_ArVCC4_power(void * jarg1, unsigned int jarg2) {
  unsigned int jresult ;
  ArVCC4 *arg1 = (ArVCC4 *) 0 ;
  bool arg2 ;
  bool result;
  
  arg1 = (ArVCC4 *)jarg1; 
  arg2 = jarg2 ? true : false; 
  result = (bool)(arg1)->power(arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_ArVCC4_getPower(void * jarg1) {
  unsigned int jresult ;
  ArVCC4 *arg1 = (ArVCC4 *) 0 ;
  bool result;
  
  arg1 = (ArVCC4 *)jarg1; 
  result = (bool)(arg1)->getPower();
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_ArVCC4_init(void * jarg1) {
  unsigned int jresult ;
  ArVCC4 *arg1 = (ArVCC4 *) 0 ;
  bool result;
  
  arg1 = (ArVCC4 *)jarg1; 
  result = (bool)(arg1)->init();
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_ArVCC4_reset(void * jarg1) {
  ArVCC4 *arg1 = (ArVCC4 *) 0 ;
  
  arg1 = (ArVCC4 *)jarg1; 
  (arg1)->reset();
}


SWIGEXPORT char * SWIGSTDCALL CSharp_ArVCC4_getTypeName(void * jarg1) {
  char * jresult ;
  ArVCC4 *arg1 = (ArVCC4 *) 0 ;
  char *result = 0 ;
  
  arg1 = (ArVCC4 *)jarg1; 
  result = (char *)(arg1)->getTypeName();
  jresult = SWIG_csharp_string_callback((const char *)result); 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_ArVCC4_isInitted(void * jarg1) {
  unsigned int jresult ;
  ArVCC4 *arg1 = (ArVCC4 *) 0 ;
  bool result;
  
  arg1 = (ArVCC4 *)jarg1; 
  result = (bool)(arg1)->isInitted();
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_ArVCC4_connectHandler(void * jarg1) {
  ArVCC4 *arg1 = (ArVCC4 *) 0 ;
  
  arg1 = (ArVCC4 *)jarg1; 
  (arg1)->connectHandler();
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_ArVCC4_packetHandler(void * jarg1, void * jarg2) {
  unsigned int jresult ;
  ArVCC4 *arg1 = (ArVCC4 *) 0 ;
  ArBasePacket *arg2 = (ArBasePacket *) 0 ;
  bool result;
  
  arg1 = (ArVCC4 *)jarg1; 
  arg2 = (ArBasePacket *)jarg2; 
  result = (bool)(arg1)->packetHandler(arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_ArVCC4_getRealPanTilt(void * jarg1) {
  ArVCC4 *arg1 = (ArVCC4 *) 0 ;
  
  arg1 = (ArVCC4 *)jarg1; 
  (arg1)->getRealPanTilt();
}


SWIGEXPORT void SWIGSTDCALL CSharp_ArVCC4_getRealZoomPos(void * jarg1) {
  ArVCC4 *arg1 = (ArVCC4 *) 0 ;
  
  arg1 = (ArVCC4 *)jarg1; 
  (arg1)->getRealZoomPos();
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_ArVCC4_canZoom(void * jarg1) {
  unsigned int jresult ;
  ArVCC4 *arg1 = (ArVCC4 *) 0 ;
  bool result;
  
  arg1 = (ArVCC4 *)jarg1; 
  result = (bool)((ArVCC4 const *)arg1)->canZoom();
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_ArVCC4_zoom(void * jarg1, int jarg2) {
  unsigned int jresult ;
  ArVCC4 *arg1 = (ArVCC4 *) 0 ;
  int arg2 ;
  bool result;
  
  arg1 = (ArVCC4 *)jarg1; 
  arg2 = (int)jarg2; 
  result = (bool)(arg1)->zoom(arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_ArVCC4_digitalZoom(void * jarg1, int jarg2) {
  unsigned int jresult ;
  ArVCC4 *arg1 = (ArVCC4 *) 0 ;
  int arg2 ;
  bool result;
  
  arg1 = (ArVCC4 *)jarg1; 
  arg2 = (int)jarg2; 
  result = (bool)(arg1)->digitalZoom(arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_ArVCC4_addErrorCB(void * jarg1, void * jarg2, int jarg3) {
  ArVCC4 *arg1 = (ArVCC4 *) 0 ;
  ArFunctor *arg2 = (ArFunctor *) 0 ;
  ArListPos::Pos arg3 ;
  
  arg1 = (ArVCC4 *)jarg1; 
  arg2 = (ArFunctor *)jarg2; 
  arg3 = (ArListPos::Pos)jarg3; 
  (arg1)->addErrorCB(arg2,arg3);
}


SWIGEXPORT void SWIGSTDCALL CSharp_ArVCC4_remErrorCB(void * jarg1, void * jarg2) {
  ArVCC4 *arg1 = (ArVCC4 *) 0 ;
  ArFunctor *arg2 = (ArFunctor *) 0 ;
  
  arg1 = (ArVCC4 *)jarg1; 
  arg2 = (ArFunctor *)jarg2; 
  (arg1)->remErrorCB(arg2);
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_ArVCC4_haltPanTilt(void * jarg1) {
  unsigned int jresult ;
  ArVCC4 *arg1 = (ArVCC4 *) 0 ;
  bool result;
  
  arg1 = (ArVCC4 *)jarg1; 
  result = (bool)(arg1)->haltPanTilt();
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_ArVCC4_haltZoom(void * jarg1) {
  unsigned int jresult ;
  ArVCC4 *arg1 = (ArVCC4 *) 0 ;
  bool result;
  
  arg1 = (ArVCC4 *)jarg1; 
  result = (bool)(arg1)->haltZoom();
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_ArVCC4_panSlew(void * jarg1, double jarg2) {
  unsigned int jresult ;
  ArVCC4 *arg1 = (ArVCC4 *) 0 ;
  double arg2 ;
  bool result;
  
  arg1 = (ArVCC4 *)jarg1; 
  arg2 = (double)jarg2; 
  result = (bool)(arg1)->panSlew(arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_ArVCC4_tiltSlew(void * jarg1, double jarg2) {
  unsigned int jresult ;
  ArVCC4 *arg1 = (ArVCC4 *) 0 ;
  double arg2 ;
  bool result;
  
  arg1 = (ArVCC4 *)jarg1; 
  arg2 = (double)jarg2; 
  result = (bool)(arg1)->tiltSlew(arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_ArVCC4_canSetPanTiltSlew(void * jarg1) {
  unsigned int jresult ;
  ArVCC4 *arg1 = (ArVCC4 *) 0 ;
  bool result;
  
  arg1 = (ArVCC4 *)jarg1; 
  result = (bool)(arg1)->canSetPanTiltSlew();
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_ArVCC4_preparePacket(void * jarg1, void * jarg2) {
  ArVCC4 *arg1 = (ArVCC4 *) 0 ;
  ArVCC4Packet *arg2 = (ArVCC4Packet *) 0 ;
  
  arg1 = (ArVCC4 *)jarg1; 
  arg2 = (ArVCC4Packet *)jarg2; 
  (arg1)->preparePacket(arg2);
}


SWIGEXPORT int SWIGSTDCALL CSharp_ArVCC4_getZoom(void * jarg1) {
  int jresult ;
  ArVCC4 *arg1 = (ArVCC4 *) 0 ;
  int result;
  
  arg1 = (ArVCC4 *)jarg1; 
  result = (int)((ArVCC4 const *)arg1)->getZoom();
  jresult = result; 
  return jresult;
}


SWIGEXPORT double SWIGSTDCALL CSharp_ArVCC4_getDigitalZoom(void * jarg1) {
  double jresult ;
  ArVCC4 *arg1 = (ArVCC4 *) 0 ;
  double result;
  
  arg1 = (ArVCC4 *)jarg1; 
  result = (double)((ArVCC4 const *)arg1)->getDigitalZoom();
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_ArVCC4_canGetRealPanTilt(void * jarg1) {
  unsigned int jresult ;
  ArVCC4 *arg1 = (ArVCC4 *) 0 ;
  bool result;
  
  arg1 = (ArVCC4 *)jarg1; 
  result = (bool)((ArVCC4 const *)arg1)->canGetRealPanTilt();
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_ArVCC4_canGetRealZoom(void * jarg1) {
  unsigned int jresult ;
  ArVCC4 *arg1 = (ArVCC4 *) 0 ;
  bool result;
  
  arg1 = (ArVCC4 *)jarg1; 
  result = (bool)((ArVCC4 const *)arg1)->canGetRealZoom();
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_ArVCC4_canSetFocus(void * jarg1) {
  unsigned int jresult ;
  ArVCC4 *arg1 = (ArVCC4 *) 0 ;
  bool result;
  
  arg1 = (ArVCC4 *)jarg1; 
  result = (bool)((ArVCC4 const *)arg1)->canSetFocus();
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_ArVCC4_autoFocus(void * jarg1) {
  unsigned int jresult ;
  ArVCC4 *arg1 = (ArVCC4 *) 0 ;
  bool result;
  
  arg1 = (ArVCC4 *)jarg1; 
  result = (bool)(arg1)->autoFocus();
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_ArVCC4_manualFocus(void * jarg1) {
  unsigned int jresult ;
  ArVCC4 *arg1 = (ArVCC4 *) 0 ;
  bool result;
  
  arg1 = (ArVCC4 *)jarg1; 
  result = (bool)(arg1)->manualFocus();
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_ArVCC4_focusNear(void * jarg1) {
  unsigned int jresult ;
  ArVCC4 *arg1 = (ArVCC4 *) 0 ;
  bool result;
  
  arg1 = (ArVCC4 *)jarg1; 
  result = (bool)(arg1)->focusNear();
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_ArVCC4_focusFar(void * jarg1) {
  unsigned int jresult ;
  ArVCC4 *arg1 = (ArVCC4 *) 0 ;
  bool result;
  
  arg1 = (ArVCC4 *)jarg1; 
  result = (bool)(arg1)->focusFar();
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_ArVCC4_setAutoFocus__SWIG_0(void * jarg1, unsigned int jarg2) {
  unsigned int jresult ;
  ArVCC4 *arg1 = (ArVCC4 *) 0 ;
  bool arg2 ;
  bool result;
  
  arg1 = (ArVCC4 *)jarg1; 
  arg2 = jarg2 ? true : false; 
  result = (bool)(arg1)->setAutoFocus(arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_ArVCC4_setAutoFocus__SWIG_1(void * jarg1) {
  unsigned int jresult ;
  ArVCC4 *arg1 = (ArVCC4 *) 0 ;
  bool result;
  
  arg1 = (ArVCC4 *)jarg1; 
  result = (bool)(arg1)->setAutoFocus();
  jresult = result; 
  return jresult;
}


SWIGEXPORT double SWIGSTDCALL CSharp_ArVCC4_getPanSlew(void * jarg1) {
  double jresult ;
  ArVCC4 *arg1 = (ArVCC4 *) 0 ;
  double result;
  
  arg1 = (ArVCC4 *)jarg1; 
  result = (double)(arg1)->getPanSlew();
  jresult = result; 
  return jresult;
}


SWIGEXPORT double SWIGSTDCALL CSharp_ArVCC4_getMaxPanSlew(void * jarg1) {
  double jresult ;
  ArVCC4 *arg1 = (ArVCC4 *) 0 ;
  double result;
  
  arg1 = (ArVCC4 *)jarg1; 
  result = (double)(arg1)->getMaxPanSlew();
  jresult = result; 
  return jresult;
}


SWIGEXPORT double SWIGSTDCALL CSharp_ArVCC4_getMinPanSlew(void * jarg1) {
  double jresult ;
  ArVCC4 *arg1 = (ArVCC4 *) 0 ;
  double result;
  
  arg1 = (ArVCC4 *)jarg1; 
  result = (double)(arg1)->getMinPanSlew();
  jresult = result; 
  return jresult;
}


SWIGEXPORT double SWIGSTDCALL CSharp_ArVCC4_getTiltSlew(void * jarg1) {
  double jresult ;
  ArVCC4 *arg1 = (ArVCC4 *) 0 ;
  double result;
  
  arg1 = (ArVCC4 *)jarg1; 
  result = (double)(arg1)->getTiltSlew();
  jresult = result; 
  return jresult;
}


SWIGEXPORT double SWIGSTDCALL CSharp_ArVCC4_getMaxTiltSlew(void * jarg1) {
  double jresult ;
  ArVCC4 *arg1 = (ArVCC4 *) 0 ;
  double result;
  
  arg1 = (ArVCC4 *)jarg1; 
  result = (double)(arg1)->getMaxTiltSlew();
  jresult = result; 
  return jresult;
}


SWIGEXPORT double SWIGSTDCALL CSharp_ArVCC4_getMinTiltSlew(void * jarg1) {
  double jresult ;
  ArVCC4 *arg1 = (ArVCC4 *) 0 ;
  double result;
  
  arg1 = (ArVCC4 *)jarg1; 
  result = (double)(arg1)->getMinTiltSlew();
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_ArVCC4_getMaxZoom(void * jarg1) {
  int jresult ;
  ArVCC4 *arg1 = (ArVCC4 *) 0 ;
  int result;
  
  arg1 = (ArVCC4 *)jarg1; 
  result = (int)((ArVCC4 const *)arg1)->getMaxZoom();
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_ArVCC4_getMinZoom(void * jarg1) {
  int jresult ;
  ArVCC4 *arg1 = (ArVCC4 *) 0 ;
  int result;
  
  arg1 = (ArVCC4 *)jarg1; 
  result = (int)((ArVCC4 const *)arg1)->getMinZoom();
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_ArVCC4_canGetFOV(void * jarg1) {
  unsigned int jresult ;
  ArVCC4 *arg1 = (ArVCC4 *) 0 ;
  bool result;
  
  arg1 = (ArVCC4 *)jarg1; 
  result = (bool)(arg1)->canGetFOV();
  jresult = result; 
  return jresult;
}


SWIGEXPORT double SWIGSTDCALL CSharp_ArVCC4_getFOVAtMaxZoom(void * jarg1) {
  double jresult ;
  ArVCC4 *arg1 = (ArVCC4 *) 0 ;
  double result;
  
  arg1 = (ArVCC4 *)jarg1; 
  result = (double)(arg1)->getFOVAtMaxZoom();
  jresult = result; 
  return jresult;
}


SWIGEXPORT double SWIGSTDCALL CSharp_ArVCC4_getFOVAtMinZoom(void * jarg1) {
  double jresult ;
  ArVCC4 *arg1 = (ArVCC4 *) 0 ;
  double result;
  
  arg1 = (ArVCC4 *)jarg1; 
  result = (double)(arg1)->getFOVAtMinZoom();
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_ArVCC4_wasError(void * jarg1) {
  unsigned int jresult ;
  ArVCC4 *arg1 = (ArVCC4 *) 0 ;
  bool result;
  
  arg1 = (ArVCC4 *)jarg1; 
  result = (bool)(arg1)->wasError();
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_ArVCC4_enableAutoUpdate(void * jarg1) {
  ArVCC4 *arg1 = (ArVCC4 *) 0 ;
  
  arg1 = (ArVCC4 *)jarg1; 
  (arg1)->enableAutoUpdate();
}


SWIGEXPORT void SWIGSTDCALL CSharp_ArVCC4_disableAutoUpdate(void * jarg1) {
  ArVCC4 *arg1 = (ArVCC4 *) 0 ;
  
  arg1 = (ArVCC4 *)jarg1; 
  (arg1)->disableAutoUpdate();
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_ArVCC4_getAutoUpdate(void * jarg1) {
  unsigned int jresult ;
  ArVCC4 *arg1 = (ArVCC4 *) 0 ;
  bool result;
  
  arg1 = (ArVCC4 *)jarg1; 
  result = (bool)(arg1)->getAutoUpdate();
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_ArVCC4_setLEDControlMode(void * jarg1, int jarg2) {
  ArVCC4 *arg1 = (ArVCC4 *) 0 ;
  int arg2 ;
  
  arg1 = (ArVCC4 *)jarg1; 
  arg2 = (int)jarg2; 
  (arg1)->setLEDControlMode(arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_ArVCC4_enableIRLEDs(void * jarg1) {
  ArVCC4 *arg1 = (ArVCC4 *) 0 ;
  
  arg1 = (ArVCC4 *)jarg1; 
  (arg1)->enableIRLEDs();
}


SWIGEXPORT void SWIGSTDCALL CSharp_ArVCC4_disableIRLEDs(void * jarg1) {
  ArVCC4 *arg1 = (ArVCC4 *) 0 ;
  
  arg1 = (ArVCC4 *)jarg1; 
  (arg1)->disableIRLEDs();
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_ArVCC4_getIRLEDsEnabled(void * jarg1) {
  unsigned int jresult ;
  ArVCC4 *arg1 = (ArVCC4 *) 0 ;
  bool result;
  
  arg1 = (ArVCC4 *)jarg1; 
  result = (bool)(arg1)->getIRLEDsEnabled();
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_ArVCC4_enableIRFilterMode(void * jarg1) {
  ArVCC4 *arg1 = (ArVCC4 *) 0 ;
  
  arg1 = (ArVCC4 *)jarg1; 
  (arg1)->enableIRFilterMode();
}


SWIGEXPORT void SWIGSTDCALL CSharp_ArVCC4_disableIRFilterMode(void * jarg1) {
  ArVCC4 *arg1 = (ArVCC4 *) 0 ;
  
  arg1 = (ArVCC4 *)jarg1; 
  (arg1)->disableIRFilterMode();
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_ArVCC4_getIRFilterModeEnabled(void * jarg1) {
  unsigned int jresult ;
  ArVCC4 *arg1 = (ArVCC4 *) 0 ;
  bool result;
  
  arg1 = (ArVCC4 *)jarg1; 
  result = (bool)(arg1)->getIRFilterModeEnabled();
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_ArVersalogicIO__SWIG_0(char * jarg1) {
  void * jresult ;
  char *arg1 = (char *) 0 ;
  ArVersalogicIO *result = 0 ;
  
  arg1 = (char *)jarg1; 
  result = (ArVersalogicIO *)new ArVersalogicIO((char const *)arg1);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_ArVersalogicIO__SWIG_1() {
  void * jresult ;
  ArVersalogicIO *result = 0 ;
  
  result = (ArVersalogicIO *)new ArVersalogicIO();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_ArVersalogicIO(void * jarg1) {
  ArVersalogicIO *arg1 = (ArVersalogicIO *) 0 ;
  
  arg1 = (ArVersalogicIO *)jarg1; 
  delete arg1;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_ArVersalogicIO_closeIO(void * jarg1) {
  unsigned int jresult ;
  ArVersalogicIO *arg1 = (ArVersalogicIO *) 0 ;
  bool result;
  
  arg1 = (ArVersalogicIO *)jarg1; 
  result = (bool)(arg1)->closeIO();
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_ArVersalogicIO_isEnabled(void * jarg1) {
  unsigned int jresult ;
  ArVersalogicIO *arg1 = (ArVersalogicIO *) 0 ;
  bool result;
  
  arg1 = (ArVersalogicIO *)jarg1; 
  result = (bool)(arg1)->isEnabled();
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_ArVersalogicIO_isAnalogSupported(void * jarg1) {
  unsigned int jresult ;
  ArVersalogicIO *arg1 = (ArVersalogicIO *) 0 ;
  bool result;
  
  arg1 = (ArVersalogicIO *)jarg1; 
  result = (bool)(arg1)->isAnalogSupported();
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_ArVersalogicIO_getAnalogValue(void * jarg1, int jarg2, void * jarg3) {
  unsigned int jresult ;
  ArVersalogicIO *arg1 = (ArVersalogicIO *) 0 ;
  int arg2 ;
  double *arg3 = (double *) 0 ;
  bool result;
  
  arg1 = (ArVersalogicIO *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (double *)jarg3; 
  result = (bool)(arg1)->getAnalogValue(arg2,arg3);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_ArVersalogicIO_getAnalogValueRaw(void * jarg1, int jarg2, void * jarg3) {
  unsigned int jresult ;
  ArVersalogicIO *arg1 = (ArVersalogicIO *) 0 ;
  int arg2 ;
  int *arg3 = (int *) 0 ;
  bool result;
  
  arg1 = (ArVersalogicIO *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (int *)jarg3; 
  result = (bool)(arg1)->getAnalogValueRaw(arg2,arg3);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_ArVersalogicIO_getDigitalBankDirection(void * jarg1, int jarg2) {
  int jresult ;
  ArVersalogicIO *arg1 = (ArVersalogicIO *) 0 ;
  int arg2 ;
  ArVersalogicIO::Direction result;
  
  arg1 = (ArVersalogicIO *)jarg1; 
  arg2 = (int)jarg2; 
  result = (ArVersalogicIO::Direction)(arg1)->getDigitalBankDirection(arg2);
  jresult = (int)result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_ArVersalogicIO_setDigitalBankDirection(void * jarg1, int jarg2, int jarg3) {
  unsigned int jresult ;
  ArVersalogicIO *arg1 = (ArVersalogicIO *) 0 ;
  int arg2 ;
  ArVersalogicIO::Direction arg3 ;
  bool result;
  
  arg1 = (ArVersalogicIO *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (ArVersalogicIO::Direction)jarg3; 
  result = (bool)(arg1)->setDigitalBankDirection(arg2,arg3);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_ArVersalogicIO_getDigitalBankInputs(void * jarg1, int jarg2, void * jarg3) {
  unsigned int jresult ;
  ArVersalogicIO *arg1 = (ArVersalogicIO *) 0 ;
  int arg2 ;
  unsigned char *arg3 = (unsigned char *) 0 ;
  bool result;
  
  arg1 = (ArVersalogicIO *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (unsigned char *)jarg3; 
  result = (bool)(arg1)->getDigitalBankInputs(arg2,arg3);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_ArVersalogicIO_getDigitalBankOutputs(void * jarg1, int jarg2, void * jarg3) {
  unsigned int jresult ;
  ArVersalogicIO *arg1 = (ArVersalogicIO *) 0 ;
  int arg2 ;
  unsigned char *arg3 = (unsigned char *) 0 ;
  bool result;
  
  arg1 = (ArVersalogicIO *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (unsigned char *)jarg3; 
  result = (bool)(arg1)->getDigitalBankOutputs(arg2,arg3);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_ArVersalogicIO_setDigitalBankOutputs(void * jarg1, int jarg2, unsigned char jarg3) {
  unsigned int jresult ;
  ArVersalogicIO *arg1 = (ArVersalogicIO *) 0 ;
  int arg2 ;
  unsigned char arg3 ;
  bool result;
  
  arg1 = (ArVersalogicIO *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (unsigned char)jarg3; 
  result = (bool)(arg1)->setDigitalBankOutputs(arg2,arg3);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_ArVersalogicIO_getSpecialControlRegister(void * jarg1, void * jarg2) {
  unsigned int jresult ;
  ArVersalogicIO *arg1 = (ArVersalogicIO *) 0 ;
  unsigned char *arg2 = (unsigned char *) 0 ;
  bool result;
  
  arg1 = (ArVersalogicIO *)jarg1; 
  arg2 = (unsigned char *)jarg2; 
  result = (bool)(arg1)->getSpecialControlRegister(arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_ArVersalogicIO_lockObj(void * jarg1) {
  int jresult ;
  ArVersalogicIO *arg1 = (ArVersalogicIO *) 0 ;
  int result;
  
  arg1 = (ArVersalogicIO *)jarg1; 
  result = (int)(arg1)->lock();
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_ArVersalogicIO_unlockObj(void * jarg1) {
  int jresult ;
  ArVersalogicIO *arg1 = (ArVersalogicIO *) 0 ;
  int result;
  
  arg1 = (ArVersalogicIO *)jarg1; 
  result = (int)(arg1)->unlock();
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_ArVersalogicIO_tryLock(void * jarg1) {
  int jresult ;
  ArVersalogicIO *arg1 = (ArVersalogicIO *) 0 ;
  int result;
  
  arg1 = (ArVersalogicIO *)jarg1; 
  result = (int)(arg1)->tryLock();
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_ArMTXIO__SWIG_0(char * jarg1) {
  void * jresult ;
  char *arg1 = (char *) 0 ;
  ArMTXIO *result = 0 ;
  
  arg1 = (char *)jarg1; 
  result = (ArMTXIO *)new ArMTXIO((char const *)arg1);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_ArMTXIO__SWIG_1() {
  void * jresult ;
  ArMTXIO *result = 0 ;
  
  result = (ArMTXIO *)new ArMTXIO();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_ArMTXIO(void * jarg1) {
  ArMTXIO *arg1 = (ArMTXIO *) 0 ;
  
  arg1 = (ArMTXIO *)jarg1; 
  delete arg1;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_ArMTXIO_closeIO(void * jarg1) {
  unsigned int jresult ;
  ArMTXIO *arg1 = (ArMTXIO *) 0 ;
  bool result;
  
  arg1 = (ArMTXIO *)jarg1; 
  result = (bool)(arg1)->closeIO();
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_ArMTXIO_isEnabled(void * jarg1) {
  unsigned int jresult ;
  ArMTXIO *arg1 = (ArMTXIO *) 0 ;
  bool result;
  
  arg1 = (ArMTXIO *)jarg1; 
  result = (bool)(arg1)->isEnabled();
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_ArMTXIO_isAnalogSupported(void * jarg1) {
  unsigned int jresult ;
  ArMTXIO *arg1 = (ArMTXIO *) 0 ;
  bool result;
  
  arg1 = (ArMTXIO *)jarg1; 
  result = (bool)(arg1)->isAnalogSupported();
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_ArMTXIO_getRegValue(void * jarg1, unsigned short jarg2, void * jarg3) {
  unsigned int jresult ;
  ArMTXIO *arg1 = (ArMTXIO *) 0 ;
  unsigned short arg2 ;
  unsigned char *arg3 = (unsigned char *) 0 ;
  bool result;
  
  arg1 = (ArMTXIO *)jarg1; 
  arg2 = (unsigned short)jarg2; 
  arg3 = (unsigned char *)jarg3; 
  result = (bool)(arg1)->getRegValue(arg2,arg3);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_ArMTXIO_getDigitalBankDirection(void * jarg1, int jarg2) {
  int jresult ;
  ArMTXIO *arg1 = (ArMTXIO *) 0 ;
  int arg2 ;
  ArMTXIO::Direction result;
  
  arg1 = (ArMTXIO *)jarg1; 
  arg2 = (int)jarg2; 
  result = (ArMTXIO::Direction)(arg1)->getDigitalBankDirection(arg2);
  jresult = (int)result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_ArMTXIO_setDigitalBankOutputs(void * jarg1, int jarg2, unsigned char jarg3) {
  unsigned int jresult ;
  ArMTXIO *arg1 = (ArMTXIO *) 0 ;
  int arg2 ;
  unsigned char arg3 ;
  bool result;
  
  arg1 = (ArMTXIO *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (unsigned char)jarg3; 
  result = (bool)(arg1)->setDigitalBankOutputs(arg2,arg3);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_ArMTXIO_getDigitalBankInputs(void * jarg1, int jarg2, void * jarg3) {
  unsigned int jresult ;
  ArMTXIO *arg1 = (ArMTXIO *) 0 ;
  int arg2 ;
  unsigned char *arg3 = (unsigned char *) 0 ;
  bool result;
  
  arg1 = (ArMTXIO *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (unsigned char *)jarg3; 
  result = (bool)(arg1)->getDigitalBankInputs(arg2,arg3);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_ArMTXIO_getDigitalBankOutputs(void * jarg1, int jarg2, void * jarg3) {
  unsigned int jresult ;
  ArMTXIO *arg1 = (ArMTXIO *) 0 ;
  int arg2 ;
  unsigned char *arg3 = (unsigned char *) 0 ;
  bool result;
  
  arg1 = (ArMTXIO *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (unsigned char *)jarg3; 
  result = (bool)(arg1)->getDigitalBankOutputs(arg2,arg3);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_ArMTXIO_setDigitalOutputBit(void * jarg1, int jarg2, int jarg3) {
  unsigned int jresult ;
  ArMTXIO *arg1 = (ArMTXIO *) 0 ;
  int arg2 ;
  int arg3 ;
  bool result;
  
  arg1 = (ArMTXIO *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (int)jarg3; 
  result = (bool)(arg1)->setDigitalOutputBit(arg2,arg3);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_ArMTXIO_getDigitalInputBit(void * jarg1, int jarg2, int jarg3) {
  unsigned int jresult ;
  ArMTXIO *arg1 = (ArMTXIO *) 0 ;
  int arg2 ;
  int arg3 ;
  bool result;
  
  arg1 = (ArMTXIO *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (int)jarg3; 
  result = (bool)(arg1)->getDigitalInputBit(arg2,arg3);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_ArMTXIO_setPeripheralPowerBankOutputs(void * jarg1, int jarg2, unsigned char jarg3) {
  unsigned int jresult ;
  ArMTXIO *arg1 = (ArMTXIO *) 0 ;
  int arg2 ;
  unsigned char arg3 ;
  bool result;
  
  arg1 = (ArMTXIO *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (unsigned char)jarg3; 
  result = (bool)(arg1)->setPeripheralPowerBankOutputs(arg2,arg3);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_ArMTXIO_getPeripheralPowerBankOutputs(void * jarg1, int jarg2, void * jarg3) {
  unsigned int jresult ;
  ArMTXIO *arg1 = (ArMTXIO *) 0 ;
  int arg2 ;
  unsigned char *arg3 = (unsigned char *) 0 ;
  bool result;
  
  arg1 = (ArMTXIO *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (unsigned char *)jarg3; 
  result = (bool)(arg1)->getPeripheralPowerBankOutputs(arg2,arg3);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_ArMTXIO_setPowerOutput(void * jarg1, int jarg2, int jarg3, unsigned int jarg4) {
  unsigned int jresult ;
  ArMTXIO *arg1 = (ArMTXIO *) 0 ;
  int arg2 ;
  int arg3 ;
  bool arg4 ;
  bool result;
  
  arg1 = (ArMTXIO *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (int)jarg3; 
  arg4 = jarg4 ? true : false; 
  result = (bool)(arg1)->setPowerOutput(arg2,arg3,arg4);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_ArMTXIO_lockObj(void * jarg1) {
  int jresult ;
  ArMTXIO *arg1 = (ArMTXIO *) 0 ;
  int result;
  
  arg1 = (ArMTXIO *)jarg1; 
  result = (int)(arg1)->lock();
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_ArMTXIO_unlockObj(void * jarg1) {
  int jresult ;
  ArMTXIO *arg1 = (ArMTXIO *) 0 ;
  int result;
  
  arg1 = (ArMTXIO *)jarg1; 
  result = (int)(arg1)->unlock();
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_ArMTXIO_tryLock(void * jarg1) {
  int jresult ;
  ArMTXIO *arg1 = (ArMTXIO *) 0 ;
  int result;
  
  arg1 = (ArMTXIO *)jarg1; 
  result = (int)(arg1)->tryLock();
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned char SWIGSTDCALL CSharp_ArMTXIO_getFirmwareRevision(void * jarg1) {
  unsigned char jresult ;
  ArMTXIO *arg1 = (ArMTXIO *) 0 ;
  unsigned char result;
  
  arg1 = (ArMTXIO *)jarg1; 
  result = (unsigned char)(arg1)->getFirmwareRevision();
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned char SWIGSTDCALL CSharp_ArMTXIO_getFirmwareVersion(void * jarg1) {
  unsigned char jresult ;
  ArMTXIO *arg1 = (ArMTXIO *) 0 ;
  unsigned char result;
  
  arg1 = (ArMTXIO *)jarg1; 
  result = (unsigned char)(arg1)->getFirmwareVersion();
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned char SWIGSTDCALL CSharp_ArMTXIO_getCompatibilityCode(void * jarg1) {
  unsigned char jresult ;
  ArMTXIO *arg1 = (ArMTXIO *) 0 ;
  unsigned char result;
  
  arg1 = (ArMTXIO *)jarg1; 
  result = (unsigned char)(arg1)->getCompatibilityCode();
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned char SWIGSTDCALL CSharp_ArMTXIO_getFPGAType(void * jarg1) {
  unsigned char jresult ;
  ArMTXIO *arg1 = (ArMTXIO *) 0 ;
  unsigned char result;
  
  arg1 = (ArMTXIO *)jarg1; 
  result = (unsigned char)(arg1)->getFPGAType();
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_ArMTXIO_getDigitalIOInputMon1(void * jarg1, void * jarg2) {
  unsigned int jresult ;
  ArMTXIO *arg1 = (ArMTXIO *) 0 ;
  unsigned char *arg2 = (unsigned char *) 0 ;
  bool result;
  
  arg1 = (ArMTXIO *)jarg1; 
  arg2 = (unsigned char *)jarg2; 
  result = (bool)(arg1)->getDigitalIOInputMon1(arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_ArMTXIO_getDigitalIOInputMon2(void * jarg1, void * jarg2) {
  unsigned int jresult ;
  ArMTXIO *arg1 = (ArMTXIO *) 0 ;
  unsigned char *arg2 = (unsigned char *) 0 ;
  bool result;
  
  arg1 = (ArMTXIO *)jarg1; 
  arg2 = (unsigned char *)jarg2; 
  result = (bool)(arg1)->getDigitalIOInputMon2(arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_ArMTXIO_getDigitalIOOutputMon1(void * jarg1, void * jarg2) {
  unsigned int jresult ;
  ArMTXIO *arg1 = (ArMTXIO *) 0 ;
  unsigned char *arg2 = (unsigned char *) 0 ;
  bool result;
  
  arg1 = (ArMTXIO *)jarg1; 
  arg2 = (unsigned char *)jarg2; 
  result = (bool)(arg1)->getDigitalIOOutputMon1(arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_ArMTXIO_getDigitalIOOutputMon2(void * jarg1, void * jarg2) {
  unsigned int jresult ;
  ArMTXIO *arg1 = (ArMTXIO *) 0 ;
  unsigned char *arg2 = (unsigned char *) 0 ;
  bool result;
  
  arg1 = (ArMTXIO *)jarg1; 
  arg2 = (unsigned char *)jarg2; 
  result = (bool)(arg1)->getDigitalIOOutputMon2(arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_ArMTXIO_getLightPole(void * jarg1, void * jarg2) {
  unsigned int jresult ;
  ArMTXIO *arg1 = (ArMTXIO *) 0 ;
  unsigned char *arg2 = (unsigned char *) 0 ;
  bool result;
  
  arg1 = (ArMTXIO *)jarg1; 
  arg2 = (unsigned char *)jarg2; 
  result = (bool)(arg1)->getLightPole(arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_ArMTXIO_setLightPole(void * jarg1, void * jarg2) {
  unsigned int jresult ;
  ArMTXIO *arg1 = (ArMTXIO *) 0 ;
  unsigned char *arg2 = (unsigned char *) 0 ;
  bool result;
  
  arg1 = (ArMTXIO *)jarg1; 
  arg2 = (unsigned char *)jarg2; 
  result = (bool)(arg1)->setLightPole(arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_ArMTXIO_getLPCTimeUSec(void * jarg1, void * jarg2) {
  unsigned int jresult ;
  ArMTXIO *arg1 = (ArMTXIO *) 0 ;
  ArTypes::UByte4 *arg2 = (ArTypes::UByte4 *) 0 ;
  bool result;
  
  arg1 = (ArMTXIO *)jarg1; 
  arg2 = (ArTypes::UByte4 *)jarg2; 
  result = (bool)(arg1)->getLPCTimeUSec(arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_ArMTXIO_getLPCTimeUSecCB(void * jarg1) {
  void * jresult ;
  ArMTXIO *arg1 = (ArMTXIO *) 0 ;
  ArRetFunctor1< bool,ArTypes::UByte4 * > *result = 0 ;
  
  arg1 = (ArMTXIO *)jarg1; 
  result = (ArRetFunctor1< bool,ArTypes::UByte4 * > *)(arg1)->getLPCTimeUSecCB();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_ArMTXIO_setSemaphore1(void * jarg1, void * jarg2) {
  unsigned int jresult ;
  ArMTXIO *arg1 = (ArMTXIO *) 0 ;
  unsigned char *arg2 = (unsigned char *) 0 ;
  bool result;
  
  arg1 = (ArMTXIO *)jarg1; 
  arg2 = (unsigned char *)jarg2; 
  result = (bool)(arg1)->setSemaphore1(arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_ArMTXIO_getSemaphore1(void * jarg1, void * jarg2) {
  unsigned int jresult ;
  ArMTXIO *arg1 = (ArMTXIO *) 0 ;
  unsigned char *arg2 = (unsigned char *) 0 ;
  bool result;
  
  arg1 = (ArMTXIO *)jarg1; 
  arg2 = (unsigned char *)jarg2; 
  result = (bool)(arg1)->getSemaphore1(arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_ArMTXIO_setSemaphore2(void * jarg1, void * jarg2) {
  unsigned int jresult ;
  ArMTXIO *arg1 = (ArMTXIO *) 0 ;
  unsigned char *arg2 = (unsigned char *) 0 ;
  bool result;
  
  arg1 = (ArMTXIO *)jarg1; 
  arg2 = (unsigned char *)jarg2; 
  result = (bool)(arg1)->setSemaphore2(arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_ArMTXIO_getSemaphore2(void * jarg1, void * jarg2) {
  unsigned int jresult ;
  ArMTXIO *arg1 = (ArMTXIO *) 0 ;
  unsigned char *arg2 = (unsigned char *) 0 ;
  bool result;
  
  arg1 = (ArMTXIO *)jarg1; 
  arg2 = (unsigned char *)jarg2; 
  result = (bool)(arg1)->getSemaphore2(arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_ArMTXIO_setSemaphore3(void * jarg1, void * jarg2) {
  unsigned int jresult ;
  ArMTXIO *arg1 = (ArMTXIO *) 0 ;
  unsigned char *arg2 = (unsigned char *) 0 ;
  bool result;
  
  arg1 = (ArMTXIO *)jarg1; 
  arg2 = (unsigned char *)jarg2; 
  result = (bool)(arg1)->setSemaphore3(arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_ArMTXIO_getSemaphore3(void * jarg1, void * jarg2) {
  unsigned int jresult ;
  ArMTXIO *arg1 = (ArMTXIO *) 0 ;
  unsigned char *arg2 = (unsigned char *) 0 ;
  bool result;
  
  arg1 = (ArMTXIO *)jarg1; 
  arg2 = (unsigned char *)jarg2; 
  result = (bool)(arg1)->getSemaphore3(arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_ArMTXIO_setSemaphore4(void * jarg1, void * jarg2) {
  unsigned int jresult ;
  ArMTXIO *arg1 = (ArMTXIO *) 0 ;
  unsigned char *arg2 = (unsigned char *) 0 ;
  bool result;
  
  arg1 = (ArMTXIO *)jarg1; 
  arg2 = (unsigned char *)jarg2; 
  result = (bool)(arg1)->setSemaphore4(arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_ArMTXIO_getSemaphore4(void * jarg1, void * jarg2) {
  unsigned int jresult ;
  ArMTXIO *arg1 = (ArMTXIO *) 0 ;
  unsigned char *arg2 = (unsigned char *) 0 ;
  bool result;
  
  arg1 = (ArMTXIO *)jarg1; 
  arg2 = (unsigned char *)jarg2; 
  result = (bool)(arg1)->getSemaphore4(arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_ArMTXIO_acquireSemaphore(void * jarg1, unsigned int jarg2) {
  unsigned int jresult ;
  ArMTXIO *arg1 = (ArMTXIO *) 0 ;
  unsigned int arg2 ;
  bool result;
  
  arg1 = (ArMTXIO *)jarg1; 
  arg2 = (unsigned int)jarg2; 
  result = (bool)(arg1)->acquireSemaphore(arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_ArMTXIO_releaseSemaphore(void * jarg1, unsigned int jarg2) {
  unsigned int jresult ;
  ArMTXIO *arg1 = (ArMTXIO *) 0 ;
  unsigned int arg2 ;
  bool result;
  
  arg1 = (ArMTXIO *)jarg1; 
  arg2 = (unsigned int)jarg2; 
  result = (bool)(arg1)->releaseSemaphore(arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_ArMTXIO_getBumperInput(void * jarg1, void * jarg2) {
  unsigned int jresult ;
  ArMTXIO *arg1 = (ArMTXIO *) 0 ;
  unsigned char *arg2 = (unsigned char *) 0 ;
  bool result;
  
  arg1 = (ArMTXIO *)jarg1; 
  arg2 = (unsigned char *)jarg2; 
  result = (bool)(arg1)->getBumperInput(arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_ArMTXIO_getPowerStatus1(void * jarg1, void * jarg2) {
  unsigned int jresult ;
  ArMTXIO *arg1 = (ArMTXIO *) 0 ;
  unsigned char *arg2 = (unsigned char *) 0 ;
  bool result;
  
  arg1 = (ArMTXIO *)jarg1; 
  arg2 = (unsigned char *)jarg2; 
  result = (bool)(arg1)->getPowerStatus1(arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_ArMTXIO_getPowerStatus2(void * jarg1, void * jarg2) {
  unsigned int jresult ;
  ArMTXIO *arg1 = (ArMTXIO *) 0 ;
  unsigned char *arg2 = (unsigned char *) 0 ;
  bool result;
  
  arg1 = (ArMTXIO *)jarg1; 
  arg2 = (unsigned char *)jarg2; 
  result = (bool)(arg1)->getPowerStatus2(arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_ArMTXIO_getLIDARSafety(void * jarg1, void * jarg2) {
  unsigned int jresult ;
  ArMTXIO *arg1 = (ArMTXIO *) 0 ;
  unsigned char *arg2 = (unsigned char *) 0 ;
  bool result;
  
  arg1 = (ArMTXIO *)jarg1; 
  arg2 = (unsigned char *)jarg2; 
  result = (bool)(arg1)->getLIDARSafety(arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_ArMTXIO_getESTOPStatus1(void * jarg1, void * jarg2) {
  unsigned int jresult ;
  ArMTXIO *arg1 = (ArMTXIO *) 0 ;
  unsigned char *arg2 = (unsigned char *) 0 ;
  bool result;
  
  arg1 = (ArMTXIO *)jarg1; 
  arg2 = (unsigned char *)jarg2; 
  result = (bool)(arg1)->getESTOPStatus1(arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_ArMTXIO_getESTOPStatus2(void * jarg1, void * jarg2) {
  unsigned int jresult ;
  ArMTXIO *arg1 = (ArMTXIO *) 0 ;
  unsigned char *arg2 = (unsigned char *) 0 ;
  bool result;
  
  arg1 = (ArMTXIO *)jarg1; 
  arg2 = (unsigned char *)jarg2; 
  result = (bool)(arg1)->getESTOPStatus2(arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_ArMTXIO_getESTOPStatus3(void * jarg1, void * jarg2) {
  unsigned int jresult ;
  ArMTXIO *arg1 = (ArMTXIO *) 0 ;
  unsigned char *arg2 = (unsigned char *) 0 ;
  bool result;
  
  arg1 = (ArMTXIO *)jarg1; 
  arg2 = (unsigned char *)jarg2; 
  result = (bool)(arg1)->getESTOPStatus3(arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_ArMTXIO_getESTOPStatus4(void * jarg1, void * jarg2) {
  unsigned int jresult ;
  ArMTXIO *arg1 = (ArMTXIO *) 0 ;
  unsigned char *arg2 = (unsigned char *) 0 ;
  bool result;
  
  arg1 = (ArMTXIO *)jarg1; 
  arg2 = (unsigned char *)jarg2; 
  result = (bool)(arg1)->getESTOPStatus4(arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_ArMTXIO_compareESTOPStatus4HighNibbleAgainst(void * jarg1, int jarg2) {
  unsigned int jresult ;
  ArMTXIO *arg1 = (ArMTXIO *) 0 ;
  int arg2 ;
  bool result;
  
  arg1 = (ArMTXIO *)jarg1; 
  arg2 = (int)jarg2; 
  result = (bool)(arg1)->compareESTOPStatus4HighNibbleAgainst(arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_ArMTXIO_getDigitalOutputControl1(void * jarg1, void * jarg2) {
  unsigned int jresult ;
  ArMTXIO *arg1 = (ArMTXIO *) 0 ;
  unsigned char *arg2 = (unsigned char *) 0 ;
  bool result;
  
  arg1 = (ArMTXIO *)jarg1; 
  arg2 = (unsigned char *)jarg2; 
  result = (bool)(arg1)->getDigitalOutputControl1(arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_ArMTXIO_setDigitalOutputControl1(void * jarg1, void * jarg2) {
  unsigned int jresult ;
  ArMTXIO *arg1 = (ArMTXIO *) 0 ;
  unsigned char *arg2 = (unsigned char *) 0 ;
  bool result;
  
  arg1 = (ArMTXIO *)jarg1; 
  arg2 = (unsigned char *)jarg2; 
  result = (bool)(arg1)->setDigitalOutputControl1(arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_ArMTXIO_getDigitalOutputControl2(void * jarg1, void * jarg2) {
  unsigned int jresult ;
  ArMTXIO *arg1 = (ArMTXIO *) 0 ;
  unsigned char *arg2 = (unsigned char *) 0 ;
  bool result;
  
  arg1 = (ArMTXIO *)jarg1; 
  arg2 = (unsigned char *)jarg2; 
  result = (bool)(arg1)->getDigitalOutputControl2(arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_ArMTXIO_setDigitalOutputControl2(void * jarg1, void * jarg2) {
  unsigned int jresult ;
  ArMTXIO *arg1 = (ArMTXIO *) 0 ;
  unsigned char *arg2 = (unsigned char *) 0 ;
  bool result;
  
  arg1 = (ArMTXIO *)jarg1; 
  arg2 = (unsigned char *)jarg2; 
  result = (bool)(arg1)->setDigitalOutputControl2(arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_ArMTXIO_getPeripheralPower1(void * jarg1, void * jarg2) {
  unsigned int jresult ;
  ArMTXIO *arg1 = (ArMTXIO *) 0 ;
  unsigned char *arg2 = (unsigned char *) 0 ;
  bool result;
  
  arg1 = (ArMTXIO *)jarg1; 
  arg2 = (unsigned char *)jarg2; 
  result = (bool)(arg1)->getPeripheralPower1(arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_ArMTXIO_setPeripheralPower1(void * jarg1, void * jarg2) {
  unsigned int jresult ;
  ArMTXIO *arg1 = (ArMTXIO *) 0 ;
  unsigned char *arg2 = (unsigned char *) 0 ;
  bool result;
  
  arg1 = (ArMTXIO *)jarg1; 
  arg2 = (unsigned char *)jarg2; 
  result = (bool)(arg1)->setPeripheralPower1(arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_ArMTXIO_getPeripheralPower2(void * jarg1, void * jarg2) {
  unsigned int jresult ;
  ArMTXIO *arg1 = (ArMTXIO *) 0 ;
  unsigned char *arg2 = (unsigned char *) 0 ;
  bool result;
  
  arg1 = (ArMTXIO *)jarg1; 
  arg2 = (unsigned char *)jarg2; 
  result = (bool)(arg1)->getPeripheralPower2(arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_ArMTXIO_setPeripheralPower2(void * jarg1, void * jarg2) {
  unsigned int jresult ;
  ArMTXIO *arg1 = (ArMTXIO *) 0 ;
  unsigned char *arg2 = (unsigned char *) 0 ;
  bool result;
  
  arg1 = (ArMTXIO *)jarg1; 
  arg2 = (unsigned char *)jarg2; 
  result = (bool)(arg1)->setPeripheralPower2(arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_ArMTXIO_getPeripheralPower3(void * jarg1, void * jarg2) {
  unsigned int jresult ;
  ArMTXIO *arg1 = (ArMTXIO *) 0 ;
  unsigned char *arg2 = (unsigned char *) 0 ;
  bool result;
  
  arg1 = (ArMTXIO *)jarg1; 
  arg2 = (unsigned char *)jarg2; 
  result = (bool)(arg1)->getPeripheralPower3(arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_ArMTXIO_setPeripheralPower3(void * jarg1, void * jarg2) {
  unsigned int jresult ;
  ArMTXIO *arg1 = (ArMTXIO *) 0 ;
  unsigned char *arg2 = (unsigned char *) 0 ;
  bool result;
  
  arg1 = (ArMTXIO *)jarg1; 
  arg2 = (unsigned char *)jarg2; 
  result = (bool)(arg1)->setPeripheralPower3(arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_ArMTXIO_getMotionPowerStatus(void * jarg1, void * jarg2) {
  unsigned int jresult ;
  ArMTXIO *arg1 = (ArMTXIO *) 0 ;
  unsigned char *arg2 = (unsigned char *) 0 ;
  bool result;
  
  arg1 = (ArMTXIO *)jarg1; 
  arg2 = (unsigned char *)jarg2; 
  result = (bool)(arg1)->getMotionPowerStatus(arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_ArMTXIO_getLIDARControl(void * jarg1, void * jarg2) {
  unsigned int jresult ;
  ArMTXIO *arg1 = (ArMTXIO *) 0 ;
  unsigned char *arg2 = (unsigned char *) 0 ;
  bool result;
  
  arg1 = (ArMTXIO *)jarg1; 
  arg2 = (unsigned char *)jarg2; 
  result = (bool)(arg1)->getLIDARControl(arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_ArMTXIO_setLIDARControl(void * jarg1, void * jarg2) {
  unsigned int jresult ;
  ArMTXIO *arg1 = (ArMTXIO *) 0 ;
  unsigned char *arg2 = (unsigned char *) 0 ;
  bool result;
  
  arg1 = (ArMTXIO *)jarg1; 
  arg2 = (unsigned char *)jarg2; 
  result = (bool)(arg1)->setLIDARControl(arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_ArMTXIO_getAnalogIOBlock1(void * jarg1, unsigned int jarg2, void * jarg3) {
  unsigned int jresult ;
  ArMTXIO *arg1 = (ArMTXIO *) 0 ;
  unsigned int arg2 ;
  unsigned short *arg3 = (unsigned short *) 0 ;
  bool result;
  
  arg1 = (ArMTXIO *)jarg1; 
  arg2 = (unsigned int)jarg2; 
  arg3 = (unsigned short *)jarg3; 
  result = (bool)(arg1)->getAnalogIOBlock1(arg2,arg3);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_ArMTXIO_getAnalogIOBlock2(void * jarg1, unsigned int jarg2, void * jarg3) {
  unsigned int jresult ;
  ArMTXIO *arg1 = (ArMTXIO *) 0 ;
  unsigned int arg2 ;
  unsigned short *arg3 = (unsigned short *) 0 ;
  bool result;
  
  arg1 = (ArMTXIO *)jarg1; 
  arg2 = (unsigned int)jarg2; 
  arg3 = (unsigned short *)jarg3; 
  result = (bool)(arg1)->getAnalogIOBlock2(arg2,arg3);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_ArMTXIO_setAnalogIOBlock2(void * jarg1, unsigned int jarg2, void * jarg3) {
  unsigned int jresult ;
  ArMTXIO *arg1 = (ArMTXIO *) 0 ;
  unsigned int arg2 ;
  unsigned short *arg3 = (unsigned short *) 0 ;
  bool result;
  
  arg1 = (ArMTXIO *)jarg1; 
  arg2 = (unsigned int)jarg2; 
  arg3 = (unsigned short *)jarg3; 
  result = (bool)(arg1)->setAnalogIOBlock2(arg2,arg3);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_Aria_init__SWIG_0(int jarg1, unsigned int jarg2, unsigned int jarg3) {
  Aria::SigHandleMethod arg1 ;
  bool arg2 ;
  bool arg3 ;
  
  arg1 = (Aria::SigHandleMethod)jarg1; 
  arg2 = jarg2 ? true : false; 
  arg3 = jarg3 ? true : false; 
  Aria::init(arg1,arg2,arg3);
}


SWIGEXPORT void SWIGSTDCALL CSharp_Aria_init__SWIG_1(int jarg1, unsigned int jarg2) {
  Aria::SigHandleMethod arg1 ;
  bool arg2 ;
  
  arg1 = (Aria::SigHandleMethod)jarg1; 
  arg2 = jarg2 ? true : false; 
  Aria::init(arg1,arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_Aria_init__SWIG_2(int jarg1) {
  Aria::SigHandleMethod arg1 ;
  
  arg1 = (Aria::SigHandleMethod)jarg1; 
  Aria::init(arg1);
}


SWIGEXPORT void SWIGSTDCALL CSharp_Aria_init__SWIG_3() {
  Aria::init();
}


SWIGEXPORT void SWIGSTDCALL CSharp_Aria_uninit() {
  Aria::uninit();
}


SWIGEXPORT void SWIGSTDCALL CSharp_Aria_addInitCallBack(void * jarg1, int jarg2) {
  ArFunctor *arg1 = (ArFunctor *) 0 ;
  ArListPos::Pos arg2 ;
  
  arg1 = (ArFunctor *)jarg1; 
  arg2 = (ArListPos::Pos)jarg2; 
  Aria::addInitCallBack(arg1,arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_Aria_addUninitCallBack(void * jarg1, int jarg2) {
  ArFunctor *arg1 = (ArFunctor *) 0 ;
  ArListPos::Pos arg2 ;
  
  arg1 = (ArFunctor *)jarg1; 
  arg2 = (ArListPos::Pos)jarg2; 
  Aria::addUninitCallBack(arg1,arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_Aria_shutdown() {
  Aria::shutdown();
}


SWIGEXPORT void SWIGSTDCALL CSharp_Aria_exit__SWIG_0(int jarg1) {
  int arg1 ;
  
  arg1 = (int)jarg1; 
  Aria::exit(arg1);
}


SWIGEXPORT void SWIGSTDCALL CSharp_Aria_exit__SWIG_1() {
  Aria::exit();
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_Aria_getRunning() {
  unsigned int jresult ;
  bool result;
  
  result = (bool)Aria::getRunning();
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_Aria_setDirectory(char * jarg1) {
  char *arg1 = (char *) 0 ;
  
  arg1 = (char *)jarg1; 
  Aria::setDirectory((char const *)arg1);
}


SWIGEXPORT char * SWIGSTDCALL CSharp_Aria_getDirectory() {
  char * jresult ;
  char *result = 0 ;
  
  result = (char *)Aria::getDirectory();
  jresult = SWIG_csharp_string_callback((const char *)result); 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_Aria_parseArgs() {
  unsigned int jresult ;
  bool result;
  
  result = (bool)Aria::parseArgs();
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_Aria_logOptions() {
  Aria::logOptions();
}


SWIGEXPORT void SWIGSTDCALL CSharp_Aria_setKeyHandler(void * jarg1) {
  ArKeyHandler *arg1 = (ArKeyHandler *) 0 ;
  
  arg1 = (ArKeyHandler *)jarg1; 
  Aria::setKeyHandler(arg1);
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Aria_getKeyHandler() {
  void * jresult ;
  ArKeyHandler *result = 0 ;
  
  result = (ArKeyHandler *)Aria::getKeyHandler();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_Aria_setJoyHandler(void * jarg1) {
  ArJoyHandler *arg1 = (ArJoyHandler *) 0 ;
  
  arg1 = (ArJoyHandler *)jarg1; 
  Aria::setJoyHandler(arg1);
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Aria_getJoyHandler() {
  void * jresult ;
  ArJoyHandler *result = 0 ;
  
  result = (ArJoyHandler *)Aria::getJoyHandler();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_Aria_addExitCallback__SWIG_0(void * jarg1, int jarg2) {
  ArFunctor *arg1 = (ArFunctor *) 0 ;
  int arg2 ;
  
  arg1 = (ArFunctor *)jarg1; 
  arg2 = (int)jarg2; 
  Aria::addExitCallback(arg1,arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_Aria_addExitCallback__SWIG_1(void * jarg1) {
  ArFunctor *arg1 = (ArFunctor *) 0 ;
  
  arg1 = (ArFunctor *)jarg1; 
  Aria::addExitCallback(arg1);
}


SWIGEXPORT void SWIGSTDCALL CSharp_Aria_remExitCallback(void * jarg1) {
  ArFunctor *arg1 = (ArFunctor *) 0 ;
  
  arg1 = (ArFunctor *)jarg1; 
  Aria::remExitCallback(arg1);
}


SWIGEXPORT void SWIGSTDCALL CSharp_Aria_setExitCallbacksLogLevel(int jarg1) {
  ArLog::LogLevel arg1 ;
  
  arg1 = (ArLog::LogLevel)jarg1; 
  Aria::setExitCallbacksLogLevel(arg1);
}


SWIGEXPORT void SWIGSTDCALL CSharp_Aria_exitOld__SWIG_0(int jarg1) {
  int arg1 ;
  
  arg1 = (int)jarg1; 
  Aria::exitOld(arg1);
}


SWIGEXPORT void SWIGSTDCALL CSharp_Aria_exitOld__SWIG_1() {
  Aria::exitOld();
}


SWIGEXPORT void SWIGSTDCALL CSharp_Aria_signalHandlerCB(int jarg1) {
  int arg1 ;
  
  arg1 = (int)jarg1; 
  Aria::signalHandlerCB(arg1);
}


SWIGEXPORT void SWIGSTDCALL CSharp_Aria_callExitCallbacks() {
  Aria::callExitCallbacks();
}


SWIGEXPORT void SWIGSTDCALL CSharp_Aria_addParseArgsCB__SWIG_0(void * jarg1, int jarg2) {
  ArRetFunctor< bool > *arg1 = (ArRetFunctor< bool > *) 0 ;
  int arg2 ;
  
  arg1 = (ArRetFunctor< bool > *)jarg1; 
  arg2 = (int)jarg2; 
  Aria::addParseArgsCB(arg1,arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_Aria_addParseArgsCB__SWIG_1(void * jarg1) {
  ArRetFunctor< bool > *arg1 = (ArRetFunctor< bool > *) 0 ;
  
  arg1 = (ArRetFunctor< bool > *)jarg1; 
  Aria::addParseArgsCB(arg1);
}


SWIGEXPORT void SWIGSTDCALL CSharp_Aria_setParseArgLogLevel(int jarg1) {
  ArLog::LogLevel arg1 ;
  
  arg1 = (ArLog::LogLevel)jarg1; 
  Aria::setParseArgLogLevel(arg1);
}


SWIGEXPORT void SWIGSTDCALL CSharp_Aria_addLogOptionsCB__SWIG_0(void * jarg1, int jarg2) {
  ArFunctor *arg1 = (ArFunctor *) 0 ;
  int arg2 ;
  
  arg1 = (ArFunctor *)jarg1; 
  arg2 = (int)jarg2; 
  Aria::addLogOptionsCB(arg1,arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_Aria_addLogOptionsCB__SWIG_1(void * jarg1) {
  ArFunctor *arg1 = (ArFunctor *) 0 ;
  
  arg1 = (ArFunctor *)jarg1; 
  Aria::addLogOptionsCB(arg1);
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_Aria_deviceConnectionAddCreator(char * jarg1, void * jarg2) {
  unsigned int jresult ;
  char *arg1 = (char *) 0 ;
  ArRetFunctor3< ArDeviceConnection *,char const *,char const *,char const * > *arg2 = (ArRetFunctor3< ArDeviceConnection *,char const *,char const *,char const * > *) 0 ;
  bool result;
  
  arg1 = (char *)jarg1; 
  arg2 = (ArRetFunctor3< ArDeviceConnection *,char const *,char const *,char const * > *)jarg2; 
  result = (bool)Aria::deviceConnectionAddCreator((char const *)arg1,arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT char * SWIGSTDCALL CSharp_Aria_deviceConnectionGetTypes() {
  char * jresult ;
  char *result = 0 ;
  
  result = (char *)Aria::deviceConnectionGetTypes();
  jresult = SWIG_csharp_string_callback((const char *)result); 
  return jresult;
}


SWIGEXPORT char * SWIGSTDCALL CSharp_Aria_deviceConnectionGetChoices() {
  char * jresult ;
  char *result = 0 ;
  
  result = (char *)Aria::deviceConnectionGetChoices();
  jresult = SWIG_csharp_string_callback((const char *)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Aria_deviceConnectionCreate__SWIG_0(char * jarg1, char * jarg2, char * jarg3, char * jarg4) {
  void * jresult ;
  char *arg1 = (char *) 0 ;
  char *arg2 = (char *) 0 ;
  char *arg3 = (char *) 0 ;
  char *arg4 = (char *) 0 ;
  ArDeviceConnection *result = 0 ;
  
  arg1 = (char *)jarg1; 
  arg2 = (char *)jarg2; 
  arg3 = (char *)jarg3; 
  arg4 = (char *)jarg4; 
  result = (ArDeviceConnection *)Aria::deviceConnectionCreate((char const *)arg1,(char const *)arg2,(char const *)arg3,(char const *)arg4);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Aria_deviceConnectionCreate__SWIG_1(char * jarg1, char * jarg2, char * jarg3) {
  void * jresult ;
  char *arg1 = (char *) 0 ;
  char *arg2 = (char *) 0 ;
  char *arg3 = (char *) 0 ;
  ArDeviceConnection *result = 0 ;
  
  arg1 = (char *)jarg1; 
  arg2 = (char *)jarg2; 
  arg3 = (char *)jarg3; 
  result = (ArDeviceConnection *)Aria::deviceConnectionCreate((char const *)arg1,(char const *)arg2,(char const *)arg3);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_Aria_setRobotJoyHandler(void * jarg1) {
  ArRobotJoyHandler *arg1 = (ArRobotJoyHandler *) 0 ;
  
  arg1 = (ArRobotJoyHandler *)jarg1; 
  Aria::setRobotJoyHandler(arg1);
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Aria_getRobotJoyHandler() {
  void * jresult ;
  ArRobotJoyHandler *result = 0 ;
  
  result = (ArRobotJoyHandler *)Aria::getRobotJoyHandler();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Aria_getConfig() {
  void * jresult ;
  ArConfig *result = 0 ;
  
  result = (ArConfig *)Aria::getConfig();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Aria_getInfoGroup() {
  void * jresult ;
  ArStringInfoGroup *result = 0 ;
  
  result = (ArStringInfoGroup *)Aria::getInfoGroup();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_Aria_addRobot(void * jarg1) {
  ArRobot *arg1 = (ArRobot *) 0 ;
  
  arg1 = (ArRobot *)jarg1; 
  Aria::addRobot(arg1);
}


SWIGEXPORT void SWIGSTDCALL CSharp_Aria_delRobot(void * jarg1) {
  ArRobot *arg1 = (ArRobot *) 0 ;
  
  arg1 = (ArRobot *)jarg1; 
  Aria::delRobot(arg1);
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Aria_findRobot(char * jarg1) {
  void * jresult ;
  char *arg1 = (char *) 0 ;
  ArRobot *result = 0 ;
  
  arg1 = (char *)jarg1; 
  result = (ArRobot *)Aria::findRobot(arg1);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Aria_getRobotList() {
  void * jresult ;
  std::list< ArRobot * > *result = 0 ;
  
  result = (std::list< ArRobot * > *)Aria::getRobotList();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_Aria_getMaxNumLasers() {
  int jresult ;
  int result;
  
  result = (int)Aria::getMaxNumLasers();
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_Aria_setMaxNumLasers(int jarg1) {
  int arg1 ;
  
  arg1 = (int)jarg1; 
  Aria::setMaxNumLasers(arg1);
}


SWIGEXPORT int SWIGSTDCALL CSharp_Aria_getMaxNumSonarBoards() {
  int jresult ;
  int result;
  
  result = (int)Aria::getMaxNumSonarBoards();
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_Aria_setMaxNumSonarBoards(int jarg1) {
  int arg1 ;
  
  arg1 = (int)jarg1; 
  Aria::setMaxNumSonarBoards(arg1);
}


SWIGEXPORT int SWIGSTDCALL CSharp_Aria_getMaxNumBatteries() {
  int jresult ;
  int result;
  
  result = (int)Aria::getMaxNumBatteries();
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_Aria_setMaxNumBatteries(int jarg1) {
  int arg1 ;
  
  arg1 = (int)jarg1; 
  Aria::setMaxNumBatteries(arg1);
}


SWIGEXPORT int SWIGSTDCALL CSharp_Aria_getMaxNumLCDs() {
  int jresult ;
  int result;
  
  result = (int)Aria::getMaxNumLCDs();
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_Aria_setMaxNumLCDs(int jarg1) {
  int arg1 ;
  
  arg1 = (int)jarg1; 
  Aria::setMaxNumLCDs(arg1);
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Aria_laserCreate__SWIG_0(char * jarg1, int jarg2, char * jarg3) {
  void * jresult ;
  char *arg1 = (char *) 0 ;
  int arg2 ;
  char *arg3 = (char *) 0 ;
  ArLaser *result = 0 ;
  
  arg1 = (char *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (char *)jarg3; 
  result = (ArLaser *)Aria::laserCreate((char const *)arg1,arg2,(char const *)arg3);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Aria_laserCreate__SWIG_1(char * jarg1, int jarg2) {
  void * jresult ;
  char *arg1 = (char *) 0 ;
  int arg2 ;
  ArLaser *result = 0 ;
  
  arg1 = (char *)jarg1; 
  arg2 = (int)jarg2; 
  result = (ArLaser *)Aria::laserCreate((char const *)arg1,arg2);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_Aria_laserAddCreator(char * jarg1, void * jarg2) {
  unsigned int jresult ;
  char *arg1 = (char *) 0 ;
  ArRetFunctor2< ArLaser *,int,char const * > *arg2 = (ArRetFunctor2< ArLaser *,int,char const * > *) 0 ;
  bool result;
  
  arg1 = (char *)jarg1; 
  arg2 = (ArRetFunctor2< ArLaser *,int,char const * > *)jarg2; 
  result = (bool)Aria::laserAddCreator((char const *)arg1,arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT char * SWIGSTDCALL CSharp_Aria_laserGetTypes() {
  char * jresult ;
  char *result = 0 ;
  
  result = (char *)Aria::laserGetTypes();
  jresult = SWIG_csharp_string_callback((const char *)result); 
  return jresult;
}


SWIGEXPORT char * SWIGSTDCALL CSharp_Aria_laserGetChoices() {
  char * jresult ;
  char *result = 0 ;
  
  result = (char *)Aria::laserGetChoices();
  jresult = SWIG_csharp_string_callback((const char *)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Aria_batteryCreate__SWIG_0(char * jarg1, int jarg2, char * jarg3) {
  void * jresult ;
  char *arg1 = (char *) 0 ;
  int arg2 ;
  char *arg3 = (char *) 0 ;
  ArBatteryMTX *result = 0 ;
  
  arg1 = (char *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (char *)jarg3; 
  result = (ArBatteryMTX *)Aria::batteryCreate((char const *)arg1,arg2,(char const *)arg3);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Aria_batteryCreate__SWIG_1(char * jarg1, int jarg2) {
  void * jresult ;
  char *arg1 = (char *) 0 ;
  int arg2 ;
  ArBatteryMTX *result = 0 ;
  
  arg1 = (char *)jarg1; 
  arg2 = (int)jarg2; 
  result = (ArBatteryMTX *)Aria::batteryCreate((char const *)arg1,arg2);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_Aria_batteryAddCreator(char * jarg1, void * jarg2) {
  unsigned int jresult ;
  char *arg1 = (char *) 0 ;
  ArRetFunctor2< ArBatteryMTX *,int,char const * > *arg2 = (ArRetFunctor2< ArBatteryMTX *,int,char const * > *) 0 ;
  bool result;
  
  arg1 = (char *)jarg1; 
  arg2 = (ArRetFunctor2< ArBatteryMTX *,int,char const * > *)jarg2; 
  result = (bool)Aria::batteryAddCreator((char const *)arg1,arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT char * SWIGSTDCALL CSharp_Aria_batteryGetTypes() {
  char * jresult ;
  char *result = 0 ;
  
  result = (char *)Aria::batteryGetTypes();
  jresult = SWIG_csharp_string_callback((const char *)result); 
  return jresult;
}


SWIGEXPORT char * SWIGSTDCALL CSharp_Aria_batteryGetChoices() {
  char * jresult ;
  char *result = 0 ;
  
  result = (char *)Aria::batteryGetChoices();
  jresult = SWIG_csharp_string_callback((const char *)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Aria_lcdCreate__SWIG_0(char * jarg1, int jarg2, char * jarg3) {
  void * jresult ;
  char *arg1 = (char *) 0 ;
  int arg2 ;
  char *arg3 = (char *) 0 ;
  ArLCDMTX *result = 0 ;
  
  arg1 = (char *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (char *)jarg3; 
  result = (ArLCDMTX *)Aria::lcdCreate((char const *)arg1,arg2,(char const *)arg3);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Aria_lcdCreate__SWIG_1(char * jarg1, int jarg2) {
  void * jresult ;
  char *arg1 = (char *) 0 ;
  int arg2 ;
  ArLCDMTX *result = 0 ;
  
  arg1 = (char *)jarg1; 
  arg2 = (int)jarg2; 
  result = (ArLCDMTX *)Aria::lcdCreate((char const *)arg1,arg2);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_Aria_lcdAddCreator(char * jarg1, void * jarg2) {
  unsigned int jresult ;
  char *arg1 = (char *) 0 ;
  ArRetFunctor2< ArLCDMTX *,int,char const * > *arg2 = (ArRetFunctor2< ArLCDMTX *,int,char const * > *) 0 ;
  bool result;
  
  arg1 = (char *)jarg1; 
  arg2 = (ArRetFunctor2< ArLCDMTX *,int,char const * > *)jarg2; 
  result = (bool)Aria::lcdAddCreator((char const *)arg1,arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT char * SWIGSTDCALL CSharp_Aria_lcdGetTypes() {
  char * jresult ;
  char *result = 0 ;
  
  result = (char *)Aria::lcdGetTypes();
  jresult = SWIG_csharp_string_callback((const char *)result); 
  return jresult;
}


SWIGEXPORT char * SWIGSTDCALL CSharp_Aria_lcdGetChoices() {
  char * jresult ;
  char *result = 0 ;
  
  result = (char *)Aria::lcdGetChoices();
  jresult = SWIG_csharp_string_callback((const char *)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Aria_sonarCreate__SWIG_0(char * jarg1, int jarg2, char * jarg3) {
  void * jresult ;
  char *arg1 = (char *) 0 ;
  int arg2 ;
  char *arg3 = (char *) 0 ;
  ArSonarMTX *result = 0 ;
  
  arg1 = (char *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (char *)jarg3; 
  result = (ArSonarMTX *)Aria::sonarCreate((char const *)arg1,arg2,(char const *)arg3);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Aria_sonarCreate__SWIG_1(char * jarg1, int jarg2) {
  void * jresult ;
  char *arg1 = (char *) 0 ;
  int arg2 ;
  ArSonarMTX *result = 0 ;
  
  arg1 = (char *)jarg1; 
  arg2 = (int)jarg2; 
  result = (ArSonarMTX *)Aria::sonarCreate((char const *)arg1,arg2);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_Aria_sonarAddCreator(char * jarg1, void * jarg2) {
  unsigned int jresult ;
  char *arg1 = (char *) 0 ;
  ArRetFunctor2< ArSonarMTX *,int,char const * > *arg2 = (ArRetFunctor2< ArSonarMTX *,int,char const * > *) 0 ;
  bool result;
  
  arg1 = (char *)jarg1; 
  arg2 = (ArRetFunctor2< ArSonarMTX *,int,char const * > *)jarg2; 
  result = (bool)Aria::sonarAddCreator((char const *)arg1,arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT char * SWIGSTDCALL CSharp_Aria_sonarGetTypes() {
  char * jresult ;
  char *result = 0 ;
  
  result = (char *)Aria::sonarGetTypes();
  jresult = SWIG_csharp_string_callback((const char *)result); 
  return jresult;
}


SWIGEXPORT char * SWIGSTDCALL CSharp_Aria_sonarGetChoices() {
  char * jresult ;
  char *result = 0 ;
  
  result = (char *)Aria::sonarGetChoices();
  jresult = SWIG_csharp_string_callback((const char *)result); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_Aria_setMaxNumVideoDevices(unsigned long jarg1) {
  size_t arg1 ;
  
  arg1 = (size_t)jarg1; 
  Aria::setMaxNumVideoDevices(arg1);
}


SWIGEXPORT unsigned long SWIGSTDCALL CSharp_Aria_getMaxNumVideoDevices() {
  unsigned long jresult ;
  size_t result;
  
  result = Aria::getMaxNumVideoDevices();
  jresult = (unsigned long)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_Aria_setMaxNumPTZs(unsigned long jarg1) {
  size_t arg1 ;
  
  arg1 = (size_t)jarg1; 
  Aria::setMaxNumPTZs(arg1);
}


SWIGEXPORT unsigned long SWIGSTDCALL CSharp_Aria_getMaxNumPTZs() {
  unsigned long jresult ;
  size_t result;
  
  result = Aria::getMaxNumPTZs();
  jresult = (unsigned long)result; 
  return jresult;
}


SWIGEXPORT char * SWIGSTDCALL CSharp_Aria_getIdentifier() {
  char * jresult ;
  char *result = 0 ;
  
  result = (char *)Aria::getIdentifier();
  jresult = SWIG_csharp_string_callback((const char *)result); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_Aria_setIdentifier(char * jarg1) {
  char *arg1 = (char *) 0 ;
  
  arg1 = (char *)jarg1; 
  Aria::setIdentifier((char const *)arg1);
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_Aria() {
  void * jresult ;
  Aria *result = 0 ;
  
  result = (Aria *)new Aria();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_Aria(void * jarg1) {
  Aria *arg1 = (Aria *) 0 ;
  
  arg1 = (Aria *)jarg1; 
  delete arg1;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_ArConfigArg_Bool__SWIG_0(char * jarg1, unsigned int jarg2, char * jarg3) {
  void * jresult ;
  char *arg1 = (char *) 0 ;
  bool arg2 ;
  char *arg3 = (char *) 0 ;
  ArConfigArg_Bool *result = 0 ;
  
  arg1 = (char *)jarg1; 
  arg2 = jarg2 ? true : false; 
  arg3 = (char *)jarg3; 
  result = (ArConfigArg_Bool *)new ArConfigArg_Bool((char const *)arg1,arg2,(char const *)arg3);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_ArConfigArg_Bool__SWIG_1(char * jarg1, unsigned int jarg2) {
  void * jresult ;
  char *arg1 = (char *) 0 ;
  bool arg2 ;
  ArConfigArg_Bool *result = 0 ;
  
  arg1 = (char *)jarg1; 
  arg2 = jarg2 ? true : false; 
  result = (ArConfigArg_Bool *)new ArConfigArg_Bool((char const *)arg1,arg2);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_ArConfigArg_Bool(void * jarg1) {
  ArConfigArg_Bool *arg1 = (ArConfigArg_Bool *) 0 ;
  
  arg1 = (ArConfigArg_Bool *)jarg1; 
  delete arg1;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_ArConfigArg_Int__SWIG_0(char * jarg1, int jarg2, char * jarg3, int jarg4, int jarg5) {
  void * jresult ;
  char *arg1 = (char *) 0 ;
  int arg2 ;
  char *arg3 = (char *) 0 ;
  int arg4 ;
  int arg5 ;
  ArConfigArg_Int *result = 0 ;
  
  arg1 = (char *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (char *)jarg3; 
  arg4 = (int)jarg4; 
  arg5 = (int)jarg5; 
  result = (ArConfigArg_Int *)new ArConfigArg_Int((char const *)arg1,arg2,(char const *)arg3,arg4,arg5);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_ArConfigArg_Int__SWIG_1(char * jarg1, int jarg2, char * jarg3, int jarg4) {
  void * jresult ;
  char *arg1 = (char *) 0 ;
  int arg2 ;
  char *arg3 = (char *) 0 ;
  int arg4 ;
  ArConfigArg_Int *result = 0 ;
  
  arg1 = (char *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (char *)jarg3; 
  arg4 = (int)jarg4; 
  result = (ArConfigArg_Int *)new ArConfigArg_Int((char const *)arg1,arg2,(char const *)arg3,arg4);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_ArConfigArg_Int__SWIG_2(char * jarg1, int jarg2, char * jarg3) {
  void * jresult ;
  char *arg1 = (char *) 0 ;
  int arg2 ;
  char *arg3 = (char *) 0 ;
  ArConfigArg_Int *result = 0 ;
  
  arg1 = (char *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (char *)jarg3; 
  result = (ArConfigArg_Int *)new ArConfigArg_Int((char const *)arg1,arg2,(char const *)arg3);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_ArConfigArg_Int__SWIG_3(char * jarg1, int jarg2) {
  void * jresult ;
  char *arg1 = (char *) 0 ;
  int arg2 ;
  ArConfigArg_Int *result = 0 ;
  
  arg1 = (char *)jarg1; 
  arg2 = (int)jarg2; 
  result = (ArConfigArg_Int *)new ArConfigArg_Int((char const *)arg1,arg2);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_ArConfigArg_Int(void * jarg1) {
  ArConfigArg_Int *arg1 = (ArConfigArg_Int *) 0 ;
  
  arg1 = (ArConfigArg_Int *)jarg1; 
  delete arg1;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_ArConfigArg_Double__SWIG_0(char * jarg1, double jarg2, char * jarg3, double jarg4, double jarg5) {
  void * jresult ;
  char *arg1 = (char *) 0 ;
  double arg2 ;
  char *arg3 = (char *) 0 ;
  double arg4 ;
  double arg5 ;
  ArConfigArg_Double *result = 0 ;
  
  arg1 = (char *)jarg1; 
  arg2 = (double)jarg2; 
  arg3 = (char *)jarg3; 
  arg4 = (double)jarg4; 
  arg5 = (double)jarg5; 
  result = (ArConfigArg_Double *)new ArConfigArg_Double((char const *)arg1,arg2,(char const *)arg3,arg4,arg5);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_ArConfigArg_Double__SWIG_1(char * jarg1, double jarg2, char * jarg3, double jarg4) {
  void * jresult ;
  char *arg1 = (char *) 0 ;
  double arg2 ;
  char *arg3 = (char *) 0 ;
  double arg4 ;
  ArConfigArg_Double *result = 0 ;
  
  arg1 = (char *)jarg1; 
  arg2 = (double)jarg2; 
  arg3 = (char *)jarg3; 
  arg4 = (double)jarg4; 
  result = (ArConfigArg_Double *)new ArConfigArg_Double((char const *)arg1,arg2,(char const *)arg3,arg4);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_ArConfigArg_Double__SWIG_2(char * jarg1, double jarg2, char * jarg3) {
  void * jresult ;
  char *arg1 = (char *) 0 ;
  double arg2 ;
  char *arg3 = (char *) 0 ;
  ArConfigArg_Double *result = 0 ;
  
  arg1 = (char *)jarg1; 
  arg2 = (double)jarg2; 
  arg3 = (char *)jarg3; 
  result = (ArConfigArg_Double *)new ArConfigArg_Double((char const *)arg1,arg2,(char const *)arg3);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_ArConfigArg_Double__SWIG_3(char * jarg1, double jarg2) {
  void * jresult ;
  char *arg1 = (char *) 0 ;
  double arg2 ;
  ArConfigArg_Double *result = 0 ;
  
  arg1 = (char *)jarg1; 
  arg2 = (double)jarg2; 
  result = (ArConfigArg_Double *)new ArConfigArg_Double((char const *)arg1,arg2);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_ArConfigArg_Double(void * jarg1) {
  ArConfigArg_Double *arg1 = (ArConfigArg_Double *) 0 ;
  
  arg1 = (ArConfigArg_Double *)jarg1; 
  delete arg1;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_ArConfigArg_String(char * jarg1, char * jarg2, char * jarg3) {
  void * jresult ;
  char *arg1 = (char *) 0 ;
  char *arg2 = (char *) 0 ;
  char *arg3 = (char *) 0 ;
  ArConfigArg_String *result = 0 ;
  
  arg1 = (char *)jarg1; 
  arg2 = (char *)jarg2; 
  arg3 = (char *)jarg3; 
  result = (ArConfigArg_String *)new ArConfigArg_String((char const *)arg1,arg2,(char const *)arg3);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_ArConfigArg_String(void * jarg1) {
  ArConfigArg_String *arg1 = (ArConfigArg_String *) 0 ;
  
  arg1 = (ArConfigArg_String *)jarg1; 
  delete arg1;
}


SWIGEXPORT void SWIGSTDCALL CSharp_ArJoyVec3f_x_set(void * jarg1, double jarg2) {
  ArJoyVec3f *arg1 = (ArJoyVec3f *) 0 ;
  double arg2 ;
  
  arg1 = (ArJoyVec3f *)jarg1; 
  arg2 = (double)jarg2; 
  if (arg1) (arg1)->x = arg2;
}


SWIGEXPORT double SWIGSTDCALL CSharp_ArJoyVec3f_x_get(void * jarg1) {
  double jresult ;
  ArJoyVec3f *arg1 = (ArJoyVec3f *) 0 ;
  double result;
  
  arg1 = (ArJoyVec3f *)jarg1; 
  result = (double) ((arg1)->x);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_ArJoyVec3f_y_set(void * jarg1, double jarg2) {
  ArJoyVec3f *arg1 = (ArJoyVec3f *) 0 ;
  double arg2 ;
  
  arg1 = (ArJoyVec3f *)jarg1; 
  arg2 = (double)jarg2; 
  if (arg1) (arg1)->y = arg2;
}


SWIGEXPORT double SWIGSTDCALL CSharp_ArJoyVec3f_y_get(void * jarg1) {
  double jresult ;
  ArJoyVec3f *arg1 = (ArJoyVec3f *) 0 ;
  double result;
  
  arg1 = (ArJoyVec3f *)jarg1; 
  result = (double) ((arg1)->y);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_ArJoyVec3f_z_set(void * jarg1, double jarg2) {
  ArJoyVec3f *arg1 = (ArJoyVec3f *) 0 ;
  double arg2 ;
  
  arg1 = (ArJoyVec3f *)jarg1; 
  arg2 = (double)jarg2; 
  if (arg1) (arg1)->z = arg2;
}


SWIGEXPORT double SWIGSTDCALL CSharp_ArJoyVec3f_z_get(void * jarg1) {
  double jresult ;
  ArJoyVec3f *arg1 = (ArJoyVec3f *) 0 ;
  double result;
  
  arg1 = (ArJoyVec3f *)jarg1; 
  result = (double) ((arg1)->z);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_ArJoyVec3f() {
  void * jresult ;
  ArJoyVec3f *result = 0 ;
  
  result = (ArJoyVec3f *)new ArJoyVec3f();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_ArJoyVec3f(void * jarg1) {
  ArJoyVec3f *arg1 = (ArJoyVec3f *) 0 ;
  
  arg1 = (ArJoyVec3f *)jarg1; 
  delete arg1;
}


SWIGEXPORT void SWIGSTDCALL CSharp_ArJoyVec3i_x_set(void * jarg1, int jarg2) {
  ArJoyVec3i *arg1 = (ArJoyVec3i *) 0 ;
  int arg2 ;
  
  arg1 = (ArJoyVec3i *)jarg1; 
  arg2 = (int)jarg2; 
  if (arg1) (arg1)->x = arg2;
}


SWIGEXPORT int SWIGSTDCALL CSharp_ArJoyVec3i_x_get(void * jarg1) {
  int jresult ;
  ArJoyVec3i *arg1 = (ArJoyVec3i *) 0 ;
  int result;
  
  arg1 = (ArJoyVec3i *)jarg1; 
  result = (int) ((arg1)->x);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_ArJoyVec3i_y_set(void * jarg1, int jarg2) {
  ArJoyVec3i *arg1 = (ArJoyVec3i *) 0 ;
  int arg2 ;
  
  arg1 = (ArJoyVec3i *)jarg1; 
  arg2 = (int)jarg2; 
  if (arg1) (arg1)->y = arg2;
}


SWIGEXPORT int SWIGSTDCALL CSharp_ArJoyVec3i_y_get(void * jarg1) {
  int jresult ;
  ArJoyVec3i *arg1 = (ArJoyVec3i *) 0 ;
  int result;
  
  arg1 = (ArJoyVec3i *)jarg1; 
  result = (int) ((arg1)->y);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_ArJoyVec3i_z_set(void * jarg1, int jarg2) {
  ArJoyVec3i *arg1 = (ArJoyVec3i *) 0 ;
  int arg2 ;
  
  arg1 = (ArJoyVec3i *)jarg1; 
  arg2 = (int)jarg2; 
  if (arg1) (arg1)->z = arg2;
}


SWIGEXPORT int SWIGSTDCALL CSharp_ArJoyVec3i_z_get(void * jarg1) {
  int jresult ;
  ArJoyVec3i *arg1 = (ArJoyVec3i *) 0 ;
  int result;
  
  arg1 = (ArJoyVec3i *)jarg1; 
  result = (int) ((arg1)->z);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_ArJoyVec3i() {
  void * jresult ;
  ArJoyVec3i *result = 0 ;
  
  result = (ArJoyVec3i *)new ArJoyVec3i();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_ArJoyVec3i(void * jarg1) {
  ArJoyVec3i *arg1 = (ArJoyVec3i *) 0 ;
  
  arg1 = (ArJoyVec3i *)jarg1; 
  delete arg1;
}


SWIGEXPORT ArPose * SWIGSTDCALL CSharp_ArPos2D_SWIGUpcast(ArPos2D *jarg1) {
    return (ArPose *)jarg1;
}

SWIGEXPORT ArPose * SWIGSTDCALL CSharp_ArPoseWithTime_SWIGUpcast(ArPoseWithTime *jarg1) {
    return (ArPose *)jarg1;
}

SWIGEXPORT ArRangeDevice * SWIGSTDCALL CSharp_ArRangeDeviceThreaded_SWIGUpcast(ArRangeDeviceThreaded *jarg1) {
    return (ArRangeDevice *)jarg1;
}

SWIGEXPORT ArRangeDeviceThreaded * SWIGSTDCALL CSharp_ArLaser_SWIGUpcast(ArLaser *jarg1) {
    return (ArRangeDeviceThreaded *)jarg1;
}

SWIGEXPORT ArFunctor * SWIGSTDCALL CSharp_ArRetFunctor_VoidP_SWIGUpcast(ArRetFunctor< void * > *jarg1) {
    return (ArFunctor *)jarg1;
}

SWIGEXPORT ArFunctor * SWIGSTDCALL CSharp_ArRetFunctor_Bool_SWIGUpcast(ArRetFunctor< bool > *jarg1) {
    return (ArFunctor *)jarg1;
}

SWIGEXPORT ArFunctor * SWIGSTDCALL CSharp_ArFunctor1_CString_SWIGUpcast(ArFunctor1< char const * > *jarg1) {
    return (ArFunctor *)jarg1;
}

SWIGEXPORT ArFunctor * SWIGSTDCALL CSharp_ArFunctor1_Int_SWIGUpcast(ArFunctor1< int > *jarg1) {
    return (ArFunctor *)jarg1;
}

SWIGEXPORT ArFunctor * SWIGSTDCALL CSharp_ArFunctor1_ArRobotPacketP_SWIGUpcast(ArFunctor1< ArRobotPacket * > *jarg1) {
    return (ArFunctor *)jarg1;
}

SWIGEXPORT ArFunctor * SWIGSTDCALL CSharp_ArRetFunctor_Int_SWIGUpcast(ArRetFunctor< int > *jarg1) {
    return (ArFunctor *)jarg1;
}

SWIGEXPORT ArFunctor * SWIGSTDCALL CSharp_ArRetFunctor_Double_SWIGUpcast(ArRetFunctor< double > *jarg1) {
    return (ArFunctor *)jarg1;
}

SWIGEXPORT ArFunctor * SWIGSTDCALL CSharp_ArRetFunctor_UnsignedInt_SWIGUpcast(ArRetFunctor< unsigned int > *jarg1) {
    return (ArFunctor *)jarg1;
}

SWIGEXPORT ArRetFunctor< double > * SWIGSTDCALL CSharp_ArRetFunctor1_Double_ArPoseWithTime_SWIGUpcast(ArRetFunctor1< double,ArPoseWithTime > *jarg1) {
    return (ArRetFunctor< double > *)jarg1;
}

SWIGEXPORT ArRetFunctor< bool > * SWIGSTDCALL CSharp_ArRetFunctor1_Bool_ArRobotPacketP_SWIGUpcast(ArRetFunctor1< bool,ArRobotPacket * > *jarg1) {
    return (ArRetFunctor< bool > *)jarg1;
}

SWIGEXPORT ArRetFunctor< bool > * SWIGSTDCALL CSharp_ArRetFunctor1_Bool_ArgumentBuilder_SWIGUpcast(ArRetFunctor1< bool,ArArgumentBuilder > *jarg1) {
    return (ArRetFunctor< bool > *)jarg1;
}

SWIGEXPORT ArRetFunctor< bool > * SWIGSTDCALL CSharp_ArRetFunctor1_Bool_ArgumentBuilderP_SWIGUpcast(ArRetFunctor1< bool,ArArgumentBuilder * > *jarg1) {
    return (ArRetFunctor< bool > *)jarg1;
}

SWIGEXPORT ArRetFunctor< void * > * SWIGSTDCALL CSharp_ArRetFunctor1_VoidP_VoidP_SWIGUpcast(ArRetFunctor1< void *,void * > *jarg1) {
    return (ArRetFunctor< void * > *)jarg1;
}

SWIGEXPORT ArBasePacket * SWIGSTDCALL CSharp_ArAMPTUPacket_SWIGUpcast(ArAMPTUPacket *jarg1) {
    return (ArBasePacket *)jarg1;
}

SWIGEXPORT ArPTZ * SWIGSTDCALL CSharp_ArAMPTU_SWIGUpcast(ArAMPTU *jarg1) {
    return (ArPTZ *)jarg1;
}

SWIGEXPORT ArThread * SWIGSTDCALL CSharp_ArASyncTask_SWIGUpcast(ArASyncTask *jarg1) {
    return (ArThread *)jarg1;
}

SWIGEXPORT ArAction * SWIGSTDCALL CSharp_ArActionAvoidFront_SWIGUpcast(ArActionAvoidFront *jarg1) {
    return (ArAction *)jarg1;
}

SWIGEXPORT ArAction * SWIGSTDCALL CSharp_ArActionAvoidSide_SWIGUpcast(ArActionAvoidSide *jarg1) {
    return (ArAction *)jarg1;
}

SWIGEXPORT ArAction * SWIGSTDCALL CSharp_ArActionBumpers_SWIGUpcast(ArActionBumpers *jarg1) {
    return (ArAction *)jarg1;
}

SWIGEXPORT ArAction * SWIGSTDCALL CSharp_ArActionColorFollow_SWIGUpcast(ArActionColorFollow *jarg1) {
    return (ArAction *)jarg1;
}

SWIGEXPORT ArAction * SWIGSTDCALL CSharp_ArActionConstantVelocity_SWIGUpcast(ArActionConstantVelocity *jarg1) {
    return (ArAction *)jarg1;
}

SWIGEXPORT ArAction * SWIGSTDCALL CSharp_ArActionDeceleratingLimiter_SWIGUpcast(ArActionDeceleratingLimiter *jarg1) {
    return (ArAction *)jarg1;
}

SWIGEXPORT ArAction * SWIGSTDCALL CSharp_ArActionDriveDistance_SWIGUpcast(ArActionDriveDistance *jarg1) {
    return (ArAction *)jarg1;
}

SWIGEXPORT ArAction * SWIGSTDCALL CSharp_ArActionGoto_SWIGUpcast(ArActionGoto *jarg1) {
    return (ArAction *)jarg1;
}

SWIGEXPORT ArAction * SWIGSTDCALL CSharp_ArActionGotoStraight_SWIGUpcast(ArActionGotoStraight *jarg1) {
    return (ArAction *)jarg1;
}

SWIGEXPORT ArActionGroup * SWIGSTDCALL CSharp_ArActionGroupInput_SWIGUpcast(ArActionGroupInput *jarg1) {
    return (ArActionGroup *)jarg1;
}

SWIGEXPORT ArActionGroup * SWIGSTDCALL CSharp_ArActionGroupStop_SWIGUpcast(ArActionGroupStop *jarg1) {
    return (ArActionGroup *)jarg1;
}

SWIGEXPORT ArActionGroup * SWIGSTDCALL CSharp_ArActionGroupTeleop_SWIGUpcast(ArActionGroupTeleop *jarg1) {
    return (ArActionGroup *)jarg1;
}

SWIGEXPORT ArActionGroup * SWIGSTDCALL CSharp_ArActionGroupUnguardedTeleop_SWIGUpcast(ArActionGroupUnguardedTeleop *jarg1) {
    return (ArActionGroup *)jarg1;
}

SWIGEXPORT ArActionGroup * SWIGSTDCALL CSharp_ArActionGroupWander_SWIGUpcast(ArActionGroupWander *jarg1) {
    return (ArActionGroup *)jarg1;
}

SWIGEXPORT ArActionGroup * SWIGSTDCALL CSharp_ArActionGroupColorFollow_SWIGUpcast(ArActionGroupColorFollow *jarg1) {
    return (ArActionGroup *)jarg1;
}

SWIGEXPORT ArActionGroup * SWIGSTDCALL CSharp_ArActionGroupRatioDrive_SWIGUpcast(ArActionGroupRatioDrive *jarg1) {
    return (ArActionGroup *)jarg1;
}

SWIGEXPORT ArActionGroup * SWIGSTDCALL CSharp_ArActionGroupRatioDriveUnsafe_SWIGUpcast(ArActionGroupRatioDriveUnsafe *jarg1) {
    return (ArActionGroup *)jarg1;
}

SWIGEXPORT ArAction * SWIGSTDCALL CSharp_ArActionIRs_SWIGUpcast(ArActionIRs *jarg1) {
    return (ArAction *)jarg1;
}

SWIGEXPORT ArAction * SWIGSTDCALL CSharp_ArActionInput_SWIGUpcast(ArActionInput *jarg1) {
    return (ArAction *)jarg1;
}

SWIGEXPORT ArAction * SWIGSTDCALL CSharp_ArActionJoydrive_SWIGUpcast(ArActionJoydrive *jarg1) {
    return (ArAction *)jarg1;
}

SWIGEXPORT ArAction * SWIGSTDCALL CSharp_ArActionKeydrive_SWIGUpcast(ArActionKeydrive *jarg1) {
    return (ArAction *)jarg1;
}

SWIGEXPORT ArAction * SWIGSTDCALL CSharp_ArActionLimiterBackwards_SWIGUpcast(ArActionLimiterBackwards *jarg1) {
    return (ArAction *)jarg1;
}

SWIGEXPORT ArAction * SWIGSTDCALL CSharp_ArActionLimiterForwards_SWIGUpcast(ArActionLimiterForwards *jarg1) {
    return (ArAction *)jarg1;
}

SWIGEXPORT ArAction * SWIGSTDCALL CSharp_ArActionLimiterTableSensor_SWIGUpcast(ArActionLimiterTableSensor *jarg1) {
    return (ArAction *)jarg1;
}

SWIGEXPORT ArAction * SWIGSTDCALL CSharp_ArActionMovementParameters_SWIGUpcast(ArActionMovementParameters *jarg1) {
    return (ArAction *)jarg1;
}

SWIGEXPORT ArAction * SWIGSTDCALL CSharp_ArActionRatioInput_SWIGUpcast(ArActionRatioInput *jarg1) {
    return (ArAction *)jarg1;
}

SWIGEXPORT ArAction * SWIGSTDCALL CSharp_ArActionRobotJoydrive_SWIGUpcast(ArActionRobotJoydrive *jarg1) {
    return (ArAction *)jarg1;
}

SWIGEXPORT ArAction * SWIGSTDCALL CSharp_ArActionStallRecover_SWIGUpcast(ArActionStallRecover *jarg1) {
    return (ArAction *)jarg1;
}

SWIGEXPORT ArAction * SWIGSTDCALL CSharp_ArActionStop_SWIGUpcast(ArActionStop *jarg1) {
    return (ArAction *)jarg1;
}

SWIGEXPORT ArAction * SWIGSTDCALL CSharp_ArActionTriangleDriveTo_SWIGUpcast(ArActionTriangleDriveTo *jarg1) {
    return (ArAction *)jarg1;
}

SWIGEXPORT ArAction * SWIGSTDCALL CSharp_ArActionTurn_SWIGUpcast(ArActionTurn *jarg1) {
    return (ArAction *)jarg1;
}

SWIGEXPORT ArRangeDevice * SWIGSTDCALL CSharp_ArBumpers_SWIGUpcast(ArBumpers *jarg1) {
    return (ArRangeDevice *)jarg1;
}

SWIGEXPORT ArCameraCollectionItem * SWIGSTDCALL CSharp_ArCameraParameterSource_SWIGUpcast(ArCameraParameterSource *jarg1) {
    return (ArCameraCollectionItem *)jarg1;
}

SWIGEXPORT ArHasFileName * SWIGSTDCALL CSharp_ArConfig_SWIGUpcast(ArConfig *jarg1) {
    return (ArHasFileName *)jarg1;
}

SWIGEXPORT ArBasePacket * SWIGSTDCALL CSharp_ArDPPTUPacket_SWIGUpcast(ArDPPTUPacket *jarg1) {
    return (ArBasePacket *)jarg1;
}

SWIGEXPORT ArPTZ * SWIGSTDCALL CSharp_ArDPPTU_SWIGUpcast(ArDPPTU *jarg1) {
    return (ArPTZ *)jarg1;
}

SWIGEXPORT ArRangeDevice * SWIGSTDCALL CSharp_ArForbiddenRangeDevice_SWIGUpcast(ArForbiddenRangeDevice *jarg1) {
    return (ArRangeDevice *)jarg1;
}

SWIGEXPORT ArASyncTask * SWIGSTDCALL CSharp_ArFunctorASyncTask_SWIGUpcast(ArFunctorASyncTask *jarg1) {
    return (ArASyncTask *)jarg1;
}

SWIGEXPORT ArGPS * SWIGSTDCALL CSharp_ArSimulatedGPS_SWIGUpcast(ArSimulatedGPS *jarg1) {
    return (ArGPS *)jarg1;
}

SWIGEXPORT Ar3DPoint * SWIGSTDCALL CSharp_ArECEFCoords_SWIGUpcast(ArECEFCoords *jarg1) {
    return (Ar3DPoint *)jarg1;
}

SWIGEXPORT Ar3DPoint * SWIGSTDCALL CSharp_ArLLACoords_SWIGUpcast(ArLLACoords *jarg1) {
    return (Ar3DPoint *)jarg1;
}

SWIGEXPORT Ar3DPoint * SWIGSTDCALL CSharp_ArENUCoords_SWIGUpcast(ArENUCoords *jarg1) {
    return (Ar3DPoint *)jarg1;
}

SWIGEXPORT ArENUCoords * SWIGSTDCALL CSharp_ArMapGPSCoords_SWIGUpcast(ArMapGPSCoords *jarg1) {
    return (ArENUCoords *)jarg1;
}

SWIGEXPORT ArRangeDevice * SWIGSTDCALL CSharp_ArIRs_SWIGUpcast(ArIRs *jarg1) {
    return (ArRangeDevice *)jarg1;
}

SWIGEXPORT ArRangeDevice * SWIGSTDCALL CSharp_ArIrrfDevice_SWIGUpcast(ArIrrfDevice *jarg1) {
    return (ArRangeDevice *)jarg1;
}

SWIGEXPORT ArLaser * SWIGSTDCALL CSharp_ArLaserFilter_SWIGUpcast(ArLaserFilter *jarg1) {
    return (ArLaser *)jarg1;
}

SWIGEXPORT ArRangeDevice * SWIGSTDCALL CSharp_ArLaserReflectorDevice_SWIGUpcast(ArLaserReflectorDevice *jarg1) {
    return (ArRangeDevice *)jarg1;
}

SWIGEXPORT ArLineSegment * SWIGSTDCALL CSharp_ArLineFinderSegment_SWIGUpcast(ArLineFinderSegment *jarg1) {
    return (ArLineSegment *)jarg1;
}

SWIGEXPORT ArDeviceConnection * SWIGSTDCALL CSharp_ArLogFileConnection_SWIGUpcast(ArLogFileConnection *jarg1) {
    return (ArDeviceConnection *)jarg1;
}

SWIGEXPORT ArHasFileName * SWIGSTDCALL CSharp_ArMapInterface_SWIGUpcast(ArMapInterface *jarg1) {
    return (ArHasFileName *)jarg1;
}

SWIGEXPORT ArMapInterface * SWIGSTDCALL CSharp_ArMap_SWIGUpcast(ArMap *jarg1) {
    return (ArMapInterface *)jarg1;
}

SWIGEXPORT ArMode * SWIGSTDCALL CSharp_ArModeTeleop_SWIGUpcast(ArModeTeleop *jarg1) {
    return (ArMode *)jarg1;
}

SWIGEXPORT ArMode * SWIGSTDCALL CSharp_ArModeUnguardedTeleop_SWIGUpcast(ArModeUnguardedTeleop *jarg1) {
    return (ArMode *)jarg1;
}

SWIGEXPORT ArMode * SWIGSTDCALL CSharp_ArModeWander_SWIGUpcast(ArModeWander *jarg1) {
    return (ArMode *)jarg1;
}

SWIGEXPORT ArMode * SWIGSTDCALL CSharp_ArModeGripper_SWIGUpcast(ArModeGripper *jarg1) {
    return (ArMode *)jarg1;
}

SWIGEXPORT ArMode * SWIGSTDCALL CSharp_ArModeCamera_SWIGUpcast(ArModeCamera *jarg1) {
    return (ArMode *)jarg1;
}

SWIGEXPORT ArMode * SWIGSTDCALL CSharp_ArModeSonar_SWIGUpcast(ArModeSonar *jarg1) {
    return (ArMode *)jarg1;
}

SWIGEXPORT ArMode * SWIGSTDCALL CSharp_ArModeBumps_SWIGUpcast(ArModeBumps *jarg1) {
    return (ArMode *)jarg1;
}

SWIGEXPORT ArMode * SWIGSTDCALL CSharp_ArModePosition_SWIGUpcast(ArModePosition *jarg1) {
    return (ArMode *)jarg1;
}

SWIGEXPORT ArMode * SWIGSTDCALL CSharp_ArModeIO_SWIGUpcast(ArModeIO *jarg1) {
    return (ArMode *)jarg1;
}

SWIGEXPORT ArMode * SWIGSTDCALL CSharp_ArModeLaser_SWIGUpcast(ArModeLaser *jarg1) {
    return (ArMode *)jarg1;
}

SWIGEXPORT ArMode * SWIGSTDCALL CSharp_ArModeActs_SWIGUpcast(ArModeActs *jarg1) {
    return (ArMode *)jarg1;
}

SWIGEXPORT ArMode * SWIGSTDCALL CSharp_ArModeCommand_SWIGUpcast(ArModeCommand *jarg1) {
    return (ArMode *)jarg1;
}

SWIGEXPORT ArMode * SWIGSTDCALL CSharp_ArModeTCM2_SWIGUpcast(ArModeTCM2 *jarg1) {
    return (ArMode *)jarg1;
}

SWIGEXPORT ArMode * SWIGSTDCALL CSharp_ArModeConfig_SWIGUpcast(ArModeConfig *jarg1) {
    return (ArMode *)jarg1;
}

SWIGEXPORT ArMode * SWIGSTDCALL CSharp_ArModeRobotStatus_SWIGUpcast(ArModeRobotStatus *jarg1) {
    return (ArMode *)jarg1;
}

SWIGEXPORT ArGPS * SWIGSTDCALL CSharp_ArNovatelGPS_SWIGUpcast(ArNovatelGPS *jarg1) {
    return (ArGPS *)jarg1;
}

SWIGEXPORT ArNovatelGPS * SWIGSTDCALL CSharp_ArNovatelSPAN_SWIGUpcast(ArNovatelSPAN *jarg1) {
    return (ArNovatelGPS *)jarg1;
}

SWIGEXPORT ArResolver * SWIGSTDCALL CSharp_ArPriorityResolver_SWIGUpcast(ArPriorityResolver *jarg1) {
    return (ArResolver *)jarg1;
}

SWIGEXPORT ArASyncTask * SWIGSTDCALL CSharp_ArRecurrentTask_SWIGUpcast(ArRecurrentTask *jarg1) {
    return (ArASyncTask *)jarg1;
}

SWIGEXPORT ArBasePacket * SWIGSTDCALL CSharp_ArRobotPacket_SWIGUpcast(ArRobotPacket *jarg1) {
    return (ArBasePacket *)jarg1;
}

SWIGEXPORT ArConfig * SWIGSTDCALL CSharp_ArRobotParams_SWIGUpcast(ArRobotParams *jarg1) {
    return (ArConfig *)jarg1;
}

SWIGEXPORT ArBasePacket * SWIGSTDCALL CSharp_ArRVisionPacket_SWIGUpcast(ArRVisionPacket *jarg1) {
    return (ArBasePacket *)jarg1;
}

SWIGEXPORT ArPTZ * SWIGSTDCALL CSharp_ArRVisionPTZ_SWIGUpcast(ArRVisionPTZ *jarg1) {
    return (ArPTZ *)jarg1;
}

SWIGEXPORT ArDeviceConnection * SWIGSTDCALL CSharp_ArSerialConnection_SWIGUpcast(ArSerialConnection *jarg1) {
    return (ArDeviceConnection *)jarg1;
}

SWIGEXPORT ArASyncTask * SWIGSTDCALL CSharp_ArSignalHandler_SWIGUpcast(ArSignalHandler *jarg1) {
    return (ArASyncTask *)jarg1;
}

SWIGEXPORT ArLaser * SWIGSTDCALL CSharp_ArSimulatedLaser_SWIGUpcast(ArSimulatedLaser *jarg1) {
    return (ArLaser *)jarg1;
}

SWIGEXPORT ArRangeDevice * SWIGSTDCALL CSharp_ArSonarDevice_SWIGUpcast(ArSonarDevice *jarg1) {
    return (ArRangeDevice *)jarg1;
}

SWIGEXPORT ArBasePacket * SWIGSTDCALL CSharp_ArSonyPacket_SWIGUpcast(ArSonyPacket *jarg1) {
    return (ArBasePacket *)jarg1;
}

SWIGEXPORT ArPTZ * SWIGSTDCALL CSharp_ArSonyPTZ_SWIGUpcast(ArSonyPTZ *jarg1) {
    return (ArPTZ *)jarg1;
}

SWIGEXPORT ArASyncTask * SWIGSTDCALL CSharp_ArSoundsQueue_SWIGUpcast(ArSoundsQueue *jarg1) {
    return (ArASyncTask *)jarg1;
}

SWIGEXPORT ArASyncTask * SWIGSTDCALL CSharp_ArSyncLoop_SWIGUpcast(ArSyncLoop *jarg1) {
    return (ArASyncTask *)jarg1;
}

SWIGEXPORT ArTCM2 * SWIGSTDCALL CSharp_ArTCMCompassDirect_SWIGUpcast(ArTCMCompassDirect *jarg1) {
    return (ArTCM2 *)jarg1;
}

SWIGEXPORT ArTCM2 * SWIGSTDCALL CSharp_ArTCMCompassRobot_SWIGUpcast(ArTCMCompassRobot *jarg1) {
    return (ArTCM2 *)jarg1;
}

SWIGEXPORT ArDeviceConnection * SWIGSTDCALL CSharp_ArTcpConnection_SWIGUpcast(ArTcpConnection *jarg1) {
    return (ArDeviceConnection *)jarg1;
}

SWIGEXPORT ArGPS * SWIGSTDCALL CSharp_ArTrimbleGPS_SWIGUpcast(ArTrimbleGPS *jarg1) {
    return (ArGPS *)jarg1;
}

SWIGEXPORT ArLaser * SWIGSTDCALL CSharp_ArUrg_SWIGUpcast(ArUrg *jarg1) {
    return (ArLaser *)jarg1;
}

SWIGEXPORT ArBasePacket * SWIGSTDCALL CSharp_ArVCC4Packet_SWIGUpcast(ArVCC4Packet *jarg1) {
    return (ArBasePacket *)jarg1;
}

SWIGEXPORT ArPTZ * SWIGSTDCALL CSharp_ArVCC4_SWIGUpcast(ArVCC4 *jarg1) {
    return (ArPTZ *)jarg1;
}

SWIGEXPORT ArConfigArg * SWIGSTDCALL CSharp_ArConfigArg_Bool_SWIGUpcast(ArConfigArg_Bool *jarg1) {
    return (ArConfigArg *)jarg1;
}

SWIGEXPORT ArConfigArg * SWIGSTDCALL CSharp_ArConfigArg_Int_SWIGUpcast(ArConfigArg_Int *jarg1) {
    return (ArConfigArg *)jarg1;
}

SWIGEXPORT ArConfigArg * SWIGSTDCALL CSharp_ArConfigArg_Double_SWIGUpcast(ArConfigArg_Double *jarg1) {
    return (ArConfigArg *)jarg1;
}

SWIGEXPORT ArConfigArg * SWIGSTDCALL CSharp_ArConfigArg_String_SWIGUpcast(ArConfigArg_String *jarg1) {
    return (ArConfigArg *)jarg1;
}

#ifdef __cplusplus
}
#endif

