//------------------------------------------------------------------------------
// <auto-generated />
//
// This file was automatically generated by SWIG (http://www.swig.org).
// Version 3.0.8
//
// Do not make changes to this file unless you know what you are doing--modify
// the SWIG interface file instead.
//------------------------------------------------------------------------------

namespace AriaCS {

public class ArAMPTU : ArPTZ {
  private global::System.Runtime.InteropServices.HandleRef swigCPtr;

  public ArAMPTU(global::System.IntPtr cPtr, bool cMemoryOwn) : base(AriaCSPINVOKE.ArAMPTU_SWIGUpcast(cPtr), cMemoryOwn) {
    swigCPtr = new global::System.Runtime.InteropServices.HandleRef(this, cPtr);
  }

  public static global::System.Runtime.InteropServices.HandleRef getCPtr(ArAMPTU obj) {
    return (obj == null) ? new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero) : obj.swigCPtr;
  }

  ~ArAMPTU() {
    Dispose();
  }

  public override void Dispose() {
    lock(this) {
      if (swigCPtr.Handle != global::System.IntPtr.Zero) {
        if (swigCMemOwn) {
          swigCMemOwn = false;
          AriaCSPINVOKE.delete_ArAMPTU(swigCPtr);
        }
        swigCPtr = new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero);
      }
      global::System.GC.SuppressFinalize(this);
      base.Dispose();
    }
  }

  public ArAMPTU(ArRobot robot, int unitNumber) : this(AriaCSPINVOKE.new_ArAMPTU__SWIG_0(ArRobot.getCPtr(robot), unitNumber), true) {
  }

  public ArAMPTU(ArRobot robot) : this(AriaCSPINVOKE.new_ArAMPTU__SWIG_1(ArRobot.getCPtr(robot)), true) {
  }

  public override bool init() {
    bool ret = AriaCSPINVOKE.ArAMPTU_init(swigCPtr);
    return ret;
  }

  public override string getTypeName() {
    string ret = AriaCSPINVOKE.ArAMPTU_getTypeName(swigCPtr);
    return ret;
  }

  public override bool panSlew(double deg) {
    bool ret = AriaCSPINVOKE.ArAMPTU_panSlew(swigCPtr, deg);
    return ret;
  }

  public override bool tiltSlew(double deg) {
    bool ret = AriaCSPINVOKE.ArAMPTU_tiltSlew(swigCPtr, deg);
    return ret;
  }

  public override bool canZoom() {
    bool ret = AriaCSPINVOKE.ArAMPTU_canZoom(swigCPtr);
    return ret;
  }

  public override bool canPanTiltSlew() {
    bool ret = AriaCSPINVOKE.ArAMPTU_canPanTiltSlew(swigCPtr);
    return ret;
  }

  public bool pause() {
    bool ret = AriaCSPINVOKE.ArAMPTU_pause(swigCPtr);
    return ret;
  }

  public bool resume() {
    bool ret = AriaCSPINVOKE.ArAMPTU_resume(swigCPtr);
    return ret;
  }

  public bool purge() {
    bool ret = AriaCSPINVOKE.ArAMPTU_purge(swigCPtr);
    return ret;
  }

  public bool requestStatus() {
    bool ret = AriaCSPINVOKE.ArAMPTU_requestStatus(swigCPtr);
    return ret;
  }

  public virtual double getPan_i() {
    double ret = AriaCSPINVOKE.ArAMPTU_getPan_i(swigCPtr);
    return ret;
  }

  public virtual double getTilt_i() {
    double ret = AriaCSPINVOKE.ArAMPTU_getTilt_i(swigCPtr);
    return ret;
  }

  public static readonly int MIN_SLEW = AriaCSPINVOKE.ArAMPTU_MIN_SLEW_get();
  public static readonly int MAX_TILT_SLEW = AriaCSPINVOKE.ArAMPTU_MAX_TILT_SLEW_get();
  public static readonly int MAX_PAN_SLEW = AriaCSPINVOKE.ArAMPTU_MAX_PAN_SLEW_get();

}

}
