//------------------------------------------------------------------------------
// <auto-generated />
//
// This file was automatically generated by SWIG (http://www.swig.org).
// Version 3.0.8
//
// Do not make changes to this file unless you know what you are doing--modify
// the SWIG interface file instead.
//------------------------------------------------------------------------------

namespace AriaCS {

public class ArMTXIO : global::System.IDisposable {
  private global::System.Runtime.InteropServices.HandleRef swigCPtr;
  protected bool swigCMemOwn;

  public ArMTXIO(global::System.IntPtr cPtr, bool cMemoryOwn) {
    swigCMemOwn = cMemoryOwn;
    swigCPtr = new global::System.Runtime.InteropServices.HandleRef(this, cPtr);
  }

  public static global::System.Runtime.InteropServices.HandleRef getCPtr(ArMTXIO obj) {
    return (obj == null) ? new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero) : obj.swigCPtr;
  }

  ~ArMTXIO() {
    Dispose();
  }

  public virtual void Dispose() {
    lock(this) {
      if (swigCPtr.Handle != global::System.IntPtr.Zero) {
        if (swigCMemOwn) {
          swigCMemOwn = false;
          AriaCSPINVOKE.delete_ArMTXIO(swigCPtr);
        }
        swigCPtr = new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero);
      }
      global::System.GC.SuppressFinalize(this);
    }
  }

  public ArMTXIO(string dev) : this(AriaCSPINVOKE.new_ArMTXIO__SWIG_0(dev), true) {
  }

  public ArMTXIO() : this(AriaCSPINVOKE.new_ArMTXIO__SWIG_1(), true) {
  }

  public bool closeIO() {
    bool ret = AriaCSPINVOKE.ArMTXIO_closeIO(swigCPtr);
    return ret;
  }

  public bool isEnabled() {
    bool ret = AriaCSPINVOKE.ArMTXIO_isEnabled(swigCPtr);
    return ret;
  }

  public bool isAnalogSupported() {
    bool ret = AriaCSPINVOKE.ArMTXIO_isAnalogSupported(swigCPtr);
    return ret;
  }

  public bool getRegValue(ushort reg, SWIGTYPE_p_unsigned_char val) {
    bool ret = AriaCSPINVOKE.ArMTXIO_getRegValue(swigCPtr, reg, SWIGTYPE_p_unsigned_char.getCPtr(val));
    return ret;
  }

  public ArMTXIO.Direction getDigitalBankDirection(int bank) {
    ArMTXIO.Direction ret = (ArMTXIO.Direction)AriaCSPINVOKE.ArMTXIO_getDigitalBankDirection(swigCPtr, bank);
    return ret;
  }

  public bool setDigitalBankOutputs(int bank, byte val) {
    bool ret = AriaCSPINVOKE.ArMTXIO_setDigitalBankOutputs(swigCPtr, bank, val);
    return ret;
  }

  public bool getDigitalBankInputs(int bank, SWIGTYPE_p_unsigned_char val) {
    bool ret = AriaCSPINVOKE.ArMTXIO_getDigitalBankInputs(swigCPtr, bank, SWIGTYPE_p_unsigned_char.getCPtr(val));
    return ret;
  }

  public bool getDigitalBankOutputs(int bank, SWIGTYPE_p_unsigned_char val) {
    bool ret = AriaCSPINVOKE.ArMTXIO_getDigitalBankOutputs(swigCPtr, bank, SWIGTYPE_p_unsigned_char.getCPtr(val));
    return ret;
  }

  public bool setDigitalOutputBit(int bank, int bit) {
    bool ret = AriaCSPINVOKE.ArMTXIO_setDigitalOutputBit(swigCPtr, bank, bit);
    return ret;
  }

  public bool getDigitalInputBit(int bank, int bit) {
    bool ret = AriaCSPINVOKE.ArMTXIO_getDigitalInputBit(swigCPtr, bank, bit);
    return ret;
  }

  public bool setPeripheralPowerBankOutputs(int bank, byte val) {
    bool ret = AriaCSPINVOKE.ArMTXIO_setPeripheralPowerBankOutputs(swigCPtr, bank, val);
    return ret;
  }

  public bool getPeripheralPowerBankOutputs(int bank, SWIGTYPE_p_unsigned_char val) {
    bool ret = AriaCSPINVOKE.ArMTXIO_getPeripheralPowerBankOutputs(swigCPtr, bank, SWIGTYPE_p_unsigned_char.getCPtr(val));
    return ret;
  }

  public bool setPowerOutput(int bank, int bit, bool on) {
    bool ret = AriaCSPINVOKE.ArMTXIO_setPowerOutput(swigCPtr, bank, bit, on);
    return ret;
  }

  public int lockObj() {
    int ret = AriaCSPINVOKE.ArMTXIO_lockObj(swigCPtr);
    return ret;
  }

  public int unlockObj() {
    int ret = AriaCSPINVOKE.ArMTXIO_unlockObj(swigCPtr);
    return ret;
  }

  public int tryLock() {
    int ret = AriaCSPINVOKE.ArMTXIO_tryLock(swigCPtr);
    return ret;
  }

  public byte getFirmwareRevision() {
    byte ret = AriaCSPINVOKE.ArMTXIO_getFirmwareRevision(swigCPtr);
    return ret;
  }

  public byte getFirmwareVersion() {
    byte ret = AriaCSPINVOKE.ArMTXIO_getFirmwareVersion(swigCPtr);
    return ret;
  }

  public byte getCompatibilityCode() {
    byte ret = AriaCSPINVOKE.ArMTXIO_getCompatibilityCode(swigCPtr);
    return ret;
  }

  public byte getFPGAType() {
    byte ret = AriaCSPINVOKE.ArMTXIO_getFPGAType(swigCPtr);
    return ret;
  }

  public bool getDigitalIOInputMon1(SWIGTYPE_p_unsigned_char val) {
    bool ret = AriaCSPINVOKE.ArMTXIO_getDigitalIOInputMon1(swigCPtr, SWIGTYPE_p_unsigned_char.getCPtr(val));
    return ret;
  }

  public bool getDigitalIOInputMon2(SWIGTYPE_p_unsigned_char val) {
    bool ret = AriaCSPINVOKE.ArMTXIO_getDigitalIOInputMon2(swigCPtr, SWIGTYPE_p_unsigned_char.getCPtr(val));
    return ret;
  }

  public bool getDigitalIOOutputMon1(SWIGTYPE_p_unsigned_char val) {
    bool ret = AriaCSPINVOKE.ArMTXIO_getDigitalIOOutputMon1(swigCPtr, SWIGTYPE_p_unsigned_char.getCPtr(val));
    return ret;
  }

  public bool getDigitalIOOutputMon2(SWIGTYPE_p_unsigned_char val) {
    bool ret = AriaCSPINVOKE.ArMTXIO_getDigitalIOOutputMon2(swigCPtr, SWIGTYPE_p_unsigned_char.getCPtr(val));
    return ret;
  }

  public bool getLightPole(SWIGTYPE_p_unsigned_char val) {
    bool ret = AriaCSPINVOKE.ArMTXIO_getLightPole(swigCPtr, SWIGTYPE_p_unsigned_char.getCPtr(val));
    return ret;
  }

  public bool setLightPole(SWIGTYPE_p_unsigned_char val) {
    bool ret = AriaCSPINVOKE.ArMTXIO_setLightPole(swigCPtr, SWIGTYPE_p_unsigned_char.getCPtr(val));
    return ret;
  }

  public bool getLPCTimeUSec(SWIGTYPE_p_unsigned_int timeUSec) {
    bool ret = AriaCSPINVOKE.ArMTXIO_getLPCTimeUSec(swigCPtr, SWIGTYPE_p_unsigned_int.getCPtr(timeUSec));
    return ret;
  }

  public SWIGTYPE_p_ArRetFunctor1T_bool_unsigned_int_p_t getLPCTimeUSecCB() {
    global::System.IntPtr cPtr = AriaCSPINVOKE.ArMTXIO_getLPCTimeUSecCB(swigCPtr);
    SWIGTYPE_p_ArRetFunctor1T_bool_unsigned_int_p_t ret = (cPtr == global::System.IntPtr.Zero) ? null : new SWIGTYPE_p_ArRetFunctor1T_bool_unsigned_int_p_t(cPtr, false);
    return ret;
  }

  public bool setSemaphore1(SWIGTYPE_p_unsigned_char val) {
    bool ret = AriaCSPINVOKE.ArMTXIO_setSemaphore1(swigCPtr, SWIGTYPE_p_unsigned_char.getCPtr(val));
    return ret;
  }

  public bool getSemaphore1(SWIGTYPE_p_unsigned_char val) {
    bool ret = AriaCSPINVOKE.ArMTXIO_getSemaphore1(swigCPtr, SWIGTYPE_p_unsigned_char.getCPtr(val));
    return ret;
  }

  public bool setSemaphore2(SWIGTYPE_p_unsigned_char val) {
    bool ret = AriaCSPINVOKE.ArMTXIO_setSemaphore2(swigCPtr, SWIGTYPE_p_unsigned_char.getCPtr(val));
    return ret;
  }

  public bool getSemaphore2(SWIGTYPE_p_unsigned_char val) {
    bool ret = AriaCSPINVOKE.ArMTXIO_getSemaphore2(swigCPtr, SWIGTYPE_p_unsigned_char.getCPtr(val));
    return ret;
  }

  public bool setSemaphore3(SWIGTYPE_p_unsigned_char val) {
    bool ret = AriaCSPINVOKE.ArMTXIO_setSemaphore3(swigCPtr, SWIGTYPE_p_unsigned_char.getCPtr(val));
    return ret;
  }

  public bool getSemaphore3(SWIGTYPE_p_unsigned_char val) {
    bool ret = AriaCSPINVOKE.ArMTXIO_getSemaphore3(swigCPtr, SWIGTYPE_p_unsigned_char.getCPtr(val));
    return ret;
  }

  public bool setSemaphore4(SWIGTYPE_p_unsigned_char val) {
    bool ret = AriaCSPINVOKE.ArMTXIO_setSemaphore4(swigCPtr, SWIGTYPE_p_unsigned_char.getCPtr(val));
    return ret;
  }

  public bool getSemaphore4(SWIGTYPE_p_unsigned_char val) {
    bool ret = AriaCSPINVOKE.ArMTXIO_getSemaphore4(swigCPtr, SWIGTYPE_p_unsigned_char.getCPtr(val));
    return ret;
  }

  public bool acquireSemaphore(uint sem) {
    bool ret = AriaCSPINVOKE.ArMTXIO_acquireSemaphore(swigCPtr, sem);
    return ret;
  }

  public bool releaseSemaphore(uint sem) {
    bool ret = AriaCSPINVOKE.ArMTXIO_releaseSemaphore(swigCPtr, sem);
    return ret;
  }

  public bool getBumperInput(SWIGTYPE_p_unsigned_char val) {
    bool ret = AriaCSPINVOKE.ArMTXIO_getBumperInput(swigCPtr, SWIGTYPE_p_unsigned_char.getCPtr(val));
    return ret;
  }

  public bool getPowerStatus1(SWIGTYPE_p_unsigned_char val) {
    bool ret = AriaCSPINVOKE.ArMTXIO_getPowerStatus1(swigCPtr, SWIGTYPE_p_unsigned_char.getCPtr(val));
    return ret;
  }

  public bool getPowerStatus2(SWIGTYPE_p_unsigned_char val) {
    bool ret = AriaCSPINVOKE.ArMTXIO_getPowerStatus2(swigCPtr, SWIGTYPE_p_unsigned_char.getCPtr(val));
    return ret;
  }

  public bool getLIDARSafety(SWIGTYPE_p_unsigned_char val) {
    bool ret = AriaCSPINVOKE.ArMTXIO_getLIDARSafety(swigCPtr, SWIGTYPE_p_unsigned_char.getCPtr(val));
    return ret;
  }

  public bool getESTOPStatus1(SWIGTYPE_p_unsigned_char val) {
    bool ret = AriaCSPINVOKE.ArMTXIO_getESTOPStatus1(swigCPtr, SWIGTYPE_p_unsigned_char.getCPtr(val));
    return ret;
  }

  public bool getESTOPStatus2(SWIGTYPE_p_unsigned_char val) {
    bool ret = AriaCSPINVOKE.ArMTXIO_getESTOPStatus2(swigCPtr, SWIGTYPE_p_unsigned_char.getCPtr(val));
    return ret;
  }

  public bool getESTOPStatus3(SWIGTYPE_p_unsigned_char val) {
    bool ret = AriaCSPINVOKE.ArMTXIO_getESTOPStatus3(swigCPtr, SWIGTYPE_p_unsigned_char.getCPtr(val));
    return ret;
  }

  public bool getESTOPStatus4(SWIGTYPE_p_unsigned_char val) {
    bool ret = AriaCSPINVOKE.ArMTXIO_getESTOPStatus4(swigCPtr, SWIGTYPE_p_unsigned_char.getCPtr(val));
    return ret;
  }

  public bool compareESTOPStatus4HighNibbleAgainst(int val) {
    bool ret = AriaCSPINVOKE.ArMTXIO_compareESTOPStatus4HighNibbleAgainst(swigCPtr, val);
    return ret;
  }

  public bool getDigitalOutputControl1(SWIGTYPE_p_unsigned_char val) {
    bool ret = AriaCSPINVOKE.ArMTXIO_getDigitalOutputControl1(swigCPtr, SWIGTYPE_p_unsigned_char.getCPtr(val));
    return ret;
  }

  public bool setDigitalOutputControl1(SWIGTYPE_p_unsigned_char val) {
    bool ret = AriaCSPINVOKE.ArMTXIO_setDigitalOutputControl1(swigCPtr, SWIGTYPE_p_unsigned_char.getCPtr(val));
    return ret;
  }

  public bool getDigitalOutputControl2(SWIGTYPE_p_unsigned_char val) {
    bool ret = AriaCSPINVOKE.ArMTXIO_getDigitalOutputControl2(swigCPtr, SWIGTYPE_p_unsigned_char.getCPtr(val));
    return ret;
  }

  public bool setDigitalOutputControl2(SWIGTYPE_p_unsigned_char val) {
    bool ret = AriaCSPINVOKE.ArMTXIO_setDigitalOutputControl2(swigCPtr, SWIGTYPE_p_unsigned_char.getCPtr(val));
    return ret;
  }

  public bool getPeripheralPower1(SWIGTYPE_p_unsigned_char val) {
    bool ret = AriaCSPINVOKE.ArMTXIO_getPeripheralPower1(swigCPtr, SWIGTYPE_p_unsigned_char.getCPtr(val));
    return ret;
  }

  public bool setPeripheralPower1(SWIGTYPE_p_unsigned_char val) {
    bool ret = AriaCSPINVOKE.ArMTXIO_setPeripheralPower1(swigCPtr, SWIGTYPE_p_unsigned_char.getCPtr(val));
    return ret;
  }

  public bool getPeripheralPower2(SWIGTYPE_p_unsigned_char val) {
    bool ret = AriaCSPINVOKE.ArMTXIO_getPeripheralPower2(swigCPtr, SWIGTYPE_p_unsigned_char.getCPtr(val));
    return ret;
  }

  public bool setPeripheralPower2(SWIGTYPE_p_unsigned_char val) {
    bool ret = AriaCSPINVOKE.ArMTXIO_setPeripheralPower2(swigCPtr, SWIGTYPE_p_unsigned_char.getCPtr(val));
    return ret;
  }

  public bool getPeripheralPower3(SWIGTYPE_p_unsigned_char val) {
    bool ret = AriaCSPINVOKE.ArMTXIO_getPeripheralPower3(swigCPtr, SWIGTYPE_p_unsigned_char.getCPtr(val));
    return ret;
  }

  public bool setPeripheralPower3(SWIGTYPE_p_unsigned_char val) {
    bool ret = AriaCSPINVOKE.ArMTXIO_setPeripheralPower3(swigCPtr, SWIGTYPE_p_unsigned_char.getCPtr(val));
    return ret;
  }

  public bool getMotionPowerStatus(SWIGTYPE_p_unsigned_char val) {
    bool ret = AriaCSPINVOKE.ArMTXIO_getMotionPowerStatus(swigCPtr, SWIGTYPE_p_unsigned_char.getCPtr(val));
    return ret;
  }

  public bool getLIDARControl(SWIGTYPE_p_unsigned_char val) {
    bool ret = AriaCSPINVOKE.ArMTXIO_getLIDARControl(swigCPtr, SWIGTYPE_p_unsigned_char.getCPtr(val));
    return ret;
  }

  public bool setLIDARControl(SWIGTYPE_p_unsigned_char val) {
    bool ret = AriaCSPINVOKE.ArMTXIO_setLIDARControl(swigCPtr, SWIGTYPE_p_unsigned_char.getCPtr(val));
    return ret;
  }

  public bool getAnalogIOBlock1(uint analog, SWIGTYPE_p_unsigned_short val) {
    bool ret = AriaCSPINVOKE.ArMTXIO_getAnalogIOBlock1(swigCPtr, analog, SWIGTYPE_p_unsigned_short.getCPtr(val));
    return ret;
  }

  public bool getAnalogIOBlock2(uint analog, SWIGTYPE_p_unsigned_short val) {
    bool ret = AriaCSPINVOKE.ArMTXIO_getAnalogIOBlock2(swigCPtr, analog, SWIGTYPE_p_unsigned_short.getCPtr(val));
    return ret;
  }

  public bool setAnalogIOBlock2(uint analog, SWIGTYPE_p_unsigned_short val) {
    bool ret = AriaCSPINVOKE.ArMTXIO_setAnalogIOBlock2(swigCPtr, analog, SWIGTYPE_p_unsigned_short.getCPtr(val));
    return ret;
  }

  public enum Direction {
    DIGITAL_INPUT,
    DIGITAL_OUTPUT,
    INVALID
  }

}

}
