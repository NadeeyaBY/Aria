//------------------------------------------------------------------------------
// <auto-generated />
//
// This file was automatically generated by SWIG (http://www.swig.org).
// Version 3.0.8
//
// Do not make changes to this file unless you know what you are doing--modify
// the SWIG interface file instead.
//------------------------------------------------------------------------------

namespace AriaCS {

public class ArP2Arm : global::System.IDisposable {
  private global::System.Runtime.InteropServices.HandleRef swigCPtr;
  protected bool swigCMemOwn;

  public ArP2Arm(global::System.IntPtr cPtr, bool cMemoryOwn) {
    swigCMemOwn = cMemoryOwn;
    swigCPtr = new global::System.Runtime.InteropServices.HandleRef(this, cPtr);
  }

  public static global::System.Runtime.InteropServices.HandleRef getCPtr(ArP2Arm obj) {
    return (obj == null) ? new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero) : obj.swigCPtr;
  }

  ~ArP2Arm() {
    Dispose();
  }

  public virtual void Dispose() {
    lock(this) {
      if (swigCPtr.Handle != global::System.IntPtr.Zero) {
        if (swigCMemOwn) {
          swigCMemOwn = false;
          AriaCSPINVOKE.delete_ArP2Arm(swigCPtr);
        }
        swigCPtr = new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero);
      }
      global::System.GC.SuppressFinalize(this);
    }
  }

  public static int ArmJoint1 {
    get {
      int ret = AriaCSPINVOKE.ArP2Arm_ArmJoint1_get();
      return ret;
    } 
  }

  public static int ArmJoint2 {
    get {
      int ret = AriaCSPINVOKE.ArP2Arm_ArmJoint2_get();
      return ret;
    } 
  }

  public static int ArmJoint3 {
    get {
      int ret = AriaCSPINVOKE.ArP2Arm_ArmJoint3_get();
      return ret;
    } 
  }

  public static int ArmJoint4 {
    get {
      int ret = AriaCSPINVOKE.ArP2Arm_ArmJoint4_get();
      return ret;
    } 
  }

  public static int ArmJoint5 {
    get {
      int ret = AriaCSPINVOKE.ArP2Arm_ArmJoint5_get();
      return ret;
    } 
  }

  public static int ArmJoint6 {
    get {
      int ret = AriaCSPINVOKE.ArP2Arm_ArmJoint6_get();
      return ret;
    } 
  }

  public static int ArmGood {
    get {
      int ret = AriaCSPINVOKE.ArP2Arm_ArmGood_get();
      return ret;
    } 
  }

  public static int ArmInited {
    get {
      int ret = AriaCSPINVOKE.ArP2Arm_ArmInited_get();
      return ret;
    } 
  }

  public static int ArmPower {
    get {
      int ret = AriaCSPINVOKE.ArP2Arm_ArmPower_get();
      return ret;
    } 
  }

  public static int ArmHoming {
    get {
      int ret = AriaCSPINVOKE.ArP2Arm_ArmHoming_get();
      return ret;
    } 
  }

  public static int NumJoints {
    set {
      AriaCSPINVOKE.ArP2Arm_NumJoints_set(value);
    } 
    get {
      int ret = AriaCSPINVOKE.ArP2Arm_NumJoints_get();
      return ret;
    } 
  }

  public ArP2Arm() : this(AriaCSPINVOKE.new_ArP2Arm(), true) {
  }

  public void setRobot(ArRobot robot) {
    AriaCSPINVOKE.ArP2Arm_setRobot(swigCPtr, ArRobot.getCPtr(robot));
  }

  public virtual ArP2Arm.State init() {
    ArP2Arm.State ret = (ArP2Arm.State)AriaCSPINVOKE.ArP2Arm_init(swigCPtr);
    return ret;
  }

  public virtual ArP2Arm.State uninit() {
    ArP2Arm.State ret = (ArP2Arm.State)AriaCSPINVOKE.ArP2Arm_uninit(swigCPtr);
    return ret;
  }

  public virtual ArP2Arm.State powerOn(bool doWait) {
    ArP2Arm.State ret = (ArP2Arm.State)AriaCSPINVOKE.ArP2Arm_powerOn__SWIG_0(swigCPtr, doWait);
    return ret;
  }

  public virtual ArP2Arm.State powerOn() {
    ArP2Arm.State ret = (ArP2Arm.State)AriaCSPINVOKE.ArP2Arm_powerOn__SWIG_1(swigCPtr);
    return ret;
  }

  public virtual ArP2Arm.State powerOff() {
    ArP2Arm.State ret = (ArP2Arm.State)AriaCSPINVOKE.ArP2Arm_powerOff(swigCPtr);
    return ret;
  }

  public virtual ArP2Arm.State requestInfo() {
    ArP2Arm.State ret = (ArP2Arm.State)AriaCSPINVOKE.ArP2Arm_requestInfo(swigCPtr);
    return ret;
  }

  public virtual ArP2Arm.State requestStatus(ArP2Arm.StatusType status) {
    ArP2Arm.State ret = (ArP2Arm.State)AriaCSPINVOKE.ArP2Arm_requestStatus(swigCPtr, (int)status);
    return ret;
  }

  public virtual ArP2Arm.State requestInit() {
    ArP2Arm.State ret = (ArP2Arm.State)AriaCSPINVOKE.ArP2Arm_requestInit(swigCPtr);
    return ret;
  }

  public virtual ArP2Arm.State checkArm(bool waitForResponse) {
    ArP2Arm.State ret = (ArP2Arm.State)AriaCSPINVOKE.ArP2Arm_checkArm__SWIG_0(swigCPtr, waitForResponse);
    return ret;
  }

  public virtual ArP2Arm.State checkArm() {
    ArP2Arm.State ret = (ArP2Arm.State)AriaCSPINVOKE.ArP2Arm_checkArm__SWIG_1(swigCPtr);
    return ret;
  }

  public virtual ArP2Arm.State home(int joint) {
    ArP2Arm.State ret = (ArP2Arm.State)AriaCSPINVOKE.ArP2Arm_home__SWIG_0(swigCPtr, joint);
    return ret;
  }

  public virtual ArP2Arm.State home() {
    ArP2Arm.State ret = (ArP2Arm.State)AriaCSPINVOKE.ArP2Arm_home__SWIG_1(swigCPtr);
    return ret;
  }

  public virtual ArP2Arm.State park() {
    ArP2Arm.State ret = (ArP2Arm.State)AriaCSPINVOKE.ArP2Arm_park(swigCPtr);
    return ret;
  }

  public virtual ArP2Arm.State moveTo(int joint, float pos, byte vel) {
    ArP2Arm.State ret = (ArP2Arm.State)AriaCSPINVOKE.ArP2Arm_moveTo__SWIG_0(swigCPtr, joint, pos, vel);
    return ret;
  }

  public virtual ArP2Arm.State moveTo(int joint, float pos) {
    ArP2Arm.State ret = (ArP2Arm.State)AriaCSPINVOKE.ArP2Arm_moveTo__SWIG_1(swigCPtr, joint, pos);
    return ret;
  }

  public virtual ArP2Arm.State moveToTicks(int joint, byte pos) {
    ArP2Arm.State ret = (ArP2Arm.State)AriaCSPINVOKE.ArP2Arm_moveToTicks(swigCPtr, joint, pos);
    return ret;
  }

  public virtual ArP2Arm.State moveStep(int joint, float pos, byte vel) {
    ArP2Arm.State ret = (ArP2Arm.State)AriaCSPINVOKE.ArP2Arm_moveStep__SWIG_0(swigCPtr, joint, pos, vel);
    return ret;
  }

  public virtual ArP2Arm.State moveStep(int joint, float pos) {
    ArP2Arm.State ret = (ArP2Arm.State)AriaCSPINVOKE.ArP2Arm_moveStep__SWIG_1(swigCPtr, joint, pos);
    return ret;
  }

  public virtual ArP2Arm.State moveStepTicks(int joint, sbyte pos) {
    ArP2Arm.State ret = (ArP2Arm.State)AriaCSPINVOKE.ArP2Arm_moveStepTicks(swigCPtr, joint, pos);
    return ret;
  }

  public virtual ArP2Arm.State moveVel(int joint, int vel) {
    ArP2Arm.State ret = (ArP2Arm.State)AriaCSPINVOKE.ArP2Arm_moveVel(swigCPtr, joint, vel);
    return ret;
  }

  public virtual ArP2Arm.State stop() {
    ArP2Arm.State ret = (ArP2Arm.State)AriaCSPINVOKE.ArP2Arm_stop(swigCPtr);
    return ret;
  }

  public virtual ArP2Arm.State setAutoParkTimer(int waitSecs) {
    ArP2Arm.State ret = (ArP2Arm.State)AriaCSPINVOKE.ArP2Arm_setAutoParkTimer(swigCPtr, waitSecs);
    return ret;
  }

  public virtual ArP2Arm.State setGripperParkTimer(int waitSecs) {
    ArP2Arm.State ret = (ArP2Arm.State)AriaCSPINVOKE.ArP2Arm_setGripperParkTimer(swigCPtr, waitSecs);
    return ret;
  }

  public virtual void setStoppedCB(ArFunctor func) {
    AriaCSPINVOKE.ArP2Arm_setStoppedCB(swigCPtr, ArFunctor.getCPtr(func));
  }

  public virtual void setPacketCB(SWIGTYPE_p_ArFunctor1T_ArP2Arm__PacketType_t func) {
    AriaCSPINVOKE.ArP2Arm_setPacketCB(swigCPtr, SWIGTYPE_p_ArFunctor1T_ArP2Arm__PacketType_t.getCPtr(func));
  }

  public virtual string getArmVersion() {
    string ret = AriaCSPINVOKE.ArP2Arm_getArmVersion(swigCPtr);
    return ret;
  }

  public virtual float getJointPos(int joint) {
    float ret = AriaCSPINVOKE.ArP2Arm_getJointPos(swigCPtr, joint);
    return ret;
  }

  public virtual byte getJointPosTicks(int joint) {
    byte ret = AriaCSPINVOKE.ArP2Arm_getJointPosTicks(swigCPtr, joint);
    return ret;
  }

  public virtual bool getMoving(int joint) {
    bool ret = AriaCSPINVOKE.ArP2Arm_getMoving__SWIG_0(swigCPtr, joint);
    return ret;
  }

  public virtual bool getMoving() {
    bool ret = AriaCSPINVOKE.ArP2Arm_getMoving__SWIG_1(swigCPtr);
    return ret;
  }

  public virtual bool isPowered() {
    bool ret = AriaCSPINVOKE.ArP2Arm_isPowered(swigCPtr);
    return ret;
  }

  public virtual bool isGood() {
    bool ret = AriaCSPINVOKE.ArP2Arm_isGood(swigCPtr);
    return ret;
  }

  public virtual int getStatus() {
    int ret = AriaCSPINVOKE.ArP2Arm_getStatus(swigCPtr);
    return ret;
  }

  public virtual ArTime getLastStatusTime() {
    ArTime ret = new ArTime(AriaCSPINVOKE.ArP2Arm_getLastStatusTime(swigCPtr), true);
    return ret;
  }

  public virtual ArRobot getRobot() {
    global::System.IntPtr cPtr = AriaCSPINVOKE.ArP2Arm_getRobot(swigCPtr);
    ArRobot ret = (cPtr == global::System.IntPtr.Zero) ? null : new ArRobot(cPtr, false);
    return ret;
  }

  public virtual P2ArmJoint getJoint(int joint) {
    global::System.IntPtr cPtr = AriaCSPINVOKE.ArP2Arm_getJoint(swigCPtr, joint);
    P2ArmJoint ret = (cPtr == global::System.IntPtr.Zero) ? null : new P2ArmJoint(cPtr, false);
    return ret;
  }

  public virtual bool convertDegToTicks(int joint, float pos, SWIGTYPE_p_unsigned_char ticks) {
    bool ret = AriaCSPINVOKE.ArP2Arm_convertDegToTicks(swigCPtr, joint, pos, SWIGTYPE_p_unsigned_char.getCPtr(ticks));
    return ret;
  }

  public virtual bool convertTicksToDeg(int joint, byte pos, SWIGTYPE_p_float degrees) {
    bool ret = AriaCSPINVOKE.ArP2Arm_convertTicksToDeg(swigCPtr, joint, pos, SWIGTYPE_p_float.getCPtr(degrees));
    return ret;
  }

  public enum State {
    SUCCESS,
    ALREADY_INITED,
    NOT_INITED,
    ROBOT_NOT_SETUP,
    NO_ARM_FOUND,
    COMM_FAILED,
    COULD_NOT_OPEN_PORT,
    COULD_NOT_SET_UP_PORT,
    ALREADY_CONNECTED,
    NOT_CONNECTED,
    INVALID_JOINT,
    INVALID_POSITION
  }

  public enum PacketType {
    StatusPacket,
    InfoPacket
  }

  public enum StatusType {
    StatusOff = 0,
    StatusSingle = 1,
    StatusContinuous = 2
  }

}

}
