//------------------------------------------------------------------------------
// <auto-generated />
//
// This file was automatically generated by SWIG (http://www.swig.org).
// Version 3.0.8
//
// Do not make changes to this file unless you know what you are doing--modify
// the SWIG interface file instead.
//------------------------------------------------------------------------------

namespace AriaCS {

public class ArTimeChecker : global::System.IDisposable {
  private global::System.Runtime.InteropServices.HandleRef swigCPtr;
  protected bool swigCMemOwn;

  public ArTimeChecker(global::System.IntPtr cPtr, bool cMemoryOwn) {
    swigCMemOwn = cMemoryOwn;
    swigCPtr = new global::System.Runtime.InteropServices.HandleRef(this, cPtr);
  }

  public static global::System.Runtime.InteropServices.HandleRef getCPtr(ArTimeChecker obj) {
    return (obj == null) ? new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero) : obj.swigCPtr;
  }

  ~ArTimeChecker() {
    Dispose();
  }

  public virtual void Dispose() {
    lock(this) {
      if (swigCPtr.Handle != global::System.IntPtr.Zero) {
        if (swigCMemOwn) {
          swigCMemOwn = false;
          AriaCSPINVOKE.delete_ArTimeChecker(swigCPtr);
        }
        swigCPtr = new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero);
      }
      global::System.GC.SuppressFinalize(this);
    }
  }

  public ArTimeChecker(string name, int defaultMSecs) : this(AriaCSPINVOKE.new_ArTimeChecker__SWIG_0(name, defaultMSecs), true) {
  }

  public ArTimeChecker(string name) : this(AriaCSPINVOKE.new_ArTimeChecker__SWIG_1(name), true) {
  }

  public ArTimeChecker() : this(AriaCSPINVOKE.new_ArTimeChecker__SWIG_2(), true) {
  }

  public void setName(string name) {
    AriaCSPINVOKE.ArTimeChecker_setName(swigCPtr, name);
  }

  public void setDefaultMSecs(int defaultMSecs) {
    AriaCSPINVOKE.ArTimeChecker_setDefaultMSecs(swigCPtr, defaultMSecs);
  }

  public void start() {
    AriaCSPINVOKE.ArTimeChecker_start(swigCPtr);
  }

  public void check(string subName) {
    AriaCSPINVOKE.ArTimeChecker_check(swigCPtr, subName);
  }

  public void finish() {
    AriaCSPINVOKE.ArTimeChecker_finish(swigCPtr);
  }

  public ArTime getLastCheckTime() {
    ArTime ret = new ArTime(AriaCSPINVOKE.ArTimeChecker_getLastCheckTime(swigCPtr), true);
    return ret;
  }

}

}
