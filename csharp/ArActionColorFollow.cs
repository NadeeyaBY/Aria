//------------------------------------------------------------------------------
// <auto-generated />
//
// This file was automatically generated by SWIG (http://www.swig.org).
// Version 3.0.8
//
// Do not make changes to this file unless you know what you are doing--modify
// the SWIG interface file instead.
//------------------------------------------------------------------------------

namespace AriaCS {

public class ArActionColorFollow : ArAction {
  private global::System.Runtime.InteropServices.HandleRef swigCPtr;

  public ArActionColorFollow(global::System.IntPtr cPtr, bool cMemoryOwn) : base(AriaCSPINVOKE.ArActionColorFollow_SWIGUpcast(cPtr), cMemoryOwn) {
    swigCPtr = new global::System.Runtime.InteropServices.HandleRef(this, cPtr);
  }

  public static global::System.Runtime.InteropServices.HandleRef getCPtr(ArActionColorFollow obj) {
    return (obj == null) ? new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero) : obj.swigCPtr;
  }

  ~ArActionColorFollow() {
    Dispose();
  }

  public override void Dispose() {
    lock(this) {
      if (swigCPtr.Handle != global::System.IntPtr.Zero) {
        if (swigCMemOwn) {
          swigCMemOwn = false;
          AriaCSPINVOKE.delete_ArActionColorFollow(swigCPtr);
        }
        swigCPtr = new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero);
      }
      global::System.GC.SuppressFinalize(this);
      base.Dispose();
    }
  }

  public ArActionColorFollow(string name, ArACTS_1_2 acts, ArPTZ camera, double speed, int width, int height) : this(AriaCSPINVOKE.new_ArActionColorFollow__SWIG_0(name, ArACTS_1_2.getCPtr(acts), ArPTZ.getCPtr(camera), speed, width, height), true) {
  }

  public ArActionColorFollow(string name, ArACTS_1_2 acts, ArPTZ camera, double speed, int width) : this(AriaCSPINVOKE.new_ArActionColorFollow__SWIG_1(name, ArACTS_1_2.getCPtr(acts), ArPTZ.getCPtr(camera), speed, width), true) {
  }

  public ArActionColorFollow(string name, ArACTS_1_2 acts, ArPTZ camera, double speed) : this(AriaCSPINVOKE.new_ArActionColorFollow__SWIG_2(name, ArACTS_1_2.getCPtr(acts), ArPTZ.getCPtr(camera), speed), true) {
  }

  public ArActionColorFollow(string name, ArACTS_1_2 acts, ArPTZ camera) : this(AriaCSPINVOKE.new_ArActionColorFollow__SWIG_3(name, ArACTS_1_2.getCPtr(acts), ArPTZ.getCPtr(camera)), true) {
  }

  public override ArActionDesired fire(ArActionDesired currentDesired) {
    global::System.IntPtr cPtr = AriaCSPINVOKE.ArActionColorFollow_fire(swigCPtr, ArActionDesired.getCPtr(currentDesired));
    ArActionDesired ret = (cPtr == global::System.IntPtr.Zero) ? null : new ArActionDesired(cPtr, false);
    if (AriaCSPINVOKE.SWIGPendingException.Pending) throw AriaCSPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public bool setChannel(int channel) {
    bool ret = AriaCSPINVOKE.ArActionColorFollow_setChannel(swigCPtr, channel);
    return ret;
  }

  public void setCamera(ArPTZ camera) {
    AriaCSPINVOKE.ArActionColorFollow_setCamera(swigCPtr, ArPTZ.getCPtr(camera));
  }

  public void setAcquire(bool acquire) {
    AriaCSPINVOKE.ArActionColorFollow_setAcquire(swigCPtr, acquire);
  }

  public void stopMovement() {
    AriaCSPINVOKE.ArActionColorFollow_stopMovement(swigCPtr);
  }

  public void startMovement() {
    AriaCSPINVOKE.ArActionColorFollow_startMovement(swigCPtr);
  }

  public int getChannel() {
    int ret = AriaCSPINVOKE.ArActionColorFollow_getChannel(swigCPtr);
    return ret;
  }

  public bool getAcquire() {
    bool ret = AriaCSPINVOKE.ArActionColorFollow_getAcquire(swigCPtr);
    return ret;
  }

  public bool getMovement() {
    bool ret = AriaCSPINVOKE.ArActionColorFollow_getMovement(swigCPtr);
    return ret;
  }

  public bool getBlob() {
    bool ret = AriaCSPINVOKE.ArActionColorFollow_getBlob(swigCPtr);
    return ret;
  }

  public override ArActionDesired getDesired() {
    global::System.IntPtr cPtr = AriaCSPINVOKE.ArActionColorFollow_getDesired(swigCPtr);
    ArActionDesired ret = (cPtr == global::System.IntPtr.Zero) ? null : new ArActionDesired(cPtr, false);
    return ret;
  }

  public enum TargetState {
    NO_TARGET,
    TARGET
  }

  public enum MoveState {
    FOLLOWING,
    ACQUIRING,
    STOPPED
  }

  public enum LocationState {
    LEFT,
    RIGHT,
    CENTER
  }

}

}
