//------------------------------------------------------------------------------
// <auto-generated />
//
// This file was automatically generated by SWIG (http://www.swig.org).
// Version 3.0.8
//
// Do not make changes to this file unless you know what you are doing--modify
// the SWIG interface file instead.
//------------------------------------------------------------------------------

namespace AriaCS {

public class ArMutex : global::System.IDisposable {
  private global::System.Runtime.InteropServices.HandleRef swigCPtr;
  protected bool swigCMemOwn;

  public ArMutex(global::System.IntPtr cPtr, bool cMemoryOwn) {
    swigCMemOwn = cMemoryOwn;
    swigCPtr = new global::System.Runtime.InteropServices.HandleRef(this, cPtr);
  }

  public static global::System.Runtime.InteropServices.HandleRef getCPtr(ArMutex obj) {
    return (obj == null) ? new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero) : obj.swigCPtr;
  }

  ~ArMutex() {
    Dispose();
  }

  public virtual void Dispose() {
    lock(this) {
      if (swigCPtr.Handle != global::System.IntPtr.Zero) {
        if (swigCMemOwn) {
          swigCMemOwn = false;
          AriaCSPINVOKE.delete_ArMutex(swigCPtr);
        }
        swigCPtr = new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero);
      }
      global::System.GC.SuppressFinalize(this);
    }
  }

  public ArMutex(bool recursive) : this(AriaCSPINVOKE.new_ArMutex__SWIG_0(recursive), true) {
  }

  public ArMutex() : this(AriaCSPINVOKE.new_ArMutex__SWIG_1(), true) {
  }

  public ArMutex(ArMutex mutex) : this(AriaCSPINVOKE.new_ArMutex__SWIG_2(ArMutex.getCPtr(mutex)), true) {
    if (AriaCSPINVOKE.SWIGPendingException.Pending) throw AriaCSPINVOKE.SWIGPendingException.Retrieve();
  }

  public virtual int lockObj() {
    int ret = AriaCSPINVOKE.ArMutex_lockObj(swigCPtr);
    return ret;
  }

  public virtual int tryLock() {
    int ret = AriaCSPINVOKE.ArMutex_tryLock(swigCPtr);
    return ret;
  }

  public virtual int unlockObj() {
    int ret = AriaCSPINVOKE.ArMutex_unlockObj(swigCPtr);
    return ret;
  }

  public virtual string getError(int messageNumber) {
    string ret = AriaCSPINVOKE.ArMutex_getError(swigCPtr, messageNumber);
    return ret;
  }

  public void setLog(bool log) {
    AriaCSPINVOKE.ArMutex_setLog(swigCPtr, log);
  }

  public void setLogName(string logName) {
    AriaCSPINVOKE.ArMutex_setLogName(swigCPtr, logName);
  }

  public virtual SWIGTYPE_p_pthread_mutex_t getMutex() {
    SWIGTYPE_p_pthread_mutex_t ret = new SWIGTYPE_p_pthread_mutex_t(AriaCSPINVOKE.ArMutex_getMutex(swigCPtr), false);
    return ret;
  }

  public static void setLockWarningTime(double lockWarningSeconds) {
    AriaCSPINVOKE.ArMutex_setLockWarningTime(lockWarningSeconds);
  }

  public static double getLockWarningTime() {
    double ret = AriaCSPINVOKE.ArMutex_getLockWarningTime();
    return ret;
  }

  public static void setUnlockWarningTime(double unlockWarningSeconds) {
    AriaCSPINVOKE.ArMutex_setUnlockWarningTime(unlockWarningSeconds);
  }

  public static double getUnlockWarningTime() {
    double ret = AriaCSPINVOKE.ArMutex_getUnlockWarningTime();
    return ret;
  }

  public enum Status {
    STATUS_FAILED_INIT = 1,
    STATUS_FAILED,
    STATUS_ALREADY_LOCKED
  }

}

}
