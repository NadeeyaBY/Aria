//------------------------------------------------------------------------------
// <auto-generated />
//
// This file was automatically generated by SWIG (http://www.swig.org).
// Version 3.0.8
//
// Do not make changes to this file unless you know what you are doing--modify
// the SWIG interface file instead.
//------------------------------------------------------------------------------

namespace AriaCS {

public class ArLogFileConnection : ArDeviceConnection {
  private global::System.Runtime.InteropServices.HandleRef swigCPtr;

  public ArLogFileConnection(global::System.IntPtr cPtr, bool cMemoryOwn) : base(AriaCSPINVOKE.ArLogFileConnection_SWIGUpcast(cPtr), cMemoryOwn) {
    swigCPtr = new global::System.Runtime.InteropServices.HandleRef(this, cPtr);
  }

  public static global::System.Runtime.InteropServices.HandleRef getCPtr(ArLogFileConnection obj) {
    return (obj == null) ? new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero) : obj.swigCPtr;
  }

  ~ArLogFileConnection() {
    Dispose();
  }

  public override void Dispose() {
    lock(this) {
      if (swigCPtr.Handle != global::System.IntPtr.Zero) {
        if (swigCMemOwn) {
          swigCMemOwn = false;
          AriaCSPINVOKE.delete_ArLogFileConnection(swigCPtr);
        }
        swigCPtr = new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero);
      }
      global::System.GC.SuppressFinalize(this);
      base.Dispose();
    }
  }

  public ArLogFileConnection() : this(AriaCSPINVOKE.new_ArLogFileConnection(), true) {
  }

  public int open(string fname) {
    int ret = AriaCSPINVOKE.ArLogFileConnection_open__SWIG_0(swigCPtr, fname);
    return ret;
  }

  public int open() {
    int ret = AriaCSPINVOKE.ArLogFileConnection_open__SWIG_1(swigCPtr);
    return ret;
  }

  public void setLogFile(string fname) {
    AriaCSPINVOKE.ArLogFileConnection_setLogFile__SWIG_0(swigCPtr, fname);
  }

  public void setLogFile() {
    AriaCSPINVOKE.ArLogFileConnection_setLogFile__SWIG_1(swigCPtr);
  }

  public override bool openSimple() {
    bool ret = AriaCSPINVOKE.ArLogFileConnection_openSimple(swigCPtr);
    return ret;
  }

  public override int getStatus() {
    int ret = AriaCSPINVOKE.ArLogFileConnection_getStatus(swigCPtr);
    return ret;
  }

  public override bool close() {
    bool ret = AriaCSPINVOKE.ArLogFileConnection_close(swigCPtr);
    return ret;
  }

  public override int read(string data, uint size, uint msWait) {
    int ret = AriaCSPINVOKE.ArLogFileConnection_read__SWIG_0(swigCPtr, data, size, msWait);
    return ret;
  }

  public override int read(string data, uint size) {
    int ret = AriaCSPINVOKE.ArLogFileConnection_read__SWIG_1(swigCPtr, data, size);
    return ret;
  }

  public override int write(string data, uint size) {
    int ret = AriaCSPINVOKE.ArLogFileConnection_write(swigCPtr, data, size);
    return ret;
  }

  public override string getOpenMessage(int messageNumber) {
    string ret = AriaCSPINVOKE.ArLogFileConnection_getOpenMessage(swigCPtr, messageNumber);
    return ret;
  }

  public override ArTime getTimeRead(int index) {
    ArTime ret = new ArTime(AriaCSPINVOKE.ArLogFileConnection_getTimeRead(swigCPtr, index), true);
    return ret;
  }

  public override bool isTimeStamping() {
    bool ret = AriaCSPINVOKE.ArLogFileConnection_isTimeStamping(swigCPtr);
    return ret;
  }

  public string getLogFile() {
    string ret = AriaCSPINVOKE.ArLogFileConnection_getLogFile(swigCPtr);
    return ret;
  }

  public int internalOpen() {
    int ret = AriaCSPINVOKE.ArLogFileConnection_internalOpen(swigCPtr);
    return ret;
  }

  public ArPose myPose {
    set {
      AriaCSPINVOKE.ArLogFileConnection_myPose_set(swigCPtr, ArPose.getCPtr(value));
    } 
    get {
      global::System.IntPtr cPtr = AriaCSPINVOKE.ArLogFileConnection_myPose_get(swigCPtr);
      ArPose ret = (cPtr == global::System.IntPtr.Zero) ? null : new ArPose(cPtr, false);
      return ret;
    } 
  }

  public bool havePose {
    set {
      AriaCSPINVOKE.ArLogFileConnection_havePose_set(swigCPtr, value);
    } 
    get {
      bool ret = AriaCSPINVOKE.ArLogFileConnection_havePose_get(swigCPtr);
      return ret;
    } 
  }

  public string myName {
    set {
      AriaCSPINVOKE.ArLogFileConnection_myName_set(swigCPtr, value);
    } 
    get {
      string ret = AriaCSPINVOKE.ArLogFileConnection_myName_get(swigCPtr);
      return ret;
    } 
  }

  public string myType {
    set {
      AriaCSPINVOKE.ArLogFileConnection_myType_set(swigCPtr, value);
    } 
    get {
      string ret = AriaCSPINVOKE.ArLogFileConnection_myType_get(swigCPtr);
      return ret;
    } 
  }

  public string mySubtype {
    set {
      AriaCSPINVOKE.ArLogFileConnection_mySubtype_set(swigCPtr, value);
    } 
    get {
      string ret = AriaCSPINVOKE.ArLogFileConnection_mySubtype_get(swigCPtr);
      return ret;
    } 
  }

  public enum Open {
    OPEN_FILE_NOT_FOUND = 1,
    OPEN_NOT_A_LOG_FILE
  }

}

}
