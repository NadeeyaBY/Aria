//------------------------------------------------------------------------------
// <auto-generated />
//
// This file was automatically generated by SWIG (http://www.swig.org).
// Version 3.0.8
//
// Do not make changes to this file unless you know what you are doing--modify
// the SWIG interface file instead.
//------------------------------------------------------------------------------

namespace AriaCS {

public class ArTCM2 : global::System.IDisposable {
  private global::System.Runtime.InteropServices.HandleRef swigCPtr;
  protected bool swigCMemOwn;

  public ArTCM2(global::System.IntPtr cPtr, bool cMemoryOwn) {
    swigCMemOwn = cMemoryOwn;
    swigCPtr = new global::System.Runtime.InteropServices.HandleRef(this, cPtr);
  }

  public static global::System.Runtime.InteropServices.HandleRef getCPtr(ArTCM2 obj) {
    return (obj == null) ? new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero) : obj.swigCPtr;
  }

  ~ArTCM2() {
    Dispose();
  }

  public virtual void Dispose() {
    lock(this) {
      if (swigCPtr.Handle != global::System.IntPtr.Zero) {
        if (swigCMemOwn) {
          swigCMemOwn = false;
          AriaCSPINVOKE.delete_ArTCM2(swigCPtr);
        }
        swigCPtr = new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero);
      }
      global::System.GC.SuppressFinalize(this);
    }
  }

  public virtual bool connect() {
    bool ret = AriaCSPINVOKE.ArTCM2_connect(swigCPtr);
    return ret;
  }

  public virtual bool blockingConnect(uint connectTimeout) {
    bool ret = AriaCSPINVOKE.ArTCM2_blockingConnect__SWIG_0(swigCPtr, connectTimeout);
    return ret;
  }

  public virtual bool blockingConnect() {
    bool ret = AriaCSPINVOKE.ArTCM2_blockingConnect__SWIG_1(swigCPtr);
    return ret;
  }

  public double getHeading() {
    double ret = AriaCSPINVOKE.ArTCM2_getHeading(swigCPtr);
    return ret;
  }

  public bool haveHeading() {
    bool ret = AriaCSPINVOKE.ArTCM2_haveHeading(swigCPtr);
    return ret;
  }

  public double getCompass() {
    double ret = AriaCSPINVOKE.ArTCM2_getCompass(swigCPtr);
    return ret;
  }

  public double getPitch() {
    double ret = AriaCSPINVOKE.ArTCM2_getPitch(swigCPtr);
    return ret;
  }

  public bool havePitch() {
    bool ret = AriaCSPINVOKE.ArTCM2_havePitch(swigCPtr);
    return ret;
  }

  public double getRoll() {
    double ret = AriaCSPINVOKE.ArTCM2_getRoll(swigCPtr);
    return ret;
  }

  public bool haveRoll() {
    bool ret = AriaCSPINVOKE.ArTCM2_haveRoll(swigCPtr);
    return ret;
  }

  public double getXMagnetic() {
    double ret = AriaCSPINVOKE.ArTCM2_getXMagnetic(swigCPtr);
    return ret;
  }

  public bool haveXMagnetic() {
    bool ret = AriaCSPINVOKE.ArTCM2_haveXMagnetic(swigCPtr);
    return ret;
  }

  public double getYMagnetic() {
    double ret = AriaCSPINVOKE.ArTCM2_getYMagnetic(swigCPtr);
    return ret;
  }

  public bool haveYMagnetic() {
    bool ret = AriaCSPINVOKE.ArTCM2_haveYMagnetic(swigCPtr);
    return ret;
  }

  public double getZMagnetic() {
    double ret = AriaCSPINVOKE.ArTCM2_getZMagnetic(swigCPtr);
    return ret;
  }

  public bool haveZMagnetic() {
    bool ret = AriaCSPINVOKE.ArTCM2_haveZMagnetic(swigCPtr);
    return ret;
  }

  public double getTemperature() {
    double ret = AriaCSPINVOKE.ArTCM2_getTemperature(swigCPtr);
    return ret;
  }

  public bool haveTemperature() {
    bool ret = AriaCSPINVOKE.ArTCM2_haveTemperature(swigCPtr);
    return ret;
  }

  public int getError() {
    int ret = AriaCSPINVOKE.ArTCM2_getError(swigCPtr);
    return ret;
  }

  public double getCalibrationH() {
    double ret = AriaCSPINVOKE.ArTCM2_getCalibrationH(swigCPtr);
    return ret;
  }

  public bool haveCalibrationH() {
    bool ret = AriaCSPINVOKE.ArTCM2_haveCalibrationH(swigCPtr);
    return ret;
  }

  public double getCalibrationV() {
    double ret = AriaCSPINVOKE.ArTCM2_getCalibrationV(swigCPtr);
    return ret;
  }

  public bool haveCalibrationV() {
    bool ret = AriaCSPINVOKE.ArTCM2_haveCalibrationV(swigCPtr);
    return ret;
  }

  public double getCalibrationM() {
    double ret = AriaCSPINVOKE.ArTCM2_getCalibrationM(swigCPtr);
    return ret;
  }

  public bool haveCalibrationM() {
    bool ret = AriaCSPINVOKE.ArTCM2_haveCalibrationM(swigCPtr);
    return ret;
  }

  public virtual void commandOff() {
    AriaCSPINVOKE.ArTCM2_commandOff(swigCPtr);
  }

  public virtual void commandOnePacket() {
    AriaCSPINVOKE.ArTCM2_commandOnePacket(swigCPtr);
  }

  public virtual void commandContinuousPackets() {
    AriaCSPINVOKE.ArTCM2_commandContinuousPackets(swigCPtr);
  }

  public virtual void commandUserCalibration() {
    AriaCSPINVOKE.ArTCM2_commandUserCalibration(swigCPtr);
  }

  public virtual void commandAutoCalibration() {
    AriaCSPINVOKE.ArTCM2_commandAutoCalibration(swigCPtr);
  }

  public virtual void commandStopCalibration() {
    AriaCSPINVOKE.ArTCM2_commandStopCalibration(swigCPtr);
  }

  public virtual void commandSoftReset() {
    AriaCSPINVOKE.ArTCM2_commandSoftReset(swigCPtr);
  }

  public virtual void commandJustCompass() {
    AriaCSPINVOKE.ArTCM2_commandJustCompass(swigCPtr);
  }

  public int getPacCount() {
    int ret = AriaCSPINVOKE.ArTCM2_getPacCount(swigCPtr);
    return ret;
  }

  public void addHeadingDataCallback(SWIGTYPE_p_ArFunctor1T_double_t f) {
    AriaCSPINVOKE.ArTCM2_addHeadingDataCallback(swigCPtr, SWIGTYPE_p_ArFunctor1T_double_t.getCPtr(f));
  }

}

}
