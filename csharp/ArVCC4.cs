//------------------------------------------------------------------------------
// <auto-generated />
//
// This file was automatically generated by SWIG (http://www.swig.org).
// Version 3.0.8
//
// Do not make changes to this file unless you know what you are doing--modify
// the SWIG interface file instead.
//------------------------------------------------------------------------------

namespace AriaCS {

public class ArVCC4 : ArPTZ {
  private global::System.Runtime.InteropServices.HandleRef swigCPtr;

  public ArVCC4(global::System.IntPtr cPtr, bool cMemoryOwn) : base(AriaCSPINVOKE.ArVCC4_SWIGUpcast(cPtr), cMemoryOwn) {
    swigCPtr = new global::System.Runtime.InteropServices.HandleRef(this, cPtr);
  }

  public static global::System.Runtime.InteropServices.HandleRef getCPtr(ArVCC4 obj) {
    return (obj == null) ? new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero) : obj.swigCPtr;
  }

  ~ArVCC4() {
    Dispose();
  }

  public override void Dispose() {
    lock(this) {
      if (swigCPtr.Handle != global::System.IntPtr.Zero) {
        if (swigCMemOwn) {
          swigCMemOwn = false;
          AriaCSPINVOKE.delete_ArVCC4(swigCPtr);
        }
        swigCPtr = new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero);
      }
      global::System.GC.SuppressFinalize(this);
      base.Dispose();
    }
  }

  public ArVCC4(ArRobot robot, bool inverted, ArVCC4.CommState commDirection, bool autoUpdate, bool disableLED, ArVCC4.CameraType cameraType) : this(AriaCSPINVOKE.new_ArVCC4__SWIG_0(ArRobot.getCPtr(robot), inverted, (int)commDirection, autoUpdate, disableLED, (int)cameraType), true) {
  }

  public ArVCC4(ArRobot robot, bool inverted, ArVCC4.CommState commDirection, bool autoUpdate, bool disableLED) : this(AriaCSPINVOKE.new_ArVCC4__SWIG_1(ArRobot.getCPtr(robot), inverted, (int)commDirection, autoUpdate, disableLED), true) {
  }

  public ArVCC4(ArRobot robot, bool inverted, ArVCC4.CommState commDirection, bool autoUpdate) : this(AriaCSPINVOKE.new_ArVCC4__SWIG_2(ArRobot.getCPtr(robot), inverted, (int)commDirection, autoUpdate), true) {
  }

  public ArVCC4(ArRobot robot, bool inverted, ArVCC4.CommState commDirection) : this(AriaCSPINVOKE.new_ArVCC4__SWIG_3(ArRobot.getCPtr(robot), inverted, (int)commDirection), true) {
  }

  public ArVCC4(ArRobot robot, bool inverted) : this(AriaCSPINVOKE.new_ArVCC4__SWIG_4(ArRobot.getCPtr(robot), inverted), true) {
  }

  public ArVCC4(ArRobot robot) : this(AriaCSPINVOKE.new_ArVCC4__SWIG_5(ArRobot.getCPtr(robot)), true) {
  }

  public virtual bool power(bool state) {
    bool ret = AriaCSPINVOKE.ArVCC4_power(swigCPtr, state);
    return ret;
  }

  public bool getPower() {
    bool ret = AriaCSPINVOKE.ArVCC4_getPower(swigCPtr);
    return ret;
  }

  public override bool init() {
    bool ret = AriaCSPINVOKE.ArVCC4_init(swigCPtr);
    return ret;
  }

  public override void reset() {
    AriaCSPINVOKE.ArVCC4_reset(swigCPtr);
  }

  public override string getTypeName() {
    string ret = AriaCSPINVOKE.ArVCC4_getTypeName(swigCPtr);
    return ret;
  }

  public bool isInitted() {
    bool ret = AriaCSPINVOKE.ArVCC4_isInitted(swigCPtr);
    return ret;
  }

  public override void connectHandler() {
    AriaCSPINVOKE.ArVCC4_connectHandler(swigCPtr);
  }

  public override bool packetHandler(ArBasePacket packet) {
    bool ret = AriaCSPINVOKE.ArVCC4_packetHandler(swigCPtr, ArBasePacket.getCPtr(packet));
    return ret;
  }

  public void getRealPanTilt() {
    AriaCSPINVOKE.ArVCC4_getRealPanTilt(swigCPtr);
  }

  public void getRealZoomPos() {
    AriaCSPINVOKE.ArVCC4_getRealZoomPos(swigCPtr);
  }

  public override bool canZoom() {
    bool ret = AriaCSPINVOKE.ArVCC4_canZoom(swigCPtr);
    return ret;
  }

  public override bool zoom(int deg) {
    bool ret = AriaCSPINVOKE.ArVCC4_zoom(swigCPtr, deg);
    return ret;
  }

  public bool digitalZoom(int deg) {
    bool ret = AriaCSPINVOKE.ArVCC4_digitalZoom(swigCPtr, deg);
    return ret;
  }

  public void addErrorCB(ArFunctor functor, ArListPos.Pos position) {
    AriaCSPINVOKE.ArVCC4_addErrorCB(swigCPtr, ArFunctor.getCPtr(functor), (int)position);
  }

  public void remErrorCB(ArFunctor functor) {
    AriaCSPINVOKE.ArVCC4_remErrorCB(swigCPtr, ArFunctor.getCPtr(functor));
  }

  public override bool haltPanTilt() {
    bool ret = AriaCSPINVOKE.ArVCC4_haltPanTilt(swigCPtr);
    return ret;
  }

  public override bool haltZoom() {
    bool ret = AriaCSPINVOKE.ArVCC4_haltZoom(swigCPtr);
    return ret;
  }

  public override bool panSlew(double deg) {
    bool ret = AriaCSPINVOKE.ArVCC4_panSlew(swigCPtr, deg);
    return ret;
  }

  public override bool tiltSlew(double deg) {
    bool ret = AriaCSPINVOKE.ArVCC4_tiltSlew(swigCPtr, deg);
    return ret;
  }

  public bool canSetPanTiltSlew() {
    bool ret = AriaCSPINVOKE.ArVCC4_canSetPanTiltSlew(swigCPtr);
    return ret;
  }

  public void preparePacket(ArVCC4Packet packet) {
    AriaCSPINVOKE.ArVCC4_preparePacket(swigCPtr, ArVCC4Packet.getCPtr(packet));
  }

  public override int getZoom() {
    int ret = AriaCSPINVOKE.ArVCC4_getZoom(swigCPtr);
    return ret;
  }

  public double getDigitalZoom() {
    double ret = AriaCSPINVOKE.ArVCC4_getDigitalZoom(swigCPtr);
    return ret;
  }

  public override bool canGetRealPanTilt() {
    bool ret = AriaCSPINVOKE.ArVCC4_canGetRealPanTilt(swigCPtr);
    return ret;
  }

  public override bool canGetRealZoom() {
    bool ret = AriaCSPINVOKE.ArVCC4_canGetRealZoom(swigCPtr);
    return ret;
  }

  public override bool canSetFocus() {
    bool ret = AriaCSPINVOKE.ArVCC4_canSetFocus(swigCPtr);
    return ret;
  }

  public virtual bool autoFocus() {
    bool ret = AriaCSPINVOKE.ArVCC4_autoFocus(swigCPtr);
    return ret;
  }

  public virtual bool manualFocus() {
    bool ret = AriaCSPINVOKE.ArVCC4_manualFocus(swigCPtr);
    return ret;
  }

  public virtual bool focusNear() {
    bool ret = AriaCSPINVOKE.ArVCC4_focusNear(swigCPtr);
    return ret;
  }

  public virtual bool focusFar() {
    bool ret = AriaCSPINVOKE.ArVCC4_focusFar(swigCPtr);
    return ret;
  }

  public override bool setAutoFocus(bool af) {
    bool ret = AriaCSPINVOKE.ArVCC4_setAutoFocus__SWIG_0(swigCPtr, af);
    return ret;
  }

  public override bool setAutoFocus() {
    bool ret = AriaCSPINVOKE.ArVCC4_setAutoFocus__SWIG_1(swigCPtr);
    return ret;
  }

  public double getPanSlew() {
    double ret = AriaCSPINVOKE.ArVCC4_getPanSlew(swigCPtr);
    return ret;
  }

  public double getMaxPanSlew() {
    double ret = AriaCSPINVOKE.ArVCC4_getMaxPanSlew(swigCPtr);
    return ret;
  }

  public double getMinPanSlew() {
    double ret = AriaCSPINVOKE.ArVCC4_getMinPanSlew(swigCPtr);
    return ret;
  }

  public double getTiltSlew() {
    double ret = AriaCSPINVOKE.ArVCC4_getTiltSlew(swigCPtr);
    return ret;
  }

  public double getMaxTiltSlew() {
    double ret = AriaCSPINVOKE.ArVCC4_getMaxTiltSlew(swigCPtr);
    return ret;
  }

  public double getMinTiltSlew() {
    double ret = AriaCSPINVOKE.ArVCC4_getMinTiltSlew(swigCPtr);
    return ret;
  }

  public override int getMaxZoom() {
    int ret = AriaCSPINVOKE.ArVCC4_getMaxZoom(swigCPtr);
    return ret;
  }

  public override int getMinZoom() {
    int ret = AriaCSPINVOKE.ArVCC4_getMinZoom(swigCPtr);
    return ret;
  }

  public override bool canGetFOV() {
    bool ret = AriaCSPINVOKE.ArVCC4_canGetFOV(swigCPtr);
    return ret;
  }

  public override double getFOVAtMaxZoom() {
    double ret = AriaCSPINVOKE.ArVCC4_getFOVAtMaxZoom(swigCPtr);
    return ret;
  }

  public override double getFOVAtMinZoom() {
    double ret = AriaCSPINVOKE.ArVCC4_getFOVAtMinZoom(swigCPtr);
    return ret;
  }

  public bool wasError() {
    bool ret = AriaCSPINVOKE.ArVCC4_wasError(swigCPtr);
    return ret;
  }

  public void enableAutoUpdate() {
    AriaCSPINVOKE.ArVCC4_enableAutoUpdate(swigCPtr);
  }

  public void disableAutoUpdate() {
    AriaCSPINVOKE.ArVCC4_disableAutoUpdate(swigCPtr);
  }

  public bool getAutoUpdate() {
    bool ret = AriaCSPINVOKE.ArVCC4_getAutoUpdate(swigCPtr);
    return ret;
  }

  public void setLEDControlMode(int controlMode) {
    AriaCSPINVOKE.ArVCC4_setLEDControlMode(swigCPtr, controlMode);
  }

  public void enableIRLEDs() {
    AriaCSPINVOKE.ArVCC4_enableIRLEDs(swigCPtr);
  }

  public void disableIRLEDs() {
    AriaCSPINVOKE.ArVCC4_disableIRLEDs(swigCPtr);
  }

  public bool getIRLEDsEnabled() {
    bool ret = AriaCSPINVOKE.ArVCC4_getIRLEDsEnabled(swigCPtr);
    return ret;
  }

  public void enableIRFilterMode() {
    AriaCSPINVOKE.ArVCC4_enableIRFilterMode(swigCPtr);
  }

  public void disableIRFilterMode() {
    AriaCSPINVOKE.ArVCC4_disableIRFilterMode(swigCPtr);
  }

  public bool getIRFilterModeEnabled() {
    bool ret = AriaCSPINVOKE.ArVCC4_getIRFilterModeEnabled(swigCPtr);
    return ret;
  }

  public enum CommState {
    COMM_UNKNOWN,
    COMM_BIDIRECTIONAL,
    COMM_UNIDIRECTIONAL
  }

  public enum CameraType {
    CAMERA_VCC4,
    CAMERA_C50I
  }

}

}
