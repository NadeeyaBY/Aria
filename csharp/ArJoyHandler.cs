//------------------------------------------------------------------------------
// <auto-generated />
//
// This file was automatically generated by SWIG (http://www.swig.org).
// Version 3.0.8
//
// Do not make changes to this file unless you know what you are doing--modify
// the SWIG interface file instead.
//------------------------------------------------------------------------------

namespace AriaCS {

public class ArJoyHandler : global::System.IDisposable {
  private global::System.Runtime.InteropServices.HandleRef swigCPtr;
  protected bool swigCMemOwn;

  public ArJoyHandler(global::System.IntPtr cPtr, bool cMemoryOwn) {
    swigCMemOwn = cMemoryOwn;
    swigCPtr = new global::System.Runtime.InteropServices.HandleRef(this, cPtr);
  }

  public static global::System.Runtime.InteropServices.HandleRef getCPtr(ArJoyHandler obj) {
    return (obj == null) ? new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero) : obj.swigCPtr;
  }

  ~ArJoyHandler() {
    Dispose();
  }

  public virtual void Dispose() {
    lock(this) {
      if (swigCPtr.Handle != global::System.IntPtr.Zero) {
        if (swigCMemOwn) {
          swigCMemOwn = false;
          AriaCSPINVOKE.delete_ArJoyHandler(swigCPtr);
        }
        swigCPtr = new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero);
      }
      global::System.GC.SuppressFinalize(this);
    }
  }

  public ArJoyHandler(bool useOSCal, bool useOldJoystick) : this(AriaCSPINVOKE.new_ArJoyHandler__SWIG_0(useOSCal, useOldJoystick), true) {
  }

  public ArJoyHandler(bool useOSCal) : this(AriaCSPINVOKE.new_ArJoyHandler__SWIG_1(useOSCal), true) {
  }

  public ArJoyHandler() : this(AriaCSPINVOKE.new_ArJoyHandler__SWIG_2(), true) {
  }

  public bool init() {
    bool ret = AriaCSPINVOKE.ArJoyHandler_init(swigCPtr);
    return ret;
  }

  public bool haveJoystick() {
    bool ret = AriaCSPINVOKE.ArJoyHandler_haveJoystick(swigCPtr);
    return ret;
  }

  public void getDoubles(out double x, out double y, out double z) {
    AriaCSPINVOKE.ArJoyHandler_getDoubles__SWIG_0(swigCPtr, out x, out y, out z);
  }

  public void getDoubles(out double x, out double y) {
    AriaCSPINVOKE.ArJoyHandler_getDoubles__SWIG_1(swigCPtr, out x, out y);
  }

  public bool getButton(uint button) {
    bool ret = AriaCSPINVOKE.ArJoyHandler_getButton(swigCPtr, button);
    return ret;
  }

  public bool haveZAxis() {
    bool ret = AriaCSPINVOKE.ArJoyHandler_haveZAxis(swigCPtr);
    return ret;
  }

  public void setSpeeds(int x, int y, int z) {
    AriaCSPINVOKE.ArJoyHandler_setSpeeds__SWIG_0(swigCPtr, x, y, z);
  }

  public void setSpeeds(int x, int y) {
    AriaCSPINVOKE.ArJoyHandler_setSpeeds__SWIG_1(swigCPtr, x, y);
  }

  public void getAdjusted(out int x, out int y, out int z) {
    AriaCSPINVOKE.ArJoyHandler_getAdjusted__SWIG_0(swigCPtr, out x, out y, out z);
  }

  public void getAdjusted(out int x, out int y) {
    AriaCSPINVOKE.ArJoyHandler_getAdjusted__SWIG_1(swigCPtr, out x, out y);
  }

  public uint getNumAxes() {
    uint ret = AriaCSPINVOKE.ArJoyHandler_getNumAxes(swigCPtr);
    return ret;
  }

  public double getAxis(uint axis) {
    double ret = AriaCSPINVOKE.ArJoyHandler_getAxis(swigCPtr, axis);
    return ret;
  }

  public uint getNumButtons() {
    uint ret = AriaCSPINVOKE.ArJoyHandler_getNumButtons(swigCPtr);
    return ret;
  }

  public void setUseOSCal(bool useOSCal) {
    AriaCSPINVOKE.ArJoyHandler_setUseOSCal(swigCPtr, useOSCal);
  }

  public bool getUseOSCal() {
    bool ret = AriaCSPINVOKE.ArJoyHandler_getUseOSCal(swigCPtr);
    return ret;
  }

  public void startCal() {
    AriaCSPINVOKE.ArJoyHandler_startCal(swigCPtr);
  }

  public void endCal() {
    AriaCSPINVOKE.ArJoyHandler_endCal(swigCPtr);
  }

  public void getUnfiltered(out int x, out int y, out int z) {
    AriaCSPINVOKE.ArJoyHandler_getUnfiltered__SWIG_0(swigCPtr, out x, out y, out z);
  }

  public void getUnfiltered(out int x, out int y) {
    AriaCSPINVOKE.ArJoyHandler_getUnfiltered__SWIG_1(swigCPtr, out x, out y);
  }

  public void getStats(SWIGTYPE_p_int maxX, SWIGTYPE_p_int minX, SWIGTYPE_p_int maxY, SWIGTYPE_p_int minY, SWIGTYPE_p_int cenX, SWIGTYPE_p_int cenY) {
    AriaCSPINVOKE.ArJoyHandler_getStats(swigCPtr, SWIGTYPE_p_int.getCPtr(maxX), SWIGTYPE_p_int.getCPtr(minX), SWIGTYPE_p_int.getCPtr(maxY), SWIGTYPE_p_int.getCPtr(minY), SWIGTYPE_p_int.getCPtr(cenX), SWIGTYPE_p_int.getCPtr(cenY));
  }

  public void setStats(int maxX, int minX, int maxY, int minY, int cenX, int cenY) {
    AriaCSPINVOKE.ArJoyHandler_setStats(swigCPtr, maxX, minX, maxY, minY, cenX, cenY);
  }

  public void getSpeeds(out int x, out int y, out int z) {
    AriaCSPINVOKE.ArJoyHandler_getSpeeds__SWIG_0(swigCPtr, out x, out y, out z);
  }

  public ArJoyVec3f getDoubles() {
    ArJoyVec3f ret = new ArJoyVec3f(AriaCSPINVOKE.ArJoyHandler_getDoubles__SWIG_2(swigCPtr), true);
    return ret;
  }

  public ArJoyVec3i getAdjusted() {
    ArJoyVec3i ret = new ArJoyVec3i(AriaCSPINVOKE.ArJoyHandler_getAdjusted__SWIG_2(swigCPtr), true);
    return ret;
  }

  public ArJoyVec3i getUnfiltered() {
    ArJoyVec3i ret = new ArJoyVec3i(AriaCSPINVOKE.ArJoyHandler_getUnfiltered__SWIG_2(swigCPtr), true);
    return ret;
  }

  public ArJoyVec3i getSpeeds() {
    ArJoyVec3i ret = new ArJoyVec3i(AriaCSPINVOKE.ArJoyHandler_getSpeeds__SWIG_1(swigCPtr), true);
    return ret;
  }

}

}
