//------------------------------------------------------------------------------
// <auto-generated />
//
// This file was automatically generated by SWIG (http://www.swig.org).
// Version 3.0.8
//
// Do not make changes to this file unless you know what you are doing--modify
// the SWIG interface file instead.
//------------------------------------------------------------------------------

namespace AriaCS {

public class ArRobotConnector : global::System.IDisposable {
  private global::System.Runtime.InteropServices.HandleRef swigCPtr;
  protected bool swigCMemOwn;

  public ArRobotConnector(global::System.IntPtr cPtr, bool cMemoryOwn) {
    swigCMemOwn = cMemoryOwn;
    swigCPtr = new global::System.Runtime.InteropServices.HandleRef(this, cPtr);
  }

  public static global::System.Runtime.InteropServices.HandleRef getCPtr(ArRobotConnector obj) {
    return (obj == null) ? new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero) : obj.swigCPtr;
  }

  ~ArRobotConnector() {
    Dispose();
  }

  public virtual void Dispose() {
    lock(this) {
      if (swigCPtr.Handle != global::System.IntPtr.Zero) {
        if (swigCMemOwn) {
          swigCMemOwn = false;
          AriaCSPINVOKE.delete_ArRobotConnector(swigCPtr);
        }
        swigCPtr = new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero);
      }
      global::System.GC.SuppressFinalize(this);
    }
  }

  public ArRobotConnector(ArArgumentParser parser, ArRobot robot, bool autoParseArgs, bool connectAllComponents) : this(AriaCSPINVOKE.new_ArRobotConnector__SWIG_0(ArArgumentParser.getCPtr(parser), ArRobot.getCPtr(robot), autoParseArgs, connectAllComponents), true) {
  }

  public ArRobotConnector(ArArgumentParser parser, ArRobot robot, bool autoParseArgs) : this(AriaCSPINVOKE.new_ArRobotConnector__SWIG_1(ArArgumentParser.getCPtr(parser), ArRobot.getCPtr(robot), autoParseArgs), true) {
  }

  public ArRobotConnector(ArArgumentParser parser, ArRobot robot) : this(AriaCSPINVOKE.new_ArRobotConnector__SWIG_2(ArArgumentParser.getCPtr(parser), ArRobot.getCPtr(robot)), true) {
  }

  public bool connectRobot() {
    bool ret = AriaCSPINVOKE.ArRobotConnector_connectRobot__SWIG_0(swigCPtr);
    return ret;
  }

  public bool connectRobot(ArRobot robot) {
    bool ret = AriaCSPINVOKE.ArRobotConnector_connectRobot__SWIG_1(swigCPtr, ArRobot.getCPtr(robot));
    return ret;
  }

  public void setResetOldConnection(bool r) {
    AriaCSPINVOKE.ArRobotConnector_setResetOldConnection(swigCPtr, r);
  }

  public bool setupRobot() {
    bool ret = AriaCSPINVOKE.ArRobotConnector_setupRobot__SWIG_0(swigCPtr);
    return ret;
  }

  public bool setupRobot(ArRobot robot) {
    bool ret = AriaCSPINVOKE.ArRobotConnector_setupRobot__SWIG_1(swigCPtr, ArRobot.getCPtr(robot));
    return ret;
  }

  public bool parseArgs() {
    bool ret = AriaCSPINVOKE.ArRobotConnector_parseArgs__SWIG_0(swigCPtr);
    return ret;
  }

  public bool parseArgs(ArArgumentParser parser) {
    bool ret = AriaCSPINVOKE.ArRobotConnector_parseArgs__SWIG_1(swigCPtr, ArArgumentParser.getCPtr(parser));
    return ret;
  }

  public void logOptions() {
    AriaCSPINVOKE.ArRobotConnector_logOptions(swigCPtr);
  }

  public string getRemoteHost() {
    string ret = AriaCSPINVOKE.ArRobotConnector_getRemoteHost(swigCPtr);
    return ret;
  }

  public bool getRemoteIsSim() {
    bool ret = AriaCSPINVOKE.ArRobotConnector_getRemoteIsSim(swigCPtr);
    return ret;
  }

  public void setRemoteIsSim(bool remoteIsSim) {
    AriaCSPINVOKE.ArRobotConnector_setRemoteIsSim(swigCPtr, remoteIsSim);
  }

  public ArRobot getRobot() {
    global::System.IntPtr cPtr = AriaCSPINVOKE.ArRobotConnector_getRobot(swigCPtr);
    ArRobot ret = (cPtr == global::System.IntPtr.Zero) ? null : new ArRobot(cPtr, false);
    return ret;
  }

  public bool disconnectAll() {
    bool ret = AriaCSPINVOKE.ArRobotConnector_disconnectAll(swigCPtr);
    return ret;
  }

}

}
