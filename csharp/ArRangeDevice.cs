//------------------------------------------------------------------------------
// <auto-generated />
//
// This file was automatically generated by SWIG (http://www.swig.org).
// Version 3.0.8
//
// Do not make changes to this file unless you know what you are doing--modify
// the SWIG interface file instead.
//------------------------------------------------------------------------------

namespace AriaCS {

public class ArRangeDevice : global::System.IDisposable {
  private global::System.Runtime.InteropServices.HandleRef swigCPtr;
  protected bool swigCMemOwn;

  public ArRangeDevice(global::System.IntPtr cPtr, bool cMemoryOwn) {
    swigCMemOwn = cMemoryOwn;
    swigCPtr = new global::System.Runtime.InteropServices.HandleRef(this, cPtr);
  }

  public static global::System.Runtime.InteropServices.HandleRef getCPtr(ArRangeDevice obj) {
    return (obj == null) ? new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero) : obj.swigCPtr;
  }

  ~ArRangeDevice() {
    Dispose();
  }

  public virtual void Dispose() {
    lock(this) {
      if (swigCPtr.Handle != global::System.IntPtr.Zero) {
        if (swigCMemOwn) {
          swigCMemOwn = false;
          AriaCSPINVOKE.delete_ArRangeDevice(swigCPtr);
        }
        swigCPtr = new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero);
      }
      global::System.GC.SuppressFinalize(this);
    }
  }

  public ArRangeDevice(uint currentBufferSize, uint cumulativeBufferSize, string name, uint maxRange, int maxSecondsToKeepCurrent, int maxSecondsToKeepCumulative, double maxDistToKeepCumulative, bool locationDependent) : this(AriaCSPINVOKE.new_ArRangeDevice__SWIG_0(currentBufferSize, cumulativeBufferSize, name, maxRange, maxSecondsToKeepCurrent, maxSecondsToKeepCumulative, maxDistToKeepCumulative, locationDependent), true) {
  }

  public ArRangeDevice(uint currentBufferSize, uint cumulativeBufferSize, string name, uint maxRange, int maxSecondsToKeepCurrent, int maxSecondsToKeepCumulative, double maxDistToKeepCumulative) : this(AriaCSPINVOKE.new_ArRangeDevice__SWIG_1(currentBufferSize, cumulativeBufferSize, name, maxRange, maxSecondsToKeepCurrent, maxSecondsToKeepCumulative, maxDistToKeepCumulative), true) {
  }

  public ArRangeDevice(uint currentBufferSize, uint cumulativeBufferSize, string name, uint maxRange, int maxSecondsToKeepCurrent, int maxSecondsToKeepCumulative) : this(AriaCSPINVOKE.new_ArRangeDevice__SWIG_2(currentBufferSize, cumulativeBufferSize, name, maxRange, maxSecondsToKeepCurrent, maxSecondsToKeepCumulative), true) {
  }

  public ArRangeDevice(uint currentBufferSize, uint cumulativeBufferSize, string name, uint maxRange, int maxSecondsToKeepCurrent) : this(AriaCSPINVOKE.new_ArRangeDevice__SWIG_3(currentBufferSize, cumulativeBufferSize, name, maxRange, maxSecondsToKeepCurrent), true) {
  }

  public ArRangeDevice(uint currentBufferSize, uint cumulativeBufferSize, string name, uint maxRange) : this(AriaCSPINVOKE.new_ArRangeDevice__SWIG_4(currentBufferSize, cumulativeBufferSize, name, maxRange), true) {
  }

  public virtual string getName() {
    string ret = AriaCSPINVOKE.ArRangeDevice_getName(swigCPtr);
    return ret;
  }

  public virtual void setRobot(ArRobot robot) {
    AriaCSPINVOKE.ArRangeDevice_setRobot(swigCPtr, ArRobot.getCPtr(robot));
  }

  public virtual ArRobot getRobot() {
    global::System.IntPtr cPtr = AriaCSPINVOKE.ArRangeDevice_getRobot(swigCPtr);
    ArRobot ret = (cPtr == global::System.IntPtr.Zero) ? null : new ArRobot(cPtr, false);
    return ret;
  }

  public virtual void setCurrentBufferSize(uint size) {
    AriaCSPINVOKE.ArRangeDevice_setCurrentBufferSize(swigCPtr, size);
  }

  public virtual uint getCurrentBufferSize() {
    uint ret = AriaCSPINVOKE.ArRangeDevice_getCurrentBufferSize(swigCPtr);
    return ret;
  }

  public virtual void setCumulativeBufferSize(uint size) {
    AriaCSPINVOKE.ArRangeDevice_setCumulativeBufferSize(swigCPtr, size);
  }

  public virtual uint getCumulativeBufferSize() {
    uint ret = AriaCSPINVOKE.ArRangeDevice_getCumulativeBufferSize(swigCPtr);
    return ret;
  }

  public virtual void addReading(double x, double y, SWIGTYPE_p_bool wasAdded) {
    AriaCSPINVOKE.ArRangeDevice_addReading__SWIG_0(swigCPtr, x, y, SWIGTYPE_p_bool.getCPtr(wasAdded));
  }

  public virtual void addReading(double x, double y) {
    AriaCSPINVOKE.ArRangeDevice_addReading__SWIG_1(swigCPtr, x, y);
  }

  public bool isLocationDependent() {
    bool ret = AriaCSPINVOKE.ArRangeDevice_isLocationDependent(swigCPtr);
    return ret;
  }

  public virtual double currentReadingPolar(double startAngle, double endAngle, SWIGTYPE_p_double angle) {
    double ret = AriaCSPINVOKE.ArRangeDevice_currentReadingPolar__SWIG_0(swigCPtr, startAngle, endAngle, SWIGTYPE_p_double.getCPtr(angle));
    return ret;
  }

  public virtual double currentReadingPolar(double startAngle, double endAngle) {
    double ret = AriaCSPINVOKE.ArRangeDevice_currentReadingPolar__SWIG_1(swigCPtr, startAngle, endAngle);
    return ret;
  }

  public virtual double cumulativeReadingPolar(double startAngle, double endAngle, SWIGTYPE_p_double angle) {
    double ret = AriaCSPINVOKE.ArRangeDevice_cumulativeReadingPolar__SWIG_0(swigCPtr, startAngle, endAngle, SWIGTYPE_p_double.getCPtr(angle));
    return ret;
  }

  public virtual double cumulativeReadingPolar(double startAngle, double endAngle) {
    double ret = AriaCSPINVOKE.ArRangeDevice_cumulativeReadingPolar__SWIG_1(swigCPtr, startAngle, endAngle);
    return ret;
  }

  public virtual double currentReadingBox(double x1, double y1, double x2, double y2, ArPose readingPos) {
    double ret = AriaCSPINVOKE.ArRangeDevice_currentReadingBox__SWIG_0(swigCPtr, x1, y1, x2, y2, ArPose.getCPtr(readingPos));
    return ret;
  }

  public virtual double currentReadingBox(double x1, double y1, double x2, double y2) {
    double ret = AriaCSPINVOKE.ArRangeDevice_currentReadingBox__SWIG_1(swigCPtr, x1, y1, x2, y2);
    return ret;
  }

  public virtual double cumulativeReadingBox(double x1, double y1, double x2, double y2, ArPose readingPos) {
    double ret = AriaCSPINVOKE.ArRangeDevice_cumulativeReadingBox__SWIG_0(swigCPtr, x1, y1, x2, y2, ArPose.getCPtr(readingPos));
    return ret;
  }

  public virtual double cumulativeReadingBox(double x1, double y1, double x2, double y2) {
    double ret = AriaCSPINVOKE.ArRangeDevice_cumulativeReadingBox__SWIG_1(swigCPtr, x1, y1, x2, y2);
    return ret;
  }

  public virtual ArRangeBuffer getCurrentRangeBuffer() {
    global::System.IntPtr cPtr = AriaCSPINVOKE.ArRangeDevice_getCurrentRangeBuffer(swigCPtr);
    ArRangeBuffer ret = (cPtr == global::System.IntPtr.Zero) ? null : new ArRangeBuffer(cPtr, false);
    return ret;
  }

  public virtual ArRangeBuffer getCumulativeRangeBuffer() {
    global::System.IntPtr cPtr = AriaCSPINVOKE.ArRangeDevice_getCumulativeRangeBuffer(swigCPtr);
    ArRangeBuffer ret = (cPtr == global::System.IntPtr.Zero) ? null : new ArRangeBuffer(cPtr, false);
    return ret;
  }

  public virtual SWIGTYPE_p_std__listT_ArPoseWithTime_p_t getCurrentBuffer() {
    global::System.IntPtr cPtr = AriaCSPINVOKE.ArRangeDevice_getCurrentBuffer(swigCPtr);
    SWIGTYPE_p_std__listT_ArPoseWithTime_p_t ret = (cPtr == global::System.IntPtr.Zero) ? null : new SWIGTYPE_p_std__listT_ArPoseWithTime_p_t(cPtr, false);
    return ret;
  }

  public virtual ArPoseWithTimeVector getCurrentBufferAsVector() {
    global::System.IntPtr cPtr = AriaCSPINVOKE.ArRangeDevice_getCurrentBufferAsVector(swigCPtr);
    ArPoseWithTimeVector ret = (cPtr == global::System.IntPtr.Zero) ? null : new ArPoseWithTimeVector(cPtr, false);
    return ret;
  }

  public virtual SWIGTYPE_p_std__listT_ArPoseWithTime_p_t getCumulativeBuffer() {
    global::System.IntPtr cPtr = AriaCSPINVOKE.ArRangeDevice_getCumulativeBuffer(swigCPtr);
    SWIGTYPE_p_std__listT_ArPoseWithTime_p_t ret = (cPtr == global::System.IntPtr.Zero) ? null : new SWIGTYPE_p_std__listT_ArPoseWithTime_p_t(cPtr, false);
    return ret;
  }

  public virtual ArPoseWithTimeVector getCumulativeBufferAsVector() {
    global::System.IntPtr cPtr = AriaCSPINVOKE.ArRangeDevice_getCumulativeBufferAsVector(swigCPtr);
    ArPoseWithTimeVector ret = (cPtr == global::System.IntPtr.Zero) ? null : new ArPoseWithTimeVector(cPtr, false);
    return ret;
  }

  public virtual SWIGTYPE_p_std__listT_ArSensorReading_p_t getRawReadings() {
    global::System.IntPtr cPtr = AriaCSPINVOKE.ArRangeDevice_getRawReadings(swigCPtr);
    SWIGTYPE_p_std__listT_ArSensorReading_p_t ret = (cPtr == global::System.IntPtr.Zero) ? null : new SWIGTYPE_p_std__listT_ArSensorReading_p_t(cPtr, false);
    return ret;
  }

  public virtual ArSensorReadingVector getRawReadingsAsVector() {
    global::System.IntPtr cPtr = AriaCSPINVOKE.ArRangeDevice_getRawReadingsAsVector(swigCPtr);
    ArSensorReadingVector ret = (cPtr == global::System.IntPtr.Zero) ? null : new ArSensorReadingVector(cPtr, false);
    return ret;
  }

  public virtual SWIGTYPE_p_std__listT_ArSensorReading_p_t getAdjustedRawReadings() {
    global::System.IntPtr cPtr = AriaCSPINVOKE.ArRangeDevice_getAdjustedRawReadings(swigCPtr);
    SWIGTYPE_p_std__listT_ArSensorReading_p_t ret = (cPtr == global::System.IntPtr.Zero) ? null : new SWIGTYPE_p_std__listT_ArSensorReading_p_t(cPtr, false);
    return ret;
  }

  public virtual ArSensorReadingVector getAdjustedRawReadingsAsVector() {
    global::System.IntPtr cPtr = AriaCSPINVOKE.ArRangeDevice_getAdjustedRawReadingsAsVector(swigCPtr);
    ArSensorReadingVector ret = (cPtr == global::System.IntPtr.Zero) ? null : new ArSensorReadingVector(cPtr, false);
    return ret;
  }

  public void setMaxSecondsToKeepCurrent(int maxSecondsToKeepCurrent) {
    AriaCSPINVOKE.ArRangeDevice_setMaxSecondsToKeepCurrent(swigCPtr, maxSecondsToKeepCurrent);
  }

  public int getMaxSecondsToKeepCurrent() {
    int ret = AriaCSPINVOKE.ArRangeDevice_getMaxSecondsToKeepCurrent(swigCPtr);
    return ret;
  }

  public void setMinDistBetweenCurrent(double minDistBetweenCurrent) {
    AriaCSPINVOKE.ArRangeDevice_setMinDistBetweenCurrent(swigCPtr, minDistBetweenCurrent);
  }

  public double getMinDistBetweenCurrent() {
    double ret = AriaCSPINVOKE.ArRangeDevice_getMinDistBetweenCurrent(swigCPtr);
    return ret;
  }

  public void setMaxSecondsToKeepCumulative(int maxSecondsToKeepCumulative) {
    AriaCSPINVOKE.ArRangeDevice_setMaxSecondsToKeepCumulative(swigCPtr, maxSecondsToKeepCumulative);
  }

  public int getMaxSecondsToKeepCumulative() {
    int ret = AriaCSPINVOKE.ArRangeDevice_getMaxSecondsToKeepCumulative(swigCPtr);
    return ret;
  }

  public void setMaxDistToKeepCumulative(double maxDistToKeepCumulative) {
    AriaCSPINVOKE.ArRangeDevice_setMaxDistToKeepCumulative(swigCPtr, maxDistToKeepCumulative);
  }

  public double getMaxDistToKeepCumulative() {
    double ret = AriaCSPINVOKE.ArRangeDevice_getMaxDistToKeepCumulative(swigCPtr);
    return ret;
  }

  public void setMinDistBetweenCumulative(double minDistBetweenCumulative) {
    AriaCSPINVOKE.ArRangeDevice_setMinDistBetweenCumulative(swigCPtr, minDistBetweenCumulative);
  }

  public double getMinDistBetweenCumulative() {
    double ret = AriaCSPINVOKE.ArRangeDevice_getMinDistBetweenCumulative(swigCPtr);
    return ret;
  }

  public void setMaxInsertDistCumulative(double maxInsertDistCumulative) {
    AriaCSPINVOKE.ArRangeDevice_setMaxInsertDistCumulative(swigCPtr, maxInsertDistCumulative);
  }

  public double getMaxInsertDistCumulative() {
    double ret = AriaCSPINVOKE.ArRangeDevice_getMaxInsertDistCumulative(swigCPtr);
    return ret;
  }

  public virtual void clearCurrentReadings() {
    AriaCSPINVOKE.ArRangeDevice_clearCurrentReadings(swigCPtr);
  }

  public virtual void clearCumulativeReadings() {
    AriaCSPINVOKE.ArRangeDevice_clearCumulativeReadings(swigCPtr);
  }

  public virtual void clearCumulativeOlderThan(int milliSeconds) {
    AriaCSPINVOKE.ArRangeDevice_clearCumulativeOlderThan(swigCPtr, milliSeconds);
  }

  public virtual void clearCumulativeOlderThanSeconds(int seconds) {
    AriaCSPINVOKE.ArRangeDevice_clearCumulativeOlderThanSeconds(swigCPtr, seconds);
  }

  public virtual uint getMaxRange() {
    uint ret = AriaCSPINVOKE.ArRangeDevice_getMaxRange(swigCPtr);
    return ret;
  }

  public virtual void setMaxRange(uint maxRange) {
    AriaCSPINVOKE.ArRangeDevice_setMaxRange(swigCPtr, maxRange);
  }

  public virtual void applyTransform(ArTransform trans, bool doCumulative) {
    AriaCSPINVOKE.ArRangeDevice_applyTransform__SWIG_0(swigCPtr, ArTransform.getCPtr(trans), doCumulative);
    if (AriaCSPINVOKE.SWIGPendingException.Pending) throw AriaCSPINVOKE.SWIGPendingException.Retrieve();
  }

  public virtual void applyTransform(ArTransform trans) {
    AriaCSPINVOKE.ArRangeDevice_applyTransform__SWIG_1(swigCPtr, ArTransform.getCPtr(trans));
    if (AriaCSPINVOKE.SWIGPendingException.Pending) throw AriaCSPINVOKE.SWIGPendingException.Retrieve();
  }

  public virtual ArDrawingData getCurrentDrawingData() {
    global::System.IntPtr cPtr = AriaCSPINVOKE.ArRangeDevice_getCurrentDrawingData(swigCPtr);
    ArDrawingData ret = (cPtr == global::System.IntPtr.Zero) ? null : new ArDrawingData(cPtr, false);
    return ret;
  }

  public virtual ArDrawingData getCumulativeDrawingData() {
    global::System.IntPtr cPtr = AriaCSPINVOKE.ArRangeDevice_getCumulativeDrawingData(swigCPtr);
    ArDrawingData ret = (cPtr == global::System.IntPtr.Zero) ? null : new ArDrawingData(cPtr, false);
    return ret;
  }

  public virtual void setCurrentDrawingData(ArDrawingData data, bool takeOwnershipOfData) {
    AriaCSPINVOKE.ArRangeDevice_setCurrentDrawingData(swigCPtr, ArDrawingData.getCPtr(data), takeOwnershipOfData);
  }

  public virtual void setCumulativeDrawingData(ArDrawingData data, bool takeOwnershipOfData) {
    AriaCSPINVOKE.ArRangeDevice_setCumulativeDrawingData(swigCPtr, ArDrawingData.getCPtr(data), takeOwnershipOfData);
  }

  public virtual int lockDevice() {
    int ret = AriaCSPINVOKE.ArRangeDevice_lockDevice(swigCPtr);
    return ret;
  }

  public virtual int tryLockDevice() {
    int ret = AriaCSPINVOKE.ArRangeDevice_tryLockDevice(swigCPtr);
    return ret;
  }

  public virtual int unlockDevice() {
    int ret = AriaCSPINVOKE.ArRangeDevice_unlockDevice(swigCPtr);
    return ret;
  }

  public void filterCallback() {
    AriaCSPINVOKE.ArRangeDevice_filterCallback(swigCPtr);
  }

}

}
