//------------------------------------------------------------------------------
// <auto-generated />
//
// This file was automatically generated by SWIG (http://www.swig.org).
// Version 3.0.8
//
// Do not make changes to this file unless you know what you are doing--modify
// the SWIG interface file instead.
//------------------------------------------------------------------------------

namespace AriaCS {

public class ArActionJoydrive : ArAction {
  private global::System.Runtime.InteropServices.HandleRef swigCPtr;

  public ArActionJoydrive(global::System.IntPtr cPtr, bool cMemoryOwn) : base(AriaCSPINVOKE.ArActionJoydrive_SWIGUpcast(cPtr), cMemoryOwn) {
    swigCPtr = new global::System.Runtime.InteropServices.HandleRef(this, cPtr);
  }

  public static global::System.Runtime.InteropServices.HandleRef getCPtr(ArActionJoydrive obj) {
    return (obj == null) ? new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero) : obj.swigCPtr;
  }

  ~ArActionJoydrive() {
    Dispose();
  }

  public override void Dispose() {
    lock(this) {
      if (swigCPtr.Handle != global::System.IntPtr.Zero) {
        if (swigCMemOwn) {
          swigCMemOwn = false;
          AriaCSPINVOKE.delete_ArActionJoydrive(swigCPtr);
        }
        swigCPtr = new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero);
      }
      global::System.GC.SuppressFinalize(this);
      base.Dispose();
    }
  }

  public ArActionJoydrive(string name, double transVelMax, double turnAmountMax, bool stopIfNoButtonPressed, bool useOSCalForJoystick) : this(AriaCSPINVOKE.new_ArActionJoydrive__SWIG_0(name, transVelMax, turnAmountMax, stopIfNoButtonPressed, useOSCalForJoystick), true) {
  }

  public ArActionJoydrive(string name, double transVelMax, double turnAmountMax, bool stopIfNoButtonPressed) : this(AriaCSPINVOKE.new_ArActionJoydrive__SWIG_1(name, transVelMax, turnAmountMax, stopIfNoButtonPressed), true) {
  }

  public ArActionJoydrive(string name, double transVelMax, double turnAmountMax) : this(AriaCSPINVOKE.new_ArActionJoydrive__SWIG_2(name, transVelMax, turnAmountMax), true) {
  }

  public ArActionJoydrive(string name, double transVelMax) : this(AriaCSPINVOKE.new_ArActionJoydrive__SWIG_3(name, transVelMax), true) {
  }

  public ArActionJoydrive(string name) : this(AriaCSPINVOKE.new_ArActionJoydrive__SWIG_4(name), true) {
  }

  public ArActionJoydrive() : this(AriaCSPINVOKE.new_ArActionJoydrive__SWIG_5(), true) {
  }

  public override ArActionDesired fire(ArActionDesired currentDesired) {
    global::System.IntPtr cPtr = AriaCSPINVOKE.ArActionJoydrive_fire(swigCPtr, ArActionDesired.getCPtr(currentDesired));
    ArActionDesired ret = (cPtr == global::System.IntPtr.Zero) ? null : new ArActionDesired(cPtr, false);
    if (AriaCSPINVOKE.SWIGPendingException.Pending) throw AriaCSPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public bool joystickInited() {
    bool ret = AriaCSPINVOKE.ArActionJoydrive_joystickInited(swigCPtr);
    return ret;
  }

  public void setSpeeds(double transVelMax, double turnAmountMax) {
    AriaCSPINVOKE.ArActionJoydrive_setSpeeds(swigCPtr, transVelMax, turnAmountMax);
  }

  public void setStopIfNoButtonPressed(bool stopIfNoButtonPressed) {
    AriaCSPINVOKE.ArActionJoydrive_setStopIfNoButtonPressed(swigCPtr, stopIfNoButtonPressed);
  }

  public bool getStopIfNoButtonPressed() {
    bool ret = AriaCSPINVOKE.ArActionJoydrive_getStopIfNoButtonPressed(swigCPtr);
    return ret;
  }

  public void setThrottleParams(double lowSpeed, double highSpeed) {
    AriaCSPINVOKE.ArActionJoydrive_setThrottleParams(swigCPtr, lowSpeed, highSpeed);
  }

  public void setUseOSCal(bool useOSCal) {
    AriaCSPINVOKE.ArActionJoydrive_setUseOSCal(swigCPtr, useOSCal);
  }

  public bool getUseOSCal() {
    bool ret = AriaCSPINVOKE.ArActionJoydrive_getUseOSCal(swigCPtr);
    return ret;
  }

  public ArJoyHandler getJoyHandler() {
    global::System.IntPtr cPtr = AriaCSPINVOKE.ArActionJoydrive_getJoyHandler(swigCPtr);
    ArJoyHandler ret = (cPtr == global::System.IntPtr.Zero) ? null : new ArJoyHandler(cPtr, false);
    return ret;
  }

  public override ArActionDesired getDesired() {
    global::System.IntPtr cPtr = AriaCSPINVOKE.ArActionJoydrive_getDesired(swigCPtr);
    ArActionDesired ret = (cPtr == global::System.IntPtr.Zero) ? null : new ArActionDesired(cPtr, false);
    return ret;
  }

}

}
