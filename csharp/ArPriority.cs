//------------------------------------------------------------------------------
// <auto-generated />
//
// This file was automatically generated by SWIG (http://www.swig.org).
// Version 3.0.8
//
// Do not make changes to this file unless you know what you are doing--modify
// the SWIG interface file instead.
//------------------------------------------------------------------------------

namespace AriaCS {

public class ArPriority : global::System.IDisposable {
  private global::System.Runtime.InteropServices.HandleRef swigCPtr;
  protected bool swigCMemOwn;

  public ArPriority(global::System.IntPtr cPtr, bool cMemoryOwn) {
    swigCMemOwn = cMemoryOwn;
    swigCPtr = new global::System.Runtime.InteropServices.HandleRef(this, cPtr);
  }

  public static global::System.Runtime.InteropServices.HandleRef getCPtr(ArPriority obj) {
    return (obj == null) ? new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero) : obj.swigCPtr;
  }

  ~ArPriority() {
    Dispose();
  }

  public virtual void Dispose() {
    lock(this) {
      if (swigCPtr.Handle != global::System.IntPtr.Zero) {
        if (swigCMemOwn) {
          swigCMemOwn = false;
          AriaCSPINVOKE.delete_ArPriority(swigCPtr);
        }
        swigCPtr = new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero);
      }
      global::System.GC.SuppressFinalize(this);
    }
  }

  public static string getPriorityName(ArPriority.Priority priority) {
    string ret = AriaCSPINVOKE.ArPriority_getPriorityName((int)priority);
    return ret;
  }

  public static ArPriority.Priority getPriorityFromName(string text, SWIGTYPE_p_bool ok) {
    ArPriority.Priority ret = (ArPriority.Priority)AriaCSPINVOKE.ArPriority_getPriorityFromName__SWIG_0(text, SWIGTYPE_p_bool.getCPtr(ok));
    return ret;
  }

  public static ArPriority.Priority getPriorityFromName(string text) {
    ArPriority.Priority ret = (ArPriority.Priority)AriaCSPINVOKE.ArPriority_getPriorityFromName__SWIG_1(text);
    return ret;
  }

  public ArPriority() : this(AriaCSPINVOKE.new_ArPriority(), true) {
  }

  public enum Priority {
    INVALID_PRIORITY = -1,
    IMPORTANT,
    BASIC = IMPORTANT,
    FIRST_PRIORITY = IMPORTANT,
    NORMAL,
    INTERMEDIATE = NORMAL,
    DETAILED,
    TRIVIAL = DETAILED,
    ADVANCED = DETAILED,
    EXPERT,
    FACTORY,
    CALIBRATION,
    LAST_PRIORITY = CALIBRATION
  }

  public static readonly int PRIORITY_COUNT = AriaCSPINVOKE.ArPriority_PRIORITY_COUNT_get();

}

}
