//------------------------------------------------------------------------------
// <auto-generated />
//
// This file was automatically generated by SWIG (http://www.swig.org).
// Version 3.0.8
//
// Do not make changes to this file unless you know what you are doing--modify
// the SWIG interface file instead.
//------------------------------------------------------------------------------

namespace AriaCS {

public class ArUtil : global::System.IDisposable {
  private global::System.Runtime.InteropServices.HandleRef swigCPtr;
  protected bool swigCMemOwn;

  public ArUtil(global::System.IntPtr cPtr, bool cMemoryOwn) {
    swigCMemOwn = cMemoryOwn;
    swigCPtr = new global::System.Runtime.InteropServices.HandleRef(this, cPtr);
  }

  public static global::System.Runtime.InteropServices.HandleRef getCPtr(ArUtil obj) {
    return (obj == null) ? new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero) : obj.swigCPtr;
  }

  ~ArUtil() {
    Dispose();
  }

  public virtual void Dispose() {
    lock(this) {
      if (swigCPtr.Handle != global::System.IntPtr.Zero) {
        if (swigCMemOwn) {
          swigCMemOwn = false;
          AriaCSPINVOKE.delete_ArUtil(swigCPtr);
        }
        swigCPtr = new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero);
      }
      global::System.GC.SuppressFinalize(this);
    }
  }

  public static bool ReturnTrue() {
    bool ret = AriaCSPINVOKE.ArUtil_ReturnTrue();
    return ret;
  }

  public static bool ReturnFalse() {
    bool ret = AriaCSPINVOKE.ArUtil_ReturnFalse();
    return ret;
  }

  public static void sleep(uint ms) {
    AriaCSPINVOKE.ArUtil_sleep(ms);
  }

  public static uint getTime() {
    uint ret = AriaCSPINVOKE.ArUtil_getTime();
    return ret;
  }

  public static int findMin(int first, int second) {
    int ret = AriaCSPINVOKE.ArUtil_findMin__SWIG_0(first, second);
    return ret;
  }

  public static int findMax(int first, int second) {
    int ret = AriaCSPINVOKE.ArUtil_findMax__SWIG_0(first, second);
    return ret;
  }

  public static uint findMinU(uint first, uint second) {
    uint ret = AriaCSPINVOKE.ArUtil_findMinU(first, second);
    return ret;
  }

  public static uint findMaxU(uint first, uint second) {
    uint ret = AriaCSPINVOKE.ArUtil_findMaxU(first, second);
    return ret;
  }

  public static double findMin(double first, double second) {
    double ret = AriaCSPINVOKE.ArUtil_findMin__SWIG_1(first, second);
    return ret;
  }

  public static double findMax(double first, double second) {
    double ret = AriaCSPINVOKE.ArUtil_findMax__SWIG_1(first, second);
    return ret;
  }

  public static int sizeFile(string fileName) {
    int ret = AriaCSPINVOKE.ArUtil_sizeFile__SWIG_0(fileName);
    return ret;
  }

  public static bool findFile(string fileName) {
    bool ret = AriaCSPINVOKE.ArUtil_findFile(fileName);
    return ret;
  }

  public static void appendSlash(string path, uint pathLength) {
    AriaCSPINVOKE.ArUtil_appendSlash__SWIG_0(path, pathLength);
  }

  public static void appendSlash(SWIGTYPE_p_std__string path) {
    AriaCSPINVOKE.ArUtil_appendSlash__SWIG_1(SWIGTYPE_p_std__string.getCPtr(path));
    if (AriaCSPINVOKE.SWIGPendingException.Pending) throw AriaCSPINVOKE.SWIGPendingException.Retrieve();
  }

  public static void fixSlashes(string path, uint pathLength) {
    AriaCSPINVOKE.ArUtil_fixSlashes__SWIG_0(path, pathLength);
  }

  public static void fixSlashes(SWIGTYPE_p_std__string path) {
    AriaCSPINVOKE.ArUtil_fixSlashes__SWIG_1(SWIGTYPE_p_std__string.getCPtr(path));
    if (AriaCSPINVOKE.SWIGPendingException.Pending) throw AriaCSPINVOKE.SWIGPendingException.Retrieve();
  }

  public static void fixSlashesForward(string path, uint pathLength) {
    AriaCSPINVOKE.ArUtil_fixSlashesForward(path, pathLength);
  }

  public static void fixSlashesBackward(string path, uint pathLength) {
    AriaCSPINVOKE.ArUtil_fixSlashesBackward(path, pathLength);
  }

  public static char getSlash() {
    char ret = AriaCSPINVOKE.ArUtil_getSlash();
    return ret;
  }

  public static void addDirectories(string dest, uint destLength, string baseDir, string insideDir) {
    AriaCSPINVOKE.ArUtil_addDirectories(dest, destLength, baseDir, insideDir);
  }

  public static int strcmp(string str, string str2) {
    int ret = AriaCSPINVOKE.ArUtil_strcmp__SWIG_0(str, str2);
    if (AriaCSPINVOKE.SWIGPendingException.Pending) throw AriaCSPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static int strcasecmp(string str, string str2) {
    int ret = AriaCSPINVOKE.ArUtil_strcasecmp__SWIG_0(str, str2);
    if (AriaCSPINVOKE.SWIGPendingException.Pending) throw AriaCSPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static bool strSuffixCmp(string str, string suffix) {
    bool ret = AriaCSPINVOKE.ArUtil_strSuffixCmp(str, suffix);
    return ret;
  }

  public static bool strSuffixCaseCmp(string str, string suffix) {
    bool ret = AriaCSPINVOKE.ArUtil_strSuffixCaseCmp(str, suffix);
    return ret;
  }

  public static int strcasequotecmp(string str1, string str2) {
    int ret = AriaCSPINVOKE.ArUtil_strcasequotecmp(str1, str2);
    if (AriaCSPINVOKE.SWIGPendingException.Pending) throw AriaCSPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static void escapeSpaces(string dest, string src, uint maxLen) {
    AriaCSPINVOKE.ArUtil_escapeSpaces(dest, src, maxLen);
  }

  public static bool stripQuotes(string dest, string src, uint destLen) {
    bool ret = AriaCSPINVOKE.ArUtil_stripQuotes__SWIG_0(dest, src, destLen);
    return ret;
  }

  public static bool stripQuotes(SWIGTYPE_p_std__string strToStrip) {
    bool ret = AriaCSPINVOKE.ArUtil_stripQuotes__SWIG_1(SWIGTYPE_p_std__string.getCPtr(strToStrip));
    return ret;
  }

  public static bool fixBadCharacters(SWIGTYPE_p_std__string strToFix, bool removeSpaces, bool fixOtherWhiteSpace) {
    bool ret = AriaCSPINVOKE.ArUtil_fixBadCharacters__SWIG_0(SWIGTYPE_p_std__string.getCPtr(strToFix), removeSpaces, fixOtherWhiteSpace);
    return ret;
  }

  public static bool fixBadCharacters(SWIGTYPE_p_std__string strToFix, bool removeSpaces) {
    bool ret = AriaCSPINVOKE.ArUtil_fixBadCharacters__SWIG_1(SWIGTYPE_p_std__string.getCPtr(strToFix), removeSpaces);
    return ret;
  }

  public static void lower(string dest, string src, uint maxLen) {
    AriaCSPINVOKE.ArUtil_lower(dest, src, maxLen);
  }

  public static bool isOnlyAlphaNumeric(string str) {
    bool ret = AriaCSPINVOKE.ArUtil_isOnlyAlphaNumeric(str);
    return ret;
  }

  public static bool isOnlyNumeric(string str) {
    bool ret = AriaCSPINVOKE.ArUtil_isOnlyNumeric(str);
    return ret;
  }

  public static bool isStrEmpty(string str) {
    bool ret = AriaCSPINVOKE.ArUtil_isStrEmpty(str);
    return ret;
  }

  public static bool isStrInList(string str, SWIGTYPE_p_std__listT_std__string_t list, bool isIgnoreCase) {
    bool ret = AriaCSPINVOKE.ArUtil_isStrInList__SWIG_0(str, SWIGTYPE_p_std__listT_std__string_t.getCPtr(list), isIgnoreCase);
    if (AriaCSPINVOKE.SWIGPendingException.Pending) throw AriaCSPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static bool isStrInList(string str, SWIGTYPE_p_std__listT_std__string_t list) {
    bool ret = AriaCSPINVOKE.ArUtil_isStrInList__SWIG_1(str, SWIGTYPE_p_std__listT_std__string_t.getCPtr(list));
    if (AriaCSPINVOKE.SWIGPendingException.Pending) throw AriaCSPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static double atof(string nptr) {
    double ret = AriaCSPINVOKE.ArUtil_atof(nptr);
    return ret;
  }

  public static string convertBool(int val) {
    string ret = AriaCSPINVOKE.ArUtil_convertBool(val);
    return ret;
  }

  public static void writeToFile(string str, SWIGTYPE_p_FILE file) {
    AriaCSPINVOKE.ArUtil_writeToFile(str, SWIGTYPE_p_FILE.getCPtr(file));
  }

  public static bool getStringFromFile(string fileName, string str, uint strLen) {
    bool ret = AriaCSPINVOKE.ArUtil_getStringFromFile(fileName, str, strLen);
    return ret;
  }

  public static bool getStringFromRegistry(ArUtil.REGKEY root, string key, string value, string str, int len) {
    bool ret = AriaCSPINVOKE.ArUtil_getStringFromRegistry((int)root, key, value, str, len);
    return ret;
  }

  public static bool findFirstStringInRegistry(string key, string value, string str, int len) {
    bool ret = AriaCSPINVOKE.ArUtil_findFirstStringInRegistry(key, value, str, len);
    return ret;
  }

  public static string COM1 {
    set {
      AriaCSPINVOKE.ArUtil_COM1_set(value);
    } 
    get {
      string ret = AriaCSPINVOKE.ArUtil_COM1_get();
      return ret;
    } 
  }

  public static string COM2 {
    set {
      AriaCSPINVOKE.ArUtil_COM2_set(value);
    } 
    get {
      string ret = AriaCSPINVOKE.ArUtil_COM2_get();
      return ret;
    } 
  }

  public static string COM3 {
    set {
      AriaCSPINVOKE.ArUtil_COM3_set(value);
    } 
    get {
      string ret = AriaCSPINVOKE.ArUtil_COM3_get();
      return ret;
    } 
  }

  public static string COM4 {
    set {
      AriaCSPINVOKE.ArUtil_COM4_set(value);
    } 
    get {
      string ret = AriaCSPINVOKE.ArUtil_COM4_get();
      return ret;
    } 
  }

  public static string COM5 {
    set {
      AriaCSPINVOKE.ArUtil_COM5_set(value);
    } 
    get {
      string ret = AriaCSPINVOKE.ArUtil_COM5_get();
      return ret;
    } 
  }

  public static string COM6 {
    set {
      AriaCSPINVOKE.ArUtil_COM6_set(value);
    } 
    get {
      string ret = AriaCSPINVOKE.ArUtil_COM6_get();
      return ret;
    } 
  }

  public static string COM7 {
    set {
      AriaCSPINVOKE.ArUtil_COM7_set(value);
    } 
    get {
      string ret = AriaCSPINVOKE.ArUtil_COM7_get();
      return ret;
    } 
  }

  public static string COM8 {
    set {
      AriaCSPINVOKE.ArUtil_COM8_set(value);
    } 
    get {
      string ret = AriaCSPINVOKE.ArUtil_COM8_get();
      return ret;
    } 
  }

  public static string COM9 {
    set {
      AriaCSPINVOKE.ArUtil_COM9_set(value);
    } 
    get {
      string ret = AriaCSPINVOKE.ArUtil_COM9_get();
      return ret;
    } 
  }

  public static string COM10 {
    set {
      AriaCSPINVOKE.ArUtil_COM10_set(value);
    } 
    get {
      string ret = AriaCSPINVOKE.ArUtil_COM10_get();
      return ret;
    } 
  }

  public static string COM11 {
    set {
      AriaCSPINVOKE.ArUtil_COM11_set(value);
    } 
    get {
      string ret = AriaCSPINVOKE.ArUtil_COM11_get();
      return ret;
    } 
  }

  public static string COM12 {
    set {
      AriaCSPINVOKE.ArUtil_COM12_set(value);
    } 
    get {
      string ret = AriaCSPINVOKE.ArUtil_COM12_get();
      return ret;
    } 
  }

  public static string COM13 {
    set {
      AriaCSPINVOKE.ArUtil_COM13_set(value);
    } 
    get {
      string ret = AriaCSPINVOKE.ArUtil_COM13_get();
      return ret;
    } 
  }

  public static string COM14 {
    set {
      AriaCSPINVOKE.ArUtil_COM14_set(value);
    } 
    get {
      string ret = AriaCSPINVOKE.ArUtil_COM14_get();
      return ret;
    } 
  }

  public static string COM15 {
    set {
      AriaCSPINVOKE.ArUtil_COM15_set(value);
    } 
    get {
      string ret = AriaCSPINVOKE.ArUtil_COM15_get();
      return ret;
    } 
  }

  public static string COM16 {
    set {
      AriaCSPINVOKE.ArUtil_COM16_set(value);
    } 
    get {
      string ret = AriaCSPINVOKE.ArUtil_COM16_get();
      return ret;
    } 
  }

  public static string TRUESTRING {
    set {
      AriaCSPINVOKE.ArUtil_TRUESTRING_set(value);
    } 
    get {
      string ret = AriaCSPINVOKE.ArUtil_TRUESTRING_get();
      return ret;
    } 
  }

  public static string FALSESTRING {
    set {
      AriaCSPINVOKE.ArUtil_FALSESTRING_set(value);
    } 
    get {
      string ret = AriaCSPINVOKE.ArUtil_FALSESTRING_get();
      return ret;
    } 
  }

  public static void putCurrentYearInString(string s, uint len) {
    AriaCSPINVOKE.ArUtil_putCurrentYearInString(s, len);
  }

  public static void putCurrentMonthInString(string s, uint len) {
    AriaCSPINVOKE.ArUtil_putCurrentMonthInString(s, len);
  }

  public static void putCurrentDayInString(string s, uint len) {
    AriaCSPINVOKE.ArUtil_putCurrentDayInString(s, len);
  }

  public static void putCurrentHourInString(string s, uint len) {
    AriaCSPINVOKE.ArUtil_putCurrentHourInString(s, len);
  }

  public static void putCurrentMinuteInString(string s, uint len) {
    AriaCSPINVOKE.ArUtil_putCurrentMinuteInString(s, len);
  }

  public static void putCurrentSecondInString(string s, uint len) {
    AriaCSPINVOKE.ArUtil_putCurrentSecondInString(s, len);
  }

  public static SWIGTYPE_p_time_t parseTime(string str, SWIGTYPE_p_bool ok, bool toToday) {
    SWIGTYPE_p_time_t ret = new SWIGTYPE_p_time_t(AriaCSPINVOKE.ArUtil_parseTime__SWIG_0(str, SWIGTYPE_p_bool.getCPtr(ok), toToday), true);
    return ret;
  }

  public static SWIGTYPE_p_time_t parseTime(string str, SWIGTYPE_p_bool ok) {
    SWIGTYPE_p_time_t ret = new SWIGTYPE_p_time_t(AriaCSPINVOKE.ArUtil_parseTime__SWIG_1(str, SWIGTYPE_p_bool.getCPtr(ok)), true);
    return ret;
  }

  public static SWIGTYPE_p_time_t parseTime(string str) {
    SWIGTYPE_p_time_t ret = new SWIGTYPE_p_time_t(AriaCSPINVOKE.ArUtil_parseTime__SWIG_2(str), true);
    return ret;
  }

  public static bool localtime(SWIGTYPE_p_time_t timep, SWIGTYPE_p_tm result) {
    bool ret = AriaCSPINVOKE.ArUtil_localtime__SWIG_0(SWIGTYPE_p_time_t.getCPtr(timep), SWIGTYPE_p_tm.getCPtr(result));
    return ret;
  }

  public static bool localtime(SWIGTYPE_p_tm result) {
    bool ret = AriaCSPINVOKE.ArUtil_localtime__SWIG_1(SWIGTYPE_p_tm.getCPtr(result));
    return ret;
  }

  public static bool matchCase(string baseDir, string fileName, string result, uint resultLen) {
    bool ret = AriaCSPINVOKE.ArUtil_matchCase(baseDir, fileName, result, resultLen);
    return ret;
  }

  public static bool getDirectory(string fileName, string result, uint resultLen) {
    bool ret = AriaCSPINVOKE.ArUtil_getDirectory(fileName, result, resultLen);
    return ret;
  }

  public static bool getFileName(string fileName, string result, uint resultLen) {
    bool ret = AriaCSPINVOKE.ArUtil_getFileName(fileName, result, resultLen);
    return ret;
  }

  public static bool changeFileTimestamp(string fileName, SWIGTYPE_p_time_t timestamp) {
    bool ret = AriaCSPINVOKE.ArUtil_changeFileTimestamp(fileName, SWIGTYPE_p_time_t.getCPtr(timestamp));
    if (AriaCSPINVOKE.SWIGPendingException.Pending) throw AriaCSPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static string insertSuffixBeforeExtension(string filename, string suffix) {
    string ret = AriaCSPINVOKE.ArUtil_insertSuffixBeforeExtension(filename, suffix);
    return ret;
  }

  public static SWIGTYPE_p_FILE fopen(string path, string mode, bool closeOnExec) {
    global::System.IntPtr cPtr = AriaCSPINVOKE.ArUtil_fopen__SWIG_0(path, mode, closeOnExec);
    SWIGTYPE_p_FILE ret = (cPtr == global::System.IntPtr.Zero) ? null : new SWIGTYPE_p_FILE(cPtr, false);
    return ret;
  }

  public static SWIGTYPE_p_FILE fopen(string path, string mode) {
    global::System.IntPtr cPtr = AriaCSPINVOKE.ArUtil_fopen__SWIG_1(path, mode);
    SWIGTYPE_p_FILE ret = (cPtr == global::System.IntPtr.Zero) ? null : new SWIGTYPE_p_FILE(cPtr, false);
    return ret;
  }

  public static int open(string pathname, int flags, bool closeOnExec) {
    int ret = AriaCSPINVOKE.ArUtil_open__SWIG_0(pathname, flags, closeOnExec);
    return ret;
  }

  public static int open(string pathname, int flags) {
    int ret = AriaCSPINVOKE.ArUtil_open__SWIG_1(pathname, flags);
    return ret;
  }

  public static int open(string pathname, int flags, SWIGTYPE_p_mode_t mode, bool closeOnExec) {
    int ret = AriaCSPINVOKE.ArUtil_open__SWIG_2(pathname, flags, SWIGTYPE_p_mode_t.getCPtr(mode), closeOnExec);
    if (AriaCSPINVOKE.SWIGPendingException.Pending) throw AriaCSPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static int open(string pathname, int flags, SWIGTYPE_p_mode_t mode) {
    int ret = AriaCSPINVOKE.ArUtil_open__SWIG_3(pathname, flags, SWIGTYPE_p_mode_t.getCPtr(mode));
    if (AriaCSPINVOKE.SWIGPendingException.Pending) throw AriaCSPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static int close(int fd) {
    int ret = AriaCSPINVOKE.ArUtil_close(fd);
    return ret;
  }

  public static int creat(string pathname, SWIGTYPE_p_mode_t mode, bool closeOnExec) {
    int ret = AriaCSPINVOKE.ArUtil_creat__SWIG_0(pathname, SWIGTYPE_p_mode_t.getCPtr(mode), closeOnExec);
    if (AriaCSPINVOKE.SWIGPendingException.Pending) throw AriaCSPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static int creat(string pathname, SWIGTYPE_p_mode_t mode) {
    int ret = AriaCSPINVOKE.ArUtil_creat__SWIG_1(pathname, SWIGTYPE_p_mode_t.getCPtr(mode));
    if (AriaCSPINVOKE.SWIGPendingException.Pending) throw AriaCSPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static SWIGTYPE_p_FILE popen(string command, string type, bool closeOnExec) {
    global::System.IntPtr cPtr = AriaCSPINVOKE.ArUtil_popen__SWIG_0(command, type, closeOnExec);
    SWIGTYPE_p_FILE ret = (cPtr == global::System.IntPtr.Zero) ? null : new SWIGTYPE_p_FILE(cPtr, false);
    return ret;
  }

  public static SWIGTYPE_p_FILE popen(string command, string type) {
    global::System.IntPtr cPtr = AriaCSPINVOKE.ArUtil_popen__SWIG_1(command, type);
    SWIGTYPE_p_FILE ret = (cPtr == global::System.IntPtr.Zero) ? null : new SWIGTYPE_p_FILE(cPtr, false);
    return ret;
  }

  public static void setFileCloseOnExec(int fd, bool closeOnExec) {
    AriaCSPINVOKE.ArUtil_setFileCloseOnExec__SWIG_0(fd, closeOnExec);
  }

  public static void setFileCloseOnExec(int fd) {
    AriaCSPINVOKE.ArUtil_setFileCloseOnExec__SWIG_1(fd);
  }

  public static void setFileCloseOnExec(SWIGTYPE_p_FILE file, bool closeOnExec) {
    AriaCSPINVOKE.ArUtil_setFileCloseOnExec__SWIG_2(SWIGTYPE_p_FILE.getCPtr(file), closeOnExec);
  }

  public static void setFileCloseOnExec(SWIGTYPE_p_FILE file) {
    AriaCSPINVOKE.ArUtil_setFileCloseOnExec__SWIG_3(SWIGTYPE_p_FILE.getCPtr(file));
  }

  public static bool floatIsNormal(double f) {
    bool ret = AriaCSPINVOKE.ArUtil_floatIsNormal(f);
    return ret;
  }

  public static double secToMSec(double sec) {
    double ret = AriaCSPINVOKE.ArUtil_secToMSec(sec);
    return ret;
  }

  public static double mSecToSec(double msec) {
    double ret = AriaCSPINVOKE.ArUtil_mSecToSec(msec);
    return ret;
  }

  public static double metersToFeet(double m) {
    double ret = AriaCSPINVOKE.ArUtil_metersToFeet(m);
    return ret;
  }

  public static double feetToMeters(double f) {
    double ret = AriaCSPINVOKE.ArUtil_feetToMeters(f);
    return ret;
  }

  public static int atoi(string str, SWIGTYPE_p_bool ok, bool forceHex) {
    int ret = AriaCSPINVOKE.ArUtil_atoi__SWIG_0(str, SWIGTYPE_p_bool.getCPtr(ok), forceHex);
    return ret;
  }

  public static int atoi(string str, SWIGTYPE_p_bool ok) {
    int ret = AriaCSPINVOKE.ArUtil_atoi__SWIG_1(str, SWIGTYPE_p_bool.getCPtr(ok));
    return ret;
  }

  public static int atoi(string str) {
    int ret = AriaCSPINVOKE.ArUtil_atoi__SWIG_2(str);
    return ret;
  }

  public static uint availableDiskSpaceKB(string path, SWIGTYPE_p_bool ok) {
    uint ret = AriaCSPINVOKE.ArUtil_availableDiskSpaceKB__SWIG_0(path, SWIGTYPE_p_bool.getCPtr(ok));
    return ret;
  }

  public static uint availableDiskSpaceKB(string path) {
    uint ret = AriaCSPINVOKE.ArUtil_availableDiskSpaceKB__SWIG_1(path);
    return ret;
  }

  public static uint availableDiskSpaceMB(string path, SWIGTYPE_p_bool ok) {
    uint ret = AriaCSPINVOKE.ArUtil_availableDiskSpaceMB__SWIG_0(path, SWIGTYPE_p_bool.getCPtr(ok));
    return ret;
  }

  public static uint availableDiskSpaceMB(string path) {
    uint ret = AriaCSPINVOKE.ArUtil_availableDiskSpaceMB__SWIG_1(path);
    return ret;
  }

  public ArUtil() : this(AriaCSPINVOKE.new_ArUtil(), true) {
  }

  public enum BITS {
    BIT0 = 0x1,
    BIT1 = 0x2,
    BIT2 = 0x4,
    BIT3 = 0x8,
    BIT4 = 0x10,
    BIT5 = 0x20,
    BIT6 = 0x40,
    BIT7 = 0x80,
    BIT8 = 0x100,
    BIT9 = 0x200,
    BIT10 = 0x400,
    BIT11 = 0x800,
    BIT12 = 0x1000,
    BIT13 = 0x2000,
    BIT14 = 0x4000,
    BIT15 = 0x8000
  }

  public enum REGKEY {
    REGKEY_CLASSES_ROOT,
    REGKEY_CURRENT_CONFIG,
    REGKEY_CURRENT_USER,
    REGKEY_LOCAL_MACHINE,
    REGKEY_USERS
  }

}

}
