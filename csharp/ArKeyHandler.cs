//------------------------------------------------------------------------------
// <auto-generated />
//
// This file was automatically generated by SWIG (http://www.swig.org).
// Version 3.0.8
//
// Do not make changes to this file unless you know what you are doing--modify
// the SWIG interface file instead.
//------------------------------------------------------------------------------

namespace AriaCS {

public class ArKeyHandler : global::System.IDisposable {
  private global::System.Runtime.InteropServices.HandleRef swigCPtr;
  protected bool swigCMemOwn;

  public ArKeyHandler(global::System.IntPtr cPtr, bool cMemoryOwn) {
    swigCMemOwn = cMemoryOwn;
    swigCPtr = new global::System.Runtime.InteropServices.HandleRef(this, cPtr);
  }

  public static global::System.Runtime.InteropServices.HandleRef getCPtr(ArKeyHandler obj) {
    return (obj == null) ? new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero) : obj.swigCPtr;
  }

  ~ArKeyHandler() {
    Dispose();
  }

  public virtual void Dispose() {
    lock(this) {
      if (swigCPtr.Handle != global::System.IntPtr.Zero) {
        if (swigCMemOwn) {
          swigCMemOwn = false;
          AriaCSPINVOKE.delete_ArKeyHandler(swigCPtr);
        }
        swigCPtr = new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero);
      }
      global::System.GC.SuppressFinalize(this);
    }
  }

  public ArKeyHandler(bool blocking, bool addAriaExitCB, SWIGTYPE_p_FILE stream, bool takeKeysInConstructor) : this(AriaCSPINVOKE.new_ArKeyHandler__SWIG_0(blocking, addAriaExitCB, SWIGTYPE_p_FILE.getCPtr(stream), takeKeysInConstructor), true) {
  }

  public ArKeyHandler(bool blocking, bool addAriaExitCB, SWIGTYPE_p_FILE stream) : this(AriaCSPINVOKE.new_ArKeyHandler__SWIG_1(blocking, addAriaExitCB, SWIGTYPE_p_FILE.getCPtr(stream)), true) {
  }

  public ArKeyHandler(bool blocking, bool addAriaExitCB) : this(AriaCSPINVOKE.new_ArKeyHandler__SWIG_2(blocking, addAriaExitCB), true) {
  }

  public ArKeyHandler(bool blocking) : this(AriaCSPINVOKE.new_ArKeyHandler__SWIG_3(blocking), true) {
  }

  public ArKeyHandler() : this(AriaCSPINVOKE.new_ArKeyHandler__SWIG_4(), true) {
  }

  public bool addKeyHandler(int keyToHandle, ArFunctor functor) {
    bool ret = AriaCSPINVOKE.ArKeyHandler_addKeyHandler(swigCPtr, keyToHandle, ArFunctor.getCPtr(functor));
    return ret;
  }

  public bool remKeyHandler(int keyToHandler) {
    bool ret = AriaCSPINVOKE.ArKeyHandler_remKeyHandler__SWIG_0(swigCPtr, keyToHandler);
    return ret;
  }

  public bool remKeyHandler(ArFunctor functor) {
    bool ret = AriaCSPINVOKE.ArKeyHandler_remKeyHandler__SWIG_1(swigCPtr, ArFunctor.getCPtr(functor));
    return ret;
  }

  public void takeKeys(bool blocking) {
    AriaCSPINVOKE.ArKeyHandler_takeKeys__SWIG_0(swigCPtr, blocking);
  }

  public void takeKeys() {
    AriaCSPINVOKE.ArKeyHandler_takeKeys__SWIG_1(swigCPtr);
  }

  public void restore() {
    AriaCSPINVOKE.ArKeyHandler_restore(swigCPtr);
  }

  public void checkKeys() {
    AriaCSPINVOKE.ArKeyHandler_checkKeys(swigCPtr);
  }

  public int getKey() {
    int ret = AriaCSPINVOKE.ArKeyHandler_getKey(swigCPtr);
    return ret;
  }

  public enum KEY {
    UP = 256,
    DOWN,
    LEFT,
    RIGHT,
    ESCAPE,
    SPACE,
    TAB,
    ENTER,
    BACKSPACE,
    _StartFKeys,
    F1,
    F2,
    F3,
    F4,
    F5,
    F6,
    F7,
    F8,
    F9,
    F10,
    F11,
    F12,
    _EndFKeys,
    PAGEUP,
    PAGEDOWN,
    HOME,
    END,
    INSERT,
    DEL
  }

}

}
